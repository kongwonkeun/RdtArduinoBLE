
RdtBLE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000a07c  00002000  00002000  00002000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000002a0  20000000  0000c07c  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000e10  200002a0  0000c31c  000102a0  2**2
                  ALLOC
  3 .ARM.attributes 00000028  00000000  00000000  000102a0  2**0
                  CONTENTS, READONLY
  4 .comment      00000059  00000000  00000000  000102c8  2**0
                  CONTENTS, READONLY
  5 .debug_info   000bfa6f  00000000  00000000  00010321  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000edb8  00000000  00000000  000cfd90  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_loc    00014cbe  00000000  00000000  000deb48  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_aranges 00001888  00000000  00000000  000f3806  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00002b20  00000000  00000000  000f508e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_macro  000245ab  00000000  00000000  000f7bae  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0001d91a  00000000  00000000  0011c159  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00089213  00000000  00000000  00139a73  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00004c38  00000000  00000000  001c2c88  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00002000 <exception_table>:
    2000:	00 80 00 20 e1 52 00 00 c9 52 00 00 c9 52 00 00     ... .R...R...R..
	...
    202c:	c9 52 00 00 00 00 00 00 00 00 00 00 c9 52 00 00     .R...........R..
    203c:	35 53 00 00 c9 52 00 00 c9 52 00 00 c9 52 00 00     5S...R...R...R..
    204c:	c9 52 00 00 c9 52 00 00 c9 52 00 00 c9 52 00 00     .R...R...R...R..
    205c:	cd 52 00 00 c9 52 00 00 c9 52 00 00 c9 52 00 00     .R...R...R...R..
    206c:	c9 52 00 00 c9 52 00 00 b1 6b 00 00 a1 6b 00 00     .R...R...k...k..
    207c:	c9 52 00 00 c9 52 00 00 c9 52 00 00 c9 52 00 00     .R...R...R...R..
    208c:	c9 52 00 00 85 51 00 00 c9 52 00 00 c9 52 00 00     .R...Q...R...R..
    209c:	c9 52 00 00 c9 52 00 00 c9 52 00 00 c9 52 00 00     .R...R...R...R..
    20ac:	c9 52 00 00 00 00 00 00                             .R......

000020b4 <__do_global_dtors_aux>:
    20b4:	b510      	push	{r4, lr}
    20b6:	4c06      	ldr	r4, [pc, #24]	; (20d0 <__do_global_dtors_aux+0x1c>)
    20b8:	7823      	ldrb	r3, [r4, #0]
    20ba:	2b00      	cmp	r3, #0
    20bc:	d107      	bne.n	20ce <__do_global_dtors_aux+0x1a>
    20be:	4b05      	ldr	r3, [pc, #20]	; (20d4 <__do_global_dtors_aux+0x20>)
    20c0:	2b00      	cmp	r3, #0
    20c2:	d002      	beq.n	20ca <__do_global_dtors_aux+0x16>
    20c4:	4804      	ldr	r0, [pc, #16]	; (20d8 <__do_global_dtors_aux+0x24>)
    20c6:	e000      	b.n	20ca <__do_global_dtors_aux+0x16>
    20c8:	bf00      	nop
    20ca:	2301      	movs	r3, #1
    20cc:	7023      	strb	r3, [r4, #0]
    20ce:	bd10      	pop	{r4, pc}
    20d0:	200002a0 	.word	0x200002a0
    20d4:	00000000 	.word	0x00000000
    20d8:	0000c078 	.word	0x0000c078

000020dc <frame_dummy>:
    20dc:	4b08      	ldr	r3, [pc, #32]	; (2100 <frame_dummy+0x24>)
    20de:	b510      	push	{r4, lr}
    20e0:	2b00      	cmp	r3, #0
    20e2:	d003      	beq.n	20ec <frame_dummy+0x10>
    20e4:	4907      	ldr	r1, [pc, #28]	; (2104 <frame_dummy+0x28>)
    20e6:	4808      	ldr	r0, [pc, #32]	; (2108 <frame_dummy+0x2c>)
    20e8:	e000      	b.n	20ec <frame_dummy+0x10>
    20ea:	bf00      	nop
    20ec:	4807      	ldr	r0, [pc, #28]	; (210c <frame_dummy+0x30>)
    20ee:	6803      	ldr	r3, [r0, #0]
    20f0:	2b00      	cmp	r3, #0
    20f2:	d100      	bne.n	20f6 <frame_dummy+0x1a>
    20f4:	bd10      	pop	{r4, pc}
    20f6:	4b06      	ldr	r3, [pc, #24]	; (2110 <frame_dummy+0x34>)
    20f8:	2b00      	cmp	r3, #0
    20fa:	d0fb      	beq.n	20f4 <frame_dummy+0x18>
    20fc:	4798      	blx	r3
    20fe:	e7f9      	b.n	20f4 <frame_dummy+0x18>
    2100:	00000000 	.word	0x00000000
    2104:	200002a4 	.word	0x200002a4
    2108:	0000c078 	.word	0x0000c078
    210c:	2000029c 	.word	0x2000029c
    2110:	00000000 	.word	0x00000000

00002114 <_ZN12BLEAttributeD1Ev>:
{
}

BLEAttribute::~BLEAttribute()
{
}
    2114:	4770      	bx	lr

00002116 <_ZNK12BLEAttribute4typeEv>:
}

enum BLEAttributeType BLEAttribute::type() const
{
  return BLETypeUnknown;
}
    2116:	2000      	movs	r0, #0
    2118:	4770      	bx	lr

0000211a <_ZN12BLEAttributeD0Ev>:
BLEAttribute::~BLEAttribute()
    211a:	b510      	push	{r4, lr}
    211c:	0004      	movs	r4, r0
}
    211e:	f003 f997 	bl	5450 <_ZdlPv>
    2122:	0020      	movs	r0, r4
    2124:	bd10      	pop	{r4, pc}
	...

00002128 <_ZN12BLEAttributeC1EPKc>:
  _refCount(0)
    2128:	4b05      	ldr	r3, [pc, #20]	; (2140 <_ZN12BLEAttributeC1EPKc+0x18>)
BLEAttribute::BLEAttribute(const char* uuid) :
    212a:	b510      	push	{r4, lr}
  _refCount(0)
    212c:	3308      	adds	r3, #8
BLEAttribute::BLEAttribute(const char* uuid) :
    212e:	0004      	movs	r4, r0
  _refCount(0)
    2130:	c008      	stmia	r0!, {r3}
    2132:	f000 fa4b 	bl	25cc <_ZN7BLEUuidC1EPKc>
    2136:	2300      	movs	r3, #0
}
    2138:	0020      	movs	r0, r4
  _refCount(0)
    213a:	61e3      	str	r3, [r4, #28]
}
    213c:	bd10      	pop	{r4, pc}
    213e:	46c0      	nop			; (mov r8, r8)
    2140:	0000b68c 	.word	0x0000b68c

00002144 <_ZNK12BLEAttribute4uuidEv>:
{
    2144:	b510      	push	{r4, lr}
  return _uuid.str();
    2146:	3004      	adds	r0, #4
    2148:	f000 fa7a 	bl	2640 <_ZNK7BLEUuid3strEv>
}
    214c:	bd10      	pop	{r4, pc}

0000214e <_ZNK12BLEAttribute8uuidDataEv>:
{
    214e:	b510      	push	{r4, lr}
  return _uuid.data();
    2150:	3004      	adds	r0, #4
    2152:	f000 fa77 	bl	2644 <_ZNK7BLEUuid4dataEv>
}
    2156:	bd10      	pop	{r4, pc}

00002158 <_ZNK12BLEAttribute10uuidLengthEv>:
{
    2158:	b510      	push	{r4, lr}
  return _uuid.length();
    215a:	3004      	adds	r0, #4
    215c:	f000 fa74 	bl	2648 <_ZNK7BLEUuid6lengthEv>
}
    2160:	bd10      	pop	{r4, pc}

00002162 <_ZN12BLEAttribute6retainEv>:

int BLEAttribute::retain()
{
  _refCount++;
    2162:	69c3      	ldr	r3, [r0, #28]
    2164:	3301      	adds	r3, #1
    2166:	61c3      	str	r3, [r0, #28]

  return _refCount;
}
    2168:	0018      	movs	r0, r3
    216a:	4770      	bx	lr

0000216c <_ZN12BLEAttribute7releaseEv>:

int BLEAttribute::release()
{
  _refCount--;
    216c:	69c3      	ldr	r3, [r0, #28]
    216e:	3b01      	subs	r3, #1
    2170:	61c3      	str	r3, [r0, #28]

  return _refCount;
}
    2172:	0018      	movs	r0, r3
    2174:	4770      	bx	lr
	...

00002178 <_ZN17BLECharacteristicD1Ev>:
BLECharacteristic::BLECharacteristic(const char* uuid, uint8_t properties, const char* value) :
  BLECharacteristic(new BLELocalCharacteristic(uuid, properties, value))
{
}

BLECharacteristic::~BLECharacteristic()
    2178:	4b09      	ldr	r3, [pc, #36]	; (21a0 <_ZN17BLECharacteristicD1Ev+0x28>)
    217a:	b510      	push	{r4, lr}
    217c:	3308      	adds	r3, #8
    217e:	0004      	movs	r4, r0
    2180:	6003      	str	r3, [r0, #0]
{
  if (_local && _local->release() <= 0) {
    2182:	6840      	ldr	r0, [r0, #4]
    2184:	2800      	cmp	r0, #0
    2186:	d009      	beq.n	219c <_ZN17BLECharacteristicD1Ev+0x24>
    2188:	f7ff fff0 	bl	216c <_ZN12BLEAttribute7releaseEv>
    218c:	2800      	cmp	r0, #0
    218e:	dc05      	bgt.n	219c <_ZN17BLECharacteristicD1Ev+0x24>
    delete _local;
    2190:	6860      	ldr	r0, [r4, #4]
    2192:	2800      	cmp	r0, #0
    2194:	d002      	beq.n	219c <_ZN17BLECharacteristicD1Ev+0x24>
    2196:	6803      	ldr	r3, [r0, #0]
    2198:	685b      	ldr	r3, [r3, #4]
    219a:	4798      	blx	r3
  }
}
    219c:	0020      	movs	r0, r4
    219e:	bd10      	pop	{r4, pc}
    21a0:	0000b6a0 	.word	0x0000b6a0

000021a4 <_ZN17BLECharacteristicD0Ev>:
BLECharacteristic::~BLECharacteristic()
    21a4:	b510      	push	{r4, lr}
    21a6:	0004      	movs	r4, r0
}
    21a8:	f7ff ffe6 	bl	2178 <_ZN17BLECharacteristicD1Ev>
    21ac:	0020      	movs	r0, r4
    21ae:	f003 f94f 	bl	5450 <_ZdlPv>
    21b2:	0020      	movs	r0, r4
    21b4:	bd10      	pop	{r4, pc}
	...

000021b8 <_ZN17BLECharacteristicC1EP22BLELocalCharacteristic>:
  _local(local)
    21b8:	4b06      	ldr	r3, [pc, #24]	; (21d4 <_ZN17BLECharacteristicC1EP22BLELocalCharacteristic+0x1c>)
BLECharacteristic::BLECharacteristic(BLELocalCharacteristic* local) :
    21ba:	b510      	push	{r4, lr}
  _local(local)
    21bc:	3308      	adds	r3, #8
BLECharacteristic::BLECharacteristic(BLELocalCharacteristic* local) :
    21be:	0004      	movs	r4, r0
  _local(local)
    21c0:	6003      	str	r3, [r0, #0]
    21c2:	6041      	str	r1, [r0, #4]
  if (_local) {
    21c4:	2900      	cmp	r1, #0
    21c6:	d002      	beq.n	21ce <_ZN17BLECharacteristicC1EP22BLELocalCharacteristic+0x16>
    _local->retain();
    21c8:	0008      	movs	r0, r1
    21ca:	f7ff ffca 	bl	2162 <_ZN12BLEAttribute6retainEv>
}
    21ce:	0020      	movs	r0, r4
    21d0:	bd10      	pop	{r4, pc}
    21d2:	46c0      	nop			; (mov r8, r8)
    21d4:	0000b6a0 	.word	0x0000b6a0

000021d8 <_ZN17BLECharacteristicC1EPKchib>:
BLECharacteristic::BLECharacteristic(const char* uuid, uint8_t properties, int valueSize, bool fixedLength) :
    21d8:	b5f0      	push	{r4, r5, r6, r7, lr}
    21da:	b085      	sub	sp, #20
    21dc:	0004      	movs	r4, r0
    21de:	001e      	movs	r6, r3
  BLECharacteristic(new BLELocalCharacteristic(uuid, properties, valueSize, fixedLength))
    21e0:	2054      	movs	r0, #84	; 0x54
BLECharacteristic::BLECharacteristic(const char* uuid, uint8_t properties, int valueSize, bool fixedLength) :
    21e2:	ab0a      	add	r3, sp, #40	; 0x28
    21e4:	781f      	ldrb	r7, [r3, #0]
    21e6:	9102      	str	r1, [sp, #8]
    21e8:	9203      	str	r2, [sp, #12]
  BLECharacteristic(new BLELocalCharacteristic(uuid, properties, valueSize, fixedLength))
    21ea:	f003 f92d 	bl	5448 <_Znwj>
    21ee:	0005      	movs	r5, r0
    21f0:	0033      	movs	r3, r6
    21f2:	9a03      	ldr	r2, [sp, #12]
    21f4:	9902      	ldr	r1, [sp, #8]
    21f6:	9700      	str	r7, [sp, #0]
    21f8:	f000 faca 	bl	2790 <_ZN22BLELocalCharacteristicC1EPKchib>
    21fc:	0029      	movs	r1, r5
    21fe:	0020      	movs	r0, r4
    2200:	f7ff ffda 	bl	21b8 <_ZN17BLECharacteristicC1EP22BLELocalCharacteristic>
}
    2204:	0020      	movs	r0, r4
    2206:	b005      	add	sp, #20
    2208:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000220a <_ZN17BLECharacteristic10writeValueEPKhi>:
  return 0;
}

int BLECharacteristic::writeValue(const uint8_t value[], int length)
{
  if (_local) {
    220a:	6843      	ldr	r3, [r0, #4]
{
    220c:	b510      	push	{r4, lr}
    return _local->writeValue(value, length);
  }

  return 0;
    220e:	1e18      	subs	r0, r3, #0
  if (_local) {
    2210:	d001      	beq.n	2216 <_ZN17BLECharacteristic10writeValueEPKhi+0xc>
    return _local->writeValue(value, length);
    2212:	f000 fa29 	bl	2668 <_ZN22BLELocalCharacteristic10writeValueEPKhi>
}
    2216:	bd10      	pop	{r4, pc}

00002218 <_ZN17BLECharacteristic10writeValueEPKc>:

int BLECharacteristic::writeValue(const char* value)
{
  if (_local) {
    2218:	6843      	ldr	r3, [r0, #4]
{
    221a:	b510      	push	{r4, lr}
    return _local->writeValue(value);
  }

  return 0;
    221c:	1e18      	subs	r0, r3, #0
  if (_local) {
    221e:	d001      	beq.n	2224 <_ZN17BLECharacteristic10writeValueEPKc+0xc>
    return _local->writeValue(value);
    2220:	f000 fa7c 	bl	271c <_ZN22BLELocalCharacteristic10writeValueEPKc>
}
    2224:	bd10      	pop	{r4, pc}

00002226 <_ZN17BLECharacteristic5localEv>:
  return (_local != NULL);
}

BLELocalCharacteristic* BLECharacteristic::local()
{
  return _local;
    2226:	6840      	ldr	r0, [r0, #4]
}
    2228:	4770      	bx	lr

0000222a <_ZN9BLEDeviceD1Ev>:
  memcpy(_address, address, sizeof(_address));
}

BLEDevice::~BLEDevice()
{
}
    222a:	4770      	bx	lr

0000222c <_ZN9BLEDeviceD0Ev>:
BLEDevice::~BLEDevice()
    222c:	b510      	push	{r4, lr}
    222e:	0004      	movs	r4, r0
}
    2230:	f003 f90e 	bl	5450 <_ZdlPv>
    2234:	0020      	movs	r0, r4
    2236:	bd10      	pop	{r4, pc}

00002238 <_ZN9BLEDevice4pollEv>:

void BLEDevice::poll()
{
    2238:	b510      	push	{r4, lr}
  HCI.poll();
    223a:	4802      	ldr	r0, [pc, #8]	; (2244 <_ZN9BLEDevice4pollEv+0xc>)
    223c:	f002 f9ba 	bl	45b4 <_ZN8HCIClass4pollEv>
}
    2240:	bd10      	pop	{r4, pc}
    2242:	46c0      	nop			; (mov r8, r8)
    2244:	20000480 	.word	0x20000480

00002248 <_ZN9BLEDevice4pollEm>:

void BLEDevice::poll(unsigned long timeout)
{
    2248:	b510      	push	{r4, lr}
  HCI.poll(timeout);
    224a:	4802      	ldr	r0, [pc, #8]	; (2254 <_ZN9BLEDevice4pollEm+0xc>)
    224c:	f002 f94a 	bl	44e4 <_ZN8HCIClass4pollEm>
}
    2250:	bd10      	pop	{r4, pc}
    2252:	46c0      	nop			; (mov r8, r8)
    2254:	20000480 	.word	0x20000480

00002258 <_ZN9BLEDevice10disconnectEv>:

  return ATT.connected(_handle, _address);
}

bool BLEDevice::disconnect()
{
    2258:	b510      	push	{r4, lr}
  if (_handle != 0xffff) {
    225a:	4b06      	ldr	r3, [pc, #24]	; (2274 <_ZN9BLEDevice10disconnectEv+0x1c>)
    225c:	8881      	ldrh	r1, [r0, #4]
    return HCI.disconnect(_handle);
  }

  return false;
    225e:	2000      	movs	r0, #0
  if (_handle != 0xffff) {
    2260:	4299      	cmp	r1, r3
    2262:	d005      	beq.n	2270 <_ZN9BLEDevice10disconnectEv+0x18>
    return HCI.disconnect(_handle);
    2264:	4804      	ldr	r0, [pc, #16]	; (2278 <_ZN9BLEDevice10disconnectEv+0x20>)
    2266:	f002 fb8b 	bl	4980 <_ZN8HCIClass10disconnectEt>
    226a:	1e43      	subs	r3, r0, #1
    226c:	4198      	sbcs	r0, r3
    226e:	b2c0      	uxtb	r0, r0
}
    2270:	bd10      	pop	{r4, pc}
    2272:	46c0      	nop			; (mov r8, r8)
    2274:	0000ffff 	.word	0x0000ffff
    2278:	20000480 	.word	0x20000480

0000227c <_ZNK9BLEDevice7addressEv>:

String BLEDevice::address() const
{
    227c:	b510      	push	{r4, lr}
    227e:	0004      	movs	r4, r0
  char result[18];
  sprintf(result, "%02x:%02x:%02x:%02x:%02x:%02x", _address[5], _address[4], _address[3], _address[2], _address[1], _address[0]);
    2280:	7988      	ldrb	r0, [r1, #6]
{
    2282:	b08a      	sub	sp, #40	; 0x28
  sprintf(result, "%02x:%02x:%02x:%02x:%02x:%02x", _address[5], _address[4], _address[3], _address[2], _address[1], _address[0]);
    2284:	7a8b      	ldrb	r3, [r1, #10]
    2286:	7aca      	ldrb	r2, [r1, #11]
    2288:	9003      	str	r0, [sp, #12]
    228a:	79c8      	ldrb	r0, [r1, #7]
    228c:	9002      	str	r0, [sp, #8]
    228e:	7a08      	ldrb	r0, [r1, #8]
    2290:	9001      	str	r0, [sp, #4]
    2292:	7a49      	ldrb	r1, [r1, #9]
    2294:	a805      	add	r0, sp, #20
    2296:	9100      	str	r1, [sp, #0]
    2298:	4904      	ldr	r1, [pc, #16]	; (22ac <_ZNK9BLEDevice7addressEv+0x30>)
    229a:	f007 fdb9 	bl	9e10 <siprintf>

  return result;
    229e:	a905      	add	r1, sp, #20
    22a0:	0020      	movs	r0, r4
    22a2:	f004 fc57 	bl	6b54 <_ZN6StringC1EPKc>
}
    22a6:	0020      	movs	r0, r4
    22a8:	b00a      	add	sp, #40	; 0x28
    22aa:	bd10      	pop	{r4, pc}
    22ac:	0000b6b0 	.word	0x0000b6b0

000022b0 <_ZN9BLEDevice4rssiEv>:

int BLEDevice::rssi()
{
    22b0:	b510      	push	{r4, lr}
  if (_handle != 0xffff) {
    22b2:	4b04      	ldr	r3, [pc, #16]	; (22c4 <_ZN9BLEDevice4rssiEv+0x14>)
    22b4:	8881      	ldrh	r1, [r0, #4]
    return HCI.readRssi(_handle);
  }

  return 127;
    22b6:	207f      	movs	r0, #127	; 0x7f
  if (_handle != 0xffff) {
    22b8:	4299      	cmp	r1, r3
    22ba:	d002      	beq.n	22c2 <_ZN9BLEDevice4rssiEv+0x12>
    return HCI.readRssi(_handle);
    22bc:	4802      	ldr	r0, [pc, #8]	; (22c8 <_ZN9BLEDevice4rssiEv+0x18>)
    22be:	f002 fa11 	bl	46e4 <_ZN8HCIClass8readRssiEt>
}
    22c2:	bd10      	pop	{r4, pc}
    22c4:	0000ffff 	.word	0x0000ffff
    22c8:	20000480 	.word	0x20000480

000022cc <_ZNK9BLEDevicecvbEv>:

BLEDevice::operator bool() const
{
    22cc:	b513      	push	{r0, r1, r4, lr}
    22ce:	0004      	movs	r4, r0
  uint8_t zeros[6] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,};
    22d0:	2206      	movs	r2, #6
    22d2:	2100      	movs	r1, #0
    22d4:	4668      	mov	r0, sp
    22d6:	f007 f85f 	bl	9398 <memset>

  return ((_handle != 0xffff) && memcmp(_address, zeros, sizeof(zeros)) != 0);
    22da:	88a2      	ldrh	r2, [r4, #4]
    22dc:	4b06      	ldr	r3, [pc, #24]	; (22f8 <_ZNK9BLEDevicecvbEv+0x2c>)
    22de:	2000      	movs	r0, #0
    22e0:	429a      	cmp	r2, r3
    22e2:	d007      	beq.n	22f4 <_ZNK9BLEDevicecvbEv+0x28>
    22e4:	1da0      	adds	r0, r4, #6
    22e6:	2206      	movs	r2, #6
    22e8:	4669      	mov	r1, sp
    22ea:	f007 f82b 	bl	9344 <memcmp>
    22ee:	1e43      	subs	r3, r0, #1
    22f0:	4198      	sbcs	r0, r3
    22f2:	b2c0      	uxtb	r0, r0
}
    22f4:	bd16      	pop	{r1, r2, r4, pc}
    22f6:	46c0      	nop			; (mov r8, r8)
    22f8:	0000ffff 	.word	0x0000ffff

000022fc <_ZNK9BLEDeviceeqERKS_>:

bool BLEDevice::operator==(const BLEDevice& rhs) const
{
    22fc:	b510      	push	{r4, lr}
  return ((_handle == rhs._handle) && memcmp(_address, rhs._address, sizeof(_address)) == 0);
    22fe:	8884      	ldrh	r4, [r0, #4]
    2300:	888a      	ldrh	r2, [r1, #4]
    2302:	2300      	movs	r3, #0
    2304:	4294      	cmp	r4, r2
    2306:	d107      	bne.n	2318 <_ZNK9BLEDeviceeqERKS_+0x1c>
    2308:	3106      	adds	r1, #6
    230a:	3006      	adds	r0, #6
    230c:	2206      	movs	r2, #6
    230e:	f007 f819 	bl	9344 <memcmp>
    2312:	4243      	negs	r3, r0
    2314:	4143      	adcs	r3, r0
    2316:	b2db      	uxtb	r3, r3
}
    2318:	0018      	movs	r0, r3
    231a:	bd10      	pop	{r4, pc}

0000231c <_ZNK9BLEDevice9connectedEv>:
{
    231c:	b510      	push	{r4, lr}
    231e:	0004      	movs	r4, r0
  HCI.poll();
    2320:	4807      	ldr	r0, [pc, #28]	; (2340 <_ZNK9BLEDevice9connectedEv+0x24>)
    2322:	f002 f947 	bl	45b4 <_ZN8HCIClass4pollEv>
  if (!(*this)) {
    2326:	6823      	ldr	r3, [r4, #0]
    2328:	0020      	movs	r0, r4
    232a:	6a1b      	ldr	r3, [r3, #32]
    232c:	4798      	blx	r3
    232e:	2800      	cmp	r0, #0
    2330:	d004      	beq.n	233c <_ZNK9BLEDevice9connectedEv+0x20>
  return ATT.connected(_handle, _address);
    2332:	1da2      	adds	r2, r4, #6
    2334:	88a1      	ldrh	r1, [r4, #4]
    2336:	4803      	ldr	r0, [pc, #12]	; (2344 <_ZNK9BLEDevice9connectedEv+0x28>)
    2338:	f000 fe26 	bl	2f88 <_ZNK8ATTClass9connectedEtPKh>
}
    233c:	bd10      	pop	{r4, pc}
    233e:	46c0      	nop			; (mov r8, r8)
    2340:	20000480 	.word	0x20000480
    2344:	200002c8 	.word	0x200002c8

00002348 <_ZNK9BLEDeviceneERKS_>:

bool BLEDevice::operator!=(const BLEDevice& rhs) const
{
    2348:	b510      	push	{r4, lr}
  return ((_handle != rhs._handle) || memcmp(_address, rhs._address, sizeof(_address)) != 0);
    234a:	8884      	ldrh	r4, [r0, #4]
    234c:	888a      	ldrh	r2, [r1, #4]
    234e:	2301      	movs	r3, #1
    2350:	4294      	cmp	r4, r2
    2352:	d107      	bne.n	2364 <_ZNK9BLEDeviceneERKS_+0x1c>
    2354:	3106      	adds	r1, #6
    2356:	3006      	adds	r0, #6
    2358:	2206      	movs	r2, #6
    235a:	f006 fff3 	bl	9344 <memcmp>
    235e:	1e43      	subs	r3, r0, #1
    2360:	4198      	sbcs	r0, r3
    2362:	b2c3      	uxtb	r3, r0
}
    2364:	0018      	movs	r0, r3
    2366:	bd10      	pop	{r4, pc}

00002368 <_ZN9BLEDeviceC1Ev>:
  _handle(0xffff)
    2368:	4b07      	ldr	r3, [pc, #28]	; (2388 <_ZN9BLEDeviceC1Ev+0x20>)
BLEDevice::BLEDevice() :
    236a:	b510      	push	{r4, lr}
  _handle(0xffff)
    236c:	3308      	adds	r3, #8
    236e:	6003      	str	r3, [r0, #0]
    2370:	2301      	movs	r3, #1
BLEDevice::BLEDevice() :
    2372:	0004      	movs	r4, r0
  _handle(0xffff)
    2374:	425b      	negs	r3, r3
    2376:	8083      	strh	r3, [r0, #4]
  memset(_address, 0x00, sizeof(_address));
    2378:	2206      	movs	r2, #6
    237a:	2100      	movs	r1, #0
    237c:	3006      	adds	r0, #6
    237e:	f007 f80b 	bl	9398 <memset>
}
    2382:	0020      	movs	r0, r4
    2384:	bd10      	pop	{r4, pc}
    2386:	46c0      	nop			; (mov r8, r8)
    2388:	0000b6d0 	.word	0x0000b6d0

0000238c <_ZN9BLEDeviceC1EtPh>:
BLEDevice::BLEDevice(uint16_t handle, uint8_t address[6]) :
    238c:	b510      	push	{r4, lr}
    238e:	0004      	movs	r4, r0
    2390:	0008      	movs	r0, r1
  _handle(handle)
    2392:	4b05      	ldr	r3, [pc, #20]	; (23a8 <_ZN9BLEDeviceC1EtPh+0x1c>)
BLEDevice::BLEDevice(uint16_t handle, uint8_t address[6]) :
    2394:	0011      	movs	r1, r2
  _handle(handle)
    2396:	3308      	adds	r3, #8
    2398:	80a0      	strh	r0, [r4, #4]
    239a:	6023      	str	r3, [r4, #0]
  memcpy(_address, address, sizeof(_address));
    239c:	1da0      	adds	r0, r4, #6
    239e:	2206      	movs	r2, #6
    23a0:	f006 ffdf 	bl	9362 <memcpy>
}
    23a4:	0020      	movs	r0, r4
    23a6:	bd10      	pop	{r4, pc}
    23a8:	0000b6d0 	.word	0x0000b6d0

000023ac <_ZN10BLEServiceD1Ev>:
BLEService::BLEService(const char* uuid) :
  BLEService(new BLELocalService(uuid))
{
}

BLEService::~BLEService()
    23ac:	4b09      	ldr	r3, [pc, #36]	; (23d4 <_ZN10BLEServiceD1Ev+0x28>)
    23ae:	b510      	push	{r4, lr}
    23b0:	3308      	adds	r3, #8
    23b2:	0004      	movs	r4, r0
    23b4:	6003      	str	r3, [r0, #0]
{
  if (_local && _local->release() <= 0) {
    23b6:	6840      	ldr	r0, [r0, #4]
    23b8:	2800      	cmp	r0, #0
    23ba:	d009      	beq.n	23d0 <_ZN10BLEServiceD1Ev+0x24>
    23bc:	f7ff fed6 	bl	216c <_ZN12BLEAttribute7releaseEv>
    23c0:	2800      	cmp	r0, #0
    23c2:	dc05      	bgt.n	23d0 <_ZN10BLEServiceD1Ev+0x24>
    delete _local;
    23c4:	6860      	ldr	r0, [r4, #4]
    23c6:	2800      	cmp	r0, #0
    23c8:	d002      	beq.n	23d0 <_ZN10BLEServiceD1Ev+0x24>
    23ca:	6803      	ldr	r3, [r0, #0]
    23cc:	685b      	ldr	r3, [r3, #4]
    23ce:	4798      	blx	r3
  }
}
    23d0:	0020      	movs	r0, r4
    23d2:	bd10      	pop	{r4, pc}
    23d4:	0000b704 	.word	0x0000b704

000023d8 <_ZN10BLEServiceD0Ev>:
BLEService::~BLEService()
    23d8:	b510      	push	{r4, lr}
    23da:	0004      	movs	r4, r0
}
    23dc:	f7ff ffe6 	bl	23ac <_ZN10BLEServiceD1Ev>
    23e0:	0020      	movs	r0, r4
    23e2:	f003 f835 	bl	5450 <_ZdlPv>
    23e6:	0020      	movs	r0, r4
    23e8:	bd10      	pop	{r4, pc}
	...

000023ec <_ZN10BLEServiceC1EP15BLELocalService>:
  _local(local)
    23ec:	4b06      	ldr	r3, [pc, #24]	; (2408 <_ZN10BLEServiceC1EP15BLELocalService+0x1c>)
BLEService::BLEService(BLELocalService* local) :
    23ee:	b510      	push	{r4, lr}
  _local(local)
    23f0:	3308      	adds	r3, #8
BLEService::BLEService(BLELocalService* local) :
    23f2:	0004      	movs	r4, r0
  _local(local)
    23f4:	6003      	str	r3, [r0, #0]
    23f6:	6041      	str	r1, [r0, #4]
  if (_local) {
    23f8:	2900      	cmp	r1, #0
    23fa:	d002      	beq.n	2402 <_ZN10BLEServiceC1EP15BLELocalService+0x16>
    _local->retain();
    23fc:	0008      	movs	r0, r1
    23fe:	f7ff feb0 	bl	2162 <_ZN12BLEAttribute6retainEv>
}
    2402:	0020      	movs	r0, r4
    2404:	bd10      	pop	{r4, pc}
    2406:	46c0      	nop			; (mov r8, r8)
    2408:	0000b704 	.word	0x0000b704

0000240c <_ZN10BLEServiceC1EPKc>:
BLEService::BLEService(const char* uuid) :
    240c:	b570      	push	{r4, r5, r6, lr}
    240e:	0004      	movs	r4, r0
  BLEService(new BLELocalService(uuid))
    2410:	2030      	movs	r0, #48	; 0x30
BLEService::BLEService(const char* uuid) :
    2412:	000e      	movs	r6, r1
  BLEService(new BLELocalService(uuid))
    2414:	f003 f818 	bl	5448 <_Znwj>
    2418:	0005      	movs	r5, r0
    241a:	0031      	movs	r1, r6
    241c:	f000 fc3c 	bl	2c98 <_ZN15BLELocalServiceC1EPKc>
    2420:	0029      	movs	r1, r5
    2422:	0020      	movs	r0, r4
    2424:	f7ff ffe2 	bl	23ec <_ZN10BLEServiceC1EP15BLELocalService>
}
    2428:	0020      	movs	r0, r4
    242a:	bd70      	pop	{r4, r5, r6, pc}

0000242c <_ZNK10BLEService4uuidEv>:

const char* BLEService::uuid() const
{
  if (_local) {
    242c:	6843      	ldr	r3, [r0, #4]
{
    242e:	b510      	push	{r4, lr}
    return _local->uuid();
  }

  return "";
    2430:	4803      	ldr	r0, [pc, #12]	; (2440 <_ZNK10BLEService4uuidEv+0x14>)
  if (_local) {
    2432:	2b00      	cmp	r3, #0
    2434:	d002      	beq.n	243c <_ZNK10BLEService4uuidEv+0x10>
    return _local->uuid();
    2436:	0018      	movs	r0, r3
    2438:	f7ff fe84 	bl	2144 <_ZNK12BLEAttribute4uuidEv>
}
    243c:	bd10      	pop	{r4, pc}
    243e:	46c0      	nop			; (mov r8, r8)
    2440:	0000b993 	.word	0x0000b993

00002444 <_ZN10BLEService17addCharacteristicER17BLECharacteristic>:

void BLEService::addCharacteristic(BLECharacteristic& characteristic)
{
  if (_local) {
    2444:	6840      	ldr	r0, [r0, #4]
{
    2446:	b510      	push	{r4, lr}
  if (_local) {
    2448:	2800      	cmp	r0, #0
    244a:	d001      	beq.n	2450 <_ZN10BLEService17addCharacteristicER17BLECharacteristic+0xc>
    _local->addCharacteristic(characteristic);
    244c:	f000 fc65 	bl	2d1a <_ZN15BLELocalService17addCharacteristicER17BLECharacteristic>
  }
}
    2450:	bd10      	pop	{r4, pc}

00002452 <_ZN10BLEService5localEv>:

BLELocalService* BLEService::local()
{
  return _local;
    2452:	6840      	ldr	r0, [r0, #4]
}
    2454:	4770      	bx	lr
	...

00002458 <_ZN23BLEStringCharacteristicD1Ev>:

#include <Arduino.h>

#include "BLECharacteristic.h"

class BLEStringCharacteristic : public BLECharacteristic
    2458:	b510      	push	{r4, lr}
    245a:	0004      	movs	r4, r0
    245c:	4b02      	ldr	r3, [pc, #8]	; (2468 <_ZN23BLEStringCharacteristicD1Ev+0x10>)
    245e:	6003      	str	r3, [r0, #0]
    2460:	f7ff fe8a 	bl	2178 <_ZN17BLECharacteristicD1Ev>
    2464:	0020      	movs	r0, r4
    2466:	bd10      	pop	{r4, pc}
    2468:	0000b71c 	.word	0x0000b71c

0000246c <_ZN23BLEStringCharacteristicD0Ev>:
    246c:	b510      	push	{r4, lr}
    246e:	0004      	movs	r4, r0
    2470:	f7ff fff2 	bl	2458 <_ZN23BLEStringCharacteristicD1Ev>
    2474:	0020      	movs	r0, r4
    2476:	f002 ffeb 	bl	5450 <_ZdlPv>
    247a:	0020      	movs	r0, r4
    247c:	bd10      	pop	{r4, pc}
	...

00002480 <_ZN23BLEStringCharacteristicC1EPKchi>:
  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
*/

#include "BLEStringCharacteristic.h"

BLEStringCharacteristic::BLEStringCharacteristic(const char* uuid, unsigned char properties, int valueSize) :
    2480:	b513      	push	{r0, r1, r4, lr}
    2482:	0004      	movs	r4, r0
  BLECharacteristic(uuid, properties, valueSize)
    2484:	2000      	movs	r0, #0
    2486:	9000      	str	r0, [sp, #0]
    2488:	0020      	movs	r0, r4
    248a:	f7ff fea5 	bl	21d8 <_ZN17BLECharacteristicC1EPKchib>
    248e:	4b02      	ldr	r3, [pc, #8]	; (2498 <_ZN23BLEStringCharacteristicC1EPKchi+0x18>)
{
}
    2490:	0020      	movs	r0, r4
  BLECharacteristic(uuid, properties, valueSize)
    2492:	6023      	str	r3, [r4, #0]
}
    2494:	bd16      	pop	{r1, r2, r4, pc}
    2496:	46c0      	nop			; (mov r8, r8)
    2498:	0000b71c 	.word	0x0000b71c

0000249c <_ZN23BLEStringCharacteristic10writeValueERK6String>:

int BLEStringCharacteristic::writeValue(const String& value)
{
    249c:	b510      	push	{r4, lr}
  return BLECharacteristic::writeValue(value.c_str());
    249e:	6809      	ldr	r1, [r1, #0]
    24a0:	f7ff feba 	bl	2218 <_ZN17BLECharacteristic10writeValueEPKc>
}
    24a4:	bd10      	pop	{r4, pc}
	...

000024a8 <_ZN22BLETypedCharacteristicIhED1Ev>:
#ifndef _BLE_TYPED_CHARACTERISTIC_H_
#define _BLE_TYPED_CHARACTERISTIC_H_

#include "BLECharacteristic.h"

template<typename T> class BLETypedCharacteristic : public BLECharacteristic
    24a8:	b510      	push	{r4, lr}
    24aa:	0004      	movs	r4, r0
    24ac:	4b02      	ldr	r3, [pc, #8]	; (24b8 <_ZN22BLETypedCharacteristicIhED1Ev+0x10>)
    24ae:	6003      	str	r3, [r0, #0]
    24b0:	f7ff fe62 	bl	2178 <_ZN17BLECharacteristicD1Ev>
    24b4:	0020      	movs	r0, r4
    24b6:	bd10      	pop	{r4, pc}
    24b8:	0000b72c 	.word	0x0000b72c

000024bc <_ZN22BLETypedCharacteristicIhED0Ev>:
    24bc:	b510      	push	{r4, lr}
    24be:	0004      	movs	r4, r0
    24c0:	f7ff fff2 	bl	24a8 <_ZN22BLETypedCharacteristicIhED1Ev>
    24c4:	0020      	movs	r0, r4
    24c6:	f002 ffc3 	bl	5450 <_ZdlPv>
    24ca:	0020      	movs	r0, r4
    24cc:	bd10      	pop	{r4, pc}
	...

000024d0 <_ZN21BLEByteCharacteristicD1Ev>:
class BLEUnsignedCharCharacteristic : public BLETypedCharacteristic<unsigned char> {
public:
  BLEUnsignedCharCharacteristic(const char* uuid, unsigned char properties);
};

class BLEByteCharacteristic : public BLETypedCharacteristic<byte> {
    24d0:	b510      	push	{r4, lr}
    24d2:	0004      	movs	r4, r0
    24d4:	4b02      	ldr	r3, [pc, #8]	; (24e0 <_ZN21BLEByteCharacteristicD1Ev+0x10>)
    24d6:	6003      	str	r3, [r0, #0]
    24d8:	f7ff ffe6 	bl	24a8 <_ZN22BLETypedCharacteristicIhED1Ev>
    24dc:	0020      	movs	r0, r4
    24de:	bd10      	pop	{r4, pc}
    24e0:	0000b73c 	.word	0x0000b73c

000024e4 <_ZN21BLEByteCharacteristicD0Ev>:
    24e4:	b510      	push	{r4, lr}
    24e6:	0004      	movs	r4, r0
    24e8:	f7ff fff2 	bl	24d0 <_ZN21BLEByteCharacteristicD1Ev>
    24ec:	0020      	movs	r0, r4
    24ee:	f002 ffaf 	bl	5450 <_ZdlPv>
    24f2:	0020      	movs	r0, r4
    24f4:	bd10      	pop	{r4, pc}
	...

000024f8 <_ZN22BLETypedCharacteristicItED1Ev>:
    24f8:	b510      	push	{r4, lr}
    24fa:	0004      	movs	r4, r0
    24fc:	4b02      	ldr	r3, [pc, #8]	; (2508 <_ZN22BLETypedCharacteristicItED1Ev+0x10>)
    24fe:	6003      	str	r3, [r0, #0]
    2500:	f7ff fe3a 	bl	2178 <_ZN17BLECharacteristicD1Ev>
    2504:	0020      	movs	r0, r4
    2506:	bd10      	pop	{r4, pc}
    2508:	0000b74c 	.word	0x0000b74c

0000250c <_ZN22BLETypedCharacteristicItED0Ev>:
    250c:	b510      	push	{r4, lr}
    250e:	0004      	movs	r4, r0
    2510:	f7ff fff2 	bl	24f8 <_ZN22BLETypedCharacteristicItED1Ev>
    2514:	0020      	movs	r0, r4
    2516:	f002 ff9b 	bl	5450 <_ZdlPv>
    251a:	0020      	movs	r0, r4
    251c:	bd10      	pop	{r4, pc}
	...

00002520 <_ZN21BLEWordCharacteristicD1Ev>:
class BLEUnsignedShortCharacteristic : public BLETypedCharacteristic<unsigned short> {
public:
  BLEUnsignedShortCharacteristic(const char* uuid, unsigned char properties);
};

class BLEWordCharacteristic : public BLETypedCharacteristic<word> {
    2520:	b510      	push	{r4, lr}
    2522:	0004      	movs	r4, r0
    2524:	4b02      	ldr	r3, [pc, #8]	; (2530 <_ZN21BLEWordCharacteristicD1Ev+0x10>)
    2526:	6003      	str	r3, [r0, #0]
    2528:	f7ff ffe6 	bl	24f8 <_ZN22BLETypedCharacteristicItED1Ev>
    252c:	0020      	movs	r0, r4
    252e:	bd10      	pop	{r4, pc}
    2530:	0000b75c 	.word	0x0000b75c

00002534 <_ZN21BLEWordCharacteristicD0Ev>:
    2534:	b510      	push	{r4, lr}
    2536:	0004      	movs	r4, r0
    2538:	f7ff fff2 	bl	2520 <_ZN21BLEWordCharacteristicD1Ev>
    253c:	0020      	movs	r0, r4
    253e:	f002 ff87 	bl	5450 <_ZdlPv>
    2542:	0020      	movs	r0, r4
    2544:	bd10      	pop	{r4, pc}
	...

00002548 <_ZN22BLETypedCharacteristicIhEC1EPKch>:

private:
  T byteSwap(T value);
};

template<typename T> BLETypedCharacteristic<T>::BLETypedCharacteristic(const char* uuid, unsigned char properties) :
    2548:	b530      	push	{r4, r5, lr}
  BLECharacteristic(uuid, properties, sizeof(T), true)
    254a:	2501      	movs	r5, #1
template<typename T> BLETypedCharacteristic<T>::BLETypedCharacteristic(const char* uuid, unsigned char properties) :
    254c:	0004      	movs	r4, r0
    254e:	b085      	sub	sp, #20
  BLECharacteristic(uuid, properties, sizeof(T), true)
    2550:	002b      	movs	r3, r5
    2552:	9500      	str	r5, [sp, #0]
    2554:	f7ff fe40 	bl	21d8 <_ZN17BLECharacteristicC1EPKchib>
    2558:	4b06      	ldr	r3, [pc, #24]	; (2574 <_ZN22BLETypedCharacteristicIhEC1EPKch+0x2c>)
    255a:	210f      	movs	r1, #15
    255c:	6023      	str	r3, [r4, #0]
    255e:	2300      	movs	r3, #0
    2560:	4469      	add	r1, sp
  writeValue(value);
}

template<typename T> int BLETypedCharacteristic<T>::writeValue(T value)
{
  return BLECharacteristic::writeValue((uint8_t*)&value, sizeof(T));
    2562:	002a      	movs	r2, r5
    2564:	0020      	movs	r0, r4
    2566:	700b      	strb	r3, [r1, #0]
    2568:	f7ff fe4f 	bl	220a <_ZN17BLECharacteristic10writeValueEPKhi>
}
    256c:	0020      	movs	r0, r4
    256e:	b005      	add	sp, #20
    2570:	bd30      	pop	{r4, r5, pc}
    2572:	46c0      	nop			; (mov r8, r8)
    2574:	0000b72c 	.word	0x0000b72c

00002578 <_ZN21BLEByteCharacteristicC1EPKch>:
BLEUnsignedCharCharacteristic::BLEUnsignedCharCharacteristic(const char* uuid, unsigned char properties) :
  BLETypedCharacteristic<unsigned char>(uuid, properties)
{
}

BLEByteCharacteristic::BLEByteCharacteristic(const char* uuid, unsigned char properties) :
    2578:	b510      	push	{r4, lr}
    257a:	0004      	movs	r4, r0
  BLETypedCharacteristic<byte>(uuid, properties)
    257c:	f7ff ffe4 	bl	2548 <_ZN22BLETypedCharacteristicIhEC1EPKch>
    2580:	4b01      	ldr	r3, [pc, #4]	; (2588 <_ZN21BLEByteCharacteristicC1EPKch+0x10>)
{
}
    2582:	0020      	movs	r0, r4
  BLETypedCharacteristic<byte>(uuid, properties)
    2584:	6023      	str	r3, [r4, #0]
}
    2586:	bd10      	pop	{r4, pc}
    2588:	0000b73c 	.word	0x0000b73c

0000258c <_ZN22BLETypedCharacteristicItEC1EPKch>:
template<typename T> BLETypedCharacteristic<T>::BLETypedCharacteristic(const char* uuid, unsigned char properties) :
    258c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  BLECharacteristic(uuid, properties, sizeof(T), true)
    258e:	2301      	movs	r3, #1
template<typename T> BLETypedCharacteristic<T>::BLETypedCharacteristic(const char* uuid, unsigned char properties) :
    2590:	0004      	movs	r4, r0
  BLECharacteristic(uuid, properties, sizeof(T), true)
    2592:	9300      	str	r3, [sp, #0]
    2594:	18db      	adds	r3, r3, r3
    2596:	f7ff fe1f 	bl	21d8 <_ZN17BLECharacteristicC1EPKchib>
    259a:	4b06      	ldr	r3, [pc, #24]	; (25b4 <_ZN22BLETypedCharacteristicItEC1EPKch+0x28>)
    259c:	210e      	movs	r1, #14
    259e:	6023      	str	r3, [r4, #0]
    25a0:	2300      	movs	r3, #0
    25a2:	4469      	add	r1, sp
  return BLECharacteristic::writeValue((uint8_t*)&value, sizeof(T));
    25a4:	2202      	movs	r2, #2
    25a6:	0020      	movs	r0, r4
    25a8:	800b      	strh	r3, [r1, #0]
    25aa:	f7ff fe2e 	bl	220a <_ZN17BLECharacteristic10writeValueEPKhi>
}
    25ae:	0020      	movs	r0, r4
    25b0:	b004      	add	sp, #16
    25b2:	bd10      	pop	{r4, pc}
    25b4:	0000b74c 	.word	0x0000b74c

000025b8 <_ZN21BLEWordCharacteristicC1EPKch>:
BLEUnsignedShortCharacteristic::BLEUnsignedShortCharacteristic(const char* uuid, unsigned char properties) :
  BLETypedCharacteristic<unsigned short>(uuid, properties)
{
}

BLEWordCharacteristic::BLEWordCharacteristic(const char* uuid, unsigned char properties) :
    25b8:	b510      	push	{r4, lr}
    25ba:	0004      	movs	r4, r0
  BLETypedCharacteristic<word>(uuid, properties)
    25bc:	f7ff ffe6 	bl	258c <_ZN22BLETypedCharacteristicItEC1EPKch>
    25c0:	4b01      	ldr	r3, [pc, #4]	; (25c8 <_ZN21BLEWordCharacteristicC1EPKch+0x10>)
{
}
    25c2:	0020      	movs	r0, r4
  BLETypedCharacteristic<word>(uuid, properties)
    25c4:	6023      	str	r3, [r4, #0]
}
    25c6:	bd10      	pop	{r4, pc}
    25c8:	0000b75c 	.word	0x0000b75c

000025cc <_ZN7BLEUuidC1EPKc>:
#include <stdlib.h>
#include <string.h>

#include "BLEUuid.h"

BLEUuid::BLEUuid(const char * str) :
    25cc:	b5f0      	push	{r4, r5, r6, r7, lr}
  _str(str)
{
  char temp[] = {0, 0, 0};
    25ce:	2500      	movs	r5, #0
BLEUuid::BLEUuid(const char * str) :
    25d0:	0004      	movs	r4, r0
    25d2:	000f      	movs	r7, r1
    25d4:	b085      	sub	sp, #20
  char temp[] = {0, 0, 0};
    25d6:	ae03      	add	r6, sp, #12
  _str(str)
    25d8:	c002      	stmia	r0!, {r1}

  memset(_data, 0x00, sizeof(_data));
    25da:	2210      	movs	r2, #16
    25dc:	0029      	movs	r1, r5
  char temp[] = {0, 0, 0};
    25de:	7035      	strb	r5, [r6, #0]
    25e0:	7075      	strb	r5, [r6, #1]
    25e2:	70b5      	strb	r5, [r6, #2]
  memset(_data, 0x00, sizeof(_data));
    25e4:	f006 fed8 	bl	9398 <memset>

  _length = 0;
    25e8:	7525      	strb	r5, [r4, #20]
  for (int i = strlen(str) - 1; i >= 0 && _length < BLE_UUID_MAX_LENGTH; i -= 2) {
    25ea:	0038      	movs	r0, r7
    25ec:	f007 fc3a 	bl	9e64 <strlen>
    25f0:	1e45      	subs	r5, r0, #1
    25f2:	7d23      	ldrb	r3, [r4, #20]
    25f4:	9301      	str	r3, [sp, #4]
    25f6:	2d00      	cmp	r5, #0
    25f8:	db18      	blt.n	262c <_ZN7BLEUuidC1EPKc+0x60>
    25fa:	2b0f      	cmp	r3, #15
    25fc:	dc16      	bgt.n	262c <_ZN7BLEUuidC1EPKc+0x60>
    if (str[i] == '-') {
    25fe:	5d7a      	ldrb	r2, [r7, r5]
    2600:	2a2d      	cmp	r2, #45	; 0x2d
    2602:	d102      	bne.n	260a <_ZN7BLEUuidC1EPKc+0x3e>
      i++;
    2604:	3501      	adds	r5, #1
  for (int i = strlen(str) - 1; i >= 0 && _length < BLE_UUID_MAX_LENGTH; i -= 2) {
    2606:	3d02      	subs	r5, #2
    2608:	e7f3      	b.n	25f2 <_ZN7BLEUuidC1EPKc+0x26>
      continue;
    }

    temp[0] = str[i - 1];
    260a:	197b      	adds	r3, r7, r5
    260c:	3b01      	subs	r3, #1
    260e:	781b      	ldrb	r3, [r3, #0]
    temp[1] = str[i];
    2610:	7072      	strb	r2, [r6, #1]

    _data[_length] = strtoul(temp, NULL, 16);
    2612:	2100      	movs	r1, #0
    2614:	2210      	movs	r2, #16
    2616:	0030      	movs	r0, r6
    temp[0] = str[i - 1];
    2618:	7033      	strb	r3, [r6, #0]
    _data[_length] = strtoul(temp, NULL, 16);
    261a:	f007 fcb1 	bl	9f80 <strtoul>
    261e:	9b01      	ldr	r3, [sp, #4]
    2620:	18e3      	adds	r3, r4, r3
    2622:	7118      	strb	r0, [r3, #4]

    _length++;
    2624:	7d23      	ldrb	r3, [r4, #20]
    2626:	3301      	adds	r3, #1
    2628:	7523      	strb	r3, [r4, #20]
    262a:	e7ec      	b.n	2606 <_ZN7BLEUuidC1EPKc+0x3a>
  }

  if (_length <= 2) {
    262c:	9b01      	ldr	r3, [sp, #4]
    262e:	2b02      	cmp	r3, #2
    2630:	dc04      	bgt.n	263c <_ZN7BLEUuidC1EPKc+0x70>
    _length = 2;
    2632:	2302      	movs	r3, #2
  } else {
    _length = 16;
  }
}
    2634:	0020      	movs	r0, r4
    _length = 16;
    2636:	7523      	strb	r3, [r4, #20]
}
    2638:	b005      	add	sp, #20
    263a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    _length = 16;
    263c:	2310      	movs	r3, #16
    263e:	e7f9      	b.n	2634 <_ZN7BLEUuidC1EPKc+0x68>

00002640 <_ZNK7BLEUuid3strEv>:

const char* BLEUuid::str() const
{
  return _str;
    2640:	6800      	ldr	r0, [r0, #0]
}
    2642:	4770      	bx	lr

00002644 <_ZNK7BLEUuid4dataEv>:

const uint8_t* BLEUuid::data() const
{
  return _data;
    2644:	3004      	adds	r0, #4
}
    2646:	4770      	bx	lr

00002648 <_ZNK7BLEUuid6lengthEv>:

uint8_t BLEUuid::length() const
{
  return _length;
    2648:	7d00      	ldrb	r0, [r0, #20]
}
    264a:	4770      	bx	lr

0000264c <_ZNK22BLELocalCharacteristic4typeEv>:
}

enum BLEAttributeType BLELocalCharacteristic::type() const
{
  return BLETypeCharacteristic;
}
    264c:	4800      	ldr	r0, [pc, #0]	; (2650 <_ZNK22BLELocalCharacteristic4typeEv+0x4>)
    264e:	4770      	bx	lr
    2650:	00002803 	.word	0x00002803

00002654 <_ZNK22BLELocalCharacteristic10propertiesEv>:

uint8_t BLELocalCharacteristic::properties() const
{
  return _properties;
    2654:	3001      	adds	r0, #1
    2656:	7fc0      	ldrb	r0, [r0, #31]
}
    2658:	4770      	bx	lr

0000265a <_ZNK22BLELocalCharacteristic9valueSizeEv>:

int BLELocalCharacteristic::valueSize() const
{
  return _valueSize;
    265a:	6a40      	ldr	r0, [r0, #36]	; 0x24
}
    265c:	4770      	bx	lr

0000265e <_ZNK22BLELocalCharacteristic5valueEv>:

const uint8_t* BLELocalCharacteristic::value() const
{
  return _value;
    265e:	6a80      	ldr	r0, [r0, #40]	; 0x28
}
    2660:	4770      	bx	lr

00002662 <_ZNK22BLELocalCharacteristic11valueLengthEv>:

int BLELocalCharacteristic::valueLength() const
{
  return _valueLength;
    2662:	8d80      	ldrh	r0, [r0, #44]	; 0x2c
}
    2664:	4770      	bx	lr
	...

00002668 <_ZN22BLELocalCharacteristic10writeValueEPKhi>:
  return _value[offset];
}

int BLELocalCharacteristic::writeValue(const uint8_t value[], int length)
{
  _valueLength = min(length, _valueSize);
    2668:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
    266a:	b570      	push	{r4, r5, r6, lr}
    266c:	0015      	movs	r5, r2
    266e:	0004      	movs	r4, r0
    2670:	000e      	movs	r6, r1
  _valueLength = min(length, _valueSize);
    2672:	b292      	uxth	r2, r2
    2674:	42ab      	cmp	r3, r5
    2676:	dc00      	bgt.n	267a <_ZN22BLELocalCharacteristic10writeValueEPKhi+0x12>
    2678:	b29a      	uxth	r2, r3
    267a:	85a2      	strh	r2, [r4, #44]	; 0x2c
  memcpy(_value, value, _valueLength);
    267c:	0031      	movs	r1, r6
    267e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    2680:	f006 fe6f 	bl	9362 <memcpy>

  if (_fixedLength) {
    2684:	0023      	movs	r3, r4
    2686:	332e      	adds	r3, #46	; 0x2e
    2688:	781b      	ldrb	r3, [r3, #0]
    268a:	2b00      	cmp	r3, #0
    268c:	d001      	beq.n	2692 <_ZN22BLELocalCharacteristic10writeValueEPKhi+0x2a>
    _valueLength = _valueSize;
    268e:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
    2690:	85a3      	strh	r3, [r4, #44]	; 0x2c
  }

  if ((_properties & BLEIndicate) && (_cccdValue & 0x0002)) {
    2692:	1c63      	adds	r3, r4, #1
    2694:	7fdb      	ldrb	r3, [r3, #31]
    2696:	069a      	lsls	r2, r3, #26
    2698:	d50b      	bpl.n	26b2 <_ZN22BLELocalCharacteristic10writeValueEPKhi+0x4a>
    269a:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
    269c:	0792      	lsls	r2, r2, #30
    269e:	d508      	bpl.n	26b2 <_ZN22BLELocalCharacteristic10writeValueEPKhi+0x4a>
  return _handle;
}

uint16_t BLELocalCharacteristic::valueHandle() const
{
  return (_handle + 1);
    26a0:	8e21      	ldrh	r1, [r4, #48]	; 0x30
    return ATT.handleInd(valueHandle(), _value, _valueLength);
    26a2:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
  return (_handle + 1);
    26a4:	3101      	adds	r1, #1
    return ATT.handleInd(valueHandle(), _value, _valueLength);
    26a6:	b289      	uxth	r1, r1
    26a8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    26aa:	4819      	ldr	r0, [pc, #100]	; (2710 <_ZN22BLELocalCharacteristic10writeValueEPKhi+0xa8>)
    26ac:	f000 fce6 	bl	307c <_ZN8ATTClass9handleIndEtPKhi>
}
    26b0:	bd70      	pop	{r4, r5, r6, pc}
  } else if ((_properties & BLENotify) && (_cccdValue & 0x0001)) {
    26b2:	06db      	lsls	r3, r3, #27
    26b4:	d50b      	bpl.n	26ce <_ZN22BLELocalCharacteristic10writeValueEPKhi+0x66>
    26b6:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    26b8:	07db      	lsls	r3, r3, #31
    26ba:	d508      	bpl.n	26ce <_ZN22BLELocalCharacteristic10writeValueEPKhi+0x66>
  return (_handle + 1);
    26bc:	8e21      	ldrh	r1, [r4, #48]	; 0x30
    return ATT.handleNotify(valueHandle(), _value, _valueLength);
    26be:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
  return (_handle + 1);
    26c0:	3101      	adds	r1, #1
    return ATT.handleNotify(valueHandle(), _value, _valueLength);
    26c2:	b289      	uxth	r1, r1
    26c4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    26c6:	4812      	ldr	r0, [pc, #72]	; (2710 <_ZN22BLELocalCharacteristic10writeValueEPKhi+0xa8>)
    26c8:	f000 fc9c 	bl	3004 <_ZN8ATTClass12handleNotifyEtPKhi>
    26cc:	e7f0      	b.n	26b0 <_ZN22BLELocalCharacteristic10writeValueEPKhi+0x48>
  if (_broadcast) {
    26ce:	0023      	movs	r3, r4
    26d0:	3332      	adds	r3, #50	; 0x32
    26d2:	781b      	ldrb	r3, [r3, #0]
    26d4:	2b00      	cmp	r3, #0
    26d6:	d101      	bne.n	26dc <_ZN22BLELocalCharacteristic10writeValueEPKhi+0x74>
  return 1;
    26d8:	2001      	movs	r0, #1
    26da:	e7e9      	b.n	26b0 <_ZN22BLELocalCharacteristic10writeValueEPKhi+0x48>
    uint16_t serviceUuid = GATT.serviceUuidForCharacteristic(this);
    26dc:	0021      	movs	r1, r4
    26de:	480d      	ldr	r0, [pc, #52]	; (2714 <_ZN22BLELocalCharacteristic10writeValueEPKhi+0xac>)
    26e0:	f001 fd08 	bl	40f4 <_ZNK9GATTClass28serviceUuidForCharacteristicEP22BLELocalCharacteristic>
    GAP.setAdvertisedServiceData(serviceUuid, value, length);
    26e4:	4c0c      	ldr	r4, [pc, #48]	; (2718 <_ZN22BLELocalCharacteristic10writeValueEPKhi+0xb0>)
    uint16_t serviceUuid = GATT.serviceUuidForCharacteristic(this);
    26e6:	0001      	movs	r1, r0
    GAP.setAdvertisedServiceData(serviceUuid, value, length);
    26e8:	002b      	movs	r3, r5
    26ea:	0020      	movs	r0, r4
    26ec:	0032      	movs	r2, r6
    26ee:	f001 fc5f 	bl	3fb0 <_ZN8GAPClass24setAdvertisedServiceDataEtPKhi>
    if (!ATT.connected() && GAP.advertising()) {
    26f2:	4807      	ldr	r0, [pc, #28]	; (2710 <_ZN22BLELocalCharacteristic10writeValueEPKhi+0xa8>)
    26f4:	f000 fc3e 	bl	2f74 <_ZNK8ATTClass9connectedEv>
    26f8:	2800      	cmp	r0, #0
    26fa:	d1ed      	bne.n	26d8 <_ZN22BLELocalCharacteristic10writeValueEPKhi+0x70>
    26fc:	0020      	movs	r0, r4
    26fe:	f001 fba5 	bl	3e4c <_ZN8GAPClass11advertisingEv>
    2702:	2800      	cmp	r0, #0
    2704:	d0e8      	beq.n	26d8 <_ZN22BLELocalCharacteristic10writeValueEPKhi+0x70>
      GAP.advertise();
    2706:	0020      	movs	r0, r4
    2708:	f001 fba2 	bl	3e50 <_ZN8GAPClass9advertiseEv>
    270c:	e7e4      	b.n	26d8 <_ZN22BLELocalCharacteristic10writeValueEPKhi+0x70>
    270e:	46c0      	nop			; (mov r8, r8)
    2710:	200002c8 	.word	0x200002c8
    2714:	20000314 	.word	0x20000314
    2718:	200002ec 	.word	0x200002ec

0000271c <_ZN22BLELocalCharacteristic10writeValueEPKc>:
{
    271c:	b570      	push	{r4, r5, r6, lr}
    271e:	0005      	movs	r5, r0
  return writeValue((uint8_t*)value, strlen(value));
    2720:	0008      	movs	r0, r1
{
    2722:	000c      	movs	r4, r1
  return writeValue((uint8_t*)value, strlen(value));
    2724:	f007 fb9e 	bl	9e64 <strlen>
    2728:	0021      	movs	r1, r4
    272a:	0002      	movs	r2, r0
    272c:	0028      	movs	r0, r5
    272e:	f7ff ff9b 	bl	2668 <_ZN22BLELocalCharacteristic10writeValueEPKhi>
}
    2732:	bd70      	pop	{r4, r5, r6, pc}

00002734 <_ZN22BLELocalCharacteristic9setHandleEt>:
  _handle = handle;
    2734:	8601      	strh	r1, [r0, #48]	; 0x30
}
    2736:	4770      	bx	lr

00002738 <_ZNK22BLELocalCharacteristic6handleEv>:
  return _handle;
    2738:	8e00      	ldrh	r0, [r0, #48]	; 0x30
}
    273a:	4770      	bx	lr

0000273c <_ZNK22BLELocalCharacteristic11valueHandleEv>:
  return (_handle + 1);
    273c:	8e00      	ldrh	r0, [r0, #48]	; 0x30
    273e:	3001      	adds	r0, #1
    2740:	b280      	uxth	r0, r0
}
    2742:	4770      	bx	lr

00002744 <_ZNK22BLELocalCharacteristic15descriptorCountEv>:

unsigned int BLELocalCharacteristic::descriptorCount() const
{
  return _descriptors.size();
    2744:	6b80      	ldr	r0, [r0, #56]	; 0x38
}
    2746:	4770      	bx	lr

00002748 <_ZNK22BLELocalCharacteristic10descriptorEj>:
  _size++;
}

template <typename T> T BLELinkedList<T>::get(unsigned int index) const
{
  if (index >= _size) {
    2748:	6b82      	ldr	r2, [r0, #56]	; 0x38
    return T();
    274a:	2300      	movs	r3, #0
  if (index >= _size) {
    274c:	4291      	cmp	r1, r2
    274e:	d207      	bcs.n	2760 <_ZNK22BLELocalCharacteristic10descriptorEj+0x18>
  }

  BLELinkedListNode<T>* itemNode = _root;

  for (unsigned int i = 0; i < index; i++) {
    2750:	2200      	movs	r2, #0
  BLELinkedListNode<T>* itemNode = _root;
    2752:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
  for (unsigned int i = 0; i < index; i++) {
    2754:	4291      	cmp	r1, r2
    2756:	d002      	beq.n	275e <_ZNK22BLELocalCharacteristic10descriptorEj+0x16>
    itemNode = itemNode->next;
    2758:	685b      	ldr	r3, [r3, #4]
  for (unsigned int i = 0; i < index; i++) {
    275a:	3201      	adds	r2, #1
    275c:	e7fa      	b.n	2754 <_ZNK22BLELocalCharacteristic10descriptorEj+0xc>
  }

  return itemNode->data;
    275e:	681b      	ldr	r3, [r3, #0]

BLELocalDescriptor* BLELocalCharacteristic::descriptor(unsigned int index) const
{
  return _descriptors.get(index);
}
    2760:	0018      	movs	r0, r3
    2762:	4770      	bx	lr

00002764 <_ZN13BLELinkedListIP18BLELocalDescriptorE3addES1_>:
template <typename T> void BLELinkedList<T>::add(T item)
    2764:	b570      	push	{r4, r5, r6, lr}
    2766:	0004      	movs	r4, r0
  BLELinkedListNode<T>* itemNode = new BLELinkedListNode<T>();
    2768:	2008      	movs	r0, #8
template <typename T> void BLELinkedList<T>::add(T item)
    276a:	000d      	movs	r5, r1
  BLELinkedListNode<T>* itemNode = new BLELinkedListNode<T>();
    276c:	f002 fe6c 	bl	5448 <_Znwj>
    2770:	2300      	movs	r3, #0
    2772:	6043      	str	r3, [r0, #4]
  if (_root == NULL) {
    2774:	6863      	ldr	r3, [r4, #4]
  itemNode->data = item;
    2776:	6005      	str	r5, [r0, #0]
  if (_root == NULL) {
    2778:	2b00      	cmp	r3, #0
    277a:	d105      	bne.n	2788 <_ZN13BLELinkedListIP18BLELocalDescriptorE3addES1_+0x24>
    _root = itemNode;
    277c:	6060      	str	r0, [r4, #4]
  _size++;
    277e:	6823      	ldr	r3, [r4, #0]
  _last = itemNode;
    2780:	60a0      	str	r0, [r4, #8]
  _size++;
    2782:	3301      	adds	r3, #1
    2784:	6023      	str	r3, [r4, #0]
}
    2786:	bd70      	pop	{r4, r5, r6, pc}
    _last->next = itemNode;
    2788:	68a3      	ldr	r3, [r4, #8]
    278a:	6058      	str	r0, [r3, #4]
    278c:	e7f7      	b.n	277e <_ZN13BLELinkedListIP18BLELocalDescriptorE3addES1_+0x1a>
	...

00002790 <_ZN22BLELocalCharacteristicC1EPKchib>:
BLELocalCharacteristic::BLELocalCharacteristic(const char* uuid, uint8_t properties, int valueSize, bool fixedLength) :
    2790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2792:	0004      	movs	r4, r0
    2794:	001d      	movs	r5, r3
    2796:	ab06      	add	r3, sp, #24
    2798:	0016      	movs	r6, r2
    279a:	781f      	ldrb	r7, [r3, #0]
  _cccdValue(0x0000)
    279c:	f7ff fcc4 	bl	2128 <_ZN12BLEAttributeC1EPKc>
  _valueSize(min(valueSize, 512)),
    27a0:	2280      	movs	r2, #128	; 0x80
  _cccdValue(0x0000)
    27a2:	4b1a      	ldr	r3, [pc, #104]	; (280c <_ZN22BLELocalCharacteristicC1EPKchib+0x7c>)
  _valueSize(min(valueSize, 512)),
    27a4:	0092      	lsls	r2, r2, #2
  _cccdValue(0x0000)
    27a6:	3308      	adds	r3, #8
    27a8:	6023      	str	r3, [r4, #0]
    27aa:	1c63      	adds	r3, r4, #1
    27ac:	77de      	strb	r6, [r3, #31]
  _valueSize(min(valueSize, 512)),
    27ae:	002b      	movs	r3, r5
    27b0:	4295      	cmp	r5, r2
    27b2:	dd00      	ble.n	27b6 <_ZN22BLELocalCharacteristicC1EPKchib+0x26>
    27b4:	0013      	movs	r3, r2
  _cccdValue(0x0000)
    27b6:	6263      	str	r3, [r4, #36]	; 0x24
    27b8:	0023      	movs	r3, r4
    27ba:	2100      	movs	r1, #0
  memset(_eventHandlers, 0x00, sizeof(_eventHandlers));
    27bc:	0020      	movs	r0, r4
  _cccdValue(0x0000)
    27be:	332e      	adds	r3, #46	; 0x2e
    27c0:	85a1      	strh	r1, [r4, #44]	; 0x2c
  memset(_eventHandlers, 0x00, sizeof(_eventHandlers));
    27c2:	2210      	movs	r2, #16
  _cccdValue(0x0000)
    27c4:	701f      	strb	r7, [r3, #0]
  memset(_eventHandlers, 0x00, sizeof(_eventHandlers));
    27c6:	3044      	adds	r0, #68	; 0x44
  _cccdValue(0x0000)
    27c8:	8621      	strh	r1, [r4, #48]	; 0x30
    27ca:	7119      	strb	r1, [r3, #4]
    27cc:	7159      	strb	r1, [r3, #5]
    27ce:	86a1      	strh	r1, [r4, #52]	; 0x34
  _last(NULL)
    27d0:	63a1      	str	r1, [r4, #56]	; 0x38
    27d2:	63e1      	str	r1, [r4, #60]	; 0x3c
    27d4:	6421      	str	r1, [r4, #64]	; 0x40
  memset(_eventHandlers, 0x00, sizeof(_eventHandlers));
    27d6:	f006 fddf 	bl	9398 <memset>
  if (properties & (BLENotify | BLEIndicate)) {
    27da:	2330      	movs	r3, #48	; 0x30
    27dc:	421e      	tst	r6, r3
    27de:	d00e      	beq.n	27fe <_ZN22BLELocalCharacteristicC1EPKchib+0x6e>
    BLELocalDescriptor* cccd = new BLELocalDescriptor("2902", (uint8_t*)&_cccdValue, sizeof(_cccdValue));
    27e0:	202c      	movs	r0, #44	; 0x2c
    27e2:	f002 fe31 	bl	5448 <_Znwj>
    27e6:	0022      	movs	r2, r4
    27e8:	4909      	ldr	r1, [pc, #36]	; (2810 <_ZN22BLELocalCharacteristicC1EPKchib+0x80>)
    27ea:	2302      	movs	r3, #2
    27ec:	3234      	adds	r2, #52	; 0x34
    27ee:	0006      	movs	r6, r0
    27f0:	f000 f8fe 	bl	29f0 <_ZN18BLELocalDescriptorC1EPKcPKhi>
    _descriptors.add(cccd);
    27f4:	0020      	movs	r0, r4
    27f6:	0031      	movs	r1, r6
    27f8:	3038      	adds	r0, #56	; 0x38
    27fa:	f7ff ffb3 	bl	2764 <_ZN13BLELinkedListIP18BLELocalDescriptorE3addES1_>
  _value = (uint8_t*)malloc(valueSize);
    27fe:	0028      	movs	r0, r5
    2800:	f006 fd7a 	bl	92f8 <malloc>
    2804:	62a0      	str	r0, [r4, #40]	; 0x28
}
    2806:	0020      	movs	r0, r4
    2808:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    280a:	46c0      	nop			; (mov r8, r8)
    280c:	0000b76c 	.word	0x0000b76c
    2810:	0000b764 	.word	0x0000b764

00002814 <_ZN13BLELinkedListIP18BLELocalDescriptorE5clearEv>:
}

template <typename T> void BLELinkedList<T>::clear()
    2814:	b570      	push	{r4, r5, r6, lr}
{
  BLELinkedListNode<T>* itemNode = _root;

  for (unsigned int i = 0; i < _size; i++) {
    2816:	2500      	movs	r5, #0
template <typename T> void BLELinkedList<T>::clear()
    2818:	0004      	movs	r4, r0
  BLELinkedListNode<T>* itemNode = _root;
    281a:	6840      	ldr	r0, [r0, #4]
  for (unsigned int i = 0; i < _size; i++) {
    281c:	6823      	ldr	r3, [r4, #0]
    281e:	429d      	cmp	r5, r3
    2820:	d205      	bcs.n	282e <_ZN13BLELinkedListIP18BLELocalDescriptorE5clearEv+0x1a>
    BLELinkedListNode<T>* n = itemNode;

    itemNode = itemNode->next;
    2822:	6846      	ldr	r6, [r0, #4]
  for (unsigned int i = 0; i < _size; i++) {
    2824:	3501      	adds	r5, #1

    delete n;
    2826:	f002 fe13 	bl	5450 <_ZdlPv>
    itemNode = itemNode->next;
    282a:	0030      	movs	r0, r6
  for (unsigned int i = 0; i < _size; i++) {
    282c:	e7f6      	b.n	281c <_ZN13BLELinkedListIP18BLELocalDescriptorE5clearEv+0x8>
  }

  _size = 0;
    282e:	2300      	movs	r3, #0
    2830:	6023      	str	r3, [r4, #0]
  _root = NULL;
    2832:	6063      	str	r3, [r4, #4]
  _last = NULL;
    2834:	60a3      	str	r3, [r4, #8]
}
    2836:	bd70      	pop	{r4, r5, r6, pc}

00002838 <_ZN22BLELocalCharacteristicD1Ev>:
BLELocalCharacteristic::~BLELocalCharacteristic()
    2838:	b570      	push	{r4, r5, r6, lr}
    283a:	0004      	movs	r4, r0
  for (unsigned int i = 0; i < descriptorCount(); i++) {
    283c:	2500      	movs	r5, #0
BLELocalCharacteristic::~BLELocalCharacteristic()
    283e:	4b16      	ldr	r3, [pc, #88]	; (2898 <_ZN22BLELocalCharacteristicD1Ev+0x60>)
    2840:	3308      	adds	r3, #8
    2842:	6003      	str	r3, [r0, #0]
  for (unsigned int i = 0; i < descriptorCount(); i++) {
    2844:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    2846:	429d      	cmp	r5, r3
    2848:	d214      	bcs.n	2874 <_ZN22BLELocalCharacteristicD1Ev+0x3c>
  for (unsigned int i = 0; i < index; i++) {
    284a:	2200      	movs	r2, #0
  BLELinkedListNode<T>* itemNode = _root;
    284c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  for (unsigned int i = 0; i < index; i++) {
    284e:	4295      	cmp	r5, r2
    2850:	d002      	beq.n	2858 <_ZN22BLELocalCharacteristicD1Ev+0x20>
    itemNode = itemNode->next;
    2852:	685b      	ldr	r3, [r3, #4]
  for (unsigned int i = 0; i < index; i++) {
    2854:	3201      	adds	r2, #1
    2856:	e7fa      	b.n	284e <_ZN22BLELocalCharacteristicD1Ev+0x16>
  return itemNode->data;
    2858:	681e      	ldr	r6, [r3, #0]
    if (d->release() <= 0) {
    285a:	0030      	movs	r0, r6
    285c:	f7ff fc86 	bl	216c <_ZN12BLEAttribute7releaseEv>
    2860:	2800      	cmp	r0, #0
    2862:	dc05      	bgt.n	2870 <_ZN22BLELocalCharacteristicD1Ev+0x38>
      delete d;
    2864:	2e00      	cmp	r6, #0
    2866:	d003      	beq.n	2870 <_ZN22BLELocalCharacteristicD1Ev+0x38>
    2868:	6833      	ldr	r3, [r6, #0]
    286a:	0030      	movs	r0, r6
    286c:	685b      	ldr	r3, [r3, #4]
    286e:	4798      	blx	r3
  for (unsigned int i = 0; i < descriptorCount(); i++) {
    2870:	3501      	adds	r5, #1
    2872:	e7e7      	b.n	2844 <_ZN22BLELocalCharacteristicD1Ev+0xc>
  _descriptors.clear();
    2874:	0025      	movs	r5, r4
    2876:	3538      	adds	r5, #56	; 0x38
    2878:	0028      	movs	r0, r5
    287a:	f7ff ffcb 	bl	2814 <_ZN13BLELinkedListIP18BLELocalDescriptorE5clearEv>
  if (_value) {
    287e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    2880:	2800      	cmp	r0, #0
    2882:	d001      	beq.n	2888 <_ZN22BLELocalCharacteristicD1Ev+0x50>
    free(_value);
    2884:	f006 fd42 	bl	930c <free>
  clear();
    2888:	0028      	movs	r0, r5
    288a:	f7ff ffc3 	bl	2814 <_ZN13BLELinkedListIP18BLELocalDescriptorE5clearEv>
BLELocalCharacteristic::~BLELocalCharacteristic()
    288e:	0020      	movs	r0, r4
    2890:	f7ff fc40 	bl	2114 <_ZN12BLEAttributeD1Ev>
}
    2894:	0020      	movs	r0, r4
    2896:	bd70      	pop	{r4, r5, r6, pc}
    2898:	0000b76c 	.word	0x0000b76c

0000289c <_ZN22BLELocalCharacteristicD0Ev>:
BLELocalCharacteristic::~BLELocalCharacteristic()
    289c:	b510      	push	{r4, lr}
    289e:	0004      	movs	r4, r0
}
    28a0:	f7ff ffca 	bl	2838 <_ZN22BLELocalCharacteristicD1Ev>
    28a4:	0020      	movs	r0, r4
    28a6:	f002 fdd3 	bl	5450 <_ZdlPv>
    28aa:	0020      	movs	r0, r4
    28ac:	bd10      	pop	{r4, pc}
	...

000028b0 <_ZN22BLELocalCharacteristic9readValueE9BLEDevicetPhi>:

void BLELocalCharacteristic::readValue(BLEDevice device, uint16_t offset, uint8_t value[], int length)
{
    28b0:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (_eventHandlers[BLERead]) {
    28b2:	6cc6      	ldr	r6, [r0, #76]	; 0x4c
{
    28b4:	b089      	sub	sp, #36	; 0x24
    28b6:	0004      	movs	r4, r0
    28b8:	0017      	movs	r7, r2
    28ba:	9301      	str	r3, [sp, #4]
  if (_eventHandlers[BLERead]) {
    28bc:	2e00      	cmp	r6, #0
    28be:	d018      	beq.n	28f2 <_ZN22BLELocalCharacteristic9readValueE9BLEDevicetPhi+0x42>

class BLEDevice;

typedef void (*BLEDeviceEventHandler)(BLEDevice device);

class BLEDevice {
    28c0:	2012      	movs	r0, #18
    28c2:	4b10      	ldr	r3, [pc, #64]	; (2904 <_ZN22BLELocalCharacteristic9readValueE9BLEDevicetPhi+0x54>)
    28c4:	ad05      	add	r5, sp, #20
    28c6:	9305      	str	r3, [sp, #20]
    28c8:	888b      	ldrh	r3, [r1, #4]
    28ca:	2206      	movs	r2, #6
    28cc:	80ab      	strh	r3, [r5, #4]
    28ce:	ab02      	add	r3, sp, #8
    28d0:	18c0      	adds	r0, r0, r3
    28d2:	3106      	adds	r1, #6
    28d4:	f006 fd45 	bl	9362 <memcpy>
    _eventHandlers[BLERead](device, BLECharacteristic(this));
    28d8:	0021      	movs	r1, r4
    28da:	a803      	add	r0, sp, #12
    28dc:	f7ff fc6c 	bl	21b8 <_ZN17BLECharacteristicC1EP22BLELocalCharacteristic>
    28e0:	a903      	add	r1, sp, #12
    28e2:	0028      	movs	r0, r5
    28e4:	47b0      	blx	r6
    28e6:	a803      	add	r0, sp, #12
    28e8:	f7ff fc46 	bl	2178 <_ZN17BLECharacteristicD1Ev>
    28ec:	0028      	movs	r0, r5
    28ee:	f7ff fc9c 	bl	222a <_ZN9BLEDeviceD1Ev>
  }

  memcpy(value, _value + offset, length);
    28f2:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    28f4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    28f6:	19c9      	adds	r1, r1, r7
    28f8:	9801      	ldr	r0, [sp, #4]
    28fa:	f006 fd32 	bl	9362 <memcpy>
}
    28fe:	b009      	add	sp, #36	; 0x24
    2900:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2902:	46c0      	nop			; (mov r8, r8)
    2904:	0000b6d8 	.word	0x0000b6d8

00002908 <_ZN22BLELocalCharacteristic10writeValueE9BLEDevicePKhi>:

void BLELocalCharacteristic::writeValue(BLEDevice device, const uint8_t value[], int length)
{
    2908:	b5f0      	push	{r4, r5, r6, r7, lr}
    290a:	000d      	movs	r5, r1
    290c:	0011      	movs	r1, r2
  _written = true;
    290e:	0002      	movs	r2, r0
{
    2910:	0004      	movs	r4, r0
  _written = true;
    2912:	2001      	movs	r0, #1
    2914:	3233      	adds	r2, #51	; 0x33
    2916:	7010      	strb	r0, [r2, #0]
{
    2918:	b087      	sub	sp, #28

  writeValue(value, length);
    291a:	001a      	movs	r2, r3
    291c:	0020      	movs	r0, r4
    291e:	f7ff fea3 	bl	2668 <_ZN22BLELocalCharacteristic10writeValueEPKhi>

  if (_eventHandlers[BLEWritten]) {
    2922:	6d27      	ldr	r7, [r4, #80]	; 0x50
    2924:	2f00      	cmp	r7, #0
    2926:	d017      	beq.n	2958 <_ZN22BLELocalCharacteristic10writeValueE9BLEDevicePKhi+0x50>
    2928:	2012      	movs	r0, #18
    292a:	4b0c      	ldr	r3, [pc, #48]	; (295c <_ZN22BLELocalCharacteristic10writeValueE9BLEDevicePKhi+0x54>)
    292c:	2206      	movs	r2, #6
    292e:	9303      	str	r3, [sp, #12]
    2930:	88ab      	ldrh	r3, [r5, #4]
    2932:	ae03      	add	r6, sp, #12
    2934:	1da9      	adds	r1, r5, #6
    2936:	4468      	add	r0, sp
    2938:	80b3      	strh	r3, [r6, #4]
    293a:	f006 fd12 	bl	9362 <memcpy>
    _eventHandlers[BLEWritten](device, BLECharacteristic(this));
    293e:	0021      	movs	r1, r4
    2940:	a801      	add	r0, sp, #4
    2942:	f7ff fc39 	bl	21b8 <_ZN17BLECharacteristicC1EP22BLELocalCharacteristic>
    2946:	a901      	add	r1, sp, #4
    2948:	0030      	movs	r0, r6
    294a:	47b8      	blx	r7
    294c:	a801      	add	r0, sp, #4
    294e:	f7ff fc13 	bl	2178 <_ZN17BLECharacteristicD1Ev>
    2952:	0030      	movs	r0, r6
    2954:	f7ff fc69 	bl	222a <_ZN9BLEDeviceD1Ev>
  }
}
    2958:	b007      	add	sp, #28
    295a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    295c:	0000b6d8 	.word	0x0000b6d8

00002960 <_ZN22BLELocalCharacteristic14writeCccdValueE9BLEDevicet>:

void BLELocalCharacteristic::writeCccdValue(BLEDevice device, uint16_t value)
{
  value &= 0x0003;
    2960:	2303      	movs	r3, #3
{
    2962:	b570      	push	{r4, r5, r6, lr}
  value &= 0x0003;
    2964:	401a      	ands	r2, r3

  if (_cccdValue != value) {
    2966:	8e83      	ldrh	r3, [r0, #52]	; 0x34
{
    2968:	b086      	sub	sp, #24
    296a:	0004      	movs	r4, r0
  if (_cccdValue != value) {
    296c:	4293      	cmp	r3, r2
    296e:	d020      	beq.n	29b2 <_ZN22BLELocalCharacteristic14writeCccdValueE9BLEDevicet+0x52>
    _cccdValue = value;
    2970:	8682      	strh	r2, [r0, #52]	; 0x34

    BLECharacteristicEvent event = (_cccdValue) ? BLESubscribed : BLEUnsubscribed;
    2972:	4253      	negs	r3, r2
    2974:	415a      	adcs	r2, r3

    if (_eventHandlers[event]) {
    2976:	3210      	adds	r2, #16
    2978:	0092      	lsls	r2, r2, #2
    297a:	1882      	adds	r2, r0, r2
    297c:	6856      	ldr	r6, [r2, #4]
    297e:	2e00      	cmp	r6, #0
    2980:	d017      	beq.n	29b2 <_ZN22BLELocalCharacteristic14writeCccdValueE9BLEDevicet+0x52>
    2982:	2012      	movs	r0, #18
    2984:	4b0c      	ldr	r3, [pc, #48]	; (29b8 <_ZN22BLELocalCharacteristic14writeCccdValueE9BLEDevicet+0x58>)
    2986:	2206      	movs	r2, #6
    2988:	9303      	str	r3, [sp, #12]
    298a:	888b      	ldrh	r3, [r1, #4]
    298c:	ad03      	add	r5, sp, #12
    298e:	3106      	adds	r1, #6
    2990:	4468      	add	r0, sp
    2992:	80ab      	strh	r3, [r5, #4]
    2994:	f006 fce5 	bl	9362 <memcpy>
      _eventHandlers[event](device, BLECharacteristic(this));
    2998:	0021      	movs	r1, r4
    299a:	a801      	add	r0, sp, #4
    299c:	f7ff fc0c 	bl	21b8 <_ZN17BLECharacteristicC1EP22BLELocalCharacteristic>
    29a0:	a901      	add	r1, sp, #4
    29a2:	0028      	movs	r0, r5
    29a4:	47b0      	blx	r6
    29a6:	a801      	add	r0, sp, #4
    29a8:	f7ff fbe6 	bl	2178 <_ZN17BLECharacteristicD1Ev>
    29ac:	0028      	movs	r0, r5
    29ae:	f7ff fc3c 	bl	222a <_ZN9BLEDeviceD1Ev>
    }
  }
}
    29b2:	b006      	add	sp, #24
    29b4:	bd70      	pop	{r4, r5, r6, pc}
    29b6:	46c0      	nop			; (mov r8, r8)
    29b8:	0000b6d8 	.word	0x0000b6d8

000029bc <_ZNK18BLELocalDescriptor4typeEv>:
}

enum BLEAttributeType BLELocalDescriptor::type() const
{
  return BLETypeDescriptor;
}
    29bc:	20a4      	movs	r0, #164	; 0xa4
    29be:	0180      	lsls	r0, r0, #6
    29c0:	4770      	bx	lr
	...

000029c4 <_ZN18BLELocalDescriptorD1Ev>:
BLELocalDescriptor::~BLELocalDescriptor()
    29c4:	b510      	push	{r4, lr}
    29c6:	0004      	movs	r4, r0
    29c8:	4b03      	ldr	r3, [pc, #12]	; (29d8 <_ZN18BLELocalDescriptorD1Ev+0x14>)
    29ca:	3308      	adds	r3, #8
    29cc:	6003      	str	r3, [r0, #0]
    29ce:	f7ff fba1 	bl	2114 <_ZN12BLEAttributeD1Ev>
}
    29d2:	0020      	movs	r0, r4
    29d4:	bd10      	pop	{r4, pc}
    29d6:	46c0      	nop			; (mov r8, r8)
    29d8:	0000b780 	.word	0x0000b780

000029dc <_ZN18BLELocalDescriptorD0Ev>:
BLELocalDescriptor::~BLELocalDescriptor()
    29dc:	b510      	push	{r4, lr}
    29de:	0004      	movs	r4, r0
}
    29e0:	f7ff fff0 	bl	29c4 <_ZN18BLELocalDescriptorD1Ev>
    29e4:	0020      	movs	r0, r4
    29e6:	f002 fd33 	bl	5450 <_ZdlPv>
    29ea:	0020      	movs	r0, r4
    29ec:	bd10      	pop	{r4, pc}
	...

000029f0 <_ZN18BLELocalDescriptorC1EPKcPKhi>:
BLELocalDescriptor::BLELocalDescriptor(const char* uuid, const uint8_t value[], int valueSize) :
    29f0:	b570      	push	{r4, r5, r6, lr}
    29f2:	0004      	movs	r4, r0
    29f4:	0016      	movs	r6, r2
    29f6:	001d      	movs	r5, r3
  _handle(0x0000)
    29f8:	f7ff fb96 	bl	2128 <_ZN12BLEAttributeC1EPKc>
  _valueSize(min(valueSize, 512)),
    29fc:	2280      	movs	r2, #128	; 0x80
  _handle(0x0000)
    29fe:	4b06      	ldr	r3, [pc, #24]	; (2a18 <_ZN18BLELocalDescriptorC1EPKcPKhi+0x28>)
    2a00:	6226      	str	r6, [r4, #32]
    2a02:	3308      	adds	r3, #8
    2a04:	6023      	str	r3, [r4, #0]
  _valueSize(min(valueSize, 512)),
    2a06:	0092      	lsls	r2, r2, #2
    2a08:	4295      	cmp	r5, r2
    2a0a:	dd00      	ble.n	2a0e <_ZN18BLELocalDescriptorC1EPKcPKhi+0x1e>
    2a0c:	0015      	movs	r5, r2
  _handle(0x0000)
    2a0e:	2300      	movs	r3, #0
    2a10:	6265      	str	r5, [r4, #36]	; 0x24
}
    2a12:	0020      	movs	r0, r4
  _handle(0x0000)
    2a14:	8523      	strh	r3, [r4, #40]	; 0x28
}
    2a16:	bd70      	pop	{r4, r5, r6, pc}
    2a18:	0000b780 	.word	0x0000b780

00002a1c <_ZNK18BLELocalDescriptor9valueSizeEv>:

int BLELocalDescriptor::valueSize() const
{
  return _valueSize;
    2a1c:	6a40      	ldr	r0, [r0, #36]	; 0x24
}
    2a1e:	4770      	bx	lr

00002a20 <_ZNK18BLELocalDescriptor5valueEv>:

const uint8_t* BLELocalDescriptor::value() const
{
  return _value;
    2a20:	6a00      	ldr	r0, [r0, #32]
}
    2a22:	4770      	bx	lr

00002a24 <_ZN18BLELocalDescriptor9setHandleEt>:
  return _value[offset];
}

void BLELocalDescriptor::setHandle(uint16_t handle)
{
  _handle = handle;
    2a24:	8501      	strh	r1, [r0, #40]	; 0x28
}
    2a26:	4770      	bx	lr

00002a28 <_ZNK14BLELocalDevicecvbEv>:
}

BLELocalDevice::operator bool() const
{
  return true;
}
    2a28:	2001      	movs	r0, #1
    2a2a:	4770      	bx	lr

00002a2c <_ZNK14BLELocalDeviceeqERK9BLEDevice>:

bool BLELocalDevice::operator==(const BLEDevice& rhs) const
{
  return (this == &rhs);
    2a2c:	1a40      	subs	r0, r0, r1
    2a2e:	4241      	negs	r1, r0
    2a30:	4148      	adcs	r0, r1
    2a32:	b2c0      	uxtb	r0, r0
}
    2a34:	4770      	bx	lr

00002a36 <_ZNK14BLELocalDeviceneERK9BLEDevice>:

bool BLELocalDevice::operator!=(const BLEDevice& rhs) const
{
  return (this != &rhs);
    2a36:	1a40      	subs	r0, r0, r1
    2a38:	1e41      	subs	r1, r0, #1
    2a3a:	4188      	sbcs	r0, r1
    2a3c:	b2c0      	uxtb	r0, r0
}
    2a3e:	4770      	bx	lr

00002a40 <_ZN14BLELocalDeviceD1Ev>:
BLELocalDevice::~BLELocalDevice()
    2a40:	b510      	push	{r4, lr}
    2a42:	0004      	movs	r4, r0
    2a44:	4b03      	ldr	r3, [pc, #12]	; (2a54 <_ZN14BLELocalDeviceD1Ev+0x14>)
    2a46:	3308      	adds	r3, #8
    2a48:	6003      	str	r3, [r0, #0]
    2a4a:	f7ff fbee 	bl	222a <_ZN9BLEDeviceD1Ev>
}
    2a4e:	0020      	movs	r0, r4
    2a50:	bd10      	pop	{r4, pc}
    2a52:	46c0      	nop			; (mov r8, r8)
    2a54:	0000b794 	.word	0x0000b794

00002a58 <_ZN14BLELocalDeviceD0Ev>:
BLELocalDevice::~BLELocalDevice()
    2a58:	b510      	push	{r4, lr}
    2a5a:	0004      	movs	r4, r0
}
    2a5c:	f7ff fff0 	bl	2a40 <_ZN14BLELocalDeviceD1Ev>
    2a60:	0020      	movs	r0, r4
    2a62:	f002 fcf5 	bl	5450 <_ZdlPv>
    2a66:	0020      	movs	r0, r4
    2a68:	bd10      	pop	{r4, pc}
	...

00002a6c <_ZNK14BLELocalDevice9connectedEv>:
{
    2a6c:	b510      	push	{r4, lr}
  HCI.poll();
    2a6e:	4803      	ldr	r0, [pc, #12]	; (2a7c <_ZNK14BLELocalDevice9connectedEv+0x10>)
    2a70:	f001 fda0 	bl	45b4 <_ZN8HCIClass4pollEv>
  return ATT.connected();
    2a74:	4802      	ldr	r0, [pc, #8]	; (2a80 <_ZNK14BLELocalDevice9connectedEv+0x14>)
    2a76:	f000 fa7d 	bl	2f74 <_ZNK8ATTClass9connectedEv>
}
    2a7a:	bd10      	pop	{r4, pc}
    2a7c:	20000480 	.word	0x20000480
    2a80:	200002c8 	.word	0x200002c8

00002a84 <_ZN14BLELocalDevice10disconnectEv>:
{
    2a84:	b510      	push	{r4, lr}
  return ATT.disconnect();
    2a86:	4802      	ldr	r0, [pc, #8]	; (2a90 <_ZN14BLELocalDevice10disconnectEv+0xc>)
    2a88:	f000 fa8e 	bl	2fa8 <_ZN8ATTClass10disconnectEv>
}
    2a8c:	bd10      	pop	{r4, pc}
    2a8e:	46c0      	nop			; (mov r8, r8)
    2a90:	200002c8 	.word	0x200002c8

00002a94 <_ZNK14BLELocalDevice7addressEv>:
{
    2a94:	b530      	push	{r4, r5, lr}
    2a96:	0005      	movs	r5, r0
    2a98:	b08d      	sub	sp, #52	; 0x34
  uint8_t addr[6] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
    2a9a:	ac05      	add	r4, sp, #20
    2a9c:	2206      	movs	r2, #6
    2a9e:	2100      	movs	r1, #0
    2aa0:	0020      	movs	r0, r4
    2aa2:	f006 fc79 	bl	9398 <memset>
  HCI.readBdAddr(addr);
    2aa6:	0021      	movs	r1, r4
    2aa8:	480b      	ldr	r0, [pc, #44]	; (2ad8 <_ZNK14BLELocalDevice7addressEv+0x44>)
    2aaa:	f001 fe07 	bl	46bc <_ZN8HCIClass10readBdAddrEPh>
  sprintf(result, "%02x:%02x:%02x:%02x:%02x:%02x", addr[5], addr[4], addr[3], addr[2], addr[1], addr[0]);
    2aae:	7821      	ldrb	r1, [r4, #0]
    2ab0:	7923      	ldrb	r3, [r4, #4]
    2ab2:	7962      	ldrb	r2, [r4, #5]
    2ab4:	9103      	str	r1, [sp, #12]
    2ab6:	7861      	ldrb	r1, [r4, #1]
    2ab8:	a807      	add	r0, sp, #28
    2aba:	9102      	str	r1, [sp, #8]
    2abc:	78a1      	ldrb	r1, [r4, #2]
    2abe:	9101      	str	r1, [sp, #4]
    2ac0:	78e1      	ldrb	r1, [r4, #3]
    2ac2:	9100      	str	r1, [sp, #0]
    2ac4:	4905      	ldr	r1, [pc, #20]	; (2adc <_ZNK14BLELocalDevice7addressEv+0x48>)
    2ac6:	f007 f9a3 	bl	9e10 <siprintf>
  return result;
    2aca:	a907      	add	r1, sp, #28
    2acc:	0028      	movs	r0, r5
    2ace:	f004 f841 	bl	6b54 <_ZN6StringC1EPKc>
}
    2ad2:	0028      	movs	r0, r5
    2ad4:	b00d      	add	sp, #52	; 0x34
    2ad6:	bd30      	pop	{r4, r5, pc}
    2ad8:	20000480 	.word	0x20000480
    2adc:	0000b6b0 	.word	0x0000b6b0

00002ae0 <_ZN14BLELocalDeviceC1Ev>:
BLELocalDevice::BLELocalDevice()
    2ae0:	b510      	push	{r4, lr}
    2ae2:	0004      	movs	r4, r0
    2ae4:	f7ff fc40 	bl	2368 <_ZN9BLEDeviceC1Ev>
    2ae8:	4b02      	ldr	r3, [pc, #8]	; (2af4 <_ZN14BLELocalDeviceC1Ev+0x14>)
}
    2aea:	0020      	movs	r0, r4
BLELocalDevice::BLELocalDevice()
    2aec:	3308      	adds	r3, #8
    2aee:	6023      	str	r3, [r4, #0]
}
    2af0:	bd10      	pop	{r4, pc}
    2af2:	46c0      	nop			; (mov r8, r8)
    2af4:	0000b794 	.word	0x0000b794

00002af8 <_ZN14BLELocalDevice3endEv>:
{
    2af8:	b510      	push	{r4, lr}
  GATT.end();
    2afa:	4805      	ldr	r0, [pc, #20]	; (2b10 <_ZN14BLELocalDevice3endEv+0x18>)
    2afc:	f001 fae2 	bl	40c4 <_ZN9GATTClass3endEv>
  HCI.end();
    2b00:	4804      	ldr	r0, [pc, #16]	; (2b14 <_ZN14BLELocalDevice3endEv+0x1c>)
    2b02:	f001 fc15 	bl	4330 <_ZN8HCIClass3endEv>
  digitalWrite(NINA_RESETN, HIGH);
    2b06:	2101      	movs	r1, #1
    2b08:	201f      	movs	r0, #31
    2b0a:	f003 ff51 	bl	69b0 <digitalWrite>
}
    2b0e:	bd10      	pop	{r4, pc}
    2b10:	20000314 	.word	0x20000314
    2b14:	20000480 	.word	0x20000480

00002b18 <_ZN14BLELocalDevice5beginEv>:
{
    2b18:	b530      	push	{r4, r5, lr}
  pinMode(SPIWIFI_SS, OUTPUT);
    2b1a:	2101      	movs	r1, #1
{
    2b1c:	b087      	sub	sp, #28
    2b1e:	0005      	movs	r5, r0
  pinMode(SPIWIFI_SS, OUTPUT);
    2b20:	201c      	movs	r0, #28
    2b22:	f003 fef9 	bl	6918 <pinMode>
  pinMode(NINA_RESETN, OUTPUT);
    2b26:	2101      	movs	r1, #1
    2b28:	201f      	movs	r0, #31
    2b2a:	f003 fef5 	bl	6918 <pinMode>
  digitalWrite(SPIWIFI_SS, LOW);
    2b2e:	2100      	movs	r1, #0
    2b30:	201c      	movs	r0, #28
    2b32:	f003 ff3d 	bl	69b0 <digitalWrite>
  digitalWrite(NINA_RESETN, HIGH);
    2b36:	2101      	movs	r1, #1
    2b38:	201f      	movs	r0, #31
    2b3a:	f003 ff39 	bl	69b0 <digitalWrite>
  delay(100);
    2b3e:	2064      	movs	r0, #100	; 0x64
    2b40:	f002 fc3c 	bl	53bc <delay>
  digitalWrite(NINA_RESETN, LOW);
    2b44:	2100      	movs	r1, #0
    2b46:	201f      	movs	r0, #31
    2b48:	f003 ff32 	bl	69b0 <digitalWrite>
  delay(750);
    2b4c:	481d      	ldr	r0, [pc, #116]	; (2bc4 <_ZN14BLELocalDevice5beginEv+0xac>)
    2b4e:	f002 fc35 	bl	53bc <delay>
  if (!HCI.begin()) {
    2b52:	4c1d      	ldr	r4, [pc, #116]	; (2bc8 <_ZN14BLELocalDevice5beginEv+0xb0>)
    2b54:	0020      	movs	r0, r4
    2b56:	f001 fbdf 	bl	4318 <_ZN8HCIClass5beginEv>
    2b5a:	2800      	cmp	r0, #0
    2b5c:	d105      	bne.n	2b6a <_ZN14BLELocalDevice5beginEv+0x52>
    end();
    2b5e:	0028      	movs	r0, r5
    2b60:	f7ff ffca 	bl	2af8 <_ZN14BLELocalDevice3endEv>
    return 0;
    2b64:	2000      	movs	r0, #0
}
    2b66:	b007      	add	sp, #28
    2b68:	bd30      	pop	{r4, r5, pc}
  delay(100);
    2b6a:	2064      	movs	r0, #100	; 0x64
    2b6c:	f002 fc26 	bl	53bc <delay>
  if (HCI.reset() != 0) {
    2b70:	0020      	movs	r0, r4
    2b72:	f001 fd73 	bl	465c <_ZN8HCIClass5resetEv>
    2b76:	2800      	cmp	r0, #0
    2b78:	d1f1      	bne.n	2b5e <_ZN14BLELocalDevice5beginEv+0x46>
  if (HCI.readLocalVersion(hciVer, hciRev, lmpVer, manufacturer, lmpSubVer) != 0) {
    2b7a:	ab05      	add	r3, sp, #20
    2b7c:	9301      	str	r3, [sp, #4]
    2b7e:	2312      	movs	r3, #18
    2b80:	446b      	add	r3, sp
    2b82:	9300      	str	r3, [sp, #0]
    2b84:	210d      	movs	r1, #13
    2b86:	230e      	movs	r3, #14
    2b88:	aa04      	add	r2, sp, #16
    2b8a:	446b      	add	r3, sp
    2b8c:	4469      	add	r1, sp
    2b8e:	0020      	movs	r0, r4
    2b90:	f001 fd6e 	bl	4670 <_ZN8HCIClass16readLocalVersionERhRtS0_S1_S1_>
    2b94:	2800      	cmp	r0, #0
    2b96:	d1e2      	bne.n	2b5e <_ZN14BLELocalDevice5beginEv+0x46>
  if (HCI.setEventMask(0x3FFFFFFFFFFFFFFF) != 0) {
    2b98:	2201      	movs	r2, #1
    2b9a:	4b0c      	ldr	r3, [pc, #48]	; (2bcc <_ZN14BLELocalDevice5beginEv+0xb4>)
    2b9c:	4252      	negs	r2, r2
    2b9e:	0020      	movs	r0, r4
    2ba0:	f001 fdbc 	bl	471c <_ZN8HCIClass12setEventMaskEy>
    2ba4:	2800      	cmp	r0, #0
    2ba6:	d1da      	bne.n	2b5e <_ZN14BLELocalDevice5beginEv+0x46>
  if (HCI.readLeBufferSize(pktLen, maxPkt) != 0) {
    2ba8:	220f      	movs	r2, #15
    2baa:	2116      	movs	r1, #22
    2bac:	446a      	add	r2, sp
    2bae:	4469      	add	r1, sp
    2bb0:	0020      	movs	r0, r4
    2bb2:	f001 fdbf 	bl	4734 <_ZN8HCIClass16readLeBufferSizeERtRh>
    2bb6:	2800      	cmp	r0, #0
    2bb8:	d1d1      	bne.n	2b5e <_ZN14BLELocalDevice5beginEv+0x46>
  GATT.begin();
    2bba:	4805      	ldr	r0, [pc, #20]	; (2bd0 <_ZN14BLELocalDevice5beginEv+0xb8>)
    2bbc:	f001 fb40 	bl	4240 <_ZN9GATTClass5beginEv>
  return 1;
    2bc0:	2001      	movs	r0, #1
    2bc2:	e7d0      	b.n	2b66 <_ZN14BLELocalDevice5beginEv+0x4e>
    2bc4:	000002ee 	.word	0x000002ee
    2bc8:	20000480 	.word	0x20000480
    2bcc:	3fffffff 	.word	0x3fffffff
    2bd0:	20000314 	.word	0x20000314

00002bd4 <_ZN14BLELocalDevice20setAdvertisedServiceERK10BLEService>:
{
    2bd4:	b510      	push	{r4, lr}
  setAdvertisedServiceUuid(service.uuid());
    2bd6:	0008      	movs	r0, r1
    2bd8:	f7ff fc28 	bl	242c <_ZNK10BLEService4uuidEv>
    2bdc:	0001      	movs	r1, r0
  GAP.setAdvertisedServiceUuid(advertisedServiceUuid);
    2bde:	4802      	ldr	r0, [pc, #8]	; (2be8 <_ZN14BLELocalDevice20setAdvertisedServiceERK10BLEService+0x14>)
    2be0:	f001 f930 	bl	3e44 <_ZN8GAPClass24setAdvertisedServiceUuidEPKc>
}
    2be4:	bd10      	pop	{r4, pc}
    2be6:	46c0      	nop			; (mov r8, r8)
    2be8:	200002ec 	.word	0x200002ec

00002bec <_ZN14BLELocalDevice12setLocalNameEPKc>:
{
    2bec:	b510      	push	{r4, lr}
  GAP.setLocalName(localName);
    2bee:	4802      	ldr	r0, [pc, #8]	; (2bf8 <_ZN14BLELocalDevice12setLocalNameEPKc+0xc>)
    2bf0:	f001 f92a 	bl	3e48 <_ZN8GAPClass12setLocalNameEPKc>
}
    2bf4:	bd10      	pop	{r4, pc}
    2bf6:	46c0      	nop			; (mov r8, r8)
    2bf8:	200002ec 	.word	0x200002ec

00002bfc <_ZN14BLELocalDevice10addServiceER10BLEService>:
{
    2bfc:	b510      	push	{r4, lr}
  GATT.addService(service);
    2bfe:	4802      	ldr	r0, [pc, #8]	; (2c08 <_ZN14BLELocalDevice10addServiceER10BLEService+0xc>)
    2c00:	f001 fb38 	bl	4274 <_ZN9GATTClass10addServiceER10BLEService>
}
    2c04:	bd10      	pop	{r4, pc}
    2c06:	46c0      	nop			; (mov r8, r8)
    2c08:	20000314 	.word	0x20000314

00002c0c <_ZN14BLELocalDevice9advertiseEv>:
{
    2c0c:	b510      	push	{r4, lr}
  return GAP.advertise();
    2c0e:	4802      	ldr	r0, [pc, #8]	; (2c18 <_ZN14BLELocalDevice9advertiseEv+0xc>)
    2c10:	f001 f91e 	bl	3e50 <_ZN8GAPClass9advertiseEv>
}
    2c14:	bd10      	pop	{r4, pc}
    2c16:	46c0      	nop			; (mov r8, r8)
    2c18:	200002ec 	.word	0x200002ec

00002c1c <_ZN14BLELocalDevice7centralEv>:
{
    2c1c:	b510      	push	{r4, lr}
    2c1e:	0004      	movs	r4, r0
  HCI.poll();
    2c20:	4804      	ldr	r0, [pc, #16]	; (2c34 <_ZN14BLELocalDevice7centralEv+0x18>)
    2c22:	f001 fcc7 	bl	45b4 <_ZN8HCIClass4pollEv>
  return ATT.central();
    2c26:	0020      	movs	r0, r4
    2c28:	4903      	ldr	r1, [pc, #12]	; (2c38 <_ZN14BLELocalDevice7centralEv+0x1c>)
    2c2a:	f000 f9d9 	bl	2fe0 <_ZN8ATTClass7centralEv>
}
    2c2e:	0020      	movs	r0, r4
    2c30:	bd10      	pop	{r4, pc}
    2c32:	46c0      	nop			; (mov r8, r8)
    2c34:	20000480 	.word	0x20000480
    2c38:	200002c8 	.word	0x200002c8

00002c3c <_GLOBAL__sub_I__ZN14BLELocalDeviceC2Ev>:
void BLELocalDevice::noDebug()
{
  HCI.noDebug();
}

BLELocalDevice BLE;
    2c3c:	b510      	push	{r4, lr}
    2c3e:	4c05      	ldr	r4, [pc, #20]	; (2c54 <_GLOBAL__sub_I__ZN14BLELocalDeviceC2Ev+0x18>)
    2c40:	0020      	movs	r0, r4
    2c42:	f7ff ff4d 	bl	2ae0 <_ZN14BLELocalDeviceC1Ev>
    2c46:	4a04      	ldr	r2, [pc, #16]	; (2c58 <_GLOBAL__sub_I__ZN14BLELocalDeviceC2Ev+0x1c>)
    2c48:	4904      	ldr	r1, [pc, #16]	; (2c5c <_GLOBAL__sub_I__ZN14BLELocalDeviceC2Ev+0x20>)
    2c4a:	0020      	movs	r0, r4
    2c4c:	f004 fbd4 	bl	73f8 <__aeabi_atexit>
    2c50:	bd10      	pop	{r4, pc}
    2c52:	46c0      	nop			; (mov r8, r8)
    2c54:	200002bc 	.word	0x200002bc
    2c58:	20000000 	.word	0x20000000
    2c5c:	00002a41 	.word	0x00002a41

00002c60 <_ZN14BLELocalDevice4rssiEv>:
{
    2c60:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  BLEDevice central = ATT.central();
    2c62:	490a      	ldr	r1, [pc, #40]	; (2c8c <_ZN14BLELocalDevice4rssiEv+0x2c>)
    2c64:	a801      	add	r0, sp, #4
    2c66:	f000 f9bb 	bl	2fe0 <_ZN8ATTClass7centralEv>
  if (central) {
    2c6a:	a801      	add	r0, sp, #4
    2c6c:	f7ff fb2e 	bl	22cc <_ZNK9BLEDevicecvbEv>
  return 127;
    2c70:	247f      	movs	r4, #127	; 0x7f
  if (central) {
    2c72:	2800      	cmp	r0, #0
    2c74:	d003      	beq.n	2c7e <_ZN14BLELocalDevice4rssiEv+0x1e>
    return central.rssi();
    2c76:	a801      	add	r0, sp, #4
    2c78:	f7ff fb1a 	bl	22b0 <_ZN9BLEDevice4rssiEv>
    2c7c:	0004      	movs	r4, r0
  BLEDevice central = ATT.central();
    2c7e:	a801      	add	r0, sp, #4
    2c80:	f7ff fad3 	bl	222a <_ZN9BLEDeviceD1Ev>
}
    2c84:	0020      	movs	r0, r4
    2c86:	b004      	add	sp, #16
    2c88:	bd10      	pop	{r4, pc}
    2c8a:	46c0      	nop			; (mov r8, r8)
    2c8c:	200002c8 	.word	0x200002c8

00002c90 <_ZNK15BLELocalService4typeEv>:
}

enum BLEAttributeType BLELocalService::type() const
{
  return BLETypeService;
}
    2c90:	20a0      	movs	r0, #160	; 0xa0
    2c92:	0180      	lsls	r0, r0, #6
    2c94:	4770      	bx	lr
	...

00002c98 <_ZN15BLELocalServiceC1EPKc>:
BLELocalService::BLELocalService(const char* uuid) :
    2c98:	b510      	push	{r4, lr}
    2c9a:	0004      	movs	r4, r0
  _endHandle(0x0000)
    2c9c:	f7ff fa44 	bl	2128 <_ZN12BLEAttributeC1EPKc>
    2ca0:	4b05      	ldr	r3, [pc, #20]	; (2cb8 <_ZN15BLELocalServiceC1EPKc+0x20>)
}
    2ca2:	0020      	movs	r0, r4
  _endHandle(0x0000)
    2ca4:	3308      	adds	r3, #8
    2ca6:	6023      	str	r3, [r4, #0]
    2ca8:	2300      	movs	r3, #0
    2caa:	8423      	strh	r3, [r4, #32]
    2cac:	8463      	strh	r3, [r4, #34]	; 0x22
  _last(NULL)
    2cae:	6263      	str	r3, [r4, #36]	; 0x24
    2cb0:	62a3      	str	r3, [r4, #40]	; 0x28
    2cb2:	62e3      	str	r3, [r4, #44]	; 0x2c
}
    2cb4:	bd10      	pop	{r4, pc}
    2cb6:	46c0      	nop			; (mov r8, r8)
    2cb8:	0000b7c8 	.word	0x0000b7c8

00002cbc <_ZN15BLELocalService10setHandlesEtt>:
  }
}

void BLELocalService::setHandles(uint16_t start, uint16_t end)
{
  _startHandle = start;
    2cbc:	8401      	strh	r1, [r0, #32]
  _endHandle = end;
    2cbe:	8442      	strh	r2, [r0, #34]	; 0x22
}
    2cc0:	4770      	bx	lr

00002cc2 <_ZNK15BLELocalService11startHandleEv>:

uint16_t BLELocalService::startHandle() const
{
  return _startHandle;
    2cc2:	8c00      	ldrh	r0, [r0, #32]
}
    2cc4:	4770      	bx	lr

00002cc6 <_ZNK15BLELocalService9endHandleEv>:

uint16_t BLELocalService::endHandle() const
{
  return _endHandle;
    2cc6:	8c40      	ldrh	r0, [r0, #34]	; 0x22
}
    2cc8:	4770      	bx	lr

00002cca <_ZNK15BLELocalService19characteristicCountEv>:

unsigned int BLELocalService::characteristicCount() const
{
  return _characteristics.size();
    2cca:	6a40      	ldr	r0, [r0, #36]	; 0x24
}
    2ccc:	4770      	bx	lr

00002cce <_ZNK15BLELocalService14characteristicEj>:
  if (index >= _size) {
    2cce:	6a42      	ldr	r2, [r0, #36]	; 0x24
    return T();
    2cd0:	2300      	movs	r3, #0
  if (index >= _size) {
    2cd2:	4291      	cmp	r1, r2
    2cd4:	d207      	bcs.n	2ce6 <_ZNK15BLELocalService14characteristicEj+0x18>
  for (unsigned int i = 0; i < index; i++) {
    2cd6:	2200      	movs	r2, #0
  BLELinkedListNode<T>* itemNode = _root;
    2cd8:	6a83      	ldr	r3, [r0, #40]	; 0x28
  for (unsigned int i = 0; i < index; i++) {
    2cda:	4291      	cmp	r1, r2
    2cdc:	d002      	beq.n	2ce4 <_ZNK15BLELocalService14characteristicEj+0x16>
    itemNode = itemNode->next;
    2cde:	685b      	ldr	r3, [r3, #4]
  for (unsigned int i = 0; i < index; i++) {
    2ce0:	3201      	adds	r2, #1
    2ce2:	e7fa      	b.n	2cda <_ZNK15BLELocalService14characteristicEj+0xc>
  return itemNode->data;
    2ce4:	681b      	ldr	r3, [r3, #0]

BLELocalCharacteristic* BLELocalService::characteristic(unsigned int index) const
{
  return _characteristics.get(index);
}
    2ce6:	0018      	movs	r0, r3
    2ce8:	4770      	bx	lr

00002cea <_ZN15BLELocalService17addCharacteristicEP22BLELocalCharacteristic>:

void BLELocalService::addCharacteristic(BLELocalCharacteristic* characteristic)
{
    2cea:	b570      	push	{r4, r5, r6, lr}
    2cec:	0004      	movs	r4, r0
  characteristic->retain();
    2cee:	0008      	movs	r0, r1
{
    2cf0:	000d      	movs	r5, r1
  characteristic->retain();
    2cf2:	f7ff fa36 	bl	2162 <_ZN12BLEAttribute6retainEv>
  BLELinkedListNode<T>* itemNode = new BLELinkedListNode<T>();
    2cf6:	2008      	movs	r0, #8
    2cf8:	f002 fba6 	bl	5448 <_Znwj>
    2cfc:	2300      	movs	r3, #0
    2cfe:	6043      	str	r3, [r0, #4]
  if (_root == NULL) {
    2d00:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  itemNode->data = item;
    2d02:	6005      	str	r5, [r0, #0]
  if (_root == NULL) {
    2d04:	2b00      	cmp	r3, #0
    2d06:	d105      	bne.n	2d14 <_ZN15BLELocalService17addCharacteristicEP22BLELocalCharacteristic+0x2a>
    _root = itemNode;
    2d08:	62a0      	str	r0, [r4, #40]	; 0x28
  _size++;
    2d0a:	6a63      	ldr	r3, [r4, #36]	; 0x24
  _last = itemNode;
    2d0c:	62e0      	str	r0, [r4, #44]	; 0x2c
  _size++;
    2d0e:	3301      	adds	r3, #1
    2d10:	6263      	str	r3, [r4, #36]	; 0x24

  _characteristics.add(characteristic);
}
    2d12:	bd70      	pop	{r4, r5, r6, pc}
    _last->next = itemNode;
    2d14:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    2d16:	6058      	str	r0, [r3, #4]
    2d18:	e7f7      	b.n	2d0a <_ZN15BLELocalService17addCharacteristicEP22BLELocalCharacteristic+0x20>

00002d1a <_ZN15BLELocalService17addCharacteristicER17BLECharacteristic>:
{
    2d1a:	b510      	push	{r4, lr}
    2d1c:	0004      	movs	r4, r0
  BLELocalCharacteristic* localCharacteristic = characteristic.local();
    2d1e:	0008      	movs	r0, r1
    2d20:	f7ff fa81 	bl	2226 <_ZN17BLECharacteristic5localEv>
    2d24:	1e01      	subs	r1, r0, #0
  if (localCharacteristic) {
    2d26:	d002      	beq.n	2d2e <_ZN15BLELocalService17addCharacteristicER17BLECharacteristic+0x14>
    addCharacteristic(localCharacteristic);
    2d28:	0020      	movs	r0, r4
    2d2a:	f7ff ffde 	bl	2cea <_ZN15BLELocalService17addCharacteristicEP22BLELocalCharacteristic>
}
    2d2e:	bd10      	pop	{r4, pc}

00002d30 <_ZN13BLELinkedListIP22BLELocalCharacteristicE5clearEv>:
template <typename T> void BLELinkedList<T>::clear()
    2d30:	b570      	push	{r4, r5, r6, lr}
  for (unsigned int i = 0; i < _size; i++) {
    2d32:	2500      	movs	r5, #0
template <typename T> void BLELinkedList<T>::clear()
    2d34:	0004      	movs	r4, r0
  BLELinkedListNode<T>* itemNode = _root;
    2d36:	6840      	ldr	r0, [r0, #4]
  for (unsigned int i = 0; i < _size; i++) {
    2d38:	6823      	ldr	r3, [r4, #0]
    2d3a:	429d      	cmp	r5, r3
    2d3c:	d205      	bcs.n	2d4a <_ZN13BLELinkedListIP22BLELocalCharacteristicE5clearEv+0x1a>
    itemNode = itemNode->next;
    2d3e:	6846      	ldr	r6, [r0, #4]
  for (unsigned int i = 0; i < _size; i++) {
    2d40:	3501      	adds	r5, #1
    delete n;
    2d42:	f002 fb85 	bl	5450 <_ZdlPv>
    itemNode = itemNode->next;
    2d46:	0030      	movs	r0, r6
  for (unsigned int i = 0; i < _size; i++) {
    2d48:	e7f6      	b.n	2d38 <_ZN13BLELinkedListIP22BLELocalCharacteristicE5clearEv+0x8>
  _size = 0;
    2d4a:	2300      	movs	r3, #0
    2d4c:	6023      	str	r3, [r4, #0]
  _root = NULL;
    2d4e:	6063      	str	r3, [r4, #4]
  _last = NULL;
    2d50:	60a3      	str	r3, [r4, #8]
}
    2d52:	bd70      	pop	{r4, r5, r6, pc}

00002d54 <_ZN15BLELocalServiceD1Ev>:
BLELocalService::~BLELocalService()
    2d54:	b570      	push	{r4, r5, r6, lr}
    2d56:	0004      	movs	r4, r0
  for (unsigned int i = 0; i < characteristicCount(); i++) {
    2d58:	2500      	movs	r5, #0
BLELocalService::~BLELocalService()
    2d5a:	4b14      	ldr	r3, [pc, #80]	; (2dac <_ZN15BLELocalServiceD1Ev+0x58>)
    2d5c:	3308      	adds	r3, #8
    2d5e:	6003      	str	r3, [r0, #0]
  for (unsigned int i = 0; i < characteristicCount(); i++) {
    2d60:	6a63      	ldr	r3, [r4, #36]	; 0x24
    2d62:	429d      	cmp	r5, r3
    2d64:	d214      	bcs.n	2d90 <_ZN15BLELocalServiceD1Ev+0x3c>
  for (unsigned int i = 0; i < index; i++) {
    2d66:	2200      	movs	r2, #0
  BLELinkedListNode<T>* itemNode = _root;
    2d68:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  for (unsigned int i = 0; i < index; i++) {
    2d6a:	4295      	cmp	r5, r2
    2d6c:	d002      	beq.n	2d74 <_ZN15BLELocalServiceD1Ev+0x20>
    itemNode = itemNode->next;
    2d6e:	685b      	ldr	r3, [r3, #4]
  for (unsigned int i = 0; i < index; i++) {
    2d70:	3201      	adds	r2, #1
    2d72:	e7fa      	b.n	2d6a <_ZN15BLELocalServiceD1Ev+0x16>
  return itemNode->data;
    2d74:	681e      	ldr	r6, [r3, #0]
    if (c->release() <= 0) {
    2d76:	0030      	movs	r0, r6
    2d78:	f7ff f9f8 	bl	216c <_ZN12BLEAttribute7releaseEv>
    2d7c:	2800      	cmp	r0, #0
    2d7e:	dc05      	bgt.n	2d8c <_ZN15BLELocalServiceD1Ev+0x38>
      delete c;
    2d80:	2e00      	cmp	r6, #0
    2d82:	d003      	beq.n	2d8c <_ZN15BLELocalServiceD1Ev+0x38>
    2d84:	6833      	ldr	r3, [r6, #0]
    2d86:	0030      	movs	r0, r6
    2d88:	685b      	ldr	r3, [r3, #4]
    2d8a:	4798      	blx	r3
  for (unsigned int i = 0; i < characteristicCount(); i++) {
    2d8c:	3501      	adds	r5, #1
    2d8e:	e7e7      	b.n	2d60 <_ZN15BLELocalServiceD1Ev+0xc>
  _characteristics.clear();
    2d90:	0025      	movs	r5, r4
    2d92:	3524      	adds	r5, #36	; 0x24
    2d94:	0028      	movs	r0, r5
    2d96:	f7ff ffcb 	bl	2d30 <_ZN13BLELinkedListIP22BLELocalCharacteristicE5clearEv>
  clear();
    2d9a:	0028      	movs	r0, r5
    2d9c:	f7ff ffc8 	bl	2d30 <_ZN13BLELinkedListIP22BLELocalCharacteristicE5clearEv>
BLELocalService::~BLELocalService()
    2da0:	0020      	movs	r0, r4
    2da2:	f7ff f9b7 	bl	2114 <_ZN12BLEAttributeD1Ev>
}
    2da6:	0020      	movs	r0, r4
    2da8:	bd70      	pop	{r4, r5, r6, pc}
    2daa:	46c0      	nop			; (mov r8, r8)
    2dac:	0000b7c8 	.word	0x0000b7c8

00002db0 <_ZN15BLELocalServiceD0Ev>:
BLELocalService::~BLELocalService()
    2db0:	b510      	push	{r4, lr}
    2db2:	0004      	movs	r4, r0
}
    2db4:	f7ff ffce 	bl	2d54 <_ZN15BLELocalServiceD1Ev>
    2db8:	0020      	movs	r0, r4
    2dba:	f002 fb49 	bl	5450 <_ZdlPv>
    2dbe:	0020      	movs	r0, r4
    2dc0:	bd10      	pop	{r4, pc}
	...

00002dc4 <_ZN8ATTClassD1Ev>:
{
  memset(_peerAddress, 0x00, sizeof(_peerAddress));
  memset(_eventHandlers, 0x00, sizeof(_eventHandlers));
}

ATTClass::~ATTClass()
    2dc4:	4b05      	ldr	r3, [pc, #20]	; (2ddc <_ZN8ATTClassD1Ev+0x18>)
    2dc6:	b510      	push	{r4, lr}
    2dc8:	3308      	adds	r3, #8
    2dca:	0004      	movs	r4, r0
    2dcc:	6003      	str	r3, [r0, #0]
{
  if (_longWriteValue) {
    2dce:	6940      	ldr	r0, [r0, #20]
    2dd0:	2800      	cmp	r0, #0
    2dd2:	d001      	beq.n	2dd8 <_ZN8ATTClassD1Ev+0x14>
    free(_longWriteValue);
    2dd4:	f006 fa9a 	bl	930c <free>
  }
}
    2dd8:	0020      	movs	r0, r4
    2dda:	bd10      	pop	{r4, pc}
    2ddc:	0000b7dc 	.word	0x0000b7dc

00002de0 <_ZN8ATTClassD0Ev>:
ATTClass::~ATTClass()
    2de0:	b510      	push	{r4, lr}
    2de2:	0004      	movs	r4, r0
}
    2de4:	f7ff ffee 	bl	2dc4 <_ZN8ATTClassD1Ev>
    2de8:	0020      	movs	r0, r4
    2dea:	f002 fb31 	bl	5450 <_ZdlPv>
    2dee:	0020      	movs	r0, r4
    2df0:	bd10      	pop	{r4, pc}
	...

00002df4 <_ZN8ATTClass9sendErrorEthth.constprop.3>:
void ATTClass::handleCnf(uint16_t /*connectionHandle*/, uint8_t /*dlen*/, uint8_t /*data*/[])
{
  _cnf = true;
}

void ATTClass::sendError(uint16_t connectionHandle, uint8_t opcode, uint16_t handle, uint8_t code)
    2df4:	b5f0      	push	{r4, r5, r6, r7, lr}
  struct __attribute__ ((packed)) {
    uint8_t op;
    uint8_t opcode;
    uint16_t handle;
    uint8_t code;
  } attError = { ATT_OP_ERROR, opcode, handle, code };
    2df6:	2505      	movs	r5, #5
void ATTClass::sendError(uint16_t connectionHandle, uint8_t opcode, uint16_t handle, uint8_t code)
    2df8:	b087      	sub	sp, #28
  } attError = { ATT_OP_ERROR, opcode, handle, code };
    2dfa:	ac04      	add	r4, sp, #16
void ATTClass::sendError(uint16_t connectionHandle, uint8_t opcode, uint16_t handle, uint8_t code)
    2dfc:	9002      	str	r0, [sp, #8]
    2dfe:	000f      	movs	r7, r1
    2e00:	0016      	movs	r6, r2
  } attError = { ATT_OP_ERROR, opcode, handle, code };
    2e02:	2100      	movs	r1, #0
    2e04:	002a      	movs	r2, r5
    2e06:	0020      	movs	r0, r4
void ATTClass::sendError(uint16_t connectionHandle, uint8_t opcode, uint16_t handle, uint8_t code)
    2e08:	9303      	str	r3, [sp, #12]
  } attError = { ATT_OP_ERROR, opcode, handle, code };
    2e0a:	f006 fac5 	bl	9398 <memset>
    2e0e:	2301      	movs	r3, #1
    2e10:	7023      	strb	r3, [r4, #0]
    2e12:	466b      	mov	r3, sp
    2e14:	7b1b      	ldrb	r3, [r3, #12]
    2e16:	7067      	strb	r7, [r4, #1]
    2e18:	7123      	strb	r3, [r4, #4]
    2e1a:	8066      	strh	r6, [r4, #2]

  HCI.sendAclPkt(connectionHandle, ATT_CID, sizeof(attError), &attError);
    2e1c:	002b      	movs	r3, r5
    2e1e:	9400      	str	r4, [sp, #0]
    2e20:	2204      	movs	r2, #4
    2e22:	9902      	ldr	r1, [sp, #8]
    2e24:	4802      	ldr	r0, [pc, #8]	; (2e30 <_ZN8ATTClass9sendErrorEthth.constprop.3+0x3c>)
    2e26:	f001 fabf 	bl	43a8 <_ZN8HCIClass10sendAclPktEthhPv>
}
    2e2a:	b007      	add	sp, #28
    2e2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2e2e:	46c0      	nop			; (mov r8, r8)
    2e30:	20000480 	.word	0x20000480

00002e34 <_ZN8ATTClassC1Ev>:
  _longWriteValueLength(0)
    2e34:	4b0d      	ldr	r3, [pc, #52]	; (2e6c <_ZN8ATTClassC1Ev+0x38>)
    2e36:	2201      	movs	r2, #1
    2e38:	3308      	adds	r3, #8
ATTClass::ATTClass() :
    2e3a:	b570      	push	{r4, r5, r6, lr}
  _longWriteValueLength(0)
    2e3c:	2500      	movs	r5, #0
    2e3e:	6003      	str	r3, [r0, #0]
    2e40:	2317      	movs	r3, #23
ATTClass::ATTClass() :
    2e42:	0004      	movs	r4, r0
  _longWriteValueLength(0)
    2e44:	4252      	negs	r2, r2
    2e46:	8083      	strh	r3, [r0, #4]
    2e48:	81c3      	strh	r3, [r0, #14]
    2e4a:	8245      	strh	r5, [r0, #18]
    2e4c:	6145      	str	r5, [r0, #20]
    2e4e:	8305      	strh	r5, [r0, #24]
  memset(_peerAddress, 0x00, sizeof(_peerAddress));
    2e50:	0029      	movs	r1, r5
  _longWriteValueLength(0)
    2e52:	80c2      	strh	r2, [r0, #6]
  memset(_peerAddress, 0x00, sizeof(_peerAddress));
    2e54:	3207      	adds	r2, #7
    2e56:	3008      	adds	r0, #8
    2e58:	f006 fa9e 	bl	9398 <memset>
  memset(_eventHandlers, 0x00, sizeof(_eventHandlers));
    2e5c:	0020      	movs	r0, r4
    2e5e:	0029      	movs	r1, r5
    2e60:	2208      	movs	r2, #8
    2e62:	301c      	adds	r0, #28
    2e64:	f006 fa98 	bl	9398 <memset>
}
    2e68:	0020      	movs	r0, r4
    2e6a:	bd70      	pop	{r4, r5, r6, pc}
    2e6c:	0000b7dc 	.word	0x0000b7dc

00002e70 <_ZN8ATTClass9setMaxMtuEt>:
  _maxMtu = maxMtu;
    2e70:	8081      	strh	r1, [r0, #4]
}
    2e72:	4770      	bx	lr

00002e74 <_ZN8ATTClass13addConnectionEthhPhttth>:
{
    2e74:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    2e76:	0004      	movs	r4, r0
    2e78:	000d      	movs	r5, r1
  if (role == 1) {
    2e7a:	2a01      	cmp	r2, #1
    2e7c:	d116      	bne.n	2eac <_ZN8ATTClass13addConnectionEthhPhttth+0x38>
    memcpy(_peerAddress, peerBdaddr, sizeof(_peerAddress));
    2e7e:	0006      	movs	r6, r0
    _mtu = 23;
    2e80:	2317      	movs	r3, #23
    memcpy(_peerAddress, peerBdaddr, sizeof(_peerAddress));
    2e82:	3608      	adds	r6, #8
    _connectionHandle = handle;
    2e84:	80e1      	strh	r1, [r4, #6]
    memcpy(_peerAddress, peerBdaddr, sizeof(_peerAddress));
    2e86:	3205      	adds	r2, #5
    _mtu = 23;
    2e88:	81c3      	strh	r3, [r0, #14]
    memcpy(_peerAddress, peerBdaddr, sizeof(_peerAddress));
    2e8a:	9908      	ldr	r1, [sp, #32]
    2e8c:	0030      	movs	r0, r6
    2e8e:	f006 fa68 	bl	9362 <memcpy>
    if (_eventHandlers[BLEConnected]) {
    2e92:	69e4      	ldr	r4, [r4, #28]
    2e94:	2c00      	cmp	r4, #0
    2e96:	d009      	beq.n	2eac <_ZN8ATTClass13addConnectionEthhPhttth+0x38>
      _eventHandlers[BLEConnected](BLEDevice(_connectionHandle, _peerAddress));
    2e98:	0032      	movs	r2, r6
    2e9a:	0029      	movs	r1, r5
    2e9c:	a801      	add	r0, sp, #4
    2e9e:	f7ff fa75 	bl	238c <_ZN9BLEDeviceC1EtPh>
    2ea2:	a801      	add	r0, sp, #4
    2ea4:	47a0      	blx	r4
    2ea6:	a801      	add	r0, sp, #4
    2ea8:	f7ff f9bf 	bl	222a <_ZN9BLEDeviceD1Ev>
}
    2eac:	bd7f      	pop	{r0, r1, r2, r3, r4, r5, r6, pc}
	...

00002eb0 <_ZN8ATTClass16removeConnectionEht>:
{
    2eb0:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (_connectionHandle == handle) {
    2eb2:	88c3      	ldrh	r3, [r0, #6]
{
    2eb4:	b089      	sub	sp, #36	; 0x24
    2eb6:	0004      	movs	r4, r0
  if (_connectionHandle == handle) {
    2eb8:	428b      	cmp	r3, r1
    2eba:	d153      	bne.n	2f64 <_ZN8ATTClass16removeConnectionEht+0xb4>
    BLEDevice bleDevice(_connectionHandle, _peerAddress);
    2ebc:	0002      	movs	r2, r0
    2ebe:	0019      	movs	r1, r3
    2ec0:	3208      	adds	r2, #8
    2ec2:	a802      	add	r0, sp, #8
    2ec4:	9201      	str	r2, [sp, #4]
    for (uint16_t i = 0; i < GATT.attributeCount(); i++) {
    2ec6:	2500      	movs	r5, #0
    BLEDevice bleDevice(_connectionHandle, _peerAddress);
    2ec8:	f7ff fa60 	bl	238c <_ZN9BLEDeviceC1EtPh>
    for (uint16_t i = 0; i < GATT.attributeCount(); i++) {
    2ecc:	4e26      	ldr	r6, [pc, #152]	; (2f68 <_ZN8ATTClass16removeConnectionEht+0xb8>)
    2ece:	0030      	movs	r0, r6
    2ed0:	f001 f8e4 	bl	409c <_ZNK9GATTClass14attributeCountEv>
    2ed4:	4285      	cmp	r5, r0
    2ed6:	d222      	bcs.n	2f1e <_ZN8ATTClass16removeConnectionEht+0x6e>
      BLEAttribute* attribute = GATT.attribute(i);
    2ed8:	0029      	movs	r1, r5
    2eda:	0030      	movs	r0, r6
    2edc:	f001 f905 	bl	40ea <_ZNK9GATTClass9attributeEj>
      if (attribute->type() == BLETypeCharacteristic) {
    2ee0:	6803      	ldr	r3, [r0, #0]
      BLEAttribute* attribute = GATT.attribute(i);
    2ee2:	0007      	movs	r7, r0
      if (attribute->type() == BLETypeCharacteristic) {
    2ee4:	689b      	ldr	r3, [r3, #8]
    2ee6:	4798      	blx	r3
    2ee8:	4b20      	ldr	r3, [pc, #128]	; (2f6c <_ZN8ATTClass16removeConnectionEht+0xbc>)
    2eea:	4298      	cmp	r0, r3
    2eec:	d114      	bne.n	2f18 <_ZN8ATTClass16removeConnectionEht+0x68>
    2eee:	2206      	movs	r2, #6
    2ef0:	2012      	movs	r0, #18
    2ef2:	4b1f      	ldr	r3, [pc, #124]	; (2f70 <_ZN8ATTClass16removeConnectionEht+0xc0>)
    2ef4:	ae05      	add	r6, sp, #20
    2ef6:	9305      	str	r3, [sp, #20]
    2ef8:	ab02      	add	r3, sp, #8
    2efa:	889b      	ldrh	r3, [r3, #4]
    2efc:	80b3      	strh	r3, [r6, #4]
    2efe:	ab02      	add	r3, sp, #8
    2f00:	1899      	adds	r1, r3, r2
    2f02:	18c0      	adds	r0, r0, r3
    2f04:	f006 fa2d 	bl	9362 <memcpy>
        characteristic->writeCccdValue(bleDevice, 0x0000);
    2f08:	0038      	movs	r0, r7
    2f0a:	2200      	movs	r2, #0
    2f0c:	0031      	movs	r1, r6
    2f0e:	f7ff fd27 	bl	2960 <_ZN22BLELocalCharacteristic14writeCccdValueE9BLEDevicet>
    2f12:	0030      	movs	r0, r6
    2f14:	f7ff f989 	bl	222a <_ZN9BLEDeviceD1Ev>
    for (uint16_t i = 0; i < GATT.attributeCount(); i++) {
    2f18:	3501      	adds	r5, #1
    2f1a:	b2ad      	uxth	r5, r5
    2f1c:	e7d6      	b.n	2ecc <_ZN8ATTClass16removeConnectionEht+0x1c>
    if (_eventHandlers[BLEDisconnected]) {
    2f1e:	6a26      	ldr	r6, [r4, #32]
    2f20:	2e00      	cmp	r6, #0
    2f22:	d011      	beq.n	2f48 <_ZN8ATTClass16removeConnectionEht+0x98>
    2f24:	2206      	movs	r2, #6
    2f26:	2012      	movs	r0, #18
    2f28:	4b11      	ldr	r3, [pc, #68]	; (2f70 <_ZN8ATTClass16removeConnectionEht+0xc0>)
    2f2a:	ad05      	add	r5, sp, #20
    2f2c:	9305      	str	r3, [sp, #20]
    2f2e:	ab02      	add	r3, sp, #8
    2f30:	889b      	ldrh	r3, [r3, #4]
    2f32:	80ab      	strh	r3, [r5, #4]
    2f34:	ab02      	add	r3, sp, #8
    2f36:	1899      	adds	r1, r3, r2
    2f38:	18c0      	adds	r0, r0, r3
    2f3a:	f006 fa12 	bl	9362 <memcpy>
      _eventHandlers[BLEDisconnected](bleDevice);
    2f3e:	0028      	movs	r0, r5
    2f40:	47b0      	blx	r6
    2f42:	0028      	movs	r0, r5
    2f44:	f7ff f971 	bl	222a <_ZN9BLEDeviceD1Ev>
    _connectionHandle = 0xffff;
    2f48:	2301      	movs	r3, #1
    2f4a:	425b      	negs	r3, r3
    2f4c:	80e3      	strh	r3, [r4, #6]
    memset(_peerAddress, 0x00, sizeof(_peerAddress));
    2f4e:	2206      	movs	r2, #6
    2f50:	2100      	movs	r1, #0
    2f52:	9801      	ldr	r0, [sp, #4]
    2f54:	f006 fa20 	bl	9398 <memset>
    _longWriteHandle = 0x0000;
    2f58:	2300      	movs	r3, #0
    BLEDevice bleDevice(_connectionHandle, _peerAddress);
    2f5a:	a802      	add	r0, sp, #8
    _longWriteHandle = 0x0000;
    2f5c:	8263      	strh	r3, [r4, #18]
    _longWriteValueLength = 0;
    2f5e:	8323      	strh	r3, [r4, #24]
    BLEDevice bleDevice(_connectionHandle, _peerAddress);
    2f60:	f7ff f963 	bl	222a <_ZN9BLEDeviceD1Ev>
}
    2f64:	b009      	add	sp, #36	; 0x24
    2f66:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2f68:	20000314 	.word	0x20000314
    2f6c:	00002803 	.word	0x00002803
    2f70:	0000b6d8 	.word	0x0000b6d8

00002f74 <_ZNK8ATTClass9connectedEv>:
  return (_connectionHandle != 0xffff);
    2f74:	4b03      	ldr	r3, [pc, #12]	; (2f84 <_ZNK8ATTClass9connectedEv+0x10>)
    2f76:	88c0      	ldrh	r0, [r0, #6]
    2f78:	18c0      	adds	r0, r0, r3
    2f7a:	1e43      	subs	r3, r0, #1
    2f7c:	4198      	sbcs	r0, r3
    2f7e:	b2c0      	uxtb	r0, r0
}
    2f80:	4770      	bx	lr
    2f82:	46c0      	nop			; (mov r8, r8)
    2f84:	ffff0001 	.word	0xffff0001

00002f88 <_ZNK8ATTClass9connectedEtPKh>:
{
    2f88:	b510      	push	{r4, lr}
    2f8a:	000c      	movs	r4, r1
    2f8c:	0011      	movs	r1, r2
  return ((_connectionHandle == handle) && memcmp(_peerAddress, address, 6) == 0);
    2f8e:	88c2      	ldrh	r2, [r0, #6]
    2f90:	2300      	movs	r3, #0
    2f92:	42a2      	cmp	r2, r4
    2f94:	d106      	bne.n	2fa4 <_ZNK8ATTClass9connectedEtPKh+0x1c>
    2f96:	3008      	adds	r0, #8
    2f98:	2206      	movs	r2, #6
    2f9a:	f006 f9d3 	bl	9344 <memcmp>
    2f9e:	4243      	negs	r3, r0
    2fa0:	4143      	adcs	r3, r0
    2fa2:	b2db      	uxtb	r3, r3
}
    2fa4:	0018      	movs	r0, r3
    2fa6:	bd10      	pop	{r4, pc}

00002fa8 <_ZN8ATTClass10disconnectEv>:
{
    2fa8:	b510      	push	{r4, lr}
  if (_connectionHandle != 0xffff) {
    2faa:	4b0b      	ldr	r3, [pc, #44]	; (2fd8 <_ZN8ATTClass10disconnectEv+0x30>)
    2fac:	88c1      	ldrh	r1, [r0, #6]
{
    2fae:	0004      	movs	r4, r0
  if (_connectionHandle != 0xffff) {
    2fb0:	4299      	cmp	r1, r3
    2fb2:	d101      	bne.n	2fb8 <_ZN8ATTClass10disconnectEv+0x10>
  return false;
    2fb4:	2000      	movs	r0, #0
}
    2fb6:	bd10      	pop	{r4, pc}
    if (HCI.disconnect(_connectionHandle) != 0) {
    2fb8:	4808      	ldr	r0, [pc, #32]	; (2fdc <_ZN8ATTClass10disconnectEv+0x34>)
    2fba:	f001 fce1 	bl	4980 <_ZN8HCIClass10disconnectEt>
    2fbe:	1e01      	subs	r1, r0, #0
    2fc0:	d1f8      	bne.n	2fb4 <_ZN8ATTClass10disconnectEv+0xc>
    _connectionHandle = 0xffff;
    2fc2:	2301      	movs	r3, #1
    memset(_peerAddress, 0x00, sizeof(_peerAddress));
    2fc4:	0020      	movs	r0, r4
    _connectionHandle = 0xffff;
    2fc6:	425b      	negs	r3, r3
    2fc8:	80e3      	strh	r3, [r4, #6]
    memset(_peerAddress, 0x00, sizeof(_peerAddress));
    2fca:	3008      	adds	r0, #8
    2fcc:	2206      	movs	r2, #6
    2fce:	f006 f9e3 	bl	9398 <memset>
    return true;
    2fd2:	2001      	movs	r0, #1
    2fd4:	e7ef      	b.n	2fb6 <_ZN8ATTClass10disconnectEv+0xe>
    2fd6:	46c0      	nop			; (mov r8, r8)
    2fd8:	0000ffff 	.word	0x0000ffff
    2fdc:	20000480 	.word	0x20000480

00002fe0 <_ZN8ATTClass7centralEv>:
{
    2fe0:	b510      	push	{r4, lr}
    2fe2:	000a      	movs	r2, r1
  if (connected()) {
    2fe4:	4b06      	ldr	r3, [pc, #24]	; (3000 <_ZN8ATTClass7centralEv+0x20>)
  return (_connectionHandle != 0xffff);
    2fe6:	88c9      	ldrh	r1, [r1, #6]
{
    2fe8:	0004      	movs	r4, r0
  if (connected()) {
    2fea:	4299      	cmp	r1, r3
    2fec:	d004      	beq.n	2ff8 <_ZN8ATTClass7centralEv+0x18>
    return BLEDevice(_connectionHandle, _peerAddress);
    2fee:	3208      	adds	r2, #8
    2ff0:	f7ff f9cc 	bl	238c <_ZN9BLEDeviceC1EtPh>
}
    2ff4:	0020      	movs	r0, r4
    2ff6:	bd10      	pop	{r4, pc}
  return BLEDevice();
    2ff8:	f7ff f9b6 	bl	2368 <_ZN9BLEDeviceC1Ev>
    2ffc:	e7fa      	b.n	2ff4 <_ZN8ATTClass7centralEv+0x14>
    2ffe:	46c0      	nop			; (mov r8, r8)
    3000:	0000ffff 	.word	0x0000ffff

00003004 <_ZN8ATTClass12handleNotifyEtPKhi>:
{
    3004:	b5f0      	push	{r4, r5, r6, r7, lr}
    3006:	b087      	sub	sp, #28
    3008:	af02      	add	r7, sp, #8
    300a:	607a      	str	r2, [r7, #4]
    300c:	603b      	str	r3, [r7, #0]
    300e:	81f9      	strh	r1, [r7, #14]
  if (_connectionHandle != 0xffff) {
    3010:	88c6      	ldrh	r6, [r0, #6]
    3012:	4a18      	ldr	r2, [pc, #96]	; (3074 <_ZN8ATTClass12handleNotifyEtPKhi+0x70>)
  return false;
    3014:	2300      	movs	r3, #0
  if (_connectionHandle != 0xffff) {
    3016:	4296      	cmp	r6, r2
    3018:	d028      	beq.n	306c <_ZN8ATTClass12handleNotifyEtPKhi+0x68>
    return true;
    301a:	466b      	mov	r3, sp
    uint8_t notication[_mtu];
    301c:	466a      	mov	r2, sp
    return true;
    301e:	60bb      	str	r3, [r7, #8]
    uint8_t notication[_mtu];
    3020:	89c4      	ldrh	r4, [r0, #14]
    memcpy(&notication[1], &handle, sizeof(handle));
    3022:	2009      	movs	r0, #9
    uint8_t notication[_mtu];
    3024:	1de3      	adds	r3, r4, #7
    3026:	08db      	lsrs	r3, r3, #3
    3028:	00db      	lsls	r3, r3, #3
    302a:	1ad3      	subs	r3, r2, r3
    302c:	469d      	mov	sp, r3
    notication[0] = ATT_OP_HANDLE_NOTIFY;
    302e:	231b      	movs	r3, #27
    uint8_t notication[_mtu];
    3030:	ad02      	add	r5, sp, #8
    notication[0] = ATT_OP_HANDLE_NOTIFY;
    3032:	702b      	strb	r3, [r5, #0]
    memcpy(&notication[1], &handle, sizeof(handle));
    3034:	3b0d      	subs	r3, #13
    3036:	2202      	movs	r2, #2
    3038:	4468      	add	r0, sp
    303a:	18f9      	adds	r1, r7, r3
    303c:	f006 f991 	bl	9362 <memcpy>
    length = min((uint16_t)(_mtu - noticationLength), (uint16_t)length);
    3040:	3c03      	subs	r4, #3
    3042:	883a      	ldrh	r2, [r7, #0]
    3044:	b2a4      	uxth	r4, r4
    3046:	4294      	cmp	r4, r2
    3048:	dd00      	ble.n	304c <_ZN8ATTClass12handleNotifyEtPKhi+0x48>
    304a:	0014      	movs	r4, r2
    memcpy(&notication[noticationLength], value, length);
    304c:	0022      	movs	r2, r4
    304e:	6879      	ldr	r1, [r7, #4]
    3050:	1ce8      	adds	r0, r5, #3
    noticationLength += length;
    3052:	3403      	adds	r4, #3
    memcpy(&notication[noticationLength], value, length);
    3054:	f006 f985 	bl	9362 <memcpy>
    HCI.sendAclPkt(_connectionHandle, ATT_CID, noticationLength, notication);
    3058:	b2e3      	uxtb	r3, r4
    305a:	9500      	str	r5, [sp, #0]
    305c:	2204      	movs	r2, #4
    305e:	0031      	movs	r1, r6
    3060:	4805      	ldr	r0, [pc, #20]	; (3078 <_ZN8ATTClass12handleNotifyEtPKhi+0x74>)
    3062:	f001 f9a1 	bl	43a8 <_ZN8HCIClass10sendAclPktEthhPv>
    3066:	68bb      	ldr	r3, [r7, #8]
    3068:	469d      	mov	sp, r3
    return true;
    306a:	2301      	movs	r3, #1
}
    306c:	0018      	movs	r0, r3
    306e:	46bd      	mov	sp, r7
    3070:	b005      	add	sp, #20
    3072:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3074:	0000ffff 	.word	0x0000ffff
    3078:	20000480 	.word	0x20000480

0000307c <_ZN8ATTClass9handleIndEtPKhi>:
{
    307c:	b5f0      	push	{r4, r5, r6, r7, lr}
    307e:	b089      	sub	sp, #36	; 0x24
    3080:	af02      	add	r7, sp, #8
    3082:	60ba      	str	r2, [r7, #8]
    3084:	607b      	str	r3, [r7, #4]
    3086:	82f9      	strh	r1, [r7, #22]
  if (_connectionHandle != 0xffff) {
    3088:	88c3      	ldrh	r3, [r0, #6]
{
    308a:	0005      	movs	r5, r0
  if (_connectionHandle != 0xffff) {
    308c:	613b      	str	r3, [r7, #16]
    308e:	001a      	movs	r2, r3
    3090:	4b1e      	ldr	r3, [pc, #120]	; (310c <_ZN8ATTClass9handleIndEtPKhi+0x90>)
  return false;
    3092:	2600      	movs	r6, #0
  if (_connectionHandle != 0xffff) {
    3094:	429a      	cmp	r2, r3
    3096:	d035      	beq.n	3104 <_ZN8ATTClass9handleIndEtPKhi+0x88>
    return true;
    3098:	466b      	mov	r3, sp
    uint8_t indication[_mtu];
    309a:	466a      	mov	r2, sp
    return true;
    309c:	60fb      	str	r3, [r7, #12]
    uint8_t indication[_mtu];
    309e:	89c4      	ldrh	r4, [r0, #14]
    memcpy(&indication[1], &handle, sizeof(handle));
    30a0:	2009      	movs	r0, #9
    uint8_t indication[_mtu];
    30a2:	1de3      	adds	r3, r4, #7
    30a4:	08db      	lsrs	r3, r3, #3
    30a6:	00db      	lsls	r3, r3, #3
    30a8:	1ad3      	subs	r3, r2, r3
    30aa:	469d      	mov	sp, r3
    indication[0] = ATT_OP_HANDLE_IND;
    30ac:	231d      	movs	r3, #29
    uint8_t indication[_mtu];
    30ae:	ae02      	add	r6, sp, #8
    indication[0] = ATT_OP_HANDLE_IND;
    30b0:	7033      	strb	r3, [r6, #0]
    memcpy(&indication[1], &handle, sizeof(handle));
    30b2:	3b07      	subs	r3, #7
    30b4:	2202      	movs	r2, #2
    30b6:	4468      	add	r0, sp
    30b8:	18f9      	adds	r1, r7, r3
    30ba:	f006 f952 	bl	9362 <memcpy>
    length = min((uint16_t)(_mtu - indicationLength), (uint16_t)length);
    30be:	3c03      	subs	r4, #3
    30c0:	88ba      	ldrh	r2, [r7, #4]
    30c2:	b2a4      	uxth	r4, r4
    30c4:	4294      	cmp	r4, r2
    30c6:	dd00      	ble.n	30ca <_ZN8ATTClass9handleIndEtPKhi+0x4e>
    30c8:	0014      	movs	r4, r2
    memcpy(&indication[indicationLength], value, length);
    30ca:	0022      	movs	r2, r4
    30cc:	68b9      	ldr	r1, [r7, #8]
    30ce:	1cf0      	adds	r0, r6, #3
    30d0:	f006 f947 	bl	9362 <memcpy>
    _cnf = false;
    30d4:	2300      	movs	r3, #0
    indicationLength += length;
    30d6:	3403      	adds	r4, #3
    _cnf = false;
    30d8:	742b      	strb	r3, [r5, #16]
    HCI.sendAclPkt(_connectionHandle, ATT_CID, indicationLength, indication);
    30da:	b2e3      	uxtb	r3, r4
    30dc:	4c0c      	ldr	r4, [pc, #48]	; (3110 <_ZN8ATTClass9handleIndEtPKhi+0x94>)
    30de:	9600      	str	r6, [sp, #0]
    30e0:	2204      	movs	r2, #4
    30e2:	6939      	ldr	r1, [r7, #16]
    30e4:	0020      	movs	r0, r4
    30e6:	f001 f95f 	bl	43a8 <_ZN8HCIClass10sendAclPktEthhPv>
    while (!_cnf) {
    30ea:	7c2e      	ldrb	r6, [r5, #16]
    30ec:	b2f6      	uxtb	r6, r6
    30ee:	2e00      	cmp	r6, #0
    30f0:	d106      	bne.n	3100 <_ZN8ATTClass9handleIndEtPKhi+0x84>
      HCI.poll();
    30f2:	0020      	movs	r0, r4
    30f4:	f001 fa5e 	bl	45b4 <_ZN8HCIClass4pollEv>
      if (!connected()) {
    30f8:	88eb      	ldrh	r3, [r5, #6]
    30fa:	4a04      	ldr	r2, [pc, #16]	; (310c <_ZN8ATTClass9handleIndEtPKhi+0x90>)
    30fc:	4293      	cmp	r3, r2
    30fe:	d1f4      	bne.n	30ea <_ZN8ATTClass9handleIndEtPKhi+0x6e>
    3100:	68fb      	ldr	r3, [r7, #12]
    3102:	469d      	mov	sp, r3
}
    3104:	0030      	movs	r0, r6
    3106:	46bd      	mov	sp, r7
    3108:	b007      	add	sp, #28
    310a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    310c:	0000ffff 	.word	0x0000ffff
    3110:	20000480 	.word	0x20000480

00003114 <_ZN8ATTClass6mtuReqEthPh>:
{
    3114:	b5f0      	push	{r4, r5, r6, r7, lr}
    3116:	000f      	movs	r7, r1
    3118:	b085      	sub	sp, #20
  if (dlen != 2) {
    311a:	2a02      	cmp	r2, #2
    311c:	d007      	beq.n	312e <_ZN8ATTClass6mtuReqEthPh+0x1a>
    sendError(connectionHandle, ATT_OP_MTU_REQ, 0x0000, ATT_ECODE_INVALID_PDU);
    311e:	2304      	movs	r3, #4
    3120:	2200      	movs	r2, #0
    3122:	2102      	movs	r1, #2
    3124:	0038      	movs	r0, r7
    3126:	f7ff fe65 	bl	2df4 <_ZN8ATTClass9sendErrorEthth.constprop.3>
}
    312a:	b005      	add	sp, #20
    312c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  uint16_t mtu = *(uint16_t*)data;
    312e:	881c      	ldrh	r4, [r3, #0]
  if (mtu > _maxMtu) {
    3130:	8883      	ldrh	r3, [r0, #4]
    3132:	429c      	cmp	r4, r3
    3134:	dd00      	ble.n	3138 <_ZN8ATTClass6mtuReqEthPh+0x24>
    mtu = _maxMtu;
    3136:	001c      	movs	r4, r3
  } mtuResp = { ATT_OP_MTU_RESP, mtu };
    3138:	2503      	movs	r5, #3
    313a:	ae03      	add	r6, sp, #12
  _mtu = mtu;
    313c:	81c4      	strh	r4, [r0, #14]
  } mtuResp = { ATT_OP_MTU_RESP, mtu };
    313e:	002a      	movs	r2, r5
    3140:	2100      	movs	r1, #0
    3142:	0030      	movs	r0, r6
    3144:	f006 f928 	bl	9398 <memset>
    3148:	230d      	movs	r3, #13
    314a:	446b      	add	r3, sp
    314c:	701c      	strb	r4, [r3, #0]
    314e:	0a24      	lsrs	r4, r4, #8
    3150:	705c      	strb	r4, [r3, #1]
    3152:	7035      	strb	r5, [r6, #0]
  HCI.sendAclPkt(connectionHandle, ATT_CID, sizeof(mtuResp), &mtuResp);
    3154:	002b      	movs	r3, r5
    3156:	9600      	str	r6, [sp, #0]
    3158:	2204      	movs	r2, #4
    315a:	0039      	movs	r1, r7
    315c:	4801      	ldr	r0, [pc, #4]	; (3164 <_ZN8ATTClass6mtuReqEthPh+0x50>)
    315e:	f001 f923 	bl	43a8 <_ZN8HCIClass10sendAclPktEthhPv>
    3162:	e7e2      	b.n	312a <_ZN8ATTClass6mtuReqEthPh+0x16>
    3164:	20000480 	.word	0x20000480

00003168 <_ZN8ATTClass11findInfoReqEthPh>:
{
    3168:	b5f0      	push	{r4, r5, r6, r7, lr}
    316a:	b08d      	sub	sp, #52	; 0x34
    316c:	af02      	add	r7, sp, #8
    316e:	61bb      	str	r3, [r7, #24]
  }
    3170:	466b      	mov	r3, sp
{
    3172:	6078      	str	r0, [r7, #4]
    3174:	60b9      	str	r1, [r7, #8]
  }
    3176:	603b      	str	r3, [r7, #0]
  if (dlen != sizeof(FindInfoReq)) {
    3178:	2a04      	cmp	r2, #4
    317a:	d00d      	beq.n	3198 <_ZN8ATTClass11findInfoReqEthPh+0x30>
    sendError(connectionHandle, ATT_OP_FIND_INFO_REQ, findInfoReq->startHandle, ATT_ECODE_INVALID_PDU);
    317c:	69ba      	ldr	r2, [r7, #24]
    317e:	69bb      	ldr	r3, [r7, #24]
    3180:	7852      	ldrb	r2, [r2, #1]
    3182:	781b      	ldrb	r3, [r3, #0]
    3184:	0212      	lsls	r2, r2, #8
    3186:	431a      	orrs	r2, r3
    3188:	2304      	movs	r3, #4
    318a:	68b8      	ldr	r0, [r7, #8]
    318c:	0019      	movs	r1, r3
    318e:	f7ff fe31 	bl	2df4 <_ZN8ATTClass9sendErrorEthth.constprop.3>
}
    3192:	46bd      	mov	sp, r7
    3194:	b00b      	add	sp, #44	; 0x2c
    3196:	bdf0      	pop	{r4, r5, r6, r7, pc}
  uint8_t response[_mtu];
    3198:	466a      	mov	r2, sp
    319a:	687b      	ldr	r3, [r7, #4]
  responseLength = 2;
    319c:	2602      	movs	r6, #2
  uint8_t response[_mtu];
    319e:	89db      	ldrh	r3, [r3, #14]
    31a0:	3307      	adds	r3, #7
    31a2:	08db      	lsrs	r3, r3, #3
    31a4:	00db      	lsls	r3, r3, #3
    31a6:	1ad3      	subs	r3, r2, r3
    31a8:	469d      	mov	sp, r3
    31aa:	ab02      	add	r3, sp, #8
    31ac:	61fb      	str	r3, [r7, #28]
  response[0] = ATT_OP_FIND_INFO_RESP;
    31ae:	2305      	movs	r3, #5
    31b0:	69fa      	ldr	r2, [r7, #28]
    31b2:	7013      	strb	r3, [r2, #0]
  response[1] = 0x00;
    31b4:	2300      	movs	r3, #0
    31b6:	7053      	strb	r3, [r2, #1]
  for (uint16_t i = (findInfoReq->startHandle - 1); i < GATT.attributeCount() && i <= (findInfoReq->endHandle - 1); i++) {
    31b8:	69bb      	ldr	r3, [r7, #24]
    31ba:	781a      	ldrb	r2, [r3, #0]
    31bc:	785b      	ldrb	r3, [r3, #1]
    31be:	021b      	lsls	r3, r3, #8
    31c0:	4313      	orrs	r3, r2
    31c2:	3b01      	subs	r3, #1
    31c4:	b29b      	uxth	r3, r3
    31c6:	617b      	str	r3, [r7, #20]
    31c8:	4c49      	ldr	r4, [pc, #292]	; (32f0 <_ZN8ATTClass11findInfoReqEthPh+0x188>)
    31ca:	0020      	movs	r0, r4
    31cc:	f000 ff66 	bl	409c <_ZNK9GATTClass14attributeCountEv>
    31d0:	697b      	ldr	r3, [r7, #20]
    31d2:	4283      	cmp	r3, r0
    31d4:	d207      	bcs.n	31e6 <_ZN8ATTClass11findInfoReqEthPh+0x7e>
    31d6:	69bb      	ldr	r3, [r7, #24]
    31d8:	789a      	ldrb	r2, [r3, #2]
    31da:	78db      	ldrb	r3, [r3, #3]
    31dc:	021b      	lsls	r3, r3, #8
    31de:	4313      	orrs	r3, r2
    31e0:	697a      	ldr	r2, [r7, #20]
    31e2:	4293      	cmp	r3, r2
    31e4:	dc21      	bgt.n	322a <_ZN8ATTClass11findInfoReqEthPh+0xc2>
  if (responseLength == 2) {
    31e6:	2e02      	cmp	r6, #2
    31e8:	d116      	bne.n	3218 <_ZN8ATTClass11findInfoReqEthPh+0xb0>
    sendError(connectionHandle, ATT_OP_FIND_INFO_REQ, findInfoReq->startHandle, ATT_ECODE_ATTR_NOT_FOUND);
    31ea:	69ba      	ldr	r2, [r7, #24]
    31ec:	69bb      	ldr	r3, [r7, #24]
    31ee:	7852      	ldrb	r2, [r2, #1]
    31f0:	781b      	ldrb	r3, [r3, #0]
    31f2:	0212      	lsls	r2, r2, #8
    31f4:	431a      	orrs	r2, r3
    31f6:	2104      	movs	r1, #4
    31f8:	230a      	movs	r3, #10
    31fa:	68b8      	ldr	r0, [r7, #8]
    31fc:	f7ff fdfa 	bl	2df4 <_ZN8ATTClass9sendErrorEthth.constprop.3>
    3200:	683b      	ldr	r3, [r7, #0]
    3202:	469d      	mov	sp, r3
    3204:	e7c5      	b.n	3192 <_ZN8ATTClass11findInfoReqEthPh+0x2a>
    int uuidLen = isValueHandle ? 2 : attribute->uuidLength();
    3206:	2302      	movs	r3, #2
    3208:	613b      	str	r3, [r7, #16]
    bool isValueHandle = (attribute->type() == BLETypeCharacteristic) && (((BLELocalCharacteristic*)attribute)->valueHandle() == handle);
    320a:	3b01      	subs	r3, #1
    320c:	60fb      	str	r3, [r7, #12]
    320e:	e02c      	b.n	326a <_ZN8ATTClass11findInfoReqEthPh+0x102>
    3210:	2300      	movs	r3, #0
    3212:	60fb      	str	r3, [r7, #12]
    int infoType = (uuidLen == 2) ? 0x01 : 0x02;
    3214:	3301      	adds	r3, #1
    3216:	e028      	b.n	326a <_ZN8ATTClass11findInfoReqEthPh+0x102>
    HCI.sendAclPkt(connectionHandle, ATT_CID, responseLength, response);
    3218:	69fa      	ldr	r2, [r7, #28]
    321a:	b2f3      	uxtb	r3, r6
    321c:	9200      	str	r2, [sp, #0]
    321e:	68b9      	ldr	r1, [r7, #8]
    3220:	2204      	movs	r2, #4
    3222:	4834      	ldr	r0, [pc, #208]	; (32f4 <_ZN8ATTClass11findInfoReqEthPh+0x18c>)
    3224:	f001 f8c0 	bl	43a8 <_ZN8HCIClass10sendAclPktEthhPv>
    3228:	e7ea      	b.n	3200 <_ZN8ATTClass11findInfoReqEthPh+0x98>
    BLEAttribute* attribute = GATT.attribute(i);
    322a:	6979      	ldr	r1, [r7, #20]
    322c:	0020      	movs	r0, r4
    322e:	f000 ff5c 	bl	40ea <_ZNK9GATTClass9attributeEj>
    uint16_t handle = (i + 1);
    3232:	697b      	ldr	r3, [r7, #20]
    BLEAttribute* attribute = GATT.attribute(i);
    3234:	0005      	movs	r5, r0
    uint16_t handle = (i + 1);
    3236:	3301      	adds	r3, #1
    3238:	b29b      	uxth	r3, r3
    323a:	617b      	str	r3, [r7, #20]
    323c:	8abb      	ldrh	r3, [r7, #20]
    323e:	84bb      	strh	r3, [r7, #36]	; 0x24
    bool isValueHandle = (attribute->type() == BLETypeCharacteristic) && (((BLELocalCharacteristic*)attribute)->valueHandle() == handle);
    3240:	6803      	ldr	r3, [r0, #0]
    3242:	689b      	ldr	r3, [r3, #8]
    3244:	4798      	blx	r3
    3246:	4b2c      	ldr	r3, [pc, #176]	; (32f8 <_ZN8ATTClass11findInfoReqEthPh+0x190>)
    3248:	4298      	cmp	r0, r3
    324a:	d105      	bne.n	3258 <_ZN8ATTClass11findInfoReqEthPh+0xf0>
    324c:	0028      	movs	r0, r5
    324e:	f7ff fa75 	bl	273c <_ZNK22BLELocalCharacteristic11valueHandleEv>
    3252:	697b      	ldr	r3, [r7, #20]
    3254:	4283      	cmp	r3, r0
    3256:	d0d6      	beq.n	3206 <_ZN8ATTClass11findInfoReqEthPh+0x9e>
    int uuidLen = isValueHandle ? 2 : attribute->uuidLength();
    3258:	0028      	movs	r0, r5
    325a:	f7fe ff7d 	bl	2158 <_ZNK12BLEAttribute10uuidLengthEv>
    325e:	6138      	str	r0, [r7, #16]
    int infoType = (uuidLen == 2) ? 0x01 : 0x02;
    3260:	2802      	cmp	r0, #2
    3262:	d0d5      	beq.n	3210 <_ZN8ATTClass11findInfoReqEthPh+0xa8>
    3264:	2300      	movs	r3, #0
    3266:	60fb      	str	r3, [r7, #12]
    3268:	3302      	adds	r3, #2
    if (response[1] == 0) {
    326a:	69fa      	ldr	r2, [r7, #28]
    326c:	7852      	ldrb	r2, [r2, #1]
    326e:	2a00      	cmp	r2, #0
    3270:	d101      	bne.n	3276 <_ZN8ATTClass11findInfoReqEthPh+0x10e>
      response[1] = infoType;
    3272:	69fa      	ldr	r2, [r7, #28]
    3274:	7053      	strb	r3, [r2, #1]
    if (response[1] != infoType) {
    3276:	69fa      	ldr	r2, [r7, #28]
    3278:	7852      	ldrb	r2, [r2, #1]
    327a:	4293      	cmp	r3, r2
    327c:	d1b3      	bne.n	31e6 <_ZN8ATTClass11findInfoReqEthPh+0x7e>
    memcpy(&response[responseLength], &handle, sizeof(handle));
    327e:	69fb      	ldr	r3, [r7, #28]
    3280:	2202      	movs	r2, #2
    3282:	1998      	adds	r0, r3, r6
    3284:	2324      	movs	r3, #36	; 0x24
    3286:	18f9      	adds	r1, r7, r3
    3288:	f006 f86b 	bl	9362 <memcpy>
    if (isValueHandle || attribute->type() == BLETypeDescriptor) {
    328c:	68fb      	ldr	r3, [r7, #12]
    responseLength += sizeof(handle);
    328e:	1cb4      	adds	r4, r6, #2
    3290:	b2a4      	uxth	r4, r4
    if (isValueHandle || attribute->type() == BLETypeDescriptor) {
    3292:	2b00      	cmp	r3, #0
    3294:	d107      	bne.n	32a6 <_ZN8ATTClass11findInfoReqEthPh+0x13e>
    3296:	682b      	ldr	r3, [r5, #0]
    3298:	0028      	movs	r0, r5
    329a:	689b      	ldr	r3, [r3, #8]
    329c:	4798      	blx	r3
    329e:	23a4      	movs	r3, #164	; 0xa4
    32a0:	019b      	lsls	r3, r3, #6
    32a2:	4298      	cmp	r0, r3
    32a4:	d115      	bne.n	32d2 <_ZN8ATTClass11findInfoReqEthPh+0x16a>
      memcpy(&response[responseLength], attribute->uuidData(), uuidLen);
    32a6:	69fb      	ldr	r3, [r7, #28]
    32a8:	0028      	movs	r0, r5
    32aa:	191e      	adds	r6, r3, r4
    32ac:	f7fe ff4f 	bl	214e <_ZNK12BLEAttribute8uuidDataEv>
    32b0:	693a      	ldr	r2, [r7, #16]
    32b2:	0001      	movs	r1, r0
    32b4:	0030      	movs	r0, r6
    32b6:	f006 f854 	bl	9362 <memcpy>
      responseLength += uuidLen;
    32ba:	693b      	ldr	r3, [r7, #16]
    32bc:	18e4      	adds	r4, r4, r3
    32be:	b2a6      	uxth	r6, r4
    if ((responseLength + (2 + uuidLen)) > _mtu) {
    32c0:	693b      	ldr	r3, [r7, #16]
    32c2:	687a      	ldr	r2, [r7, #4]
    32c4:	3302      	adds	r3, #2
    32c6:	89d2      	ldrh	r2, [r2, #14]
    32c8:	199b      	adds	r3, r3, r6
    32ca:	4293      	cmp	r3, r2
    32cc:	dc00      	bgt.n	32d0 <_ZN8ATTClass11findInfoReqEthPh+0x168>
    32ce:	e77b      	b.n	31c8 <_ZN8ATTClass11findInfoReqEthPh+0x60>
    32d0:	e789      	b.n	31e6 <_ZN8ATTClass11findInfoReqEthPh+0x7e>
      uint16_t type = attribute->type();
    32d2:	682b      	ldr	r3, [r5, #0]
    32d4:	0028      	movs	r0, r5
    32d6:	689b      	ldr	r3, [r3, #8]
    32d8:	4798      	blx	r3
      memcpy(&response[responseLength], &type, sizeof(type));
    32da:	69fb      	ldr	r3, [r7, #28]
      uint16_t type = attribute->type();
    32dc:	84f8      	strh	r0, [r7, #38]	; 0x26
      memcpy(&response[responseLength], &type, sizeof(type));
    32de:	1918      	adds	r0, r3, r4
    32e0:	2326      	movs	r3, #38	; 0x26
    32e2:	2202      	movs	r2, #2
    32e4:	18f9      	adds	r1, r7, r3
      responseLength += sizeof(type);
    32e6:	3604      	adds	r6, #4
      memcpy(&response[responseLength], &type, sizeof(type));
    32e8:	f006 f83b 	bl	9362 <memcpy>
      responseLength += sizeof(type);
    32ec:	b2b6      	uxth	r6, r6
    32ee:	e7e7      	b.n	32c0 <_ZN8ATTClass11findInfoReqEthPh+0x158>
    32f0:	20000314 	.word	0x20000314
    32f4:	20000480 	.word	0x20000480
    32f8:	00002803 	.word	0x00002803

000032fc <_ZN8ATTClass13findByTypeReqEthPh>:
{
    32fc:	b5f0      	push	{r4, r5, r6, r7, lr}
    32fe:	b08b      	sub	sp, #44	; 0x2c
    3300:	001c      	movs	r4, r3
  }
    3302:	466b      	mov	r3, sp
{
    3304:	af02      	add	r7, sp, #8
    3306:	60f9      	str	r1, [r7, #12]
    3308:	6078      	str	r0, [r7, #4]
  }
    330a:	603b      	str	r3, [r7, #0]
    330c:	7821      	ldrb	r1, [r4, #0]
  if (dlen < sizeof(FindByTypeReq)) {
    330e:	2a05      	cmp	r2, #5
    3310:	d80a      	bhi.n	3328 <_ZN8ATTClass13findByTypeReqEthPh+0x2c>
    sendError(connectionHandle, ATT_OP_FIND_BY_TYPE_RESP, findByTypeReq->startHandle, ATT_ECODE_INVALID_PDU);
    3312:	7862      	ldrb	r2, [r4, #1]
    3314:	2304      	movs	r3, #4
    3316:	0212      	lsls	r2, r2, #8
    3318:	430a      	orrs	r2, r1
    331a:	68f8      	ldr	r0, [r7, #12]
    331c:	2107      	movs	r1, #7
    331e:	f7ff fd69 	bl	2df4 <_ZN8ATTClass9sendErrorEthth.constprop.3>
}
    3322:	46bd      	mov	sp, r7
    3324:	b009      	add	sp, #36	; 0x24
    3326:	bdf0      	pop	{r4, r5, r6, r7, pc}
  uint8_t response[_mtu];
    3328:	4668      	mov	r0, sp
    332a:	687b      	ldr	r3, [r7, #4]
    332c:	89db      	ldrh	r3, [r3, #14]
    332e:	3307      	adds	r3, #7
    3330:	08db      	lsrs	r3, r3, #3
    3332:	00db      	lsls	r3, r3, #3
    3334:	1ac3      	subs	r3, r0, r3
    3336:	469d      	mov	sp, r3
    3338:	ab02      	add	r3, sp, #8
    333a:	613b      	str	r3, [r7, #16]
  response[0] = ATT_OP_FIND_BY_TYPE_RESP;
    333c:	2307      	movs	r3, #7
    333e:	6938      	ldr	r0, [r7, #16]
    3340:	7003      	strb	r3, [r0, #0]
  if (findByTypeReq->type == BLETypeService) {
    3342:	20a0      	movs	r0, #160	; 0xa0
    3344:	7963      	ldrb	r3, [r4, #5]
    3346:	7925      	ldrb	r5, [r4, #4]
    3348:	021b      	lsls	r3, r3, #8
    334a:	0180      	lsls	r0, r0, #6
    334c:	432b      	orrs	r3, r5
    334e:	4283      	cmp	r3, r0
    3350:	d00b      	beq.n	336a <_ZN8ATTClass13findByTypeReqEthPh+0x6e>
    sendError(connectionHandle, ATT_OP_FIND_BY_TYPE_RESP, findByTypeReq->startHandle, ATT_ECODE_ATTR_NOT_FOUND);
    3352:	7862      	ldrb	r2, [r4, #1]
    3354:	7823      	ldrb	r3, [r4, #0]
    3356:	0212      	lsls	r2, r2, #8
    3358:	431a      	orrs	r2, r3
    335a:	2107      	movs	r1, #7
    335c:	230a      	movs	r3, #10
    335e:	68f8      	ldr	r0, [r7, #12]
    3360:	f7ff fd48 	bl	2df4 <_ZN8ATTClass9sendErrorEthth.constprop.3>
    3364:	683b      	ldr	r3, [r7, #0]
    3366:	469d      	mov	sp, r3
    3368:	e7db      	b.n	3322 <_ZN8ATTClass13findByTypeReqEthPh+0x26>
  responseLength = 1;
    336a:	2501      	movs	r5, #1
  uint16_t valueLength = dlen - sizeof(*findByTypeReq);
    336c:	3a06      	subs	r2, #6
    336e:	b293      	uxth	r3, r2
    for (uint16_t i = (findByTypeReq->startHandle - 1); i < GATT.attributeCount() && i <= (findByTypeReq->endHandle - 1); i++) {
    3370:	7862      	ldrb	r2, [r4, #1]
  uint16_t valueLength = dlen - sizeof(*findByTypeReq);
    3372:	60bb      	str	r3, [r7, #8]
    for (uint16_t i = (findByTypeReq->startHandle - 1); i < GATT.attributeCount() && i <= (findByTypeReq->endHandle - 1); i++) {
    3374:	0212      	lsls	r2, r2, #8
    3376:	430a      	orrs	r2, r1
    3378:	3a01      	subs	r2, #1
    337a:	b293      	uxth	r3, r2
    337c:	617b      	str	r3, [r7, #20]
    337e:	4e2d      	ldr	r6, [pc, #180]	; (3434 <_ZN8ATTClass13findByTypeReqEthPh+0x138>)
    3380:	0030      	movs	r0, r6
    3382:	f000 fe8b 	bl	409c <_ZNK9GATTClass14attributeCountEv>
    3386:	697b      	ldr	r3, [r7, #20]
    3388:	4283      	cmp	r3, r0
    338a:	d206      	bcs.n	339a <_ZN8ATTClass13findByTypeReqEthPh+0x9e>
    338c:	78e3      	ldrb	r3, [r4, #3]
    338e:	78a2      	ldrb	r2, [r4, #2]
    3390:	021b      	lsls	r3, r3, #8
    3392:	4313      	orrs	r3, r2
    3394:	697a      	ldr	r2, [r7, #20]
    3396:	4293      	cmp	r3, r2
    3398:	dc0a      	bgt.n	33b0 <_ZN8ATTClass13findByTypeReqEthPh+0xb4>
  if (responseLength == 1) {
    339a:	2d01      	cmp	r5, #1
    339c:	d0d9      	beq.n	3352 <_ZN8ATTClass13findByTypeReqEthPh+0x56>
    HCI.sendAclPkt(connectionHandle, ATT_CID, responseLength, response);
    339e:	693a      	ldr	r2, [r7, #16]
    33a0:	b2eb      	uxtb	r3, r5
    33a2:	9200      	str	r2, [sp, #0]
    33a4:	68f9      	ldr	r1, [r7, #12]
    33a6:	2204      	movs	r2, #4
    33a8:	4823      	ldr	r0, [pc, #140]	; (3438 <_ZN8ATTClass13findByTypeReqEthPh+0x13c>)
    33aa:	f000 fffd 	bl	43a8 <_ZN8HCIClass10sendAclPktEthhPv>
    33ae:	e7d9      	b.n	3364 <_ZN8ATTClass13findByTypeReqEthPh+0x68>
      BLEAttribute* attribute = GATT.attribute(i);
    33b0:	6979      	ldr	r1, [r7, #20]
    33b2:	0030      	movs	r0, r6
    33b4:	f000 fe99 	bl	40ea <_ZNK9GATTClass9attributeEj>
      if ((attribute->type() == findByTypeReq->type) && (attribute->uuidLength() == valueLength) && memcmp(attribute->uuidData(), value, valueLength) == 0) {
    33b8:	6803      	ldr	r3, [r0, #0]
      BLEAttribute* attribute = GATT.attribute(i);
    33ba:	0006      	movs	r6, r0
      if ((attribute->type() == findByTypeReq->type) && (attribute->uuidLength() == valueLength) && memcmp(attribute->uuidData(), value, valueLength) == 0) {
    33bc:	689b      	ldr	r3, [r3, #8]
    33be:	4798      	blx	r3
    33c0:	7963      	ldrb	r3, [r4, #5]
    33c2:	7922      	ldrb	r2, [r4, #4]
    33c4:	021b      	lsls	r3, r3, #8
    33c6:	4313      	orrs	r3, r2
    33c8:	4298      	cmp	r0, r3
    33ca:	d10e      	bne.n	33ea <_ZN8ATTClass13findByTypeReqEthPh+0xee>
    33cc:	0030      	movs	r0, r6
    33ce:	f7fe fec3 	bl	2158 <_ZNK12BLEAttribute10uuidLengthEv>
    33d2:	68bb      	ldr	r3, [r7, #8]
    33d4:	4298      	cmp	r0, r3
    33d6:	d108      	bne.n	33ea <_ZN8ATTClass13findByTypeReqEthPh+0xee>
    33d8:	0030      	movs	r0, r6
    33da:	f7fe feb8 	bl	214e <_ZNK12BLEAttribute8uuidDataEv>
  uint8_t* value = &data[sizeof(*findByTypeReq)];
    33de:	1da1      	adds	r1, r4, #6
      if ((attribute->type() == findByTypeReq->type) && (attribute->uuidLength() == valueLength) && memcmp(attribute->uuidData(), value, valueLength) == 0) {
    33e0:	68ba      	ldr	r2, [r7, #8]
    33e2:	f005 ffaf 	bl	9344 <memcmp>
    33e6:	2800      	cmp	r0, #0
    33e8:	d009      	beq.n	33fe <_ZN8ATTClass13findByTypeReqEthPh+0x102>
      if ((responseLength + 4) > _mtu) {
    33ea:	687a      	ldr	r2, [r7, #4]
    33ec:	1ceb      	adds	r3, r5, #3
    33ee:	89d2      	ldrh	r2, [r2, #14]
    33f0:	4293      	cmp	r3, r2
    33f2:	dad2      	bge.n	339a <_ZN8ATTClass13findByTypeReqEthPh+0x9e>
    for (uint16_t i = (findByTypeReq->startHandle - 1); i < GATT.attributeCount() && i <= (findByTypeReq->endHandle - 1); i++) {
    33f4:	697a      	ldr	r2, [r7, #20]
    33f6:	3201      	adds	r2, #1
    33f8:	b293      	uxth	r3, r2
    33fa:	617b      	str	r3, [r7, #20]
    33fc:	e7bf      	b.n	337e <_ZN8ATTClass13findByTypeReqEthPh+0x82>
        uint16_t startHandle = service->startHandle();
    33fe:	0030      	movs	r0, r6
    3400:	f7ff fc5f 	bl	2cc2 <_ZNK15BLELocalService11startHandleEv>
        memcpy(&response[responseLength], &startHandle, sizeof(startHandle));
    3404:	693b      	ldr	r3, [r7, #16]
        uint16_t startHandle = service->startHandle();
    3406:	83b8      	strh	r0, [r7, #28]
        memcpy(&response[responseLength], &startHandle, sizeof(startHandle));
    3408:	1958      	adds	r0, r3, r5
    340a:	231c      	movs	r3, #28
    340c:	2202      	movs	r2, #2
    340e:	18f9      	adds	r1, r7, r3
    3410:	f005 ffa7 	bl	9362 <memcpy>
        uint16_t endHandle = service->endHandle();
    3414:	0030      	movs	r0, r6
    3416:	f7ff fc56 	bl	2cc6 <_ZNK15BLELocalService9endHandleEv>
        memcpy(&response[responseLength], &endHandle, sizeof(endHandle));
    341a:	693b      	ldr	r3, [r7, #16]
        uint16_t endHandle = service->endHandle();
    341c:	83f8      	strh	r0, [r7, #30]
        responseLength += sizeof(startHandle);
    341e:	1ca8      	adds	r0, r5, #2
        memcpy(&response[responseLength], &endHandle, sizeof(endHandle));
    3420:	b280      	uxth	r0, r0
    3422:	1818      	adds	r0, r3, r0
    3424:	231e      	movs	r3, #30
    3426:	2202      	movs	r2, #2
    3428:	18f9      	adds	r1, r7, r3
        responseLength += sizeof(endHandle);
    342a:	3504      	adds	r5, #4
        memcpy(&response[responseLength], &endHandle, sizeof(endHandle));
    342c:	f005 ff99 	bl	9362 <memcpy>
        responseLength += sizeof(endHandle);
    3430:	b2ad      	uxth	r5, r5
    3432:	e7da      	b.n	33ea <_ZN8ATTClass13findByTypeReqEthPh+0xee>
    3434:	20000314 	.word	0x20000314
    3438:	20000480 	.word	0x20000480

0000343c <_ZN8ATTClass14readByGroupReqEthPh>:
{
    343c:	b5f0      	push	{r4, r5, r6, r7, lr}
    343e:	b08f      	sub	sp, #60	; 0x3c
    3440:	001e      	movs	r6, r3
  }
    3442:	466b      	mov	r3, sp
{
    3444:	af02      	add	r7, sp, #8
    3446:	60b8      	str	r0, [r7, #8]
    3448:	6179      	str	r1, [r7, #20]
  }
    344a:	60fb      	str	r3, [r7, #12]
  if (dlen != sizeof(ReadByGroupReq) || (readByGroupReq->uuid != BLETypeService && readByGroupReq->uuid != 0x2801)) {
    344c:	2a06      	cmp	r2, #6
    344e:	d107      	bne.n	3460 <_ZN8ATTClass14readByGroupReqEthPh+0x24>
    3450:	7973      	ldrb	r3, [r6, #5]
    3452:	7931      	ldrb	r1, [r6, #4]
    3454:	021b      	lsls	r3, r3, #8
    3456:	430b      	orrs	r3, r1
    3458:	4955      	ldr	r1, [pc, #340]	; (35b0 <_ZN8ATTClass14readByGroupReqEthPh+0x174>)
    345a:	185b      	adds	r3, r3, r1
    345c:	2b01      	cmp	r3, #1
    345e:	d90d      	bls.n	347c <_ZN8ATTClass14readByGroupReqEthPh+0x40>
    sendError(connectionHandle, ATT_OP_READ_BY_GROUP_REQ, readByGroupReq->startHandle, ATT_ECODE_UNSUPP_GRP_TYPE);
    3460:	7872      	ldrb	r2, [r6, #1]
    3462:	7833      	ldrb	r3, [r6, #0]
    3464:	0212      	lsls	r2, r2, #8
    3466:	431a      	orrs	r2, r3
    3468:	2310      	movs	r3, #16
    346a:	0019      	movs	r1, r3
    sendError(connectionHandle, ATT_OP_READ_BY_GROUP_REQ, readByGroupReq->startHandle, ATT_ECODE_ATTR_NOT_FOUND);
    346c:	6978      	ldr	r0, [r7, #20]
    346e:	f7ff fcc1 	bl	2df4 <_ZN8ATTClass9sendErrorEthth.constprop.3>
    3472:	68fb      	ldr	r3, [r7, #12]
    3474:	469d      	mov	sp, r3
}
    3476:	46bd      	mov	sp, r7
    3478:	b00d      	add	sp, #52	; 0x34
    347a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  uint8_t response[_mtu];
    347c:	4669      	mov	r1, sp
    347e:	68bb      	ldr	r3, [r7, #8]
    3480:	89db      	ldrh	r3, [r3, #14]
    3482:	3307      	adds	r3, #7
    3484:	08db      	lsrs	r3, r3, #3
    3486:	00db      	lsls	r3, r3, #3
    3488:	1acb      	subs	r3, r1, r3
    348a:	469d      	mov	sp, r3
    348c:	ab02      	add	r3, sp, #8
    348e:	627b      	str	r3, [r7, #36]	; 0x24
  response[0] = ATT_OP_READ_BY_GROUP_RESP;
    3490:	2311      	movs	r3, #17
    3492:	6a79      	ldr	r1, [r7, #36]	; 0x24
    3494:	700b      	strb	r3, [r1, #0]
  response[1] = 0x00;
    3496:	2300      	movs	r3, #0
    3498:	704b      	strb	r3, [r1, #1]
  for (uint16_t i = (readByGroupReq->startHandle - 1); i < GATT.attributeCount() && i <= (readByGroupReq->endHandle - 1); i++) {
    349a:	7873      	ldrb	r3, [r6, #1]
    349c:	7831      	ldrb	r1, [r6, #0]
    349e:	021b      	lsls	r3, r3, #8
    34a0:	430b      	orrs	r3, r1
    34a2:	3b01      	subs	r3, #1
    34a4:	b29b      	uxth	r3, r3
    34a6:	61fb      	str	r3, [r7, #28]
  responseLength = 2;
    34a8:	2302      	movs	r3, #2
    int infoSize = (uuidLen == 2) ? 6 : 20;
    34aa:	607a      	str	r2, [r7, #4]
  responseLength = 2;
    34ac:	623b      	str	r3, [r7, #32]
  for (uint16_t i = (readByGroupReq->startHandle - 1); i < GATT.attributeCount() && i <= (readByGroupReq->endHandle - 1); i++) {
    34ae:	4c41      	ldr	r4, [pc, #260]	; (35b4 <_ZN8ATTClass14readByGroupReqEthPh+0x178>)
    34b0:	0020      	movs	r0, r4
    34b2:	f000 fdf3 	bl	409c <_ZNK9GATTClass14attributeCountEv>
    34b6:	69fb      	ldr	r3, [r7, #28]
    34b8:	4283      	cmp	r3, r0
    34ba:	d206      	bcs.n	34ca <_ZN8ATTClass14readByGroupReqEthPh+0x8e>
    34bc:	78f3      	ldrb	r3, [r6, #3]
    34be:	78b2      	ldrb	r2, [r6, #2]
    34c0:	021b      	lsls	r3, r3, #8
    34c2:	4313      	orrs	r3, r2
    34c4:	69fa      	ldr	r2, [r7, #28]
    34c6:	4293      	cmp	r3, r2
    34c8:	dc14      	bgt.n	34f4 <_ZN8ATTClass14readByGroupReqEthPh+0xb8>
  if (responseLength == 2) {
    34ca:	6a3b      	ldr	r3, [r7, #32]
    34cc:	2b02      	cmp	r3, #2
    34ce:	d106      	bne.n	34de <_ZN8ATTClass14readByGroupReqEthPh+0xa2>
    sendError(connectionHandle, ATT_OP_READ_BY_GROUP_REQ, readByGroupReq->startHandle, ATT_ECODE_ATTR_NOT_FOUND);
    34d0:	7872      	ldrb	r2, [r6, #1]
    34d2:	7833      	ldrb	r3, [r6, #0]
    34d4:	0212      	lsls	r2, r2, #8
    34d6:	431a      	orrs	r2, r3
    34d8:	2110      	movs	r1, #16
    34da:	230a      	movs	r3, #10
    34dc:	e7c6      	b.n	346c <_ZN8ATTClass14readByGroupReqEthPh+0x30>
    HCI.sendAclPkt(connectionHandle, ATT_CID, responseLength, response);
    34de:	2320      	movs	r3, #32
    34e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    34e2:	18fb      	adds	r3, r7, r3
    34e4:	781b      	ldrb	r3, [r3, #0]
    34e6:	9200      	str	r2, [sp, #0]
    34e8:	6979      	ldr	r1, [r7, #20]
    34ea:	2204      	movs	r2, #4
    34ec:	4832      	ldr	r0, [pc, #200]	; (35b8 <_ZN8ATTClass14readByGroupReqEthPh+0x17c>)
    34ee:	f000 ff5b 	bl	43a8 <_ZN8HCIClass10sendAclPktEthhPv>
    34f2:	e7be      	b.n	3472 <_ZN8ATTClass14readByGroupReqEthPh+0x36>
    BLEAttribute* attribute = GATT.attribute(i);
    34f4:	0020      	movs	r0, r4
    34f6:	69f9      	ldr	r1, [r7, #28]
    34f8:	f000 fdf7 	bl	40ea <_ZNK9GATTClass9attributeEj>
    if (readByGroupReq->uuid != attribute->type()) {
    34fc:	7975      	ldrb	r5, [r6, #5]
    34fe:	7933      	ldrb	r3, [r6, #4]
    3500:	022d      	lsls	r5, r5, #8
    3502:	431d      	orrs	r5, r3
    3504:	6803      	ldr	r3, [r0, #0]
    BLEAttribute* attribute = GATT.attribute(i);
    3506:	0004      	movs	r4, r0
    if (readByGroupReq->uuid != attribute->type()) {
    3508:	689b      	ldr	r3, [r3, #8]
    350a:	4798      	blx	r3
    350c:	4285      	cmp	r5, r0
    350e:	d149      	bne.n	35a4 <_ZN8ATTClass14readByGroupReqEthPh+0x168>
    int uuidLen = attribute->uuidLength();
    3510:	0020      	movs	r0, r4
    3512:	f7fe fe21 	bl	2158 <_ZNK12BLEAttribute10uuidLengthEv>
    int infoSize = (uuidLen == 2) ? 6 : 20;
    3516:	687b      	ldr	r3, [r7, #4]
    int uuidLen = attribute->uuidLength();
    3518:	6138      	str	r0, [r7, #16]
    int infoSize = (uuidLen == 2) ? 6 : 20;
    351a:	61bb      	str	r3, [r7, #24]
    351c:	2802      	cmp	r0, #2
    351e:	d001      	beq.n	3524 <_ZN8ATTClass14readByGroupReqEthPh+0xe8>
    3520:	2314      	movs	r3, #20
    3522:	61bb      	str	r3, [r7, #24]
    if (response[1] == 0) {
    3524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3526:	785b      	ldrb	r3, [r3, #1]
    3528:	2b00      	cmp	r3, #0
    352a:	d102      	bne.n	3532 <_ZN8ATTClass14readByGroupReqEthPh+0xf6>
      response[1] = infoSize;
    352c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    352e:	7e3a      	ldrb	r2, [r7, #24]
    3530:	705a      	strb	r2, [r3, #1]
    if (response[1] != infoSize) {
    3532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3534:	69ba      	ldr	r2, [r7, #24]
    3536:	785b      	ldrb	r3, [r3, #1]
    3538:	429a      	cmp	r2, r3
    353a:	d1c6      	bne.n	34ca <_ZN8ATTClass14readByGroupReqEthPh+0x8e>
    uint16_t startHandle = service->startHandle();
    353c:	0020      	movs	r0, r4
    353e:	f7ff fbc0 	bl	2cc2 <_ZNK15BLELocalService11startHandleEv>
    memcpy(&response[responseLength], &startHandle, sizeof(startHandle));
    3542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3544:	6a3a      	ldr	r2, [r7, #32]
    uint16_t startHandle = service->startHandle();
    3546:	85b8      	strh	r0, [r7, #44]	; 0x2c
    memcpy(&response[responseLength], &startHandle, sizeof(startHandle));
    3548:	1898      	adds	r0, r3, r2
    354a:	232c      	movs	r3, #44	; 0x2c
    354c:	2202      	movs	r2, #2
    354e:	18f9      	adds	r1, r7, r3
    3550:	f005 ff07 	bl	9362 <memcpy>
    uint16_t endHandle = service->endHandle();
    3554:	0020      	movs	r0, r4
    3556:	f7ff fbb6 	bl	2cc6 <_ZNK15BLELocalService9endHandleEv>
    responseLength += sizeof(startHandle);
    355a:	6a3b      	ldr	r3, [r7, #32]
    uint16_t endHandle = service->endHandle();
    355c:	85f8      	strh	r0, [r7, #46]	; 0x2e
    responseLength += sizeof(startHandle);
    355e:	1c98      	adds	r0, r3, #2
    memcpy(&response[responseLength], &endHandle, sizeof(endHandle));
    3560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3562:	b280      	uxth	r0, r0
    3564:	1818      	adds	r0, r3, r0
    3566:	232e      	movs	r3, #46	; 0x2e
    3568:	2202      	movs	r2, #2
    356a:	18f9      	adds	r1, r7, r3
    356c:	f005 fef9 	bl	9362 <memcpy>
    responseLength += sizeof(endHandle);
    3570:	6a3b      	ldr	r3, [r7, #32]
    memcpy(&response[responseLength], service->uuidData(), uuidLen);
    3572:	0020      	movs	r0, r4
    responseLength += sizeof(endHandle);
    3574:	1d1d      	adds	r5, r3, #4
    memcpy(&response[responseLength], service->uuidData(), uuidLen);
    3576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    responseLength += sizeof(endHandle);
    3578:	b2ad      	uxth	r5, r5
    memcpy(&response[responseLength], service->uuidData(), uuidLen);
    357a:	195b      	adds	r3, r3, r5
    357c:	623b      	str	r3, [r7, #32]
    357e:	f7fe fde6 	bl	214e <_ZNK12BLEAttribute8uuidDataEv>
    3582:	693a      	ldr	r2, [r7, #16]
    3584:	0001      	movs	r1, r0
    3586:	6a38      	ldr	r0, [r7, #32]
    3588:	f005 feeb 	bl	9362 <memcpy>
    responseLength += uuidLen;
    358c:	693b      	ldr	r3, [r7, #16]
    358e:	18ed      	adds	r5, r5, r3
    3590:	b2ab      	uxth	r3, r5
    3592:	623b      	str	r3, [r7, #32]
    if ((responseLength + infoSize) > _mtu) {
    3594:	6a3a      	ldr	r2, [r7, #32]
    3596:	69bb      	ldr	r3, [r7, #24]
    3598:	4694      	mov	ip, r2
    359a:	68ba      	ldr	r2, [r7, #8]
    359c:	4463      	add	r3, ip
    359e:	89d2      	ldrh	r2, [r2, #14]
    35a0:	4293      	cmp	r3, r2
    35a2:	dc92      	bgt.n	34ca <_ZN8ATTClass14readByGroupReqEthPh+0x8e>
  for (uint16_t i = (readByGroupReq->startHandle - 1); i < GATT.attributeCount() && i <= (readByGroupReq->endHandle - 1); i++) {
    35a4:	69fb      	ldr	r3, [r7, #28]
    35a6:	3301      	adds	r3, #1
    35a8:	b29b      	uxth	r3, r3
    35aa:	61fb      	str	r3, [r7, #28]
    35ac:	e77f      	b.n	34ae <_ZN8ATTClass14readByGroupReqEthPh+0x72>
    35ae:	46c0      	nop			; (mov r8, r8)
    35b0:	ffffd800 	.word	0xffffd800
    35b4:	20000314 	.word	0x20000314
    35b8:	20000480 	.word	0x20000480

000035bc <_ZN8ATTClass17readOrReadBlobReqEthhPh>:
{
    35bc:	b5f0      	push	{r4, r5, r6, r7, lr}
    35be:	b08d      	sub	sp, #52	; 0x34
    35c0:	000e      	movs	r6, r1
  HCI.sendAclPkt(connectionHandle, ATT_CID, responseLength, response);
    35c2:	4669      	mov	r1, sp
{
    35c4:	af02      	add	r7, sp, #8
    35c6:	0014      	movs	r4, r2
    35c8:	60b8      	str	r0, [r7, #8]
    35ca:	6c3a      	ldr	r2, [r7, #64]	; 0x40
  HCI.sendAclPkt(connectionHandle, ATT_CID, responseLength, response);
    35cc:	6079      	str	r1, [r7, #4]
  if (opcode == ATT_OP_READ_REQ) {
    35ce:	2c0a      	cmp	r4, #10
    35d0:	d105      	bne.n	35de <_ZN8ATTClass17readOrReadBlobReqEthhPh+0x22>
    if (dlen != sizeof(uint16_t)) {
    35d2:	2b02      	cmp	r3, #2
    35d4:	d010      	beq.n	35f8 <_ZN8ATTClass17readOrReadBlobReqEthhPh+0x3c>
      sendError(connectionHandle, ATT_OP_READ_REQ, 0x0000, ATT_ECODE_INVALID_PDU);
    35d6:	2304      	movs	r3, #4
    35d8:	2200      	movs	r2, #0
      sendError(connectionHandle, opcode, handle, ATT_ECODE_INVALID_OFFSET);
    35da:	0021      	movs	r1, r4
    35dc:	e004      	b.n	35e8 <_ZN8ATTClass17readOrReadBlobReqEthhPh+0x2c>
    if (dlen != (sizeof(uint16_t) + sizeof(uint16_t))) {
    35de:	2b04      	cmp	r3, #4
    35e0:	d00a      	beq.n	35f8 <_ZN8ATTClass17readOrReadBlobReqEthhPh+0x3c>
      sendError(connectionHandle, ATT_OP_READ_BLOB_REQ, 0x0000, ATT_ECODE_INVALID_PDU);
    35e2:	2304      	movs	r3, #4
    35e4:	2200      	movs	r2, #0
    35e6:	210c      	movs	r1, #12
      sendError(connectionHandle, opcode, handle, ATT_ECODE_INVALID_OFFSET);
    35e8:	0030      	movs	r0, r6
    35ea:	f7ff fc03 	bl	2df4 <_ZN8ATTClass9sendErrorEthth.constprop.3>
    35ee:	687b      	ldr	r3, [r7, #4]
    35f0:	469d      	mov	sp, r3
}
    35f2:	46bd      	mov	sp, r7
    35f4:	b00b      	add	sp, #44	; 0x2c
    35f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  uint16_t handle = *(uint16_t*)data;
    35f8:	8813      	ldrh	r3, [r2, #0]
    35fa:	613b      	str	r3, [r7, #16]
  uint16_t offset = (opcode == ATT_OP_READ_REQ) ? 0 : *(uint16_t*)&data[sizeof(handle)];
    35fc:	2300      	movs	r3, #0
    35fe:	617b      	str	r3, [r7, #20]
    3600:	2c0a      	cmp	r4, #10
    3602:	d001      	beq.n	3608 <_ZN8ATTClass17readOrReadBlobReqEthhPh+0x4c>
    3604:	8853      	ldrh	r3, [r2, #2]
    3606:	617b      	str	r3, [r7, #20]
  if ((uint16_t)(handle - 1) > GATT.attributeCount()) {
    3608:	4d5f      	ldr	r5, [pc, #380]	; (3788 <_ZN8ATTClass17readOrReadBlobReqEthhPh+0x1cc>)
    360a:	0028      	movs	r0, r5
    360c:	f000 fd46 	bl	409c <_ZNK9GATTClass14attributeCountEv>
    3610:	693b      	ldr	r3, [r7, #16]
    3612:	1e59      	subs	r1, r3, #1
    3614:	b28b      	uxth	r3, r1
    3616:	4283      	cmp	r3, r0
    3618:	d902      	bls.n	3620 <_ZN8ATTClass17readOrReadBlobReqEthhPh+0x64>
    sendError(connectionHandle, opcode, handle, ATT_ECODE_ATTR_NOT_FOUND);
    361a:	230a      	movs	r3, #10
      sendError(connectionHandle, opcode, handle, ATT_ECODE_INVALID_OFFSET);
    361c:	693a      	ldr	r2, [r7, #16]
    361e:	e7dc      	b.n	35da <_ZN8ATTClass17readOrReadBlobReqEthhPh+0x1e>
  uint8_t response[_mtu];
    3620:	466a      	mov	r2, sp
    3622:	68bb      	ldr	r3, [r7, #8]
    3624:	89db      	ldrh	r3, [r3, #14]
    3626:	3307      	adds	r3, #7
    3628:	08db      	lsrs	r3, r3, #3
    362a:	00db      	lsls	r3, r3, #3
    362c:	1ad3      	subs	r3, r2, r3
    362e:	469d      	mov	sp, r3
    3630:	ab02      	add	r3, sp, #8
    3632:	60fb      	str	r3, [r7, #12]
  response[0] = (opcode == ATT_OP_READ_REQ) ? ATT_OP_READ_RESP : ATT_OP_READ_BLOB_RESP;
    3634:	230b      	movs	r3, #11
    3636:	2c0a      	cmp	r4, #10
    3638:	d000      	beq.n	363c <_ZN8ATTClass17readOrReadBlobReqEthhPh+0x80>
    363a:	3302      	adds	r3, #2
    363c:	68fa      	ldr	r2, [r7, #12]
  BLEAttribute* attribute = GATT.attribute(handle - 1);
    363e:	0028      	movs	r0, r5
  response[0] = (opcode == ATT_OP_READ_REQ) ? ATT_OP_READ_RESP : ATT_OP_READ_BLOB_RESP;
    3640:	7013      	strb	r3, [r2, #0]
  BLEAttribute* attribute = GATT.attribute(handle - 1);
    3642:	f000 fd52 	bl	40ea <_ZNK9GATTClass9attributeEj>
  enum BLEAttributeType attributeType = attribute->type();
    3646:	6803      	ldr	r3, [r0, #0]
  BLEAttribute* attribute = GATT.attribute(handle - 1);
    3648:	0005      	movs	r5, r0
  enum BLEAttributeType attributeType = attribute->type();
    364a:	689b      	ldr	r3, [r3, #8]
    364c:	4798      	blx	r3
  if (attributeType == BLETypeService) {
    364e:	23a0      	movs	r3, #160	; 0xa0
    3650:	019b      	lsls	r3, r3, #6
    3652:	4298      	cmp	r0, r3
    3654:	d115      	bne.n	3682 <_ZN8ATTClass17readOrReadBlobReqEthhPh+0xc6>
    if (offset) {
    3656:	697b      	ldr	r3, [r7, #20]
    3658:	2b00      	cmp	r3, #0
    365a:	d003      	beq.n	3664 <_ZN8ATTClass17readOrReadBlobReqEthhPh+0xa8>
      sendError(connectionHandle, ATT_ECODE_ATTR_NOT_LONG, handle, ATT_ECODE_INVALID_PDU);
    365c:	2304      	movs	r3, #4
    365e:	693a      	ldr	r2, [r7, #16]
    3660:	210b      	movs	r1, #11
    3662:	e7c1      	b.n	35e8 <_ZN8ATTClass17readOrReadBlobReqEthhPh+0x2c>
    uint8_t uuidLen = service->uuidLength();
    3664:	0028      	movs	r0, r5
    3666:	f7fe fd77 	bl	2158 <_ZNK12BLEAttribute10uuidLengthEv>
    366a:	0004      	movs	r4, r0
    memcpy(&response[responseLength], service->uuidData(), uuidLen);
    366c:	0028      	movs	r0, r5
    366e:	f7fe fd6e 	bl	214e <_ZNK12BLEAttribute8uuidDataEv>
    3672:	0022      	movs	r2, r4
    3674:	0001      	movs	r1, r0
    3676:	68fb      	ldr	r3, [r7, #12]
    3678:	3301      	adds	r3, #1
    memcpy(&response[responseLength], descriptor->value() + offset, valueLength);
    367a:	0018      	movs	r0, r3
    367c:	f005 fe71 	bl	9362 <memcpy>
    3680:	e062      	b.n	3748 <_ZN8ATTClass17readOrReadBlobReqEthhPh+0x18c>
  } else if (attributeType == BLETypeCharacteristic) {
    3682:	4b42      	ldr	r3, [pc, #264]	; (378c <_ZN8ATTClass17readOrReadBlobReqEthhPh+0x1d0>)
    3684:	4298      	cmp	r0, r3
    3686:	d161      	bne.n	374c <_ZN8ATTClass17readOrReadBlobReqEthhPh+0x190>
    if (characteristic->handle() == handle) {
    3688:	0028      	movs	r0, r5
    368a:	f7ff f855 	bl	2738 <_ZNK22BLELocalCharacteristic6handleEv>
    368e:	693b      	ldr	r3, [r7, #16]
    3690:	4283      	cmp	r3, r0
    3692:	d12d      	bne.n	36f0 <_ZN8ATTClass17readOrReadBlobReqEthhPh+0x134>
      if (offset) {
    3694:	697b      	ldr	r3, [r7, #20]
    3696:	2b00      	cmp	r3, #0
    3698:	d001      	beq.n	369e <_ZN8ATTClass17readOrReadBlobReqEthhPh+0xe2>
        sendError(connectionHandle, opcode, handle, ATT_ECODE_ATTR_NOT_LONG);
    369a:	230b      	movs	r3, #11
    369c:	e7be      	b.n	361c <_ZN8ATTClass17readOrReadBlobReqEthhPh+0x60>
      response[responseLength++] = characteristic->properties();
    369e:	0028      	movs	r0, r5
    36a0:	f7fe ffd8 	bl	2654 <_ZNK22BLELocalCharacteristic10propertiesEv>
    36a4:	68fb      	ldr	r3, [r7, #12]
    36a6:	7058      	strb	r0, [r3, #1]
      uint16_t valueHandle = characteristic->valueHandle();
    36a8:	0028      	movs	r0, r5
    36aa:	f7ff f847 	bl	273c <_ZNK22BLELocalCharacteristic11valueHandleEv>
      memcpy(&response[responseLength], &valueHandle, sizeof(valueHandle));
    36ae:	68fb      	ldr	r3, [r7, #12]
      uint16_t valueHandle = characteristic->valueHandle();
    36b0:	83b8      	strh	r0, [r7, #28]
      memcpy(&response[responseLength], &valueHandle, sizeof(valueHandle));
    36b2:	1c98      	adds	r0, r3, #2
    36b4:	231c      	movs	r3, #28
    36b6:	2202      	movs	r2, #2
    36b8:	18f9      	adds	r1, r7, r3
    36ba:	f005 fe52 	bl	9362 <memcpy>
      uint8_t uuidLen = characteristic->uuidLength();
    36be:	0028      	movs	r0, r5
    36c0:	f7fe fd4a 	bl	2158 <_ZNK12BLEAttribute10uuidLengthEv>
    36c4:	0004      	movs	r4, r0
      memcpy(&response[responseLength], characteristic->uuidData(), uuidLen);
    36c6:	0028      	movs	r0, r5
    36c8:	f7fe fd41 	bl	214e <_ZNK12BLEAttribute8uuidDataEv>
    36cc:	68fb      	ldr	r3, [r7, #12]
    36ce:	0001      	movs	r1, r0
    36d0:	3304      	adds	r3, #4
    36d2:	0022      	movs	r2, r4
    36d4:	0018      	movs	r0, r3
    36d6:	f005 fe44 	bl	9362 <memcpy>
      responseLength += uuidLen;
    36da:	3404      	adds	r4, #4
    responseLength += valueLength;
    36dc:	b2a3      	uxth	r3, r4
  HCI.sendAclPkt(connectionHandle, ATT_CID, responseLength, response);
    36de:	68fa      	ldr	r2, [r7, #12]
    36e0:	b2db      	uxtb	r3, r3
    36e2:	9200      	str	r2, [sp, #0]
    36e4:	0031      	movs	r1, r6
    36e6:	2204      	movs	r2, #4
    36e8:	4829      	ldr	r0, [pc, #164]	; (3790 <_ZN8ATTClass17readOrReadBlobReqEthhPh+0x1d4>)
    36ea:	f000 fe5d 	bl	43a8 <_ZN8HCIClass10sendAclPktEthhPv>
    36ee:	e77e      	b.n	35ee <_ZN8ATTClass17readOrReadBlobReqEthhPh+0x32>
      if ((characteristic->properties() & BLERead) == 0) {
    36f0:	0028      	movs	r0, r5
    36f2:	f7fe ffaf 	bl	2654 <_ZNK22BLELocalCharacteristic10propertiesEv>
    36f6:	2302      	movs	r3, #2
    36f8:	4218      	tst	r0, r3
    36fa:	d08f      	beq.n	361c <_ZN8ATTClass17readOrReadBlobReqEthhPh+0x60>
      uint16_t valueLength = characteristic->valueLength();
    36fc:	0028      	movs	r0, r5
    36fe:	f7fe ffb0 	bl	2662 <_ZNK22BLELocalCharacteristic11valueLengthEv>
      if (offset >= valueLength) {
    3702:	697b      	ldr	r3, [r7, #20]
    3704:	b280      	uxth	r0, r0
    3706:	4298      	cmp	r0, r3
    3708:	dc01      	bgt.n	370e <_ZN8ATTClass17readOrReadBlobReqEthhPh+0x152>
      sendError(connectionHandle, opcode, handle, ATT_ECODE_INVALID_OFFSET);
    370a:	2307      	movs	r3, #7
    370c:	e786      	b.n	361c <_ZN8ATTClass17readOrReadBlobReqEthhPh+0x60>
      valueLength = min(_mtu - responseLength, valueLength - offset);
    370e:	68bb      	ldr	r3, [r7, #8]
    3710:	89dc      	ldrh	r4, [r3, #14]
    3712:	697b      	ldr	r3, [r7, #20]
    3714:	3c01      	subs	r4, #1
    3716:	1ac0      	subs	r0, r0, r3
    3718:	4284      	cmp	r4, r0
    371a:	dd00      	ble.n	371e <_ZN8ATTClass17readOrReadBlobReqEthhPh+0x162>
    371c:	0004      	movs	r4, r0
      characteristic->readValue(BLEDevice(connectionHandle, _peerAddress), offset, &response[responseLength], valueLength);
    371e:	231c      	movs	r3, #28
    3720:	68ba      	ldr	r2, [r7, #8]
    3722:	0031      	movs	r1, r6
    3724:	3208      	adds	r2, #8
    3726:	18f8      	adds	r0, r7, r3
    3728:	f7fe fe30 	bl	238c <_ZN9BLEDeviceC1EtPh>
    372c:	211c      	movs	r1, #28
    372e:	68fb      	ldr	r3, [r7, #12]
    3730:	b2a2      	uxth	r2, r4
    3732:	9200      	str	r2, [sp, #0]
    3734:	3301      	adds	r3, #1
    3736:	0028      	movs	r0, r5
    3738:	697a      	ldr	r2, [r7, #20]
    373a:	1879      	adds	r1, r7, r1
    373c:	f7ff f8b8 	bl	28b0 <_ZN22BLELocalCharacteristic9readValueE9BLEDevicetPhi>
    3740:	231c      	movs	r3, #28
    3742:	18f8      	adds	r0, r7, r3
    3744:	f7fe fd71 	bl	222a <_ZN9BLEDeviceD1Ev>
    responseLength += valueLength;
    3748:	3401      	adds	r4, #1
    374a:	e7c7      	b.n	36dc <_ZN8ATTClass17readOrReadBlobReqEthhPh+0x120>
  } else if (attributeType == BLETypeDescriptor) {
    374c:	22a4      	movs	r2, #164	; 0xa4
  responseLength = 1;
    374e:	2301      	movs	r3, #1
  } else if (attributeType == BLETypeDescriptor) {
    3750:	0192      	lsls	r2, r2, #6
    3752:	4290      	cmp	r0, r2
    3754:	d1c3      	bne.n	36de <_ZN8ATTClass17readOrReadBlobReqEthhPh+0x122>
    uint16_t valueLength = descriptor->valueSize();
    3756:	0028      	movs	r0, r5
    3758:	f7ff f960 	bl	2a1c <_ZNK18BLELocalDescriptor9valueSizeEv>
    if (offset >= valueLength) {
    375c:	697b      	ldr	r3, [r7, #20]
    375e:	b280      	uxth	r0, r0
    3760:	4298      	cmp	r0, r3
    3762:	ddd2      	ble.n	370a <_ZN8ATTClass17readOrReadBlobReqEthhPh+0x14e>
    valueLength = min(_mtu - responseLength, valueLength - offset);
    3764:	68bb      	ldr	r3, [r7, #8]
    3766:	89dc      	ldrh	r4, [r3, #14]
    3768:	697b      	ldr	r3, [r7, #20]
    376a:	3c01      	subs	r4, #1
    376c:	1ac0      	subs	r0, r0, r3
    376e:	4284      	cmp	r4, r0
    3770:	dd00      	ble.n	3774 <_ZN8ATTClass17readOrReadBlobReqEthhPh+0x1b8>
    3772:	0004      	movs	r4, r0
    memcpy(&response[responseLength], descriptor->value() + offset, valueLength);
    3774:	0028      	movs	r0, r5
    3776:	f7ff f953 	bl	2a20 <_ZNK18BLELocalDescriptor5valueEv>
    377a:	68fb      	ldr	r3, [r7, #12]
    377c:	6979      	ldr	r1, [r7, #20]
    377e:	3301      	adds	r3, #1
    3780:	b2a2      	uxth	r2, r4
    3782:	1841      	adds	r1, r0, r1
    3784:	e779      	b.n	367a <_ZN8ATTClass17readOrReadBlobReqEthhPh+0xbe>
    3786:	46c0      	nop			; (mov r8, r8)
    3788:	20000314 	.word	0x20000314
    378c:	00002803 	.word	0x00002803
    3790:	20000480 	.word	0x20000480

00003794 <_ZN8ATTClass13readByTypeReqEthPh>:
{
    3794:	b5f0      	push	{r4, r5, r6, r7, lr}
    3796:	b08d      	sub	sp, #52	; 0x34
    3798:	af02      	add	r7, sp, #8
    379a:	61bb      	str	r3, [r7, #24]
  }
    379c:	466b      	mov	r3, sp
{
    379e:	6178      	str	r0, [r7, #20]
    37a0:	60b9      	str	r1, [r7, #8]
  }
    37a2:	603b      	str	r3, [r7, #0]
  if (dlen != sizeof(ReadByTypeReq)) {
    37a4:	2a06      	cmp	r2, #6
    37a6:	d00d      	beq.n	37c4 <_ZN8ATTClass13readByTypeReqEthPh+0x30>
    sendError(connectionHandle, ATT_OP_READ_BY_TYPE_REQ, readByTypeReq->startHandle, ATT_ECODE_INVALID_PDU);
    37a8:	69ba      	ldr	r2, [r7, #24]
    37aa:	69bb      	ldr	r3, [r7, #24]
    37ac:	7852      	ldrb	r2, [r2, #1]
    37ae:	781b      	ldrb	r3, [r3, #0]
    37b0:	0212      	lsls	r2, r2, #8
    37b2:	431a      	orrs	r2, r3
    37b4:	2108      	movs	r1, #8
    37b6:	2304      	movs	r3, #4
    37b8:	68b8      	ldr	r0, [r7, #8]
    37ba:	f7ff fb1b 	bl	2df4 <_ZN8ATTClass9sendErrorEthth.constprop.3>
}
    37be:	46bd      	mov	sp, r7
    37c0:	b00b      	add	sp, #44	; 0x2c
    37c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
  uint8_t response[_mtu];
    37c4:	466a      	mov	r2, sp
    37c6:	697b      	ldr	r3, [r7, #20]
  responseLength = 2;
    37c8:	2402      	movs	r4, #2
  uint8_t response[_mtu];
    37ca:	89db      	ldrh	r3, [r3, #14]
    37cc:	3307      	adds	r3, #7
    37ce:	08db      	lsrs	r3, r3, #3
    37d0:	00db      	lsls	r3, r3, #3
    37d2:	1ad3      	subs	r3, r2, r3
    37d4:	469d      	mov	sp, r3
    37d6:	ab02      	add	r3, sp, #8
    37d8:	61fb      	str	r3, [r7, #28]
  response[0] = ATT_OP_READ_BY_TYPE_RESP;
    37da:	2309      	movs	r3, #9
    37dc:	69fa      	ldr	r2, [r7, #28]
    37de:	7013      	strb	r3, [r2, #0]
  response[1] = 0x00;
    37e0:	2300      	movs	r3, #0
    37e2:	7053      	strb	r3, [r2, #1]
  for (uint16_t i = (readByTypeReq->startHandle - 1); i < GATT.attributeCount() && i <= (readByTypeReq->endHandle - 1); i++) {
    37e4:	69ba      	ldr	r2, [r7, #24]
    37e6:	69bb      	ldr	r3, [r7, #24]
    37e8:	7855      	ldrb	r5, [r2, #1]
    37ea:	781b      	ldrb	r3, [r3, #0]
    37ec:	022d      	lsls	r5, r5, #8
    37ee:	431d      	orrs	r5, r3
    37f0:	3d01      	subs	r5, #1
    37f2:	b2ad      	uxth	r5, r5
    37f4:	4e82      	ldr	r6, [pc, #520]	; (3a00 <_ZN8ATTClass13readByTypeReqEthPh+0x26c>)
    37f6:	0030      	movs	r0, r6
    37f8:	f000 fc50 	bl	409c <_ZNK9GATTClass14attributeCountEv>
    37fc:	4285      	cmp	r5, r0
    37fe:	d207      	bcs.n	3810 <_ZN8ATTClass13readByTypeReqEthPh+0x7c>
    3800:	69bb      	ldr	r3, [r7, #24]
    3802:	789a      	ldrb	r2, [r3, #2]
    3804:	78db      	ldrb	r3, [r3, #3]
    3806:	021b      	lsls	r3, r3, #8
    3808:	4313      	orrs	r3, r2
    380a:	42ab      	cmp	r3, r5
    380c:	dd00      	ble.n	3810 <_ZN8ATTClass13readByTypeReqEthPh+0x7c>
    380e:	e08c      	b.n	392a <_ZN8ATTClass13readByTypeReqEthPh+0x196>
  if (responseLength == 2) {
    3810:	2c02      	cmp	r4, #2
    3812:	d000      	beq.n	3816 <_ZN8ATTClass13readByTypeReqEthPh+0x82>
    3814:	e080      	b.n	3918 <_ZN8ATTClass13readByTypeReqEthPh+0x184>
    sendError(connectionHandle, ATT_OP_READ_BY_TYPE_REQ, readByTypeReq->startHandle, ATT_ECODE_ATTR_NOT_FOUND);
    3816:	69ba      	ldr	r2, [r7, #24]
    3818:	69bb      	ldr	r3, [r7, #24]
    381a:	7852      	ldrb	r2, [r2, #1]
    381c:	781b      	ldrb	r3, [r3, #0]
    381e:	0212      	lsls	r2, r2, #8
    3820:	431a      	orrs	r2, r3
    3822:	2108      	movs	r1, #8
    3824:	230a      	movs	r3, #10
    3826:	68b8      	ldr	r0, [r7, #8]
    3828:	f7ff fae4 	bl	2df4 <_ZN8ATTClass9sendErrorEthth.constprop.3>
    382c:	683b      	ldr	r3, [r7, #0]
    382e:	469d      	mov	sp, r3
    3830:	e7c5      	b.n	37be <_ZN8ATTClass13readByTypeReqEthPh+0x2a>
      } else if (attribute->type() == 0x2902) {
    3832:	6833      	ldr	r3, [r6, #0]
    3834:	0030      	movs	r0, r6
    3836:	689b      	ldr	r3, [r3, #8]
    3838:	4798      	blx	r3
    383a:	4b72      	ldr	r3, [pc, #456]	; (3a04 <_ZN8ATTClass13readByTypeReqEthPh+0x270>)
    383c:	4298      	cmp	r0, r3
    383e:	d000      	beq.n	3842 <_ZN8ATTClass13readByTypeReqEthPh+0xae>
    3840:	e0db      	b.n	39fa <_ZN8ATTClass13readByTypeReqEthPh+0x266>
        memcpy(&response[responseLength], &handle, sizeof(handle));
    3842:	69fb      	ldr	r3, [r7, #28]
    3844:	2202      	movs	r2, #2
    3846:	1918      	adds	r0, r3, r4
    3848:	2324      	movs	r3, #36	; 0x24
    384a:	18f9      	adds	r1, r7, r3
    384c:	f005 fd89 	bl	9362 <memcpy>
        int valueSize = min((uint16_t)(_mtu - responseLength), (uint16_t)descriptor->valueSize());
    3850:	697b      	ldr	r3, [r7, #20]
    3852:	0030      	movs	r0, r6
    3854:	89dd      	ldrh	r5, [r3, #14]
    3856:	f7ff f8e1 	bl	2a1c <_ZNK18BLELocalDescriptor9valueSizeEv>
        responseLength += sizeof(handle);
    385a:	3402      	adds	r4, #2
    385c:	b2a4      	uxth	r4, r4
        int valueSize = min((uint16_t)(_mtu - responseLength), (uint16_t)descriptor->valueSize());
    385e:	1b2d      	subs	r5, r5, r4
    3860:	b2ad      	uxth	r5, r5
    3862:	b280      	uxth	r0, r0
    3864:	42a8      	cmp	r0, r5
    3866:	dd14      	ble.n	3892 <_ZN8ATTClass13readByTypeReqEthPh+0xfe>
    3868:	697b      	ldr	r3, [r7, #20]
    386a:	89dd      	ldrh	r5, [r3, #14]
    386c:	1b2d      	subs	r5, r5, r4
    386e:	b2ad      	uxth	r5, r5
        memcpy(&response[responseLength], descriptor->value(), valueSize);
    3870:	69fb      	ldr	r3, [r7, #28]
    3872:	0030      	movs	r0, r6
    3874:	191b      	adds	r3, r3, r4
    3876:	617b      	str	r3, [r7, #20]
    3878:	f7ff f8d2 	bl	2a20 <_ZNK18BLELocalDescriptor5valueEv>
      memcpy(&response[responseLength], characteristic->value(), valueLength);
    387c:	0001      	movs	r1, r0
    387e:	002a      	movs	r2, r5
    3880:	6978      	ldr	r0, [r7, #20]
    3882:	f005 fd6e 	bl	9362 <memcpy>
      response[1] = 2 + valueLength;
    3886:	69fb      	ldr	r3, [r7, #28]
      responseLength += valueLength;
    3888:	1964      	adds	r4, r4, r5
      response[1] = 2 + valueLength;
    388a:	3502      	adds	r5, #2
      responseLength += valueLength;
    388c:	b2a4      	uxth	r4, r4
      response[1] = 2 + valueLength;
    388e:	705d      	strb	r5, [r3, #1]
      break; // all done
    3890:	e7be      	b.n	3810 <_ZN8ATTClass13readByTypeReqEthPh+0x7c>
        int valueSize = min((uint16_t)(_mtu - responseLength), (uint16_t)descriptor->valueSize());
    3892:	0030      	movs	r0, r6
    3894:	f7ff f8c2 	bl	2a1c <_ZNK18BLELocalDescriptor9valueSizeEv>
    3898:	b285      	uxth	r5, r0
    389a:	e7e9      	b.n	3870 <_ZN8ATTClass13readByTypeReqEthPh+0xdc>
    } else if (attribute->type() == BLETypeCharacteristic && attribute->uuidLength() == 2 && memcmp(&readByTypeReq->uuid, attribute->uuidData(), 2) == 0) {
    389c:	6893      	ldr	r3, [r2, #8]
    389e:	0030      	movs	r0, r6
    38a0:	4798      	blx	r3
    38a2:	4b59      	ldr	r3, [pc, #356]	; (3a08 <_ZN8ATTClass13readByTypeReqEthPh+0x274>)
    38a4:	4298      	cmp	r0, r3
    38a6:	d000      	beq.n	38aa <_ZN8ATTClass13readByTypeReqEthPh+0x116>
    38a8:	e0a7      	b.n	39fa <_ZN8ATTClass13readByTypeReqEthPh+0x266>
    38aa:	0030      	movs	r0, r6
    38ac:	f7fe fc54 	bl	2158 <_ZNK12BLEAttribute10uuidLengthEv>
    38b0:	6138      	str	r0, [r7, #16]
    38b2:	2802      	cmp	r0, #2
    38b4:	d000      	beq.n	38b8 <_ZN8ATTClass13readByTypeReqEthPh+0x124>
    38b6:	e0a0      	b.n	39fa <_ZN8ATTClass13readByTypeReqEthPh+0x266>
    38b8:	0030      	movs	r0, r6
    38ba:	f7fe fc48 	bl	214e <_ZNK12BLEAttribute8uuidDataEv>
    38be:	69bb      	ldr	r3, [r7, #24]
    38c0:	0001      	movs	r1, r0
    38c2:	3304      	adds	r3, #4
    38c4:	693a      	ldr	r2, [r7, #16]
    38c6:	0018      	movs	r0, r3
    38c8:	f005 fd3c 	bl	9344 <memcmp>
    38cc:	2800      	cmp	r0, #0
    38ce:	d000      	beq.n	38d2 <_ZN8ATTClass13readByTypeReqEthPh+0x13e>
    38d0:	e093      	b.n	39fa <_ZN8ATTClass13readByTypeReqEthPh+0x266>
      memcpy(&response[responseLength], &handle, sizeof(handle));
    38d2:	69fb      	ldr	r3, [r7, #28]
    38d4:	693a      	ldr	r2, [r7, #16]
    38d6:	1918      	adds	r0, r3, r4
    38d8:	2324      	movs	r3, #36	; 0x24
    38da:	18f9      	adds	r1, r7, r3
    38dc:	f005 fd41 	bl	9362 <memcpy>
      int valueLength = min((uint16_t)(_mtu - responseLength), (uint16_t)characteristic->valueLength());
    38e0:	697b      	ldr	r3, [r7, #20]
    38e2:	0030      	movs	r0, r6
    38e4:	89dd      	ldrh	r5, [r3, #14]
    38e6:	f7fe febc 	bl	2662 <_ZNK22BLELocalCharacteristic11valueLengthEv>
      responseLength += sizeof(handle);
    38ea:	3402      	adds	r4, #2
    38ec:	b2a4      	uxth	r4, r4
      int valueLength = min((uint16_t)(_mtu - responseLength), (uint16_t)characteristic->valueLength());
    38ee:	1b2d      	subs	r5, r5, r4
    38f0:	b2ad      	uxth	r5, r5
    38f2:	b280      	uxth	r0, r0
    38f4:	42a8      	cmp	r0, r5
    38f6:	dc04      	bgt.n	3902 <_ZN8ATTClass13readByTypeReqEthPh+0x16e>
    38f8:	0030      	movs	r0, r6
    38fa:	f7fe feb2 	bl	2662 <_ZNK22BLELocalCharacteristic11valueLengthEv>
    38fe:	b285      	uxth	r5, r0
    3900:	e003      	b.n	390a <_ZN8ATTClass13readByTypeReqEthPh+0x176>
    3902:	697b      	ldr	r3, [r7, #20]
    3904:	89dd      	ldrh	r5, [r3, #14]
    3906:	1b2d      	subs	r5, r5, r4
    3908:	b2ad      	uxth	r5, r5
      memcpy(&response[responseLength], characteristic->value(), valueLength);
    390a:	69fb      	ldr	r3, [r7, #28]
    390c:	0030      	movs	r0, r6
    390e:	191b      	adds	r3, r3, r4
    3910:	617b      	str	r3, [r7, #20]
    3912:	f7fe fea4 	bl	265e <_ZNK22BLELocalCharacteristic5valueEv>
    3916:	e7b1      	b.n	387c <_ZN8ATTClass13readByTypeReqEthPh+0xe8>
    HCI.sendAclPkt(connectionHandle, ATT_CID, responseLength, response);
    3918:	69fa      	ldr	r2, [r7, #28]
    391a:	b2e3      	uxtb	r3, r4
    391c:	9200      	str	r2, [sp, #0]
    391e:	68b9      	ldr	r1, [r7, #8]
    3920:	2204      	movs	r2, #4
    3922:	483a      	ldr	r0, [pc, #232]	; (3a0c <_ZN8ATTClass13readByTypeReqEthPh+0x278>)
    3924:	f000 fd40 	bl	43a8 <_ZN8HCIClass10sendAclPktEthhPv>
    3928:	e780      	b.n	382c <_ZN8ATTClass13readByTypeReqEthPh+0x98>
    BLEAttribute* attribute = GATT.attribute(i);
    392a:	0029      	movs	r1, r5
    392c:	0030      	movs	r0, r6
    392e:	f000 fbdc 	bl	40ea <_ZNK9GATTClass9attributeEj>
    uint16_t handle = (i + 1);
    3932:	1c6b      	adds	r3, r5, #1
    3934:	b29b      	uxth	r3, r3
    3936:	60fb      	str	r3, [r7, #12]
    3938:	89bb      	ldrh	r3, [r7, #12]
    BLEAttribute* attribute = GATT.attribute(i);
    393a:	0006      	movs	r6, r0
    uint16_t handle = (i + 1);
    393c:	84bb      	strh	r3, [r7, #36]	; 0x24
    if (attribute->type() == readByTypeReq->uuid) {
    393e:	6803      	ldr	r3, [r0, #0]
    3940:	689b      	ldr	r3, [r3, #8]
    3942:	4798      	blx	r3
    3944:	69bb      	ldr	r3, [r7, #24]
    3946:	791a      	ldrb	r2, [r3, #4]
    3948:	795b      	ldrb	r3, [r3, #5]
    394a:	021b      	lsls	r3, r3, #8
    394c:	4313      	orrs	r3, r2
    394e:	6832      	ldr	r2, [r6, #0]
    3950:	4298      	cmp	r0, r3
    3952:	d1a3      	bne.n	389c <_ZN8ATTClass13readByTypeReqEthPh+0x108>
      if (attribute->type() == BLETypeCharacteristic) {
    3954:	6893      	ldr	r3, [r2, #8]
    3956:	0030      	movs	r0, r6
    3958:	4798      	blx	r3
    395a:	4b2b      	ldr	r3, [pc, #172]	; (3a08 <_ZN8ATTClass13readByTypeReqEthPh+0x274>)
    395c:	4298      	cmp	r0, r3
    395e:	d000      	beq.n	3962 <_ZN8ATTClass13readByTypeReqEthPh+0x1ce>
    3960:	e767      	b.n	3832 <_ZN8ATTClass13readByTypeReqEthPh+0x9e>
        if (characteristic->valueHandle() == handle) {
    3962:	0030      	movs	r0, r6
    3964:	f7fe feea 	bl	273c <_ZNK22BLELocalCharacteristic11valueHandleEv>
    3968:	68fb      	ldr	r3, [r7, #12]
    396a:	4283      	cmp	r3, r0
    396c:	d045      	beq.n	39fa <_ZN8ATTClass13readByTypeReqEthPh+0x266>
        int uuidLen = attribute->uuidLength();
    396e:	0030      	movs	r0, r6
    3970:	f7fe fbf2 	bl	2158 <_ZNK12BLEAttribute10uuidLengthEv>
        int typeSize = (uuidLen == 2) ? 7 : 21;
    3974:	2307      	movs	r3, #7
        int uuidLen = attribute->uuidLength();
    3976:	6078      	str	r0, [r7, #4]
        int typeSize = (uuidLen == 2) ? 7 : 21;
    3978:	613b      	str	r3, [r7, #16]
    397a:	2802      	cmp	r0, #2
    397c:	d001      	beq.n	3982 <_ZN8ATTClass13readByTypeReqEthPh+0x1ee>
    397e:	2315      	movs	r3, #21
    3980:	613b      	str	r3, [r7, #16]
        if (response[1] == 0) {
    3982:	69fb      	ldr	r3, [r7, #28]
    3984:	785b      	ldrb	r3, [r3, #1]
    3986:	2b00      	cmp	r3, #0
    3988:	d102      	bne.n	3990 <_ZN8ATTClass13readByTypeReqEthPh+0x1fc>
          response[1] = typeSize;
    398a:	69fb      	ldr	r3, [r7, #28]
    398c:	7c3a      	ldrb	r2, [r7, #16]
    398e:	705a      	strb	r2, [r3, #1]
        if (response[1] != typeSize) {
    3990:	69fb      	ldr	r3, [r7, #28]
    3992:	693a      	ldr	r2, [r7, #16]
    3994:	785b      	ldrb	r3, [r3, #1]
    3996:	429a      	cmp	r2, r3
    3998:	d000      	beq.n	399c <_ZN8ATTClass13readByTypeReqEthPh+0x208>
    399a:	e739      	b.n	3810 <_ZN8ATTClass13readByTypeReqEthPh+0x7c>
        memcpy(&response[responseLength], &handle, sizeof(handle));
    399c:	69fb      	ldr	r3, [r7, #28]
    399e:	2202      	movs	r2, #2
    39a0:	1918      	adds	r0, r3, r4
    39a2:	2324      	movs	r3, #36	; 0x24
    39a4:	18f9      	adds	r1, r7, r3
    39a6:	f005 fcdc 	bl	9362 <memcpy>
        response[responseLength++] = characteristic->properties();
    39aa:	0030      	movs	r0, r6
    39ac:	f7fe fe52 	bl	2654 <_ZNK22BLELocalCharacteristic10propertiesEv>
    39b0:	69fa      	ldr	r2, [r7, #28]
        responseLength += sizeof(handle);
    39b2:	1ca3      	adds	r3, r4, #2
        response[responseLength++] = characteristic->properties();
    39b4:	b29b      	uxth	r3, r3
    39b6:	54d0      	strb	r0, [r2, r3]
        memcpy(&response[responseLength], &valueHandle, sizeof(valueHandle));
    39b8:	2326      	movs	r3, #38	; 0x26
        response[responseLength++] = characteristic->properties();
    39ba:	1ce0      	adds	r0, r4, #3
        memcpy(&response[responseLength], &valueHandle, sizeof(valueHandle));
    39bc:	b280      	uxth	r0, r0
    39be:	18f9      	adds	r1, r7, r3
        uint16_t valueHandle = (handle + 1);
    39c0:	3502      	adds	r5, #2
        memcpy(&response[responseLength], &valueHandle, sizeof(valueHandle));
    39c2:	1810      	adds	r0, r2, r0
    39c4:	2202      	movs	r2, #2
        uint16_t valueHandle = (handle + 1);
    39c6:	84fd      	strh	r5, [r7, #38]	; 0x26
        responseLength += sizeof(valueHandle);
    39c8:	3405      	adds	r4, #5
        memcpy(&response[responseLength], &valueHandle, sizeof(valueHandle));
    39ca:	f005 fcca 	bl	9362 <memcpy>
        memcpy(&response[responseLength], characteristic->uuidData(), uuidLen);
    39ce:	69fb      	ldr	r3, [r7, #28]
        responseLength += sizeof(valueHandle);
    39d0:	b2a4      	uxth	r4, r4
        memcpy(&response[responseLength], characteristic->uuidData(), uuidLen);
    39d2:	0030      	movs	r0, r6
    39d4:	191d      	adds	r5, r3, r4
    39d6:	f7fe fbba 	bl	214e <_ZNK12BLEAttribute8uuidDataEv>
    39da:	687a      	ldr	r2, [r7, #4]
    39dc:	0001      	movs	r1, r0
    39de:	0028      	movs	r0, r5
    39e0:	f005 fcbf 	bl	9362 <memcpy>
        responseLength += uuidLen;
    39e4:	687b      	ldr	r3, [r7, #4]
        if ((responseLength + typeSize) > _mtu) {
    39e6:	697a      	ldr	r2, [r7, #20]
        responseLength += uuidLen;
    39e8:	18e4      	adds	r4, r4, r3
        if ((responseLength + typeSize) > _mtu) {
    39ea:	693b      	ldr	r3, [r7, #16]
        responseLength += uuidLen;
    39ec:	b2a4      	uxth	r4, r4
        if ((responseLength + typeSize) > _mtu) {
    39ee:	89d2      	ldrh	r2, [r2, #14]
    39f0:	18e3      	adds	r3, r4, r3
    39f2:	4293      	cmp	r3, r2
    39f4:	dd00      	ble.n	39f8 <_ZN8ATTClass13readByTypeReqEthPh+0x264>
    39f6:	e70b      	b.n	3810 <_ZN8ATTClass13readByTypeReqEthPh+0x7c>
    39f8:	68fd      	ldr	r5, [r7, #12]
  for (uint16_t i = (readByTypeReq->startHandle - 1); i < GATT.attributeCount() && i <= (readByTypeReq->endHandle - 1); i++) {
    39fa:	3501      	adds	r5, #1
    39fc:	b2ad      	uxth	r5, r5
    39fe:	e6f9      	b.n	37f4 <_ZN8ATTClass13readByTypeReqEthPh+0x60>
    3a00:	20000314 	.word	0x20000314
    3a04:	00002902 	.word	0x00002902
    3a08:	00002803 	.word	0x00002803
    3a0c:	20000480 	.word	0x20000480

00003a10 <_ZN8ATTClass13writeReqOrCmdEthhPh>:
{
    3a10:	b5f0      	push	{r4, r5, r6, r7, lr}
    3a12:	b08b      	sub	sp, #44	; 0x2c
    3a14:	af02      	add	r7, sp, #8
    3a16:	60b8      	str	r0, [r7, #8]
    3a18:	000d      	movs	r5, r1
    3a1a:	0014      	movs	r4, r2
    3a1c:	607b      	str	r3, [r7, #4]
  if (dlen < sizeof(uint16_t)) {
    3a1e:	2b01      	cmp	r3, #1
    3a20:	d808      	bhi.n	3a34 <_ZN8ATTClass13writeReqOrCmdEthhPh+0x24>
    if (withResponse) {
    3a22:	2a12      	cmp	r2, #18
    3a24:	d115      	bne.n	3a52 <_ZN8ATTClass13writeReqOrCmdEthhPh+0x42>
      sendError(connectionHandle, ATT_OP_WRITE_REQ, 0x0000, ATT_ECODE_INVALID_PDU);
    3a26:	2304      	movs	r3, #4
    3a28:	2200      	movs	r2, #0
      sendError(connectionHandle, ATT_OP_WRITE_REQ, handle, ATT_ECODE_WRITE_NOT_PERM);
    3a2a:	0021      	movs	r1, r4
    3a2c:	0028      	movs	r0, r5
    3a2e:	f7ff f9e1 	bl	2df4 <_ZN8ATTClass9sendErrorEthth.constprop.3>
    3a32:	e00e      	b.n	3a52 <_ZN8ATTClass13writeReqOrCmdEthhPh+0x42>
  uint16_t handle = *(uint16_t*)data;
    3a34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
  if ((uint16_t)(handle - 1) > GATT.attributeCount()) {
    3a36:	484b      	ldr	r0, [pc, #300]	; (3b64 <_ZN8ATTClass13writeReqOrCmdEthhPh+0x154>)
  uint16_t handle = *(uint16_t*)data;
    3a38:	881b      	ldrh	r3, [r3, #0]
    3a3a:	60fb      	str	r3, [r7, #12]
  if ((uint16_t)(handle - 1) > GATT.attributeCount()) {
    3a3c:	f000 fb2e 	bl	409c <_ZNK9GATTClass14attributeCountEv>
    3a40:	68fb      	ldr	r3, [r7, #12]
    3a42:	1e59      	subs	r1, r3, #1
    3a44:	b28b      	uxth	r3, r1
    3a46:	4283      	cmp	r3, r0
    3a48:	d906      	bls.n	3a58 <_ZN8ATTClass13writeReqOrCmdEthhPh+0x48>
      sendError(connectionHandle, ATT_OP_WRITE_REQ, handle, ATT_ECODE_ATTR_NOT_FOUND);
    3a4a:	230a      	movs	r3, #10
    if (withResponse) {
    3a4c:	2c12      	cmp	r4, #18
    3a4e:	d100      	bne.n	3a52 <_ZN8ATTClass13writeReqOrCmdEthhPh+0x42>
    3a50:	e085      	b.n	3b5e <_ZN8ATTClass13writeReqOrCmdEthhPh+0x14e>
}
    3a52:	46bd      	mov	sp, r7
    3a54:	b009      	add	sp, #36	; 0x24
    3a56:	bdf0      	pop	{r4, r5, r6, r7, pc}
  BLEAttribute* attribute = GATT.attribute(handle - 1);
    3a58:	4842      	ldr	r0, [pc, #264]	; (3b64 <_ZN8ATTClass13writeReqOrCmdEthhPh+0x154>)
    3a5a:	f000 fb46 	bl	40ea <_ZNK9GATTClass9attributeEj>
  if (attribute->type() == BLETypeCharacteristic) {
    3a5e:	6803      	ldr	r3, [r0, #0]
  BLEAttribute* attribute = GATT.attribute(handle - 1);
    3a60:	0006      	movs	r6, r0
  if (attribute->type() == BLETypeCharacteristic) {
    3a62:	689b      	ldr	r3, [r3, #8]
    3a64:	4798      	blx	r3
    3a66:	4b40      	ldr	r3, [pc, #256]	; (3b68 <_ZN8ATTClass13writeReqOrCmdEthhPh+0x158>)
    3a68:	4298      	cmp	r0, r3
    3a6a:	d141      	bne.n	3af0 <_ZN8ATTClass13writeReqOrCmdEthhPh+0xe0>
    if (handle != characteristic->valueHandle() || 
    3a6c:	0030      	movs	r0, r6
    3a6e:	f7fe fe65 	bl	273c <_ZNK22BLELocalCharacteristic11valueHandleEv>
      withResponse ? ((characteristic->properties() & BLEWrite) == 0) : 
    3a72:	68fb      	ldr	r3, [r7, #12]
    3a74:	4283      	cmp	r3, r0
    3a76:	d101      	bne.n	3a7c <_ZN8ATTClass13writeReqOrCmdEthhPh+0x6c>
    if (handle != characteristic->valueHandle() || 
    3a78:	2c12      	cmp	r4, #18
    3a7a:	d133      	bne.n	3ae4 <_ZN8ATTClass13writeReqOrCmdEthhPh+0xd4>
      withResponse ? ((characteristic->properties() & BLEWrite) == 0) : 
    3a7c:	0030      	movs	r0, r6
    3a7e:	f7fe fde9 	bl	2654 <_ZNK22BLELocalCharacteristic10propertiesEv>
    if (handle != characteristic->valueHandle() || 
    3a82:	0703      	lsls	r3, r0, #28
    3a84:	d567      	bpl.n	3b56 <_ZN8ATTClass13writeReqOrCmdEthhPh+0x146>
    if (connectionHandle == _connectionHandle) {
    3a86:	68bb      	ldr	r3, [r7, #8]
    3a88:	88db      	ldrh	r3, [r3, #6]
    3a8a:	42ab      	cmp	r3, r5
    3a8c:	d114      	bne.n	3ab8 <_ZN8ATTClass13writeReqOrCmdEthhPh+0xa8>
      characteristic->writeValue(BLEDevice(connectionHandle, _peerAddress), value, valueLength);
    3a8e:	2314      	movs	r3, #20
    3a90:	68ba      	ldr	r2, [r7, #8]
    3a92:	0029      	movs	r1, r5
    3a94:	3208      	adds	r2, #8
    3a96:	18f8      	adds	r0, r7, r3
    3a98:	f7fe fc78 	bl	238c <_ZN9BLEDeviceC1EtPh>
    3a9c:	2114      	movs	r1, #20
  uint8_t valueLength = dlen - sizeof(handle);
    3a9e:	687b      	ldr	r3, [r7, #4]
  uint8_t* value = &data[sizeof(handle)];
    3aa0:	6bba      	ldr	r2, [r7, #56]	; 0x38
  uint8_t valueLength = dlen - sizeof(handle);
    3aa2:	3b02      	subs	r3, #2
      characteristic->writeValue(BLEDevice(connectionHandle, _peerAddress), value, valueLength);
    3aa4:	b2db      	uxtb	r3, r3
  uint8_t* value = &data[sizeof(handle)];
    3aa6:	3202      	adds	r2, #2
      characteristic->writeValue(BLEDevice(connectionHandle, _peerAddress), value, valueLength);
    3aa8:	1879      	adds	r1, r7, r1
    3aaa:	0030      	movs	r0, r6
    3aac:	f7fe ff2c 	bl	2908 <_ZN22BLELocalCharacteristic10writeValueE9BLEDevicePKhi>
      characteristic->writeCccdValue(BLEDevice(connectionHandle, _peerAddress), *((uint16_t*)value));
    3ab0:	2314      	movs	r3, #20
    3ab2:	18f8      	adds	r0, r7, r3
    3ab4:	f7fe fbb9 	bl	222a <_ZN9BLEDeviceD1Ev>
  if (withResponse) {
    3ab8:	2c12      	cmp	r4, #18
    3aba:	d1ca      	bne.n	3a52 <_ZN8ATTClass13writeReqOrCmdEthhPh+0x42>
    HCI.sendAclPkt(connectionHandle, ATT_CID, responseLength, response);
    3abc:	466c      	mov	r4, sp
    uint8_t response[_mtu];
    3abe:	68bb      	ldr	r3, [r7, #8]
    response[0] = ATT_OP_WRITE_RESP;
    3ac0:	2213      	movs	r2, #19
    uint8_t response[_mtu];
    3ac2:	89db      	ldrh	r3, [r3, #14]
    HCI.sendAclPkt(connectionHandle, ATT_CID, responseLength, response);
    3ac4:	0029      	movs	r1, r5
    uint8_t response[_mtu];
    3ac6:	3307      	adds	r3, #7
    3ac8:	08db      	lsrs	r3, r3, #3
    3aca:	00db      	lsls	r3, r3, #3
    3acc:	1ae3      	subs	r3, r4, r3
    3ace:	469d      	mov	sp, r3
    3ad0:	ab02      	add	r3, sp, #8
    response[0] = ATT_OP_WRITE_RESP;
    3ad2:	701a      	strb	r2, [r3, #0]
    HCI.sendAclPkt(connectionHandle, ATT_CID, responseLength, response);
    3ad4:	4825      	ldr	r0, [pc, #148]	; (3b6c <_ZN8ATTClass13writeReqOrCmdEthhPh+0x15c>)
    3ad6:	9300      	str	r3, [sp, #0]
    3ad8:	3a0f      	subs	r2, #15
    3ada:	2301      	movs	r3, #1
    3adc:	f000 fc64 	bl	43a8 <_ZN8HCIClass10sendAclPktEthhPv>
    3ae0:	46a5      	mov	sp, r4
    3ae2:	e7b6      	b.n	3a52 <_ZN8ATTClass13writeReqOrCmdEthhPh+0x42>
                     ((characteristic->properties() & BLEWriteWithoutResponse) == 0)) {
    3ae4:	0030      	movs	r0, r6
    3ae6:	f7fe fdb5 	bl	2654 <_ZNK22BLELocalCharacteristic10propertiesEv>
    if (handle != characteristic->valueHandle() || 
    3aea:	0743      	lsls	r3, r0, #29
    3aec:	d4cb      	bmi.n	3a86 <_ZN8ATTClass13writeReqOrCmdEthhPh+0x76>
    3aee:	e7b0      	b.n	3a52 <_ZN8ATTClass13writeReqOrCmdEthhPh+0x42>
  } else if (attribute->type() == BLETypeDescriptor) {
    3af0:	6833      	ldr	r3, [r6, #0]
    3af2:	0030      	movs	r0, r6
    3af4:	689b      	ldr	r3, [r3, #8]
    3af6:	4798      	blx	r3
    3af8:	23a4      	movs	r3, #164	; 0xa4
    3afa:	019b      	lsls	r3, r3, #6
    3afc:	4298      	cmp	r0, r3
    3afe:	d12a      	bne.n	3b56 <_ZN8ATTClass13writeReqOrCmdEthhPh+0x146>
    if (descriptor->uuidLength() != 2 || *((uint16_t*)(descriptor->uuidData())) != 0x2902) {
    3b00:	0030      	movs	r0, r6
    3b02:	f7fe fb29 	bl	2158 <_ZNK12BLEAttribute10uuidLengthEv>
    3b06:	2802      	cmp	r0, #2
    3b08:	d125      	bne.n	3b56 <_ZN8ATTClass13writeReqOrCmdEthhPh+0x146>
    3b0a:	0030      	movs	r0, r6
    3b0c:	f7fe fb1f 	bl	214e <_ZNK12BLEAttribute8uuidDataEv>
    3b10:	4b17      	ldr	r3, [pc, #92]	; (3b70 <_ZN8ATTClass13writeReqOrCmdEthhPh+0x160>)
    3b12:	8802      	ldrh	r2, [r0, #0]
    3b14:	429a      	cmp	r2, r3
    3b16:	d11e      	bne.n	3b56 <_ZN8ATTClass13writeReqOrCmdEthhPh+0x146>
    attribute = GATT.attribute(handle - 2);
    3b18:	68fb      	ldr	r3, [r7, #12]
    3b1a:	4812      	ldr	r0, [pc, #72]	; (3b64 <_ZN8ATTClass13writeReqOrCmdEthhPh+0x154>)
    3b1c:	1e99      	subs	r1, r3, #2
    3b1e:	f000 fae4 	bl	40ea <_ZNK9GATTClass9attributeEj>
    if (attribute->type() != BLETypeCharacteristic) {
    3b22:	6803      	ldr	r3, [r0, #0]
    attribute = GATT.attribute(handle - 2);
    3b24:	0006      	movs	r6, r0
    if (attribute->type() != BLETypeCharacteristic) {
    3b26:	689b      	ldr	r3, [r3, #8]
    3b28:	4798      	blx	r3
    3b2a:	4b0f      	ldr	r3, [pc, #60]	; (3b68 <_ZN8ATTClass13writeReqOrCmdEthhPh+0x158>)
    3b2c:	4298      	cmp	r0, r3
    3b2e:	d112      	bne.n	3b56 <_ZN8ATTClass13writeReqOrCmdEthhPh+0x146>
    if (connectionHandle == _connectionHandle) {
    3b30:	68bb      	ldr	r3, [r7, #8]
    3b32:	88db      	ldrh	r3, [r3, #6]
    3b34:	42ab      	cmp	r3, r5
    3b36:	d1bf      	bne.n	3ab8 <_ZN8ATTClass13writeReqOrCmdEthhPh+0xa8>
      characteristic->writeCccdValue(BLEDevice(connectionHandle, _peerAddress), *((uint16_t*)value));
    3b38:	2314      	movs	r3, #20
    3b3a:	68ba      	ldr	r2, [r7, #8]
    3b3c:	0029      	movs	r1, r5
    3b3e:	18f8      	adds	r0, r7, r3
    3b40:	3208      	adds	r2, #8
    3b42:	f7fe fc23 	bl	238c <_ZN9BLEDeviceC1EtPh>
    3b46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    3b48:	0030      	movs	r0, r6
    3b4a:	885a      	ldrh	r2, [r3, #2]
    3b4c:	2314      	movs	r3, #20
    3b4e:	18f9      	adds	r1, r7, r3
    3b50:	f7fe ff06 	bl	2960 <_ZN22BLELocalCharacteristic14writeCccdValueE9BLEDevicet>
    3b54:	e7ac      	b.n	3ab0 <_ZN8ATTClass13writeReqOrCmdEthhPh+0xa0>
    if (withResponse) {
    3b56:	2c12      	cmp	r4, #18
    3b58:	d000      	beq.n	3b5c <_ZN8ATTClass13writeReqOrCmdEthhPh+0x14c>
    3b5a:	e77a      	b.n	3a52 <_ZN8ATTClass13writeReqOrCmdEthhPh+0x42>
      sendError(connectionHandle, ATT_OP_WRITE_REQ, handle, ATT_ECODE_WRITE_NOT_PERM);
    3b5c:	2303      	movs	r3, #3
    3b5e:	68fa      	ldr	r2, [r7, #12]
    3b60:	e763      	b.n	3a2a <_ZN8ATTClass13writeReqOrCmdEthhPh+0x1a>
    3b62:	46c0      	nop			; (mov r8, r8)
    3b64:	20000314 	.word	0x20000314
    3b68:	00002803 	.word	0x00002803
    3b6c:	20000480 	.word	0x20000480
    3b70:	00002902 	.word	0x00002902

00003b74 <_ZN8ATTClass12prepWriteReqEthPh>:
{
    3b74:	b5f0      	push	{r4, r5, r6, r7, lr}
    3b76:	b08b      	sub	sp, #44	; 0x2c
    3b78:	af02      	add	r7, sp, #8
    3b7a:	617b      	str	r3, [r7, #20]
  HCI.sendAclPkt(connectionHandle, ATT_CID, responseLength, response);
    3b7c:	466b      	mov	r3, sp
{
    3b7e:	0005      	movs	r5, r0
    3b80:	61f9      	str	r1, [r7, #28]
    3b82:	613a      	str	r2, [r7, #16]
  HCI.sendAclPkt(connectionHandle, ATT_CID, responseLength, response);
    3b84:	60bb      	str	r3, [r7, #8]
  if (dlen < sizeof(PrepWriteReq)) {
    3b86:	2a03      	cmp	r2, #3
    3b88:	d806      	bhi.n	3b98 <_ZN8ATTClass12prepWriteReqEthPh+0x24>
    sendError(connectionHandle, ATT_OP_PREP_WRITE_REQ, 0x0000, ATT_ECODE_INVALID_PDU);
    3b8a:	2304      	movs	r3, #4
    3b8c:	2200      	movs	r2, #0
    sendError(connectionHandle, ATT_OP_PREP_WRITE_REQ, handle, ATT_ECODE_INVALID_OFFSET);
    3b8e:	2116      	movs	r1, #22
    3b90:	69f8      	ldr	r0, [r7, #28]
    3b92:	f7ff f92f 	bl	2df4 <_ZN8ATTClass9sendErrorEthth.constprop.3>
    return;
    3b96:	e075      	b.n	3c84 <_ZN8ATTClass12prepWriteReqEthPh+0x110>
  uint16_t handle = prepWriteReq->handle;
    3b98:	697a      	ldr	r2, [r7, #20]
    3b9a:	697b      	ldr	r3, [r7, #20]
    3b9c:	7854      	ldrb	r4, [r2, #1]
    3b9e:	781b      	ldrb	r3, [r3, #0]
  uint16_t offset = prepWriteReq->offset;
    3ba0:	78d0      	ldrb	r0, [r2, #3]
  uint16_t handle = prepWriteReq->handle;
    3ba2:	0224      	lsls	r4, r4, #8
    3ba4:	431c      	orrs	r4, r3
  uint16_t offset = prepWriteReq->offset;
    3ba6:	7893      	ldrb	r3, [r2, #2]
  if ((uint16_t)(handle - 1) > GATT.attributeCount()) {
    3ba8:	4e3c      	ldr	r6, [pc, #240]	; (3c9c <_ZN8ATTClass12prepWriteReqEthPh+0x128>)
  uint16_t offset = prepWriteReq->offset;
    3baa:	0200      	lsls	r0, r0, #8
    3bac:	4318      	orrs	r0, r3
    3bae:	60f8      	str	r0, [r7, #12]
  if ((uint16_t)(handle - 1) > GATT.attributeCount()) {
    3bb0:	0030      	movs	r0, r6
    3bb2:	f000 fa73 	bl	409c <_ZNK9GATTClass14attributeCountEv>
    3bb6:	1e61      	subs	r1, r4, #1
    3bb8:	b28b      	uxth	r3, r1
    3bba:	4283      	cmp	r3, r0
    3bbc:	d902      	bls.n	3bc4 <_ZN8ATTClass12prepWriteReqEthPh+0x50>
    sendError(connectionHandle, ATT_OP_PREP_WRITE_REQ, handle, ATT_ECODE_ATTR_NOT_FOUND);
    3bbe:	230a      	movs	r3, #10
    sendError(connectionHandle, ATT_OP_PREP_WRITE_REQ, handle, ATT_ECODE_INVALID_OFFSET);
    3bc0:	0022      	movs	r2, r4
    3bc2:	e7e4      	b.n	3b8e <_ZN8ATTClass12prepWriteReqEthPh+0x1a>
  BLEAttribute* attribute = GATT.attribute(handle - 1);
    3bc4:	0030      	movs	r0, r6
    3bc6:	f000 fa90 	bl	40ea <_ZNK9GATTClass9attributeEj>
  if (attribute->type() != BLETypeCharacteristic) {
    3bca:	6803      	ldr	r3, [r0, #0]
  BLEAttribute* attribute = GATT.attribute(handle - 1);
    3bcc:	61b8      	str	r0, [r7, #24]
  if (attribute->type() != BLETypeCharacteristic) {
    3bce:	689b      	ldr	r3, [r3, #8]
    3bd0:	4798      	blx	r3
    3bd2:	4b33      	ldr	r3, [pc, #204]	; (3ca0 <_ZN8ATTClass12prepWriteReqEthPh+0x12c>)
    3bd4:	4298      	cmp	r0, r3
    3bd6:	d001      	beq.n	3bdc <_ZN8ATTClass12prepWriteReqEthPh+0x68>
    sendError(connectionHandle, ATT_OP_PREP_WRITE_REQ, handle, ATT_ECODE_ATTR_NOT_LONG);
    3bd8:	230b      	movs	r3, #11
    3bda:	e7f1      	b.n	3bc0 <_ZN8ATTClass12prepWriteReqEthPh+0x4c>
  if (handle != characteristic->valueHandle()) {
    3bdc:	69b8      	ldr	r0, [r7, #24]
    3bde:	f7fe fdad 	bl	273c <_ZNK22BLELocalCharacteristic11valueHandleEv>
    3be2:	4284      	cmp	r4, r0
    3be4:	d1f8      	bne.n	3bd8 <_ZN8ATTClass12prepWriteReqEthPh+0x64>
  if ((characteristic->properties() & BLEWrite) == 0) {
    3be6:	69b8      	ldr	r0, [r7, #24]
    3be8:	f7fe fd34 	bl	2654 <_ZNK22BLELocalCharacteristic10propertiesEv>
    3bec:	0703      	lsls	r3, r0, #28
    3bee:	d401      	bmi.n	3bf4 <_ZN8ATTClass12prepWriteReqEthPh+0x80>
    sendError(connectionHandle, ATT_OP_PREP_WRITE_REQ, handle, ATT_ECODE_WRITE_NOT_PERM);
    3bf0:	2303      	movs	r3, #3
    3bf2:	e7e5      	b.n	3bc0 <_ZN8ATTClass12prepWriteReqEthPh+0x4c>
  if (_longWriteHandle == 0) {
    3bf4:	8a6e      	ldrh	r6, [r5, #18]
    3bf6:	2e00      	cmp	r6, #0
    3bf8:	d149      	bne.n	3c8e <_ZN8ATTClass12prepWriteReqEthPh+0x11a>
    int valueSize = characteristic->valueSize();
    3bfa:	69b8      	ldr	r0, [r7, #24]
    3bfc:	f7fe fd2d 	bl	265a <_ZNK22BLELocalCharacteristic9valueSizeEv>
    _longWriteValue = (uint8_t*)realloc(_longWriteValue, valueSize);
    3c00:	0001      	movs	r1, r0
    int valueSize = characteristic->valueSize();
    3c02:	6078      	str	r0, [r7, #4]
    _longWriteValue = (uint8_t*)realloc(_longWriteValue, valueSize);
    3c04:	6968      	ldr	r0, [r5, #20]
    3c06:	f006 f8e7 	bl	9dd8 <realloc>
    _longWriteValueLength = 0;
    3c0a:	832e      	strh	r6, [r5, #24]
    _longWriteValue = (uint8_t*)realloc(_longWriteValue, valueSize);
    3c0c:	6168      	str	r0, [r5, #20]
    _longWriteHandle = handle;
    3c0e:	826c      	strh	r4, [r5, #18]
    memset(_longWriteValue, 0x00, valueSize);
    3c10:	687a      	ldr	r2, [r7, #4]
    3c12:	0031      	movs	r1, r6
    3c14:	f005 fbc0 	bl	9398 <memset>
  if ((offset != _longWriteValueLength) || ((offset + valueLength) > (uint16_t)characteristic->valueSize())) {
    3c18:	8b2b      	ldrh	r3, [r5, #24]
    3c1a:	68fa      	ldr	r2, [r7, #12]
    3c1c:	4293      	cmp	r3, r2
    3c1e:	d13b      	bne.n	3c98 <_ZN8ATTClass12prepWriteReqEthPh+0x124>
  uint8_t valueLength = dlen - sizeof(PrepWriteReq);
    3c20:	693b      	ldr	r3, [r7, #16]
  if ((offset != _longWriteValueLength) || ((offset + valueLength) > (uint16_t)characteristic->valueSize())) {
    3c22:	69b8      	ldr	r0, [r7, #24]
  uint8_t valueLength = dlen - sizeof(PrepWriteReq);
    3c24:	1f1e      	subs	r6, r3, #4
    3c26:	b2f6      	uxtb	r6, r6
  if ((offset != _longWriteValueLength) || ((offset + valueLength) > (uint16_t)characteristic->valueSize())) {
    3c28:	1993      	adds	r3, r2, r6
    3c2a:	607b      	str	r3, [r7, #4]
    3c2c:	f7fe fd15 	bl	265a <_ZNK22BLELocalCharacteristic9valueSizeEv>
    3c30:	687b      	ldr	r3, [r7, #4]
    3c32:	b280      	uxth	r0, r0
    3c34:	4298      	cmp	r0, r3
    3c36:	db2f      	blt.n	3c98 <_ZN8ATTClass12prepWriteReqEthPh+0x124>
  memcpy(_longWriteValue + offset, value, valueLength);
    3c38:	696a      	ldr	r2, [r5, #20]
    3c3a:	68fb      	ldr	r3, [r7, #12]
    3c3c:	4694      	mov	ip, r2
    3c3e:	4463      	add	r3, ip
    3c40:	0018      	movs	r0, r3
  uint8_t* value = &data[sizeof(PrepWriteReq)];
    3c42:	697b      	ldr	r3, [r7, #20]
  memcpy(_longWriteValue + offset, value, valueLength);
    3c44:	0032      	movs	r2, r6
  uint8_t* value = &data[sizeof(PrepWriteReq)];
    3c46:	1d19      	adds	r1, r3, #4
  memcpy(_longWriteValue + offset, value, valueLength);
    3c48:	f005 fb8b 	bl	9362 <memcpy>
  uint8_t response[_mtu];
    3c4c:	466a      	mov	r2, sp
  _longWriteValueLength += valueLength;
    3c4e:	8b2b      	ldrh	r3, [r5, #24]
  memcpy(&response[1], data, dlen);
    3c50:	2009      	movs	r0, #9
  _longWriteValueLength += valueLength;
    3c52:	199e      	adds	r6, r3, r6
  uint8_t response[_mtu];
    3c54:	89eb      	ldrh	r3, [r5, #14]
  memcpy(&response[1], data, dlen);
    3c56:	6979      	ldr	r1, [r7, #20]
  uint8_t response[_mtu];
    3c58:	3307      	adds	r3, #7
    3c5a:	08db      	lsrs	r3, r3, #3
    3c5c:	00db      	lsls	r3, r3, #3
    3c5e:	1ad3      	subs	r3, r2, r3
    3c60:	469d      	mov	sp, r3
  response[0] = ATT_OP_PREP_WRITE_RESP;
    3c62:	2317      	movs	r3, #23
  uint8_t response[_mtu];
    3c64:	ac02      	add	r4, sp, #8
  response[0] = ATT_OP_PREP_WRITE_RESP;
    3c66:	7023      	strb	r3, [r4, #0]
  memcpy(&response[1], data, dlen);
    3c68:	693a      	ldr	r2, [r7, #16]
  _longWriteValueLength += valueLength;
    3c6a:	832e      	strh	r6, [r5, #24]
  memcpy(&response[1], data, dlen);
    3c6c:	4468      	add	r0, sp
    3c6e:	f005 fb78 	bl	9362 <memcpy>
  responseLength = dlen + 1;
    3c72:	693b      	ldr	r3, [r7, #16]
  HCI.sendAclPkt(connectionHandle, ATT_CID, responseLength, response);
    3c74:	9400      	str	r4, [sp, #0]
  responseLength = dlen + 1;
    3c76:	3301      	adds	r3, #1
  HCI.sendAclPkt(connectionHandle, ATT_CID, responseLength, response);
    3c78:	b2db      	uxtb	r3, r3
    3c7a:	2204      	movs	r2, #4
    3c7c:	69f9      	ldr	r1, [r7, #28]
    3c7e:	4809      	ldr	r0, [pc, #36]	; (3ca4 <_ZN8ATTClass12prepWriteReqEthPh+0x130>)
    3c80:	f000 fb92 	bl	43a8 <_ZN8HCIClass10sendAclPktEthhPv>
    3c84:	68bb      	ldr	r3, [r7, #8]
    3c86:	469d      	mov	sp, r3
}
    3c88:	46bd      	mov	sp, r7
    3c8a:	b009      	add	sp, #36	; 0x24
    3c8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    sendError(connectionHandle, ATT_OP_PREP_WRITE_REQ, handle, ATT_ECODE_UNLIKELY);
    3c8e:	230e      	movs	r3, #14
  } else if (_longWriteHandle != handle) {
    3c90:	42b4      	cmp	r4, r6
    3c92:	d000      	beq.n	3c96 <_ZN8ATTClass12prepWriteReqEthPh+0x122>
    3c94:	e794      	b.n	3bc0 <_ZN8ATTClass12prepWriteReqEthPh+0x4c>
    3c96:	e7bf      	b.n	3c18 <_ZN8ATTClass12prepWriteReqEthPh+0xa4>
    sendError(connectionHandle, ATT_OP_PREP_WRITE_REQ, handle, ATT_ECODE_INVALID_OFFSET);
    3c98:	2307      	movs	r3, #7
    3c9a:	e791      	b.n	3bc0 <_ZN8ATTClass12prepWriteReqEthPh+0x4c>
    3c9c:	20000314 	.word	0x20000314
    3ca0:	00002803 	.word	0x00002803
    3ca4:	20000480 	.word	0x20000480

00003ca8 <_ZN8ATTClass12execWriteReqEthPh>:
{
    3ca8:	b5f0      	push	{r4, r5, r6, r7, lr}
    3caa:	b089      	sub	sp, #36	; 0x24
    3cac:	000d      	movs	r5, r1
  HCI.sendAclPkt(connectionHandle, ATT_CID, responseLength, response);
    3cae:	4669      	mov	r1, sp
{
    3cb0:	af02      	add	r7, sp, #8
    3cb2:	0004      	movs	r4, r0
  HCI.sendAclPkt(connectionHandle, ATT_CID, responseLength, response);
    3cb4:	6079      	str	r1, [r7, #4]
  if (dlen != sizeof(uint8_t)) {
    3cb6:	2a01      	cmp	r2, #1
    3cb8:	d008      	beq.n	3ccc <_ZN8ATTClass12execWriteReqEthPh+0x24>
    sendError(connectionHandle, ATT_OP_EXEC_WRITE_REQ, 0x0000, ATT_ECODE_INVALID_PDU);
    3cba:	2304      	movs	r3, #4
    3cbc:	2200      	movs	r2, #0
    3cbe:	2118      	movs	r1, #24
    3cc0:	0028      	movs	r0, r5
    3cc2:	f7ff f897 	bl	2df4 <_ZN8ATTClass9sendErrorEthth.constprop.3>
}
    3cc6:	46bd      	mov	sp, r7
    3cc8:	b007      	add	sp, #28
    3cca:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (_longWriteHandle && (flag & 0x01)) {
    3ccc:	8a41      	ldrh	r1, [r0, #18]
    3cce:	2900      	cmp	r1, #0
    3cd0:	d01c      	beq.n	3d0c <_ZN8ATTClass12execWriteReqEthPh+0x64>
    3cd2:	781b      	ldrb	r3, [r3, #0]
    3cd4:	4213      	tst	r3, r2
    3cd6:	d019      	beq.n	3d0c <_ZN8ATTClass12execWriteReqEthPh+0x64>
    BLELocalCharacteristic* characteristic = (BLELocalCharacteristic*)GATT.attribute(_longWriteHandle - 1);
    3cd8:	3901      	subs	r1, #1
    3cda:	4818      	ldr	r0, [pc, #96]	; (3d3c <_ZN8ATTClass12execWriteReqEthPh+0x94>)
    3cdc:	f000 fa05 	bl	40ea <_ZNK9GATTClass9attributeEj>
    if (connectionHandle == _connectionHandle) {
    3ce0:	88e3      	ldrh	r3, [r4, #6]
    BLELocalCharacteristic* characteristic = (BLELocalCharacteristic*)GATT.attribute(_longWriteHandle - 1);
    3ce2:	0006      	movs	r6, r0
    if (connectionHandle == _connectionHandle) {
    3ce4:	42ab      	cmp	r3, r5
    3ce6:	d111      	bne.n	3d0c <_ZN8ATTClass12execWriteReqEthPh+0x64>
      characteristic->writeValue(BLEDevice(connectionHandle, _peerAddress), _longWriteValue, _longWriteValueLength);
    3ce8:	230c      	movs	r3, #12
    3cea:	0022      	movs	r2, r4
    3cec:	0029      	movs	r1, r5
    3cee:	3208      	adds	r2, #8
    3cf0:	18f8      	adds	r0, r7, r3
    3cf2:	f7fe fb4b 	bl	238c <_ZN9BLEDeviceC1EtPh>
    3cf6:	210c      	movs	r1, #12
    3cf8:	8b23      	ldrh	r3, [r4, #24]
    3cfa:	0030      	movs	r0, r6
    3cfc:	6962      	ldr	r2, [r4, #20]
    3cfe:	1879      	adds	r1, r7, r1
    3d00:	f7fe fe02 	bl	2908 <_ZN22BLELocalCharacteristic10writeValueE9BLEDevicePKhi>
    3d04:	230c      	movs	r3, #12
    3d06:	18f8      	adds	r0, r7, r3
    3d08:	f7fe fa8f 	bl	222a <_ZN9BLEDeviceD1Ev>
  _longWriteHandle = 0x0000;
    3d0c:	2300      	movs	r3, #0
  uint8_t response[_mtu];
    3d0e:	466a      	mov	r2, sp
  _longWriteHandle = 0x0000;
    3d10:	8263      	strh	r3, [r4, #18]
  _longWriteValueLength = 0;
    3d12:	8323      	strh	r3, [r4, #24]
  uint8_t response[_mtu];
    3d14:	89e3      	ldrh	r3, [r4, #14]
  HCI.sendAclPkt(connectionHandle, ATT_CID, responseLength, response);
    3d16:	0029      	movs	r1, r5
  uint8_t response[_mtu];
    3d18:	3307      	adds	r3, #7
    3d1a:	08db      	lsrs	r3, r3, #3
    3d1c:	00db      	lsls	r3, r3, #3
    3d1e:	1ad3      	subs	r3, r2, r3
    3d20:	469d      	mov	sp, r3
  response[0] = ATT_OP_EXEC_WRITE_RESP;
    3d22:	2219      	movs	r2, #25
  uint8_t response[_mtu];
    3d24:	ab02      	add	r3, sp, #8
  response[0] = ATT_OP_EXEC_WRITE_RESP;
    3d26:	701a      	strb	r2, [r3, #0]
  HCI.sendAclPkt(connectionHandle, ATT_CID, responseLength, response);
    3d28:	4805      	ldr	r0, [pc, #20]	; (3d40 <_ZN8ATTClass12execWriteReqEthPh+0x98>)
    3d2a:	9300      	str	r3, [sp, #0]
    3d2c:	3a15      	subs	r2, #21
    3d2e:	2301      	movs	r3, #1
    3d30:	f000 fb3a 	bl	43a8 <_ZN8HCIClass10sendAclPktEthhPv>
    3d34:	687b      	ldr	r3, [r7, #4]
    3d36:	469d      	mov	sp, r3
    3d38:	e7c5      	b.n	3cc6 <_ZN8ATTClass12execWriteReqEthPh+0x1e>
    3d3a:	46c0      	nop			; (mov r8, r8)
    3d3c:	20000314 	.word	0x20000314
    3d40:	20000480 	.word	0x20000480

00003d44 <_ZN8ATTClass10handleDataEthPh>:
{
    3d44:	b513      	push	{r0, r1, r4, lr}
    3d46:	000c      	movs	r4, r1
  uint8_t opcode = data[0];
    3d48:	7819      	ldrb	r1, [r3, #0]
  dlen--;
    3d4a:	3a01      	subs	r2, #1
    3d4c:	b2d2      	uxtb	r2, r2
  data++;
    3d4e:	3301      	adds	r3, #1
  switch (opcode) {
    3d50:	290c      	cmp	r1, #12
    3d52:	d011      	beq.n	3d78 <_ZN8ATTClass10handleDataEthPh+0x34>
    3d54:	d817      	bhi.n	3d86 <_ZN8ATTClass10handleDataEthPh+0x42>
    3d56:	2906      	cmp	r1, #6
    3d58:	d035      	beq.n	3dc6 <_ZN8ATTClass10handleDataEthPh+0x82>
    3d5a:	d809      	bhi.n	3d70 <_ZN8ATTClass10handleDataEthPh+0x2c>
    3d5c:	2902      	cmp	r1, #2
    3d5e:	d02a      	beq.n	3db6 <_ZN8ATTClass10handleDataEthPh+0x72>
    3d60:	2904      	cmp	r1, #4
    3d62:	d02c      	beq.n	3dbe <_ZN8ATTClass10handleDataEthPh+0x7a>
      sendError(connectionHandle, opcode, 0x00, ATT_ECODE_REQ_NOT_SUPP);
    3d64:	2306      	movs	r3, #6
    3d66:	2200      	movs	r2, #0
    3d68:	0020      	movs	r0, r4
    3d6a:	f7ff f843 	bl	2df4 <_ZN8ATTClass9sendErrorEthth.constprop.3>
}
    3d6e:	e025      	b.n	3dbc <_ZN8ATTClass10handleDataEthPh+0x78>
  switch (opcode) {
    3d70:	2908      	cmp	r1, #8
    3d72:	d02c      	beq.n	3dce <_ZN8ATTClass10handleDataEthPh+0x8a>
    3d74:	290a      	cmp	r1, #10
    3d76:	d1f5      	bne.n	3d64 <_ZN8ATTClass10handleDataEthPh+0x20>
      readOrReadBlobReq(connectionHandle, opcode, dlen, data);
    3d78:	9300      	str	r3, [sp, #0]
    3d7a:	0013      	movs	r3, r2
    3d7c:	000a      	movs	r2, r1
    3d7e:	0021      	movs	r1, r4
    3d80:	f7ff fc1c 	bl	35bc <_ZN8ATTClass17readOrReadBlobReqEthhPh>
      break;
    3d84:	e01a      	b.n	3dbc <_ZN8ATTClass10handleDataEthPh+0x78>
  switch (opcode) {
    3d86:	2916      	cmp	r1, #22
    3d88:	d029      	beq.n	3dde <_ZN8ATTClass10handleDataEthPh+0x9a>
    3d8a:	d80a      	bhi.n	3da2 <_ZN8ATTClass10handleDataEthPh+0x5e>
    3d8c:	2910      	cmp	r1, #16
    3d8e:	d022      	beq.n	3dd6 <_ZN8ATTClass10handleDataEthPh+0x92>
    3d90:	2912      	cmp	r1, #18
    3d92:	d1e7      	bne.n	3d64 <_ZN8ATTClass10handleDataEthPh+0x20>
      writeReqOrCmd(connectionHandle, opcode, dlen, data);
    3d94:	9300      	str	r3, [sp, #0]
    3d96:	0013      	movs	r3, r2
    3d98:	000a      	movs	r2, r1
    3d9a:	0021      	movs	r1, r4
    3d9c:	f7ff fe38 	bl	3a10 <_ZN8ATTClass13writeReqOrCmdEthhPh>
      break;
    3da0:	e00c      	b.n	3dbc <_ZN8ATTClass10handleDataEthPh+0x78>
  switch (opcode) {
    3da2:	291e      	cmp	r1, #30
    3da4:	d01f      	beq.n	3de6 <_ZN8ATTClass10handleDataEthPh+0xa2>
    3da6:	2952      	cmp	r1, #82	; 0x52
    3da8:	d0f4      	beq.n	3d94 <_ZN8ATTClass10handleDataEthPh+0x50>
    3daa:	2918      	cmp	r1, #24
    3dac:	d1da      	bne.n	3d64 <_ZN8ATTClass10handleDataEthPh+0x20>
      execWriteReq(connectionHandle, dlen, data);
    3dae:	0021      	movs	r1, r4
    3db0:	f7ff ff7a 	bl	3ca8 <_ZN8ATTClass12execWriteReqEthPh>
      break;
    3db4:	e002      	b.n	3dbc <_ZN8ATTClass10handleDataEthPh+0x78>
      mtuReq(connectionHandle, dlen, data);
    3db6:	0021      	movs	r1, r4
    3db8:	f7ff f9ac 	bl	3114 <_ZN8ATTClass6mtuReqEthPh>
}
    3dbc:	bd13      	pop	{r0, r1, r4, pc}
      findInfoReq(connectionHandle, dlen, data);
    3dbe:	0021      	movs	r1, r4
    3dc0:	f7ff f9d2 	bl	3168 <_ZN8ATTClass11findInfoReqEthPh>
      break;
    3dc4:	e7fa      	b.n	3dbc <_ZN8ATTClass10handleDataEthPh+0x78>
      findByTypeReq(connectionHandle, dlen, data);
    3dc6:	0021      	movs	r1, r4
    3dc8:	f7ff fa98 	bl	32fc <_ZN8ATTClass13findByTypeReqEthPh>
      break;
    3dcc:	e7f6      	b.n	3dbc <_ZN8ATTClass10handleDataEthPh+0x78>
      readByTypeReq(connectionHandle, dlen, data);
    3dce:	0021      	movs	r1, r4
    3dd0:	f7ff fce0 	bl	3794 <_ZN8ATTClass13readByTypeReqEthPh>
      break;
    3dd4:	e7f2      	b.n	3dbc <_ZN8ATTClass10handleDataEthPh+0x78>
      readByGroupReq(connectionHandle, dlen, data);
    3dd6:	0021      	movs	r1, r4
    3dd8:	f7ff fb30 	bl	343c <_ZN8ATTClass14readByGroupReqEthPh>
      break;
    3ddc:	e7ee      	b.n	3dbc <_ZN8ATTClass10handleDataEthPh+0x78>
      prepWriteReq(connectionHandle, dlen, data);
    3dde:	0021      	movs	r1, r4
    3de0:	f7ff fec8 	bl	3b74 <_ZN8ATTClass12prepWriteReqEthPh>
      break;
    3de4:	e7ea      	b.n	3dbc <_ZN8ATTClass10handleDataEthPh+0x78>
  _cnf = true;
    3de6:	2301      	movs	r3, #1
    3de8:	7403      	strb	r3, [r0, #16]
    3dea:	e7e7      	b.n	3dbc <_ZN8ATTClass10handleDataEthPh+0x78>

00003dec <_GLOBAL__sub_I__ZN8ATTClassC2Ev>:
  if (event < (sizeof(_eventHandlers) / (sizeof(_eventHandlers[0])))) {
    _eventHandlers[event] = eventHandler;
  }
}

ATTClass ATT;
    3dec:	b510      	push	{r4, lr}
    3dee:	4c05      	ldr	r4, [pc, #20]	; (3e04 <_GLOBAL__sub_I__ZN8ATTClassC2Ev+0x18>)
    3df0:	0020      	movs	r0, r4
    3df2:	f7ff f81f 	bl	2e34 <_ZN8ATTClassC1Ev>
    3df6:	4a04      	ldr	r2, [pc, #16]	; (3e08 <_GLOBAL__sub_I__ZN8ATTClassC2Ev+0x1c>)
    3df8:	4904      	ldr	r1, [pc, #16]	; (3e0c <_GLOBAL__sub_I__ZN8ATTClassC2Ev+0x20>)
    3dfa:	0020      	movs	r0, r4
    3dfc:	f003 fafc 	bl	73f8 <__aeabi_atexit>
    3e00:	bd10      	pop	{r4, pc}
    3e02:	46c0      	nop			; (mov r8, r8)
    3e04:	200002c8 	.word	0x200002c8
    3e08:	20000000 	.word	0x20000000
    3e0c:	00002dc5 	.word	0x00002dc5

00003e10 <_ZN8GAPClassD1Ev>:
{
}

GAPClass::~GAPClass()
{
}
    3e10:	4770      	bx	lr

00003e12 <_ZN8GAPClassD0Ev>:
GAPClass::~GAPClass()
    3e12:	b510      	push	{r4, lr}
    3e14:	0004      	movs	r4, r0
}
    3e16:	f001 fb1b 	bl	5450 <_ZdlPv>
    3e1a:	0020      	movs	r0, r4
    3e1c:	bd10      	pop	{r4, pc}
	...

00003e20 <_ZN8GAPClassC1Ev>:
  _serviceDataLength(0)
    3e20:	4b07      	ldr	r3, [pc, #28]	; (3e40 <_ZN8GAPClassC1Ev+0x20>)
    3e22:	22a0      	movs	r2, #160	; 0xa0
    3e24:	3308      	adds	r3, #8
    3e26:	6003      	str	r3, [r0, #0]
    3e28:	2300      	movs	r3, #0
    3e2a:	8302      	strh	r2, [r0, #24]
    3e2c:	3a9f      	subs	r2, #159	; 0x9f
    3e2e:	7103      	strb	r3, [r0, #4]
    3e30:	6083      	str	r3, [r0, #8]
    3e32:	60c3      	str	r3, [r0, #12]
    3e34:	6103      	str	r3, [r0, #16]
    3e36:	6143      	str	r3, [r0, #20]
    3e38:	7682      	strb	r2, [r0, #26]
    3e3a:	6203      	str	r3, [r0, #32]
    3e3c:	6243      	str	r3, [r0, #36]	; 0x24
}
    3e3e:	4770      	bx	lr
    3e40:	0000b7ec 	.word	0x0000b7ec

00003e44 <_ZN8GAPClass24setAdvertisedServiceUuidEPKc>:

void GAPClass::setAdvertisedServiceUuid(const char* advertisedServiceUuid)
{
  _advertisedServiceUuid = advertisedServiceUuid;
    3e44:	6081      	str	r1, [r0, #8]
}
    3e46:	4770      	bx	lr

00003e48 <_ZN8GAPClass12setLocalNameEPKc>:
  _manufacturerDataLength = manufacturerDataLength;
}

void GAPClass::setLocalName(const char *localName)
{
  _localName = localName;
    3e48:	6141      	str	r1, [r0, #20]
}
    3e4a:	4770      	bx	lr

00003e4c <_ZN8GAPClass11advertisingEv>:

bool GAPClass::advertising()
{
  return _advertising;
    3e4c:	7900      	ldrb	r0, [r0, #4]
}
    3e4e:	4770      	bx	lr

00003e50 <_ZN8GAPClass9advertiseEv>:

int GAPClass::advertise()
{
    3e50:	b5f0      	push	{r4, r5, r6, r7, lr}
    3e52:	b09b      	sub	sp, #108	; 0x6c
    3e54:	0004      	movs	r4, r0
  uint8_t directBdaddr[6] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
    3e56:	ad08      	add	r5, sp, #32
    3e58:	2206      	movs	r2, #6
    3e5a:	2100      	movs	r1, #0
    3e5c:	0028      	movs	r0, r5
    3e5e:	f005 fa9b 	bl	9398 <memset>
    3e62:	2200      	movs	r2, #0

  uint8_t type = (_connectable) ? 0x00 : (_localName ? 0x02 : 0x03);
    3e64:	7ea1      	ldrb	r1, [r4, #26]
    3e66:	0013      	movs	r3, r2
    3e68:	4291      	cmp	r1, r2
    3e6a:	d103      	bne.n	3e74 <_ZN8GAPClass9advertiseEv+0x24>
    3e6c:	6963      	ldr	r3, [r4, #20]
    3e6e:	4259      	negs	r1, r3
    3e70:	414b      	adcs	r3, r1
    3e72:	3302      	adds	r3, #2

  _advertising = false;

  if (HCI.leSetAdvertisingParameters(_advertisingInterval, _advertisingInterval, type, 0x00, 0x00, directBdaddr, 0x07, 0) != 0) {
    3e74:	2007      	movs	r0, #7
    3e76:	8b21      	ldrh	r1, [r4, #24]
  _advertising = false;
    3e78:	7122      	strb	r2, [r4, #4]
  if (HCI.leSetAdvertisingParameters(_advertisingInterval, _advertisingInterval, type, 0x00, 0x00, directBdaddr, 0x07, 0) != 0) {
    3e7a:	9204      	str	r2, [sp, #16]
    3e7c:	9003      	str	r0, [sp, #12]
    3e7e:	9201      	str	r2, [sp, #4]
    3e80:	9200      	str	r2, [sp, #0]
    3e82:	9502      	str	r5, [sp, #8]
    3e84:	000a      	movs	r2, r1
    3e86:	4849      	ldr	r0, [pc, #292]	; (3fac <_ZN8GAPClass9advertiseEv+0x15c>)
    3e88:	f000 fc78 	bl	477c <_ZN8HCIClass26leSetAdvertisingParametersEtthhhPhhh>
    3e8c:	2800      	cmp	r0, #0
    3e8e:	d002      	beq.n	3e96 <_ZN8GAPClass9advertiseEv+0x46>
    return 0;
    3e90:	2000      	movs	r0, #0
  }

  _advertising = false;

  return 1;
}
    3e92:	b01b      	add	sp, #108	; 0x6c
    3e94:	bdf0      	pop	{r4, r5, r6, r7, pc}
  advertisingData[0] = 0x02;
    3e96:	2302      	movs	r3, #2
    3e98:	ae0a      	add	r6, sp, #40	; 0x28
    3e9a:	7033      	strb	r3, [r6, #0]
  advertisingData[2] = 0x06;
    3e9c:	2706      	movs	r7, #6
  advertisingData[1] = 0x01;
    3e9e:	2301      	movs	r3, #1
  if (_advertisedServiceUuid) {
    3ea0:	68a1      	ldr	r1, [r4, #8]
  advertisingData[1] = 0x01;
    3ea2:	7073      	strb	r3, [r6, #1]
  advertisingData[2] = 0x06;
    3ea4:	70b7      	strb	r7, [r6, #2]
  if (_advertisedServiceUuid) {
    3ea6:	2900      	cmp	r1, #0
    3ea8:	d06f      	beq.n	3f8a <_ZN8GAPClass9advertiseEv+0x13a>
    BLEUuid uuid(_advertisedServiceUuid);
    3eaa:	a812      	add	r0, sp, #72	; 0x48
    3eac:	f7fe fb8e 	bl	25cc <_ZN7BLEUuidC1EPKc>
    int uuidLen = uuid.length();
    3eb0:	a812      	add	r0, sp, #72	; 0x48
    3eb2:	f7fe fbc9 	bl	2648 <_ZNK7BLEUuid6lengthEv>
    advertisingData[3] = 1 + uuidLen;
    3eb6:	1c43      	adds	r3, r0, #1
    int uuidLen = uuid.length();
    3eb8:	0005      	movs	r5, r0
    advertisingData[3] = 1 + uuidLen;
    3eba:	70f3      	strb	r3, [r6, #3]
    advertisingData[4] = (uuidLen > 2) ? 0x06 : 0x02;
    3ebc:	2802      	cmp	r0, #2
    3ebe:	dc00      	bgt.n	3ec2 <_ZN8GAPClass9advertiseEv+0x72>
    3ec0:	3f04      	subs	r7, #4
    memcpy(&advertisingData[5], uuid.data(), uuidLen);
    3ec2:	a812      	add	r0, sp, #72	; 0x48
    advertisingData[4] = (uuidLen > 2) ? 0x06 : 0x02;
    3ec4:	7137      	strb	r7, [r6, #4]
    memcpy(&advertisingData[5], uuid.data(), uuidLen);
    3ec6:	f7fe fbbd 	bl	2644 <_ZNK7BLEUuid4dataEv>
    3eca:	002a      	movs	r2, r5
    3ecc:	0001      	movs	r1, r0
    memcpy(&advertisingData[5], _manufacturerData, _manufacturerDataLength);
    3ece:	2025      	movs	r0, #37	; 0x25
    3ed0:	ab02      	add	r3, sp, #8
    3ed2:	18c0      	adds	r0, r0, r3
    3ed4:	f005 fa45 	bl	9362 <memcpy>
    advertisingDataLen += (2 + _manufacturerDataLength);
    3ed8:	3505      	adds	r5, #5
    3eda:	b2ed      	uxtb	r5, r5
  if (_serviceData && _serviceDataLength > 0 && advertisingDataLen >= (_serviceDataLength + 4)) {
    3edc:	6a23      	ldr	r3, [r4, #32]
    3ede:	9306      	str	r3, [sp, #24]
    3ee0:	2b00      	cmp	r3, #0
    3ee2:	d01f      	beq.n	3f24 <_ZN8GAPClass9advertiseEv+0xd4>
    3ee4:	6a67      	ldr	r7, [r4, #36]	; 0x24
    3ee6:	2f00      	cmp	r7, #0
    3ee8:	dd1c      	ble.n	3f24 <_ZN8GAPClass9advertiseEv+0xd4>
    3eea:	1cfb      	adds	r3, r7, #3
    3eec:	42ab      	cmp	r3, r5
    3eee:	da19      	bge.n	3f24 <_ZN8GAPClass9advertiseEv+0xd4>
    advertisingData[advertisingDataLen++] = 0x16;
    3ef0:	2216      	movs	r2, #22
    memcpy(&advertisingData[advertisingDataLen], &_serviceDataUuid, sizeof(_serviceDataUuid));
    3ef2:	0021      	movs	r1, r4
    advertisingData[advertisingDataLen++] = _serviceDataLength + 3;
    3ef4:	b2fb      	uxtb	r3, r7
    3ef6:	9307      	str	r3, [sp, #28]
    3ef8:	3303      	adds	r3, #3
    3efa:	5573      	strb	r3, [r6, r5]
    advertisingData[advertisingDataLen++] = 0x16;
    3efc:	1ca8      	adds	r0, r5, #2
    advertisingData[advertisingDataLen++] = _serviceDataLength + 3;
    3efe:	1c6b      	adds	r3, r5, #1
    advertisingData[advertisingDataLen++] = 0x16;
    3f00:	b2db      	uxtb	r3, r3
    memcpy(&advertisingData[advertisingDataLen], &_serviceDataUuid, sizeof(_serviceDataUuid));
    3f02:	b2c0      	uxtb	r0, r0
    advertisingDataLen += sizeof(_serviceDataUuid);
    3f04:	3504      	adds	r5, #4
    advertisingData[advertisingDataLen++] = 0x16;
    3f06:	54f2      	strb	r2, [r6, r3]
    memcpy(&advertisingData[advertisingDataLen], &_serviceDataUuid, sizeof(_serviceDataUuid));
    3f08:	311c      	adds	r1, #28
    3f0a:	3a14      	subs	r2, #20
    advertisingDataLen += sizeof(_serviceDataUuid);
    3f0c:	b2ed      	uxtb	r5, r5
    memcpy(&advertisingData[advertisingDataLen], &_serviceDataUuid, sizeof(_serviceDataUuid));
    3f0e:	1830      	adds	r0, r6, r0
    3f10:	f005 fa27 	bl	9362 <memcpy>
    memcpy(&advertisingData[advertisingDataLen],_serviceData, _serviceDataLength);
    3f14:	1970      	adds	r0, r6, r5
    3f16:	003a      	movs	r2, r7
    3f18:	9906      	ldr	r1, [sp, #24]
    3f1a:	f005 fa22 	bl	9362 <memcpy>
    advertisingDataLen += _serviceDataLength;
    3f1e:	9b07      	ldr	r3, [sp, #28]
    3f20:	195d      	adds	r5, r3, r5
    3f22:	b2ed      	uxtb	r5, r5
  if (HCI.leSetAdvertisingData(advertisingDataLen, advertisingData) != 0) {
    3f24:	4f21      	ldr	r7, [pc, #132]	; (3fac <_ZN8GAPClass9advertiseEv+0x15c>)
    3f26:	aa0a      	add	r2, sp, #40	; 0x28
    3f28:	0029      	movs	r1, r5
    3f2a:	0038      	movs	r0, r7
    3f2c:	f000 fc4a 	bl	47c4 <_ZN8HCIClass20leSetAdvertisingDataEhPh>
    3f30:	2800      	cmp	r0, #0
    3f32:	d1ad      	bne.n	3e90 <_ZN8GAPClass9advertiseEv+0x40>
  if (_localName) {
    3f34:	6965      	ldr	r5, [r4, #20]
    3f36:	ae12      	add	r6, sp, #72	; 0x48
  uint8_t scanResponseDataLen = 0;
    3f38:	1e29      	subs	r1, r5, #0
  if (_localName) {
    3f3a:	d015      	beq.n	3f68 <_ZN8GAPClass9advertiseEv+0x118>
    int localNameLen = strlen(_localName);
    3f3c:	0028      	movs	r0, r5
    3f3e:	f005 ff91 	bl	9e64 <strlen>
    3f42:	0002      	movs	r2, r0
    if (localNameLen > 29) {
    3f44:	281d      	cmp	r0, #29
    3f46:	dd2d      	ble.n	3fa4 <_ZN8GAPClass9advertiseEv+0x154>
      scanResponseData[1] = 0x08;
    3f48:	2308      	movs	r3, #8
      localNameLen = 29;
    3f4a:	221d      	movs	r2, #29
      scanResponseData[1] = 0x08;
    3f4c:	7073      	strb	r3, [r6, #1]
    memcpy(&scanResponseData[2], _localName, localNameLen);
    3f4e:	2042      	movs	r0, #66	; 0x42
    scanResponseData[0] = 1 + localNameLen;
    3f50:	b2d3      	uxtb	r3, r2
    3f52:	9306      	str	r3, [sp, #24]
    3f54:	3301      	adds	r3, #1
    3f56:	7033      	strb	r3, [r6, #0]
    memcpy(&scanResponseData[2], _localName, localNameLen);
    3f58:	ab02      	add	r3, sp, #8
    3f5a:	0029      	movs	r1, r5
    3f5c:	18c0      	adds	r0, r0, r3
    3f5e:	f005 fa00 	bl	9362 <memcpy>
    scanResponseDataLen += (2 + localNameLen);
    3f62:	9b06      	ldr	r3, [sp, #24]
    3f64:	1c9d      	adds	r5, r3, #2
    3f66:	b2e9      	uxtb	r1, r5
  if (HCI.leSetScanResponseData(scanResponseDataLen, scanResponseData) != 0) {
    3f68:	0032      	movs	r2, r6
    3f6a:	0038      	movs	r0, r7
    3f6c:	f000 fc46 	bl	47fc <_ZN8HCIClass21leSetScanResponseDataEhPh>
    3f70:	2800      	cmp	r0, #0
    3f72:	d000      	beq.n	3f76 <_ZN8GAPClass9advertiseEv+0x126>
    3f74:	e78c      	b.n	3e90 <_ZN8GAPClass9advertiseEv+0x40>
  if (HCI.leSetAdvertiseEnable(0x01) != 0) {
    3f76:	2101      	movs	r1, #1
    3f78:	0038      	movs	r0, r7
    3f7a:	f000 fc5b 	bl	4834 <_ZN8HCIClass20leSetAdvertiseEnableEh>
    3f7e:	2800      	cmp	r0, #0
    3f80:	d000      	beq.n	3f84 <_ZN8GAPClass9advertiseEv+0x134>
    3f82:	e785      	b.n	3e90 <_ZN8GAPClass9advertiseEv+0x40>
  _advertising = false;
    3f84:	7120      	strb	r0, [r4, #4]
  return 1;
    3f86:	3001      	adds	r0, #1
    3f88:	e783      	b.n	3e92 <_ZN8GAPClass9advertiseEv+0x42>
  } else if (_manufacturerData && _manufacturerDataLength) {
    3f8a:	68e1      	ldr	r1, [r4, #12]
  advertisingDataLen += 3;
    3f8c:	2503      	movs	r5, #3
  } else if (_manufacturerData && _manufacturerDataLength) {
    3f8e:	2900      	cmp	r1, #0
    3f90:	d0a4      	beq.n	3edc <_ZN8GAPClass9advertiseEv+0x8c>
    3f92:	6922      	ldr	r2, [r4, #16]
    3f94:	2a00      	cmp	r2, #0
    3f96:	d0a1      	beq.n	3edc <_ZN8GAPClass9advertiseEv+0x8c>
    advertisingData[3] = 1 + _manufacturerDataLength;
    3f98:	b2d5      	uxtb	r5, r2
    3f9a:	1c6b      	adds	r3, r5, #1
    3f9c:	70f3      	strb	r3, [r6, #3]
    advertisingData[4] = 0xff;
    3f9e:	23ff      	movs	r3, #255	; 0xff
    3fa0:	7133      	strb	r3, [r6, #4]
    3fa2:	e794      	b.n	3ece <_ZN8GAPClass9advertiseEv+0x7e>
      scanResponseData[1] = 0x09;
    3fa4:	2309      	movs	r3, #9
    3fa6:	7073      	strb	r3, [r6, #1]
    3fa8:	e7d1      	b.n	3f4e <_ZN8GAPClass9advertiseEv+0xfe>
    3faa:	46c0      	nop			; (mov r8, r8)
    3fac:	20000480 	.word	0x20000480

00003fb0 <_ZN8GAPClass24setAdvertisedServiceDataEtPKhi>:
  _connectable = connectable;
}

void GAPClass::setAdvertisedServiceData(uint16_t uuid, const uint8_t data[], int length)
{
  _serviceDataUuid = uuid;
    3fb0:	8381      	strh	r1, [r0, #28]
  _serviceData = data;
    3fb2:	6202      	str	r2, [r0, #32]
  _serviceDataLength = length;
    3fb4:	6243      	str	r3, [r0, #36]	; 0x24
}
    3fb6:	4770      	bx	lr

00003fb8 <_GLOBAL__sub_I__ZN8GAPClassC2Ev>:

GAPClass GAP;
    3fb8:	b510      	push	{r4, lr}
    3fba:	4c05      	ldr	r4, [pc, #20]	; (3fd0 <_GLOBAL__sub_I__ZN8GAPClassC2Ev+0x18>)
    3fbc:	0020      	movs	r0, r4
    3fbe:	f7ff ff2f 	bl	3e20 <_ZN8GAPClassC1Ev>
    3fc2:	4a04      	ldr	r2, [pc, #16]	; (3fd4 <_GLOBAL__sub_I__ZN8GAPClassC2Ev+0x1c>)
    3fc4:	4904      	ldr	r1, [pc, #16]	; (3fd8 <_GLOBAL__sub_I__ZN8GAPClassC2Ev+0x20>)
    3fc6:	0020      	movs	r0, r4
    3fc8:	f003 fa16 	bl	73f8 <__aeabi_atexit>
    3fcc:	bd10      	pop	{r4, pc}
    3fce:	46c0      	nop			; (mov r8, r8)
    3fd0:	200002ec 	.word	0x200002ec
    3fd4:	20000000 	.word	0x20000000
    3fd8:	00003e11 	.word	0x00003e11

00003fdc <_ZN9GATTClassC1Ev>:

#include "BLEProperty.h"

#include "GATT.h"

GATTClass::GATTClass() :
    3fdc:	b5f0      	push	{r4, r5, r6, r7, lr}
  _genericAccessService("1800"),
  _deviceNameCharacteristic("2a00", BLERead, 20),
  _appearanceCharacteristic("2a01", BLERead, 2),
  _genericAttributeService("1801"),
  _servicesChangedCharacteristic("2a05", BLEIndicate, 4)
    3fde:	0004      	movs	r4, r0
  _last(NULL)
    3fe0:	2700      	movs	r7, #0
GATTClass::GATTClass() :
    3fe2:	0006      	movs	r6, r0
  _servicesChangedCharacteristic("2a05", BLEIndicate, 4)
    3fe4:	4b22      	ldr	r3, [pc, #136]	; (4070 <_ZN9GATTClassC1Ev+0x94>)
    3fe6:	3410      	adds	r4, #16
    3fe8:	3308      	adds	r3, #8
GATTClass::GATTClass() :
    3fea:	b087      	sub	sp, #28
  _servicesChangedCharacteristic("2a05", BLEIndicate, 4)
    3fec:	6003      	str	r3, [r0, #0]
    3fee:	6047      	str	r7, [r0, #4]
    3ff0:	6087      	str	r7, [r0, #8]
    3ff2:	60c7      	str	r7, [r0, #12]
    3ff4:	491f      	ldr	r1, [pc, #124]	; (4074 <_ZN9GATTClassC1Ev+0x98>)
    3ff6:	0020      	movs	r0, r4
    3ff8:	f7fe fe4e 	bl	2c98 <_ZN15BLELocalServiceC1EPKc>
    3ffc:	0033      	movs	r3, r6
    3ffe:	3340      	adds	r3, #64	; 0x40
    4000:	9303      	str	r3, [sp, #12]
    4002:	9700      	str	r7, [sp, #0]
    4004:	2314      	movs	r3, #20
    4006:	2202      	movs	r2, #2
    4008:	491b      	ldr	r1, [pc, #108]	; (4078 <_ZN9GATTClassC1Ev+0x9c>)
    400a:	9803      	ldr	r0, [sp, #12]
    400c:	f7fe fbc0 	bl	2790 <_ZN22BLELocalCharacteristicC1EPKchib>
    4010:	0033      	movs	r3, r6
    4012:	3394      	adds	r3, #148	; 0x94
    4014:	9304      	str	r3, [sp, #16]
    4016:	0035      	movs	r5, r6
    4018:	2302      	movs	r3, #2
    401a:	35e8      	adds	r5, #232	; 0xe8
    401c:	001a      	movs	r2, r3
    401e:	9700      	str	r7, [sp, #0]
    4020:	4916      	ldr	r1, [pc, #88]	; (407c <_ZN9GATTClassC1Ev+0xa0>)
    4022:	9804      	ldr	r0, [sp, #16]
    4024:	f7fe fbb4 	bl	2790 <_ZN22BLELocalCharacteristicC1EPKchib>
    4028:	4915      	ldr	r1, [pc, #84]	; (4080 <_ZN9GATTClassC1Ev+0xa4>)
    402a:	0028      	movs	r0, r5
    402c:	f7fe fe34 	bl	2c98 <_ZN15BLELocalServiceC1EPKc>
    4030:	0033      	movs	r3, r6
    4032:	3319      	adds	r3, #25
    4034:	33ff      	adds	r3, #255	; 0xff
    4036:	9305      	str	r3, [sp, #20]
    4038:	2220      	movs	r2, #32
    403a:	2304      	movs	r3, #4
    403c:	4911      	ldr	r1, [pc, #68]	; (4084 <_ZN9GATTClassC1Ev+0xa8>)
    403e:	9700      	str	r7, [sp, #0]
    4040:	9805      	ldr	r0, [sp, #20]
    4042:	f7fe fba5 	bl	2790 <_ZN22BLELocalCharacteristicC1EPKchib>
{
  _genericAccessService.retain();
    4046:	0020      	movs	r0, r4
    4048:	f7fe f88b 	bl	2162 <_ZN12BLEAttribute6retainEv>
  _genericAttributeService.retain();
    404c:	0028      	movs	r0, r5
    404e:	f7fe f888 	bl	2162 <_ZN12BLEAttribute6retainEv>

  _genericAccessService.addCharacteristic(&_deviceNameCharacteristic);
    4052:	9903      	ldr	r1, [sp, #12]
    4054:	0020      	movs	r0, r4
    4056:	f7fe fe48 	bl	2cea <_ZN15BLELocalService17addCharacteristicEP22BLELocalCharacteristic>
  _genericAccessService.addCharacteristic(&_appearanceCharacteristic);
    405a:	9904      	ldr	r1, [sp, #16]
    405c:	0020      	movs	r0, r4
    405e:	f7fe fe44 	bl	2cea <_ZN15BLELocalService17addCharacteristicEP22BLELocalCharacteristic>

  _genericAttributeService.addCharacteristic(&_servicesChangedCharacteristic);
    4062:	0028      	movs	r0, r5
    4064:	9905      	ldr	r1, [sp, #20]
    4066:	f7fe fe40 	bl	2cea <_ZN15BLELocalService17addCharacteristicEP22BLELocalCharacteristic>
}
    406a:	0030      	movs	r0, r6
    406c:	b007      	add	sp, #28
    406e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4070:	0000b820 	.word	0x0000b820
    4074:	0000b804 	.word	0x0000b804
    4078:	0000b809 	.word	0x0000b809
    407c:	0000b80e 	.word	0x0000b80e
    4080:	0000b813 	.word	0x0000b813
    4084:	0000b818 	.word	0x0000b818

00004088 <_ZN9GATTClass13setAppearanceEt>:
{
  _deviceNameCharacteristic.writeValue(deviceName);
}

void GATTClass::setAppearance(uint16_t appearance)
{
    4088:	b507      	push	{r0, r1, r2, lr}
    408a:	466b      	mov	r3, sp
    408c:	80d9      	strh	r1, [r3, #6]
    408e:	3306      	adds	r3, #6
  _appearanceCharacteristic.writeValue((uint8_t*)&appearance, sizeof(appearance));
    4090:	3094      	adds	r0, #148	; 0x94
    4092:	2202      	movs	r2, #2
    4094:	0019      	movs	r1, r3
    4096:	f7fe fae7 	bl	2668 <_ZN22BLELocalCharacteristic10writeValueEPKhi>
}
    409a:	bd07      	pop	{r0, r1, r2, pc}

0000409c <_ZNK9GATTClass14attributeCountEv>:
  }
}

unsigned int GATTClass::attributeCount() const
{
  return _attributes.size();
    409c:	6840      	ldr	r0, [r0, #4]
}
    409e:	4770      	bx	lr

000040a0 <_ZN13BLELinkedListIP12BLEAttributeE5clearEv>:
template <typename T> void BLELinkedList<T>::clear()
    40a0:	b570      	push	{r4, r5, r6, lr}
  for (unsigned int i = 0; i < _size; i++) {
    40a2:	2500      	movs	r5, #0
template <typename T> void BLELinkedList<T>::clear()
    40a4:	0004      	movs	r4, r0
  BLELinkedListNode<T>* itemNode = _root;
    40a6:	6840      	ldr	r0, [r0, #4]
  for (unsigned int i = 0; i < _size; i++) {
    40a8:	6823      	ldr	r3, [r4, #0]
    40aa:	429d      	cmp	r5, r3
    40ac:	d205      	bcs.n	40ba <_ZN13BLELinkedListIP12BLEAttributeE5clearEv+0x1a>
    itemNode = itemNode->next;
    40ae:	6846      	ldr	r6, [r0, #4]
  for (unsigned int i = 0; i < _size; i++) {
    40b0:	3501      	adds	r5, #1
    delete n;
    40b2:	f001 f9cd 	bl	5450 <_ZdlPv>
    itemNode = itemNode->next;
    40b6:	0030      	movs	r0, r6
  for (unsigned int i = 0; i < _size; i++) {
    40b8:	e7f6      	b.n	40a8 <_ZN13BLELinkedListIP12BLEAttributeE5clearEv+0x8>
  _size = 0;
    40ba:	2300      	movs	r3, #0
    40bc:	6023      	str	r3, [r4, #0]
  _root = NULL;
    40be:	6063      	str	r3, [r4, #4]
  _last = NULL;
    40c0:	60a3      	str	r3, [r4, #8]
}
    40c2:	bd70      	pop	{r4, r5, r6, pc}

000040c4 <_ZN9GATTClass3endEv>:
{
    40c4:	b510      	push	{r4, lr}
  _attributes.clear();
    40c6:	3004      	adds	r0, #4
    40c8:	f7ff ffea 	bl	40a0 <_ZN13BLELinkedListIP12BLEAttributeE5clearEv>
}
    40cc:	bd10      	pop	{r4, pc}

000040ce <_ZNK13BLELinkedListIP12BLEAttributeE3getEj>:
  if (index >= _size) {
    40ce:	6802      	ldr	r2, [r0, #0]
    return T();
    40d0:	2300      	movs	r3, #0
  if (index >= _size) {
    40d2:	428a      	cmp	r2, r1
    40d4:	d907      	bls.n	40e6 <_ZNK13BLELinkedListIP12BLEAttributeE3getEj+0x18>
  for (unsigned int i = 0; i < index; i++) {
    40d6:	2200      	movs	r2, #0
  BLELinkedListNode<T>* itemNode = _root;
    40d8:	6843      	ldr	r3, [r0, #4]
  for (unsigned int i = 0; i < index; i++) {
    40da:	428a      	cmp	r2, r1
    40dc:	d002      	beq.n	40e4 <_ZNK13BLELinkedListIP12BLEAttributeE3getEj+0x16>
    itemNode = itemNode->next;
    40de:	685b      	ldr	r3, [r3, #4]
  for (unsigned int i = 0; i < index; i++) {
    40e0:	3201      	adds	r2, #1
    40e2:	e7fa      	b.n	40da <_ZNK13BLELinkedListIP12BLEAttributeE3getEj+0xc>
  return itemNode->data;
    40e4:	681b      	ldr	r3, [r3, #0]
}
    40e6:	0018      	movs	r0, r3
    40e8:	4770      	bx	lr

000040ea <_ZNK9GATTClass9attributeEj>:

BLEAttribute* GATTClass::attribute(unsigned int index) const
{
    40ea:	b510      	push	{r4, lr}
  return _attributes.get(index);
    40ec:	3004      	adds	r0, #4
    40ee:	f7ff ffee 	bl	40ce <_ZNK13BLELinkedListIP12BLEAttributeE3getEj>
}
    40f2:	bd10      	pop	{r4, pc}

000040f4 <_ZNK9GATTClass28serviceUuidForCharacteristicEP22BLELocalCharacteristic>:

uint16_t GATTClass::serviceUuidForCharacteristic(BLELocalCharacteristic* characteristic) const
{
    40f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint16_t serviceUuid = 0x0000;

  BLELocalService* lastService = NULL;

  for (unsigned int i = 0; i < attributeCount(); i++) {
    40f6:	2500      	movs	r5, #0
{
    40f8:	0007      	movs	r7, r0
  BLELocalService* lastService = NULL;
    40fa:	002c      	movs	r4, r5
{
    40fc:	9101      	str	r1, [sp, #4]
  for (unsigned int i = 0; i < attributeCount(); i++) {
    40fe:	687b      	ldr	r3, [r7, #4]
    4100:	429d      	cmp	r5, r3
    4102:	d20e      	bcs.n	4122 <_ZNK9GATTClass28serviceUuidForCharacteristicEP22BLELocalCharacteristic+0x2e>
  return _attributes.get(index);
    4104:	0029      	movs	r1, r5
    4106:	1d38      	adds	r0, r7, #4
    4108:	f7ff ffe1 	bl	40ce <_ZNK13BLELinkedListIP12BLEAttributeE3getEj>
    BLEAttribute* a = attribute(i);
    uint16_t attributeType = a->type();
    410c:	6803      	ldr	r3, [r0, #0]
  return _attributes.get(index);
    410e:	0006      	movs	r6, r0
    uint16_t attributeType = a->type();
    4110:	689b      	ldr	r3, [r3, #8]
    4112:	4798      	blx	r3

    if (attributeType == BLETypeService) {
    4114:	23a0      	movs	r3, #160	; 0xa0
    4116:	019b      	lsls	r3, r3, #6
    4118:	4298      	cmp	r0, r3
    411a:	d00d      	beq.n	4138 <_ZNK9GATTClass28serviceUuidForCharacteristicEP22BLELocalCharacteristic+0x44>
      lastService = (BLELocalService*)a;
    } else if (a == characteristic) {
    411c:	9b01      	ldr	r3, [sp, #4]
    411e:	42b3      	cmp	r3, r6
    4120:	d10b      	bne.n	413a <_ZNK9GATTClass28serviceUuidForCharacteristicEP22BLELocalCharacteristic+0x46>
  uint16_t serviceUuid = 0x0000;
    4122:	1e20      	subs	r0, r4, #0
      break;
    }
  }

  if (lastService) {
    4124:	d007      	beq.n	4136 <_ZNK9GATTClass28serviceUuidForCharacteristicEP22BLELocalCharacteristic+0x42>
    if (lastService->uuidLength() == 2) {
    4126:	f7fe f817 	bl	2158 <_ZNK12BLEAttribute10uuidLengthEv>
    412a:	2802      	cmp	r0, #2
    412c:	d107      	bne.n	413e <_ZNK9GATTClass28serviceUuidForCharacteristicEP22BLELocalCharacteristic+0x4a>
      serviceUuid = *(uint16_t*)(lastService->uuidData());
    412e:	0020      	movs	r0, r4
    4130:	f7fe f80d 	bl	214e <_ZNK12BLEAttribute8uuidDataEv>
    4134:	8800      	ldrh	r0, [r0, #0]
      serviceUuid = *(uint16_t*)(lastService->uuidData() + 10);
    }
  }

  return serviceUuid;
}
    4136:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    4138:	0034      	movs	r4, r6
  for (unsigned int i = 0; i < attributeCount(); i++) {
    413a:	3501      	adds	r5, #1
    413c:	e7df      	b.n	40fe <_ZNK9GATTClass28serviceUuidForCharacteristicEP22BLELocalCharacteristic+0xa>
      serviceUuid = *(uint16_t*)(lastService->uuidData() + 10);
    413e:	0020      	movs	r0, r4
    4140:	f7fe f805 	bl	214e <_ZNK12BLEAttribute8uuidDataEv>
    4144:	8940      	ldrh	r0, [r0, #10]
    4146:	e7f6      	b.n	4136 <_ZNK9GATTClass28serviceUuidForCharacteristicEP22BLELocalCharacteristic+0x42>

00004148 <_ZN9GATTClass15clearAttributesEv>:

  service->setHandles(startHandle, attributeCount());
}

void GATTClass::clearAttributes()
{
    4148:	b570      	push	{r4, r5, r6, lr}
    414a:	0006      	movs	r6, r0
  for (unsigned int i = 0; i < attributeCount(); i++) {
    414c:	2400      	movs	r4, #0
    414e:	6873      	ldr	r3, [r6, #4]
    4150:	1d30      	adds	r0, r6, #4
    4152:	429c      	cmp	r4, r3
    4154:	d20f      	bcs.n	4176 <_ZN9GATTClass15clearAttributesEv+0x2e>
  return _attributes.get(index);
    4156:	0021      	movs	r1, r4
    4158:	f7ff ffb9 	bl	40ce <_ZNK13BLELinkedListIP12BLEAttributeE3getEj>
    415c:	0005      	movs	r5, r0
    BLEAttribute* a = attribute(i);

    if (a->release() <= 0) {
    415e:	f7fe f805 	bl	216c <_ZN12BLEAttribute7releaseEv>
    4162:	2800      	cmp	r0, #0
    4164:	dc05      	bgt.n	4172 <_ZN9GATTClass15clearAttributesEv+0x2a>
      delete a;
    4166:	2d00      	cmp	r5, #0
    4168:	d003      	beq.n	4172 <_ZN9GATTClass15clearAttributesEv+0x2a>
    416a:	682b      	ldr	r3, [r5, #0]
    416c:	0028      	movs	r0, r5
    416e:	685b      	ldr	r3, [r3, #4]
    4170:	4798      	blx	r3
  for (unsigned int i = 0; i < attributeCount(); i++) {
    4172:	3401      	adds	r4, #1
    4174:	e7eb      	b.n	414e <_ZN9GATTClass15clearAttributesEv+0x6>
    }
  }

  _attributes.clear();
    4176:	f7ff ff93 	bl	40a0 <_ZN13BLELinkedListIP12BLEAttributeE5clearEv>
}
    417a:	bd70      	pop	{r4, r5, r6, pc}

0000417c <_ZN13BLELinkedListIP12BLEAttributeE3addES1_>:
template <typename T> void BLELinkedList<T>::add(T item)
    417c:	b570      	push	{r4, r5, r6, lr}
    417e:	0004      	movs	r4, r0
  BLELinkedListNode<T>* itemNode = new BLELinkedListNode<T>();
    4180:	2008      	movs	r0, #8
template <typename T> void BLELinkedList<T>::add(T item)
    4182:	000d      	movs	r5, r1
  BLELinkedListNode<T>* itemNode = new BLELinkedListNode<T>();
    4184:	f001 f960 	bl	5448 <_Znwj>
    4188:	2300      	movs	r3, #0
    418a:	6043      	str	r3, [r0, #4]
  if (_root == NULL) {
    418c:	6863      	ldr	r3, [r4, #4]
  itemNode->data = item;
    418e:	6005      	str	r5, [r0, #0]
  if (_root == NULL) {
    4190:	2b00      	cmp	r3, #0
    4192:	d105      	bne.n	41a0 <_ZN13BLELinkedListIP12BLEAttributeE3addES1_+0x24>
    _root = itemNode;
    4194:	6060      	str	r0, [r4, #4]
  _size++;
    4196:	6823      	ldr	r3, [r4, #0]
  _last = itemNode;
    4198:	60a0      	str	r0, [r4, #8]
  _size++;
    419a:	3301      	adds	r3, #1
    419c:	6023      	str	r3, [r4, #0]
}
    419e:	bd70      	pop	{r4, r5, r6, pc}
    _last->next = itemNode;
    41a0:	68a3      	ldr	r3, [r4, #8]
    41a2:	6058      	str	r0, [r3, #4]
    41a4:	e7f7      	b.n	4196 <_ZN13BLELinkedListIP12BLEAttributeE3addES1_+0x1a>

000041a6 <_ZN9GATTClass10addServiceEP15BLELocalService>:
{
    41a6:	b5f0      	push	{r4, r5, r6, r7, lr}
    41a8:	0006      	movs	r6, r0
    41aa:	000d      	movs	r5, r1
  for (unsigned int i = 0; i < service->characteristicCount(); i++) {
    41ac:	2700      	movs	r7, #0
{
    41ae:	b085      	sub	sp, #20
  service->retain();
    41b0:	0008      	movs	r0, r1
    41b2:	f7fd ffd6 	bl	2162 <_ZN12BLEAttribute6retainEv>
  _attributes.add(service);
    41b6:	1d33      	adds	r3, r6, #4
    41b8:	0018      	movs	r0, r3
    41ba:	0029      	movs	r1, r5
    41bc:	9301      	str	r3, [sp, #4]
    41be:	f7ff ffdd 	bl	417c <_ZN13BLELinkedListIP12BLEAttributeE3addES1_>
  uint16_t startHandle = attributeCount();
    41c2:	88b3      	ldrh	r3, [r6, #4]
    41c4:	9303      	str	r3, [sp, #12]
  for (unsigned int i = 0; i < service->characteristicCount(); i++) {
    41c6:	0028      	movs	r0, r5
    41c8:	f7fe fd7f 	bl	2cca <_ZNK15BLELocalService19characteristicCountEv>
    41cc:	4287      	cmp	r7, r0
    41ce:	d22e      	bcs.n	422e <_ZN9GATTClass10addServiceEP15BLELocalService+0x88>
    BLELocalCharacteristic* characteristic = service->characteristic(i);
    41d0:	0039      	movs	r1, r7
    41d2:	0028      	movs	r0, r5
    41d4:	f7fe fd7b 	bl	2cce <_ZNK15BLELocalService14characteristicEj>
    41d8:	0004      	movs	r4, r0
    characteristic->retain();
    41da:	f7fd ffc2 	bl	2162 <_ZN12BLEAttribute6retainEv>
    _attributes.add(characteristic);
    41de:	0021      	movs	r1, r4
    41e0:	9801      	ldr	r0, [sp, #4]
    41e2:	f7ff ffcb 	bl	417c <_ZN13BLELinkedListIP12BLEAttributeE3addES1_>
    characteristic->setHandle(attributeCount());
    41e6:	88b1      	ldrh	r1, [r6, #4]
    41e8:	0020      	movs	r0, r4
    41ea:	f7fe faa3 	bl	2734 <_ZN22BLELocalCharacteristic9setHandleEt>
    _attributes.add(characteristic);
    41ee:	0021      	movs	r1, r4
    41f0:	9801      	ldr	r0, [sp, #4]
    41f2:	f7ff ffc3 	bl	417c <_ZN13BLELinkedListIP12BLEAttributeE3addES1_>
    for (unsigned int j = 0; j < characteristic->descriptorCount(); j++) {
    41f6:	2300      	movs	r3, #0
    41f8:	0020      	movs	r0, r4
    41fa:	9300      	str	r3, [sp, #0]
    41fc:	f7fe faa2 	bl	2744 <_ZNK22BLELocalCharacteristic15descriptorCountEv>
    4200:	9b00      	ldr	r3, [sp, #0]
    4202:	4283      	cmp	r3, r0
    4204:	d211      	bcs.n	422a <_ZN9GATTClass10addServiceEP15BLELocalService+0x84>
      BLELocalDescriptor* descriptor = characteristic->descriptor(j);
    4206:	0019      	movs	r1, r3
    4208:	0020      	movs	r0, r4
    420a:	f7fe fa9d 	bl	2748 <_ZNK22BLELocalCharacteristic10descriptorEj>
    420e:	9002      	str	r0, [sp, #8]
      descriptor->retain();
    4210:	f7fd ffa7 	bl	2162 <_ZN12BLEAttribute6retainEv>
      _attributes.add(descriptor);
    4214:	9902      	ldr	r1, [sp, #8]
    4216:	9801      	ldr	r0, [sp, #4]
    4218:	f7ff ffb0 	bl	417c <_ZN13BLELinkedListIP12BLEAttributeE3addES1_>
      descriptor->setHandle(attributeCount());
    421c:	88b1      	ldrh	r1, [r6, #4]
    421e:	9802      	ldr	r0, [sp, #8]
    4220:	f7fe fc00 	bl	2a24 <_ZN18BLELocalDescriptor9setHandleEt>
    for (unsigned int j = 0; j < characteristic->descriptorCount(); j++) {
    4224:	9b00      	ldr	r3, [sp, #0]
    4226:	3301      	adds	r3, #1
    4228:	e7e6      	b.n	41f8 <_ZN9GATTClass10addServiceEP15BLELocalService+0x52>
  for (unsigned int i = 0; i < service->characteristicCount(); i++) {
    422a:	3701      	adds	r7, #1
    422c:	e7cb      	b.n	41c6 <_ZN9GATTClass10addServiceEP15BLELocalService+0x20>
  service->setHandles(startHandle, attributeCount());
    422e:	6872      	ldr	r2, [r6, #4]
    4230:	9903      	ldr	r1, [sp, #12]
    4232:	b292      	uxth	r2, r2
    4234:	0028      	movs	r0, r5
    4236:	f7fe fd41 	bl	2cbc <_ZN15BLELocalService10setHandlesEtt>
}
    423a:	b005      	add	sp, #20
    423c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

00004240 <_ZN9GATTClass5beginEv>:
{
    4240:	b510      	push	{r4, lr}
    4242:	0004      	movs	r4, r0
  _deviceNameCharacteristic.writeValue(deviceName);
    4244:	490a      	ldr	r1, [pc, #40]	; (4270 <_ZN9GATTClass5beginEv+0x30>)
    4246:	3040      	adds	r0, #64	; 0x40
    4248:	f7fe fa68 	bl	271c <_ZN22BLELocalCharacteristic10writeValueEPKc>
  setAppearance(0x000);
    424c:	2100      	movs	r1, #0
    424e:	0020      	movs	r0, r4
    4250:	f7ff ff1a 	bl	4088 <_ZN9GATTClass13setAppearanceEt>
  clearAttributes();
    4254:	0020      	movs	r0, r4
    4256:	f7ff ff77 	bl	4148 <_ZN9GATTClass15clearAttributesEv>
  addService(&_genericAccessService);
    425a:	0021      	movs	r1, r4
    425c:	0020      	movs	r0, r4
    425e:	3110      	adds	r1, #16
    4260:	f7ff ffa1 	bl	41a6 <_ZN9GATTClass10addServiceEP15BLELocalService>
  addService(&_genericAttributeService);
    4264:	0021      	movs	r1, r4
    4266:	0020      	movs	r0, r4
    4268:	31e8      	adds	r1, #232	; 0xe8
    426a:	f7ff ff9c 	bl	41a6 <_ZN9GATTClass10addServiceEP15BLELocalService>
}
    426e:	bd10      	pop	{r4, pc}
    4270:	0000b7fc 	.word	0x0000b7fc

00004274 <_ZN9GATTClass10addServiceER10BLEService>:
{
    4274:	b510      	push	{r4, lr}
    4276:	0004      	movs	r4, r0
  BLELocalService* localService = service.local();
    4278:	0008      	movs	r0, r1
    427a:	f7fe f8ea 	bl	2452 <_ZN10BLEService5localEv>
    427e:	1e01      	subs	r1, r0, #0
  if (localService) {
    4280:	d002      	beq.n	4288 <_ZN9GATTClass10addServiceER10BLEService+0x14>
    addService(localService);
    4282:	0020      	movs	r0, r4
    4284:	f7ff ff8f 	bl	41a6 <_ZN9GATTClass10addServiceEP15BLELocalService>
}
    4288:	bd10      	pop	{r4, pc}
	...

0000428c <_GLOBAL__sub_I__ZN9GATTClassC2Ev>:

GATTClass GATT;
    428c:	b510      	push	{r4, lr}
    428e:	4c05      	ldr	r4, [pc, #20]	; (42a4 <_GLOBAL__sub_I__ZN9GATTClassC2Ev+0x18>)
    4290:	0020      	movs	r0, r4
    4292:	f7ff fea3 	bl	3fdc <_ZN9GATTClassC1Ev>
    4296:	4a04      	ldr	r2, [pc, #16]	; (42a8 <_GLOBAL__sub_I__ZN9GATTClassC2Ev+0x1c>)
    4298:	4904      	ldr	r1, [pc, #16]	; (42ac <_GLOBAL__sub_I__ZN9GATTClassC2Ev+0x20>)
    429a:	0020      	movs	r0, r4
    429c:	f003 f8ac 	bl	73f8 <__aeabi_atexit>
    42a0:	bd10      	pop	{r4, pc}
    42a2:	46c0      	nop			; (mov r8, r8)
    42a4:	20000314 	.word	0x20000314
    42a8:	20000000 	.word	0x20000000
    42ac:	000042b1 	.word	0x000042b1

000042b0 <_ZN9GATTClassD1Ev>:
GATTClass::~GATTClass()
    42b0:	b510      	push	{r4, lr}
    42b2:	0004      	movs	r4, r0
    42b4:	4b0f      	ldr	r3, [pc, #60]	; (42f4 <_ZN9GATTClassD1Ev+0x44>)
    42b6:	3308      	adds	r3, #8
    42b8:	6003      	str	r3, [r0, #0]
  clearAttributes();
    42ba:	f7ff ff45 	bl	4148 <_ZN9GATTClass15clearAttributesEv>
GATTClass::~GATTClass()
    42be:	0020      	movs	r0, r4
    42c0:	3019      	adds	r0, #25
    42c2:	30ff      	adds	r0, #255	; 0xff
    42c4:	f7fe fab8 	bl	2838 <_ZN22BLELocalCharacteristicD1Ev>
    42c8:	0020      	movs	r0, r4
    42ca:	30e8      	adds	r0, #232	; 0xe8
    42cc:	f7fe fd42 	bl	2d54 <_ZN15BLELocalServiceD1Ev>
    42d0:	0020      	movs	r0, r4
    42d2:	3094      	adds	r0, #148	; 0x94
    42d4:	f7fe fab0 	bl	2838 <_ZN22BLELocalCharacteristicD1Ev>
    42d8:	0020      	movs	r0, r4
    42da:	3040      	adds	r0, #64	; 0x40
    42dc:	f7fe faac 	bl	2838 <_ZN22BLELocalCharacteristicD1Ev>
    42e0:	0020      	movs	r0, r4
    42e2:	3010      	adds	r0, #16
    42e4:	f7fe fd36 	bl	2d54 <_ZN15BLELocalServiceD1Ev>
    42e8:	1d20      	adds	r0, r4, #4
  clear();
    42ea:	f7ff fed9 	bl	40a0 <_ZN13BLELinkedListIP12BLEAttributeE5clearEv>
}
    42ee:	0020      	movs	r0, r4
    42f0:	bd10      	pop	{r4, pc}
    42f2:	46c0      	nop			; (mov r8, r8)
    42f4:	0000b820 	.word	0x0000b820

000042f8 <_ZN9GATTClassD0Ev>:
GATTClass::~GATTClass()
    42f8:	b510      	push	{r4, lr}
    42fa:	0004      	movs	r4, r0
}
    42fc:	f7ff ffd8 	bl	42b0 <_ZN9GATTClassD1Ev>
    4300:	0020      	movs	r0, r4
    4302:	f001 f8a5 	bl	5450 <_ZdlPv>
    4306:	0020      	movs	r0, r4
    4308:	bd10      	pop	{r4, pc}

0000430a <_ZN8HCIClassD1Ev>:
{
}

HCIClass::~HCIClass()
{
}
    430a:	4770      	bx	lr

0000430c <_ZN8HCIClassD0Ev>:
HCIClass::~HCIClass()
    430c:	b510      	push	{r4, lr}
    430e:	0004      	movs	r4, r0
}
    4310:	f001 f89e 	bl	5450 <_ZdlPv>
    4314:	0020      	movs	r0, r4
    4316:	bd10      	pop	{r4, pc}

00004318 <_ZN8HCIClass5beginEv>:

int HCIClass::begin()
{
  _recvIndex = 0;
    4318:	2300      	movs	r3, #0
{
    431a:	b510      	push	{r4, lr}
  _recvIndex = 0;
    431c:	6083      	str	r3, [r0, #8]

  return HCITransport.begin();
    431e:	4b03      	ldr	r3, [pc, #12]	; (432c <_ZN8HCIClass5beginEv+0x14>)
    4320:	6818      	ldr	r0, [r3, #0]
    4322:	6803      	ldr	r3, [r0, #0]
    4324:	681b      	ldr	r3, [r3, #0]
    4326:	4798      	blx	r3
}
    4328:	bd10      	pop	{r4, pc}
    432a:	46c0      	nop			; (mov r8, r8)
    432c:	0000b88c 	.word	0x0000b88c

00004330 <_ZN8HCIClass3endEv>:

void HCIClass::end()
{
  HCITransport.end();
    4330:	4b03      	ldr	r3, [pc, #12]	; (4340 <_ZN8HCIClass3endEv+0x10>)
{
    4332:	b510      	push	{r4, lr}
  HCITransport.end();
    4334:	6818      	ldr	r0, [r3, #0]
    4336:	6803      	ldr	r3, [r0, #0]
    4338:	685b      	ldr	r3, [r3, #4]
    433a:	4798      	blx	r3
}
    433c:	bd10      	pop	{r4, pc}
    433e:	46c0      	nop			; (mov r8, r8)
    4340:	0000b88c 	.word	0x0000b88c

00004344 <_ZN8HCIClass17handleNumCompPktsEtt>:
    sendAclPkt(aclHdr->handle & 0x0fff, 0x0005, sizeof(l2capRejectCid), &l2capRejectCid);
  }
}

void HCIClass::handleNumCompPkts(uint16_t /*handle*/, uint16_t numPkts)
{
    4344:	30ff      	adds	r0, #255	; 0xff
  if (numPkts && _pendingPkt > numPkts) {
    4346:	2a00      	cmp	r2, #0
    4348:	d005      	beq.n	4356 <_ZN8HCIClass17handleNumCompPktsEtt+0x12>
    434a:	7f83      	ldrb	r3, [r0, #30]
    434c:	4293      	cmp	r3, r2
    434e:	dd02      	ble.n	4356 <_ZN8HCIClass17handleNumCompPktsEtt+0x12>
    _pendingPkt -= numPkts;
    4350:	1a9b      	subs	r3, r3, r2
  } else {
    _pendingPkt = 0;
    4352:	7783      	strb	r3, [r0, #30]
  }
}
    4354:	4770      	bx	lr
    _pendingPkt = 0;
    4356:	2300      	movs	r3, #0
    4358:	e7fb      	b.n	4352 <_ZN8HCIClass17handleNumCompPktsEtt+0xe>
	...

0000435c <_ZN8HCIClass7dumpPktEPKchPh>:
    }
  }
}

void HCIClass::dumpPkt(const char* prefix, uint8_t plen, uint8_t pdata[])
{
    435c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    435e:	0005      	movs	r5, r0
  if (_debug) {
    4360:	6840      	ldr	r0, [r0, #4]
{
    4362:	0017      	movs	r7, r2
    4364:	9301      	str	r3, [sp, #4]
  if (_debug) {
    4366:	2800      	cmp	r0, #0
    4368:	d01b      	beq.n	43a2 <_ZN8HCIClass7dumpPktEPKchPh+0x46>
    _debug->print(prefix);
    436a:	f001 f89e 	bl	54aa <_ZN5Print5printEPKc>

    for (uint8_t i = 0; i < plen; i++) {
    436e:	2400      	movs	r4, #0
    4370:	42bc      	cmp	r4, r7
    4372:	da0f      	bge.n	4394 <_ZN8HCIClass7dumpPktEPKchPh+0x38>
      byte b = pdata[i];
    4374:	9b01      	ldr	r3, [sp, #4]
    4376:	5d1e      	ldrb	r6, [r3, r4]

      if (b < 16) {
    4378:	2e0f      	cmp	r6, #15
    437a:	dc03      	bgt.n	4384 <_ZN8HCIClass7dumpPktEPKchPh+0x28>
        _debug->print("0");
    437c:	4909      	ldr	r1, [pc, #36]	; (43a4 <_ZN8HCIClass7dumpPktEPKchPh+0x48>)
    437e:	6868      	ldr	r0, [r5, #4]
    4380:	f001 f893 	bl	54aa <_ZN5Print5printEPKc>
      }

      _debug->print(b, HEX);
    4384:	2210      	movs	r2, #16
    4386:	0031      	movs	r1, r6
    4388:	6868      	ldr	r0, [r5, #4]
    for (uint8_t i = 0; i < plen; i++) {
    438a:	3401      	adds	r4, #1
      _debug->print(b, HEX);
    438c:	f001 f8e5 	bl	555a <_ZN5Print5printEhi>
    for (uint8_t i = 0; i < plen; i++) {
    4390:	b2e4      	uxtb	r4, r4
    4392:	e7ed      	b.n	4370 <_ZN8HCIClass7dumpPktEPKchPh+0x14>
    }

    _debug->println();
    4394:	6868      	ldr	r0, [r5, #4]
    4396:	f001 f88d 	bl	54b4 <_ZN5Print7printlnEv>
    _debug->flush();
    439a:	6868      	ldr	r0, [r5, #4]
    439c:	6803      	ldr	r3, [r0, #0]
    439e:	68db      	ldr	r3, [r3, #12]
    43a0:	4798      	blx	r3
  }
}
    43a2:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    43a4:	0000b807 	.word	0x0000b807

000043a8 <_ZN8HCIClass10sendAclPktEthhPv>:
{
    43a8:	b5f0      	push	{r4, r5, r6, r7, lr}
    43aa:	0004      	movs	r4, r0
    43ac:	001d      	movs	r5, r3
    43ae:	b085      	sub	sp, #20
    43b0:	af00      	add	r7, sp, #0
    43b2:	60b9      	str	r1, [r7, #8]
    43b4:	607a      	str	r2, [r7, #4]
  while (_pendingPkt >= _maxPkt) {
    43b6:	0023      	movs	r3, r4
    43b8:	33ff      	adds	r3, #255	; 0xff
    43ba:	7f9a      	ldrb	r2, [r3, #30]
    43bc:	7f5b      	ldrb	r3, [r3, #29]
    43be:	429a      	cmp	r2, r3
    43c0:	db03      	blt.n	43ca <_ZN8HCIClass10sendAclPktEthhPv+0x22>
    poll();
    43c2:	0020      	movs	r0, r4
    43c4:	f000 f8f6 	bl	45b4 <_ZN8HCIClass4pollEv>
  while (_pendingPkt >= _maxPkt) {
    43c8:	e7f5      	b.n	43b6 <_ZN8HCIClass10sendAclPktEthhPv+0xe>
  uint8_t txBuffer[sizeof(aclHdr) + plen];
    43ca:	002b      	movs	r3, r5
    43cc:	466a      	mov	r2, sp
    43ce:	3310      	adds	r3, #16
    43d0:	08db      	lsrs	r3, r3, #3
    43d2:	00db      	lsls	r3, r3, #3
    43d4:	1ad3      	subs	r3, r2, r3
    43d6:	469d      	mov	sp, r3
    43d8:	60fb      	str	r3, [r7, #12]
  memcpy(txBuffer, &aclHdr, sizeof(aclHdr));
    43da:	466a      	mov	r2, sp
    43dc:	2302      	movs	r3, #2
    43de:	7013      	strb	r3, [r2, #0]
    43e0:	7a3b      	ldrb	r3, [r7, #8]
    43e2:	3201      	adds	r2, #1
    43e4:	7013      	strb	r3, [r2, #0]
    43e6:	68bb      	ldr	r3, [r7, #8]
  memcpy(&txBuffer[sizeof(aclHdr)], data, plen);
    43e8:	2009      	movs	r0, #9
  memcpy(txBuffer, &aclHdr, sizeof(aclHdr));
    43ea:	0a1b      	lsrs	r3, r3, #8
    43ec:	7053      	strb	r3, [r2, #1]
    43ee:	466a      	mov	r2, sp
  } aclHdr = { HCI_ACLDATA_PKT, handle, uint8_t(plen + 4), plen, cid };
    43f0:	1d2b      	adds	r3, r5, #4
  memcpy(txBuffer, &aclHdr, sizeof(aclHdr));
    43f2:	b2db      	uxtb	r3, r3
    43f4:	70d3      	strb	r3, [r2, #3]
    43f6:	2300      	movs	r3, #0
    43f8:	7113      	strb	r3, [r2, #4]
    43fa:	466b      	mov	r3, sp
    43fc:	b2aa      	uxth	r2, r5
    43fe:	715a      	strb	r2, [r3, #5]
    4400:	2200      	movs	r2, #0
    4402:	719a      	strb	r2, [r3, #6]
    4404:	466b      	mov	r3, sp
    4406:	1dda      	adds	r2, r3, #7
    4408:	88bb      	ldrh	r3, [r7, #4]
  uint8_t txBuffer[sizeof(aclHdr) + plen];
    440a:	002e      	movs	r6, r5
  memcpy(txBuffer, &aclHdr, sizeof(aclHdr));
    440c:	7013      	strb	r3, [r2, #0]
    440e:	2300      	movs	r3, #0
  memcpy(&txBuffer[sizeof(aclHdr)], data, plen);
    4410:	4468      	add	r0, sp
  memcpy(txBuffer, &aclHdr, sizeof(aclHdr));
    4412:	7053      	strb	r3, [r2, #1]
  memcpy(&txBuffer[sizeof(aclHdr)], data, plen);
    4414:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    4416:	002a      	movs	r2, r5
    4418:	f004 ffa3 	bl	9362 <memcpy>
  if (_debug) {
    441c:	6863      	ldr	r3, [r4, #4]
  uint8_t txBuffer[sizeof(aclHdr) + plen];
    441e:	3609      	adds	r6, #9
  if (_debug) {
    4420:	2b00      	cmp	r3, #0
    4422:	d005      	beq.n	4430 <_ZN8HCIClass10sendAclPktEthhPv+0x88>
    dumpPkt("HCI ACLDATA TX -> ", sizeof(aclHdr) + plen, txBuffer);
    4424:	b2f2      	uxtb	r2, r6
    4426:	466b      	mov	r3, sp
    4428:	4909      	ldr	r1, [pc, #36]	; (4450 <_ZN8HCIClass10sendAclPktEthhPv+0xa8>)
    442a:	0020      	movs	r0, r4
    442c:	f7ff ff96 	bl	435c <_ZN8HCIClass7dumpPktEPKchPh>
  _pendingPkt++;
    4430:	34ff      	adds	r4, #255	; 0xff
    4432:	7fa3      	ldrb	r3, [r4, #30]
  HCITransport.write(txBuffer, sizeof(aclHdr) + plen);
    4434:	0032      	movs	r2, r6
  _pendingPkt++;
    4436:	3301      	adds	r3, #1
    4438:	77a3      	strb	r3, [r4, #30]
  HCITransport.write(txBuffer, sizeof(aclHdr) + plen);
    443a:	4b06      	ldr	r3, [pc, #24]	; (4454 <_ZN8HCIClass10sendAclPktEthhPv+0xac>)
    443c:	68f9      	ldr	r1, [r7, #12]
    443e:	6818      	ldr	r0, [r3, #0]
    4440:	6803      	ldr	r3, [r0, #0]
    4442:	699b      	ldr	r3, [r3, #24]
    4444:	4798      	blx	r3
}
    4446:	2000      	movs	r0, #0
    4448:	46bd      	mov	sp, r7
    444a:	b005      	add	sp, #20
    444c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    444e:	46c0      	nop			; (mov r8, r8)
    4450:	0000b830 	.word	0x0000b830
    4454:	0000b88c 	.word	0x0000b88c

00004458 <_ZN8HCIClass16handleAclDataPktEhPh>:
{
    4458:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (aclHdr->cid == ATT_CID) {
    445a:	79d7      	ldrb	r7, [r2, #7]
    445c:	7993      	ldrb	r3, [r2, #6]
    445e:	023f      	lsls	r7, r7, #8
{
    4460:	b087      	sub	sp, #28
    4462:	0005      	movs	r5, r0
    4464:	0014      	movs	r4, r2
  if (aclHdr->cid == ATT_CID) {
    4466:	431f      	orrs	r7, r3
    4468:	2f04      	cmp	r7, #4
    446a:	d10d      	bne.n	4488 <_ZN8HCIClass16handleAclDataPktEhPh+0x30>
    ATT.handleData(aclHdr->handle & 0x0fff, aclHdr->len, &_recvBuffer[1 + sizeof(HCIACLHdr)]);
    446c:	0003      	movs	r3, r0
    446e:	7861      	ldrb	r1, [r4, #1]
    4470:	7820      	ldrb	r0, [r4, #0]
    4472:	0209      	lsls	r1, r1, #8
    4474:	4301      	orrs	r1, r0
    4476:	0509      	lsls	r1, r1, #20
    4478:	3315      	adds	r3, #21
    447a:	7912      	ldrb	r2, [r2, #4]
    447c:	0d09      	lsrs	r1, r1, #20
    447e:	4817      	ldr	r0, [pc, #92]	; (44dc <_ZN8HCIClass16handleAclDataPktEhPh+0x84>)
    4480:	f7ff fc60 	bl	3d44 <_ZN8ATTClass10handleDataEthPh>
}
    4484:	b007      	add	sp, #28
    4486:	bdf0      	pop	{r4, r5, r6, r7, pc}
  } else if (aclHdr->cid == SIGNALING_CID) {
    4488:	2f05      	cmp	r7, #5
    448a:	d10c      	bne.n	44a6 <_ZN8HCIClass16handleAclDataPktEhPh+0x4e>
    L2CAPSignaling.handleData(aclHdr->handle & 0x0fff, aclHdr->len, &_recvBuffer[1 + sizeof(HCIACLHdr)]);
    448c:	0003      	movs	r3, r0
    448e:	7861      	ldrb	r1, [r4, #1]
    4490:	7820      	ldrb	r0, [r4, #0]
    4492:	0209      	lsls	r1, r1, #8
    4494:	4301      	orrs	r1, r0
    4496:	0509      	lsls	r1, r1, #20
    4498:	3315      	adds	r3, #21
    449a:	7912      	ldrb	r2, [r2, #4]
    449c:	0d09      	lsrs	r1, r1, #20
    449e:	4810      	ldr	r0, [pc, #64]	; (44e0 <_ZN8HCIClass16handleAclDataPktEhPh+0x88>)
    44a0:	f000 fb82 	bl	4ba8 <_ZN19L2CAPSignalingClass10handleDataEthPh>
    44a4:	e7ee      	b.n	4484 <_ZN8HCIClass16handleAclDataPktEhPh+0x2c>
    } l2capRejectCid= { 0x01, 0x00, 0x006, 0x0002, aclHdr->cid, 0x0000 };
    44a6:	ae03      	add	r6, sp, #12
    44a8:	220a      	movs	r2, #10
    44aa:	2100      	movs	r1, #0
    44ac:	0030      	movs	r0, r6
    44ae:	f004 ff73 	bl	9398 <memset>
    44b2:	2301      	movs	r3, #1
    44b4:	7033      	strb	r3, [r6, #0]
    44b6:	3305      	adds	r3, #5
    44b8:	8073      	strh	r3, [r6, #2]
    sendAclPkt(aclHdr->handle & 0x0fff, 0x0005, sizeof(l2capRejectCid), &l2capRejectCid);
    44ba:	7861      	ldrb	r1, [r4, #1]
    } l2capRejectCid= { 0x01, 0x00, 0x006, 0x0002, aclHdr->cid, 0x0000 };
    44bc:	3b04      	subs	r3, #4
    44be:	80b3      	strh	r3, [r6, #4]
    sendAclPkt(aclHdr->handle & 0x0fff, 0x0005, sizeof(l2capRejectCid), &l2capRejectCid);
    44c0:	7823      	ldrb	r3, [r4, #0]
    44c2:	0209      	lsls	r1, r1, #8
    44c4:	4319      	orrs	r1, r3
    44c6:	0509      	lsls	r1, r1, #20
    } l2capRejectCid= { 0x01, 0x00, 0x006, 0x0002, aclHdr->cid, 0x0000 };
    44c8:	80f7      	strh	r7, [r6, #6]
    sendAclPkt(aclHdr->handle & 0x0fff, 0x0005, sizeof(l2capRejectCid), &l2capRejectCid);
    44ca:	0d09      	lsrs	r1, r1, #20
    44cc:	9600      	str	r6, [sp, #0]
    44ce:	230a      	movs	r3, #10
    44d0:	2205      	movs	r2, #5
    44d2:	0028      	movs	r0, r5
    44d4:	f7ff ff68 	bl	43a8 <_ZN8HCIClass10sendAclPktEthhPv>
}
    44d8:	e7d4      	b.n	4484 <_ZN8HCIClass16handleAclDataPktEhPh+0x2c>
    44da:	46c0      	nop			; (mov r8, r8)
    44dc:	200002c8 	.word	0x200002c8
    44e0:	200005ac 	.word	0x200005ac

000044e4 <_ZN8HCIClass4pollEm>:
{
    44e4:	b570      	push	{r4, r5, r6, lr}
    44e6:	0004      	movs	r4, r0
    44e8:	4d2f      	ldr	r5, [pc, #188]	; (45a8 <_ZN8HCIClass4pollEm+0xc4>)
  if (timeout) {
    44ea:	2900      	cmp	r1, #0
    44ec:	d003      	beq.n	44f6 <_ZN8HCIClass4pollEm+0x12>
    HCITransport.wait(timeout);
    44ee:	6828      	ldr	r0, [r5, #0]
    44f0:	6803      	ldr	r3, [r0, #0]
    44f2:	689b      	ldr	r3, [r3, #8]
    44f4:	4798      	blx	r3
  while (HCITransport.available()) {
    44f6:	682e      	ldr	r6, [r5, #0]
    44f8:	6833      	ldr	r3, [r6, #0]
    44fa:	0030      	movs	r0, r6
    44fc:	68db      	ldr	r3, [r3, #12]
    44fe:	4798      	blx	r3
    4500:	2800      	cmp	r0, #0
    4502:	d050      	beq.n	45a6 <_ZN8HCIClass4pollEm+0xc2>
    byte b = HCITransport.read();
    4504:	6833      	ldr	r3, [r6, #0]
    4506:	0030      	movs	r0, r6
    4508:	695b      	ldr	r3, [r3, #20]
    450a:	4798      	blx	r3
    _recvBuffer[_recvIndex++] = b;
    450c:	68a3      	ldr	r3, [r4, #8]
    byte b = HCITransport.read();
    450e:	b2c1      	uxtb	r1, r0
    _recvBuffer[_recvIndex++] = b;
    4510:	1c5a      	adds	r2, r3, #1
    4512:	18e3      	adds	r3, r4, r3
    4514:	60a2      	str	r2, [r4, #8]
    4516:	7319      	strb	r1, [r3, #12]
    if (_recvBuffer[0] == HCI_ACLDATA_PKT) {
    4518:	7b23      	ldrb	r3, [r4, #12]
    451a:	2b02      	cmp	r3, #2
    451c:	d11d      	bne.n	455a <_ZN8HCIClass4pollEm+0x76>
      if (_recvIndex > 5 && _recvIndex >= (5 + (_recvBuffer[3] + (_recvBuffer[4] << 8)))) {
    451e:	2a05      	cmp	r2, #5
    4520:	dde9      	ble.n	44f6 <_ZN8HCIClass4pollEm+0x12>
    4522:	7c23      	ldrb	r3, [r4, #16]
    4524:	7be1      	ldrb	r1, [r4, #15]
    4526:	021b      	lsls	r3, r3, #8
    4528:	185b      	adds	r3, r3, r1
    452a:	3304      	adds	r3, #4
    452c:	429a      	cmp	r2, r3
    452e:	dde2      	ble.n	44f6 <_ZN8HCIClass4pollEm+0x12>
        if (_debug) {
    4530:	6863      	ldr	r3, [r4, #4]
    4532:	2b00      	cmp	r3, #0
    4534:	d006      	beq.n	4544 <_ZN8HCIClass4pollEm+0x60>
          dumpPkt("HCI ACLDATA RX <- ", _recvIndex, _recvBuffer);
    4536:	0023      	movs	r3, r4
    4538:	b2d2      	uxtb	r2, r2
    453a:	330c      	adds	r3, #12
    453c:	491b      	ldr	r1, [pc, #108]	; (45ac <_ZN8HCIClass4pollEm+0xc8>)
    453e:	0020      	movs	r0, r4
    4540:	f7ff ff0c 	bl	435c <_ZN8HCIClass7dumpPktEPKchPh>
        int pktLen = _recvIndex - 1;
    4544:	68a3      	ldr	r3, [r4, #8]
        handleAclDataPkt(pktLen, &_recvBuffer[1]);
    4546:	0022      	movs	r2, r4
        int pktLen = _recvIndex - 1;
    4548:	1e59      	subs	r1, r3, #1
        _recvIndex = 0;
    454a:	2300      	movs	r3, #0
        handleAclDataPkt(pktLen, &_recvBuffer[1]);
    454c:	b2c9      	uxtb	r1, r1
        _recvIndex = 0;
    454e:	60a3      	str	r3, [r4, #8]
        handleAclDataPkt(pktLen, &_recvBuffer[1]);
    4550:	320d      	adds	r2, #13
    4552:	0020      	movs	r0, r4
    4554:	f7ff ff80 	bl	4458 <_ZN8HCIClass16handleAclDataPktEhPh>
    4558:	e7cd      	b.n	44f6 <_ZN8HCIClass4pollEm+0x12>
    } else if (_recvBuffer[0] == HCI_EVENT_PKT) {
    455a:	2b04      	cmp	r3, #4
    455c:	d11a      	bne.n	4594 <_ZN8HCIClass4pollEm+0xb0>
      if (_recvIndex > 3 && _recvIndex >= (3 + _recvBuffer[2])) {
    455e:	2a03      	cmp	r2, #3
    4560:	ddc9      	ble.n	44f6 <_ZN8HCIClass4pollEm+0x12>
    4562:	7ba3      	ldrb	r3, [r4, #14]
    4564:	3302      	adds	r3, #2
    4566:	429a      	cmp	r2, r3
    4568:	ddc5      	ble.n	44f6 <_ZN8HCIClass4pollEm+0x12>
        if (_debug) {
    456a:	6863      	ldr	r3, [r4, #4]
    456c:	2b00      	cmp	r3, #0
    456e:	d006      	beq.n	457e <_ZN8HCIClass4pollEm+0x9a>
          dumpPkt("HCI EVENT RX <- ", _recvIndex, _recvBuffer);
    4570:	0023      	movs	r3, r4
    4572:	b2d2      	uxtb	r2, r2
    4574:	330c      	adds	r3, #12
    4576:	490e      	ldr	r1, [pc, #56]	; (45b0 <_ZN8HCIClass4pollEm+0xcc>)
    4578:	0020      	movs	r0, r4
    457a:	f7ff feef 	bl	435c <_ZN8HCIClass7dumpPktEPKchPh>
        int pktLen = _recvIndex - 1;
    457e:	68a3      	ldr	r3, [r4, #8]
        handleEventPkt(pktLen, &_recvBuffer[1]);
    4580:	0022      	movs	r2, r4
        int pktLen = _recvIndex - 1;
    4582:	1e59      	subs	r1, r3, #1
        _recvIndex = 0;
    4584:	2300      	movs	r3, #0
        handleEventPkt(pktLen, &_recvBuffer[1]);
    4586:	b2c9      	uxtb	r1, r1
        _recvIndex = 0;
    4588:	60a3      	str	r3, [r4, #8]
        handleEventPkt(pktLen, &_recvBuffer[1]);
    458a:	320d      	adds	r2, #13
    458c:	0020      	movs	r0, r4
    458e:	f000 f95d 	bl	484c <_ZN8HCIClass14handleEventPktEhPh>
    4592:	e7b0      	b.n	44f6 <_ZN8HCIClass4pollEm+0x12>
      _recvIndex = 0;
    4594:	2300      	movs	r3, #0
      if (_debug) {
    4596:	6860      	ldr	r0, [r4, #4]
      _recvIndex = 0;
    4598:	60a3      	str	r3, [r4, #8]
      if (_debug) {
    459a:	4298      	cmp	r0, r3
    459c:	d0ab      	beq.n	44f6 <_ZN8HCIClass4pollEm+0x12>
        _debug->println(b, HEX);
    459e:	2210      	movs	r2, #16
    45a0:	f000 ffdf 	bl	5562 <_ZN5Print7printlnEhi>
    45a4:	e7a7      	b.n	44f6 <_ZN8HCIClass4pollEm+0x12>
}
    45a6:	bd70      	pop	{r4, r5, r6, pc}
    45a8:	0000b88c 	.word	0x0000b88c
    45ac:	0000b856 	.word	0x0000b856
    45b0:	0000b869 	.word	0x0000b869

000045b4 <_ZN8HCIClass4pollEv>:
{
    45b4:	b510      	push	{r4, lr}
  poll(0);
    45b6:	2100      	movs	r1, #0
    45b8:	f7ff ff94 	bl	44e4 <_ZN8HCIClass4pollEm>
}
    45bc:	bd10      	pop	{r4, pc}
	...

000045c0 <_ZN8HCIClass11sendCommandEthPv>:
{
    45c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    45c2:	0004      	movs	r4, r0
  uint8_t txBuffer[sizeof(pktHdr) + plen];
    45c4:	0010      	movs	r0, r2
{
    45c6:	000d      	movs	r5, r1
  uint8_t txBuffer[sizeof(pktHdr) + plen];
    45c8:	4669      	mov	r1, sp
    45ca:	300b      	adds	r0, #11
    45cc:	08c0      	lsrs	r0, r0, #3
    45ce:	00c0      	lsls	r0, r0, #3
    45d0:	1a09      	subs	r1, r1, r0
{
    45d2:	af00      	add	r7, sp, #0
  uint8_t txBuffer[sizeof(pktHdr) + plen];
    45d4:	468d      	mov	sp, r1
    45d6:	6079      	str	r1, [r7, #4]
  memcpy(txBuffer, &pktHdr, sizeof(pktHdr));
    45d8:	4668      	mov	r0, sp
    45da:	2101      	movs	r1, #1
    45dc:	7001      	strb	r1, [r0, #0]
    45de:	4669      	mov	r1, sp
    45e0:	7045      	strb	r5, [r0, #1]
    45e2:	0a28      	lsrs	r0, r5, #8
    45e4:	7088      	strb	r0, [r1, #2]
    45e6:	4669      	mov	r1, sp
  memcpy(&txBuffer[sizeof(pktHdr)], parameters, plen);
    45e8:	a801      	add	r0, sp, #4
  memcpy(txBuffer, &pktHdr, sizeof(pktHdr));
    45ea:	70ca      	strb	r2, [r1, #3]
  memcpy(&txBuffer[sizeof(pktHdr)], parameters, plen);
    45ec:	0019      	movs	r1, r3
  uint8_t txBuffer[sizeof(pktHdr) + plen];
    45ee:	1d16      	adds	r6, r2, #4
  memcpy(&txBuffer[sizeof(pktHdr)], parameters, plen);
    45f0:	f004 feb7 	bl	9362 <memcpy>
  if (_debug) {
    45f4:	6863      	ldr	r3, [r4, #4]
    45f6:	2b00      	cmp	r3, #0
    45f8:	d005      	beq.n	4606 <_ZN8HCIClass11sendCommandEthPv+0x46>
    dumpPkt("HCI COMMAND TX -> ", sizeof(pktHdr) + plen, txBuffer);
    45fa:	b2f2      	uxtb	r2, r6
    45fc:	466b      	mov	r3, sp
    45fe:	4915      	ldr	r1, [pc, #84]	; (4654 <_ZN8HCIClass11sendCommandEthPv+0x94>)
    4600:	0020      	movs	r0, r4
    4602:	f7ff feab 	bl	435c <_ZN8HCIClass7dumpPktEPKchPh>
  HCITransport.write(txBuffer, sizeof(pktHdr) + plen);
    4606:	4b14      	ldr	r3, [pc, #80]	; (4658 <_ZN8HCIClass11sendCommandEthPv+0x98>)
    4608:	0032      	movs	r2, r6
    460a:	6818      	ldr	r0, [r3, #0]
    460c:	6879      	ldr	r1, [r7, #4]
    460e:	6803      	ldr	r3, [r0, #0]
  _cmdCompleteStatus = -1;
    4610:	0026      	movs	r6, r4
  HCITransport.write(txBuffer, sizeof(pktHdr) + plen);
    4612:	699b      	ldr	r3, [r3, #24]
    4614:	4798      	blx	r3
  _cmdCompleteOpcode = 0xffff;
    4616:	0023      	movs	r3, r4
    4618:	33fe      	adds	r3, #254	; 0xfe
    461a:	607b      	str	r3, [r7, #4]
    461c:	2301      	movs	r3, #1
    461e:	687a      	ldr	r2, [r7, #4]
    4620:	425b      	negs	r3, r3
  _cmdCompleteStatus = -1;
    4622:	36fc      	adds	r6, #252	; 0xfc
  _cmdCompleteOpcode = 0xffff;
    4624:	8213      	strh	r3, [r2, #16]
  _cmdCompleteStatus = -1;
    4626:	6173      	str	r3, [r6, #20]
  for (unsigned long start = millis(); _cmdCompleteOpcode != opcode && millis() < (start + 1000);) {
    4628:	f000 fe92 	bl	5350 <millis>
    462c:	6038      	str	r0, [r7, #0]
    462e:	687b      	ldr	r3, [r7, #4]
    4630:	8a1b      	ldrh	r3, [r3, #16]
    4632:	42ab      	cmp	r3, r5
    4634:	d00b      	beq.n	464e <_ZN8HCIClass11sendCommandEthPv+0x8e>
    4636:	f000 fe8b 	bl	5350 <millis>
    463a:	22fa      	movs	r2, #250	; 0xfa
    463c:	683b      	ldr	r3, [r7, #0]
    463e:	0092      	lsls	r2, r2, #2
    4640:	189b      	adds	r3, r3, r2
    4642:	4298      	cmp	r0, r3
    4644:	d203      	bcs.n	464e <_ZN8HCIClass11sendCommandEthPv+0x8e>
    poll();
    4646:	0020      	movs	r0, r4
    4648:	f7ff ffb4 	bl	45b4 <_ZN8HCIClass4pollEv>
  for (unsigned long start = millis(); _cmdCompleteOpcode != opcode && millis() < (start + 1000);) {
    464c:	e7ef      	b.n	462e <_ZN8HCIClass11sendCommandEthPv+0x6e>
}
    464e:	46bd      	mov	sp, r7
  return _cmdCompleteStatus;
    4650:	6970      	ldr	r0, [r6, #20]
}
    4652:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    4654:	0000b843 	.word	0x0000b843
    4658:	0000b88c 	.word	0x0000b88c

0000465c <_ZN8HCIClass5resetEv>:
  return sendCommand(OGF_HOST_CTL << 10 | OCF_RESET);
    465c:	2300      	movs	r3, #0
{
    465e:	b510      	push	{r4, lr}
  return sendCommand(OGF_HOST_CTL << 10 | OCF_RESET);
    4660:	001a      	movs	r2, r3
    4662:	4902      	ldr	r1, [pc, #8]	; (466c <_ZN8HCIClass5resetEv+0x10>)
    4664:	f7ff ffac 	bl	45c0 <_ZN8HCIClass11sendCommandEthPv>
}
    4668:	bd10      	pop	{r4, pc}
    466a:	46c0      	nop			; (mov r8, r8)
    466c:	00000c03 	.word	0x00000c03

00004670 <_ZN8HCIClass16readLocalVersionERhRtS0_S1_S1_>:
{
    4670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4672:	001c      	movs	r4, r3
  int result = sendCommand(OGF_INFO_PARAM << 10 | OCF_READ_LOCAL_VERSION);
    4674:	2300      	movs	r3, #0
{
    4676:	000e      	movs	r6, r1
    4678:	0015      	movs	r5, r2
  int result = sendCommand(OGF_INFO_PARAM << 10 | OCF_READ_LOCAL_VERSION);
    467a:	490f      	ldr	r1, [pc, #60]	; (46b8 <_ZN8HCIClass16readLocalVersionERhRtS0_S1_S1_+0x48>)
    467c:	001a      	movs	r2, r3
{
    467e:	0007      	movs	r7, r0
  int result = sendCommand(OGF_INFO_PARAM << 10 | OCF_READ_LOCAL_VERSION);
    4680:	f7ff ff9e 	bl	45c0 <_ZN8HCIClass11sendCommandEthPv>
  if (result == 0) {
    4684:	2800      	cmp	r0, #0
    4686:	d116      	bne.n	46b6 <_ZN8HCIClass16readLocalVersionERhRtS0_S1_S1_+0x46>
    } *localVersion = (HCILocalVersion*)_cmdResponse;
    4688:	37fc      	adds	r7, #252	; 0xfc
    468a:	69fb      	ldr	r3, [r7, #28]
    hciVer = localVersion->hciVer;
    468c:	781a      	ldrb	r2, [r3, #0]
    468e:	7032      	strb	r2, [r6, #0]
    hciRev = localVersion->hciRev;
    4690:	789a      	ldrb	r2, [r3, #2]
    4692:	7859      	ldrb	r1, [r3, #1]
    4694:	0212      	lsls	r2, r2, #8
    4696:	430a      	orrs	r2, r1
    4698:	802a      	strh	r2, [r5, #0]
    lmpVer = localVersion->lmpVer;
    469a:	78da      	ldrb	r2, [r3, #3]
    469c:	7022      	strb	r2, [r4, #0]
    manufacturer = localVersion->manufacturer;
    469e:	795a      	ldrb	r2, [r3, #5]
    46a0:	7919      	ldrb	r1, [r3, #4]
    46a2:	0212      	lsls	r2, r2, #8
    46a4:	430a      	orrs	r2, r1
    46a6:	9906      	ldr	r1, [sp, #24]
    46a8:	800a      	strh	r2, [r1, #0]
    lmpSubVer = localVersion->lmpSubVer;
    46aa:	799a      	ldrb	r2, [r3, #6]
    46ac:	79db      	ldrb	r3, [r3, #7]
    46ae:	021b      	lsls	r3, r3, #8
    46b0:	4313      	orrs	r3, r2
    46b2:	9a07      	ldr	r2, [sp, #28]
    46b4:	8013      	strh	r3, [r2, #0]
}
    46b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    46b8:	00001001 	.word	0x00001001

000046bc <_ZN8HCIClass10readBdAddrEPh>:
  int result = sendCommand(OGF_INFO_PARAM << 10 | OCF_READ_BD_ADDR);
    46bc:	2300      	movs	r3, #0
{
    46be:	b570      	push	{r4, r5, r6, lr}
  int result = sendCommand(OGF_INFO_PARAM << 10 | OCF_READ_BD_ADDR);
    46c0:	001a      	movs	r2, r3
{
    46c2:	000e      	movs	r6, r1
  int result = sendCommand(OGF_INFO_PARAM << 10 | OCF_READ_BD_ADDR);
    46c4:	4906      	ldr	r1, [pc, #24]	; (46e0 <_ZN8HCIClass10readBdAddrEPh+0x24>)
{
    46c6:	0004      	movs	r4, r0
  int result = sendCommand(OGF_INFO_PARAM << 10 | OCF_READ_BD_ADDR);
    46c8:	f7ff ff7a 	bl	45c0 <_ZN8HCIClass11sendCommandEthPv>
    46cc:	1e05      	subs	r5, r0, #0
  if (result == 0) {
    46ce:	d105      	bne.n	46dc <_ZN8HCIClass10readBdAddrEPh+0x20>
    memcpy(addr, _cmdResponse, 6);
    46d0:	34fc      	adds	r4, #252	; 0xfc
    46d2:	69e1      	ldr	r1, [r4, #28]
    46d4:	2206      	movs	r2, #6
    46d6:	0030      	movs	r0, r6
    46d8:	f004 fe43 	bl	9362 <memcpy>
}
    46dc:	0028      	movs	r0, r5
    46de:	bd70      	pop	{r4, r5, r6, pc}
    46e0:	00001009 	.word	0x00001009

000046e4 <_ZN8HCIClass8readRssiEt>:
{
    46e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
    46e6:	466b      	mov	r3, sp
    46e8:	1d9d      	adds	r5, r3, #6
    46ea:	80d9      	strh	r1, [r3, #6]
  int result = sendCommand(OGF_STATUS_PARAM << 10 | OCF_READ_RSSI, sizeof(handle), &handle);
    46ec:	2202      	movs	r2, #2
    46ee:	490a      	ldr	r1, [pc, #40]	; (4718 <_ZN8HCIClass8readRssiEt+0x34>)
    46f0:	002b      	movs	r3, r5
{
    46f2:	0004      	movs	r4, r0
  int result = sendCommand(OGF_STATUS_PARAM << 10 | OCF_READ_RSSI, sizeof(handle), &handle);
    46f4:	f7ff ff64 	bl	45c0 <_ZN8HCIClass11sendCommandEthPv>
  int rssi = 127;
    46f8:	217f      	movs	r1, #127	; 0x7f
  if (result == 0) {
    46fa:	2800      	cmp	r0, #0
    46fc:	d10a      	bne.n	4714 <_ZN8HCIClass8readRssiEt+0x30>
    } *readRssi = (HCIReadRssi*)_cmdResponse;
    46fe:	34fc      	adds	r4, #252	; 0xfc
    4700:	69e2      	ldr	r2, [r4, #28]
    if (readRssi->handle == handle) {
    4702:	8828      	ldrh	r0, [r5, #0]
    4704:	7853      	ldrb	r3, [r2, #1]
    4706:	7814      	ldrb	r4, [r2, #0]
    4708:	021b      	lsls	r3, r3, #8
    470a:	4323      	orrs	r3, r4
    470c:	4298      	cmp	r0, r3
    470e:	d101      	bne.n	4714 <_ZN8HCIClass8readRssiEt+0x30>
      rssi = readRssi->rssi;
    4710:	2102      	movs	r1, #2
    4712:	5651      	ldrsb	r1, [r2, r1]
}
    4714:	0008      	movs	r0, r1
    4716:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    4718:	00001405 	.word	0x00001405

0000471c <_ZN8HCIClass12setEventMaskEy>:
{
    471c:	b507      	push	{r0, r1, r2, lr}
  return sendCommand(OGF_HOST_CTL << 10 | OCF_SET_EVENT_MASK, sizeof(eventMask), &eventMask);
    471e:	4904      	ldr	r1, [pc, #16]	; (4730 <_ZN8HCIClass12setEventMaskEy+0x14>)
{
    4720:	9200      	str	r2, [sp, #0]
    4722:	9301      	str	r3, [sp, #4]
  return sendCommand(OGF_HOST_CTL << 10 | OCF_SET_EVENT_MASK, sizeof(eventMask), &eventMask);
    4724:	466b      	mov	r3, sp
    4726:	2208      	movs	r2, #8
    4728:	f7ff ff4a 	bl	45c0 <_ZN8HCIClass11sendCommandEthPv>
}
    472c:	bd0e      	pop	{r1, r2, r3, pc}
    472e:	46c0      	nop			; (mov r8, r8)
    4730:	00000c01 	.word	0x00000c01

00004734 <_ZN8HCIClass16readLeBufferSizeERtRh>:
{
    4734:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  int result = sendCommand(OGF_LE_CTL << 10 | OCF_LE_READ_BUFFER_SIZE);
    4736:	2300      	movs	r3, #0
{
    4738:	000e      	movs	r6, r1
    473a:	0017      	movs	r7, r2
  int result = sendCommand(OGF_LE_CTL << 10 | OCF_LE_READ_BUFFER_SIZE);
    473c:	490d      	ldr	r1, [pc, #52]	; (4774 <_ZN8HCIClass16readLeBufferSizeERtRh+0x40>)
    473e:	001a      	movs	r2, r3
{
    4740:	0005      	movs	r5, r0
  int result = sendCommand(OGF_LE_CTL << 10 | OCF_LE_READ_BUFFER_SIZE);
    4742:	f7ff ff3d 	bl	45c0 <_ZN8HCIClass11sendCommandEthPv>
    4746:	1e04      	subs	r4, r0, #0
  if (result == 0) {
    4748:	d111      	bne.n	476e <_ZN8HCIClass16readLeBufferSizeERtRh+0x3a>
    } *leBufferSize = (HCILeBufferSize*)_cmdResponse;
    474a:	002b      	movs	r3, r5
    474c:	33fc      	adds	r3, #252	; 0xfc
    474e:	69da      	ldr	r2, [r3, #28]
    _maxPkt = maxPkt = leBufferSize->maxPkt;
    4750:	35ff      	adds	r5, #255	; 0xff
    pktLen = leBufferSize->pktLen;
    4752:	7853      	ldrb	r3, [r2, #1]
    4754:	7811      	ldrb	r1, [r2, #0]
    4756:	021b      	lsls	r3, r3, #8
    4758:	430b      	orrs	r3, r1
    475a:	8033      	strh	r3, [r6, #0]
    _maxPkt = maxPkt = leBufferSize->maxPkt;
    475c:	7893      	ldrb	r3, [r2, #2]
    ATT.setMaxMtu(pktLen - 9); // max pkt len - ACL header size
    475e:	4806      	ldr	r0, [pc, #24]	; (4778 <_ZN8HCIClass16readLeBufferSizeERtRh+0x44>)
    _maxPkt = maxPkt = leBufferSize->maxPkt;
    4760:	703b      	strb	r3, [r7, #0]
    4762:	776b      	strb	r3, [r5, #29]
    ATT.setMaxMtu(pktLen - 9); // max pkt len - ACL header size
    4764:	8831      	ldrh	r1, [r6, #0]
    4766:	3909      	subs	r1, #9
    4768:	b289      	uxth	r1, r1
    476a:	f7fe fb81 	bl	2e70 <_ZN8ATTClass9setMaxMtuEt>
}
    476e:	0020      	movs	r0, r4
    4770:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4772:	46c0      	nop			; (mov r8, r8)
    4774:	00002002 	.word	0x00002002
    4778:	200002c8 	.word	0x200002c8

0000477c <_ZN8HCIClass26leSetAdvertisingParametersEtthhhPhhh>:
{
    477c:	b5f0      	push	{r4, r5, r6, r7, lr}
    477e:	b085      	sub	sp, #20
    4780:	469c      	mov	ip, r3
  leAdvertisingParamters.minInterval = minInterval;
    4782:	466b      	mov	r3, sp
  leAdvertisingParamters.maxInterval = maxInterval;
    4784:	805a      	strh	r2, [r3, #2]
  leAdvertisingParamters.advType = advType;
    4786:	4662      	mov	r2, ip
{
    4788:	0004      	movs	r4, r0
    478a:	a80a      	add	r0, sp, #40	; 0x28
    478c:	7807      	ldrb	r7, [r0, #0]
    478e:	a80b      	add	r0, sp, #44	; 0x2c
    4790:	7800      	ldrb	r0, [r0, #0]
    4792:	ad0d      	add	r5, sp, #52	; 0x34
    4794:	782e      	ldrb	r6, [r5, #0]
  leAdvertisingParamters.minInterval = minInterval;
    4796:	8019      	strh	r1, [r3, #0]
  leAdvertisingParamters.advType = advType;
    4798:	711a      	strb	r2, [r3, #4]
  leAdvertisingParamters.directBdaddrType = directBdaddrType;
    479a:	7198      	strb	r0, [r3, #6]
  memcpy(leAdvertisingParamters.directBdaddr, directBdaddr, 6);
    479c:	990c      	ldr	r1, [sp, #48]	; 0x30
{
    479e:	ad0e      	add	r5, sp, #56	; 0x38
  memcpy(leAdvertisingParamters.directBdaddr, directBdaddr, 6);
    47a0:	2206      	movs	r2, #6
    47a2:	1dd8      	adds	r0, r3, #7
{
    47a4:	782d      	ldrb	r5, [r5, #0]
  leAdvertisingParamters.ownBdaddrType = ownBdaddrType;
    47a6:	715f      	strb	r7, [r3, #5]
  memcpy(leAdvertisingParamters.directBdaddr, directBdaddr, 6);
    47a8:	f004 fddb 	bl	9362 <memcpy>
  leAdvertisingParamters.chanMap = chanMap;
    47ac:	466b      	mov	r3, sp
  return sendCommand(OGF_LE_CTL << 10 | OCF_LE_SET_ADVERTISING_PARAMETERS, sizeof(leAdvertisingParamters), &leAdvertisingParamters);
    47ae:	220f      	movs	r2, #15
    47b0:	4903      	ldr	r1, [pc, #12]	; (47c0 <_ZN8HCIClass26leSetAdvertisingParametersEtthhhPhhh+0x44>)
    47b2:	0020      	movs	r0, r4
  leAdvertisingParamters.chanMap = chanMap;
    47b4:	735e      	strb	r6, [r3, #13]
  leAdvertisingParamters.filter = filter;
    47b6:	739d      	strb	r5, [r3, #14]
  return sendCommand(OGF_LE_CTL << 10 | OCF_LE_SET_ADVERTISING_PARAMETERS, sizeof(leAdvertisingParamters), &leAdvertisingParamters);
    47b8:	f7ff ff02 	bl	45c0 <_ZN8HCIClass11sendCommandEthPv>
}
    47bc:	b005      	add	sp, #20
    47be:	bdf0      	pop	{r4, r5, r6, r7, pc}
    47c0:	00002006 	.word	0x00002006

000047c4 <_ZN8HCIClass20leSetAdvertisingDataEhPh>:
{
    47c4:	b5f0      	push	{r4, r5, r6, r7, lr}
  memset(&leAdvertisingData, 0, sizeof(leAdvertisingData));
    47c6:	2420      	movs	r4, #32
{
    47c8:	b089      	sub	sp, #36	; 0x24
    47ca:	000d      	movs	r5, r1
    47cc:	0006      	movs	r6, r0
    47ce:	0017      	movs	r7, r2
  memset(&leAdvertisingData, 0, sizeof(leAdvertisingData));
    47d0:	2100      	movs	r1, #0
    47d2:	0022      	movs	r2, r4
    47d4:	4668      	mov	r0, sp
    47d6:	f004 fddf 	bl	9398 <memset>
  leAdvertisingData.length = length;
    47da:	466b      	mov	r3, sp
  memcpy(leAdvertisingData.data, data, length);
    47dc:	002a      	movs	r2, r5
    47de:	0039      	movs	r1, r7
    47e0:	1c58      	adds	r0, r3, #1
  leAdvertisingData.length = length;
    47e2:	701d      	strb	r5, [r3, #0]
  memcpy(leAdvertisingData.data, data, length);
    47e4:	f004 fdbd 	bl	9362 <memcpy>
  return sendCommand(OGF_LE_CTL << 10 | OCF_LE_SET_ADVERTISING_DATA, sizeof(leAdvertisingData), &leAdvertisingData);
    47e8:	466b      	mov	r3, sp
    47ea:	0022      	movs	r2, r4
    47ec:	4902      	ldr	r1, [pc, #8]	; (47f8 <_ZN8HCIClass20leSetAdvertisingDataEhPh+0x34>)
    47ee:	0030      	movs	r0, r6
    47f0:	f7ff fee6 	bl	45c0 <_ZN8HCIClass11sendCommandEthPv>
}
    47f4:	b009      	add	sp, #36	; 0x24
    47f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    47f8:	00002008 	.word	0x00002008

000047fc <_ZN8HCIClass21leSetScanResponseDataEhPh>:
{
    47fc:	b5f0      	push	{r4, r5, r6, r7, lr}
  memset(&leScanResponseData, 0, sizeof(leScanResponseData));
    47fe:	2420      	movs	r4, #32
{
    4800:	b089      	sub	sp, #36	; 0x24
    4802:	000d      	movs	r5, r1
    4804:	0006      	movs	r6, r0
    4806:	0017      	movs	r7, r2
  memset(&leScanResponseData, 0, sizeof(leScanResponseData));
    4808:	2100      	movs	r1, #0
    480a:	0022      	movs	r2, r4
    480c:	4668      	mov	r0, sp
    480e:	f004 fdc3 	bl	9398 <memset>
  leScanResponseData.length = length;
    4812:	466b      	mov	r3, sp
  memcpy(leScanResponseData.data, data, length);
    4814:	002a      	movs	r2, r5
    4816:	0039      	movs	r1, r7
    4818:	1c58      	adds	r0, r3, #1
  leScanResponseData.length = length;
    481a:	701d      	strb	r5, [r3, #0]
  memcpy(leScanResponseData.data, data, length);
    481c:	f004 fda1 	bl	9362 <memcpy>
  return sendCommand(OGF_LE_CTL << 10 | OCF_LE_SET_SCAN_RESPONSE_DATA, sizeof(leScanResponseData), &leScanResponseData);
    4820:	466b      	mov	r3, sp
    4822:	0022      	movs	r2, r4
    4824:	4902      	ldr	r1, [pc, #8]	; (4830 <_ZN8HCIClass21leSetScanResponseDataEhPh+0x34>)
    4826:	0030      	movs	r0, r6
    4828:	f7ff feca 	bl	45c0 <_ZN8HCIClass11sendCommandEthPv>
}
    482c:	b009      	add	sp, #36	; 0x24
    482e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4830:	00002009 	.word	0x00002009

00004834 <_ZN8HCIClass20leSetAdvertiseEnableEh>:
{
    4834:	b507      	push	{r0, r1, r2, lr}
    4836:	466b      	mov	r3, sp
    4838:	3307      	adds	r3, #7
    483a:	7019      	strb	r1, [r3, #0]
  return sendCommand(OGF_LE_CTL << 10 | OCF_LE_SET_ADVERTISE_ENABLE, sizeof(enable), &enable);
    483c:	2201      	movs	r2, #1
    483e:	4902      	ldr	r1, [pc, #8]	; (4848 <_ZN8HCIClass20leSetAdvertiseEnableEh+0x14>)
    4840:	f7ff febe 	bl	45c0 <_ZN8HCIClass11sendCommandEthPv>
}
    4844:	bd0e      	pop	{r1, r2, r3, pc}
    4846:	46c0      	nop			; (mov r8, r8)
    4848:	0000200a 	.word	0x0000200a

0000484c <_ZN8HCIClass14handleEventPktEhPh>:
{
    484c:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (eventHdr->evt == EVT_DISCONN_COMPLETE) {
    484e:	7813      	ldrb	r3, [r2, #0]
{
    4850:	b087      	sub	sp, #28
    4852:	0004      	movs	r4, r0
  if (eventHdr->evt == EVT_DISCONN_COMPLETE) {
    4854:	2b05      	cmp	r3, #5
    4856:	d110      	bne.n	487a <_ZN8HCIClass14handleEventPktEhPh+0x2e>
    ATT.removeConnection(disconnComplete->handle, disconnComplete->reason);
    4858:	1c94      	adds	r4, r2, #2
    485a:	7861      	ldrb	r1, [r4, #1]
    485c:	7952      	ldrb	r2, [r2, #5]
    485e:	4839      	ldr	r0, [pc, #228]	; (4944 <_ZN8HCIClass14handleEventPktEhPh+0xf8>)
    4860:	f7fe fb26 	bl	2eb0 <_ZN8ATTClass16removeConnectionEht>
    L2CAPSignaling.removeConnection(disconnComplete->handle, disconnComplete->reason);
    4864:	7861      	ldrb	r1, [r4, #1]
    4866:	4838      	ldr	r0, [pc, #224]	; (4948 <_ZN8HCIClass14handleEventPktEhPh+0xfc>)
    4868:	78e2      	ldrb	r2, [r4, #3]
    486a:	f000 f94d 	bl	4b08 <_ZN19L2CAPSignalingClass16removeConnectionEht>
    HCI.leSetAdvertiseEnable(0x01);
    486e:	2101      	movs	r1, #1
    4870:	4836      	ldr	r0, [pc, #216]	; (494c <_ZN8HCIClass14handleEventPktEhPh+0x100>)
    4872:	f7ff ffdf 	bl	4834 <_ZN8HCIClass20leSetAdvertiseEnableEh>
}
    4876:	b007      	add	sp, #28
    4878:	bdf0      	pop	{r4, r5, r6, r7, pc}
  } else if (eventHdr->evt == EVT_CMD_COMPLETE) {
    487a:	2b0e      	cmp	r3, #14
    487c:	d110      	bne.n	48a0 <_ZN8HCIClass14handleEventPktEhPh+0x54>
    _cmdCompleteOpcode = cmdCompleteHeader->opcode;
    487e:	7913      	ldrb	r3, [r2, #4]
    4880:	78d0      	ldrb	r0, [r2, #3]
    4882:	021b      	lsls	r3, r3, #8
    4884:	4303      	orrs	r3, r0
    4886:	0020      	movs	r0, r4
    4888:	30fe      	adds	r0, #254	; 0xfe
    488a:	8203      	strh	r3, [r0, #16]
    _cmdCompleteStatus = cmdCompleteHeader->status;
    488c:	7953      	ldrb	r3, [r2, #5]
    488e:	3802      	subs	r0, #2
    4890:	6143      	str	r3, [r0, #20]
    _cmdResponseLen = pdata[1] - sizeof(CmdComplete);
    4892:	7853      	ldrb	r3, [r2, #1]
    4894:	34ff      	adds	r4, #255	; 0xff
    4896:	3b04      	subs	r3, #4
    _cmdResponse = &pdata[sizeof(HCIEventHdr) + sizeof(CmdComplete)];
    4898:	3206      	adds	r2, #6
    _cmdResponseLen = pdata[1] - sizeof(CmdComplete);
    489a:	7563      	strb	r3, [r4, #21]
    _cmdResponse = &pdata[sizeof(HCIEventHdr) + sizeof(CmdComplete)];
    489c:	61c2      	str	r2, [r0, #28]
    489e:	e7ea      	b.n	4876 <_ZN8HCIClass14handleEventPktEhPh+0x2a>
  } else if (eventHdr->evt == EVT_NUM_COMP_PKTS) {
    48a0:	2b13      	cmp	r3, #19
    48a2:	d10d      	bne.n	48c0 <_ZN8HCIClass14handleEventPktEhPh+0x74>
    for (uint8_t i = 0; i < numHandles; i++) {
    48a4:	2500      	movs	r5, #0
    uint8_t numHandles = pdata[sizeof(HCIEventHdr)];
    48a6:	7896      	ldrb	r6, [r2, #2]
    uint16_t* data = (uint16_t*)&pdata[sizeof(HCIEventHdr) + sizeof(numHandles)];
    48a8:	1cd7      	adds	r7, r2, #3
    for (uint8_t i = 0; i < numHandles; i++) {
    48aa:	42b5      	cmp	r5, r6
    48ac:	dae3      	bge.n	4876 <_ZN8HCIClass14handleEventPktEhPh+0x2a>
      handleNumCompPkts(data[0], data[1]);
    48ae:	887a      	ldrh	r2, [r7, #2]
    48b0:	8839      	ldrh	r1, [r7, #0]
    48b2:	0020      	movs	r0, r4
    for (uint8_t i = 0; i < numHandles; i++) {
    48b4:	3501      	adds	r5, #1
      handleNumCompPkts(data[0], data[1]);
    48b6:	f7ff fd45 	bl	4344 <_ZN8HCIClass17handleNumCompPktsEtt>
      data += 2;
    48ba:	3704      	adds	r7, #4
    for (uint8_t i = 0; i < numHandles; i++) {
    48bc:	b2ed      	uxtb	r5, r5
    48be:	e7f4      	b.n	48aa <_ZN8HCIClass14handleEventPktEhPh+0x5e>
  } else if (eventHdr->evt == EVT_LE_META_EVENT) {
    48c0:	2b3e      	cmp	r3, #62	; 0x3e
    48c2:	d1d8      	bne.n	4876 <_ZN8HCIClass14handleEventPktEhPh+0x2a>
    if (leMetaHeader->subevent == EVT_LE_CONN_COMPLETE) {
    48c4:	7893      	ldrb	r3, [r2, #2]
    48c6:	2b01      	cmp	r3, #1
    48c8:	d1d5      	bne.n	4876 <_ZN8HCIClass14handleEventPktEhPh+0x2a>
      if (leConnectionComplete->status == 0x00) {
    48ca:	78d3      	ldrb	r3, [r2, #3]
    48cc:	1cd5      	adds	r5, r2, #3
    48ce:	2b00      	cmp	r3, #0
    48d0:	d1d1      	bne.n	4876 <_ZN8HCIClass14handleEventPktEhPh+0x2a>
        ATT.addConnection(leConnectionComplete->handle,
    48d2:	3208      	adds	r2, #8
    48d4:	0014      	movs	r4, r2
    48d6:	78a9      	ldrb	r1, [r5, #2]
    48d8:	7868      	ldrb	r0, [r5, #1]
    48da:	0209      	lsls	r1, r1, #8
                          leConnectionComplete->masterClockAccuracy);
    48dc:	4301      	orrs	r1, r0
    48de:	7c68      	ldrb	r0, [r5, #17]
    48e0:	792b      	ldrb	r3, [r5, #4]
    48e2:	78ea      	ldrb	r2, [r5, #3]
    48e4:	9004      	str	r0, [sp, #16]
        ATT.addConnection(leConnectionComplete->handle,
    48e6:	7c28      	ldrb	r0, [r5, #16]
    48e8:	7bee      	ldrb	r6, [r5, #15]
    48ea:	0200      	lsls	r0, r0, #8
                          leConnectionComplete->masterClockAccuracy);
    48ec:	4330      	orrs	r0, r6
    48ee:	9003      	str	r0, [sp, #12]
        ATT.addConnection(leConnectionComplete->handle,
    48f0:	7ba8      	ldrb	r0, [r5, #14]
    48f2:	7b6e      	ldrb	r6, [r5, #13]
    48f4:	0200      	lsls	r0, r0, #8
                          leConnectionComplete->masterClockAccuracy);
    48f6:	4330      	orrs	r0, r6
    48f8:	9002      	str	r0, [sp, #8]
        ATT.addConnection(leConnectionComplete->handle,
    48fa:	7b28      	ldrb	r0, [r5, #12]
    48fc:	7aee      	ldrb	r6, [r5, #11]
    48fe:	0200      	lsls	r0, r0, #8
                          leConnectionComplete->masterClockAccuracy);
    4900:	4330      	orrs	r0, r6
    4902:	9001      	str	r0, [sp, #4]
    4904:	9400      	str	r4, [sp, #0]
    4906:	480f      	ldr	r0, [pc, #60]	; (4944 <_ZN8HCIClass14handleEventPktEhPh+0xf8>)
    4908:	f7fe fab4 	bl	2e74 <_ZN8ATTClass13addConnectionEthhPhttth>
        L2CAPSignaling.addConnection(leConnectionComplete->handle,
    490c:	78a9      	ldrb	r1, [r5, #2]
    490e:	7868      	ldrb	r0, [r5, #1]
    4910:	0209      	lsls	r1, r1, #8
                              leConnectionComplete->masterClockAccuracy);
    4912:	4301      	orrs	r1, r0
    4914:	7c68      	ldrb	r0, [r5, #17]
    4916:	792b      	ldrb	r3, [r5, #4]
    4918:	78ea      	ldrb	r2, [r5, #3]
    491a:	9004      	str	r0, [sp, #16]
        L2CAPSignaling.addConnection(leConnectionComplete->handle,
    491c:	7c28      	ldrb	r0, [r5, #16]
    491e:	7bee      	ldrb	r6, [r5, #15]
    4920:	0200      	lsls	r0, r0, #8
                              leConnectionComplete->masterClockAccuracy);
    4922:	4330      	orrs	r0, r6
    4924:	9003      	str	r0, [sp, #12]
        L2CAPSignaling.addConnection(leConnectionComplete->handle,
    4926:	7ba8      	ldrb	r0, [r5, #14]
    4928:	7b6e      	ldrb	r6, [r5, #13]
    492a:	0200      	lsls	r0, r0, #8
                              leConnectionComplete->masterClockAccuracy);
    492c:	4330      	orrs	r0, r6
    492e:	9002      	str	r0, [sp, #8]
        L2CAPSignaling.addConnection(leConnectionComplete->handle,
    4930:	7b28      	ldrb	r0, [r5, #12]
    4932:	7aee      	ldrb	r6, [r5, #11]
    4934:	0200      	lsls	r0, r0, #8
                              leConnectionComplete->masterClockAccuracy);
    4936:	4330      	orrs	r0, r6
    4938:	9001      	str	r0, [sp, #4]
    493a:	9400      	str	r4, [sp, #0]
    493c:	4802      	ldr	r0, [pc, #8]	; (4948 <_ZN8HCIClass14handleEventPktEhPh+0xfc>)
    493e:	f000 f8b7 	bl	4ab0 <_ZN19L2CAPSignalingClass13addConnectionEthhPhttth>
}
    4942:	e798      	b.n	4876 <_ZN8HCIClass14handleEventPktEhPh+0x2a>
    4944:	200002c8 	.word	0x200002c8
    4948:	200005ac 	.word	0x200005ac
    494c:	20000480 	.word	0x20000480

00004950 <_ZN8HCIClass12leConnUpdateEttttt>:
{
    4950:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  leConnUpdateData.handle = handle;
    4952:	466e      	mov	r6, sp
  leConnUpdateData.maxInterval = maxInterval;
    4954:	80b3      	strh	r3, [r6, #4]
  leConnUpdateData.minCeLength = 0x0004;
    4956:	2304      	movs	r3, #4
{
    4958:	ac08      	add	r4, sp, #32
    495a:	8825      	ldrh	r5, [r4, #0]
    495c:	ac09      	add	r4, sp, #36	; 0x24
    495e:	8824      	ldrh	r4, [r4, #0]
  leConnUpdateData.minCeLength = 0x0004;
    4960:	8173      	strh	r3, [r6, #10]
  leConnUpdateData.maxCeLength = 0x0006;
    4962:	3302      	adds	r3, #2
  leConnUpdateData.handle = handle;
    4964:	8031      	strh	r1, [r6, #0]
  leConnUpdateData.minInterval = minInterval;
    4966:	8072      	strh	r2, [r6, #2]
  leConnUpdateData.maxCeLength = 0x0006;
    4968:	81b3      	strh	r3, [r6, #12]
  return sendCommand(OGF_LE_CTL << 10 | OCF_LE_CONN_UPDATE, sizeof(leConnUpdateData), &leConnUpdateData);
    496a:	220e      	movs	r2, #14
    496c:	466b      	mov	r3, sp
    496e:	4903      	ldr	r1, [pc, #12]	; (497c <_ZN8HCIClass12leConnUpdateEttttt+0x2c>)
  leConnUpdateData.latency = latency;
    4970:	80f5      	strh	r5, [r6, #6]
  leConnUpdateData.supervisionTimeout = supervisionTimeout;
    4972:	8134      	strh	r4, [r6, #8]
  return sendCommand(OGF_LE_CTL << 10 | OCF_LE_CONN_UPDATE, sizeof(leConnUpdateData), &leConnUpdateData);
    4974:	f7ff fe24 	bl	45c0 <_ZN8HCIClass11sendCommandEthPv>
}
    4978:	b004      	add	sp, #16
    497a:	bd70      	pop	{r4, r5, r6, pc}
    497c:	00002013 	.word	0x00002013

00004980 <_ZN8HCIClass10disconnectEt>:
{
    4980:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  } disconnectData = { handle, HCI_OE_USER_ENDED_CONNECTION };
    4982:	2503      	movs	r5, #3
    4984:	ac01      	add	r4, sp, #4
{
    4986:	0006      	movs	r6, r0
    4988:	000f      	movs	r7, r1
  } disconnectData = { handle, HCI_OE_USER_ENDED_CONNECTION };
    498a:	002a      	movs	r2, r5
    498c:	2100      	movs	r1, #0
    498e:	0020      	movs	r0, r4
    4990:	f004 fd02 	bl	9398 <memset>
    4994:	2313      	movs	r3, #19
  return sendCommand(OGF_LINK_CTL << 10 | OCF_DISCONNECT, sizeof(disconnectData), &disconnectData);
    4996:	002a      	movs	r2, r5
  } disconnectData = { handle, HCI_OE_USER_ENDED_CONNECTION };
    4998:	70a3      	strb	r3, [r4, #2]
  return sendCommand(OGF_LINK_CTL << 10 | OCF_DISCONNECT, sizeof(disconnectData), &disconnectData);
    499a:	0030      	movs	r0, r6
    499c:	0023      	movs	r3, r4
    499e:	4902      	ldr	r1, [pc, #8]	; (49a8 <_ZN8HCIClass10disconnectEt+0x28>)
  } disconnectData = { handle, HCI_OE_USER_ENDED_CONNECTION };
    49a0:	8027      	strh	r7, [r4, #0]
  return sendCommand(OGF_LINK_CTL << 10 | OCF_DISCONNECT, sizeof(disconnectData), &disconnectData);
    49a2:	f7ff fe0d 	bl	45c0 <_ZN8HCIClass11sendCommandEthPv>
}
    49a6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    49a8:	00000406 	.word	0x00000406

000049ac <_GLOBAL__sub_I__ZN8HCIClassC2Ev>:
  _pendingPkt(0)
    49ac:	4807      	ldr	r0, [pc, #28]	; (49cc <_GLOBAL__sub_I__ZN8HCIClassC2Ev+0x20>)
    49ae:	4b08      	ldr	r3, [pc, #32]	; (49d0 <_GLOBAL__sub_I__ZN8HCIClassC2Ev+0x24>)
    49b0:	0002      	movs	r2, r0
    49b2:	3308      	adds	r3, #8

HCIClass HCI;
    49b4:	b510      	push	{r4, lr}
  _pendingPkt(0)
    49b6:	6003      	str	r3, [r0, #0]
    49b8:	2300      	movs	r3, #0
    49ba:	32ff      	adds	r2, #255	; 0xff
    49bc:	7793      	strb	r3, [r2, #30]
HCIClass HCI;
    49be:	4905      	ldr	r1, [pc, #20]	; (49d4 <_GLOBAL__sub_I__ZN8HCIClassC2Ev+0x28>)
    49c0:	4a05      	ldr	r2, [pc, #20]	; (49d8 <_GLOBAL__sub_I__ZN8HCIClassC2Ev+0x2c>)
  _pendingPkt(0)
    49c2:	6043      	str	r3, [r0, #4]
    49c4:	6083      	str	r3, [r0, #8]
HCIClass HCI;
    49c6:	f002 fd17 	bl	73f8 <__aeabi_atexit>
    49ca:	bd10      	pop	{r4, pc}
    49cc:	20000480 	.word	0x20000480
    49d0:	0000b87c 	.word	0x0000b87c
    49d4:	0000430b 	.word	0x0000430b
    49d8:	20000000 	.word	0x20000000

000049dc <_ZN21HCIUartTransportClassD1Ev>:
{
}

HCIUartTransportClass::~HCIUartTransportClass()
{
}
    49dc:	4770      	bx	lr

000049de <_ZN21HCIUartTransportClass5beginEv>:

int HCIUartTransportClass::begin()
{
  _uart->begin(_baudrate);
    49de:	6843      	ldr	r3, [r0, #4]
{
    49e0:	b510      	push	{r4, lr}
  _uart->begin(_baudrate);
    49e2:	681a      	ldr	r2, [r3, #0]
    49e4:	6881      	ldr	r1, [r0, #8]
    49e6:	69d2      	ldr	r2, [r2, #28]
    49e8:	0018      	movs	r0, r3
    49ea:	4790      	blx	r2

  return 1;
}
    49ec:	2001      	movs	r0, #1
    49ee:	bd10      	pop	{r4, pc}

000049f0 <_ZN21HCIUartTransportClass3endEv>:

void HCIUartTransportClass::end()
{
    49f0:	b510      	push	{r4, lr}
  _uart->end();
    49f2:	6840      	ldr	r0, [r0, #4]
    49f4:	6803      	ldr	r3, [r0, #0]
    49f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    49f8:	4798      	blx	r3
}
    49fa:	bd10      	pop	{r4, pc}

000049fc <_ZN21HCIUartTransportClass9availableEv>:
    }
  }
}

int HCIUartTransportClass::available()
{
    49fc:	b510      	push	{r4, lr}
  return _uart->available();
    49fe:	6840      	ldr	r0, [r0, #4]
    4a00:	6803      	ldr	r3, [r0, #0]
    4a02:	691b      	ldr	r3, [r3, #16]
    4a04:	4798      	blx	r3
}
    4a06:	bd10      	pop	{r4, pc}

00004a08 <_ZN21HCIUartTransportClass4peekEv>:

int HCIUartTransportClass::peek()
{
    4a08:	b510      	push	{r4, lr}
  return _uart->peek();
    4a0a:	6840      	ldr	r0, [r0, #4]
    4a0c:	6803      	ldr	r3, [r0, #0]
    4a0e:	699b      	ldr	r3, [r3, #24]
    4a10:	4798      	blx	r3
}
    4a12:	bd10      	pop	{r4, pc}

00004a14 <_ZN21HCIUartTransportClass4readEv>:

int HCIUartTransportClass::read()
{
    4a14:	b510      	push	{r4, lr}
  return _uart->read();
    4a16:	6840      	ldr	r0, [r0, #4]
    4a18:	6803      	ldr	r3, [r0, #0]
    4a1a:	695b      	ldr	r3, [r3, #20]
    4a1c:	4798      	blx	r3
}
    4a1e:	bd10      	pop	{r4, pc}

00004a20 <_ZN21HCIUartTransportClass5writeEPKhj>:

size_t HCIUartTransportClass::write(const uint8_t* data, size_t length)
{
    4a20:	b570      	push	{r4, r5, r6, lr}
    4a22:	0004      	movs	r4, r0
#ifdef ARDUINO_AVR_UNO_WIFI_REV2
  // wait while the CTS pin is low
  while (digitalRead(NINA_CTS) == HIGH);
#endif

  size_t result = _uart->write(data, length);
    4a24:	6840      	ldr	r0, [r0, #4]
    4a26:	6803      	ldr	r3, [r0, #0]
    4a28:	685b      	ldr	r3, [r3, #4]
    4a2a:	4798      	blx	r3
    4a2c:	0005      	movs	r5, r0

  _uart->flush();
    4a2e:	6860      	ldr	r0, [r4, #4]
    4a30:	6803      	ldr	r3, [r0, #0]
    4a32:	68db      	ldr	r3, [r3, #12]
    4a34:	4798      	blx	r3

  return result;
}
    4a36:	0028      	movs	r0, r5
    4a38:	bd70      	pop	{r4, r5, r6, pc}

00004a3a <_ZN21HCIUartTransportClassD0Ev>:
HCIUartTransportClass::~HCIUartTransportClass()
    4a3a:	b510      	push	{r4, lr}
    4a3c:	0004      	movs	r4, r0
}
    4a3e:	f000 fd07 	bl	5450 <_ZdlPv>
    4a42:	0020      	movs	r0, r4
    4a44:	bd10      	pop	{r4, pc}

00004a46 <_ZN21HCIUartTransportClass4waitEm>:
{
    4a46:	b570      	push	{r4, r5, r6, lr}
    4a48:	0004      	movs	r4, r0
    4a4a:	000e      	movs	r6, r1
  for (unsigned long start = millis(); (millis() - start) < timeout;) {
    4a4c:	f000 fc80 	bl	5350 <millis>
    4a50:	0005      	movs	r5, r0
    4a52:	f000 fc7d 	bl	5350 <millis>
    4a56:	1b40      	subs	r0, r0, r5
    4a58:	42b0      	cmp	r0, r6
    4a5a:	d205      	bcs.n	4a68 <_ZN21HCIUartTransportClass4waitEm+0x22>
    if (available()) {
    4a5c:	6823      	ldr	r3, [r4, #0]
    4a5e:	0020      	movs	r0, r4
    4a60:	68db      	ldr	r3, [r3, #12]
    4a62:	4798      	blx	r3
    4a64:	2800      	cmp	r0, #0
    4a66:	d0f4      	beq.n	4a52 <_ZN21HCIUartTransportClass4waitEm+0xc>
}
    4a68:	bd70      	pop	{r4, r5, r6, pc}
	...

00004a6c <_GLOBAL__sub_I__ZN21HCIUartTransportClassC2ER14HardwareSerialm>:
  _baudrate(baudrate)
    4a6c:	4b06      	ldr	r3, [pc, #24]	; (4a88 <_GLOBAL__sub_I__ZN21HCIUartTransportClassC2ER14HardwareSerialm+0x1c>)
    4a6e:	4807      	ldr	r0, [pc, #28]	; (4a8c <_GLOBAL__sub_I__ZN21HCIUartTransportClassC2ER14HardwareSerialm+0x20>)
#ifdef ARDUINO_AVR_UNO_WIFI_REV2
HCIUartTransportClass HCIUartTransport(SerialHCI, 119600);
#else
HCIUartTransportClass HCIUartTransport(SerialHCI, 912600);
#endif
HCITransportInterface& HCITransport = HCIUartTransport;
    4a70:	b510      	push	{r4, lr}
  _baudrate(baudrate)
    4a72:	3308      	adds	r3, #8
    4a74:	6003      	str	r3, [r0, #0]
    4a76:	4b06      	ldr	r3, [pc, #24]	; (4a90 <_GLOBAL__sub_I__ZN21HCIUartTransportClassC2ER14HardwareSerialm+0x24>)
HCIUartTransportClass HCIUartTransport(SerialHCI, 912600);
    4a78:	4a06      	ldr	r2, [pc, #24]	; (4a94 <_GLOBAL__sub_I__ZN21HCIUartTransportClassC2ER14HardwareSerialm+0x28>)
  _baudrate(baudrate)
    4a7a:	6043      	str	r3, [r0, #4]
    4a7c:	4b06      	ldr	r3, [pc, #24]	; (4a98 <_GLOBAL__sub_I__ZN21HCIUartTransportClassC2ER14HardwareSerialm+0x2c>)
HCIUartTransportClass HCIUartTransport(SerialHCI, 912600);
    4a7e:	4907      	ldr	r1, [pc, #28]	; (4a9c <_GLOBAL__sub_I__ZN21HCIUartTransportClassC2ER14HardwareSerialm+0x30>)
  _baudrate(baudrate)
    4a80:	6083      	str	r3, [r0, #8]
HCIUartTransportClass HCIUartTransport(SerialHCI, 912600);
    4a82:	f002 fcb9 	bl	73f8 <__aeabi_atexit>
HCITransportInterface& HCITransport = HCIUartTransport;
    4a86:	bd10      	pop	{r4, pc}
    4a88:	0000b890 	.word	0x0000b890
    4a8c:	200005a0 	.word	0x200005a0
    4a90:	20000e40 	.word	0x20000e40
    4a94:	20000000 	.word	0x20000000
    4a98:	000decd8 	.word	0x000decd8
    4a9c:	000049dd 	.word	0x000049dd

00004aa0 <_ZN19L2CAPSignalingClassD1Ev>:
{
}

L2CAPSignalingClass::~L2CAPSignalingClass()
{
}
    4aa0:	4770      	bx	lr

00004aa2 <_ZN19L2CAPSignalingClassD0Ev>:
L2CAPSignalingClass::~L2CAPSignalingClass()
    4aa2:	b510      	push	{r4, lr}
    4aa4:	0004      	movs	r4, r0
}
    4aa6:	f000 fcd3 	bl	5450 <_ZdlPv>
    4aaa:	0020      	movs	r0, r4
    4aac:	bd10      	pop	{r4, pc}
	...

00004ab0 <_ZN19L2CAPSignalingClass13addConnectionEthhPhttth>:

void L2CAPSignalingClass::addConnection(uint16_t handle, uint8_t role, uint8_t /*peerBdaddrType*/,
                                        uint8_t /*peerBdaddr*/[6], uint16_t interval,
                                        uint16_t /*latency*/, uint16_t /*supervisionTimeout*/,
                                        uint8_t /*masterClockAccuracy*/)
{
    4ab0:	b5f0      	push	{r4, r5, r6, r7, lr}
    4ab2:	b087      	sub	sp, #28
    4ab4:	ab0d      	add	r3, sp, #52	; 0x34
    4ab6:	000f      	movs	r7, r1
    4ab8:	881b      	ldrh	r3, [r3, #0]
  if (role != 1) {
    4aba:	2a01      	cmp	r2, #1
    4abc:	d120      	bne.n	4b00 <_ZN19L2CAPSignalingClass13addConnectionEthhPhttth+0x50>
    // ignore
    return;
  }

  if (!_minInterval || !_maxInterval) {
    4abe:	8886      	ldrh	r6, [r0, #4]
    4ac0:	2e00      	cmp	r6, #0
    4ac2:	d01d      	beq.n	4b00 <_ZN19L2CAPSignalingClass13addConnectionEthhPhttth+0x50>
    4ac4:	88c5      	ldrh	r5, [r0, #6]
    4ac6:	2d00      	cmp	r5, #0
    4ac8:	d01a      	beq.n	4b00 <_ZN19L2CAPSignalingClass13addConnectionEthhPhttth+0x50>
    // no connection intervale to request
    return;
  }

  if (interval >= _minInterval && interval <= _maxInterval) {
    4aca:	42b3      	cmp	r3, r6
    4acc:	db01      	blt.n	4ad2 <_ZN19L2CAPSignalingClass13addConnectionEthhPhttth+0x22>
    4ace:	42ab      	cmp	r3, r5
    4ad0:	dd16      	ble.n	4b00 <_ZN19L2CAPSignalingClass13addConnectionEthhPhttth+0x50>
    uint16_t minInterval;
    uint16_t maxInterval;
    uint16_t latency;
    uint16_t supervisionTimeout;
  } request = { CONNECTION_PARAMETER_UPDATE_REQUEST, 0x01, 8,
                _minInterval, _maxInterval, 0x0000, 0x00c8 };
    4ad2:	ac03      	add	r4, sp, #12
    4ad4:	220c      	movs	r2, #12
    4ad6:	2100      	movs	r1, #0
    4ad8:	0020      	movs	r0, r4
    4ada:	f004 fc5d 	bl	9398 <memset>
    4ade:	2312      	movs	r3, #18
    4ae0:	7023      	strb	r3, [r4, #0]
    4ae2:	3b11      	subs	r3, #17
    4ae4:	7063      	strb	r3, [r4, #1]
    4ae6:	3307      	adds	r3, #7
    4ae8:	8063      	strh	r3, [r4, #2]
    4aea:	33c0      	adds	r3, #192	; 0xc0
    4aec:	8163      	strh	r3, [r4, #10]
    4aee:	80a6      	strh	r6, [r4, #4]
    4af0:	80e5      	strh	r5, [r4, #6]

  HCI.sendAclPkt(handle, SIGNALING_CID, sizeof(request), &request);
    4af2:	3bbc      	subs	r3, #188	; 0xbc
    4af4:	9400      	str	r4, [sp, #0]
    4af6:	2205      	movs	r2, #5
    4af8:	0039      	movs	r1, r7
    4afa:	4802      	ldr	r0, [pc, #8]	; (4b04 <_ZN19L2CAPSignalingClass13addConnectionEthhPhttth+0x54>)
    4afc:	f7ff fc54 	bl	43a8 <_ZN8HCIClass10sendAclPktEthhPv>
}
    4b00:	b007      	add	sp, #28
    4b02:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4b04:	20000480 	.word	0x20000480

00004b08 <_ZN19L2CAPSignalingClass16removeConnectionEht>:
  }
}

void L2CAPSignalingClass::removeConnection(uint8_t /*handle*/, uint16_t /*reason*/)
{
}
    4b08:	4770      	bx	lr
	...

00004b0c <_ZN19L2CAPSignalingClass32connectionParameterUpdateRequestEthhPh>:
  _minInterval = minInterval;
  _maxInterval = maxInterval;
}

void L2CAPSignalingClass::connectionParameterUpdateRequest(uint16_t handle, uint8_t identifier, uint8_t dlen, uint8_t data[])
{
    4b0c:	b5f0      	push	{r4, r5, r6, r7, lr}
    4b0e:	b087      	sub	sp, #28
    4b10:	0007      	movs	r7, r0
    4b12:	000e      	movs	r6, r1
    4b14:	9203      	str	r2, [sp, #12]
    4b16:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    uint16_t maxInterval;
    uint16_t latency;
    uint16_t supervisionTimeout;
  } *request = (L2CAPConnectionParameterUpdateRequest*)data;

  if (dlen < sizeof(L2CAPConnectionParameterUpdateRequest)) {
    4b18:	2b07      	cmp	r3, #7
    4b1a:	d941      	bls.n	4ba0 <_ZN19L2CAPSignalingClass32connectionParameterUpdateRequestEthhPh+0x94>
  struct __attribute__ ((packed)) L2CAPConnectionParameterUpdateResponse {
    uint8_t code;
    uint8_t identifier;
    uint16_t length;
    uint16_t value;
  } response = { CONNECTION_PARAMETER_UPDATE_RESPONSE, identifier, 2, 0x0000 };
    4b1c:	ad04      	add	r5, sp, #16
    4b1e:	2100      	movs	r1, #0
    4b20:	2206      	movs	r2, #6
    4b22:	0028      	movs	r0, r5
    4b24:	f004 fc38 	bl	9398 <memset>
    4b28:	2313      	movs	r3, #19
    4b2a:	702b      	strb	r3, [r5, #0]
    4b2c:	3b11      	subs	r3, #17
    4b2e:	806b      	strh	r3, [r5, #2]
    4b30:	466b      	mov	r3, sp
    4b32:	7b1b      	ldrb	r3, [r3, #12]
    4b34:	706b      	strb	r3, [r5, #1]

  if (_minInterval && _maxInterval) {
    4b36:	88b9      	ldrh	r1, [r7, #4]
    4b38:	2900      	cmp	r1, #0
    4b3a:	d010      	beq.n	4b5e <_ZN19L2CAPSignalingClass32connectionParameterUpdateRequestEthhPh+0x52>
    4b3c:	88fa      	ldrh	r2, [r7, #6]
    4b3e:	2a00      	cmp	r2, #0
    4b40:	d00d      	beq.n	4b5e <_ZN19L2CAPSignalingClass32connectionParameterUpdateRequestEthhPh+0x52>
    if (request->minInterval < _minInterval || request->maxInterval > _maxInterval) {
    4b42:	7863      	ldrb	r3, [r4, #1]
    4b44:	7820      	ldrb	r0, [r4, #0]
    4b46:	021b      	lsls	r3, r3, #8
    4b48:	4303      	orrs	r3, r0
    4b4a:	428b      	cmp	r3, r1
    4b4c:	db05      	blt.n	4b5a <_ZN19L2CAPSignalingClass32connectionParameterUpdateRequestEthhPh+0x4e>
    4b4e:	78e3      	ldrb	r3, [r4, #3]
    4b50:	78a1      	ldrb	r1, [r4, #2]
    4b52:	021b      	lsls	r3, r3, #8
    4b54:	430b      	orrs	r3, r1
    4b56:	4293      	cmp	r3, r2
    4b58:	dd01      	ble.n	4b5e <_ZN19L2CAPSignalingClass32connectionParameterUpdateRequestEthhPh+0x52>
      response.value = 0x0001; // reject
    4b5a:	2301      	movs	r3, #1
    4b5c:	80ab      	strh	r3, [r5, #4]
    }
  }

  HCI.sendAclPkt(handle, SIGNALING_CID, sizeof(response), &response);
    4b5e:	4f11      	ldr	r7, [pc, #68]	; (4ba4 <_ZN19L2CAPSignalingClass32connectionParameterUpdateRequestEthhPh+0x98>)
    4b60:	2306      	movs	r3, #6
    4b62:	9500      	str	r5, [sp, #0]
    4b64:	2205      	movs	r2, #5
    4b66:	0031      	movs	r1, r6
    4b68:	0038      	movs	r0, r7
    4b6a:	f7ff fc1d 	bl	43a8 <_ZN8HCIClass10sendAclPktEthhPv>

  if (response.value == 0x0000) {
    4b6e:	88ab      	ldrh	r3, [r5, #4]
    4b70:	2b00      	cmp	r3, #0
    4b72:	d115      	bne.n	4ba0 <_ZN19L2CAPSignalingClass32connectionParameterUpdateRequestEthhPh+0x94>
    HCI.leConnUpdate(handle, request->minInterval, request->maxInterval, request->latency, request->supervisionTimeout);
    4b74:	78e3      	ldrb	r3, [r4, #3]
    4b76:	78a2      	ldrb	r2, [r4, #2]
    4b78:	021b      	lsls	r3, r3, #8
    4b7a:	4313      	orrs	r3, r2
    4b7c:	7862      	ldrb	r2, [r4, #1]
    4b7e:	7821      	ldrb	r1, [r4, #0]
    4b80:	0212      	lsls	r2, r2, #8
    4b82:	430a      	orrs	r2, r1
    4b84:	79e1      	ldrb	r1, [r4, #7]
    4b86:	79a0      	ldrb	r0, [r4, #6]
    4b88:	0209      	lsls	r1, r1, #8
    4b8a:	4301      	orrs	r1, r0
    4b8c:	9101      	str	r1, [sp, #4]
    4b8e:	7961      	ldrb	r1, [r4, #5]
    4b90:	7920      	ldrb	r0, [r4, #4]
    4b92:	0209      	lsls	r1, r1, #8
    4b94:	4301      	orrs	r1, r0
    4b96:	9100      	str	r1, [sp, #0]
    4b98:	0038      	movs	r0, r7
    4b9a:	0031      	movs	r1, r6
    4b9c:	f7ff fed8 	bl	4950 <_ZN8HCIClass12leConnUpdateEttttt>
  }
}
    4ba0:	b007      	add	sp, #28
    4ba2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4ba4:	20000480 	.word	0x20000480

00004ba8 <_ZN19L2CAPSignalingClass10handleDataEthPh>:
{
    4ba8:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if (dlen < sizeof(L2CAPSignalingHdr)) {
    4baa:	2a03      	cmp	r2, #3
    4bac:	d910      	bls.n	4bd0 <_ZN19L2CAPSignalingClass10handleDataEthPh+0x28>
  if (dlen != (sizeof(L2CAPSignalingHdr) + l2capSignalingHdr->length)) {
    4bae:	78dc      	ldrb	r4, [r3, #3]
    4bb0:	789d      	ldrb	r5, [r3, #2]
    4bb2:	0224      	lsls	r4, r4, #8
    4bb4:	432c      	orrs	r4, r5
    4bb6:	1d25      	adds	r5, r4, #4
    4bb8:	42aa      	cmp	r2, r5
    4bba:	d109      	bne.n	4bd0 <_ZN19L2CAPSignalingClass10handleDataEthPh+0x28>
  if (code == CONNECTION_PARAMETER_UPDATE_REQUEST) {
    4bbc:	781a      	ldrb	r2, [r3, #0]
    4bbe:	2a12      	cmp	r2, #18
    4bc0:	d106      	bne.n	4bd0 <_ZN19L2CAPSignalingClass10handleDataEthPh+0x28>
    connectionParameterUpdateRequest(connectionHandle, identifier, length, data);
    4bc2:	785a      	ldrb	r2, [r3, #1]
    4bc4:	b2e4      	uxtb	r4, r4
  data = &data[sizeof(L2CAPSignalingHdr)];
    4bc6:	3304      	adds	r3, #4
    connectionParameterUpdateRequest(connectionHandle, identifier, length, data);
    4bc8:	9300      	str	r3, [sp, #0]
    4bca:	0023      	movs	r3, r4
    4bcc:	f7ff ff9e 	bl	4b0c <_ZN19L2CAPSignalingClass32connectionParameterUpdateRequestEthhPh>
}
    4bd0:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
	...

00004bd4 <_GLOBAL__sub_I__ZN19L2CAPSignalingClassC2Ev>:
  _maxInterval(0)
    4bd4:	4b06      	ldr	r3, [pc, #24]	; (4bf0 <_GLOBAL__sub_I__ZN19L2CAPSignalingClassC2Ev+0x1c>)
    4bd6:	4807      	ldr	r0, [pc, #28]	; (4bf4 <_GLOBAL__sub_I__ZN19L2CAPSignalingClassC2Ev+0x20>)
    4bd8:	3308      	adds	r3, #8

void L2CAPSignalingClass::connectionParameterUpdateResponse(uint16_t /*handle*/, uint8_t /*identifier*/, uint8_t /*dlen*/, uint8_t /*data*/[])
{
}

L2CAPSignalingClass L2CAPSignaling;
    4bda:	b510      	push	{r4, lr}
  _maxInterval(0)
    4bdc:	6003      	str	r3, [r0, #0]
    4bde:	2300      	movs	r3, #0
L2CAPSignalingClass L2CAPSignaling;
    4be0:	4a05      	ldr	r2, [pc, #20]	; (4bf8 <_GLOBAL__sub_I__ZN19L2CAPSignalingClassC2Ev+0x24>)
    4be2:	4906      	ldr	r1, [pc, #24]	; (4bfc <_GLOBAL__sub_I__ZN19L2CAPSignalingClassC2Ev+0x28>)
  _maxInterval(0)
    4be4:	8083      	strh	r3, [r0, #4]
    4be6:	80c3      	strh	r3, [r0, #6]
L2CAPSignalingClass L2CAPSignaling;
    4be8:	f002 fc06 	bl	73f8 <__aeabi_atexit>
    4bec:	bd10      	pop	{r4, pc}
    4bee:	46c0      	nop			; (mov r8, r8)
    4bf0:	0000b8bc 	.word	0x0000b8bc
    4bf4:	200005ac 	.word	0x200005ac
    4bf8:	20000000 	.word	0x20000000
    4bfc:	00004aa1 	.word	0x00004aa1

00004c00 <setup>:
#include "DIService.h"
#include "CSCService.h"

void setup()
{
    Serial.begin(9600);
    4c00:	2196      	movs	r1, #150	; 0x96
{
    4c02:	b510      	push	{r4, lr}
    Serial.begin(9600);
    4c04:	4c0f      	ldr	r4, [pc, #60]	; (4c44 <setup+0x44>)
    4c06:	0189      	lsls	r1, r1, #6
    4c08:	0020      	movs	r0, r4
    4c0a:	f000 fe41 	bl	5890 <_ZN7Serial_5beginEm>
    while (!Serial);
    4c0e:	0020      	movs	r0, r4
    4c10:	f000 fe40 	bl	5894 <_ZN7Serial_cvbEv>
    4c14:	2800      	cmp	r0, #0
    4c16:	d0fa      	beq.n	4c0e <setup+0xe>

    if (!BLE.begin()) {
    4c18:	480b      	ldr	r0, [pc, #44]	; (4c48 <setup+0x48>)
    4c1a:	f7fd ff7d 	bl	2b18 <_ZN14BLELocalDevice5beginEv>
    4c1e:	2800      	cmp	r0, #0
    4c20:	d104      	bne.n	4c2c <setup+0x2c>
        Serial.println("starting BLE failed!");
    4c22:	490a      	ldr	r1, [pc, #40]	; (4c4c <setup+0x4c>)
    4c24:	0020      	movs	r0, r4
    4c26:	f000 fc57 	bl	54d8 <_ZN5Print7printlnEPKc>
    4c2a:	e7fe      	b.n	4c2a <setup+0x2a>
        while (1);
    }
    
    x_cscService.setup();
    4c2c:	4808      	ldr	r0, [pc, #32]	; (4c50 <setup+0x50>)
    4c2e:	f000 f8af 	bl	4d90 <_ZN10CSCService5setupEv>
    x_diService.setup();
    4c32:	4808      	ldr	r0, [pc, #32]	; (4c54 <setup+0x54>)
    4c34:	f000 f98a 	bl	4f4c <_ZN9DIService5setupEv>
    //x_ledService.setup();
    
    Serial.println("waiting for BLE connection");
    4c38:	4907      	ldr	r1, [pc, #28]	; (4c58 <setup+0x58>)
    4c3a:	0020      	movs	r0, r4
    4c3c:	f000 fc4c 	bl	54d8 <_ZN5Print7printlnEPKc>
}
    4c40:	bd10      	pop	{r4, pc}
    4c42:	46c0      	nop			; (mov r8, r8)
    4c44:	2000062c 	.word	0x2000062c
    4c48:	200002bc 	.word	0x200002bc
    4c4c:	0000b8ff 	.word	0x0000b8ff
    4c50:	200005c4 	.word	0x200005c4
    4c54:	200005f0 	.word	0x200005f0
    4c58:	0000b914 	.word	0x0000b914

00004c5c <loop>:

void loop()
{
    4c5c:	b510      	push	{r4, lr}
    4c5e:	b086      	sub	sp, #24
    BLEDevice central = BLE.central();
    4c60:	4668      	mov	r0, sp
    4c62:	491c      	ldr	r1, [pc, #112]	; (4cd4 <loop+0x78>)
    4c64:	f7fd ffda 	bl	2c1c <_ZN14BLELocalDevice7centralEv>
    if (central) {
    4c68:	4668      	mov	r0, sp
    4c6a:	f7fd fb2f 	bl	22cc <_ZNK9BLEDevicecvbEv>
    4c6e:	2800      	cmp	r0, #0
    4c70:	d02a      	beq.n	4cc8 <loop+0x6c>
        Serial.print("connected to central: ");
    4c72:	4c19      	ldr	r4, [pc, #100]	; (4cd8 <loop+0x7c>)
    4c74:	4919      	ldr	r1, [pc, #100]	; (4cdc <loop+0x80>)
    4c76:	0020      	movs	r0, r4
    4c78:	f000 fc17 	bl	54aa <_ZN5Print5printEPKc>
        Serial.println(central.address());
    4c7c:	4669      	mov	r1, sp
    4c7e:	a803      	add	r0, sp, #12
    4c80:	f7fd fafc 	bl	227c <_ZNK9BLEDevice7addressEv>
    4c84:	a903      	add	r1, sp, #12
    4c86:	0020      	movs	r0, r4
    4c88:	f000 fc1c 	bl	54c4 <_ZN5Print7printlnERK6String>
    4c8c:	a803      	add	r0, sp, #12
    4c8e:	f001 ff19 	bl	6ac4 <_ZN6StringD1Ev>
        
        while (central.connected())
    4c92:	4668      	mov	r0, sp
    4c94:	f7fd fb42 	bl	231c <_ZNK9BLEDevice9connectedEv>
    4c98:	2800      	cmp	r0, #0
    4c9a:	d006      	beq.n	4caa <loop+0x4e>
        {
            x_cscService.runService();
    4c9c:	4810      	ldr	r0, [pc, #64]	; (4ce0 <loop+0x84>)
    4c9e:	f000 f929 	bl	4ef4 <_ZN10CSCService10runServiceEv>
            x_diService.runService();
    4ca2:	4810      	ldr	r0, [pc, #64]	; (4ce4 <loop+0x88>)
    4ca4:	f000 f9fe 	bl	50a4 <_ZN9DIService10runServiceEv>
        while (central.connected())
    4ca8:	e7f3      	b.n	4c92 <loop+0x36>
            //x_ledService.runService();
        }
        
        Serial.print("disconnected from central: ");
    4caa:	490f      	ldr	r1, [pc, #60]	; (4ce8 <loop+0x8c>)
    4cac:	0020      	movs	r0, r4
    4cae:	f000 fbfc 	bl	54aa <_ZN5Print5printEPKc>
        Serial.println(central.address());
    4cb2:	4669      	mov	r1, sp
    4cb4:	a803      	add	r0, sp, #12
    4cb6:	f7fd fae1 	bl	227c <_ZNK9BLEDevice7addressEv>
    4cba:	a903      	add	r1, sp, #12
    4cbc:	0020      	movs	r0, r4
    4cbe:	f000 fc01 	bl	54c4 <_ZN5Print7printlnERK6String>
    4cc2:	a803      	add	r0, sp, #12
    4cc4:	f001 fefe 	bl	6ac4 <_ZN6StringD1Ev>
    BLEDevice central = BLE.central();
    4cc8:	4668      	mov	r0, sp
    4cca:	f7fd faae 	bl	222a <_ZN9BLEDeviceD1Ev>
    }
}
    4cce:	b006      	add	sp, #24
    4cd0:	bd10      	pop	{r4, pc}
    4cd2:	46c0      	nop			; (mov r8, r8)
    4cd4:	200002bc 	.word	0x200002bc
    4cd8:	2000062c 	.word	0x2000062c
    4cdc:	0000b8cc 	.word	0x0000b8cc
    4ce0:	200005c4 	.word	0x200005c4
    4ce4:	200005f0 	.word	0x200005f0
    4ce8:	0000b8e3 	.word	0x0000b8e3

00004cec <_ZN14BatteryService3endEv>:
        }
    }
}

void BatteryService::end()
{
    4cec:	b510      	push	{r4, lr}
    4cee:	0004      	movs	r4, r0
    delete m_batteryService;
    4cf0:	6880      	ldr	r0, [r0, #8]
    4cf2:	2800      	cmp	r0, #0
    4cf4:	d002      	beq.n	4cfc <_ZN14BatteryService3endEv+0x10>
    4cf6:	6803      	ldr	r3, [r0, #0]
    4cf8:	685b      	ldr	r3, [r3, #4]
    4cfa:	4798      	blx	r3
    delete m_batteryLevelCharacteristic;
    4cfc:	68e0      	ldr	r0, [r4, #12]
    4cfe:	2800      	cmp	r0, #0
    4d00:	d002      	beq.n	4d08 <_ZN14BatteryService3endEv+0x1c>
    4d02:	6803      	ldr	r3, [r0, #0]
    4d04:	685b      	ldr	r3, [r3, #4]
    4d06:	4798      	blx	r3
}
    4d08:	bd10      	pop	{r4, pc}

00004d0a <_ZN14BatteryServiceD1Ev>:
BatteryService::~BatteryService()
    4d0a:	b510      	push	{r4, lr}
    4d0c:	0004      	movs	r4, r0
    end();
    4d0e:	f7ff ffed 	bl	4cec <_ZN14BatteryService3endEv>
}
    4d12:	0020      	movs	r0, r4
    4d14:	bd10      	pop	{r4, pc}
	...

00004d18 <_GLOBAL__sub_I__ZN14BatteryServiceC2Ev>:
BatteryService::BatteryService() : m_lastLevel(0), m_lastCheckTime(0)
    4d18:	2300      	movs	r3, #0

BatteryService x_batteryService;
    4d1a:	b510      	push	{r4, lr}
BatteryService::BatteryService() : m_lastLevel(0), m_lastCheckTime(0)
    4d1c:	4803      	ldr	r0, [pc, #12]	; (4d2c <_GLOBAL__sub_I__ZN14BatteryServiceC2Ev+0x14>)
BatteryService x_batteryService;
    4d1e:	4a04      	ldr	r2, [pc, #16]	; (4d30 <_GLOBAL__sub_I__ZN14BatteryServiceC2Ev+0x18>)
    4d20:	4904      	ldr	r1, [pc, #16]	; (4d34 <_GLOBAL__sub_I__ZN14BatteryServiceC2Ev+0x1c>)
BatteryService::BatteryService() : m_lastLevel(0), m_lastCheckTime(0)
    4d22:	6003      	str	r3, [r0, #0]
    4d24:	6043      	str	r3, [r0, #4]
BatteryService x_batteryService;
    4d26:	f002 fb67 	bl	73f8 <__aeabi_atexit>
    4d2a:	bd10      	pop	{r4, pc}
    4d2c:	200005b4 	.word	0x200005b4
    4d30:	20000000 	.word	0x20000000
    4d34:	00004d0b 	.word	0x00004d0b

00004d38 <_Z22handle_CSCNotificationv>:
// TIMER HANDLER
//
void handle_CSCNotification()
{
    //Serial.print("T");
    x_cscService.m_notify = true;
    4d38:	2201      	movs	r2, #1
    4d3a:	4b01      	ldr	r3, [pc, #4]	; (4d40 <_Z22handle_CSCNotificationv+0x8>)
    4d3c:	701a      	strb	r2, [r3, #0]
    //x_cscService.notifyMeasurementData();
}
    4d3e:	4770      	bx	lr
    4d40:	200005c4 	.word	0x200005c4

00004d44 <_ZN10CSCServiceC1Ev>:
m_cumulativeCrankRevolution(0), m_lastCrankEventTime(0)
    4d44:	2300      	movs	r3, #0
CSCService::CSCService() : 
    4d46:	b510      	push	{r4, lr}
    4d48:	0004      	movs	r4, r0
m_cumulativeCrankRevolution(0), m_lastCrankEventTime(0)
    4d4a:	7043      	strb	r3, [r0, #1]
    4d4c:	6043      	str	r3, [r0, #4]
    4d4e:	8103      	strh	r3, [r0, #8]
    4d50:	8143      	strh	r3, [r0, #10]
    4d52:	8183      	strh	r3, [r0, #12]
    m_notify = false;
    4d54:	7003      	strb	r3, [r0, #0]
    x_tc5_tick.begin(1000000); // 1 sec tick
    4d56:	4903      	ldr	r1, [pc, #12]	; (4d64 <_ZN10CSCServiceC1Ev+0x20>)
    4d58:	4803      	ldr	r0, [pc, #12]	; (4d68 <_ZN10CSCServiceC1Ev+0x24>)
    4d5a:	f000 fa2f 	bl	51bc <_ZN8Tc5Timer5beginEm>
}
    4d5e:	0020      	movs	r0, r4
    4d60:	bd10      	pop	{r4, pc}
    4d62:	46c0      	nop			; (mov r8, r8)
    4d64:	000f4240 	.word	0x000f4240
    4d68:	20000614 	.word	0x20000614

00004d6c <_ZN10CSCService18setMeasurementDataEv>:
    m_data[0] = m_flags;
    4d6c:	7843      	ldrb	r3, [r0, #1]
    4d6e:	7383      	strb	r3, [r0, #14]
    m_data[1] = (m_cumulativeWheelRevolution >> 24) & 0xff;
    4d70:	6843      	ldr	r3, [r0, #4]
    4d72:	0e1a      	lsrs	r2, r3, #24
    4d74:	73c2      	strb	r2, [r0, #15]
    m_data[2] = (m_cumulativeWheelRevolution >> 16) & 0xff;
    4d76:	0c1a      	lsrs	r2, r3, #16
    4d78:	7402      	strb	r2, [r0, #16]
    m_data[4] = (m_cumulativeWheelRevolution) & 0xff;
    4d7a:	7483      	strb	r3, [r0, #18]
    m_data[3] = (m_cumulativeWheelRevolution >> 8)  & 0xff;
    4d7c:	0a1a      	lsrs	r2, r3, #8
    m_data[5] = (m_lastWheelEventTime >> 8) & 0xff;
    4d7e:	8903      	ldrh	r3, [r0, #8]
    m_data[3] = (m_cumulativeWheelRevolution >> 8)  & 0xff;
    4d80:	7442      	strb	r2, [r0, #17]
    m_data[6] = (m_lastWheelEventTime) & 0xff;
    4d82:	7503      	strb	r3, [r0, #20]
    m_data[5] = (m_lastWheelEventTime >> 8) & 0xff;
    4d84:	0a1a      	lsrs	r2, r3, #8
    m_data[7] = 0;
    4d86:	2300      	movs	r3, #0
    m_data[5] = (m_lastWheelEventTime >> 8) & 0xff;
    4d88:	74c2      	strb	r2, [r0, #19]
    m_data[7] = 0;
    4d8a:	7543      	strb	r3, [r0, #21]
}
    4d8c:	4770      	bx	lr
	...

00004d90 <_ZN10CSCService5setupEv>:
{
    4d90:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    4d92:	0004      	movs	r4, r0
    m_cscService = new BLEService("1816");
    4d94:	2008      	movs	r0, #8
    4d96:	f000 fb57 	bl	5448 <_Znwj>
    4d9a:	0005      	movs	r5, r0
    4d9c:	492c      	ldr	r1, [pc, #176]	; (4e50 <_ZN10CSCService5setupEv+0xc0>)
    4d9e:	f7fd fb35 	bl	240c <_ZN10BLEServiceC1EPKc>
    4da2:	61e5      	str	r5, [r4, #28]
    m_cscMeasurement = new BLECharacteristic("2A5B", BLENotify, 7, true); // 11 -> 7
    4da4:	2008      	movs	r0, #8
    4da6:	f000 fb4f 	bl	5448 <_Znwj>
    4daa:	2601      	movs	r6, #1
    4dac:	0005      	movs	r5, r0
    4dae:	2307      	movs	r3, #7
    4db0:	9600      	str	r6, [sp, #0]
    4db2:	2210      	movs	r2, #16
    4db4:	4927      	ldr	r1, [pc, #156]	; (4e54 <_ZN10CSCService5setupEv+0xc4>)
    4db6:	f7fd fa0f 	bl	21d8 <_ZN17BLECharacteristicC1EPKchib>
    4dba:	6225      	str	r5, [r4, #32]
    m_cscFeature = new BLEWordCharacteristic("2A5C", BLERead);
    4dbc:	2008      	movs	r0, #8
    4dbe:	f000 fb43 	bl	5448 <_Znwj>
    4dc2:	0005      	movs	r5, r0
    4dc4:	2202      	movs	r2, #2
    4dc6:	4924      	ldr	r1, [pc, #144]	; (4e58 <_ZN10CSCService5setupEv+0xc8>)
    4dc8:	f7fd fbf6 	bl	25b8 <_ZN21BLEWordCharacteristicC1EPKch>
    4dcc:	6265      	str	r5, [r4, #36]	; 0x24
    m_sensorLocation = new BLEByteCharacteristic("2A5D", BLERead);
    4dce:	2008      	movs	r0, #8
    4dd0:	f000 fb3a 	bl	5448 <_Znwj>
    4dd4:	0005      	movs	r5, r0
    4dd6:	2202      	movs	r2, #2
    4dd8:	4920      	ldr	r1, [pc, #128]	; (4e5c <_ZN10CSCService5setupEv+0xcc>)
    4dda:	f7fd fbcd 	bl	2578 <_ZN21BLEByteCharacteristicC1EPKch>
    4dde:	62a5      	str	r5, [r4, #40]	; 0x28
    BLE.setLocalName("K-Roller");
    4de0:	4d1f      	ldr	r5, [pc, #124]	; (4e60 <_ZN10CSCService5setupEv+0xd0>)
    4de2:	4920      	ldr	r1, [pc, #128]	; (4e64 <_ZN10CSCService5setupEv+0xd4>)
    4de4:	0028      	movs	r0, r5
    4de6:	f7fd ff01 	bl	2bec <_ZN14BLELocalDevice12setLocalNameEPKc>
    BLE.setAdvertisedService(*m_cscService);
    4dea:	0028      	movs	r0, r5
    4dec:	69e1      	ldr	r1, [r4, #28]
    4dee:	f7fd fef1 	bl	2bd4 <_ZN14BLELocalDevice20setAdvertisedServiceERK10BLEService>
    m_cscService->addCharacteristic(*m_cscMeasurement);
    4df2:	6a21      	ldr	r1, [r4, #32]
    4df4:	69e0      	ldr	r0, [r4, #28]
    4df6:	f7fd fb25 	bl	2444 <_ZN10BLEService17addCharacteristicER17BLECharacteristic>
    m_cscService->addCharacteristic(*m_cscFeature);
    4dfa:	6a61      	ldr	r1, [r4, #36]	; 0x24
    4dfc:	69e0      	ldr	r0, [r4, #28]
    4dfe:	f7fd fb21 	bl	2444 <_ZN10BLEService17addCharacteristicER17BLECharacteristic>
    m_cscService->addCharacteristic(*m_sensorLocation);
    4e02:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    4e04:	69e0      	ldr	r0, [r4, #28]
    4e06:	f7fd fb1d 	bl	2444 <_ZN10BLEService17addCharacteristicER17BLECharacteristic>
    BLE.addService(*m_cscService);
    4e0a:	69e1      	ldr	r1, [r4, #28]
    4e0c:	0028      	movs	r0, r5
    4e0e:	f7fd fef5 	bl	2bfc <_ZN14BLELocalDevice10addServiceER10BLEService>
    setMeasurementData();
    4e12:	0020      	movs	r0, r4
    4e14:	f7ff ffaa 	bl	4d6c <_ZN10CSCService18setMeasurementDataEv>
    m_cscMeasurement->writeValue(m_data, 1); // 
    4e18:	0021      	movs	r1, r4
    4e1a:	0032      	movs	r2, r6
    4e1c:	310e      	adds	r1, #14
    4e1e:	6a20      	ldr	r0, [r4, #32]
    4e20:	f7fd f9f3 	bl	220a <_ZN17BLECharacteristic10writeValueEPKhi>
  T result;
  unsigned char* src = (unsigned char*)&value;
  unsigned char* dst = (unsigned char*)&result;

  for (int i = 0; i < sizeof(T); i++) {
    dst[i] = src[sizeof(T) - i - 1];
    4e24:	210e      	movs	r1, #14
    4e26:	2300      	movs	r3, #0
    4e28:	4469      	add	r1, sp
    4e2a:	704e      	strb	r6, [r1, #1]
    4e2c:	700b      	strb	r3, [r1, #0]
  return BLECharacteristic::writeValue((uint8_t*)&value, sizeof(T));
    4e2e:	2202      	movs	r2, #2
    4e30:	6a60      	ldr	r0, [r4, #36]	; 0x24
    4e32:	f7fd f9ea 	bl	220a <_ZN17BLECharacteristic10writeValueEPKhi>
    4e36:	210d      	movs	r1, #13
    4e38:	230c      	movs	r3, #12
    4e3a:	4469      	add	r1, sp
    4e3c:	0032      	movs	r2, r6
    m_sensorLocation->writeValue(12); // rear wheel
    4e3e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    4e40:	700b      	strb	r3, [r1, #0]
    4e42:	f7fd f9e2 	bl	220a <_ZN17BLECharacteristic10writeValueEPKhi>
    BLE.advertise();
    4e46:	0028      	movs	r0, r5
    4e48:	f7fd fee0 	bl	2c0c <_ZN14BLELocalDevice9advertiseEv>
}
    4e4c:	bd7f      	pop	{r0, r1, r2, r3, r4, r5, r6, pc}
    4e4e:	46c0      	nop			; (mov r8, r8)
    4e50:	0000b92f 	.word	0x0000b92f
    4e54:	0000b934 	.word	0x0000b934
    4e58:	0000b939 	.word	0x0000b939
    4e5c:	0000b93e 	.word	0x0000b93e
    4e60:	200002bc 	.word	0x200002bc
    4e64:	0000b943 	.word	0x0000b943

00004e68 <_ZN10CSCService21notifyMeasurementDataEv>:
    uint32_t time = m_lastWheelEventTime + 1024;
    4e68:	2280      	movs	r2, #128	; 0x80
{
    4e6a:	b510      	push	{r4, lr}
    4e6c:	0004      	movs	r4, r0
    m_cumulativeWheelRevolution += 1;
    4e6e:	6843      	ldr	r3, [r0, #4]
    uint32_t time = m_lastWheelEventTime + 1024;
    4e70:	00d2      	lsls	r2, r2, #3
    m_cumulativeWheelRevolution += 1;
    4e72:	3301      	adds	r3, #1
    4e74:	6043      	str	r3, [r0, #4]
    uint32_t time = m_lastWheelEventTime + 1024;
    4e76:	8903      	ldrh	r3, [r0, #8]
    4e78:	189b      	adds	r3, r3, r2
    m_lastWheelEventTime = time % 65536; // rolls over every 64 seconds
    4e7a:	8103      	strh	r3, [r0, #8]
    setMeasurementData();
    4e7c:	f7ff ff76 	bl	4d6c <_ZN10CSCService18setMeasurementDataEv>
    m_cscMeasurement->writeValue(m_data, 7);
    4e80:	0021      	movs	r1, r4
    4e82:	2207      	movs	r2, #7
    4e84:	310e      	adds	r1, #14
    4e86:	6a20      	ldr	r0, [r4, #32]
    4e88:	f7fd f9bf 	bl	220a <_ZN17BLECharacteristic10writeValueEPKhi>
}
    4e8c:	bd10      	pop	{r4, pc}

00004e8e <_ZN10CSCService3endEv>:
{
    4e8e:	b510      	push	{r4, lr}
    4e90:	0004      	movs	r4, r0
    delete m_cscService;
    4e92:	69c0      	ldr	r0, [r0, #28]
    4e94:	2800      	cmp	r0, #0
    4e96:	d002      	beq.n	4e9e <_ZN10CSCService3endEv+0x10>
    4e98:	6803      	ldr	r3, [r0, #0]
    4e9a:	685b      	ldr	r3, [r3, #4]
    4e9c:	4798      	blx	r3
    delete m_cscMeasurement;
    4e9e:	6a20      	ldr	r0, [r4, #32]
    4ea0:	2800      	cmp	r0, #0
    4ea2:	d002      	beq.n	4eaa <_ZN10CSCService3endEv+0x1c>
    4ea4:	6803      	ldr	r3, [r0, #0]
    4ea6:	685b      	ldr	r3, [r3, #4]
    4ea8:	4798      	blx	r3
    delete m_cscFeature;
    4eaa:	6a60      	ldr	r0, [r4, #36]	; 0x24
    4eac:	2800      	cmp	r0, #0
    4eae:	d002      	beq.n	4eb6 <_ZN10CSCService3endEv+0x28>
    4eb0:	6803      	ldr	r3, [r0, #0]
    4eb2:	685b      	ldr	r3, [r3, #4]
    4eb4:	4798      	blx	r3
    delete m_sensorLocation;
    4eb6:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    4eb8:	2800      	cmp	r0, #0
    4eba:	d002      	beq.n	4ec2 <_ZN10CSCService3endEv+0x34>
    4ebc:	6803      	ldr	r3, [r0, #0]
    4ebe:	685b      	ldr	r3, [r3, #4]
    4ec0:	4798      	blx	r3
}
    4ec2:	bd10      	pop	{r4, pc}

00004ec4 <_ZN10CSCServiceD1Ev>:
CSCService::~CSCService()
    4ec4:	b510      	push	{r4, lr}
    4ec6:	0004      	movs	r4, r0
    end();
    4ec8:	f7ff ffe1 	bl	4e8e <_ZN10CSCService3endEv>
}
    4ecc:	0020      	movs	r0, r4
    4ece:	bd10      	pop	{r4, pc}

00004ed0 <_GLOBAL__sub_I__ZN10CSCServiceC2Ev>:
}
    4ed0:	b510      	push	{r4, lr}
CSCService x_cscService;
    4ed2:	4c05      	ldr	r4, [pc, #20]	; (4ee8 <_GLOBAL__sub_I__ZN10CSCServiceC2Ev+0x18>)
    4ed4:	0020      	movs	r0, r4
    4ed6:	f7ff ff35 	bl	4d44 <_ZN10CSCServiceC1Ev>
    4eda:	4a04      	ldr	r2, [pc, #16]	; (4eec <_GLOBAL__sub_I__ZN10CSCServiceC2Ev+0x1c>)
    4edc:	4904      	ldr	r1, [pc, #16]	; (4ef0 <_GLOBAL__sub_I__ZN10CSCServiceC2Ev+0x20>)
    4ede:	0020      	movs	r0, r4
    4ee0:	f002 fa8a 	bl	73f8 <__aeabi_atexit>
}
    4ee4:	bd10      	pop	{r4, pc}
    4ee6:	46c0      	nop			; (mov r8, r8)
    4ee8:	200005c4 	.word	0x200005c4
    4eec:	20000000 	.word	0x20000000
    4ef0:	00004ec5 	.word	0x00004ec5

00004ef4 <_ZN10CSCService10runServiceEv>:
{
    4ef4:	b570      	push	{r4, r5, r6, lr}
    if (m_flags == 0) {
    4ef6:	7843      	ldrb	r3, [r0, #1]
{
    4ef8:	0004      	movs	r4, r0
    if (m_flags == 0) {
    4efa:	2b00      	cmp	r3, #0
    4efc:	d109      	bne.n	4f12 <_ZN10CSCService10runServiceEv+0x1e>
        x_tc5_tick.addCallback(&handle_CSCNotification);
    4efe:	4d0e      	ldr	r5, [pc, #56]	; (4f38 <_ZN10CSCService10runServiceEv+0x44>)
        m_flags =  0x01; // wheel revolution data present
    4f00:	3301      	adds	r3, #1
    4f02:	7043      	strb	r3, [r0, #1]
        x_tc5_tick.addCallback(&handle_CSCNotification);
    4f04:	490d      	ldr	r1, [pc, #52]	; (4f3c <_ZN10CSCService10runServiceEv+0x48>)
    4f06:	0028      	movs	r0, r5
    4f08:	f000 f910 	bl	512c <_ZN8Tc5Timer11addCallbackEPFvvE>
        x_tc5_tick.start();
    4f0c:	0028      	movs	r0, r5
    4f0e:	f000 f99f 	bl	5250 <_ZN8Tc5Timer5startEv>
    BLE.poll();
    4f12:	480b      	ldr	r0, [pc, #44]	; (4f40 <_ZN10CSCService10runServiceEv+0x4c>)
    4f14:	f7fd f990 	bl	2238 <_ZN9BLEDevice4pollEv>
   if (m_flags == 0x01 && m_notify) {
    4f18:	7863      	ldrb	r3, [r4, #1]
    4f1a:	2b01      	cmp	r3, #1
    4f1c:	d10b      	bne.n	4f36 <_ZN10CSCService10runServiceEv+0x42>
    4f1e:	7823      	ldrb	r3, [r4, #0]
    4f20:	2b00      	cmp	r3, #0
    4f22:	d008      	beq.n	4f36 <_ZN10CSCService10runServiceEv+0x42>
       m_notify = false;
    4f24:	2300      	movs	r3, #0
       Serial.print("N");
    4f26:	4907      	ldr	r1, [pc, #28]	; (4f44 <_ZN10CSCService10runServiceEv+0x50>)
       m_notify = false;
    4f28:	7023      	strb	r3, [r4, #0]
       Serial.print("N");
    4f2a:	4807      	ldr	r0, [pc, #28]	; (4f48 <_ZN10CSCService10runServiceEv+0x54>)
    4f2c:	f000 fabd 	bl	54aa <_ZN5Print5printEPKc>
       notifyMeasurementData();
    4f30:	0020      	movs	r0, r4
    4f32:	f7ff ff99 	bl	4e68 <_ZN10CSCService21notifyMeasurementDataEv>
}
    4f36:	bd70      	pop	{r4, r5, r6, pc}
    4f38:	20000614 	.word	0x20000614
    4f3c:	00004d39 	.word	0x00004d39
    4f40:	200002bc 	.word	0x200002bc
    4f44:	0000be32 	.word	0x0000be32
    4f48:	2000062c 	.word	0x2000062c

00004f4c <_ZN9DIService5setupEv>:
{
    end();
}

void DIService::setup()
{
    4f4c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    4f4e:	0004      	movs	r4, r0
    m_diService = new BLEService("180A");
    4f50:	2008      	movs	r0, #8
    4f52:	f000 fa79 	bl	5448 <_Znwj>
    4f56:	0005      	movs	r5, r0
    4f58:	4931      	ldr	r1, [pc, #196]	; (5020 <_ZN9DIService5setupEv+0xd4>)
    4f5a:	f7fd fa57 	bl	240c <_ZN10BLEServiceC1EPKc>
    4f5e:	6025      	str	r5, [r4, #0]
    m_manufacturerNameCharateristic = new BLEStringCharacteristic("2A29", BLERead, 14);
    4f60:	2008      	movs	r0, #8
    4f62:	f000 fa71 	bl	5448 <_Znwj>
    4f66:	0005      	movs	r5, r0
    4f68:	230e      	movs	r3, #14
    4f6a:	2202      	movs	r2, #2
    4f6c:	492d      	ldr	r1, [pc, #180]	; (5024 <_ZN9DIService5setupEv+0xd8>)
    4f6e:	f7fd fa87 	bl	2480 <_ZN23BLEStringCharacteristicC1EPKchi>
    4f72:	6065      	str	r5, [r4, #4]
    m_modelNumberCharacteristic = new BLEStringCharacteristic("2A24", BLERead, 5);
    4f74:	2008      	movs	r0, #8
    4f76:	f000 fa67 	bl	5448 <_Znwj>
    4f7a:	0005      	movs	r5, r0
    4f7c:	2305      	movs	r3, #5
    4f7e:	2202      	movs	r2, #2
    4f80:	4929      	ldr	r1, [pc, #164]	; (5028 <_ZN9DIService5setupEv+0xdc>)
    4f82:	f7fd fa7d 	bl	2480 <_ZN23BLEStringCharacteristicC1EPKchi>
    4f86:	60a5      	str	r5, [r4, #8]
    m_SerialNumberCharacteristic = new BLEStringCharacteristic("2A25", BLERead, 9);
    4f88:	2008      	movs	r0, #8
    4f8a:	f000 fa5d 	bl	5448 <_Znwj>
    4f8e:	0005      	movs	r5, r0
    4f90:	2309      	movs	r3, #9
    4f92:	2202      	movs	r2, #2
    4f94:	4925      	ldr	r1, [pc, #148]	; (502c <_ZN9DIService5setupEv+0xe0>)
    4f96:	f7fd fa73 	bl	2480 <_ZN23BLEStringCharacteristicC1EPKchi>
    4f9a:	60e5      	str	r5, [r4, #12]
    BLE.setLocalName("DeviceInformation");
    4f9c:	4d24      	ldr	r5, [pc, #144]	; (5030 <_ZN9DIService5setupEv+0xe4>)
    4f9e:	4925      	ldr	r1, [pc, #148]	; (5034 <_ZN9DIService5setupEv+0xe8>)
    4fa0:	0028      	movs	r0, r5
    4fa2:	f7fd fe23 	bl	2bec <_ZN14BLELocalDevice12setLocalNameEPKc>
    BLE.setAdvertisedService(*m_diService);
    4fa6:	0028      	movs	r0, r5
    4fa8:	6821      	ldr	r1, [r4, #0]
    4faa:	f7fd fe13 	bl	2bd4 <_ZN14BLELocalDevice20setAdvertisedServiceERK10BLEService>
    m_diService->addCharacteristic(*m_manufacturerNameCharateristic);
    4fae:	6861      	ldr	r1, [r4, #4]
    4fb0:	6820      	ldr	r0, [r4, #0]
    4fb2:	f7fd fa47 	bl	2444 <_ZN10BLEService17addCharacteristicER17BLECharacteristic>
    m_diService->addCharacteristic(*m_modelNumberCharacteristic);
    4fb6:	68a1      	ldr	r1, [r4, #8]
    4fb8:	6820      	ldr	r0, [r4, #0]
    4fba:	f7fd fa43 	bl	2444 <_ZN10BLEService17addCharacteristicER17BLECharacteristic>
    m_diService->addCharacteristic(*m_SerialNumberCharacteristic);
    4fbe:	68e1      	ldr	r1, [r4, #12]
    4fc0:	6820      	ldr	r0, [r4, #0]
    4fc2:	f7fd fa3f 	bl	2444 <_ZN10BLEService17addCharacteristicER17BLECharacteristic>
    BLE.addService(*m_diService);
    4fc6:	0028      	movs	r0, r5
    4fc8:	6821      	ldr	r1, [r4, #0]
    4fca:	f7fd fe17 	bl	2bfc <_ZN14BLELocalDevice10addServiceER10BLEService>
    m_manufacturerNameCharateristic->writeValue("ReadDesignTech");
    4fce:	6866      	ldr	r6, [r4, #4]
    4fd0:	4919      	ldr	r1, [pc, #100]	; (5038 <_ZN9DIService5setupEv+0xec>)
    4fd2:	a801      	add	r0, sp, #4
    4fd4:	f001 fdbe 	bl	6b54 <_ZN6StringC1EPKc>
    4fd8:	a901      	add	r1, sp, #4
    4fda:	0030      	movs	r0, r6
    4fdc:	f7fd fa5e 	bl	249c <_ZN23BLEStringCharacteristic10writeValueERK6String>
    4fe0:	a801      	add	r0, sp, #4
    4fe2:	f001 fd6f 	bl	6ac4 <_ZN6StringD1Ev>
    m_modelNumberCharacteristic->writeValue("RDT-1");
    4fe6:	68a6      	ldr	r6, [r4, #8]
    4fe8:	4914      	ldr	r1, [pc, #80]	; (503c <_ZN9DIService5setupEv+0xf0>)
    4fea:	a801      	add	r0, sp, #4
    4fec:	f001 fdb2 	bl	6b54 <_ZN6StringC1EPKc>
    4ff0:	a901      	add	r1, sp, #4
    4ff2:	0030      	movs	r0, r6
    4ff4:	f7fd fa52 	bl	249c <_ZN23BLEStringCharacteristic10writeValueERK6String>
    4ff8:	a801      	add	r0, sp, #4
    4ffa:	f001 fd63 	bl	6ac4 <_ZN6StringD1Ev>
    m_SerialNumberCharacteristic->writeValue("SN-000001");
    4ffe:	68e4      	ldr	r4, [r4, #12]
    5000:	490f      	ldr	r1, [pc, #60]	; (5040 <_ZN9DIService5setupEv+0xf4>)
    5002:	a801      	add	r0, sp, #4
    5004:	f001 fda6 	bl	6b54 <_ZN6StringC1EPKc>
    5008:	a901      	add	r1, sp, #4
    500a:	0020      	movs	r0, r4
    500c:	f7fd fa46 	bl	249c <_ZN23BLEStringCharacteristic10writeValueERK6String>
    5010:	a801      	add	r0, sp, #4
    5012:	f001 fd57 	bl	6ac4 <_ZN6StringD1Ev>
    BLE.advertise();
    5016:	0028      	movs	r0, r5
    5018:	f7fd fdf8 	bl	2c0c <_ZN14BLELocalDevice9advertiseEv>
}
    501c:	bd7f      	pop	{r0, r1, r2, r3, r4, r5, r6, pc}
    501e:	46c0      	nop			; (mov r8, r8)
    5020:	0000b94c 	.word	0x0000b94c
    5024:	0000b951 	.word	0x0000b951
    5028:	0000b956 	.word	0x0000b956
    502c:	0000b95b 	.word	0x0000b95b
    5030:	200002bc 	.word	0x200002bc
    5034:	0000b960 	.word	0x0000b960
    5038:	0000b972 	.word	0x0000b972
    503c:	0000b981 	.word	0x0000b981
    5040:	0000b987 	.word	0x0000b987

00005044 <_ZN9DIService3endEv>:
{
    BLE.poll();
}

void DIService::end()
{
    5044:	b510      	push	{r4, lr}
    5046:	0004      	movs	r4, r0
    delete m_diService;
    5048:	6800      	ldr	r0, [r0, #0]
    504a:	2800      	cmp	r0, #0
    504c:	d002      	beq.n	5054 <_ZN9DIService3endEv+0x10>
    504e:	6803      	ldr	r3, [r0, #0]
    5050:	685b      	ldr	r3, [r3, #4]
    5052:	4798      	blx	r3
    delete m_manufacturerNameCharateristic;
    5054:	6860      	ldr	r0, [r4, #4]
    5056:	2800      	cmp	r0, #0
    5058:	d002      	beq.n	5060 <_ZN9DIService3endEv+0x1c>
    505a:	6803      	ldr	r3, [r0, #0]
    505c:	685b      	ldr	r3, [r3, #4]
    505e:	4798      	blx	r3
    delete m_modelNumberCharacteristic;
    5060:	68a0      	ldr	r0, [r4, #8]
    5062:	2800      	cmp	r0, #0
    5064:	d002      	beq.n	506c <_ZN9DIService3endEv+0x28>
    5066:	6803      	ldr	r3, [r0, #0]
    5068:	685b      	ldr	r3, [r3, #4]
    506a:	4798      	blx	r3
    delete m_SerialNumberCharacteristic;
    506c:	68e0      	ldr	r0, [r4, #12]
    506e:	2800      	cmp	r0, #0
    5070:	d002      	beq.n	5078 <_ZN9DIService3endEv+0x34>
    5072:	6803      	ldr	r3, [r0, #0]
    5074:	685b      	ldr	r3, [r3, #4]
    5076:	4798      	blx	r3
}
    5078:	bd10      	pop	{r4, pc}

0000507a <_ZN9DIServiceD1Ev>:
DIService::~DIService()
    507a:	b510      	push	{r4, lr}
    507c:	0004      	movs	r4, r0
    end();
    507e:	f7ff ffe1 	bl	5044 <_ZN9DIService3endEv>
}
    5082:	0020      	movs	r0, r4
    5084:	bd10      	pop	{r4, pc}
	...

00005088 <_GLOBAL__sub_I__ZN9DIServiceC2Ev>:

DIService x_diService;
    5088:	b510      	push	{r4, lr}
    508a:	4a03      	ldr	r2, [pc, #12]	; (5098 <_GLOBAL__sub_I__ZN9DIServiceC2Ev+0x10>)
    508c:	4903      	ldr	r1, [pc, #12]	; (509c <_GLOBAL__sub_I__ZN9DIServiceC2Ev+0x14>)
    508e:	4804      	ldr	r0, [pc, #16]	; (50a0 <_GLOBAL__sub_I__ZN9DIServiceC2Ev+0x18>)
    5090:	f002 f9b2 	bl	73f8 <__aeabi_atexit>
    5094:	bd10      	pop	{r4, pc}
    5096:	46c0      	nop			; (mov r8, r8)
    5098:	20000000 	.word	0x20000000
    509c:	0000507b 	.word	0x0000507b
    50a0:	200005f0 	.word	0x200005f0

000050a4 <_ZN9DIService10runServiceEv>:
{
    50a4:	b510      	push	{r4, lr}
    BLE.poll();
    50a6:	4802      	ldr	r0, [pc, #8]	; (50b0 <_ZN9DIService10runServiceEv+0xc>)
    50a8:	f7fd f8c6 	bl	2238 <_ZN9BLEDevice4pollEv>
}
    50ac:	bd10      	pop	{r4, pc}
    50ae:	46c0      	nop			; (mov r8, r8)
    50b0:	200002bc 	.word	0x200002bc

000050b4 <_ZN10LedServiceC1Ev>:
 *  Author: kong
 */

#include "LedService.h"

LedService::LedService() : m_ledPin(LED_BUILTIN), m_buttonPin(4) // pin 4
    50b4:	b510      	push	{r4, lr}
    50b6:	2304      	movs	r3, #4
    50b8:	0004      	movs	r4, r0
    50ba:	2006      	movs	r0, #6
    50bc:	6063      	str	r3, [r4, #4]
    50be:	6020      	str	r0, [r4, #0]
{
    pinMode(m_ledPin, OUTPUT);
    50c0:	2101      	movs	r1, #1
    50c2:	f001 fc29 	bl	6918 <pinMode>
    pinMode(m_buttonPin, INPUT);
    50c6:	6860      	ldr	r0, [r4, #4]
    50c8:	2100      	movs	r1, #0
    50ca:	f001 fc25 	bl	6918 <pinMode>
}
    50ce:	0020      	movs	r0, r4
    50d0:	bd10      	pop	{r4, pc}

000050d2 <_ZN10LedService3endEv>:
        }
    }
}

void LedService::end()
{
    50d2:	b510      	push	{r4, lr}
    50d4:	0004      	movs	r4, r0
    delete m_ledService;
    50d6:	6880      	ldr	r0, [r0, #8]
    50d8:	2800      	cmp	r0, #0
    50da:	d002      	beq.n	50e2 <_ZN10LedService3endEv+0x10>
    50dc:	6803      	ldr	r3, [r0, #0]
    50de:	685b      	ldr	r3, [r3, #4]
    50e0:	4798      	blx	r3
    delete m_ledControlCharacteristic;
    50e2:	68e0      	ldr	r0, [r4, #12]
    50e4:	2800      	cmp	r0, #0
    50e6:	d002      	beq.n	50ee <_ZN10LedService3endEv+0x1c>
    50e8:	6803      	ldr	r3, [r0, #0]
    50ea:	685b      	ldr	r3, [r3, #4]
    50ec:	4798      	blx	r3
    delete m_buttonStateCharacteristic;
    50ee:	6920      	ldr	r0, [r4, #16]
    50f0:	2800      	cmp	r0, #0
    50f2:	d002      	beq.n	50fa <_ZN10LedService3endEv+0x28>
    50f4:	6803      	ldr	r3, [r0, #0]
    50f6:	685b      	ldr	r3, [r3, #4]
    50f8:	4798      	blx	r3
}
    50fa:	bd10      	pop	{r4, pc}

000050fc <_ZN10LedServiceD1Ev>:
LedService::~LedService()
    50fc:	b510      	push	{r4, lr}
    50fe:	0004      	movs	r4, r0
    end();
    5100:	f7ff ffe7 	bl	50d2 <_ZN10LedService3endEv>
}
    5104:	0020      	movs	r0, r4
    5106:	bd10      	pop	{r4, pc}

00005108 <_GLOBAL__sub_I__ZN10LedServiceC2Ev>:
        x_ledService.controlLed(HIGH);
    } else {
        Serial.println("LED off");
        x_ledService.controlLed(LOW);
    }
}
    5108:	b510      	push	{r4, lr}
LedService x_ledService;
    510a:	4c05      	ldr	r4, [pc, #20]	; (5120 <_GLOBAL__sub_I__ZN10LedServiceC2Ev+0x18>)
    510c:	0020      	movs	r0, r4
    510e:	f7ff ffd1 	bl	50b4 <_ZN10LedServiceC1Ev>
    5112:	4a04      	ldr	r2, [pc, #16]	; (5124 <_GLOBAL__sub_I__ZN10LedServiceC2Ev+0x1c>)
    5114:	4904      	ldr	r1, [pc, #16]	; (5128 <_GLOBAL__sub_I__ZN10LedServiceC2Ev+0x20>)
    5116:	0020      	movs	r0, r4
    5118:	f002 f96e 	bl	73f8 <__aeabi_atexit>
}
    511c:	bd10      	pop	{r4, pc}
    511e:	46c0      	nop			; (mov r8, r8)
    5120:	20000600 	.word	0x20000600
    5124:	20000000 	.word	0x20000000
    5128:	000050fd 	.word	0x000050fd

0000512c <_ZN8Tc5Timer11addCallbackEPFvvE>:
{
    return TC5->COUNT16.STATUS.reg & TC_STATUS_SYNCBUSY;
}

void Tc5Timer::addCallback(void(*callback)())
{
    512c:	b570      	push	{r4, r5, r6, lr}
    512e:	0004      	movs	r4, r0
    clear();
}

template <typename T> void LinkedList<T>::add(T item)
{
    ListNode<T>* node = new ListNode<T>();
    5130:	2008      	movs	r0, #8
    5132:	000d      	movs	r5, r1
    5134:	f000 f988 	bl	5448 <_Znwj>
    5138:	2300      	movs	r3, #0
    513a:	6043      	str	r3, [r0, #4]
    node->data = item;
    node->next = NULL;
    if (m_head) {
    513c:	68a3      	ldr	r3, [r4, #8]
    node->data = item;
    513e:	6005      	str	r5, [r0, #0]
    if (m_head) {
    5140:	2b00      	cmp	r3, #0
    5142:	d006      	beq.n	5152 <_ZN8Tc5Timer11addCallbackEPFvvE+0x26>
        m_tail->next = node;
    5144:	68e3      	ldr	r3, [r4, #12]
    5146:	6058      	str	r0, [r3, #4]
    } 
    else {
        m_head = node;
    }
    m_tail = node;
    m_size++;
    5148:	6863      	ldr	r3, [r4, #4]
    m_tail = node;
    514a:	60e0      	str	r0, [r4, #12]
    m_size++;
    514c:	3301      	adds	r3, #1
    514e:	6063      	str	r3, [r4, #4]
    m_callbacks.add(callback);
}
    5150:	bd70      	pop	{r4, r5, r6, pc}
        m_head = node;
    5152:	60a0      	str	r0, [r4, #8]
    5154:	e7f8      	b.n	5148 <_ZN8Tc5Timer11addCallbackEPFvvE+0x1c>

00005156 <_ZN8Tc5Timer11runCallbackEv>:

void Tc5Timer::runCallback()
{
    5156:	b570      	push	{r4, r5, r6, lr}
    5158:	0005      	movs	r5, r0
    unsigned int size = m_callbacks.size();
    void (*f)();
    for (unsigned int i = 0; i < size; i++) {
    515a:	2400      	movs	r4, #0
    515c:	6846      	ldr	r6, [r0, #4]
    515e:	42b4      	cmp	r4, r6
    5160:	d00e      	beq.n	5180 <_ZN8Tc5Timer11runCallbackEv+0x2a>
}

template <typename T> T LinkedList<T>::get(unsigned int index)
{
    if (index >= m_size) {
    5162:	686a      	ldr	r2, [r5, #4]
        return T();
    5164:	2300      	movs	r3, #0
    if (index >= m_size) {
    5166:	4294      	cmp	r4, r2
    5168:	d207      	bcs.n	517a <_ZN8Tc5Timer11runCallbackEv+0x24>
    }
    ListNode<T>* node = m_head;
    for (unsigned int i = 0; i < index; i++) {
    516a:	2200      	movs	r2, #0
    ListNode<T>* node = m_head;
    516c:	68ab      	ldr	r3, [r5, #8]
    for (unsigned int i = 0; i < index; i++) {
    516e:	4294      	cmp	r4, r2
    5170:	d002      	beq.n	5178 <_ZN8Tc5Timer11runCallbackEv+0x22>
        node = node->next;
    5172:	685b      	ldr	r3, [r3, #4]
    for (unsigned int i = 0; i < index; i++) {
    5174:	3201      	adds	r2, #1
    5176:	e7fa      	b.n	516e <_ZN8Tc5Timer11runCallbackEv+0x18>
    }
    return node->data;
    5178:	681b      	ldr	r3, [r3, #0]
        f = m_callbacks.get(i);
        f();
    517a:	4798      	blx	r3
    for (unsigned int i = 0; i < size; i++) {
    517c:	3401      	adds	r4, #1
    517e:	e7ee      	b.n	515e <_ZN8Tc5Timer11runCallbackEv+0x8>
    }
}
    5180:	bd70      	pop	{r4, r5, r6, pc}
	...

00005184 <TC5_Handler>:
{
    5184:	b510      	push	{r4, lr}
    x_tc5_tick.runCallback();
    5186:	4804      	ldr	r0, [pc, #16]	; (5198 <TC5_Handler+0x14>)
    5188:	f7ff ffe5 	bl	5156 <_ZN8Tc5Timer11runCallbackEv>
    TC5->COUNT16.INTFLAG.bit.MC0 = 1;
    518c:	2310      	movs	r3, #16
    518e:	4a03      	ldr	r2, [pc, #12]	; (519c <TC5_Handler+0x18>)
    5190:	7b91      	ldrb	r1, [r2, #14]
    5192:	430b      	orrs	r3, r1
    5194:	7393      	strb	r3, [r2, #14]
}
    5196:	bd10      	pop	{r4, pc}
    5198:	20000614 	.word	0x20000614
    519c:	42003400 	.word	0x42003400

000051a0 <_ZN8Tc5Timer5resetEv>:

void Tc5Timer::reset()
{
    TC5->COUNT16.CTRLA.reg = TC_CTRLA_SWRST;
    51a0:	2201      	movs	r2, #1
    51a2:	4b05      	ldr	r3, [pc, #20]	; (51b8 <_ZN8Tc5Timer5resetEv+0x18>)
    51a4:	801a      	strh	r2, [r3, #0]
    return TC5->COUNT16.STATUS.reg & TC_STATUS_SYNCBUSY;
    51a6:	7bda      	ldrb	r2, [r3, #15]
    while (isSyncing());
    51a8:	b252      	sxtb	r2, r2
    51aa:	2a00      	cmp	r2, #0
    51ac:	dbfb      	blt.n	51a6 <_ZN8Tc5Timer5resetEv+0x6>
    while (TC5->COUNT16.CTRLA.bit.SWRST);
    51ae:	881a      	ldrh	r2, [r3, #0]
    51b0:	07d2      	lsls	r2, r2, #31
    51b2:	d4fc      	bmi.n	51ae <_ZN8Tc5Timer5resetEv+0xe>
}
    51b4:	4770      	bx	lr
    51b6:	46c0      	nop			; (mov r8, r8)
    51b8:	42003400 	.word	0x42003400

000051bc <_ZN8Tc5Timer5beginEm>:
{
    51bc:	b570      	push	{r4, r5, r6, lr}
    51be:	0004      	movs	r4, r0
    GCLK->CLKCTRL.reg = (uint16_t)(GCLK_CLKCTRL_CLKEN
    51c0:	4b1d      	ldr	r3, [pc, #116]	; (5238 <_ZN8Tc5Timer5beginEm+0x7c>)
    51c2:	4a1e      	ldr	r2, [pc, #120]	; (523c <_ZN8Tc5Timer5beginEm+0x80>)
    m_tickInterval = interval;
    51c4:	6001      	str	r1, [r0, #0]
    GCLK->CLKCTRL.reg = (uint16_t)(GCLK_CLKCTRL_CLKEN
    51c6:	805a      	strh	r2, [r3, #2]
    while (GCLK->STATUS.bit.SYNCBUSY);
    51c8:	785a      	ldrb	r2, [r3, #1]
    51ca:	09d2      	lsrs	r2, r2, #7
    51cc:	d1fc      	bne.n	51c8 <_ZN8Tc5Timer5beginEm+0xc>
    reset();
    51ce:	0020      	movs	r0, r4
    51d0:	f7ff ffe6 	bl	51a0 <_ZN8Tc5Timer5resetEv>
    TC5->COUNT16.CTRLA.reg |= TC_CTRLA_MODE_COUNT16;
    51d4:	4b1a      	ldr	r3, [pc, #104]	; (5240 <_ZN8Tc5Timer5beginEm+0x84>)
    51d6:	881a      	ldrh	r2, [r3, #0]
    51d8:	b292      	uxth	r2, r2
    51da:	801a      	strh	r2, [r3, #0]
    TC5->COUNT16.CTRLA.reg |= TC_CTRLA_WAVEGEN_MFRQ;
    51dc:	2220      	movs	r2, #32
    51de:	8819      	ldrh	r1, [r3, #0]
    51e0:	430a      	orrs	r2, r1
    51e2:	801a      	strh	r2, [r3, #0]
    TC5->COUNT16.CTRLA.reg |= TC_CTRLA_PRESCALER_DIV1024 | TC_CTRLA_ENABLE;
    51e4:	8819      	ldrh	r1, [r3, #0]
    51e6:	4a17      	ldr	r2, [pc, #92]	; (5244 <_ZN8Tc5Timer5beginEm+0x88>)
    51e8:	430a      	orrs	r2, r1
    TC5->COUNT16.CC[0].reg  = (uint16_t)((46875 / 1000) * m_tickInterval);
    51ea:	212e      	movs	r1, #46	; 0x2e
    TC5->COUNT16.CTRLA.reg |= TC_CTRLA_PRESCALER_DIV1024 | TC_CTRLA_ENABLE;
    51ec:	801a      	strh	r2, [r3, #0]
    TC5->COUNT16.CC[0].reg  = (uint16_t)((46875 / 1000) * m_tickInterval);
    51ee:	6822      	ldr	r2, [r4, #0]
    51f0:	434a      	muls	r2, r1
    51f2:	b292      	uxth	r2, r2
    51f4:	831a      	strh	r2, [r3, #24]
    return TC5->COUNT16.STATUS.reg & TC_STATUS_SYNCBUSY;
    51f6:	7bda      	ldrb	r2, [r3, #15]
    while (isSyncing());
    51f8:	b252      	sxtb	r2, r2
    51fa:	2a00      	cmp	r2, #0
    51fc:	dbfb      	blt.n	51f6 <_ZN8Tc5Timer5beginEm+0x3a>
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    51fe:	2180      	movs	r1, #128	; 0x80
    5200:	4811      	ldr	r0, [pc, #68]	; (5248 <_ZN8Tc5Timer5beginEm+0x8c>)
    5202:	0349      	lsls	r1, r1, #13
    5204:	4a11      	ldr	r2, [pc, #68]	; (524c <_ZN8Tc5Timer5beginEm+0x90>)
    5206:	67c1      	str	r1, [r0, #124]	; 0x7c
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    5208:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    520c:	f3bf 8f6f 	isb	sy
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    5210:	20c0      	movs	r0, #192	; 0xc0
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    5212:	24c5      	movs	r4, #197	; 0xc5
    5214:	25ff      	movs	r5, #255	; 0xff
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    5216:	0040      	lsls	r0, r0, #1
    5218:	5011      	str	r1, [r2, r0]
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    521a:	00a4      	lsls	r4, r4, #2
    521c:	5910      	ldr	r0, [r2, r4]
    521e:	43a8      	bics	r0, r5
    5220:	5110      	str	r0, [r2, r4]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    5222:	6011      	str	r1, [r2, #0]
    TC5->COUNT16.INTENSET.bit.MC0 = 1;
    5224:	2210      	movs	r2, #16
    5226:	7b59      	ldrb	r1, [r3, #13]
    5228:	430a      	orrs	r2, r1
    522a:	735a      	strb	r2, [r3, #13]
    return TC5->COUNT16.STATUS.reg & TC_STATUS_SYNCBUSY;
    522c:	7bda      	ldrb	r2, [r3, #15]
    while (isSyncing());
    522e:	b252      	sxtb	r2, r2
    5230:	2a00      	cmp	r2, #0
    5232:	dbfb      	blt.n	522c <_ZN8Tc5Timer5beginEm+0x70>
}
    5234:	bd70      	pop	{r4, r5, r6, pc}
    5236:	46c0      	nop			; (mov r8, r8)
    5238:	40000c00 	.word	0x40000c00
    523c:	0000401c 	.word	0x0000401c
    5240:	42003400 	.word	0x42003400
    5244:	00000702 	.word	0x00000702
    5248:	e000e104 	.word	0xe000e104
    524c:	e000e100 	.word	0xe000e100

00005250 <_ZN8Tc5Timer5startEv>:

void Tc5Timer::start()
{
    TC5->COUNT16.CTRLA.reg |= TC_CTRLA_ENABLE;
    5250:	2202      	movs	r2, #2
    5252:	4b04      	ldr	r3, [pc, #16]	; (5264 <_ZN8Tc5Timer5startEv+0x14>)
    5254:	8819      	ldrh	r1, [r3, #0]
    5256:	430a      	orrs	r2, r1
    5258:	801a      	strh	r2, [r3, #0]
    return TC5->COUNT16.STATUS.reg & TC_STATUS_SYNCBUSY;
    525a:	7bda      	ldrb	r2, [r3, #15]
    while (isSyncing());
    525c:	b252      	sxtb	r2, r2
    525e:	2a00      	cmp	r2, #0
    5260:	dbfb      	blt.n	525a <_ZN8Tc5Timer5startEv+0xa>
}
    5262:	4770      	bx	lr
    5264:	42003400 	.word	0x42003400

00005268 <_ZN8Tc5Timer4stopEv>:

void Tc5Timer::stop()
{
    TC5->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    5268:	2102      	movs	r1, #2
    526a:	4b04      	ldr	r3, [pc, #16]	; (527c <_ZN8Tc5Timer4stopEv+0x14>)
    526c:	881a      	ldrh	r2, [r3, #0]
    526e:	438a      	bics	r2, r1
    5270:	801a      	strh	r2, [r3, #0]
    return TC5->COUNT16.STATUS.reg & TC_STATUS_SYNCBUSY;
    5272:	7bda      	ldrb	r2, [r3, #15]
    while (isSyncing());
    5274:	b252      	sxtb	r2, r2
    5276:	2a00      	cmp	r2, #0
    5278:	dbfb      	blt.n	5272 <_ZN8Tc5Timer4stopEv+0xa>
}
    527a:	4770      	bx	lr
    527c:	42003400 	.word	0x42003400

00005280 <_ZN8Tc5TimerD1Ev>:
Tc5Timer::~Tc5Timer()
    5280:	b570      	push	{r4, r5, r6, lr}
    5282:	0004      	movs	r4, r0
}

template <typename T> void LinkedList<T>::clear()
{
    ListNode<T>* node = m_head;
    for (unsigned int i = 0; i < m_size; i++) {
    5284:	2500      	movs	r5, #0
    stop();
    5286:	f7ff ffef 	bl	5268 <_ZN8Tc5Timer4stopEv>
    ListNode<T>* node = m_head;
    528a:	68a0      	ldr	r0, [r4, #8]
    for (unsigned int i = 0; i < m_size; i++) {
    528c:	6863      	ldr	r3, [r4, #4]
    528e:	42ab      	cmp	r3, r5
    5290:	d905      	bls.n	529e <_ZN8Tc5TimerD1Ev+0x1e>
        ListNode<T>* x = node;
        node = node->next;
    5292:	6846      	ldr	r6, [r0, #4]
    for (unsigned int i = 0; i < m_size; i++) {
    5294:	3501      	adds	r5, #1
        delete x;
    5296:	f000 f8db 	bl	5450 <_ZdlPv>
        node = node->next;
    529a:	0030      	movs	r0, r6
    529c:	e7f6      	b.n	528c <_ZN8Tc5TimerD1Ev+0xc>
}
    529e:	0020      	movs	r0, r4
    52a0:	bd70      	pop	{r4, r5, r6, pc}
	...

000052a4 <_GLOBAL__sub_I_TC5_Handler>:
Tc5Timer::Tc5Timer() : m_tickInterval(0)
    52a4:	2300      	movs	r3, #0

Tc5Timer x_tc5_tick;
    52a6:	b510      	push	{r4, lr}
Tc5Timer::Tc5Timer() : m_tickInterval(0)
    52a8:	4804      	ldr	r0, [pc, #16]	; (52bc <_GLOBAL__sub_I_TC5_Handler+0x18>)
Tc5Timer x_tc5_tick;
    52aa:	4a05      	ldr	r2, [pc, #20]	; (52c0 <_GLOBAL__sub_I_TC5_Handler+0x1c>)
m_size(0), m_head(NULL), m_tail(NULL)
    52ac:	6043      	str	r3, [r0, #4]
    52ae:	6083      	str	r3, [r0, #8]
    52b0:	60c3      	str	r3, [r0, #12]
    52b2:	4904      	ldr	r1, [pc, #16]	; (52c4 <_GLOBAL__sub_I_TC5_Handler+0x20>)
Tc5Timer::Tc5Timer() : m_tickInterval(0)
    52b4:	6003      	str	r3, [r0, #0]
Tc5Timer x_tc5_tick;
    52b6:	f002 f89f 	bl	73f8 <__aeabi_atexit>
    52ba:	bd10      	pop	{r4, pc}
    52bc:	20000614 	.word	0x20000614
    52c0:	20000000 	.word	0x20000000
    52c4:	00005281 	.word	0x00005281

000052c8 <Dummy_Handler>:

/* Default empty handler */
void Dummy_Handler(void)
{
#if defined DEBUG
  __BKPT(3);
    52c8:	be03      	bkpt	0x0003
    52ca:	e7fe      	b.n	52ca <Dummy_Handler+0x2>

000052cc <USB_Handler>:

static void (*usb_isr)(void) = NULL;

void USB_Handler(void)
{
  if (usb_isr)
    52cc:	4b03      	ldr	r3, [pc, #12]	; (52dc <USB_Handler+0x10>)
{
    52ce:	b510      	push	{r4, lr}
  if (usb_isr)
    52d0:	681b      	ldr	r3, [r3, #0]
    52d2:	2b00      	cmp	r3, #0
    52d4:	d000      	beq.n	52d8 <USB_Handler+0xc>
    usb_isr();
    52d6:	4798      	blx	r3
}
    52d8:	bd10      	pop	{r4, pc}
    52da:	46c0      	nop			; (mov r8, r8)
    52dc:	20000624 	.word	0x20000624

000052e0 <Reset_Handler>:
{
    52e0:	b570      	push	{r4, r5, r6, lr}
  if ((&__data_start__ != &__data_end__) && (pSrc != pDest)) {
    52e2:	490f      	ldr	r1, [pc, #60]	; (5320 <Reset_Handler+0x40>)
    52e4:	4c0f      	ldr	r4, [pc, #60]	; (5324 <Reset_Handler+0x44>)
    52e6:	42a1      	cmp	r1, r4
    52e8:	d104      	bne.n	52f4 <Reset_Handler+0x14>
  SystemInit();
    52ea:	f000 f98f 	bl	560c <SystemInit>
  main();
    52ee:	f000 f88b 	bl	5408 <main>
    52f2:	e7fe      	b.n	52f2 <Reset_Handler+0x12>
  if ((&__data_start__ != &__data_end__) && (pSrc != pDest)) {
    52f4:	4d0c      	ldr	r5, [pc, #48]	; (5328 <Reset_Handler+0x48>)
    52f6:	2300      	movs	r3, #0
    52f8:	428d      	cmp	r5, r1
    52fa:	d0f6      	beq.n	52ea <Reset_Handler+0xa>
    52fc:	18ca      	adds	r2, r1, r3
    52fe:	18e8      	adds	r0, r5, r3
    for (; pDest < &__data_end__; pDest++, pSrc++)
    5300:	42a2      	cmp	r2, r4
    5302:	d305      	bcc.n	5310 <Reset_Handler+0x30>
  if ((&__data_start__ != &__data_end__) && (pSrc != pDest)) {
    5304:	4290      	cmp	r0, r2
    5306:	d0f0      	beq.n	52ea <Reset_Handler+0xa>
    5308:	4b08      	ldr	r3, [pc, #32]	; (532c <Reset_Handler+0x4c>)
    for (pDest = &__bss_start__; pDest < &__bss_end__; pDest++)
    530a:	4909      	ldr	r1, [pc, #36]	; (5330 <Reset_Handler+0x50>)
      *pDest = 0;
    530c:	2200      	movs	r2, #0
    530e:	e004      	b.n	531a <Reset_Handler+0x3a>
      *pDest = *pSrc;
    5310:	6800      	ldr	r0, [r0, #0]
    5312:	3304      	adds	r3, #4
    5314:	6010      	str	r0, [r2, #0]
    5316:	e7f1      	b.n	52fc <Reset_Handler+0x1c>
      *pDest = 0;
    5318:	c304      	stmia	r3!, {r2}
    for (pDest = &__bss_start__; pDest < &__bss_end__; pDest++)
    531a:	428b      	cmp	r3, r1
    531c:	d3fc      	bcc.n	5318 <Reset_Handler+0x38>
    531e:	e7e4      	b.n	52ea <Reset_Handler+0xa>
    5320:	20000000 	.word	0x20000000
    5324:	200002a0 	.word	0x200002a0
    5328:	0000c07c 	.word	0x0000c07c
    532c:	200002a0 	.word	0x200002a0
    5330:	200010b0 	.word	0x200010b0

00005334 <SysTick_Handler>:
{
    5334:	b510      	push	{r4, lr}
  if (sysTickHook())
    5336:	f000 f864 	bl	5402 <sysTickHook>
    533a:	2800      	cmp	r0, #0
    533c:	d101      	bne.n	5342 <SysTick_Handler+0xe>
  SysTick_DefaultHandler();
    533e:	f000 f855 	bl	53ec <SysTick_DefaultHandler>
}
    5342:	bd10      	pop	{r4, pc}

00005344 <USB_SetHandler>:

void USB_SetHandler(void (*new_usb_isr)(void))
{
  usb_isr = new_usb_isr;
    5344:	4b01      	ldr	r3, [pc, #4]	; (534c <USB_SetHandler+0x8>)
    5346:	6018      	str	r0, [r3, #0]
}
    5348:	4770      	bx	lr
    534a:	46c0      	nop			; (mov r8, r8)
    534c:	20000624 	.word	0x20000624

00005350 <millis>:
static volatile uint32_t _ulTickCount=0 ;

unsigned long millis( void )
{
// todo: ensure no interrupts
  return _ulTickCount ;
    5350:	4b01      	ldr	r3, [pc, #4]	; (5358 <millis+0x8>)
    5352:	6818      	ldr	r0, [r3, #0]
}
    5354:	4770      	bx	lr
    5356:	46c0      	nop			; (mov r8, r8)
    5358:	20000628 	.word	0x20000628

0000535c <micros>:
// Interrupt-compatible version of micros
// Theory: repeatedly take readings of SysTick counter, millis counter and SysTick interrupt pending flag.
// When it appears that millis counter and pending is stable and SysTick hasn't rolled over, use these
// values to calculate micros. If there is a pending SysTick, add one to the millis counter in the calculation.
unsigned long micros( void )
{
    535c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t pend, pend2;
  uint32_t count, count2;

  ticks2  = SysTick->VAL;
  pend2   = !!(SCB->ICSR & SCB_ICSR_PENDSTSET_Msk)  ;
  count2  = _ulTickCount ;
    535e:	4813      	ldr	r0, [pc, #76]	; (53ac <micros+0x50>)
  pend2   = !!(SCB->ICSR & SCB_ICSR_PENDSTSET_Msk)  ;
    5360:	2201      	movs	r2, #1
  count2  = _ulTickCount ;
    5362:	4684      	mov	ip, r0
  ticks2  = SysTick->VAL;
    5364:	4912      	ldr	r1, [pc, #72]	; (53b0 <micros+0x54>)
  pend2   = !!(SCB->ICSR & SCB_ICSR_PENDSTSET_Msk)  ;
    5366:	4c13      	ldr	r4, [pc, #76]	; (53b4 <micros+0x58>)
  ticks2  = SysTick->VAL;
    5368:	688e      	ldr	r6, [r1, #8]
  pend2   = !!(SCB->ICSR & SCB_ICSR_PENDSTSET_Msk)  ;
    536a:	6863      	ldr	r3, [r4, #4]
  count2  = _ulTickCount ;
    536c:	6805      	ldr	r5, [r0, #0]
  pend2   = !!(SCB->ICSR & SCB_ICSR_PENDSTSET_Msk)  ;
    536e:	0e9b      	lsrs	r3, r3, #26
    5370:	4013      	ands	r3, r2
  {
    ticks=ticks2;
    pend=pend2;
    count=count2;
    ticks2  = SysTick->VAL;
    pend2   = !!(SCB->ICSR & SCB_ICSR_PENDSTSET_Msk)  ;
    5372:	9201      	str	r2, [sp, #4]
    ticks2  = SysTick->VAL;
    5374:	6888      	ldr	r0, [r1, #8]
    pend2   = !!(SCB->ICSR & SCB_ICSR_PENDSTSET_Msk)  ;
    5376:	6862      	ldr	r2, [r4, #4]
    5378:	9f01      	ldr	r7, [sp, #4]
    537a:	0e92      	lsrs	r2, r2, #26
    537c:	403a      	ands	r2, r7
    count2  = _ulTickCount ;
    537e:	4667      	mov	r7, ip
    5380:	683f      	ldr	r7, [r7, #0]
  } while ((pend != pend2) || (count != count2) || (ticks < ticks2));
    5382:	4293      	cmp	r3, r2
    5384:	d10e      	bne.n	53a4 <micros+0x48>
    5386:	42bd      	cmp	r5, r7
    5388:	d10c      	bne.n	53a4 <micros+0x48>
    538a:	4286      	cmp	r6, r0
    538c:	d30a      	bcc.n	53a4 <micros+0x48>

  return ((count+pend) * 1000) + (((SysTick->LOAD  - ticks)*(1048576/(VARIANT_MCK/1000000)))>>20) ;
    538e:	195b      	adds	r3, r3, r5
    5390:	25fa      	movs	r5, #250	; 0xfa
    5392:	6848      	ldr	r0, [r1, #4]
    5394:	00ad      	lsls	r5, r5, #2
    5396:	1b86      	subs	r6, r0, r6
    5398:	4807      	ldr	r0, [pc, #28]	; (53b8 <micros+0x5c>)
    539a:	436b      	muls	r3, r5
    539c:	4370      	muls	r0, r6
    539e:	0d00      	lsrs	r0, r0, #20
    53a0:	18c0      	adds	r0, r0, r3
  // this is an optimization to turn a runtime division into two compile-time divisions and
  // a runtime multiplication and shift, saving a few cycles
}
    53a2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
{
    53a4:	003d      	movs	r5, r7
    53a6:	0013      	movs	r3, r2
    53a8:	0006      	movs	r6, r0
    53aa:	e7e3      	b.n	5374 <micros+0x18>
    53ac:	20000628 	.word	0x20000628
    53b0:	e000e010 	.word	0xe000e010
    53b4:	e000ed00 	.word	0xe000ed00
    53b8:	00005555 	.word	0x00005555

000053bc <delay>:

void delay( unsigned long ms )
{
    53bc:	b570      	push	{r4, r5, r6, lr}
    53be:	1e04      	subs	r4, r0, #0
  if (ms == 0)
    53c0:	d010      	beq.n	53e4 <delay+0x28>
  {
    return;
  }

  uint32_t start = micros();
    53c2:	f7ff ffcb 	bl	535c <micros>
    53c6:	0005      	movs	r5, r0

  while (ms > 0)
  {
    yield();
    53c8:	f000 f81a 	bl	5400 <yield>
    while (ms > 0 && (micros() - start) >= 1000)
    53cc:	f7ff ffc6 	bl	535c <micros>
    53d0:	4b05      	ldr	r3, [pc, #20]	; (53e8 <delay+0x2c>)
    53d2:	1b40      	subs	r0, r0, r5
    53d4:	4298      	cmp	r0, r3
    53d6:	d9f7      	bls.n	53c8 <delay+0xc>
    {
      ms--;
      start += 1000;
    53d8:	23fa      	movs	r3, #250	; 0xfa
      ms--;
    53da:	3c01      	subs	r4, #1
      start += 1000;
    53dc:	009b      	lsls	r3, r3, #2
    53de:	18ed      	adds	r5, r5, r3
    while (ms > 0 && (micros() - start) >= 1000)
    53e0:	2c00      	cmp	r4, #0
    53e2:	d1f3      	bne.n	53cc <delay+0x10>
    }
  }
}
    53e4:	bd70      	pop	{r4, r5, r6, pc}
    53e6:	46c0      	nop			; (mov r8, r8)
    53e8:	000003e7 	.word	0x000003e7

000053ec <SysTick_DefaultHandler>:

#include "Reset.h" // for tickReset()

void SysTick_DefaultHandler(void)
{
    53ec:	b510      	push	{r4, lr}
  // Increment tick count each ms
  _ulTickCount++;
    53ee:	4a03      	ldr	r2, [pc, #12]	; (53fc <SysTick_DefaultHandler+0x10>)
    53f0:	6813      	ldr	r3, [r2, #0]
    53f2:	3301      	adds	r3, #1
    53f4:	6013      	str	r3, [r2, #0]
  tickReset();
    53f6:	f000 f8cd 	bl	5594 <tickReset>
}
    53fa:	bd10      	pop	{r4, pc}
    53fc:	20000628 	.word	0x20000628

00005400 <yield>:
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
	// Empty
}
    5400:	4770      	bx	lr

00005402 <sysTickHook>:
 * handler provided by Arduino.
 */
static int __false() {
	// Return false
	return 0;
}
    5402:	2000      	movs	r0, #0
    5404:	4770      	bx	lr
	...

00005408 <main>:

/*
 * \brief Main entry point of Arduino application
 */
int main( void )
{
    5408:	b510      	push	{r4, lr}
  init();
    540a:	f001 f9db 	bl	67c4 <init>

  __libc_init_array();
    540e:	f003 ff4b 	bl	92a8 <__libc_init_array>

  initVariant();
    5412:	f001 fbb2 	bl	6b7a <_Z11initVariantv>

  delay(1);
    5416:	2001      	movs	r0, #1
    5418:	f7ff ffd0 	bl	53bc <delay>
#if defined(USBCON)
  USBDevice.init();
    541c:	4c08      	ldr	r4, [pc, #32]	; (5440 <main+0x38>)
    541e:	0020      	movs	r0, r4
    5420:	f000 fcb4 	bl	5d8c <_ZN14USBDeviceClass4initEv>
  USBDevice.attach();
    5424:	0020      	movs	r0, r4
    5426:	f000 fd11 	bl	5e4c <_ZN14USBDeviceClass6attachEv>
#endif

  setup();
    542a:	f7ff fbe9 	bl	4c00 <setup>

  for (;;)
  {
    loop();
    542e:	f7ff fc15 	bl	4c5c <loop>
    if (serialEventRun) serialEventRun();
    5432:	4b04      	ldr	r3, [pc, #16]	; (5444 <main+0x3c>)
    5434:	2b00      	cmp	r3, #0
    5436:	d0fa      	beq.n	542e <main+0x26>
    5438:	e000      	b.n	543c <main+0x34>
    543a:	bf00      	nop
    543c:	e7f7      	b.n	542e <main+0x26>
    543e:	46c0      	nop			; (mov r8, r8)
    5440:	20000648 	.word	0x20000648
    5444:	00000000 	.word	0x00000000

00005448 <_Znwj>:
    5448:	b510      	push	{r4, lr}
    544a:	f003 ff55 	bl	92f8 <malloc>
    544e:	bd10      	pop	{r4, pc}

00005450 <_ZdlPv>:
    5450:	b510      	push	{r4, lr}
    5452:	f003 ff5b 	bl	930c <free>
    5456:	bd10      	pop	{r4, pc}

00005458 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
    5458:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    545a:	0006      	movs	r6, r0
    545c:	000d      	movs	r5, r1
    545e:	000c      	movs	r4, r1
    5460:	188b      	adds	r3, r1, r2
    5462:	9301      	str	r3, [sp, #4]
  size_t n = 0;
  while (size--) {
    5464:	9b01      	ldr	r3, [sp, #4]
    5466:	1b67      	subs	r7, r4, r5
    5468:	429c      	cmp	r4, r3
    546a:	d007      	beq.n	547c <_ZN5Print5writeEPKhj+0x24>
    if (write(*buffer++)) n++;
    546c:	6833      	ldr	r3, [r6, #0]
    546e:	7821      	ldrb	r1, [r4, #0]
    5470:	681b      	ldr	r3, [r3, #0]
    5472:	0030      	movs	r0, r6
    5474:	4798      	blx	r3
    5476:	3401      	adds	r4, #1
    5478:	2800      	cmp	r0, #0
    547a:	d1f3      	bne.n	5464 <_ZN5Print5writeEPKhj+0xc>
    else break;
  }
  return n;
}
    547c:	0038      	movs	r0, r7
    547e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

00005480 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
    5480:	b570      	push	{r4, r5, r6, lr}
    5482:	0005      	movs	r5, r0
    5484:	000c      	movs	r4, r1
      if (str == NULL) return 0;
    5486:	1e08      	subs	r0, r1, #0
    5488:	d007      	beq.n	549a <_ZN5Print5writeEPKc+0x1a>
      return write((const uint8_t *)str, strlen(str));
    548a:	f004 fceb 	bl	9e64 <strlen>
    548e:	682b      	ldr	r3, [r5, #0]
    5490:	0002      	movs	r2, r0
    5492:	685b      	ldr	r3, [r3, #4]
    5494:	0021      	movs	r1, r4
    5496:	0028      	movs	r0, r5
    5498:	4798      	blx	r3
    }
    549a:	bd70      	pop	{r4, r5, r6, pc}

0000549c <_ZN5Print5printERK6String>:
{
  return print(reinterpret_cast<const char *>(ifsh));
}

size_t Print::print(const String &s)
{
    549c:	b510      	push	{r4, lr}
    virtual size_t write(const uint8_t *buffer, size_t size);
    size_t write(const char *buffer, size_t size) {
      return write((const uint8_t *)buffer, size);
    549e:	6803      	ldr	r3, [r0, #0]
    54a0:	688a      	ldr	r2, [r1, #8]
    54a2:	685b      	ldr	r3, [r3, #4]
    54a4:	6809      	ldr	r1, [r1, #0]
    54a6:	4798      	blx	r3
  return write(s.c_str(), s.length());
}
    54a8:	bd10      	pop	{r4, pc}

000054aa <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
    54aa:	b510      	push	{r4, lr}
  return write(str);
    54ac:	f7ff ffe8 	bl	5480 <_ZN5Print5writeEPKc>
}
    54b0:	bd10      	pop	{r4, pc}
	...

000054b4 <_ZN5Print7printlnEv>:
{
  return x.printTo(*this);
}

size_t Print::println(void)
{
    54b4:	b510      	push	{r4, lr}
  return write("\r\n");
    54b6:	4902      	ldr	r1, [pc, #8]	; (54c0 <_ZN5Print7printlnEv+0xc>)
    54b8:	f7ff ffe2 	bl	5480 <_ZN5Print5writeEPKc>
}
    54bc:	bd10      	pop	{r4, pc}
    54be:	46c0      	nop			; (mov r8, r8)
    54c0:	0000b991 	.word	0x0000b991

000054c4 <_ZN5Print7printlnERK6String>:

size_t Print::println(const String &s)
{
    54c4:	b570      	push	{r4, r5, r6, lr}
    54c6:	0005      	movs	r5, r0
  size_t n = print(s);
    54c8:	f7ff ffe8 	bl	549c <_ZN5Print5printERK6String>
    54cc:	0004      	movs	r4, r0
  n += println();
    54ce:	0028      	movs	r0, r5
    54d0:	f7ff fff0 	bl	54b4 <_ZN5Print7printlnEv>
    54d4:	1820      	adds	r0, r4, r0
  return n;
}
    54d6:	bd70      	pop	{r4, r5, r6, pc}

000054d8 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
    54d8:	b570      	push	{r4, r5, r6, lr}
    54da:	0004      	movs	r4, r0
  return write(str);
    54dc:	f7ff ffd0 	bl	5480 <_ZN5Print5writeEPKc>
    54e0:	0005      	movs	r5, r0
  size_t n = print(c);
  n += println();
    54e2:	0020      	movs	r0, r4
    54e4:	f7ff ffe6 	bl	54b4 <_ZN5Print7printlnEv>
    54e8:	1940      	adds	r0, r0, r5
  return n;
}
    54ea:	bd70      	pop	{r4, r5, r6, pc}

000054ec <_ZN5Print11printNumberEmh>:
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base)
{
    54ec:	b5f0      	push	{r4, r5, r6, r7, lr}
    54ee:	0016      	movs	r6, r2
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
    54f0:	2200      	movs	r2, #0
{
    54f2:	b08d      	sub	sp, #52	; 0x34
  *str = '\0';
    54f4:	ab02      	add	r3, sp, #8
    54f6:	3305      	adds	r3, #5
{
    54f8:	9001      	str	r0, [sp, #4]
    54fa:	000d      	movs	r5, r1
  *str = '\0';
    54fc:	77da      	strb	r2, [r3, #31]

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
    54fe:	2e01      	cmp	r6, #1
    5500:	dc00      	bgt.n	5504 <_ZN5Print11printNumberEmh+0x18>
    5502:	260a      	movs	r6, #10
    5504:	ac0b      	add	r4, sp, #44	; 0x2c

  do {
    char c = n % base;
    5506:	0028      	movs	r0, r5
    5508:	0031      	movs	r1, r6
    550a:	f002 f80d 	bl	7528 <__aeabi_uidivmod>
    550e:	000f      	movs	r7, r1
    5510:	b2cb      	uxtb	r3, r1
    n /= base;
    5512:	0028      	movs	r0, r5
    5514:	0031      	movs	r1, r6
    char c = n % base;
    5516:	9300      	str	r3, [sp, #0]
    n /= base;
    5518:	f001 ff80 	bl	741c <__udivsi3>

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
    551c:	b2fb      	uxtb	r3, r7
    551e:	3337      	adds	r3, #55	; 0x37
    n /= base;
    5520:	0005      	movs	r5, r0
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
    5522:	3c01      	subs	r4, #1
    5524:	b2db      	uxtb	r3, r3
    5526:	2f09      	cmp	r7, #9
    5528:	d802      	bhi.n	5530 <_ZN5Print11printNumberEmh+0x44>
    552a:	9b00      	ldr	r3, [sp, #0]
    552c:	3330      	adds	r3, #48	; 0x30
    552e:	b2db      	uxtb	r3, r3
    5530:	7023      	strb	r3, [r4, #0]
  } while(n);
    5532:	2d00      	cmp	r5, #0
    5534:	d1e7      	bne.n	5506 <_ZN5Print11printNumberEmh+0x1a>

  return write(str);
    5536:	0021      	movs	r1, r4
    5538:	9801      	ldr	r0, [sp, #4]
    553a:	f7ff ffa1 	bl	5480 <_ZN5Print5writeEPKc>
}
    553e:	b00d      	add	sp, #52	; 0x34
    5540:	bdf0      	pop	{r4, r5, r6, r7, pc}

00005542 <_ZN5Print5printEmi>:
{
    5542:	b510      	push	{r4, lr}
  if (base == 0) return write(n);
    5544:	2a00      	cmp	r2, #0
    5546:	d104      	bne.n	5552 <_ZN5Print5printEmi+0x10>
    5548:	6803      	ldr	r3, [r0, #0]
    554a:	b2c9      	uxtb	r1, r1
    554c:	681b      	ldr	r3, [r3, #0]
    554e:	4798      	blx	r3
}
    5550:	bd10      	pop	{r4, pc}
  else return printNumber(n, base);
    5552:	b2d2      	uxtb	r2, r2
    5554:	f7ff ffca 	bl	54ec <_ZN5Print11printNumberEmh>
    5558:	e7fa      	b.n	5550 <_ZN5Print5printEmi+0xe>

0000555a <_ZN5Print5printEhi>:
{
    555a:	b510      	push	{r4, lr}
  return print((unsigned long) b, base);
    555c:	f7ff fff1 	bl	5542 <_ZN5Print5printEmi>
}
    5560:	bd10      	pop	{r4, pc}

00005562 <_ZN5Print7printlnEhi>:
{
    5562:	b570      	push	{r4, r5, r6, lr}
    5564:	0004      	movs	r4, r0
  return print((unsigned long) b, base);
    5566:	f7ff ffec 	bl	5542 <_ZN5Print5printEmi>
    556a:	0005      	movs	r5, r0
  n += println();
    556c:	0020      	movs	r0, r4
    556e:	f7ff ffa1 	bl	54b4 <_ZN5Print7printlnEv>
    5572:	1940      	adds	r0, r0, r5
}
    5574:	bd70      	pop	{r4, r5, r6, pc}
	...

00005578 <initiateReset>:
}

static int ticks = -1;

void initiateReset(int _ticks) {
	ticks = _ticks;
    5578:	4b01      	ldr	r3, [pc, #4]	; (5580 <initiateReset+0x8>)
    557a:	6018      	str	r0, [r3, #0]
}
    557c:	4770      	bx	lr
    557e:	46c0      	nop			; (mov r8, r8)
    5580:	20000004 	.word	0x20000004

00005584 <cancelReset>:

void cancelReset() {
	ticks = -1;
    5584:	2201      	movs	r2, #1
    5586:	4b02      	ldr	r3, [pc, #8]	; (5590 <cancelReset+0xc>)
    5588:	4252      	negs	r2, r2
    558a:	601a      	str	r2, [r3, #0]
}
    558c:	4770      	bx	lr
    558e:	46c0      	nop			; (mov r8, r8)
    5590:	20000004 	.word	0x20000004

00005594 <tickReset>:

void tickReset() {
	if (ticks == -1)
    5594:	4a16      	ldr	r2, [pc, #88]	; (55f0 <tickReset+0x5c>)
void tickReset() {
    5596:	b510      	push	{r4, lr}
	if (ticks == -1)
    5598:	6813      	ldr	r3, [r2, #0]
    559a:	1c59      	adds	r1, r3, #1
    559c:	d027      	beq.n	55ee <tickReset+0x5a>
		return;
	ticks--;
    559e:	3b01      	subs	r3, #1
    55a0:	6013      	str	r3, [r2, #0]
	if (ticks == 0)
    55a2:	2b00      	cmp	r3, #0
    55a4:	d123      	bne.n	55ee <tickReset+0x5a>
  __ASM volatile ("cpsid i" : : : "memory");
    55a6:	b672      	cpsid	i
	if (APP_START < (0x200 + 4)) {
    55a8:	4b12      	ldr	r3, [pc, #72]	; (55f4 <tickReset+0x60>)
    55aa:	4a13      	ldr	r2, [pc, #76]	; (55f8 <tickReset+0x64>)
    55ac:	3304      	adds	r3, #4
    55ae:	4293      	cmp	r3, r2
    55b0:	d808      	bhi.n	55c4 <tickReset+0x30>
  __ASM volatile ("dsb 0xF":::"memory");
    55b2:	f3bf 8f4f 	dsb	sy
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
    55b6:	4a11      	ldr	r2, [pc, #68]	; (55fc <tickReset+0x68>)
    55b8:	4b11      	ldr	r3, [pc, #68]	; (5600 <tickReset+0x6c>)
    55ba:	60da      	str	r2, [r3, #12]
    55bc:	f3bf 8f4f 	dsb	sy
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    55c0:	46c0      	nop			; (mov r8, r8)
    55c2:	e7fd      	b.n	55c0 <tickReset+0x2c>
        return NVMCTRL->INTFLAG.reg & NVMCTRL_INTFLAG_READY;
    55c4:	4a0f      	ldr	r2, [pc, #60]	; (5604 <tickReset+0x70>)
	while (!nvmReady())
    55c6:	2101      	movs	r1, #1
    55c8:	0010      	movs	r0, r2
        return NVMCTRL->INTFLAG.reg & NVMCTRL_INTFLAG_READY;
    55ca:	7d14      	ldrb	r4, [r2, #20]
	while (!nvmReady())
    55cc:	420c      	tst	r4, r1
    55ce:	d0fc      	beq.n	55ca <tickReset+0x36>
	NVMCTRL->STATUS.reg |= NVMCTRL_STATUS_MASK;
    55d0:	2120      	movs	r1, #32
    55d2:	8b14      	ldrh	r4, [r2, #24]
    55d4:	31ff      	adds	r1, #255	; 0xff
	NVMCTRL->ADDR.reg  = (uintptr_t)&NVM_MEMORY[APP_START / 4];
    55d6:	089b      	lsrs	r3, r3, #2
    55d8:	005b      	lsls	r3, r3, #1
	NVMCTRL->STATUS.reg |= NVMCTRL_STATUS_MASK;
    55da:	4321      	orrs	r1, r4
    55dc:	8311      	strh	r1, [r2, #24]
	NVMCTRL->ADDR.reg  = (uintptr_t)&NVM_MEMORY[APP_START / 4];
    55de:	61d3      	str	r3, [r2, #28]
	NVMCTRL->CTRLA.reg = NVMCTRL_CTRLA_CMD_ER | NVMCTRL_CTRLA_CMDEX_KEY;
    55e0:	4b09      	ldr	r3, [pc, #36]	; (5608 <tickReset+0x74>)
    55e2:	8013      	strh	r3, [r2, #0]
	while (!nvmReady())
    55e4:	2301      	movs	r3, #1
        return NVMCTRL->INTFLAG.reg & NVMCTRL_INTFLAG_READY;
    55e6:	7d02      	ldrb	r2, [r0, #20]
	while (!nvmReady())
    55e8:	421a      	tst	r2, r3
    55ea:	d0fc      	beq.n	55e6 <tickReset+0x52>
    55ec:	e7e1      	b.n	55b2 <tickReset+0x1e>
		banzai();
}
    55ee:	bd10      	pop	{r4, pc}
    55f0:	20000004 	.word	0x20000004
    55f4:	00002000 	.word	0x00002000
    55f8:	00000203 	.word	0x00000203
    55fc:	05fa0004 	.word	0x05fa0004
    5600:	e000ed00 	.word	0xe000ed00
    5604:	41004000 	.word	0x41004000
    5608:	ffffa502 	.word	0xffffa502

0000560c <SystemInit>:
#define GENERIC_CLOCK_MULTIPLEXER_DFLL48M (0u)

void SystemInit( void )
{
  /* Set 1 Flash Wait State for 48MHz, cf tables 20.9 and 35.27 in SAMD21 Datasheet */
  NVMCTRL->CTRLB.bit.RWS = NVMCTRL_CTRLB_RWS_HALF_Val ;
    560c:	221e      	movs	r2, #30
{
    560e:	b570      	push	{r4, r5, r6, lr}
  NVMCTRL->CTRLB.bit.RWS = NVMCTRL_CTRLB_RWS_HALF_Val ;
    5610:	4846      	ldr	r0, [pc, #280]	; (572c <SystemInit+0x120>)

  /* Turn on the digital interface clock */
  PM->APBAMASK.reg |= PM_APBAMASK_GCLK ;
    5612:	4947      	ldr	r1, [pc, #284]	; (5730 <SystemInit+0x124>)
  NVMCTRL->CTRLB.bit.RWS = NVMCTRL_CTRLB_RWS_HALF_Val ;
    5614:	6843      	ldr	r3, [r0, #4]
    5616:	4393      	bics	r3, r2
    5618:	3a1c      	subs	r2, #28
    561a:	4313      	orrs	r3, r2
    561c:	6043      	str	r3, [r0, #4]
  PM->APBAMASK.reg |= PM_APBAMASK_GCLK ;
    561e:	2308      	movs	r3, #8
    5620:	698c      	ldr	r4, [r1, #24]
    5622:	4323      	orrs	r3, r4
    5624:	618b      	str	r3, [r1, #24]
#else // has crystal

  /* ----------------------------------------------------------------------------------------------
   * 1) Enable XOSC32K clock (External on-board 32.768Hz oscillator)
   */
  SYSCTRL->XOSC32K.reg = SYSCTRL_XOSC32K_STARTUP( 0x6u ) | /* cf table 15.10 of product datasheet in chapter 15.8.6 */
    5626:	4c43      	ldr	r4, [pc, #268]	; (5734 <SystemInit+0x128>)
    5628:	4b43      	ldr	r3, [pc, #268]	; (5738 <SystemInit+0x12c>)
    562a:	829c      	strh	r4, [r3, #20]
                         SYSCTRL_XOSC32K_XTALEN | SYSCTRL_XOSC32K_EN32K ;
  SYSCTRL->XOSC32K.bit.ENABLE = 1 ; /* separate call, as described in chapter 15.6.3 */
    562c:	8a9c      	ldrh	r4, [r3, #20]
    562e:	4314      	orrs	r4, r2
    5630:	829c      	strh	r4, [r3, #20]

  while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_XOSC32KRDY) == 0 )
    5632:	68dc      	ldr	r4, [r3, #12]
    5634:	4214      	tst	r4, r2
    5636:	d0fc      	beq.n	5632 <SystemInit+0x26>

  /* Software reset the module to ensure it is re-initialized correctly */
  /* Note: Due to synchronization, there is a delay from writing CTRL.SWRST until the reset is complete.
   * CTRL.SWRST and STATUS.SYNCBUSY will both be cleared when the reset is complete, as described in chapter 13.8.1
   */
  GCLK->CTRL.reg = GCLK_CTRL_SWRST ;
    5638:	2401      	movs	r4, #1
    563a:	4a40      	ldr	r2, [pc, #256]	; (573c <SystemInit+0x130>)
    563c:	7014      	strb	r4, [r2, #0]

  while ( (GCLK->CTRL.reg & GCLK_CTRL_SWRST) && (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY) )
    563e:	7815      	ldrb	r5, [r2, #0]
    5640:	4225      	tst	r5, r4
    5642:	d003      	beq.n	564c <SystemInit+0x40>
    5644:	7855      	ldrb	r5, [r2, #1]
    5646:	b26d      	sxtb	r5, r5
    5648:	2d00      	cmp	r5, #0
    564a:	dbf8      	blt.n	563e <SystemInit+0x32>
  }

  /* ----------------------------------------------------------------------------------------------
   * 2) Put XOSC32K as source of Generic Clock Generator 1
   */
  GCLK->GENDIV.reg = GCLK_GENDIV_ID( GENERIC_CLOCK_GENERATOR_XOSC32K ) ; // Generic Clock Generator 1
    564c:	2401      	movs	r4, #1
    564e:	6094      	str	r4, [r2, #8]

  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY )
    5650:	7854      	ldrb	r4, [r2, #1]
    5652:	b264      	sxtb	r4, r4
    5654:	2c00      	cmp	r4, #0
    5656:	dbfb      	blt.n	5650 <SystemInit+0x44>
  {
    /* Wait for synchronization */
  }

  /* Write Generic Clock Generator 1 configuration */
  GCLK->GENCTRL.reg = GCLK_GENCTRL_ID( GENERIC_CLOCK_GENERATOR_OSC32K ) | // Generic Clock Generator 1
    5658:	4c39      	ldr	r4, [pc, #228]	; (5740 <SystemInit+0x134>)
    565a:	6054      	str	r4, [r2, #4]
                      GCLK_GENCTRL_SRC_XOSC32K | // Selected source is External 32KHz Oscillator
#endif
//                      GCLK_GENCTRL_OE | // Output clock to a pin for tests
                      GCLK_GENCTRL_GENEN ;

  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY )
    565c:	7854      	ldrb	r4, [r2, #1]
    565e:	b264      	sxtb	r4, r4
    5660:	2c00      	cmp	r4, #0
    5662:	dbfb      	blt.n	565c <SystemInit+0x50>
  }

  /* ----------------------------------------------------------------------------------------------
   * 3) Put Generic Clock Generator 1 as source for Generic Clock Multiplexer 0 (DFLL48M reference)
   */
  GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID( GENERIC_CLOCK_MULTIPLEXER_DFLL48M ) | // Generic Clock Multiplexer 0
    5664:	2482      	movs	r4, #130	; 0x82
    5666:	01e4      	lsls	r4, r4, #7
    5668:	8054      	strh	r4, [r2, #2]
                      GCLK_CLKCTRL_GEN_GCLK1 | // Generic Clock Generator 1 is source
                      GCLK_CLKCTRL_CLKEN ;

  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY )
    566a:	7854      	ldrb	r4, [r2, #1]
    566c:	b264      	sxtb	r4, r4
    566e:	2c00      	cmp	r4, #0
    5670:	dbfb      	blt.n	566a <SystemInit+0x5e>
   */

  /* DFLL Configuration in Closed Loop mode, cf product datasheet chapter 15.6.7.1 - Closed-Loop Operation */

  /* Remove the OnDemand mode, Bug http://avr32.icgroup.norway.atmel.com/bugzilla/show_bug.cgi?id=9905 */
  SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    5672:	2402      	movs	r4, #2
    5674:	849c      	strh	r4, [r3, #36]	; 0x24

  while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) == 0 )
    5676:	340e      	adds	r4, #14
    5678:	68dd      	ldr	r5, [r3, #12]
    567a:	4225      	tst	r5, r4
    567c:	d0fc      	beq.n	5678 <SystemInit+0x6c>
  {
    /* Wait for synchronization */
  }

  SYSCTRL->DFLLMUL.reg = SYSCTRL_DFLLMUL_CSTEP( 31 ) | // Coarse step is 31, half of the max value
    567e:	4c31      	ldr	r4, [pc, #196]	; (5744 <SystemInit+0x138>)
    5680:	62dc      	str	r4, [r3, #44]	; 0x2c
                         SYSCTRL_DFLLMUL_FSTEP( 511 ) | // Fine step is 511, half of the max value
                         SYSCTRL_DFLLMUL_MUL( (VARIANT_MCK + VARIANT_MAINOSC/2) / VARIANT_MAINOSC ) ; // External 32KHz is the reference

  while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) == 0 )
    5682:	2410      	movs	r4, #16
    5684:	68dd      	ldr	r5, [r3, #12]
    5686:	4225      	tst	r5, r4
    5688:	d0fc      	beq.n	5684 <SystemInit+0x78>
  SYSCTRL->DFLLCTRL.reg |= SYSCTRL_DFLLCTRL_ENABLE ;

#else   // has crystal

  /* Write full configuration to DFLL control register */
  SYSCTRL->DFLLCTRL.reg |= SYSCTRL_DFLLCTRL_MODE | /* Enable the closed loop mode */
    568a:	8c9d      	ldrh	r5, [r3, #36]	; 0x24
    568c:	4c2e      	ldr	r4, [pc, #184]	; (5748 <SystemInit+0x13c>)
    568e:	432c      	orrs	r4, r5
    5690:	849c      	strh	r4, [r3, #36]	; 0x24
                           SYSCTRL_DFLLCTRL_WAITLOCK |
                           SYSCTRL_DFLLCTRL_QLDIS ; /* Disable Quick lock */

  while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) == 0 )
    5692:	2410      	movs	r4, #16
    5694:	68dd      	ldr	r5, [r3, #12]
    5696:	4225      	tst	r5, r4
    5698:	d0fc      	beq.n	5694 <SystemInit+0x88>
  {
    /* Wait for synchronization */
  }

  /* Enable the DFLL */
  SYSCTRL->DFLLCTRL.reg |= SYSCTRL_DFLLCTRL_ENABLE ;
    569a:	2402      	movs	r4, #2
    569c:	8c9d      	ldrh	r5, [r3, #36]	; 0x24

  while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLLCKC) == 0 ||
    569e:	2680      	movs	r6, #128	; 0x80
  SYSCTRL->DFLLCTRL.reg |= SYSCTRL_DFLLCTRL_ENABLE ;
    56a0:	432c      	orrs	r4, r5
    56a2:	849c      	strh	r4, [r3, #36]	; 0x24
          (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLLCKF) == 0 )
    56a4:	2440      	movs	r4, #64	; 0x40
  while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLLCKC) == 0 ||
    56a6:	68dd      	ldr	r5, [r3, #12]
    56a8:	4235      	tst	r5, r6
    56aa:	d0fc      	beq.n	56a6 <SystemInit+0x9a>
          (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLLCKF) == 0 )
    56ac:	68dd      	ldr	r5, [r3, #12]
  while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLLCKC) == 0 ||
    56ae:	4225      	tst	r5, r4
    56b0:	d0f9      	beq.n	56a6 <SystemInit+0x9a>
    /* Wait for locks flags */
  }

#endif

  while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) == 0 )
    56b2:	2410      	movs	r4, #16
    56b4:	68dd      	ldr	r5, [r3, #12]
    56b6:	4225      	tst	r5, r4
    56b8:	d0fc      	beq.n	56b4 <SystemInit+0xa8>
  }

  /* ----------------------------------------------------------------------------------------------
   * 5) Switch Generic Clock Generator 0 to DFLL48M. CPU will run at 48MHz.
   */
  GCLK->GENDIV.reg = GCLK_GENDIV_ID( GENERIC_CLOCK_GENERATOR_MAIN ) ; // Generic Clock Generator 0
    56ba:	2400      	movs	r4, #0
    56bc:	6094      	str	r4, [r2, #8]

  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY )
    56be:	7854      	ldrb	r4, [r2, #1]
    56c0:	b264      	sxtb	r4, r4
    56c2:	2c00      	cmp	r4, #0
    56c4:	dbfb      	blt.n	56be <SystemInit+0xb2>
  {
    /* Wait for synchronization */
  }

  /* Write Generic Clock Generator 0 configuration */
  GCLK->GENCTRL.reg = GCLK_GENCTRL_ID( GENERIC_CLOCK_GENERATOR_MAIN ) | // Generic Clock Generator 0
    56c6:	4c21      	ldr	r4, [pc, #132]	; (574c <SystemInit+0x140>)
    56c8:	6054      	str	r4, [r2, #4]
                      GCLK_GENCTRL_SRC_DFLL48M | // Selected source is DFLL 48MHz
//                      GCLK_GENCTRL_OE | // Output clock to a pin for tests
                      GCLK_GENCTRL_IDC | // Set 50/50 duty cycle
                      GCLK_GENCTRL_GENEN ;

  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY )
    56ca:	7854      	ldrb	r4, [r2, #1]
    56cc:	b264      	sxtb	r4, r4
    56ce:	2c00      	cmp	r4, #0
    56d0:	dbfb      	blt.n	56ca <SystemInit+0xbe>
  }

  /* ----------------------------------------------------------------------------------------------
   * 6) Modify PRESCaler value of OSC8M to have 8MHz
   */
  SYSCTRL->OSC8M.bit.PRESC = SYSCTRL_OSC8M_PRESC_0_Val ;  //CMSIS 4.5 changed the prescaler defines
    56d2:	6a1c      	ldr	r4, [r3, #32]
    56d4:	4d1e      	ldr	r5, [pc, #120]	; (5750 <SystemInit+0x144>)
    56d6:	402c      	ands	r4, r5
  SYSCTRL->OSC8M.bit.ONDEMAND = 0 ;
    56d8:	2580      	movs	r5, #128	; 0x80
  SYSCTRL->OSC8M.bit.PRESC = SYSCTRL_OSC8M_PRESC_0_Val ;  //CMSIS 4.5 changed the prescaler defines
    56da:	621c      	str	r4, [r3, #32]
  SYSCTRL->OSC8M.bit.ONDEMAND = 0 ;
    56dc:	6a1c      	ldr	r4, [r3, #32]
    56de:	43ac      	bics	r4, r5
    56e0:	621c      	str	r4, [r3, #32]

  /* ----------------------------------------------------------------------------------------------
   * 7) Put OSC8M as source for Generic Clock Generator 3
   */
  GCLK->GENDIV.reg = GCLK_GENDIV_ID( GENERIC_CLOCK_GENERATOR_OSC8M ) ; // Generic Clock Generator 3
    56e2:	2303      	movs	r3, #3
    56e4:	6093      	str	r3, [r2, #8]

  /* Write Generic Clock Generator 3 configuration */
  GCLK->GENCTRL.reg = GCLK_GENCTRL_ID( GENERIC_CLOCK_GENERATOR_OSC8M ) | // Generic Clock Generator 3
    56e6:	4b1b      	ldr	r3, [pc, #108]	; (5754 <SystemInit+0x148>)
    56e8:	6053      	str	r3, [r2, #4]
                      GCLK_GENCTRL_SRC_OSC8M | // Selected source is RC OSC 8MHz (already enabled at reset)
//                      GCLK_GENCTRL_OE | // Output clock to a pin for tests
                      GCLK_GENCTRL_GENEN ;

  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY )
    56ea:	7853      	ldrb	r3, [r2, #1]
    56ec:	b25b      	sxtb	r3, r3
    56ee:	2b00      	cmp	r3, #0
    56f0:	dbfb      	blt.n	56ea <SystemInit+0xde>

  /*
   * Now that all system clocks are configured, we can set CPU and APBx BUS clocks.
   * There values are normally the one present after Reset.
   */
  PM->CPUSEL.reg  = PM_CPUSEL_CPUDIV_DIV1 ;
    56f2:	2300      	movs	r3, #0

  // ADC Linearity bits 4:0
  uint32_t linearity = (*((uint32_t *) ADC_FUSES_LINEARITY_0_ADDR) & ADC_FUSES_LINEARITY_0_Msk) >> ADC_FUSES_LINEARITY_0_Pos;

  // ADC Linearity bits 7:5
  linearity |= ((*((uint32_t *) ADC_FUSES_LINEARITY_1_ADDR) & ADC_FUSES_LINEARITY_1_Msk) >> ADC_FUSES_LINEARITY_1_Pos) << 5;
    56f4:	24ff      	movs	r4, #255	; 0xff
  PM->CPUSEL.reg  = PM_CPUSEL_CPUDIV_DIV1 ;
    56f6:	720b      	strb	r3, [r1, #8]
  SystemCoreClock=VARIANT_MCK ;
    56f8:	4a17      	ldr	r2, [pc, #92]	; (5758 <SystemInit+0x14c>)
  PM->APBASEL.reg = PM_APBASEL_APBADIV_DIV1_Val ;
    56fa:	724b      	strb	r3, [r1, #9]
  PM->APBBSEL.reg = PM_APBBSEL_APBBDIV_DIV1_Val ;
    56fc:	728b      	strb	r3, [r1, #10]
  PM->APBCSEL.reg = PM_APBCSEL_APBCDIV_DIV1_Val ;
    56fe:	72cb      	strb	r3, [r1, #11]
  SystemCoreClock=VARIANT_MCK ;
    5700:	4b16      	ldr	r3, [pc, #88]	; (575c <SystemInit+0x150>)
    5702:	601a      	str	r2, [r3, #0]
  uint32_t bias = (*((uint32_t *) ADC_FUSES_BIASCAL_ADDR) & ADC_FUSES_BIASCAL_Msk) >> ADC_FUSES_BIASCAL_Pos;
    5704:	4b16      	ldr	r3, [pc, #88]	; (5760 <SystemInit+0x154>)
  uint32_t linearity = (*((uint32_t *) ADC_FUSES_LINEARITY_0_ADDR) & ADC_FUSES_LINEARITY_0_Msk) >> ADC_FUSES_LINEARITY_0_Pos;
    5706:	4a17      	ldr	r2, [pc, #92]	; (5764 <SystemInit+0x158>)
  uint32_t bias = (*((uint32_t *) ADC_FUSES_BIASCAL_ADDR) & ADC_FUSES_BIASCAL_Msk) >> ADC_FUSES_BIASCAL_Pos;
    5708:	681b      	ldr	r3, [r3, #0]
  uint32_t linearity = (*((uint32_t *) ADC_FUSES_LINEARITY_0_ADDR) & ADC_FUSES_LINEARITY_0_Msk) >> ADC_FUSES_LINEARITY_0_Pos;
    570a:	6811      	ldr	r1, [r2, #0]
  uint32_t bias = (*((uint32_t *) ADC_FUSES_BIASCAL_ADDR) & ADC_FUSES_BIASCAL_Msk) >> ADC_FUSES_BIASCAL_Pos;
    570c:	069a      	lsls	r2, r3, #26
  linearity |= ((*((uint32_t *) ADC_FUSES_LINEARITY_1_ADDR) & ADC_FUSES_LINEARITY_1_Msk) >> ADC_FUSES_LINEARITY_1_Pos) << 5;
    570e:	015b      	lsls	r3, r3, #5
  uint32_t linearity = (*((uint32_t *) ADC_FUSES_LINEARITY_0_ADDR) & ADC_FUSES_LINEARITY_0_Msk) >> ADC_FUSES_LINEARITY_0_Pos;
    5710:	0ec9      	lsrs	r1, r1, #27
  linearity |= ((*((uint32_t *) ADC_FUSES_LINEARITY_1_ADDR) & ADC_FUSES_LINEARITY_1_Msk) >> ADC_FUSES_LINEARITY_1_Pos) << 5;
    5712:	4023      	ands	r3, r4
  uint32_t bias = (*((uint32_t *) ADC_FUSES_BIASCAL_ADDR) & ADC_FUSES_BIASCAL_Msk) >> ADC_FUSES_BIASCAL_Pos;
    5714:	0f52      	lsrs	r2, r2, #29

  ADC->CALIB.reg = ADC_CALIB_BIAS_CAL(bias) | ADC_CALIB_LINEARITY_CAL(linearity);
    5716:	0212      	lsls	r2, r2, #8
  linearity |= ((*((uint32_t *) ADC_FUSES_LINEARITY_1_ADDR) & ADC_FUSES_LINEARITY_1_Msk) >> ADC_FUSES_LINEARITY_1_Pos) << 5;
    5718:	430b      	orrs	r3, r1
  ADC->CALIB.reg = ADC_CALIB_BIAS_CAL(bias) | ADC_CALIB_LINEARITY_CAL(linearity);
    571a:	4313      	orrs	r3, r2
    571c:	4a12      	ldr	r2, [pc, #72]	; (5768 <SystemInit+0x15c>)
    571e:	8513      	strh	r3, [r2, #40]	; 0x28

  /*
   * 9) Disable automatic NVM write operations
   */
  NVMCTRL->CTRLB.bit.MANW = 1;
    5720:	2380      	movs	r3, #128	; 0x80
    5722:	6842      	ldr	r2, [r0, #4]
    5724:	4313      	orrs	r3, r2
    5726:	6043      	str	r3, [r0, #4]
}
    5728:	bd70      	pop	{r4, r5, r6, pc}
    572a:	46c0      	nop			; (mov r8, r8)
    572c:	41004000 	.word	0x41004000
    5730:	40000400 	.word	0x40000400
    5734:	0000060c 	.word	0x0000060c
    5738:	40000800 	.word	0x40000800
    573c:	40000c00 	.word	0x40000c00
    5740:	00010501 	.word	0x00010501
    5744:	7dff05b9 	.word	0x7dff05b9
    5748:	00000a04 	.word	0x00000a04
    574c:	00030700 	.word	0x00030700
    5750:	fffffcff 	.word	0xfffffcff
    5754:	00010603 	.word	0x00010603
    5758:	02dc6c00 	.word	0x02dc6c00
    575c:	20000084 	.word	0x20000084
    5760:	00806024 	.word	0x00806024
    5764:	00806020 	.word	0x00806020
    5768:	42004000 	.word	0x42004000

0000576c <_ZN7Serial_17availableForWriteEv>:
int Serial_::availableForWrite(void)
{
	// return the number of bytes left in the current bank,
	// always EP size - 1, because bank is flushed on every write
	return (EPX_SIZE - 1);
}
    576c:	203f      	movs	r0, #63	; 0x3f
    576e:	4770      	bx	lr

00005770 <_ZN7Serial_5writeEh>:
		setWriteError();
		return 0;
	}
}

size_t Serial_::write(uint8_t c) {
    5770:	b513      	push	{r0, r1, r4, lr}
    5772:	466b      	mov	r3, sp
	return write(&c, 1);
    5774:	6802      	ldr	r2, [r0, #0]
size_t Serial_::write(uint8_t c) {
    5776:	71d9      	strb	r1, [r3, #7]
    5778:	3307      	adds	r3, #7
	return write(&c, 1);
    577a:	6854      	ldr	r4, [r2, #4]
    577c:	0019      	movs	r1, r3
    577e:	2201      	movs	r2, #1
    5780:	47a0      	blx	r4
}
    5782:	bd16      	pop	{r1, r2, r4, pc}

00005784 <_ZN7Serial_9availableEv>:
{
    5784:	b510      	push	{r4, lr}
	return usb.available(CDC_ENDPOINT_OUT);
    5786:	2102      	movs	r1, #2
    5788:	6900      	ldr	r0, [r0, #16]
    578a:	f000 fc47 	bl	601c <_ZN14USBDeviceClass9availableEm>
}
    578e:	bd10      	pop	{r4, pc}

00005790 <_ZN7Serial_5flushEv>:
{
    5790:	b510      	push	{r4, lr}
	usb.flush(CDC_ENDPOINT_IN);
    5792:	2103      	movs	r1, #3
    5794:	6900      	ldr	r0, [r0, #16]
    5796:	f000 fc57 	bl	6048 <_ZN14USBDeviceClass5flushEm>
}
    579a:	bd10      	pop	{r4, pc}

0000579c <_ZN7Serial_5writeEPKhj>:
{
    579c:	b510      	push	{r4, lr}
    579e:	0013      	movs	r3, r2
    57a0:	0004      	movs	r4, r0
	uint32_t r = usb.send(CDC_ENDPOINT_IN, buffer, size);
    57a2:	000a      	movs	r2, r1
    57a4:	6900      	ldr	r0, [r0, #16]
    57a6:	2103      	movs	r1, #3
    57a8:	f000 fd3a 	bl	6220 <_ZN14USBDeviceClass4sendEmPKvm>
	if (r > 0) {
    57ac:	2800      	cmp	r0, #0
    57ae:	d101      	bne.n	57b4 <_ZN7Serial_5writeEPKhj+0x18>
    void setWriteError(int err = 1) { write_error = err; }
    57b0:	2301      	movs	r3, #1
    57b2:	6063      	str	r3, [r4, #4]
}
    57b4:	bd10      	pop	{r4, pc}
	...

000057b8 <_ZN7Serial_4peekEv>:
{
    57b8:	b510      	push	{r4, lr}
	if (_serialPeek != -1)
    57ba:	4c05      	ldr	r4, [pc, #20]	; (57d0 <_ZN7Serial_4peekEv+0x18>)
    57bc:	6823      	ldr	r3, [r4, #0]
    57be:	1c5a      	adds	r2, r3, #1
    57c0:	d104      	bne.n	57cc <_ZN7Serial_4peekEv+0x14>
	_serialPeek = read();
    57c2:	6803      	ldr	r3, [r0, #0]
    57c4:	695b      	ldr	r3, [r3, #20]
    57c6:	4798      	blx	r3
    57c8:	0003      	movs	r3, r0
    57ca:	6020      	str	r0, [r4, #0]
}
    57cc:	0018      	movs	r0, r3
    57ce:	bd10      	pop	{r4, pc}
    57d0:	20000058 	.word	0x20000058

000057d4 <_ZN7Serial_4readEv>:
	if (_serialPeek != -1) {
    57d4:	4b07      	ldr	r3, [pc, #28]	; (57f4 <_ZN7Serial_4readEv+0x20>)
{
    57d6:	0002      	movs	r2, r0
	if (_serialPeek != -1) {
    57d8:	6818      	ldr	r0, [r3, #0]
{
    57da:	b510      	push	{r4, lr}
	if (_serialPeek != -1) {
    57dc:	1c41      	adds	r1, r0, #1
    57de:	d003      	beq.n	57e8 <_ZN7Serial_4readEv+0x14>
		_serialPeek = -1;
    57e0:	2201      	movs	r2, #1
    57e2:	4252      	negs	r2, r2
    57e4:	601a      	str	r2, [r3, #0]
}
    57e6:	bd10      	pop	{r4, pc}
	return usb.recv(CDC_ENDPOINT_OUT);
    57e8:	2102      	movs	r1, #2
    57ea:	6910      	ldr	r0, [r2, #16]
    57ec:	f000 fd0a 	bl	6204 <_ZN14USBDeviceClass4recvEm>
    57f0:	e7f9      	b.n	57e6 <_ZN7Serial_4readEv+0x12>
    57f2:	46c0      	nop			; (mov r8, r8)
    57f4:	20000058 	.word	0x20000058

000057f8 <_Z16CDC_GetInterfacePh>:
{
    57f8:	b510      	push	{r4, lr}
	interfaceNum[0] += 2;	// uses 2
    57fa:	7803      	ldrb	r3, [r0, #0]
	return USBDevice.sendControl(&_cdcInterface,sizeof(_cdcInterface));
    57fc:	2242      	movs	r2, #66	; 0x42
	interfaceNum[0] += 2;	// uses 2
    57fe:	3302      	adds	r3, #2
    5800:	7003      	strb	r3, [r0, #0]
	return USBDevice.sendControl(&_cdcInterface,sizeof(_cdcInterface));
    5802:	4902      	ldr	r1, [pc, #8]	; (580c <_Z16CDC_GetInterfacePh+0x14>)
    5804:	4802      	ldr	r0, [pc, #8]	; (5810 <_Z16CDC_GetInterfacePh+0x18>)
    5806:	f000 fdab 	bl	6360 <_ZN14USBDeviceClass11sendControlEPKvm>
}
    580a:	bd10      	pop	{r4, pc}
    580c:	20000014 	.word	0x20000014
    5810:	20000648 	.word	0x20000648

00005814 <_Z9CDC_SetupR8USBSetup>:
{
    5814:	b510      	push	{r4, lr}
	uint8_t requestType = setup.bmRequestType;
    5816:	7801      	ldrb	r1, [r0, #0]
{
    5818:	0003      	movs	r3, r0
	uint8_t r = setup.bRequest;
    581a:	7842      	ldrb	r2, [r0, #1]
	return false;
    581c:	2000      	movs	r0, #0
	if (requestType == REQUEST_DEVICETOHOST_CLASS_INTERFACE)
    581e:	29a1      	cmp	r1, #161	; 0xa1
    5820:	d108      	bne.n	5834 <_Z9CDC_SetupR8USBSetup+0x20>
		if (r == CDC_GET_LINE_CODING)
    5822:	2a21      	cmp	r2, #33	; 0x21
    5824:	d105      	bne.n	5832 <_Z9CDC_SetupR8USBSetup+0x1e>
			USBDevice.sendControl((void*)&_usbLineInfo, 7);
    5826:	3a1a      	subs	r2, #26
    5828:	4916      	ldr	r1, [pc, #88]	; (5884 <_Z9CDC_SetupR8USBSetup+0x70>)
    582a:	4817      	ldr	r0, [pc, #92]	; (5888 <_Z9CDC_SetupR8USBSetup+0x74>)
    582c:	f000 fd98 	bl	6360 <_ZN14USBDeviceClass11sendControlEPKvm>
			return true;
    5830:	2001      	movs	r0, #1
}
    5832:	bd10      	pop	{r4, pc}
	if (requestType == REQUEST_HOSTTODEVICE_CLASS_INTERFACE)
    5834:	2921      	cmp	r1, #33	; 0x21
    5836:	d1fc      	bne.n	5832 <_Z9CDC_SetupR8USBSetup+0x1e>
		if (r == CDC_SET_LINE_CODING)
    5838:	2a20      	cmp	r2, #32
    583a:	d111      	bne.n	5860 <_Z9CDC_SetupR8USBSetup+0x4c>
			USBDevice.recvControl((void*)&_usbLineInfo, 7);
    583c:	3a19      	subs	r2, #25
    583e:	4911      	ldr	r1, [pc, #68]	; (5884 <_Z9CDC_SetupR8USBSetup+0x70>)
    5840:	4811      	ldr	r0, [pc, #68]	; (5888 <_Z9CDC_SetupR8USBSetup+0x74>)
    5842:	f000 fc45 	bl	60d0 <_ZN14USBDeviceClass11recvControlEPvm>
			if (_usbLineInfo.dwDTERate == 1200 && (_usbLineInfo.lineState & 0x01) == 0)
    5846:	2296      	movs	r2, #150	; 0x96
    5848:	4b0e      	ldr	r3, [pc, #56]	; (5884 <_Z9CDC_SetupR8USBSetup+0x70>)
    584a:	00d2      	lsls	r2, r2, #3
    584c:	6819      	ldr	r1, [r3, #0]
    584e:	4291      	cmp	r1, r2
    5850:	d103      	bne.n	585a <_Z9CDC_SetupR8USBSetup+0x46>
    5852:	2401      	movs	r4, #1
    5854:	79d8      	ldrb	r0, [r3, #7]
    5856:	4004      	ands	r4, r0
    5858:	d00e      	beq.n	5878 <_Z9CDC_SetupR8USBSetup+0x64>
				cancelReset();
    585a:	f7ff fe93 	bl	5584 <cancelReset>
    585e:	e00e      	b.n	587e <_Z9CDC_SetupR8USBSetup+0x6a>
		if (r == CDC_SET_CONTROL_LINE_STATE)
    5860:	2a22      	cmp	r2, #34	; 0x22
    5862:	d103      	bne.n	586c <_Z9CDC_SetupR8USBSetup+0x58>
			_usbLineInfo.lineState = setup.wValueL;
    5864:	789a      	ldrb	r2, [r3, #2]
    5866:	4b07      	ldr	r3, [pc, #28]	; (5884 <_Z9CDC_SetupR8USBSetup+0x70>)
    5868:	71da      	strb	r2, [r3, #7]
    586a:	e7ec      	b.n	5846 <_Z9CDC_SetupR8USBSetup+0x32>
		if (CDC_SEND_BREAK == r)
    586c:	2a23      	cmp	r2, #35	; 0x23
    586e:	d1e0      	bne.n	5832 <_Z9CDC_SetupR8USBSetup+0x1e>
			breakValue = ((uint16_t)setup.wValueH << 8) | setup.wValueL;
    5870:	885a      	ldrh	r2, [r3, #2]
    5872:	4b06      	ldr	r3, [pc, #24]	; (588c <_Z9CDC_SetupR8USBSetup+0x78>)
    5874:	601a      	str	r2, [r3, #0]
			return false;
    5876:	e7dc      	b.n	5832 <_Z9CDC_SetupR8USBSetup+0x1e>
				initiateReset(250);
    5878:	20fa      	movs	r0, #250	; 0xfa
    587a:	f7ff fe7d 	bl	5578 <initiateReset>
			return false;
    587e:	2000      	movs	r0, #0
    5880:	e7d7      	b.n	5832 <_Z9CDC_SetupR8USBSetup+0x1e>
    5882:	46c0      	nop			; (mov r8, r8)
    5884:	2000000c 	.word	0x2000000c
    5888:	20000648 	.word	0x20000648
    588c:	20000008 	.word	0x20000008

00005890 <_ZN7Serial_5beginEm>:
}
    5890:	4770      	bx	lr
	...

00005894 <_ZN7Serial_cvbEv>:
// setup() before printing to ensure that an application on the host is
// actually ready to receive and display the data.
// We add a short delay before returning to fix a bug observed by Federico
// where the port is configured (lineState != 0) but not quite opened.
Serial_::operator bool()
{
    5894:	b510      	push	{r4, lr}
	// this is here to avoid spurious opening after upload
	if (millis() < 500)
    5896:	f7ff fd5b 	bl	5350 <millis>
    589a:	23f4      	movs	r3, #244	; 0xf4
    589c:	33ff      	adds	r3, #255	; 0xff
		return false;
    589e:	2400      	movs	r4, #0
	if (millis() < 500)
    58a0:	4298      	cmp	r0, r3
    58a2:	d907      	bls.n	58b4 <_ZN7Serial_cvbEv+0x20>

	bool result = false;

	if (_usbLineInfo.lineState > 0)
    58a4:	4b04      	ldr	r3, [pc, #16]	; (58b8 <_ZN7Serial_cvbEv+0x24>)
	{
		result = true;
	}

	delay(10);
    58a6:	200a      	movs	r0, #10
	if (_usbLineInfo.lineState > 0)
    58a8:	79dc      	ldrb	r4, [r3, #7]
    58aa:	1e63      	subs	r3, r4, #1
    58ac:	419c      	sbcs	r4, r3
    58ae:	b2e4      	uxtb	r4, r4
	delay(10);
    58b0:	f7ff fd84 	bl	53bc <delay>
	return result;
}
    58b4:	0020      	movs	r0, r4
    58b6:	bd10      	pop	{r4, pc}
    58b8:	2000000c 	.word	0x2000000c

000058bc <_GLOBAL__sub_I__Z17_CDC_GetInterfacev>:
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
    58bc:	22fa      	movs	r2, #250	; 0xfa
    Print() : write_error(0) {}
    58be:	2100      	movs	r1, #0
    58c0:	4b05      	ldr	r3, [pc, #20]	; (58d8 <_GLOBAL__sub_I__Z17_CDC_GetInterfacev+0x1c>)
    58c2:	0092      	lsls	r2, r2, #2
    58c4:	609a      	str	r2, [r3, #8]
//	Serial over CDC (Serial1 is the physical port)

class Serial_ : public Stream
{
public:
	Serial_(USBDeviceClass &_usb) : usb(_usb), stalled(false) { }
    58c6:	4a05      	ldr	r2, [pc, #20]	; (58dc <_GLOBAL__sub_I__Z17_CDC_GetInterfacev+0x20>)
    58c8:	6059      	str	r1, [r3, #4]
    58ca:	3208      	adds	r2, #8
    58cc:	601a      	str	r2, [r3, #0]
    58ce:	4a04      	ldr	r2, [pc, #16]	; (58e0 <_GLOBAL__sub_I__Z17_CDC_GetInterfacev+0x24>)
    58d0:	7619      	strb	r1, [r3, #24]
    58d2:	611a      	str	r2, [r3, #16]

bool Serial_::rts() {
	return _usbLineInfo.lineState & 0x2;
}

Serial_ SerialUSB(USBDevice);
    58d4:	4770      	bx	lr
    58d6:	46c0      	nop			; (mov r8, r8)
    58d8:	2000062c 	.word	0x2000062c
    58dc:	0000b994 	.word	0x0000b994
    58e0:	20000648 	.word	0x20000648

000058e4 <_ZL5utox8mPc>:
	packMessages(false);

	return true;
}

static void utox8(uint32_t val, char* s) {
    58e4:	b530      	push	{r4, r5, lr}
	for (int i = 0; i < 8; i++) {
		int d = val & 0XF;
    58e6:	250f      	movs	r5, #15
    58e8:	1dcb      	adds	r3, r1, #7
    58ea:	3901      	subs	r1, #1
    58ec:	0002      	movs	r2, r0
    58ee:	402a      	ands	r2, r5
		val = (val >> 4);

		s[7 - i] = d > 9 ? 'A' + d - 10 : '0' + d;
    58f0:	0014      	movs	r4, r2
		val = (val >> 4);
    58f2:	0900      	lsrs	r0, r0, #4
		s[7 - i] = d > 9 ? 'A' + d - 10 : '0' + d;
    58f4:	3430      	adds	r4, #48	; 0x30
    58f6:	2a09      	cmp	r2, #9
    58f8:	dd01      	ble.n	58fe <_ZL5utox8mPc+0x1a>
    58fa:	3237      	adds	r2, #55	; 0x37
    58fc:	0014      	movs	r4, r2
    58fe:	701c      	strb	r4, [r3, #0]
    5900:	3b01      	subs	r3, #1
	for (int i = 0; i < 8; i++) {
    5902:	428b      	cmp	r3, r1
    5904:	d1f2      	bne.n	58ec <_ZL5utox8mPc+0x8>
	}
}
    5906:	bd30      	pop	{r4, r5, pc}

00005908 <_ZN26DoubleBufferedEPOutHandlerD1Ev>:
		usbd.epBank0SetAddress(ep, const_cast<uint8_t *>(data0));

		release();
	}

	virtual ~DoubleBufferedEPOutHandler() {
    5908:	b510      	push	{r4, lr}
    590a:	0004      	movs	r4, r0
		free((void*)data0);
    590c:	6980      	ldr	r0, [r0, #24]
    590e:	f003 fcfd 	bl	930c <free>
		free((void*)data1);
    5912:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    5914:	f003 fcfa 	bl	930c <free>
	}
    5918:	0020      	movs	r0, r4
    591a:	bd10      	pop	{r4, pc}

0000591c <_ZN26DoubleBufferedEPOutHandlerD0Ev>:
	virtual ~DoubleBufferedEPOutHandler() {
    591c:	b510      	push	{r4, lr}
    591e:	0004      	movs	r4, r0
	}
    5920:	f7ff fff2 	bl	5908 <_ZN26DoubleBufferedEPOutHandlerD1Ev>
    5924:	0020      	movs	r0, r4
    5926:	f7ff fd93 	bl	5450 <_ZdlPv>
    592a:	0020      	movs	r0, r4
    592c:	bd10      	pop	{r4, pc}
	...

00005930 <_ZN14USBDeviceClass6initEPEmm.part.5>:
	for (uint8_t i = 1; i < sizeof(EndPoints) && EndPoints[i] != 0; i++) {
		initEP(i, EndPoints[i]);
	}
}

void USBDeviceClass::initEP(uint32_t ep, uint32_t config)
    5930:	b570      	push	{r4, r5, r6, lr}
		if (epHandlers[ep] != NULL) {
			delete (DoubleBufferedEPOutHandler*)epHandlers[ep];
		}
		epHandlers[ep] = new DoubleBufferedEPOutHandler(usbd, ep, 256);
	}
	else if (config == (USB_ENDPOINT_TYPE_BULK | USB_ENDPOINT_IN(0)))
    5932:	2982      	cmp	r1, #130	; 0x82
    5934:	d11f      	bne.n	5976 <_ZN14USBDeviceClass6initEPEmm.part.5+0x46>
	inline void epBank1SetSize(ep_t ep, uint16_t size) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.SIZE = EP_PCKSIZE_SIZE(size); }
    5936:	b2c3      	uxtb	r3, r0
    5938:	4d2c      	ldr	r5, [pc, #176]	; (59ec <_ZN14USBDeviceClass6initEPEmm.part.5+0xbc>)
    593a:	015a      	lsls	r2, r3, #5
    593c:	18aa      	adds	r2, r5, r2
    593e:	6991      	ldr	r1, [r2, #24]
    5940:	4c2b      	ldr	r4, [pc, #172]	; (59f0 <_ZN14USBDeviceClass6initEPEmm.part.5+0xc0>)
	{
		usbd.epBank1SetSize(ep, 64);
		usbd.epBank1SetAddress(ep, &udd_ep_in_cache_buffer[ep]);
    5942:	0180      	lsls	r0, r0, #6
    5944:	400c      	ands	r4, r1
    5946:	21c0      	movs	r1, #192	; 0xc0
    5948:	0589      	lsls	r1, r1, #22
    594a:	4321      	orrs	r1, r4
    594c:	6191      	str	r1, [r2, #24]
    594e:	4929      	ldr	r1, [pc, #164]	; (59f4 <_ZN14USBDeviceClass6initEPEmm.part.5+0xc4>)
	inline void epBank1ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK1RDY = 1; }
    5950:	3308      	adds	r3, #8
    5952:	1808      	adds	r0, r1, r0
    5954:	2180      	movs	r1, #128	; 0x80
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
    5956:	6150      	str	r0, [r2, #20]
	inline void epBank1ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK1RDY = 1; }
    5958:	682a      	ldr	r2, [r5, #0]
    595a:	015b      	lsls	r3, r3, #5
    595c:	18d0      	adds	r0, r2, r3
    595e:	7904      	ldrb	r4, [r0, #4]
    5960:	4249      	negs	r1, r1
    5962:	4321      	orrs	r1, r4
    5964:	7101      	strb	r1, [r0, #4]
	inline void epBank1SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE1 = type; }
    5966:	2070      	movs	r0, #112	; 0x70
    5968:	5c99      	ldrb	r1, [r3, r2]
    596a:	4381      	bics	r1, r0
    596c:	0008      	movs	r0, r1
    596e:	2130      	movs	r1, #48	; 0x30
    5970:	4301      	orrs	r1, r0
    5972:	5499      	strb	r1, [r3, r2]
		usbd.epBank0SetByteCount(ep, 0);

		// NAK on endpoint OUT, the bank is full.
		usbd.epBank0SetReady(ep);
	}
}
    5974:	bd70      	pop	{r4, r5, r6, pc}
	else if (config == USB_ENDPOINT_TYPE_CONTROL)
    5976:	2900      	cmp	r1, #0
    5978:	d1fc      	bne.n	5974 <_ZN14USBDeviceClass6initEPEmm.part.5+0x44>
	inline void epBank0SetSize(ep_t ep, uint16_t size) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.SIZE = EP_PCKSIZE_SIZE(size); }
    597a:	24c0      	movs	r4, #192	; 0xc0
    597c:	b2c1      	uxtb	r1, r0
    597e:	4e1b      	ldr	r6, [pc, #108]	; (59ec <_ZN14USBDeviceClass6initEPEmm.part.5+0xbc>)
    5980:	014b      	lsls	r3, r1, #5
    5982:	18f3      	adds	r3, r6, r3
    5984:	689a      	ldr	r2, [r3, #8]
    5986:	4d1a      	ldr	r5, [pc, #104]	; (59f0 <_ZN14USBDeviceClass6initEPEmm.part.5+0xc0>)
    5988:	05a4      	lsls	r4, r4, #22
    598a:	402a      	ands	r2, r5
    598c:	4322      	orrs	r2, r4
    598e:	609a      	str	r2, [r3, #8]
		usbd.epBank0SetAddress(ep, &udd_ep_out_cache_buffer[ep]);
    5990:	4a19      	ldr	r2, [pc, #100]	; (59f8 <_ZN14USBDeviceClass6initEPEmm.part.5+0xc8>)
    5992:	0180      	lsls	r0, r0, #6
    5994:	1810      	adds	r0, r2, r0
	inline void epBank0SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE0 = type; }
    5996:	000a      	movs	r2, r1
	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
    5998:	6058      	str	r0, [r3, #4]
	inline void epBank0SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE0 = type; }
    599a:	6830      	ldr	r0, [r6, #0]
    599c:	2607      	movs	r6, #7
    599e:	3208      	adds	r2, #8
    59a0:	0152      	lsls	r2, r2, #5
    59a2:	5c11      	ldrb	r1, [r2, r0]
    59a4:	43b1      	bics	r1, r6
    59a6:	000e      	movs	r6, r1
    59a8:	2101      	movs	r1, #1
    59aa:	4331      	orrs	r1, r6
    59ac:	5411      	strb	r1, [r2, r0]
	inline void epBank1SetSize(ep_t ep, uint16_t size) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.SIZE = EP_PCKSIZE_SIZE(size); }
    59ae:	6999      	ldr	r1, [r3, #24]
    59b0:	400d      	ands	r5, r1
    59b2:	432c      	orrs	r4, r5
    59b4:	619c      	str	r4, [r3, #24]
	inline void epBank1SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE1 = type; }
    59b6:	2470      	movs	r4, #112	; 0x70
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
    59b8:	490e      	ldr	r1, [pc, #56]	; (59f4 <_ZN14USBDeviceClass6initEPEmm.part.5+0xc4>)
    59ba:	6159      	str	r1, [r3, #20]
	inline void epBank1SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE1 = type; }
    59bc:	5c11      	ldrb	r1, [r2, r0]
    59be:	43a1      	bics	r1, r4
    59c0:	000c      	movs	r4, r1
    59c2:	2110      	movs	r1, #16
    59c4:	4321      	orrs	r1, r4
    59c6:	5411      	strb	r1, [r2, r0]
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
    59c8:	6899      	ldr	r1, [r3, #8]
    59ca:	4c0c      	ldr	r4, [pc, #48]	; (59fc <_ZN14USBDeviceClass6initEPEmm.part.5+0xcc>)
	inline void epBank0SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK0RDY = 1; }
    59cc:	1882      	adds	r2, r0, r2
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
    59ce:	400c      	ands	r4, r1
    59d0:	2180      	movs	r1, #128	; 0x80
    59d2:	0349      	lsls	r1, r1, #13
    59d4:	4321      	orrs	r1, r4
    59d6:	6099      	str	r1, [r3, #8]
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
    59d8:	6899      	ldr	r1, [r3, #8]
    59da:	0b89      	lsrs	r1, r1, #14
    59dc:	0389      	lsls	r1, r1, #14
    59de:	6099      	str	r1, [r3, #8]
	inline void epBank0SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK0RDY = 1; }
    59e0:	2340      	movs	r3, #64	; 0x40
    59e2:	7951      	ldrb	r1, [r2, #5]
    59e4:	430b      	orrs	r3, r1
    59e6:	7153      	strb	r3, [r2, #5]
    59e8:	e7c4      	b.n	5974 <_ZN14USBDeviceClass6initEPEmm.part.5+0x44>
    59ea:	46c0      	nop			; (mov r8, r8)
    59ec:	20000b00 	.word	0x20000b00
    59f0:	8fffffff 	.word	0x8fffffff
    59f4:	20000674 	.word	0x20000674
    59f8:	20000834 	.word	0x20000834
    59fc:	f0003fff 	.word	0xf0003fff

00005a00 <_ZN20USBDevice_SAMD21G18x5resetEv>:
void USBDevice_SAMD21G18x::reset() {
    5a00:	b570      	push	{r4, r5, r6, lr}
	usb.CTRLA.bit.SWRST = 1;
    5a02:	0004      	movs	r4, r0
    5a04:	2301      	movs	r3, #1
    5a06:	cc20      	ldmia	r4!, {r5}
	memset(EP, 0, sizeof(EP));
    5a08:	2100      	movs	r1, #0
	usb.CTRLA.bit.SWRST = 1;
    5a0a:	782a      	ldrb	r2, [r5, #0]
	memset(EP, 0, sizeof(EP));
    5a0c:	0020      	movs	r0, r4
	usb.CTRLA.bit.SWRST = 1;
    5a0e:	4313      	orrs	r3, r2
	memset(EP, 0, sizeof(EP));
    5a10:	2280      	movs	r2, #128	; 0x80
	usb.CTRLA.bit.SWRST = 1;
    5a12:	702b      	strb	r3, [r5, #0]
	memset(EP, 0, sizeof(EP));
    5a14:	0052      	lsls	r2, r2, #1
    5a16:	f003 fcbf 	bl	9398 <memset>
	while (usb.SYNCBUSY.bit.SWRST) {}
    5a1a:	78ab      	ldrb	r3, [r5, #2]
    5a1c:	07db      	lsls	r3, r3, #31
    5a1e:	d4fc      	bmi.n	5a1a <_ZN20USBDevice_SAMD21G18x5resetEv+0x1a>
	usb.DESCADD.reg = (uint32_t)(&EP);
    5a20:	626c      	str	r4, [r5, #36]	; 0x24
}
    5a22:	bd70      	pop	{r4, r5, r6, pc}

00005a24 <_ZN20USBDevice_SAMD21G18x9calibrateEv>:
	uint32_t pad_transn = (*pad_transn_p & USB_FUSES_TRANSN_Msk) >> USB_FUSES_TRANSN_Pos;
    5a24:	221f      	movs	r2, #31
    5a26:	4b14      	ldr	r3, [pc, #80]	; (5a78 <_ZN20USBDevice_SAMD21G18x9calibrateEv+0x54>)
void USBDevice_SAMD21G18x::calibrate() {
    5a28:	b570      	push	{r4, r5, r6, lr}
	uint32_t pad_transn = (*pad_transn_p & USB_FUSES_TRANSN_Msk) >> USB_FUSES_TRANSN_Pos;
    5a2a:	681b      	ldr	r3, [r3, #0]
    5a2c:	0b59      	lsrs	r1, r3, #13
	uint32_t pad_transp = (*pad_transp_p & USB_FUSES_TRANSP_Msk) >> USB_FUSES_TRANSP_Pos;
    5a2e:	0c9c      	lsrs	r4, r3, #18
	uint32_t pad_trim   = (*pad_trim_p   & USB_FUSES_TRIM_Msk  ) >> USB_FUSES_TRIM_Pos;
    5a30:	019b      	lsls	r3, r3, #6
	uint32_t pad_transn = (*pad_transn_p & USB_FUSES_TRANSN_Msk) >> USB_FUSES_TRANSN_Pos;
    5a32:	4011      	ands	r1, r2
	uint32_t pad_trim   = (*pad_trim_p   & USB_FUSES_TRIM_Msk  ) >> USB_FUSES_TRIM_Pos;
    5a34:	0f5b      	lsrs	r3, r3, #29
	uint32_t pad_transp = (*pad_transp_p & USB_FUSES_TRANSP_Msk) >> USB_FUSES_TRANSP_Pos;
    5a36:	4022      	ands	r2, r4
	if (pad_transn == 0x1F)  // maximum value (31)
    5a38:	291f      	cmp	r1, #31
    5a3a:	d100      	bne.n	5a3e <_ZN20USBDevice_SAMD21G18x9calibrateEv+0x1a>
		pad_transn = 5;
    5a3c:	391a      	subs	r1, #26
	if (pad_transp == 0x1F)  // maximum value (31)
    5a3e:	2a1f      	cmp	r2, #31
    5a40:	d100      	bne.n	5a44 <_ZN20USBDevice_SAMD21G18x9calibrateEv+0x20>
		pad_transp = 29;
    5a42:	3a02      	subs	r2, #2
	if (pad_trim == 0x7)     // maximum value (7)
    5a44:	2b07      	cmp	r3, #7
    5a46:	d100      	bne.n	5a4a <_ZN20USBDevice_SAMD21G18x9calibrateEv+0x26>
		pad_trim = 3;
    5a48:	3b04      	subs	r3, #4
	usb.PADCAL.bit.TRANSN = pad_transn;
    5a4a:	251f      	movs	r5, #31
    5a4c:	6800      	ldr	r0, [r0, #0]
    5a4e:	018e      	lsls	r6, r1, #6
    5a50:	8d04      	ldrh	r4, [r0, #40]	; 0x28
    5a52:	490a      	ldr	r1, [pc, #40]	; (5a7c <_ZN20USBDevice_SAMD21G18x9calibrateEv+0x58>)
	usb.PADCAL.bit.TRANSP = pad_transp;
    5a54:	402a      	ands	r2, r5
	usb.PADCAL.bit.TRANSN = pad_transn;
    5a56:	4021      	ands	r1, r4
    5a58:	4331      	orrs	r1, r6
    5a5a:	8501      	strh	r1, [r0, #40]	; 0x28
	usb.PADCAL.bit.TRANSP = pad_transp;
    5a5c:	8d01      	ldrh	r1, [r0, #40]	; 0x28
    5a5e:	0014      	movs	r4, r2
    5a60:	000a      	movs	r2, r1
    5a62:	43aa      	bics	r2, r5
    5a64:	4322      	orrs	r2, r4
    5a66:	8502      	strh	r2, [r0, #40]	; 0x28
	usb.PADCAL.bit.TRIM   = pad_trim;
    5a68:	8d02      	ldrh	r2, [r0, #40]	; 0x28
    5a6a:	0319      	lsls	r1, r3, #12
    5a6c:	4b04      	ldr	r3, [pc, #16]	; (5a80 <_ZN20USBDevice_SAMD21G18x9calibrateEv+0x5c>)
    5a6e:	4013      	ands	r3, r2
    5a70:	430b      	orrs	r3, r1
    5a72:	8503      	strh	r3, [r0, #40]	; 0x28
}
    5a74:	bd70      	pop	{r4, r5, r6, pc}
    5a76:	46c0      	nop			; (mov r8, r8)
    5a78:	00806024 	.word	0x00806024
    5a7c:	fffff83f 	.word	0xfffff83f
    5a80:	ffff8fff 	.word	0xffff8fff

00005a84 <_ZN7__GuardC1Ev>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    5a84:	f3ef 8310 	mrs	r3, PRIMASK
	__Guard() : primask(__get_PRIMASK()), loops(1) {
    5a88:	6003      	str	r3, [r0, #0]
    5a8a:	2301      	movs	r3, #1
    5a8c:	6043      	str	r3, [r0, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    5a8e:	b672      	cpsid	i
	}
    5a90:	4770      	bx	lr

00005a92 <_ZN7__GuardD1Ev>:
		if (primask == 0) {
    5a92:	6803      	ldr	r3, [r0, #0]
    5a94:	2b00      	cmp	r3, #0
    5a96:	d102      	bne.n	5a9e <_ZN7__GuardD1Ev+0xc>
  __ASM volatile ("cpsie i" : : : "memory");
    5a98:	b662      	cpsie	i
  __ASM volatile ("isb 0xF":::"memory");
    5a9a:	f3bf 8f6f 	isb	sy
	}
    5a9e:	4770      	bx	lr

00005aa0 <_ZNK26DoubleBufferedEPOutHandler9availableEv>:
			release();
		}
	}

	// Returns how many bytes are stored in the buffers
	virtual uint32_t available() const {
    5aa0:	b537      	push	{r0, r1, r2, r4, r5, lr}
		if (current == 0) {
    5aa2:	6905      	ldr	r5, [r0, #16]
	virtual uint32_t available() const {
    5aa4:	0004      	movs	r4, r0
			bool ready = false;
			synchronized {
    5aa6:	4668      	mov	r0, sp
		if (current == 0) {
    5aa8:	2d00      	cmp	r5, #0
    5aaa:	d114      	bne.n	5ad6 <_ZNK26DoubleBufferedEPOutHandler9availableEv+0x36>
			synchronized {
    5aac:	f7ff ffea 	bl	5a84 <_ZN7__GuardC1Ev>
    5ab0:	9b01      	ldr	r3, [sp, #4]
				ready = ready0;
    5ab2:	1d62      	adds	r2, r4, #5
			synchronized {
    5ab4:	3b01      	subs	r3, #1
    5ab6:	d302      	bcc.n	5abe <_ZNK26DoubleBufferedEPOutHandler9availableEv+0x1e>
				ready = ready0;
    5ab8:	7fd5      	ldrb	r5, [r2, #31]
    5aba:	b2ed      	uxtb	r5, r5
    5abc:	e7fa      	b.n	5ab4 <_ZNK26DoubleBufferedEPOutHandler9availableEv+0x14>
			synchronized {
    5abe:	4668      	mov	r0, sp
    5ac0:	9301      	str	r3, [sp, #4]
    5ac2:	f7ff ffe6 	bl	5a92 <_ZN7__GuardD1Ev>
			}
			return ready ? (last0 - first0) : 0;
    5ac6:	2d00      	cmp	r5, #0
    5ac8:	d101      	bne.n	5ace <_ZNK26DoubleBufferedEPOutHandler9availableEv+0x2e>
    5aca:	2000      	movs	r0, #0
			synchronized {
				ready = ready1;
			}
			return ready ? (last1 - first1) : 0;
		}
	}
    5acc:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
			return ready ? (last0 - first0) : 0;
    5ace:	6a20      	ldr	r0, [r4, #32]
    5ad0:	69e3      	ldr	r3, [r4, #28]
			return ready ? (last1 - first1) : 0;
    5ad2:	1ac0      	subs	r0, r0, r3
    5ad4:	e7fa      	b.n	5acc <_ZNK26DoubleBufferedEPOutHandler9availableEv+0x2c>
			synchronized {
    5ad6:	f7ff ffd5 	bl	5a84 <_ZN7__GuardC1Ev>
				ready = ready1;
    5ada:	0022      	movs	r2, r4
			bool ready = false;
    5adc:	2500      	movs	r5, #0
    5ade:	9b01      	ldr	r3, [sp, #4]
				ready = ready1;
    5ae0:	3234      	adds	r2, #52	; 0x34
			synchronized {
    5ae2:	3b01      	subs	r3, #1
    5ae4:	d302      	bcc.n	5aec <_ZNK26DoubleBufferedEPOutHandler9availableEv+0x4c>
				ready = ready1;
    5ae6:	7815      	ldrb	r5, [r2, #0]
    5ae8:	b2ed      	uxtb	r5, r5
			synchronized {
    5aea:	e7fa      	b.n	5ae2 <_ZNK26DoubleBufferedEPOutHandler9availableEv+0x42>
    5aec:	4668      	mov	r0, sp
    5aee:	9301      	str	r3, [sp, #4]
    5af0:	f7ff ffcf 	bl	5a92 <_ZN7__GuardD1Ev>
			return ready ? (last1 - first1) : 0;
    5af4:	2d00      	cmp	r5, #0
    5af6:	d0e8      	beq.n	5aca <_ZNK26DoubleBufferedEPOutHandler9availableEv+0x2a>
    5af8:	6b20      	ldr	r0, [r4, #48]	; 0x30
    5afa:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    5afc:	e7e9      	b.n	5ad2 <_ZNK26DoubleBufferedEPOutHandler9availableEv+0x32>
	...

00005b00 <_ZN26DoubleBufferedEPOutHandler7releaseEv>:

	void release() {
    5b00:	b5f0      	push	{r4, r5, r6, r7, lr}
	inline void epBank0EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT0 = 1; }
    5b02:	2501      	movs	r5, #1
		// Release OUT EP
		usbd.epBank0EnableTransferComplete(ep);
    5b04:	6846      	ldr	r6, [r0, #4]
	inline void epBank0EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT0 = 1; }
    5b06:	7a03      	ldrb	r3, [r0, #8]
    5b08:	6831      	ldr	r1, [r6, #0]
    5b0a:	015a      	lsls	r2, r3, #5
    5b0c:	188c      	adds	r4, r1, r2
    5b0e:	34ff      	adds	r4, #255	; 0xff
    5b10:	7aa7      	ldrb	r7, [r4, #10]
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
    5b12:	18b2      	adds	r2, r6, r2
	inline void epBank0EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT0 = 1; }
    5b14:	433d      	orrs	r5, r7
    5b16:	72a5      	strb	r5, [r4, #10]
		usbd.epBank0SetMultiPacketSize(ep, size);
    5b18:	68c4      	ldr	r4, [r0, #12]
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
    5b1a:	4d09      	ldr	r5, [pc, #36]	; (5b40 <_ZN26DoubleBufferedEPOutHandler7releaseEv+0x40>)
    5b1c:	6890      	ldr	r0, [r2, #8]
    5b1e:	04a4      	lsls	r4, r4, #18
    5b20:	4028      	ands	r0, r5
    5b22:	0924      	lsrs	r4, r4, #4
    5b24:	4320      	orrs	r0, r4
    5b26:	6090      	str	r0, [r2, #8]
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
    5b28:	6890      	ldr	r0, [r2, #8]
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
    5b2a:	3308      	adds	r3, #8
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
    5b2c:	0b80      	lsrs	r0, r0, #14
    5b2e:	0380      	lsls	r0, r0, #14
    5b30:	6090      	str	r0, [r2, #8]
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
    5b32:	2240      	movs	r2, #64	; 0x40
    5b34:	015b      	lsls	r3, r3, #5
    5b36:	18cb      	adds	r3, r1, r3
    5b38:	7919      	ldrb	r1, [r3, #4]
    5b3a:	430a      	orrs	r2, r1
    5b3c:	711a      	strb	r2, [r3, #4]
		usbd.epBank0SetByteCount(ep, 0);
		usbd.epBank0ResetReady(ep);
	}
    5b3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5b40:	f0003fff 	.word	0xf0003fff

00005b44 <_ZN26DoubleBufferedEPOutHandler4recvEPvm>:
	virtual uint32_t recv(void *_data, uint32_t len)
    5b44:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
		if (current == 0) {
    5b46:	6903      	ldr	r3, [r0, #16]
	virtual uint32_t recv(void *_data, uint32_t len)
    5b48:	0004      	movs	r4, r0
    5b4a:	000e      	movs	r6, r1
    5b4c:	0017      	movs	r7, r2
			synchronized {
    5b4e:	4668      	mov	r0, sp
		if (current == 0) {
    5b50:	2b00      	cmp	r3, #0
    5b52:	d13d      	bne.n	5bd0 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x8c>
			synchronized {
    5b54:	f7ff ff96 	bl	5a84 <_ZN7__GuardC1Ev>
    5b58:	9b01      	ldr	r3, [sp, #4]
				if (!ready0) {
    5b5a:	1d61      	adds	r1, r4, #5
    5b5c:	3b01      	subs	r3, #1
			synchronized {
    5b5e:	1c5a      	adds	r2, r3, #1
    5b60:	d00c      	beq.n	5b7c <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x38>
				if (!ready0) {
    5b62:	7fcd      	ldrb	r5, [r1, #31]
    5b64:	1e5a      	subs	r2, r3, #1
    5b66:	b2ed      	uxtb	r5, r5
    5b68:	2d00      	cmp	r5, #0
    5b6a:	d105      	bne.n	5b78 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x34>
				synchronized {
    5b6c:	4668      	mov	r0, sp
    5b6e:	9301      	str	r3, [sp, #4]
    5b70:	f7ff ff8f 	bl	5a92 <_ZN7__GuardD1Ev>
	}
    5b74:	0028      	movs	r0, r5
    5b76:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    5b78:	0013      	movs	r3, r2
    5b7a:	e7f0      	b.n	5b5e <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x1a>
			synchronized {
    5b7c:	4668      	mov	r0, sp
    5b7e:	9301      	str	r3, [sp, #4]
			for (i=0; i<len && first0 < last0; i++) {
    5b80:	2500      	movs	r5, #0
			synchronized {
    5b82:	f7ff ff86 	bl	5a92 <_ZN7__GuardD1Ev>
    5b86:	69e3      	ldr	r3, [r4, #28]
			for (i=0; i<len && first0 < last0; i++) {
    5b88:	42af      	cmp	r7, r5
    5b8a:	d002      	beq.n	5b92 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x4e>
    5b8c:	6a22      	ldr	r2, [r4, #32]
    5b8e:	4293      	cmp	r3, r2
    5b90:	d357      	bcc.n	5c42 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0xfe>
			if (first0 == last0) {
    5b92:	6a22      	ldr	r2, [r4, #32]
    5b94:	4293      	cmp	r3, r2
    5b96:	d1ed      	bne.n	5b74 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x30>
				first0 = 0;
    5b98:	2300      	movs	r3, #0
    5b9a:	61e3      	str	r3, [r4, #28]
				current = 1;
    5b9c:	3301      	adds	r3, #1
    5b9e:	6123      	str	r3, [r4, #16]
				synchronized {
    5ba0:	4668      	mov	r0, sp
    5ba2:	f7ff ff6f 	bl	5a84 <_ZN7__GuardC1Ev>
					if (notify) {
    5ba6:	0022      	movs	r2, r4
					ready0 = false;
    5ba8:	2100      	movs	r1, #0
    5baa:	9b01      	ldr	r3, [sp, #4]
    5bac:	1d67      	adds	r7, r4, #5
    5bae:	3b01      	subs	r3, #1
					if (notify) {
    5bb0:	3235      	adds	r2, #53	; 0x35
				synchronized {
    5bb2:	1c58      	adds	r0, r3, #1
    5bb4:	d0da      	beq.n	5b6c <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x28>
					ready0 = false;
    5bb6:	77f9      	strb	r1, [r7, #31]
					if (notify) {
    5bb8:	7810      	ldrb	r0, [r2, #0]
    5bba:	1e5e      	subs	r6, r3, #1
    5bbc:	2800      	cmp	r0, #0
    5bbe:	d005      	beq.n	5bcc <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x88>
						notify = false;
    5bc0:	7011      	strb	r1, [r2, #0]
						release();
    5bc2:	0020      	movs	r0, r4
    5bc4:	9301      	str	r3, [sp, #4]
    5bc6:	f7ff ff9b 	bl	5b00 <_ZN26DoubleBufferedEPOutHandler7releaseEv>
    5bca:	e7ec      	b.n	5ba6 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x62>
					if (notify) {
    5bcc:	0033      	movs	r3, r6
    5bce:	e7f0      	b.n	5bb2 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x6e>
			synchronized {
    5bd0:	f7ff ff58 	bl	5a84 <_ZN7__GuardC1Ev>
				if (!ready1) {
    5bd4:	0021      	movs	r1, r4
    5bd6:	9b01      	ldr	r3, [sp, #4]
    5bd8:	3134      	adds	r1, #52	; 0x34
    5bda:	3b01      	subs	r3, #1
			synchronized {
    5bdc:	1c5a      	adds	r2, r3, #1
    5bde:	d006      	beq.n	5bee <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0xaa>
				if (!ready1) {
    5be0:	780d      	ldrb	r5, [r1, #0]
    5be2:	1e5a      	subs	r2, r3, #1
    5be4:	b2ed      	uxtb	r5, r5
    5be6:	2d00      	cmp	r5, #0
    5be8:	d0c0      	beq.n	5b6c <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x28>
    5bea:	0013      	movs	r3, r2
    5bec:	e7f6      	b.n	5bdc <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x98>
			synchronized {
    5bee:	4668      	mov	r0, sp
    5bf0:	9301      	str	r3, [sp, #4]
			for (i=0; i<len && first1 < last1; i++) {
    5bf2:	2500      	movs	r5, #0
			synchronized {
    5bf4:	f7ff ff4d 	bl	5a92 <_ZN7__GuardD1Ev>
    5bf8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
			for (i=0; i<len && first1 < last1; i++) {
    5bfa:	42bd      	cmp	r5, r7
    5bfc:	d002      	beq.n	5c04 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0xc0>
    5bfe:	6b22      	ldr	r2, [r4, #48]	; 0x30
    5c00:	4293      	cmp	r3, r2
    5c02:	d326      	bcc.n	5c52 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x10e>
			if (first1 == last1) {
    5c04:	6b22      	ldr	r2, [r4, #48]	; 0x30
    5c06:	4293      	cmp	r3, r2
    5c08:	d1b4      	bne.n	5b74 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x30>
				first1 = 0;
    5c0a:	2300      	movs	r3, #0
				synchronized {
    5c0c:	4668      	mov	r0, sp
				first1 = 0;
    5c0e:	62e3      	str	r3, [r4, #44]	; 0x2c
				current = 0;
    5c10:	6123      	str	r3, [r4, #16]
				synchronized {
    5c12:	f7ff ff37 	bl	5a84 <_ZN7__GuardC1Ev>
					ready1 = false;
    5c16:	0027      	movs	r7, r4
					if (notify) {
    5c18:	0022      	movs	r2, r4
					ready1 = false;
    5c1a:	2100      	movs	r1, #0
    5c1c:	9b01      	ldr	r3, [sp, #4]
    5c1e:	3734      	adds	r7, #52	; 0x34
    5c20:	3b01      	subs	r3, #1
					if (notify) {
    5c22:	3235      	adds	r2, #53	; 0x35
				synchronized {
    5c24:	1c58      	adds	r0, r3, #1
    5c26:	d0a1      	beq.n	5b6c <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x28>
					ready1 = false;
    5c28:	7039      	strb	r1, [r7, #0]
					if (notify) {
    5c2a:	7810      	ldrb	r0, [r2, #0]
    5c2c:	1e5e      	subs	r6, r3, #1
    5c2e:	2800      	cmp	r0, #0
    5c30:	d005      	beq.n	5c3e <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0xfa>
						notify = false;
    5c32:	7011      	strb	r1, [r2, #0]
						release();
    5c34:	0020      	movs	r0, r4
    5c36:	9301      	str	r3, [sp, #4]
    5c38:	f7ff ff62 	bl	5b00 <_ZN26DoubleBufferedEPOutHandler7releaseEv>
    5c3c:	e7eb      	b.n	5c16 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0xd2>
    5c3e:	0033      	movs	r3, r6
    5c40:	e7f0      	b.n	5c24 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0xe0>
				data[i] = data0[first0++];
    5c42:	1c5a      	adds	r2, r3, #1
    5c44:	61e2      	str	r2, [r4, #28]
    5c46:	69a2      	ldr	r2, [r4, #24]
    5c48:	18d3      	adds	r3, r2, r3
    5c4a:	781b      	ldrb	r3, [r3, #0]
    5c4c:	5573      	strb	r3, [r6, r5]
			for (i=0; i<len && first0 < last0; i++) {
    5c4e:	3501      	adds	r5, #1
    5c50:	e799      	b.n	5b86 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x42>
				data[i] = data1[first1++];
    5c52:	1c5a      	adds	r2, r3, #1
    5c54:	62e2      	str	r2, [r4, #44]	; 0x2c
    5c56:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    5c58:	18d3      	adds	r3, r2, r3
    5c5a:	781b      	ldrb	r3, [r3, #0]
    5c5c:	5573      	strb	r3, [r6, r5]
			for (i=0; i<len && first1 < last1; i++) {
    5c5e:	3501      	adds	r5, #1
    5c60:	e7ca      	b.n	5bf8 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0xb4>

00005c62 <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv>:
	virtual void handleEndpoint()
    5c62:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	inline bool epBank0IsTransferComplete(ep_t ep)  { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.TRCPT0; }
    5c64:	7a02      	ldrb	r2, [r0, #8]
		if (usbd.epBank0IsTransferComplete(ep))
    5c66:	6843      	ldr	r3, [r0, #4]
	inline bool epBank0IsTransferComplete(ep_t ep)  { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.TRCPT0; }
    5c68:	0011      	movs	r1, r2
	virtual void handleEndpoint()
    5c6a:	0004      	movs	r4, r0
	inline bool epBank0IsTransferComplete(ep_t ep)  { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.TRCPT0; }
    5c6c:	3108      	adds	r1, #8
    5c6e:	6818      	ldr	r0, [r3, #0]
    5c70:	0149      	lsls	r1, r1, #5
    5c72:	1841      	adds	r1, r0, r1
    5c74:	79c8      	ldrb	r0, [r1, #7]
		if (usbd.epBank0IsTransferComplete(ep))
    5c76:	07c0      	lsls	r0, r0, #31
    5c78:	d527      	bpl.n	5cca <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0x68>
	inline void epBank0AckTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT(1); }
    5c7a:	2501      	movs	r5, #1
    5c7c:	0152      	lsls	r2, r2, #5
    5c7e:	71cd      	strb	r5, [r1, #7]
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
    5c80:	189b      	adds	r3, r3, r2
    5c82:	689a      	ldr	r2, [r3, #8]
			if (incoming == 0) {
    5c84:	6961      	ldr	r1, [r4, #20]
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
    5c86:	0492      	lsls	r2, r2, #18
    5c88:	0c92      	lsrs	r2, r2, #18
			if (incoming == 0) {
    5c8a:	2900      	cmp	r1, #0
    5c8c:	d121      	bne.n	5cd2 <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0x70>
				last0 = usbd.epBank0ByteCount(ep);
    5c8e:	6222      	str	r2, [r4, #32]
				if (last0 != 0) {
    5c90:	6a22      	ldr	r2, [r4, #32]
    5c92:	2a00      	cmp	r2, #0
    5c94:	d03e      	beq.n	5d14 <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0xb2>
	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
    5c96:	6aa2      	ldr	r2, [r4, #40]	; 0x28
					incoming = 1;
    5c98:	6165      	str	r5, [r4, #20]
					synchronized {
    5c9a:	4668      	mov	r0, sp
	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
    5c9c:	605a      	str	r2, [r3, #4]
					synchronized {
    5c9e:	f7ff fef1 	bl	5a84 <_ZN7__GuardC1Ev>
						if (ready1) {
    5ca2:	0027      	movs	r7, r4
    5ca4:	0021      	movs	r1, r4
    5ca6:	9b01      	ldr	r3, [sp, #4]
						ready0 = true;
    5ca8:	1d66      	adds	r6, r4, #5
    5caa:	3b01      	subs	r3, #1
						if (ready1) {
    5cac:	3734      	adds	r7, #52	; 0x34
    5cae:	3135      	adds	r1, #53	; 0x35
					synchronized {
    5cb0:	1c5a      	adds	r2, r3, #1
    5cb2:	d02b      	beq.n	5d0c <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0xaa>
						ready0 = true;
    5cb4:	77f5      	strb	r5, [r6, #31]
						if (ready1) {
    5cb6:	783a      	ldrb	r2, [r7, #0]
    5cb8:	1e58      	subs	r0, r3, #1
    5cba:	b2d2      	uxtb	r2, r2
    5cbc:	2a00      	cmp	r2, #0
    5cbe:	d005      	beq.n	5ccc <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0x6a>
    5cc0:	9301      	str	r3, [sp, #4]
							return;
    5cc2:	4668      	mov	r0, sp
							notify = true;
    5cc4:	700d      	strb	r5, [r1, #0]
							return;
    5cc6:	f7ff fee4 	bl	5a92 <_ZN7__GuardD1Ev>
	}
    5cca:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
						notify = false;
    5ccc:	700a      	strb	r2, [r1, #0]
					synchronized {
    5cce:	0003      	movs	r3, r0
    5cd0:	e7ee      	b.n	5cb0 <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0x4e>
				last1 = usbd.epBank0ByteCount(ep);
    5cd2:	6322      	str	r2, [r4, #48]	; 0x30
				if (last1 != 0) {
    5cd4:	6b22      	ldr	r2, [r4, #48]	; 0x30
    5cd6:	2a00      	cmp	r2, #0
    5cd8:	d01c      	beq.n	5d14 <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0xb2>
					incoming = 0;
    5cda:	2200      	movs	r2, #0
    5cdc:	6162      	str	r2, [r4, #20]
	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
    5cde:	69a2      	ldr	r2, [r4, #24]
					synchronized {
    5ce0:	4668      	mov	r0, sp
	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
    5ce2:	605a      	str	r2, [r3, #4]
					synchronized {
    5ce4:	f7ff fece 	bl	5a84 <_ZN7__GuardC1Ev>
						ready1 = true;
    5ce8:	0026      	movs	r6, r4
    5cea:	0021      	movs	r1, r4
    5cec:	9b01      	ldr	r3, [sp, #4]
    5cee:	3634      	adds	r6, #52	; 0x34
    5cf0:	3b01      	subs	r3, #1
						if (ready0) {
    5cf2:	1d67      	adds	r7, r4, #5
    5cf4:	3135      	adds	r1, #53	; 0x35
					synchronized {
    5cf6:	1c5a      	adds	r2, r3, #1
    5cf8:	d008      	beq.n	5d0c <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0xaa>
						ready1 = true;
    5cfa:	7035      	strb	r5, [r6, #0]
						if (ready0) {
    5cfc:	7ffa      	ldrb	r2, [r7, #31]
    5cfe:	1e58      	subs	r0, r3, #1
    5d00:	b2d2      	uxtb	r2, r2
    5d02:	2a00      	cmp	r2, #0
    5d04:	d1dc      	bne.n	5cc0 <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0x5e>
						notify = false;
    5d06:	700a      	strb	r2, [r1, #0]
					synchronized {
    5d08:	0003      	movs	r3, r0
    5d0a:	e7f4      	b.n	5cf6 <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0x94>
    5d0c:	4668      	mov	r0, sp
    5d0e:	9301      	str	r3, [sp, #4]
    5d10:	f7ff febf 	bl	5a92 <_ZN7__GuardD1Ev>
			release();
    5d14:	0020      	movs	r0, r4
    5d16:	f7ff fef3 	bl	5b00 <_ZN26DoubleBufferedEPOutHandler7releaseEv>
    5d1a:	e7d6      	b.n	5cca <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0x68>

00005d1c <_ZN14USBDeviceClass14SendInterfacesEPm>:
{
    5d1c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	uint8_t interfaces = 0;
    5d1e:	466b      	mov	r3, sp
    5d20:	1ddc      	adds	r4, r3, #7
    5d22:	2300      	movs	r3, #0
{
    5d24:	000d      	movs	r5, r1
	total[0] += CDC_GetInterface(&interfaces);
    5d26:	0020      	movs	r0, r4
	uint8_t interfaces = 0;
    5d28:	7023      	strb	r3, [r4, #0]
	total[0] += CDC_GetInterface(&interfaces);
    5d2a:	f7ff fd65 	bl	57f8 <_Z16CDC_GetInterfacePh>
    5d2e:	682b      	ldr	r3, [r5, #0]
    5d30:	1818      	adds	r0, r3, r0
    5d32:	6028      	str	r0, [r5, #0]
	total[0] += PluggableUSB().getInterface(&interfaces);
    5d34:	f001 fb4e 	bl	73d4 <_Z12PluggableUSBv>
    5d38:	0021      	movs	r1, r4
    5d3a:	f001 fb07 	bl	734c <_ZN13PluggableUSB_12getInterfaceEPh>
    5d3e:	682b      	ldr	r3, [r5, #0]
    5d40:	1818      	adds	r0, r3, r0
    5d42:	6028      	str	r0, [r5, #0]
	return interfaces;
    5d44:	7820      	ldrb	r0, [r4, #0]
}
    5d46:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

00005d48 <_ZN14USBDeviceClass14handleEndpointEh>:
	if (ep == CDC_ENDPOINT_IN)
    5d48:	2903      	cmp	r1, #3
    5d4a:	d10e      	bne.n	5d6a <_ZN14USBDeviceClass14handleEndpointEh+0x22>
	inline void epBank1ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK1RDY = 1; }
    5d4c:	2280      	movs	r2, #128	; 0x80
    5d4e:	4b0e      	ldr	r3, [pc, #56]	; (5d88 <_ZN14USBDeviceClass14handleEndpointEh+0x40>)
    5d50:	3162      	adds	r1, #98	; 0x62
    5d52:	681b      	ldr	r3, [r3, #0]
    5d54:	31ff      	adds	r1, #255	; 0xff
    5d56:	5c58      	ldrb	r0, [r3, r1]
    5d58:	4252      	negs	r2, r2
    5d5a:	4302      	orrs	r2, r0
    5d5c:	545a      	strb	r2, [r3, r1]
	inline void epBank1AckTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT(2); }
    5d5e:	2268      	movs	r2, #104	; 0x68
    5d60:	3963      	subs	r1, #99	; 0x63
    5d62:	39ff      	subs	r1, #255	; 0xff
    5d64:	32ff      	adds	r2, #255	; 0xff
    5d66:	5499      	strb	r1, [r3, r2]
}
    5d68:	4770      	bx	lr
	if (ep == CDC_ENDPOINT_ACM)
    5d6a:	2901      	cmp	r1, #1
    5d6c:	d1fc      	bne.n	5d68 <_ZN14USBDeviceClass14handleEndpointEh+0x20>
	inline void epBank1ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK1RDY = 1; }
    5d6e:	2280      	movs	r2, #128	; 0x80
    5d70:	4b05      	ldr	r3, [pc, #20]	; (5d88 <_ZN14USBDeviceClass14handleEndpointEh+0x40>)
    5d72:	3124      	adds	r1, #36	; 0x24
    5d74:	681b      	ldr	r3, [r3, #0]
    5d76:	31ff      	adds	r1, #255	; 0xff
    5d78:	5c58      	ldrb	r0, [r3, r1]
    5d7a:	4252      	negs	r2, r2
    5d7c:	4302      	orrs	r2, r0
    5d7e:	545a      	strb	r2, [r3, r1]
	inline void epBank1AckTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT(2); }
    5d80:	3923      	subs	r1, #35	; 0x23
    5d82:	39ff      	subs	r1, #255	; 0xff
    5d84:	2228      	movs	r2, #40	; 0x28
    5d86:	e7ed      	b.n	5d64 <_ZN14USBDeviceClass14handleEndpointEh+0x1c>
    5d88:	20000b00 	.word	0x20000b00

00005d8c <_ZN14USBDeviceClass4initEv>:
	PM->APBBMASK.reg |= PM_APBBMASK_USB;
    5d8c:	2320      	movs	r3, #32
{
    5d8e:	b570      	push	{r4, r5, r6, lr}
	PM->APBBMASK.reg |= PM_APBBMASK_USB;
    5d90:	4a25      	ldr	r2, [pc, #148]	; (5e28 <_ZN14USBDeviceClass4initEv+0x9c>)
{
    5d92:	0004      	movs	r4, r0
	PM->APBBMASK.reg |= PM_APBBMASK_USB;
    5d94:	69d1      	ldr	r1, [r2, #28]
	PORT->Group[0].PMUX[PIN_PA24G_USB_DM/2].reg &= ~(0xF << (4 * (PIN_PA24G_USB_DM & 0x01u)));
    5d96:	200f      	movs	r0, #15
	PM->APBBMASK.reg |= PM_APBBMASK_USB;
    5d98:	430b      	orrs	r3, r1
    5d9a:	61d3      	str	r3, [r2, #28]
	PORT->Group[0].PINCFG[PIN_PA24G_USB_DM].bit.PMUXEN = 1;
    5d9c:	2201      	movs	r2, #1
    5d9e:	4923      	ldr	r1, [pc, #140]	; (5e2c <_ZN14USBDeviceClass4initEv+0xa0>)
    5da0:	780b      	ldrb	r3, [r1, #0]
    5da2:	4313      	orrs	r3, r2
    5da4:	700b      	strb	r3, [r1, #0]
	PORT->Group[0].PMUX[PIN_PA24G_USB_DM/2].reg &= ~(0xF << (4 * (PIN_PA24G_USB_DM & 0x01u)));
    5da6:	4b22      	ldr	r3, [pc, #136]	; (5e30 <_ZN14USBDeviceClass4initEv+0xa4>)
    5da8:	7819      	ldrb	r1, [r3, #0]
    5daa:	4381      	bics	r1, r0
    5dac:	7019      	strb	r1, [r3, #0]
	PORT->Group[0].PMUX[PIN_PA24G_USB_DM/2].reg |= MUX_PA24G_USB_DM << (4 * (PIN_PA24G_USB_DM & 0x01u));
    5dae:	2106      	movs	r1, #6
    5db0:	781d      	ldrb	r5, [r3, #0]
    5db2:	4329      	orrs	r1, r5
    5db4:	7019      	strb	r1, [r3, #0]
	PORT->Group[0].PINCFG[PIN_PA25G_USB_DP].bit.PMUXEN = 1;
    5db6:	491f      	ldr	r1, [pc, #124]	; (5e34 <_ZN14USBDeviceClass4initEv+0xa8>)
    5db8:	780d      	ldrb	r5, [r1, #0]
    5dba:	432a      	orrs	r2, r5
    5dbc:	700a      	strb	r2, [r1, #0]
	PORT->Group[0].PMUX[PIN_PA25G_USB_DP/2].reg &= ~(0xF << (4 * (PIN_PA25G_USB_DP & 0x01u)));
    5dbe:	781a      	ldrb	r2, [r3, #0]
    5dc0:	4002      	ands	r2, r0
    5dc2:	701a      	strb	r2, [r3, #0]
	PORT->Group[0].PMUX[PIN_PA25G_USB_DP/2].reg |= MUX_PA25G_USB_DP << (4 * (PIN_PA25G_USB_DP & 0x01u));
    5dc4:	2260      	movs	r2, #96	; 0x60
    5dc6:	7819      	ldrb	r1, [r3, #0]
    5dc8:	430a      	orrs	r2, r1
    5dca:	701a      	strb	r2, [r3, #0]
	GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(6)     | // Generic Clock Multiplexer 6
    5dcc:	4b1a      	ldr	r3, [pc, #104]	; (5e38 <_ZN14USBDeviceClass4initEv+0xac>)
    5dce:	4a1b      	ldr	r2, [pc, #108]	; (5e3c <_ZN14USBDeviceClass4initEv+0xb0>)
    5dd0:	805a      	strh	r2, [r3, #2]
	while (GCLK->STATUS.bit.SYNCBUSY)
    5dd2:	785a      	ldrb	r2, [r3, #1]
    5dd4:	09d2      	lsrs	r2, r2, #7
    5dd6:	d1fc      	bne.n	5dd2 <_ZN14USBDeviceClass4initEv+0x46>
	USB_SetHandler(&UDD_Handler);
    5dd8:	4819      	ldr	r0, [pc, #100]	; (5e40 <_ZN14USBDeviceClass4initEv+0xb4>)
    5dda:	f7ff fab3 	bl	5344 <USB_SetHandler>
	usbd.reset();
    5dde:	4d19      	ldr	r5, [pc, #100]	; (5e44 <_ZN14USBDeviceClass4initEv+0xb8>)
    5de0:	0028      	movs	r0, r5
    5de2:	f7ff fe0d 	bl	5a00 <_ZN20USBDevice_SAMD21G18x5resetEv>
	usbd.calibrate();
    5de6:	0028      	movs	r0, r5
    5de8:	f7ff fe1c 	bl	5a24 <_ZN20USBDevice_SAMD21G18x9calibrateEv>
	inline void setUSBDeviceMode() { usb.CTRLA.bit.MODE = USB_CTRLA_MODE_DEVICE_Val; }
    5dec:	217f      	movs	r1, #127	; 0x7f
    5dee:	682b      	ldr	r3, [r5, #0]
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    5df0:	20c1      	movs	r0, #193	; 0xc1
    5df2:	781a      	ldrb	r2, [r3, #0]
    5df4:	0080      	lsls	r0, r0, #2
    5df6:	400a      	ands	r2, r1
    5df8:	701a      	strb	r2, [r3, #0]
	inline void runInStandby()   { usb.CTRLA.bit.RUNSTDBY = 1; }
    5dfa:	2204      	movs	r2, #4
    5dfc:	7819      	ldrb	r1, [r3, #0]
    5dfe:	430a      	orrs	r2, r1
	inline void setFullSpeed()       { usb.CTRLB.bit.SPDCONF = USB_DEVICE_CTRLB_SPDCONF_FS_Val;   }
    5e00:	210c      	movs	r1, #12
	inline void runInStandby()   { usb.CTRLA.bit.RUNSTDBY = 1; }
    5e02:	701a      	strb	r2, [r3, #0]
	inline void setFullSpeed()       { usb.CTRLB.bit.SPDCONF = USB_DEVICE_CTRLB_SPDCONF_FS_Val;   }
    5e04:	891a      	ldrh	r2, [r3, #8]
    5e06:	438a      	bics	r2, r1
    5e08:	490f      	ldr	r1, [pc, #60]	; (5e48 <_ZN14USBDeviceClass4initEv+0xbc>)
    5e0a:	811a      	strh	r2, [r3, #8]
    5e0c:	580a      	ldr	r2, [r1, r0]
    5e0e:	0212      	lsls	r2, r2, #8
    5e10:	0a12      	lsrs	r2, r2, #8
    5e12:	500a      	str	r2, [r1, r0]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    5e14:	2280      	movs	r2, #128	; 0x80
    5e16:	600a      	str	r2, [r1, #0]
	inline void enable()  { usb.CTRLA.bit.ENABLE = 1; }
    5e18:	7819      	ldrb	r1, [r3, #0]
    5e1a:	3a7e      	subs	r2, #126	; 0x7e
    5e1c:	430a      	orrs	r2, r1
    5e1e:	701a      	strb	r2, [r3, #0]
	initialized = true;
    5e20:	2301      	movs	r3, #1
    5e22:	7023      	strb	r3, [r4, #0]
}
    5e24:	bd70      	pop	{r4, r5, r6, pc}
    5e26:	46c0      	nop			; (mov r8, r8)
    5e28:	40000400 	.word	0x40000400
    5e2c:	41004458 	.word	0x41004458
    5e30:	4100443c 	.word	0x4100443c
    5e34:	41004459 	.word	0x41004459
    5e38:	40000c00 	.word	0x40000c00
    5e3c:	00004006 	.word	0x00004006
    5e40:	000067a5 	.word	0x000067a5
    5e44:	20000b00 	.word	0x20000b00
    5e48:	e000e100 	.word	0xe000e100

00005e4c <_ZN14USBDeviceClass6attachEv>:
	if (!initialized)
    5e4c:	7800      	ldrb	r0, [r0, #0]
    5e4e:	2800      	cmp	r0, #0
    5e50:	d010      	beq.n	5e74 <_ZN14USBDeviceClass6attachEv+0x28>
	inline void attach() { usb.CTRLB.bit.DETACH = 0; }
    5e52:	2101      	movs	r1, #1
    5e54:	4b08      	ldr	r3, [pc, #32]	; (5e78 <_ZN14USBDeviceClass6attachEv+0x2c>)
    5e56:	681b      	ldr	r3, [r3, #0]
    5e58:	891a      	ldrh	r2, [r3, #8]
    5e5a:	438a      	bics	r2, r1
    5e5c:	811a      	strh	r2, [r3, #8]
	inline void enableEndOfResetInterrupt()    { usb.INTENSET.bit.EORST = 1; }
    5e5e:	2208      	movs	r2, #8
    5e60:	8b19      	ldrh	r1, [r3, #24]
    5e62:	430a      	orrs	r2, r1
    5e64:	831a      	strh	r2, [r3, #24]
	inline void enableStartOfFrameInterrupt()  { usb.INTENSET.bit.SOF = 1; }
    5e66:	2204      	movs	r2, #4
    5e68:	8b19      	ldrh	r1, [r3, #24]
    5e6a:	430a      	orrs	r2, r1
    5e6c:	831a      	strh	r2, [r3, #24]
	_usbConfiguration = 0;
    5e6e:	2200      	movs	r2, #0
    5e70:	4b02      	ldr	r3, [pc, #8]	; (5e7c <_ZN14USBDeviceClass6attachEv+0x30>)
    5e72:	601a      	str	r2, [r3, #0]
}
    5e74:	4770      	bx	lr
    5e76:	46c0      	nop			; (mov r8, r8)
    5e78:	20000b00 	.word	0x20000b00
    5e7c:	20000af8 	.word	0x20000af8

00005e80 <_ZN14USBDeviceClass10setAddressEm>:
{
    5e80:	b510      	push	{r4, lr}
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
    5e82:	4a0f      	ldr	r2, [pc, #60]	; (5ec0 <_ZN14USBDeviceClass10setAddressEm+0x40>)
    5e84:	6993      	ldr	r3, [r2, #24]
    5e86:	0b9b      	lsrs	r3, r3, #14
    5e88:	039b      	lsls	r3, r3, #14
    5e8a:	6193      	str	r3, [r2, #24]
	inline void epBank1AckTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT(2); }
    5e8c:	6813      	ldr	r3, [r2, #0]
    5e8e:	2202      	movs	r2, #2
    5e90:	33ff      	adds	r3, #255	; 0xff
    5e92:	721a      	strb	r2, [r3, #8]
	inline void epBank1SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK1RDY = 1; }
    5e94:	7998      	ldrb	r0, [r3, #6]
    5e96:	3a82      	subs	r2, #130	; 0x82
    5e98:	4302      	orrs	r2, r0
    5e9a:	719a      	strb	r2, [r3, #6]
	inline bool epBank1IsTransferComplete(ep_t ep)  { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.TRCPT1; }
    5e9c:	7a1a      	ldrb	r2, [r3, #8]
	while (!usbd.epBank1IsTransferComplete(0)) {}
    5e9e:	0792      	lsls	r2, r2, #30
    5ea0:	d5fc      	bpl.n	5e9c <_ZN14USBDeviceClass10setAddressEm+0x1c>
	USB->DEVICE.DADD.bit.DADD = addr; // Address
    5ea2:	247f      	movs	r4, #127	; 0x7f
    5ea4:	4a07      	ldr	r2, [pc, #28]	; (5ec4 <_ZN14USBDeviceClass10setAddressEm+0x44>)
    5ea6:	4021      	ands	r1, r4
    5ea8:	7a93      	ldrb	r3, [r2, #10]
    5eaa:	0008      	movs	r0, r1
    5eac:	43a3      	bics	r3, r4
    5eae:	0019      	movs	r1, r3
	USB->DEVICE.DADD.bit.ADDEN = 1; // Enable
    5eb0:	2380      	movs	r3, #128	; 0x80
	USB->DEVICE.DADD.bit.DADD = addr; // Address
    5eb2:	4301      	orrs	r1, r0
    5eb4:	7291      	strb	r1, [r2, #10]
	USB->DEVICE.DADD.bit.ADDEN = 1; // Enable
    5eb6:	7a91      	ldrb	r1, [r2, #10]
    5eb8:	425b      	negs	r3, r3
    5eba:	430b      	orrs	r3, r1
    5ebc:	7293      	strb	r3, [r2, #10]
}
    5ebe:	bd10      	pop	{r4, pc}
    5ec0:	20000b00 	.word	0x20000b00
    5ec4:	41005000 	.word	0x41005000

00005ec8 <_ZN14USBDeviceClass25handleClassInterfaceSetupER8USBSetup>:
{
    5ec8:	b510      	push	{r4, lr}
	if (CDC_ACM_INTERFACE == i)
    5eca:	790b      	ldrb	r3, [r1, #4]
{
    5ecc:	000c      	movs	r4, r1
	if (CDC_ACM_INTERFACE == i)
    5ece:	2b00      	cmp	r3, #0
    5ed0:	d10c      	bne.n	5eec <_ZN14USBDeviceClass25handleClassInterfaceSetupER8USBSetup+0x24>
		if (CDC_Setup(setup) == false) {
    5ed2:	0008      	movs	r0, r1
    5ed4:	f7ff fc9e 	bl	5814 <_Z9CDC_SetupR8USBSetup>
    5ed8:	2800      	cmp	r0, #0
    5eda:	d001      	beq.n	5ee0 <_ZN14USBDeviceClass25handleClassInterfaceSetupER8USBSetup+0x18>
		return true;
    5edc:	2001      	movs	r0, #1
}
    5ede:	bd10      	pop	{r4, pc}
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
    5ee0:	4a09      	ldr	r2, [pc, #36]	; (5f08 <_ZN14USBDeviceClass25handleClassInterfaceSetupER8USBSetup+0x40>)
    5ee2:	6993      	ldr	r3, [r2, #24]
    5ee4:	0b9b      	lsrs	r3, r3, #14
    5ee6:	039b      	lsls	r3, r3, #14
    5ee8:	6193      	str	r3, [r2, #24]
    5eea:	e7f7      	b.n	5edc <_ZN14USBDeviceClass25handleClassInterfaceSetupER8USBSetup+0x14>
	bool ret = PluggableUSB().setup(setup);
    5eec:	f001 fa72 	bl	73d4 <_Z12PluggableUSBv>
    5ef0:	0021      	movs	r1, r4
    5ef2:	f001 fa5e 	bl	73b2 <_ZN13PluggableUSB_5setupER8USBSetup>
	if ( ret == false) {
    5ef6:	2800      	cmp	r0, #0
    5ef8:	d1f0      	bne.n	5edc <_ZN14USBDeviceClass25handleClassInterfaceSetupER8USBSetup+0x14>
    5efa:	4a03      	ldr	r2, [pc, #12]	; (5f08 <_ZN14USBDeviceClass25handleClassInterfaceSetupER8USBSetup+0x40>)
    5efc:	6993      	ldr	r3, [r2, #24]
    5efe:	0b9b      	lsrs	r3, r3, #14
    5f00:	039b      	lsls	r3, r3, #14
    5f02:	6193      	str	r3, [r2, #24]
    5f04:	e7eb      	b.n	5ede <_ZN14USBDeviceClass25handleClassInterfaceSetupER8USBSetup+0x16>
    5f06:	46c0      	nop			; (mov r8, r8)
    5f08:	20000b00 	.word	0x20000b00

00005f0c <_ZN14USBDeviceClass6initEPEmm>:
{
    5f0c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    5f0e:	000d      	movs	r5, r1
	if (config == (USB_ENDPOINT_TYPE_INTERRUPT | USB_ENDPOINT_IN(0)))
    5f10:	2a83      	cmp	r2, #131	; 0x83
    5f12:	d119      	bne.n	5f48 <_ZN14USBDeviceClass6initEPEmm+0x3c>
	inline void epBank1SetSize(ep_t ep, uint16_t size) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.SIZE = EP_PCKSIZE_SIZE(size); }
    5f14:	b2cb      	uxtb	r3, r1
    5f16:	4c33      	ldr	r4, [pc, #204]	; (5fe4 <_ZN14USBDeviceClass6initEPEmm+0xd8>)
    5f18:	015a      	lsls	r2, r3, #5
    5f1a:	18a2      	adds	r2, r4, r2
    5f1c:	6991      	ldr	r1, [r2, #24]
    5f1e:	4832      	ldr	r0, [pc, #200]	; (5fe8 <_ZN14USBDeviceClass6initEPEmm+0xdc>)
		usbd.epBank1SetAddress(ep, &udd_ep_in_cache_buffer[ep]);
    5f20:	01ad      	lsls	r5, r5, #6
    5f22:	4008      	ands	r0, r1
    5f24:	21c0      	movs	r1, #192	; 0xc0
    5f26:	0589      	lsls	r1, r1, #22
    5f28:	4301      	orrs	r1, r0
    5f2a:	6191      	str	r1, [r2, #24]
    5f2c:	492f      	ldr	r1, [pc, #188]	; (5fec <_ZN14USBDeviceClass6initEPEmm+0xe0>)
	inline void epBank1SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE1 = type; }
    5f2e:	6820      	ldr	r0, [r4, #0]
    5f30:	194d      	adds	r5, r1, r5
    5f32:	2170      	movs	r1, #112	; 0x70
    5f34:	3308      	adds	r3, #8
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
    5f36:	6155      	str	r5, [r2, #20]
	inline void epBank1SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE1 = type; }
    5f38:	015b      	lsls	r3, r3, #5
    5f3a:	5c1a      	ldrb	r2, [r3, r0]
    5f3c:	438a      	bics	r2, r1
    5f3e:	0011      	movs	r1, r2
    5f40:	2240      	movs	r2, #64	; 0x40
    5f42:	430a      	orrs	r2, r1
    5f44:	541a      	strb	r2, [r3, r0]
}
    5f46:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
	else if (config == (USB_ENDPOINT_TYPE_BULK | USB_ENDPOINT_OUT(0)))
    5f48:	2a02      	cmp	r2, #2
    5f4a:	d145      	bne.n	5fd8 <_ZN14USBDeviceClass6initEPEmm+0xcc>
		if (epHandlers[ep] != NULL) {
    5f4c:	4a28      	ldr	r2, [pc, #160]	; (5ff0 <_ZN14USBDeviceClass6initEPEmm+0xe4>)
    5f4e:	008b      	lsls	r3, r1, #2
    5f50:	5898      	ldr	r0, [r3, r2]
    5f52:	2800      	cmp	r0, #0
    5f54:	d002      	beq.n	5f5c <_ZN14USBDeviceClass6initEPEmm+0x50>
			delete (DoubleBufferedEPOutHandler*)epHandlers[ep];
    5f56:	6803      	ldr	r3, [r0, #0]
    5f58:	691b      	ldr	r3, [r3, #16]
    5f5a:	4798      	blx	r3
		epHandlers[ep] = new DoubleBufferedEPOutHandler(usbd, ep, 256);
    5f5c:	2038      	movs	r0, #56	; 0x38
    5f5e:	f7ff fa73 	bl	5448 <_Znwj>
		notify(false)
    5f62:	4b24      	ldr	r3, [pc, #144]	; (5ff4 <_ZN14USBDeviceClass6initEPEmm+0xe8>)
    5f64:	2780      	movs	r7, #128	; 0x80
    5f66:	6003      	str	r3, [r0, #0]
    5f68:	2300      	movs	r3, #0
    5f6a:	4e1e      	ldr	r6, [pc, #120]	; (5fe4 <_ZN14USBDeviceClass6initEPEmm+0xd8>)
    5f6c:	007f      	lsls	r7, r7, #1
    5f6e:	1d42      	adds	r2, r0, #5
    5f70:	6203      	str	r3, [r0, #32]
    5f72:	6103      	str	r3, [r0, #16]
    5f74:	6143      	str	r3, [r0, #20]
    5f76:	61c3      	str	r3, [r0, #28]
    5f78:	6046      	str	r6, [r0, #4]
    5f7a:	6085      	str	r5, [r0, #8]
    5f7c:	60c7      	str	r7, [r0, #12]
    5f7e:	77d3      	strb	r3, [r2, #31]
    5f80:	322f      	adds	r2, #47	; 0x2f
    5f82:	62c3      	str	r3, [r0, #44]	; 0x2c
    5f84:	6303      	str	r3, [r0, #48]	; 0x30
    5f86:	0004      	movs	r4, r0
    5f88:	7013      	strb	r3, [r2, #0]
		data0 = reinterpret_cast<uint8_t *>(malloc(size));
    5f8a:	0038      	movs	r0, r7
		notify(false)
    5f8c:	7053      	strb	r3, [r2, #1]
		data0 = reinterpret_cast<uint8_t *>(malloc(size));
    5f8e:	f003 f9b3 	bl	92f8 <malloc>
    5f92:	9001      	str	r0, [sp, #4]
    5f94:	61a0      	str	r0, [r4, #24]
		data1 = reinterpret_cast<uint8_t *>(malloc(size));
    5f96:	0038      	movs	r0, r7
    5f98:	f003 f9ae 	bl	92f8 <malloc>
	inline void epBank0SetSize(ep_t ep, uint16_t size) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.SIZE = EP_PCKSIZE_SIZE(size); }
    5f9c:	b2eb      	uxtb	r3, r5
    5f9e:	015a      	lsls	r2, r3, #5
		data1 = reinterpret_cast<uint8_t *>(malloc(size));
    5fa0:	62a0      	str	r0, [r4, #40]	; 0x28
	inline void epBank0SetSize(ep_t ep, uint16_t size) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.SIZE = EP_PCKSIZE_SIZE(size); }
    5fa2:	18b2      	adds	r2, r6, r2
    5fa4:	6891      	ldr	r1, [r2, #8]
    5fa6:	4810      	ldr	r0, [pc, #64]	; (5fe8 <_ZN14USBDeviceClass6initEPEmm+0xdc>)
	inline void epBank0SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE0 = type; }
    5fa8:	3308      	adds	r3, #8
	inline void epBank0SetSize(ep_t ep, uint16_t size) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.SIZE = EP_PCKSIZE_SIZE(size); }
    5faa:	4008      	ands	r0, r1
    5fac:	21c0      	movs	r1, #192	; 0xc0
    5fae:	0589      	lsls	r1, r1, #22
    5fb0:	4301      	orrs	r1, r0
    5fb2:	6091      	str	r1, [r2, #8]
	inline void epBank0SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE0 = type; }
    5fb4:	6831      	ldr	r1, [r6, #0]
    5fb6:	2607      	movs	r6, #7
    5fb8:	015b      	lsls	r3, r3, #5
    5fba:	5c58      	ldrb	r0, [r3, r1]
    5fbc:	00ad      	lsls	r5, r5, #2
    5fbe:	43b0      	bics	r0, r6
    5fc0:	0006      	movs	r6, r0
    5fc2:	2003      	movs	r0, #3
    5fc4:	4330      	orrs	r0, r6
    5fc6:	5458      	strb	r0, [r3, r1]
	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
    5fc8:	9b01      	ldr	r3, [sp, #4]
		release();
    5fca:	0020      	movs	r0, r4
	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
    5fcc:	6053      	str	r3, [r2, #4]
		release();
    5fce:	f7ff fd97 	bl	5b00 <_ZN26DoubleBufferedEPOutHandler7releaseEv>
    5fd2:	4b07      	ldr	r3, [pc, #28]	; (5ff0 <_ZN14USBDeviceClass6initEPEmm+0xe4>)
    5fd4:	515c      	str	r4, [r3, r5]
    5fd6:	e7b6      	b.n	5f46 <_ZN14USBDeviceClass6initEPEmm+0x3a>
    5fd8:	0011      	movs	r1, r2
    5fda:	0028      	movs	r0, r5
    5fdc:	f7ff fca8 	bl	5930 <_ZN14USBDeviceClass6initEPEmm.part.5>
}
    5fe0:	e7b1      	b.n	5f46 <_ZN14USBDeviceClass6initEPEmm+0x3a>
    5fe2:	46c0      	nop			; (mov r8, r8)
    5fe4:	20000b00 	.word	0x20000b00
    5fe8:	8fffffff 	.word	0x8fffffff
    5fec:	20000674 	.word	0x20000674
    5ff0:	2000064c 	.word	0x2000064c
    5ff4:	0000b9c0 	.word	0x0000b9c0

00005ff8 <_ZN14USBDeviceClass13initEndpointsEv>:
void USBDeviceClass::initEndpoints() {
    5ff8:	b570      	push	{r4, r5, r6, lr}
    5ffa:	0005      	movs	r5, r0
    5ffc:	2401      	movs	r4, #1
	for (uint8_t i = 1; i < sizeof(EndPoints) && EndPoints[i] != 0; i++) {
    5ffe:	4b06      	ldr	r3, [pc, #24]	; (6018 <_ZN14USBDeviceClass13initEndpointsEv+0x20>)
    6000:	00a2      	lsls	r2, r4, #2
    6002:	58d2      	ldr	r2, [r2, r3]
    6004:	2a00      	cmp	r2, #0
    6006:	d005      	beq.n	6014 <_ZN14USBDeviceClass13initEndpointsEv+0x1c>
		initEP(i, EndPoints[i]);
    6008:	0021      	movs	r1, r4
    600a:	0028      	movs	r0, r5
    600c:	f7ff ff7e 	bl	5f0c <_ZN14USBDeviceClass6initEPEmm>
    6010:	3401      	adds	r4, #1
	for (uint8_t i = 1; i < sizeof(EndPoints) && EndPoints[i] != 0; i++) {
    6012:	e7f4      	b.n	5ffe <_ZN14USBDeviceClass13initEndpointsEv+0x6>
}
    6014:	bd70      	pop	{r4, r5, r6, pc}
    6016:	46c0      	nop			; (mov r8, r8)
    6018:	2000005c 	.word	0x2000005c

0000601c <_ZN14USBDeviceClass9availableEm>:
}

// Number of bytes, assumes a rx endpoint
uint32_t USBDeviceClass::available(uint32_t ep)
{
	if (epHandlers[ep]) {
    601c:	4b08      	ldr	r3, [pc, #32]	; (6040 <_ZN14USBDeviceClass9availableEm+0x24>)
    601e:	008a      	lsls	r2, r1, #2
    6020:	58d0      	ldr	r0, [r2, r3]
{
    6022:	b510      	push	{r4, lr}
	if (epHandlers[ep]) {
    6024:	2800      	cmp	r0, #0
    6026:	d003      	beq.n	6030 <_ZN14USBDeviceClass9availableEm+0x14>
		return epHandlers[ep]->available();
    6028:	6803      	ldr	r3, [r0, #0]
    602a:	689b      	ldr	r3, [r3, #8]
    602c:	4798      	blx	r3
	} else {
		return usbd.epBank0ByteCount(ep);
	}
}
    602e:	bd10      	pop	{r4, pc}
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
    6030:	b2c9      	uxtb	r1, r1
    6032:	4b04      	ldr	r3, [pc, #16]	; (6044 <_ZN14USBDeviceClass9availableEm+0x28>)
    6034:	0149      	lsls	r1, r1, #5
    6036:	1859      	adds	r1, r3, r1
    6038:	6888      	ldr	r0, [r1, #8]
    603a:	0480      	lsls	r0, r0, #18
    603c:	0c80      	lsrs	r0, r0, #18
		return usbd.epBank0ByteCount(ep);
    603e:	e7f6      	b.n	602e <_ZN14USBDeviceClass9availableEm+0x12>
    6040:	2000064c 	.word	0x2000064c
    6044:	20000b00 	.word	0x20000b00

00006048 <_ZN14USBDeviceClass5flushEm>:
{
    6048:	b510      	push	{r4, lr}
    604a:	000c      	movs	r4, r1
	if (available(ep)) {
    604c:	f7ff ffe6 	bl	601c <_ZN14USBDeviceClass9availableEm>
    6050:	2800      	cmp	r0, #0
    6052:	d00c      	beq.n	606e <_ZN14USBDeviceClass5flushEm+0x26>
	inline void epBank1SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK1RDY = 1; }
    6054:	4b06      	ldr	r3, [pc, #24]	; (6070 <_ZN14USBDeviceClass5flushEm+0x28>)
    6056:	b2e4      	uxtb	r4, r4
    6058:	681b      	ldr	r3, [r3, #0]
    605a:	3408      	adds	r4, #8
    605c:	0164      	lsls	r4, r4, #5
    605e:	191c      	adds	r4, r3, r4
    6060:	2380      	movs	r3, #128	; 0x80
    6062:	7962      	ldrb	r2, [r4, #5]
    6064:	425b      	negs	r3, r3
    6066:	4313      	orrs	r3, r2
    6068:	7163      	strb	r3, [r4, #5]
	inline void epBank1AckTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT(2); }
    606a:	2302      	movs	r3, #2
    606c:	71e3      	strb	r3, [r4, #7]
}
    606e:	bd10      	pop	{r4, pc}
    6070:	20000b00 	.word	0x20000b00

00006074 <_ZN14USBDeviceClass14armRecvCtrlOUTEm>:
		return c;
	}
}

uint8_t USBDeviceClass::armRecvCtrlOUT(uint32_t ep)
{
    6074:	b570      	push	{r4, r5, r6, lr}
	// Get endpoint configuration from setting register
	usbd.epBank0SetAddress(ep, &udd_ep_out_cache_buffer[ep]);
    6076:	4b13      	ldr	r3, [pc, #76]	; (60c4 <_ZN14USBDeviceClass14armRecvCtrlOUTEm+0x50>)
	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
    6078:	b2cc      	uxtb	r4, r1
    607a:	4a13      	ldr	r2, [pc, #76]	; (60c8 <_ZN14USBDeviceClass14armRecvCtrlOUTEm+0x54>)
    607c:	0160      	lsls	r0, r4, #5
    607e:	0189      	lsls	r1, r1, #6
    6080:	1859      	adds	r1, r3, r1
    6082:	1813      	adds	r3, r2, r0
    6084:	6059      	str	r1, [r3, #4]
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
    6086:	6899      	ldr	r1, [r3, #8]
    6088:	4d10      	ldr	r5, [pc, #64]	; (60cc <_ZN14USBDeviceClass14armRecvCtrlOUTEm+0x58>)
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
    608a:	3408      	adds	r4, #8
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
    608c:	400d      	ands	r5, r1
    608e:	2180      	movs	r1, #128	; 0x80
    6090:	0289      	lsls	r1, r1, #10
    6092:	4329      	orrs	r1, r5
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
    6094:	2540      	movs	r5, #64	; 0x40
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
    6096:	6099      	str	r1, [r3, #8]
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
    6098:	6899      	ldr	r1, [r3, #8]
    609a:	0b89      	lsrs	r1, r1, #14
    609c:	0389      	lsls	r1, r1, #14
    609e:	6099      	str	r1, [r3, #8]
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
    60a0:	6811      	ldr	r1, [r2, #0]
    60a2:	0163      	lsls	r3, r4, #5
    60a4:	18cb      	adds	r3, r1, r3
    60a6:	791e      	ldrb	r6, [r3, #4]
    60a8:	4335      	orrs	r5, r6
    60aa:	711d      	strb	r5, [r3, #4]
	inline bool epBank0IsReady(ep_t ep)    { return usb.DeviceEndpoint[ep].EPSTATUS.bit.BK0RDY; }
    60ac:	799d      	ldrb	r5, [r3, #6]
	usbd.epBank0SetByteCount(ep, 0);

	usbd.epBank0ResetReady(ep);

	// Wait OUT
	while (!usbd.epBank0IsReady(ep)) {}
    60ae:	066d      	lsls	r5, r5, #25
    60b0:	d5fc      	bpl.n	60ac <_ZN14USBDeviceClass14armRecvCtrlOUTEm+0x38>
	inline bool epBank0IsTransferComplete(ep_t ep)  { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.TRCPT0; }
    60b2:	0164      	lsls	r4, r4, #5
    60b4:	1909      	adds	r1, r1, r4
    60b6:	79cb      	ldrb	r3, [r1, #7]
	while (!usbd.epBank0IsTransferComplete(ep)) {}
    60b8:	07db      	lsls	r3, r3, #31
    60ba:	d5fc      	bpl.n	60b6 <_ZN14USBDeviceClass14armRecvCtrlOUTEm+0x42>
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
    60bc:	1812      	adds	r2, r2, r0
    60be:	6890      	ldr	r0, [r2, #8]
	return usbd.epBank0ByteCount(ep);
    60c0:	b2c0      	uxtb	r0, r0
}
    60c2:	bd70      	pop	{r4, r5, r6, pc}
    60c4:	20000834 	.word	0x20000834
    60c8:	20000b00 	.word	0x20000b00
    60cc:	f0003fff 	.word	0xf0003fff

000060d0 <_ZN14USBDeviceClass11recvControlEPvm>:
{
    60d0:	b570      	push	{r4, r5, r6, lr}
    60d2:	0014      	movs	r4, r2
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
    60d4:	2240      	movs	r2, #64	; 0x40
    60d6:	4b0b      	ldr	r3, [pc, #44]	; (6104 <_ZN14USBDeviceClass11recvControlEPvm+0x34>)
    60d8:	000d      	movs	r5, r1
    60da:	681b      	ldr	r3, [r3, #0]
    60dc:	33ff      	adds	r3, #255	; 0xff
    60de:	7959      	ldrb	r1, [r3, #5]
    60e0:	430a      	orrs	r2, r1
    60e2:	715a      	strb	r2, [r3, #5]
	uint32_t read = armRecvCtrlOUT(0);
    60e4:	2100      	movs	r1, #0
    60e6:	f7ff ffc5 	bl	6074 <_ZN14USBDeviceClass14armRecvCtrlOUTEm>
    60ea:	42a0      	cmp	r0, r4
    60ec:	d900      	bls.n	60f0 <_ZN14USBDeviceClass11recvControlEPvm+0x20>
    60ee:	0020      	movs	r0, r4
	for (uint32_t i=0; i<len; i++) {
    60f0:	2300      	movs	r3, #0
		data[i] = buffer[i];
    60f2:	4905      	ldr	r1, [pc, #20]	; (6108 <_ZN14USBDeviceClass11recvControlEPvm+0x38>)
	for (uint32_t i=0; i<len; i++) {
    60f4:	42a3      	cmp	r3, r4
    60f6:	d003      	beq.n	6100 <_ZN14USBDeviceClass11recvControlEPvm+0x30>
		data[i] = buffer[i];
    60f8:	5c5a      	ldrb	r2, [r3, r1]
    60fa:	54ea      	strb	r2, [r5, r3]
	for (uint32_t i=0; i<len; i++) {
    60fc:	3301      	adds	r3, #1
    60fe:	e7f9      	b.n	60f4 <_ZN14USBDeviceClass11recvControlEPvm+0x24>
}
    6100:	bd70      	pop	{r4, r5, r6, pc}
    6102:	46c0      	nop			; (mov r8, r8)
    6104:	20000b00 	.word	0x20000b00
    6108:	20000834 	.word	0x20000834

0000610c <_ZN14USBDeviceClass7armRecvEm>:

uint8_t USBDeviceClass::armRecv(uint32_t ep)
{
    610c:	b510      	push	{r4, lr}
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
    610e:	b2c9      	uxtb	r1, r1
    6110:	480b      	ldr	r0, [pc, #44]	; (6140 <_ZN14USBDeviceClass7armRecvEm+0x34>)
    6112:	0149      	lsls	r1, r1, #5
    6114:	1842      	adds	r2, r0, r1
    6116:	6893      	ldr	r3, [r2, #8]
    6118:	049b      	lsls	r3, r3, #18
    611a:	0c9b      	lsrs	r3, r3, #18
	uint16_t count = usbd.epBank0ByteCount(ep);
	if (count >= 64) {
    611c:	2b3f      	cmp	r3, #63	; 0x3f
    611e:	dd0b      	ble.n	6138 <_ZN14USBDeviceClass7armRecvEm+0x2c>
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
    6120:	6894      	ldr	r4, [r2, #8]
		usbd.epBank0SetByteCount(ep, count - 64);
    6122:	3b40      	subs	r3, #64	; 0x40
    6124:	049b      	lsls	r3, r3, #18
    6126:	0ba4      	lsrs	r4, r4, #14
    6128:	0c9b      	lsrs	r3, r3, #18
    612a:	03a4      	lsls	r4, r4, #14
    612c:	4323      	orrs	r3, r4
    612e:	6093      	str	r3, [r2, #8]
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
    6130:	1841      	adds	r1, r0, r1
    6132:	6888      	ldr	r0, [r1, #8]
	} else {
		usbd.epBank0SetByteCount(ep, 0);
	}
	return usbd.epBank0ByteCount(ep);
    6134:	b2c0      	uxtb	r0, r0
}
    6136:	bd10      	pop	{r4, pc}
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
    6138:	6893      	ldr	r3, [r2, #8]
    613a:	0b9b      	lsrs	r3, r3, #14
    613c:	039b      	lsls	r3, r3, #14
    613e:	e7f6      	b.n	612e <_ZN14USBDeviceClass7armRecvEm+0x22>
    6140:	20000b00 	.word	0x20000b00

00006144 <_ZN14USBDeviceClass4recvEmPvm>:
{
    6144:	b5f0      	push	{r4, r5, r6, r7, lr}
    6146:	001c      	movs	r4, r3
	if (!_usbConfiguration)
    6148:	4b2a      	ldr	r3, [pc, #168]	; (61f4 <_ZN14USBDeviceClass4recvEmPvm+0xb0>)
{
    614a:	b085      	sub	sp, #20
	if (!_usbConfiguration)
    614c:	681b      	ldr	r3, [r3, #0]
{
    614e:	0006      	movs	r6, r0
    6150:	000d      	movs	r5, r1
    6152:	9201      	str	r2, [sp, #4]
	if (!_usbConfiguration)
    6154:	2b00      	cmp	r3, #0
    6156:	d04a      	beq.n	61ee <_ZN14USBDeviceClass4recvEmPvm+0xaa>
	if (epHandlers[ep]) {
    6158:	4b27      	ldr	r3, [pc, #156]	; (61f8 <_ZN14USBDeviceClass4recvEmPvm+0xb4>)
    615a:	008a      	lsls	r2, r1, #2
    615c:	58d0      	ldr	r0, [r2, r3]
    615e:	2800      	cmp	r0, #0
    6160:	d008      	beq.n	6174 <_ZN14USBDeviceClass4recvEmPvm+0x30>
		return epHandlers[ep]->recv(_data, len);
    6162:	6803      	ldr	r3, [r0, #0]
    6164:	0022      	movs	r2, r4
    6166:	685b      	ldr	r3, [r3, #4]
    6168:	9901      	ldr	r1, [sp, #4]
    616a:	4798      	blx	r3
    616c:	0004      	movs	r4, r0
}
    616e:	0020      	movs	r0, r4
    6170:	b005      	add	sp, #20
    6172:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (available(ep) < len)
    6174:	0030      	movs	r0, r6
    6176:	f7ff ff51 	bl	601c <_ZN14USBDeviceClass9availableEm>
    617a:	4284      	cmp	r4, r0
    617c:	d904      	bls.n	6188 <_ZN14USBDeviceClass4recvEmPvm+0x44>
		len = available(ep);
    617e:	0029      	movs	r1, r5
    6180:	0030      	movs	r0, r6
    6182:	f7ff ff4b 	bl	601c <_ZN14USBDeviceClass9availableEm>
    6186:	0004      	movs	r4, r0
	armRecv(ep);
    6188:	0029      	movs	r1, r5
    618a:	0030      	movs	r0, r6
    618c:	f7ff ffbe 	bl	610c <_ZN14USBDeviceClass7armRecvEm>
	inline void epBank0DisableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENCLR.bit.TRCPT0 = 1; }
    6190:	2101      	movs	r1, #1
    6192:	b2eb      	uxtb	r3, r5
    6194:	4f19      	ldr	r7, [pc, #100]	; (61fc <_ZN14USBDeviceClass4recvEmPvm+0xb8>)
    6196:	9303      	str	r3, [sp, #12]
    6198:	015b      	lsls	r3, r3, #5
    619a:	9302      	str	r3, [sp, #8]
    619c:	9a02      	ldr	r2, [sp, #8]
    619e:	683b      	ldr	r3, [r7, #0]
	memcpy(_data, udd_ep_out_cache_buffer[ep], len);
    61a0:	9801      	ldr	r0, [sp, #4]
    61a2:	189b      	adds	r3, r3, r2
    61a4:	33ff      	adds	r3, #255	; 0xff
    61a6:	7a5a      	ldrb	r2, [r3, #9]
    61a8:	430a      	orrs	r2, r1
    61aa:	4915      	ldr	r1, [pc, #84]	; (6200 <_ZN14USBDeviceClass4recvEmPvm+0xbc>)
    61ac:	725a      	strb	r2, [r3, #9]
    61ae:	01ab      	lsls	r3, r5, #6
    61b0:	18c9      	adds	r1, r1, r3
    61b2:	0022      	movs	r2, r4
    61b4:	f003 f8d5 	bl	9362 <memcpy>
	if (len && !available(ep)) {
    61b8:	2c00      	cmp	r4, #0
    61ba:	d0d8      	beq.n	616e <_ZN14USBDeviceClass4recvEmPvm+0x2a>
    61bc:	0029      	movs	r1, r5
    61be:	0030      	movs	r0, r6
    61c0:	f7ff ff2c 	bl	601c <_ZN14USBDeviceClass9availableEm>
    61c4:	2800      	cmp	r0, #0
    61c6:	d1d2      	bne.n	616e <_ZN14USBDeviceClass4recvEmPvm+0x2a>
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
    61c8:	2140      	movs	r1, #64	; 0x40
    61ca:	9b03      	ldr	r3, [sp, #12]
    61cc:	683a      	ldr	r2, [r7, #0]
    61ce:	3308      	adds	r3, #8
    61d0:	015b      	lsls	r3, r3, #5
    61d2:	18d3      	adds	r3, r2, r3
    61d4:	7918      	ldrb	r0, [r3, #4]
    61d6:	4301      	orrs	r1, r0
    61d8:	7119      	strb	r1, [r3, #4]
	inline void epBank0AckTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT(1); }
    61da:	2101      	movs	r1, #1
    61dc:	71d9      	strb	r1, [r3, #7]
	inline void epBank0EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT0 = 1; }
    61de:	2101      	movs	r1, #1
    61e0:	9b02      	ldr	r3, [sp, #8]
    61e2:	18d3      	adds	r3, r2, r3
    61e4:	33ff      	adds	r3, #255	; 0xff
    61e6:	7a9a      	ldrb	r2, [r3, #10]
    61e8:	430a      	orrs	r2, r1
    61ea:	729a      	strb	r2, [r3, #10]
    61ec:	e7bf      	b.n	616e <_ZN14USBDeviceClass4recvEmPvm+0x2a>
		return -1;
    61ee:	2401      	movs	r4, #1
    61f0:	4264      	negs	r4, r4
    61f2:	e7bc      	b.n	616e <_ZN14USBDeviceClass4recvEmPvm+0x2a>
    61f4:	20000af8 	.word	0x20000af8
    61f8:	2000064c 	.word	0x2000064c
    61fc:	20000b00 	.word	0x20000b00
    6200:	20000834 	.word	0x20000834

00006204 <_ZN14USBDeviceClass4recvEm>:
{
    6204:	b513      	push	{r0, r1, r4, lr}
	if (recv(ep, &c, 1) != 1) {
    6206:	466b      	mov	r3, sp
    6208:	1ddc      	adds	r4, r3, #7
    620a:	0022      	movs	r2, r4
    620c:	2301      	movs	r3, #1
    620e:	f7ff ff99 	bl	6144 <_ZN14USBDeviceClass4recvEmPvm>
    6212:	2801      	cmp	r0, #1
    6214:	d101      	bne.n	621a <_ZN14USBDeviceClass4recvEm+0x16>
		return c;
    6216:	7820      	ldrb	r0, [r4, #0]
}
    6218:	bd16      	pop	{r1, r2, r4, pc}
		return -1;
    621a:	2001      	movs	r0, #1
    621c:	4240      	negs	r0, r0
    621e:	e7fb      	b.n	6218 <_ZN14USBDeviceClass4recvEm+0x14>

00006220 <_ZN14USBDeviceClass4sendEmPKvm>:
	0
};

// Blocking Send of data to an endpoint
uint32_t USBDeviceClass::send(uint32_t ep, const void *data, uint32_t len)
{
    6220:	b5f0      	push	{r4, r5, r6, r7, lr}
    6222:	001e      	movs	r6, r3
	uint32_t written = 0;
	uint32_t length = 0;

	if (!_usbConfiguration)
    6224:	4b35      	ldr	r3, [pc, #212]	; (62fc <_ZN14USBDeviceClass4sendEmPKvm+0xdc>)
{
    6226:	b085      	sub	sp, #20
	if (!_usbConfiguration)
    6228:	681b      	ldr	r3, [r3, #0]
{
    622a:	000f      	movs	r7, r1
    622c:	9201      	str	r2, [sp, #4]
	if (!_usbConfiguration)
    622e:	2b00      	cmp	r3, #0
    6230:	d035      	beq.n	629e <_ZN14USBDeviceClass4sendEmPKvm+0x7e>
		return -1;
	if (len > 16384)
    6232:	2380      	movs	r3, #128	; 0x80
    6234:	01db      	lsls	r3, r3, #7
    6236:	429e      	cmp	r6, r3
    6238:	d831      	bhi.n	629e <_ZN14USBDeviceClass4sendEmPKvm+0x7e>
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
    623a:	2500      	movs	r5, #0
		} else {
			length = len;
		}

		/* memcopy could be safer in multi threaded environment */
		memcpy(&udd_ep_in_cache_buffer[ep], data, length);
    623c:	4a30      	ldr	r2, [pc, #192]	; (6300 <_ZN14USBDeviceClass4sendEmPKvm+0xe0>)
    623e:	018b      	lsls	r3, r1, #6
    6240:	18d3      	adds	r3, r2, r3
    6242:	9302      	str	r3, [sp, #8]
	while (len != 0)
    6244:	2e00      	cmp	r6, #0
    6246:	d02c      	beq.n	62a2 <_ZN14USBDeviceClass4sendEmPKvm+0x82>
	inline bool epBank1IsReady(ep_t ep)    { return usb.DeviceEndpoint[ep].EPSTATUS.bit.BK1RDY; }
    6248:	4b2e      	ldr	r3, [pc, #184]	; (6304 <_ZN14USBDeviceClass4sendEmPKvm+0xe4>)
    624a:	681b      	ldr	r3, [r3, #0]
    624c:	9303      	str	r3, [sp, #12]
    624e:	23ff      	movs	r3, #255	; 0xff
    6250:	403b      	ands	r3, r7
    6252:	001c      	movs	r4, r3
    6254:	9300      	str	r3, [sp, #0]
    6256:	3408      	adds	r4, #8
    6258:	9b03      	ldr	r3, [sp, #12]
    625a:	0164      	lsls	r4, r4, #5
    625c:	191c      	adds	r4, r3, r4
    625e:	79a3      	ldrb	r3, [r4, #6]
    6260:	09db      	lsrs	r3, r3, #7
		if (usbd.epBank1IsReady(ep)) {
    6262:	d021      	beq.n	62a8 <_ZN14USBDeviceClass4sendEmPKvm+0x88>
			uint32_t timeout = microsecondsToClockCycles(TX_TIMEOUT_MS * 1000) / 23;
    6264:	4b28      	ldr	r3, [pc, #160]	; (6308 <_ZN14USBDeviceClass4sendEmPKvm+0xe8>)
    6266:	4929      	ldr	r1, [pc, #164]	; (630c <_ZN14USBDeviceClass4sendEmPKvm+0xec>)
    6268:	6818      	ldr	r0, [r3, #0]
    626a:	f001 f8d7 	bl	741c <__udivsi3>
    626e:	4b28      	ldr	r3, [pc, #160]	; (6310 <_ZN14USBDeviceClass4sendEmPKvm+0xf0>)
    6270:	2117      	movs	r1, #23
    6272:	4358      	muls	r0, r3
    6274:	f001 f8d2 	bl	741c <__udivsi3>
				if (LastTransmitTimedOut[ep] || timeout-- == 0) {
    6278:	4b26      	ldr	r3, [pc, #152]	; (6314 <_ZN14USBDeviceClass4sendEmPKvm+0xf4>)
	inline bool epBank1IsTransferComplete(ep_t ep)  { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.TRCPT1; }
    627a:	79e2      	ldrb	r2, [r4, #7]
			while (!usbd.epBank1IsTransferComplete(ep)) {
    627c:	0792      	lsls	r2, r2, #30
    627e:	d413      	bmi.n	62a8 <_ZN14USBDeviceClass4sendEmPKvm+0x88>
				if (LastTransmitTimedOut[ep] || timeout-- == 0) {
    6280:	5dda      	ldrb	r2, [r3, r7]
    6282:	2a00      	cmp	r2, #0
    6284:	d101      	bne.n	628a <_ZN14USBDeviceClass4sendEmPKvm+0x6a>
    6286:	3801      	subs	r0, #1
    6288:	d2f7      	bcs.n	627a <_ZN14USBDeviceClass4sendEmPKvm+0x5a>
					LastTransmitTimedOut[ep] = 1;
    628a:	2201      	movs	r2, #1
    628c:	55da      	strb	r2, [r3, r7]
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
    628e:	9b00      	ldr	r3, [sp, #0]
    6290:	015a      	lsls	r2, r3, #5
    6292:	4b1c      	ldr	r3, [pc, #112]	; (6304 <_ZN14USBDeviceClass4sendEmPKvm+0xe4>)
    6294:	189b      	adds	r3, r3, r2
    6296:	699a      	ldr	r2, [r3, #24]
    6298:	0b92      	lsrs	r2, r2, #14
    629a:	0392      	lsls	r2, r2, #14
    629c:	619a      	str	r2, [r3, #24]
					return -1;
    629e:	2501      	movs	r5, #1
    62a0:	426d      	negs	r5, r5
		written += length;
		len -= length;
		data = (char *)data + length;
	}
	return written;
}
    62a2:	0028      	movs	r0, r5
    62a4:	b005      	add	sp, #20
    62a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		LastTransmitTimedOut[ep] = 0;
    62a8:	2200      	movs	r2, #0
    62aa:	4b1a      	ldr	r3, [pc, #104]	; (6314 <_ZN14USBDeviceClass4sendEmPKvm+0xf4>)
    62ac:	0034      	movs	r4, r6
    62ae:	55da      	strb	r2, [r3, r7]
    62b0:	2e3f      	cmp	r6, #63	; 0x3f
    62b2:	d900      	bls.n	62b6 <_ZN14USBDeviceClass4sendEmPKvm+0x96>
    62b4:	243f      	movs	r4, #63	; 0x3f
		memcpy(&udd_ep_in_cache_buffer[ep], data, length);
    62b6:	0022      	movs	r2, r4
    62b8:	9901      	ldr	r1, [sp, #4]
    62ba:	9802      	ldr	r0, [sp, #8]
    62bc:	f003 f851 	bl	9362 <memcpy>
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
    62c0:	9b00      	ldr	r3, [sp, #0]
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
    62c2:	04a1      	lsls	r1, r4, #18
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
    62c4:	015a      	lsls	r2, r3, #5
    62c6:	4b0f      	ldr	r3, [pc, #60]	; (6304 <_ZN14USBDeviceClass4sendEmPKvm+0xe4>)
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
    62c8:	0c89      	lsrs	r1, r1, #18
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
    62ca:	189b      	adds	r3, r3, r2
    62cc:	9a02      	ldr	r2, [sp, #8]
		written += length;
    62ce:	192d      	adds	r5, r5, r4
    62d0:	615a      	str	r2, [r3, #20]
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
    62d2:	699a      	ldr	r2, [r3, #24]
		len -= length;
    62d4:	1b36      	subs	r6, r6, r4
    62d6:	0b92      	lsrs	r2, r2, #14
    62d8:	0392      	lsls	r2, r2, #14
    62da:	430a      	orrs	r2, r1
    62dc:	619a      	str	r2, [r3, #24]
	inline void epBank1AckTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT(2); }
    62de:	9b00      	ldr	r3, [sp, #0]
    62e0:	9a03      	ldr	r2, [sp, #12]
    62e2:	3308      	adds	r3, #8
    62e4:	015b      	lsls	r3, r3, #5
    62e6:	18d3      	adds	r3, r2, r3
    62e8:	2202      	movs	r2, #2
    62ea:	71da      	strb	r2, [r3, #7]
	inline void epBank1SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK1RDY = 1; }
    62ec:	7959      	ldrb	r1, [r3, #5]
    62ee:	3a82      	subs	r2, #130	; 0x82
    62f0:	430a      	orrs	r2, r1
    62f2:	715a      	strb	r2, [r3, #5]
		data = (char *)data + length;
    62f4:	9b01      	ldr	r3, [sp, #4]
    62f6:	191b      	adds	r3, r3, r4
    62f8:	9301      	str	r3, [sp, #4]
	while (len != 0)
    62fa:	e7a3      	b.n	6244 <_ZN14USBDeviceClass4sendEmPKvm+0x24>
    62fc:	20000af8 	.word	0x20000af8
    6300:	20000674 	.word	0x20000674
    6304:	20000b00 	.word	0x20000b00
    6308:	20000084 	.word	0x20000084
    630c:	000f4240 	.word	0x000f4240
    6310:	00011170 	.word	0x00011170
    6314:	20000669 	.word	0x20000669

00006318 <_ZN14USBDeviceClass7armSendEmPKvm>:

uint32_t USBDeviceClass::armSend(uint32_t ep, const void* data, uint32_t len)
{
    6318:	b570      	push	{r4, r5, r6, lr}
    631a:	000d      	movs	r5, r1
    631c:	001c      	movs	r4, r3
	memcpy(&udd_ep_in_cache_buffer[ep], data, len);
    631e:	4e0d      	ldr	r6, [pc, #52]	; (6354 <_ZN14USBDeviceClass7armSendEmPKvm+0x3c>)
    6320:	01ab      	lsls	r3, r5, #6
    6322:	18f6      	adds	r6, r6, r3
{
    6324:	0011      	movs	r1, r2
	memcpy(&udd_ep_in_cache_buffer[ep], data, len);
    6326:	0030      	movs	r0, r6
    6328:	0022      	movs	r2, r4
    632a:	f003 f81a 	bl	9362 <memcpy>
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
    632e:	b2ed      	uxtb	r5, r5
    6330:	4909      	ldr	r1, [pc, #36]	; (6358 <_ZN14USBDeviceClass7armSendEmPKvm+0x40>)
    6332:	016d      	lsls	r5, r5, #5
    6334:	194d      	adds	r5, r1, r5
    6336:	616e      	str	r6, [r5, #20]
	inline void epBank1SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
    6338:	69ab      	ldr	r3, [r5, #24]
    633a:	4a08      	ldr	r2, [pc, #32]	; (635c <_ZN14USBDeviceClass7armSendEmPKvm+0x44>)
	usbd.epBank1SetAddress(ep, &udd_ep_in_cache_buffer[ep]);
	usbd.epBank1SetMultiPacketSize(ep, 0);
	usbd.epBank1SetByteCount(ep, len);

	return len;
}
    633c:	0020      	movs	r0, r4
    633e:	4013      	ands	r3, r2
    6340:	61ab      	str	r3, [r5, #24]
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
    6342:	69ab      	ldr	r3, [r5, #24]
    6344:	04a2      	lsls	r2, r4, #18
    6346:	0b9b      	lsrs	r3, r3, #14
    6348:	0c92      	lsrs	r2, r2, #18
    634a:	039b      	lsls	r3, r3, #14
    634c:	4313      	orrs	r3, r2
    634e:	61ab      	str	r3, [r5, #24]
    6350:	bd70      	pop	{r4, r5, r6, pc}
    6352:	46c0      	nop			; (mov r8, r8)
    6354:	20000674 	.word	0x20000674
    6358:	20000b00 	.word	0x20000b00
    635c:	f0003fff 	.word	0xf0003fff

00006360 <_ZN14USBDeviceClass11sendControlEPKvm>:

uint32_t USBDeviceClass::sendControl(const void* _data, uint32_t len)
{
    6360:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	const uint8_t *data = reinterpret_cast<const uint8_t *>(_data);
	uint32_t length = len;
	uint32_t sent = 0;
	uint32_t pos = 0;

	if (_dry_run == true)
    6362:	4b10      	ldr	r3, [pc, #64]	; (63a4 <_ZN14USBDeviceClass11sendControlEPKvm+0x44>)
{
    6364:	9001      	str	r0, [sp, #4]
	if (_dry_run == true)
    6366:	781b      	ldrb	r3, [r3, #0]
{
    6368:	000f      	movs	r7, r1
    636a:	0015      	movs	r5, r2
	if (_dry_run == true)
    636c:	2b00      	cmp	r3, #0
    636e:	d10c      	bne.n	638a <_ZN14USBDeviceClass11sendControlEPKvm+0x2a>
		return length;

	if (_pack_message == true) {
    6370:	4b0d      	ldr	r3, [pc, #52]	; (63a8 <_ZN14USBDeviceClass11sendControlEPKvm+0x48>)
    6372:	0016      	movs	r6, r2
    6374:	781c      	ldrb	r4, [r3, #0]
    6376:	2c00      	cmp	r4, #0
    6378:	d009      	beq.n	638e <_ZN14USBDeviceClass11sendControlEPKvm+0x2e>
		memcpy(&_pack_buffer[_pack_size], data, len);
    637a:	4e0c      	ldr	r6, [pc, #48]	; (63ac <_ZN14USBDeviceClass11sendControlEPKvm+0x4c>)
    637c:	480c      	ldr	r0, [pc, #48]	; (63b0 <_ZN14USBDeviceClass11sendControlEPKvm+0x50>)
    637e:	8834      	ldrh	r4, [r6, #0]
    6380:	1900      	adds	r0, r0, r4
		_pack_size += len;
    6382:	1964      	adds	r4, r4, r5
		memcpy(&_pack_buffer[_pack_size], data, len);
    6384:	f002 ffed 	bl	9362 <memcpy>
		_pack_size += len;
    6388:	8034      	strh	r4, [r6, #0]
		pos += sent;
		len -= sent;
 	}

	return length;
}
    638a:	0028      	movs	r0, r5
    638c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 	while (len > 0)
    638e:	2e00      	cmp	r6, #0
    6390:	d0fb      	beq.n	638a <_ZN14USBDeviceClass11sendControlEPKvm+0x2a>
		sent = armSend(EP0, data + pos, len);
    6392:	193a      	adds	r2, r7, r4
    6394:	0033      	movs	r3, r6
    6396:	2100      	movs	r1, #0
    6398:	9801      	ldr	r0, [sp, #4]
    639a:	f7ff ffbd 	bl	6318 <_ZN14USBDeviceClass7armSendEmPKvm>
		pos += sent;
    639e:	1824      	adds	r4, r4, r0
		len -= sent;
    63a0:	1a36      	subs	r6, r6, r0
 	while (len > 0)
    63a2:	e7f4      	b.n	638e <_ZN14USBDeviceClass11sendControlEPKvm+0x2e>
    63a4:	200009f4 	.word	0x200009f4
    63a8:	20000af5 	.word	0x20000af5
    63ac:	20000af6 	.word	0x20000af6
    63b0:	200009f5 	.word	0x200009f5

000063b4 <_ZN14USBDeviceClass20sendStringDescriptorEPKhh>:
{
    63b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		return false;
    63b6:	2000      	movs	r0, #0
{
    63b8:	af00      	add	r7, sp, #0
    63ba:	000e      	movs	r6, r1
    63bc:	0015      	movs	r5, r2
	if (maxlen < 2)
    63be:	2a01      	cmp	r2, #1
    63c0:	dd26      	ble.n	6410 <_ZN14USBDeviceClass20sendStringDescriptorEPKhh+0x5c>
	uint8_t buffer[maxlen];
    63c2:	1dd3      	adds	r3, r2, #7
    63c4:	466a      	mov	r2, sp
    63c6:	08db      	lsrs	r3, r3, #3
    63c8:	00db      	lsls	r3, r3, #3
    63ca:	1ad3      	subs	r3, r2, r3
    63cc:	469d      	mov	sp, r3
	buffer[0] = strlen((const char*)string) * 2 + 2;
    63ce:	0008      	movs	r0, r1
    63d0:	f003 fd48 	bl	9e64 <strlen>
	uint8_t buffer[maxlen];
    63d4:	466c      	mov	r4, sp
	buffer[1] = 0x03;
    63d6:	2303      	movs	r3, #3
		buffer[i] = 0;
    63d8:	2100      	movs	r1, #0
	buffer[0] = strlen((const char*)string) * 2 + 2;
    63da:	3001      	adds	r0, #1
    63dc:	0040      	lsls	r0, r0, #1
    63de:	7020      	strb	r0, [r4, #0]
	buffer[1] = 0x03;
    63e0:	7063      	strb	r3, [r4, #1]
    63e2:	1e5a      	subs	r2, r3, #1
    63e4:	b2d2      	uxtb	r2, r2
	for (i = 2; i < maxlen && *string; i++) {
    63e6:	4295      	cmp	r5, r2
    63e8:	dd0b      	ble.n	6402 <_ZN14USBDeviceClass20sendStringDescriptorEPKhh+0x4e>
    63ea:	7830      	ldrb	r0, [r6, #0]
    63ec:	2800      	cmp	r0, #0
    63ee:	d008      	beq.n	6402 <_ZN14USBDeviceClass20sendStringDescriptorEPKhh+0x4e>
		buffer[i++] = *string++;
    63f0:	3601      	adds	r6, #1
    63f2:	54a0      	strb	r0, [r4, r2]
		if (i == maxlen) break;
    63f4:	429d      	cmp	r5, r3
    63f6:	d003      	beq.n	6400 <_ZN14USBDeviceClass20sendStringDescriptorEPKhh+0x4c>
		buffer[i] = 0;
    63f8:	54e1      	strb	r1, [r4, r3]
    63fa:	3302      	adds	r3, #2
    63fc:	b2db      	uxtb	r3, r3
	for (i = 2; i < maxlen && *string; i++) {
    63fe:	e7f0      	b.n	63e2 <_ZN14USBDeviceClass20sendStringDescriptorEPKhh+0x2e>
    6400:	002a      	movs	r2, r5
	return USBDevice.sendControl(buffer, i);
    6402:	0021      	movs	r1, r4
    6404:	4803      	ldr	r0, [pc, #12]	; (6414 <_ZN14USBDeviceClass20sendStringDescriptorEPKhh+0x60>)
    6406:	f7ff ffab 	bl	6360 <_ZN14USBDeviceClass11sendControlEPKvm>
    640a:	1e43      	subs	r3, r0, #1
    640c:	4198      	sbcs	r0, r3
    640e:	b2c0      	uxtb	r0, r0
}
    6410:	46bd      	mov	sp, r7
    6412:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6414:	20000648 	.word	0x20000648

00006418 <_ZN14USBDeviceClass17sendConfigurationEm>:
{
    6418:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint32_t total = 0;
    641a:	2700      	movs	r7, #0
	_dry_run = true;
    641c:	2601      	movs	r6, #1
{
    641e:	b087      	sub	sp, #28
	_dry_run = true;
    6420:	4b1e      	ldr	r3, [pc, #120]	; (649c <_ZN14USBDeviceClass17sendConfigurationEm+0x84>)
{
    6422:	9100      	str	r1, [sp, #0]
	uint8_t interfaces = SendInterfaces(&total);
    6424:	a902      	add	r1, sp, #8
	_dry_run = true;
    6426:	701e      	strb	r6, [r3, #0]
{
    6428:	0005      	movs	r5, r0
	uint32_t total = 0;
    642a:	9702      	str	r7, [sp, #8]
	uint8_t interfaces = SendInterfaces(&total);
    642c:	f7ff fc76 	bl	5d1c <_ZN14USBDeviceClass14SendInterfacesEPm>
	ConfigDescriptor config = D_CONFIG((uint16_t)(total + sizeof(ConfigDescriptor)), interfaces);
    6430:	ac03      	add	r4, sp, #12
	uint8_t interfaces = SendInterfaces(&total);
    6432:	9001      	str	r0, [sp, #4]
	ConfigDescriptor config = D_CONFIG((uint16_t)(total + sizeof(ConfigDescriptor)), interfaces);
    6434:	2209      	movs	r2, #9
    6436:	0039      	movs	r1, r7
    6438:	0020      	movs	r0, r4
    643a:	f002 ffad 	bl	9398 <memset>
    643e:	2309      	movs	r3, #9
    6440:	7023      	strb	r3, [r4, #0]
    6442:	2302      	movs	r3, #2
    6444:	7063      	strb	r3, [r4, #1]
    6446:	339e      	adds	r3, #158	; 0x9e
    6448:	71e3      	strb	r3, [r4, #7]
    644a:	335a      	adds	r3, #90	; 0x5a
    644c:	7223      	strb	r3, [r4, #8]
    644e:	9b02      	ldr	r3, [sp, #8]
    6450:	7166      	strb	r6, [r4, #5]
    6452:	3309      	adds	r3, #9
    6454:	8063      	strh	r3, [r4, #2]
    6456:	466b      	mov	r3, sp
    6458:	791b      	ldrb	r3, [r3, #4]
    645a:	7123      	strb	r3, [r4, #4]
	_dry_run = false;
    645c:	4b0f      	ldr	r3, [pc, #60]	; (649c <_ZN14USBDeviceClass17sendConfigurationEm+0x84>)
    645e:	701f      	strb	r7, [r3, #0]
	if (maxlen == sizeof(ConfigDescriptor)) {
    6460:	9b00      	ldr	r3, [sp, #0]
    6462:	2b09      	cmp	r3, #9
    6464:	d107      	bne.n	6476 <_ZN14USBDeviceClass17sendConfigurationEm+0x5e>
		sendControl(&config, sizeof(ConfigDescriptor));
    6466:	001a      	movs	r2, r3
    6468:	0021      	movs	r1, r4
		sendControl(_pack_buffer, _pack_size);
    646a:	0028      	movs	r0, r5
    646c:	f7ff ff78 	bl	6360 <_ZN14USBDeviceClass11sendControlEPKvm>
}
    6470:	2001      	movs	r0, #1
    6472:	b007      	add	sp, #28
    6474:	bdf0      	pop	{r4, r5, r6, r7, pc}
		_pack_message = true;
    6476:	4b0a      	ldr	r3, [pc, #40]	; (64a0 <_ZN14USBDeviceClass17sendConfigurationEm+0x88>)
	sendControl(&config, sizeof(ConfigDescriptor));
    6478:	2209      	movs	r2, #9
		_pack_message = true;
    647a:	701e      	strb	r6, [r3, #0]
		_pack_size = 0;
    647c:	4e09      	ldr	r6, [pc, #36]	; (64a4 <_ZN14USBDeviceClass17sendConfigurationEm+0x8c>)
	sendControl(&config, sizeof(ConfigDescriptor));
    647e:	0021      	movs	r1, r4
    6480:	0028      	movs	r0, r5
	total = 0;
    6482:	9702      	str	r7, [sp, #8]
		_pack_size = 0;
    6484:	8037      	strh	r7, [r6, #0]
	sendControl(&config, sizeof(ConfigDescriptor));
    6486:	f7ff ff6b 	bl	6360 <_ZN14USBDeviceClass11sendControlEPKvm>
	SendInterfaces(&total);
    648a:	a902      	add	r1, sp, #8
    648c:	0028      	movs	r0, r5
    648e:	f7ff fc45 	bl	5d1c <_ZN14USBDeviceClass14SendInterfacesEPm>
		_pack_message = false;
    6492:	4b03      	ldr	r3, [pc, #12]	; (64a0 <_ZN14USBDeviceClass17sendConfigurationEm+0x88>)
		sendControl(_pack_buffer, _pack_size);
    6494:	8832      	ldrh	r2, [r6, #0]
		_pack_message = false;
    6496:	701f      	strb	r7, [r3, #0]
		sendControl(_pack_buffer, _pack_size);
    6498:	4903      	ldr	r1, [pc, #12]	; (64a8 <_ZN14USBDeviceClass17sendConfigurationEm+0x90>)
    649a:	e7e6      	b.n	646a <_ZN14USBDeviceClass17sendConfigurationEm+0x52>
    649c:	200009f4 	.word	0x200009f4
    64a0:	20000af5 	.word	0x20000af5
    64a4:	20000af6 	.word	0x20000af6
    64a8:	200009f5 	.word	0x200009f5

000064ac <_ZN14USBDeviceClass14sendDescriptorER8USBSetup>:
{
    64ac:	b570      	push	{r4, r5, r6, lr}
	uint8_t t = setup.wValueH;
    64ae:	78ce      	ldrb	r6, [r1, #3]
{
    64b0:	b092      	sub	sp, #72	; 0x48
    64b2:	0005      	movs	r5, r0
    64b4:	000c      	movs	r4, r1
	if (t == USB_CONFIGURATION_DESCRIPTOR_TYPE)
    64b6:	2e02      	cmp	r6, #2
    64b8:	d108      	bne.n	64cc <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x20>
		return USBDevice.sendConfiguration(setup.wLength);
    64ba:	88c9      	ldrh	r1, [r1, #6]
    64bc:	482b      	ldr	r0, [pc, #172]	; (656c <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0xc0>)
    64be:	f7ff ffab 	bl	6418 <_ZN14USBDeviceClass17sendConfigurationEm>
    64c2:	1e43      	subs	r3, r0, #1
    64c4:	4198      	sbcs	r0, r3
    64c6:	b2c0      	uxtb	r0, r0
}
    64c8:	b012      	add	sp, #72	; 0x48
    64ca:	bd70      	pop	{r4, r5, r6, pc}
	ret = PluggableUSB().getDescriptor(setup);
    64cc:	f000 ff82 	bl	73d4 <_Z12PluggableUSBv>
    64d0:	0021      	movs	r1, r4
    64d2:	f000 ff4f 	bl	7374 <_ZN13PluggableUSB_13getDescriptorER8USBSetup>
	if (ret != 0) {
    64d6:	2800      	cmp	r0, #0
    64d8:	d003      	beq.n	64e2 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x36>
		return (ret > 0 ? true : false);
    64da:	17c3      	asrs	r3, r0, #31
    64dc:	1a18      	subs	r0, r3, r0
    64de:	0fc0      	lsrs	r0, r0, #31
    64e0:	e7f2      	b.n	64c8 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x1c>
	if (t == USB_DEVICE_DESCRIPTOR_TYPE)
    64e2:	2e01      	cmp	r6, #1
    64e4:	d10b      	bne.n	64fe <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x52>
		if (setup.wLength == 8)
    64e6:	88e2      	ldrh	r2, [r4, #6]
    64e8:	4921      	ldr	r1, [pc, #132]	; (6570 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0xc4>)
		if (*desc_addr > setup.wLength) {
    64ea:	2a11      	cmp	r2, #17
    64ec:	dc10      	bgt.n	6510 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x64>
			desc_length = setup.wLength;
    64ee:	b2d2      	uxtb	r2, r2
	if (desc_length == 0) {
    64f0:	2a00      	cmp	r2, #0
    64f2:	d00d      	beq.n	6510 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x64>
	sendControl(desc_addr, desc_length);
    64f4:	0028      	movs	r0, r5
    64f6:	f7ff ff33 	bl	6360 <_ZN14USBDeviceClass11sendControlEPKvm>
	return true;
    64fa:	2001      	movs	r0, #1
    64fc:	e7e4      	b.n	64c8 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x1c>
	else if (USB_STRING_DESCRIPTOR_TYPE == t)
    64fe:	2e03      	cmp	r6, #3
    6500:	d1e2      	bne.n	64c8 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x1c>
		if (setup.wValueL == 0) {
    6502:	78a3      	ldrb	r3, [r4, #2]
    6504:	2b00      	cmp	r3, #0
    6506:	d105      	bne.n	6514 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x68>
		if (*desc_addr > setup.wLength) {
    6508:	88e2      	ldrh	r2, [r4, #6]
    650a:	491a      	ldr	r1, [pc, #104]	; (6574 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0xc8>)
    650c:	2a03      	cmp	r2, #3
    650e:	ddee      	ble.n	64ee <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x42>
		desc_length = *desc_addr;
    6510:	780a      	ldrb	r2, [r1, #0]
    6512:	e7ef      	b.n	64f4 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x48>
		else if (setup.wValueL == IPRODUCT) {
    6514:	2b02      	cmp	r3, #2
    6516:	d105      	bne.n	6524 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x78>
			return sendStringDescriptor(STRING_PRODUCT, setup.wLength);
    6518:	79a2      	ldrb	r2, [r4, #6]
    651a:	4917      	ldr	r1, [pc, #92]	; (6578 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0xcc>)
			return sendStringDescriptor(STRING_MANUFACTURER, setup.wLength);
    651c:	0028      	movs	r0, r5
    651e:	f7ff ff49 	bl	63b4 <_ZN14USBDeviceClass20sendStringDescriptorEPKhh>
    6522:	e7d1      	b.n	64c8 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x1c>
		else if (setup.wValueL == IMANUFACTURER) {
    6524:	2b01      	cmp	r3, #1
    6526:	d102      	bne.n	652e <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x82>
			return sendStringDescriptor(STRING_MANUFACTURER, setup.wLength);
    6528:	79a2      	ldrb	r2, [r4, #6]
    652a:	4914      	ldr	r1, [pc, #80]	; (657c <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0xd0>)
    652c:	e7f6      	b.n	651c <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x70>
		else if (setup.wValueL == ISERIAL) {
    652e:	2b03      	cmp	r3, #3
    6530:	d1ca      	bne.n	64c8 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x1c>
			utox8(SERIAL_NUMBER_WORD_0, &name[0]);
    6532:	4b13      	ldr	r3, [pc, #76]	; (6580 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0xd4>)
    6534:	a901      	add	r1, sp, #4
    6536:	6818      	ldr	r0, [r3, #0]
    6538:	f7ff f9d4 	bl	58e4 <_ZL5utox8mPc>
			utox8(SERIAL_NUMBER_WORD_1, &name[8]);
    653c:	4b11      	ldr	r3, [pc, #68]	; (6584 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0xd8>)
    653e:	a903      	add	r1, sp, #12
    6540:	6818      	ldr	r0, [r3, #0]
    6542:	f7ff f9cf 	bl	58e4 <_ZL5utox8mPc>
			utox8(SERIAL_NUMBER_WORD_2, &name[16]);
    6546:	4b10      	ldr	r3, [pc, #64]	; (6588 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0xdc>)
    6548:	a905      	add	r1, sp, #20
    654a:	6818      	ldr	r0, [r3, #0]
    654c:	f7ff f9ca 	bl	58e4 <_ZL5utox8mPc>
			utox8(SERIAL_NUMBER_WORD_3, &name[24]);
    6550:	4b0e      	ldr	r3, [pc, #56]	; (658c <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0xe0>)
    6552:	a907      	add	r1, sp, #28
    6554:	6818      	ldr	r0, [r3, #0]
    6556:	f7ff f9c5 	bl	58e4 <_ZL5utox8mPc>
			PluggableUSB().getShortName(&name[32]);
    655a:	f000 ff3b 	bl	73d4 <_Z12PluggableUSBv>
    655e:	a909      	add	r1, sp, #36	; 0x24
    6560:	f000 ff18 	bl	7394 <_ZN13PluggableUSB_12getShortNameEPc>
			return sendStringDescriptor((uint8_t*)name, setup.wLength);
    6564:	79a2      	ldrb	r2, [r4, #6]
    6566:	a901      	add	r1, sp, #4
    6568:	e7d8      	b.n	651c <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x70>
    656a:	46c0      	nop			; (mov r8, r8)
    656c:	20000648 	.word	0x20000648
    6570:	0000b9fa 	.word	0x0000b9fa
    6574:	0000b9ea 	.word	0x0000b9ea
    6578:	0000b9d4 	.word	0x0000b9d4
    657c:	0000b9ee 	.word	0x0000b9ee
    6580:	0080a00c 	.word	0x0080a00c
    6584:	0080a040 	.word	0x0080a040
    6588:	0080a044 	.word	0x0080a044
    658c:	0080a048 	.word	0x0080a048

00006590 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup>:
	// Set the byte count as zero
	usbd.epBank1SetByteCount(ep, 0);
}

bool USBDeviceClass::handleStandardSetup(USBSetup &setup)
{
    6590:	b573      	push	{r0, r1, r4, r5, r6, lr}
    6592:	0006      	movs	r6, r0
	switch (setup.bRequest) {
    6594:	7848      	ldrb	r0, [r1, #1]
{
    6596:	000d      	movs	r5, r1
	switch (setup.bRequest) {
    6598:	280b      	cmp	r0, #11
    659a:	d811      	bhi.n	65c0 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x30>
    659c:	f000 ff34 	bl	7408 <__gnu_thumb1_case_uqi>
    65a0:	2e101d06 	.word	0x2e101d06
    65a4:	70484310 	.word	0x70484310
    65a8:	6c694f4c 	.word	0x6c694f4c
	case GET_STATUS:
		if (setup.bmRequestType == 0)  // device
    65ac:	7809      	ldrb	r1, [r1, #0]
    65ae:	aa01      	add	r2, sp, #4
    65b0:	2900      	cmp	r1, #0
    65b2:	d107      	bne.n	65c4 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x34>
		{
			// Send the device status
			// TODO: Check current configuration for power mode (if device is configured)
			// TODO: Check if remote wake-up is enabled
			uint8_t buff[] = { 0, 0 };
			armSend(0, buff, 2);
    65b4:	2302      	movs	r3, #2
			uint8_t buff[] = { 0, 0 };
    65b6:	7011      	strb	r1, [r2, #0]
    65b8:	7051      	strb	r1, [r2, #1]
			armSend(0, buff, 2);
    65ba:	0030      	movs	r0, r6
    65bc:	f7ff feac 	bl	6318 <_ZN14USBDeviceClass7armSendEmPKvm>
			return true;
    65c0:	2001      	movs	r0, #1
		return true;

	default:
		return true;
	}
}
    65c2:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
			uint8_t buff[] = { 0, 0 };
    65c4:	2300      	movs	r3, #0
    65c6:	7013      	strb	r3, [r2, #0]
    65c8:	7053      	strb	r3, [r2, #1]
			if (isEndpointHalt == 1)
    65ca:	4b2e      	ldr	r3, [pc, #184]	; (6684 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xf4>)
			if (isRemoteWakeUpEnabled == 1)
    65cc:	781b      	ldrb	r3, [r3, #0]
    65ce:	2b01      	cmp	r3, #1
    65d0:	d100      	bne.n	65d4 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x44>
				buff[0] = 1;
    65d2:	7013      	strb	r3, [r2, #0]
			armSend(0, buff, 2);
    65d4:	2302      	movs	r3, #2
		armSend(0, (void*)&_usbSetInterface, 1);
    65d6:	2100      	movs	r1, #0
    65d8:	e7ef      	b.n	65ba <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x2a>
		if (setup.wValueL == 1) // DEVICEREMOTEWAKEUP
    65da:	788a      	ldrb	r2, [r1, #2]
    65dc:	2300      	movs	r3, #0
    65de:	2a01      	cmp	r2, #1
    65e0:	d104      	bne.n	65ec <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x5c>
			uint8_t buff[] = { 0, 0 };
    65e2:	aa01      	add	r2, sp, #4
    65e4:	7013      	strb	r3, [r2, #0]
    65e6:	7053      	strb	r3, [r2, #1]
			if (isRemoteWakeUpEnabled == 1)
    65e8:	4b27      	ldr	r3, [pc, #156]	; (6688 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xf8>)
    65ea:	e7ef      	b.n	65cc <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x3c>
			isEndpointHalt = 0;
    65ec:	4a25      	ldr	r2, [pc, #148]	; (6684 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xf4>)
    65ee:	7013      	strb	r3, [r2, #0]
    65f0:	4a26      	ldr	r2, [pc, #152]	; (668c <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xfc>)
    65f2:	6993      	ldr	r3, [r2, #24]
    65f4:	0b9b      	lsrs	r3, r3, #14
    65f6:	039b      	lsls	r3, r3, #14
    65f8:	6193      	str	r3, [r2, #24]
    65fa:	e7e1      	b.n	65c0 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x30>
		if (setup.wValueL == 1) // DEVICEREMOTEWAKEUP
    65fc:	788c      	ldrb	r4, [r1, #2]
    65fe:	2c01      	cmp	r4, #1
    6600:	d106      	bne.n	6610 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x80>
			uint8_t buff[] = { 0 };
    6602:	2100      	movs	r1, #0
			isRemoteWakeUpEnabled = 1;
    6604:	4b20      	ldr	r3, [pc, #128]	; (6688 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xf8>)
			uint8_t buff[] = { 0 };
    6606:	aa01      	add	r2, sp, #4
			isRemoteWakeUpEnabled = 1;
    6608:	701c      	strb	r4, [r3, #0]
			uint8_t buff[] = { 0 };
    660a:	7011      	strb	r1, [r2, #0]
			armSend(0, buff, 1);
    660c:	0023      	movs	r3, r4
    660e:	e7d4      	b.n	65ba <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x2a>
		if (setup.wValueL == 0) // ENDPOINTHALT
    6610:	2c00      	cmp	r4, #0
    6612:	d108      	bne.n	6626 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x96>
			isEndpointHalt = 1;
    6614:	2001      	movs	r0, #1
    6616:	4b1b      	ldr	r3, [pc, #108]	; (6684 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xf4>)
    6618:	4a1c      	ldr	r2, [pc, #112]	; (668c <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xfc>)
    661a:	7018      	strb	r0, [r3, #0]
    661c:	6993      	ldr	r3, [r2, #24]
    661e:	0b9b      	lsrs	r3, r3, #14
    6620:	039b      	lsls	r3, r3, #14
    6622:	6193      	str	r3, [r2, #24]
			return true;
    6624:	e7cd      	b.n	65c2 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x32>
		setAddress(setup.wValueL);
    6626:	78a9      	ldrb	r1, [r5, #2]
    6628:	0030      	movs	r0, r6
    662a:	f7ff fc29 	bl	5e80 <_ZN14USBDeviceClass10setAddressEm>
    662e:	e7c7      	b.n	65c0 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x30>
		return sendDescriptor(setup);
    6630:	0030      	movs	r0, r6
    6632:	f7ff ff3b 	bl	64ac <_ZN14USBDeviceClass14sendDescriptorER8USBSetup>
    6636:	e7c4      	b.n	65c2 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x32>
		armSend(0, (void*)&_usbConfiguration, 1);
    6638:	2301      	movs	r3, #1
    663a:	4a15      	ldr	r2, [pc, #84]	; (6690 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x100>)
    663c:	e7cb      	b.n	65d6 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x46>
		if (REQUEST_DEVICE == (setup.bmRequestType & REQUEST_RECIPIENT)) {
    663e:	780b      	ldrb	r3, [r1, #0]
			return false;
    6640:	2000      	movs	r0, #0
		if (REQUEST_DEVICE == (setup.bmRequestType & REQUEST_RECIPIENT)) {
    6642:	06db      	lsls	r3, r3, #27
    6644:	d1bd      	bne.n	65c2 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x32>
			initEndpoints();
    6646:	0030      	movs	r0, r6
    6648:	f7ff fcd6 	bl	5ff8 <_ZN14USBDeviceClass13initEndpointsEv>
	inline void epBank1EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT1 = 1; }
    664c:	202a      	movs	r0, #42	; 0x2a
    664e:	2102      	movs	r1, #2
			_usbConfiguration = setup.wValueL;
    6650:	78aa      	ldrb	r2, [r5, #2]
    6652:	4b0f      	ldr	r3, [pc, #60]	; (6690 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x100>)
    6654:	30ff      	adds	r0, #255	; 0xff
    6656:	601a      	str	r2, [r3, #0]
    6658:	4a0c      	ldr	r2, [pc, #48]	; (668c <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xfc>)
    665a:	6813      	ldr	r3, [r2, #0]
    665c:	5c1c      	ldrb	r4, [r3, r0]
    665e:	4321      	orrs	r1, r4
	inline void epBank0EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT0 = 1; }
    6660:	244a      	movs	r4, #74	; 0x4a
	inline void epBank1EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT1 = 1; }
    6662:	5419      	strb	r1, [r3, r0]
	inline void epBank0EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT0 = 1; }
    6664:	34ff      	adds	r4, #255	; 0xff
    6666:	5d19      	ldrb	r1, [r3, r4]
    6668:	3829      	subs	r0, #41	; 0x29
    666a:	38ff      	subs	r0, #255	; 0xff
    666c:	4301      	orrs	r1, r0
    666e:	5519      	strb	r1, [r3, r4]
    6670:	e7d4      	b.n	661c <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x8c>
		armSend(0, (void*)&_usbSetInterface, 1);
    6672:	2301      	movs	r3, #1
    6674:	4a07      	ldr	r2, [pc, #28]	; (6694 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x104>)
    6676:	e7ae      	b.n	65d6 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x46>
		_usbSetInterface = setup.wValueL;
    6678:	788a      	ldrb	r2, [r1, #2]
    667a:	4b06      	ldr	r3, [pc, #24]	; (6694 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x104>)
    667c:	601a      	str	r2, [r3, #0]
    667e:	e7b7      	b.n	65f0 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x60>
		return false;
    6680:	2000      	movs	r0, #0
    6682:	e79e      	b.n	65c2 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x32>
    6684:	20000668 	.word	0x20000668
    6688:	20000670 	.word	0x20000670
    668c:	20000b00 	.word	0x20000b00
    6690:	20000af8 	.word	0x20000af8
    6694:	20000afc 	.word	0x20000afc

00006698 <_ZN14USBDeviceClass10ISRHandlerEv>:

void USBDeviceClass::ISRHandler()
{

	if (_pack_message == true) {
    6698:	4b3c      	ldr	r3, [pc, #240]	; (678c <_ZN14USBDeviceClass10ISRHandlerEv+0xf4>)
{
    669a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (_pack_message == true) {
    669c:	781c      	ldrb	r4, [r3, #0]
{
    669e:	0007      	movs	r7, r0
	if (_pack_message == true) {
    66a0:	2c00      	cmp	r4, #0
    66a2:	d15e      	bne.n	6762 <_ZN14USBDeviceClass10ISRHandlerEv+0xca>
	inline bool isEndOfResetInterrupt()        { return usb.INTFLAG.bit.EORST; }
    66a4:	4e3a      	ldr	r6, [pc, #232]	; (6790 <_ZN14USBDeviceClass10ISRHandlerEv+0xf8>)
    66a6:	6833      	ldr	r3, [r6, #0]
    66a8:	8b9b      	ldrh	r3, [r3, #28]
		return;
	}
	// End-Of-Reset
	if (usbd.isEndOfResetInterrupt())
    66aa:	071b      	lsls	r3, r3, #28
    66ac:	d50e      	bpl.n	66cc <_ZN14USBDeviceClass10ISRHandlerEv+0x34>
    66ae:	0021      	movs	r1, r4
    66b0:	0020      	movs	r0, r4
    66b2:	f7ff f93d 	bl	5930 <_ZN14USBDeviceClass6initEPEmm.part.5>
	inline void epBank0EnableSetupReceived(ep_t ep)    { usb.DeviceEndpoint[ep].EPINTENSET.bit.RXSTP = 1; }
    66b6:	6832      	ldr	r2, [r6, #0]
    66b8:	2310      	movs	r3, #16
    66ba:	0011      	movs	r1, r2
    66bc:	31ff      	adds	r1, #255	; 0xff
    66be:	7a88      	ldrb	r0, [r1, #10]
    66c0:	4303      	orrs	r3, r0
    66c2:	728b      	strb	r3, [r1, #10]
		initEP(0, USB_ENDPOINT_TYPE_CONTROL);

		// Enable Setup-Received interrupt
		usbd.epBank0EnableSetupReceived(0);

		_usbConfiguration = 0;
    66c4:	4b33      	ldr	r3, [pc, #204]	; (6794 <_ZN14USBDeviceClass10ISRHandlerEv+0xfc>)
    66c6:	601c      	str	r4, [r3, #0]
	inline void ackEndOfResetInterrupt()       { usb.INTFLAG.reg = USB_DEVICE_INTFLAG_EORST; }
    66c8:	2308      	movs	r3, #8
    66ca:	8393      	strh	r3, [r2, #28]
	inline bool isStartOfFrameInterrupt()      { return usb.INTFLAG.bit.SOF; }
    66cc:	6833      	ldr	r3, [r6, #0]
    66ce:	8b9a      	ldrh	r2, [r3, #28]

		usbd.ackEndOfResetInterrupt();
	}

	// Start-Of-Frame
	if (usbd.isStartOfFrameInterrupt())
    66d0:	0752      	lsls	r2, r2, #29
    66d2:	d501      	bpl.n	66d8 <_ZN14USBDeviceClass10ISRHandlerEv+0x40>
	inline void ackStartOfFrameInterrupt()     { usb.INTFLAG.reg = USB_DEVICE_INTFLAG_SOF; }
    66d4:	2204      	movs	r2, #4
    66d6:	839a      	strh	r2, [r3, #28]
	inline bool epBank0IsSetupReceived(ep_t ep)     { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.RXSTP; }
    66d8:	33ff      	adds	r3, #255	; 0xff
    66da:	7a1a      	ldrb	r2, [r3, #8]
		}
#endif
	}

	// Endpoint 0 Received Setup interrupt
	if (usbd.epBank0IsSetupReceived(0))
    66dc:	06d2      	lsls	r2, r2, #27
    66de:	d520      	bpl.n	6722 <_ZN14USBDeviceClass10ISRHandlerEv+0x8a>
	inline void epBank0AckSetupReceived(ep_t ep)    { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_RXSTP; }
    66e0:	2210      	movs	r2, #16
    66e2:	721a      	strb	r2, [r3, #8]
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
    66e4:	7959      	ldrb	r1, [r3, #5]
    66e6:	3230      	adds	r2, #48	; 0x30
    66e8:	430a      	orrs	r2, r1
    66ea:	715a      	strb	r2, [r3, #5]
		/* Clear the Bank 0 ready flag on Control OUT */
		// The RAM Buffer is empty: we can receive data
		usbd.epBank0ResetReady(0);

		bool ok;
		if (REQUEST_STANDARD == (setup->bmRequestType & REQUEST_TYPE)) {
    66ec:	2360      	movs	r3, #96	; 0x60
    66ee:	492a      	ldr	r1, [pc, #168]	; (6798 <_ZN14USBDeviceClass10ISRHandlerEv+0x100>)
			// Standard Requests
			ok = handleStandardSetup(*setup);
    66f0:	0038      	movs	r0, r7
		if (REQUEST_STANDARD == (setup->bmRequestType & REQUEST_TYPE)) {
    66f2:	780a      	ldrb	r2, [r1, #0]
    66f4:	421a      	tst	r2, r3
    66f6:	d135      	bne.n	6764 <_ZN14USBDeviceClass10ISRHandlerEv+0xcc>
			ok = handleStandardSetup(*setup);
    66f8:	f7ff ff4a 	bl	6590 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup>
		} else {
			// Class Interface Requests
			ok = handleClassInterfaceSetup(*setup);
		}

		if (ok) {
    66fc:	2800      	cmp	r0, #0
    66fe:	d034      	beq.n	676a <_ZN14USBDeviceClass10ISRHandlerEv+0xd2>
	inline void epBank1SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK1RDY = 1; }
    6700:	2280      	movs	r2, #128	; 0x80
    6702:	6833      	ldr	r3, [r6, #0]
    6704:	4252      	negs	r2, r2
    6706:	33ff      	adds	r3, #255	; 0xff
    6708:	7999      	ldrb	r1, [r3, #6]
    670a:	430a      	orrs	r2, r1
	USB->DEVICE.DeviceEndpoint[ep].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_STALLRQ(2);
    670c:	719a      	strb	r2, [r3, #6]
	inline bool epBank1IsStalled(ep_t ep)           { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.STALL1; }
    670e:	6833      	ldr	r3, [r6, #0]
    6710:	33ff      	adds	r3, #255	; 0xff
    6712:	7a1a      	ldrb	r2, [r3, #8]
			usbd.epBank1SetReady(0);
		} else {
			stall(0);
		}

		if (usbd.epBank1IsStalled(0))
    6714:	0652      	lsls	r2, r2, #25
    6716:	d504      	bpl.n	6722 <_ZN14USBDeviceClass10ISRHandlerEv+0x8a>
	inline void epBank1AckStalled(ep_t ep)          { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL(2); }
    6718:	2240      	movs	r2, #64	; 0x40
    671a:	721a      	strb	r2, [r3, #8]
	inline void epBank1DisableStalled(ep_t ep)          { usb.DeviceEndpoint[ep].EPINTENCLR.bit.STALL1 = 1; }
    671c:	7a59      	ldrb	r1, [r3, #9]
    671e:	430a      	orrs	r2, r1
    6720:	725a      	strb	r2, [r3, #9]
	inline uint16_t epInterruptSummary() { return usb.EPINTSMRY.reg; }
    6722:	6833      	ldr	r3, [r6, #0]
		}

	} // end Received Setup handler

	uint8_t i=0;
	uint8_t ept_int = usbd.epInterruptSummary() & 0xFE; // Remove endpoint number 0 (setup)
    6724:	2500      	movs	r5, #0
    6726:	8c1c      	ldrh	r4, [r3, #32]
    6728:	2301      	movs	r3, #1
    672a:	439c      	bics	r4, r3
    672c:	b2e4      	uxtb	r4, r4
	while (ept_int != 0)
	{
		// Check if endpoint has a pending interrupt
		if ((ept_int & (1 << i)) != 0)
    672e:	9301      	str	r3, [sp, #4]
    6730:	b2e9      	uxtb	r1, r5
	while (ept_int != 0)
    6732:	2c00      	cmp	r4, #0
    6734:	d015      	beq.n	6762 <_ZN14USBDeviceClass10ISRHandlerEv+0xca>
		if ((ept_int & (1 << i)) != 0)
    6736:	0023      	movs	r3, r4
    6738:	412b      	asrs	r3, r5
    673a:	9a01      	ldr	r2, [sp, #4]
    673c:	4213      	tst	r3, r2
    673e:	d00d      	beq.n	675c <_ZN14USBDeviceClass10ISRHandlerEv+0xc4>
	inline bool epBank0IsTransferComplete(ep_t ep)  { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.TRCPT0; }
    6740:	002b      	movs	r3, r5
    6742:	6832      	ldr	r2, [r6, #0]
    6744:	3308      	adds	r3, #8
    6746:	015b      	lsls	r3, r3, #5
    6748:	18d3      	adds	r3, r2, r3
    674a:	79da      	ldrb	r2, [r3, #7]
		{
			// Endpoint Transfer Complete (0/1) Interrupt
			if (usbd.epBank0IsTransferComplete(i) ||
    674c:	07d2      	lsls	r2, r2, #31
    674e:	d413      	bmi.n	6778 <_ZN14USBDeviceClass10ISRHandlerEv+0xe0>
	inline bool epBank1IsTransferComplete(ep_t ep)  { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.TRCPT1; }
    6750:	79db      	ldrb	r3, [r3, #7]
    6752:	079b      	lsls	r3, r3, #30
    6754:	d410      	bmi.n	6778 <_ZN14USBDeviceClass10ISRHandlerEv+0xe0>
					epHandlers[i]->handleEndpoint();
				} else {
					handleEndpoint(i);
				}
			}
			ept_int &= ~(1 << i);
    6756:	9b01      	ldr	r3, [sp, #4]
    6758:	40ab      	lsls	r3, r5
    675a:	439c      	bics	r4, r3
    675c:	3501      	adds	r5, #1
		}
		i++;
		if (i > USB_EPT_NUM)
    675e:	2d09      	cmp	r5, #9
    6760:	d1e6      	bne.n	6730 <_ZN14USBDeviceClass10ISRHandlerEv+0x98>
			break;  // fire exit
	}
}
    6762:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
			ok = handleClassInterfaceSetup(*setup);
    6764:	f7ff fbb0 	bl	5ec8 <_ZN14USBDeviceClass25handleClassInterfaceSetupER8USBSetup>
    6768:	e7c8      	b.n	66fc <_ZN14USBDeviceClass10ISRHandlerEv+0x64>
	USB->DEVICE.DeviceEndpoint[ep].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_STALLRQ(2);
    676a:	2220      	movs	r2, #32
    676c:	4b0b      	ldr	r3, [pc, #44]	; (679c <_ZN14USBDeviceClass10ISRHandlerEv+0x104>)
    676e:	e7cd      	b.n	670c <_ZN14USBDeviceClass10ISRHandlerEv+0x74>
					epHandlers[i]->handleEndpoint();
    6770:	6803      	ldr	r3, [r0, #0]
    6772:	681b      	ldr	r3, [r3, #0]
    6774:	4798      	blx	r3
    6776:	e7ee      	b.n	6756 <_ZN14USBDeviceClass10ISRHandlerEv+0xbe>
				if (epHandlers[i]) {
    6778:	4b09      	ldr	r3, [pc, #36]	; (67a0 <_ZN14USBDeviceClass10ISRHandlerEv+0x108>)
    677a:	00aa      	lsls	r2, r5, #2
    677c:	58d0      	ldr	r0, [r2, r3]
    677e:	2800      	cmp	r0, #0
    6780:	d1f6      	bne.n	6770 <_ZN14USBDeviceClass10ISRHandlerEv+0xd8>
					handleEndpoint(i);
    6782:	0038      	movs	r0, r7
    6784:	f7ff fae0 	bl	5d48 <_ZN14USBDeviceClass14handleEndpointEh>
    6788:	e7e5      	b.n	6756 <_ZN14USBDeviceClass10ISRHandlerEv+0xbe>
    678a:	46c0      	nop			; (mov r8, r8)
    678c:	20000af5 	.word	0x20000af5
    6790:	20000b00 	.word	0x20000b00
    6794:	20000af8 	.word	0x20000af8
    6798:	20000834 	.word	0x20000834
    679c:	410050ff 	.word	0x410050ff
    67a0:	2000064c 	.word	0x2000064c

000067a4 <UDD_Handler>:
extern "C" void UDD_Handler(void) {
    67a4:	b510      	push	{r4, lr}
	USBDevice.ISRHandler();
    67a6:	4802      	ldr	r0, [pc, #8]	; (67b0 <UDD_Handler+0xc>)
    67a8:	f7ff ff76 	bl	6698 <_ZN14USBDeviceClass10ISRHandlerEv>
}
    67ac:	bd10      	pop	{r4, pc}
    67ae:	46c0      	nop			; (mov r8, r8)
    67b0:	20000648 	.word	0x20000648

000067b4 <_GLOBAL__sub_I__ZN20USBDevice_SAMD21G18x5resetEv>:
	USBDevice_SAMD21G18x() : usb(USB->DEVICE) {
    67b4:	4a01      	ldr	r2, [pc, #4]	; (67bc <_GLOBAL__sub_I__ZN20USBDevice_SAMD21G18x5resetEv+0x8>)
    67b6:	4b02      	ldr	r3, [pc, #8]	; (67c0 <_GLOBAL__sub_I__ZN20USBDevice_SAMD21G18x5resetEv+0xc>)
    67b8:	601a      	str	r2, [r3, #0]
 * USB Device instance
 * -------------------
 */

// USBDevice class instance
USBDeviceClass USBDevice;
    67ba:	4770      	bx	lr
    67bc:	41005000 	.word	0x41005000
    67c0:	20000b00 	.word	0x20000b00

000067c4 <init>:
 *   - During reset, all PORT lines are configured as inputs with input buffers, output buffers and pull disabled.
 */
void init( void )
{
  // Set Systick to 1ms interval, common to all Cortex-M variants
  if ( SysTick_Config( SystemCoreClock / 1000 ) )
    67c4:	21fa      	movs	r1, #250	; 0xfa
    67c6:	4b31      	ldr	r3, [pc, #196]	; (688c <init+0xc8>)
{
    67c8:	b510      	push	{r4, lr}
  if ( SysTick_Config( SystemCoreClock / 1000 ) )
    67ca:	6818      	ldr	r0, [r3, #0]
    67cc:	0089      	lsls	r1, r1, #2
    67ce:	f000 fe25 	bl	741c <__udivsi3>
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
    67d2:	4b2f      	ldr	r3, [pc, #188]	; (6890 <init+0xcc>)
    67d4:	3801      	subs	r0, #1
    67d6:	4298      	cmp	r0, r3
    67d8:	d856      	bhi.n	6888 <init+0xc4>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
    67da:	492e      	ldr	r1, [pc, #184]	; (6894 <init+0xd0>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    67dc:	4a2e      	ldr	r2, [pc, #184]	; (6898 <init+0xd4>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
    67de:	6048      	str	r0, [r1, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    67e0:	20c0      	movs	r0, #192	; 0xc0
    67e2:	6a13      	ldr	r3, [r2, #32]
    67e4:	0600      	lsls	r0, r0, #24
    67e6:	021b      	lsls	r3, r3, #8
    67e8:	0a1b      	lsrs	r3, r3, #8
    67ea:	4303      	orrs	r3, r0
    67ec:	6213      	str	r3, [r2, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
    67ee:	2400      	movs	r4, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
    67f0:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
    67f2:	608c      	str	r4, [r1, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
    67f4:	600b      	str	r3, [r1, #0]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    67f6:	2180      	movs	r1, #128	; 0x80
    67f8:	6a13      	ldr	r3, [r2, #32]
    67fa:	0609      	lsls	r1, r1, #24
    67fc:	021b      	lsls	r3, r3, #8
    67fe:	0a1b      	lsrs	r3, r3, #8
    6800:	430b      	orrs	r3, r1
    6802:	6213      	str	r3, [r2, #32]
//
//  // Clock EIC for I/O interrupts
//  PM->APBAMASK.reg |= PM_APBAMASK_EIC ;

  // Clock SERCOM for Serial
  PM->APBCMASK.reg |= PM_APBCMASK_SERCOM0 | PM_APBCMASK_SERCOM1 | PM_APBCMASK_SERCOM2 | PM_APBCMASK_SERCOM3 | PM_APBCMASK_SERCOM4 | PM_APBCMASK_SERCOM5 ;
    6804:	22fc      	movs	r2, #252	; 0xfc
    6806:	4b25      	ldr	r3, [pc, #148]	; (689c <init+0xd8>)
    6808:	6a19      	ldr	r1, [r3, #32]
    680a:	430a      	orrs	r2, r1
    680c:	621a      	str	r2, [r3, #32]

  // Clock TC/TCC for Pulse and Analog
  PM->APBCMASK.reg |= PM_APBCMASK_TCC0 | PM_APBCMASK_TCC1 | PM_APBCMASK_TCC2 | PM_APBCMASK_TC3 | PM_APBCMASK_TC4 | PM_APBCMASK_TC5 ;
    680e:	22fc      	movs	r2, #252	; 0xfc
    6810:	6a19      	ldr	r1, [r3, #32]
    6812:	0192      	lsls	r2, r2, #6
    6814:	430a      	orrs	r2, r1
    6816:	621a      	str	r2, [r3, #32]

  // Clock ADC/DAC for Analog
  PM->APBCMASK.reg |= PM_APBCMASK_ADC | PM_APBCMASK_DAC ;
    6818:	22a0      	movs	r2, #160	; 0xa0
    681a:	6a19      	ldr	r1, [r3, #32]
    681c:	02d2      	lsls	r2, r2, #11
    681e:	430a      	orrs	r2, r1
    6820:	621a      	str	r2, [r3, #32]

  // Setup all pins (digital and analog) in INPUT mode (default is nothing)
  for (uint32_t ul = 0 ; ul < NUM_DIGITAL_PINS ; ul++ )
  {
    pinMode( ul, INPUT ) ;
    6822:	0020      	movs	r0, r4
    6824:	2100      	movs	r1, #0
  for (uint32_t ul = 0 ; ul < NUM_DIGITAL_PINS ; ul++ )
    6826:	3401      	adds	r4, #1
    pinMode( ul, INPUT ) ;
    6828:	f000 f876 	bl	6918 <pinMode>
  for (uint32_t ul = 0 ; ul < NUM_DIGITAL_PINS ; ul++ )
    682c:	2c0f      	cmp	r4, #15
    682e:	d1f8      	bne.n	6822 <init+0x5e>
  }

  // Initialize Analog Controller
  // Setting clock
  while(GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY);
    6830:	4b1b      	ldr	r3, [pc, #108]	; (68a0 <init+0xdc>)
    6832:	001c      	movs	r4, r3
    6834:	785a      	ldrb	r2, [r3, #1]
    6836:	b252      	sxtb	r2, r2
    6838:	2a00      	cmp	r2, #0
    683a:	dbfb      	blt.n	6834 <init+0x70>

  GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID( GCM_ADC ) | // Generic Clock ADC
    683c:	4a19      	ldr	r2, [pc, #100]	; (68a4 <init+0xe0>)
    683e:	805a      	strh	r2, [r3, #2]
                      GCLK_CLKCTRL_GEN_GCLK0     | // Generic Clock Generator 0 is source
                      GCLK_CLKCTRL_CLKEN ;

  while( ADC->STATUS.bit.SYNCBUSY == 1 );          // Wait for synchronization of registers between the clock domains
    6840:	4b19      	ldr	r3, [pc, #100]	; (68a8 <init+0xe4>)
    6842:	001a      	movs	r2, r3
    6844:	7e59      	ldrb	r1, [r3, #25]
    6846:	09c9      	lsrs	r1, r1, #7
    6848:	2901      	cmp	r1, #1
    684a:	d0fb      	beq.n	6844 <init+0x80>

  ADC->CTRLB.reg = ADC_CTRLB_PRESCALER_DIV512 |    // Divide Clock by 512.
    684c:	21e4      	movs	r1, #228	; 0xe4
    684e:	00c9      	lsls	r1, r1, #3
    6850:	8099      	strh	r1, [r3, #4]
                   ADC_CTRLB_RESSEL_10BIT;         // 10 bits resolution as default

  ADC->SAMPCTRL.reg = 0x3f;                        // Set max Sampling Time Length
    6852:	213f      	movs	r1, #63	; 0x3f
    6854:	70d9      	strb	r1, [r3, #3]

  while( ADC->STATUS.bit.SYNCBUSY == 1 );          // Wait for synchronization of registers between the clock domains
    6856:	7e53      	ldrb	r3, [r2, #25]
    6858:	09db      	lsrs	r3, r3, #7
    685a:	2b01      	cmp	r3, #1
    685c:	d0fb      	beq.n	6856 <init+0x92>

  ADC->INPUTCTRL.reg = ADC_INPUTCTRL_MUXNEG_GND;   // No Negative input (Internal Ground)
    685e:	23c0      	movs	r3, #192	; 0xc0

  // Averaging (see datasheet table in AVGCTRL register description)
  ADC->AVGCTRL.reg = ADC_AVGCTRL_SAMPLENUM_1 |    // 1 sample only (no oversampling nor averaging)
    6860:	2000      	movs	r0, #0
  ADC->INPUTCTRL.reg = ADC_INPUTCTRL_MUXNEG_GND;   // No Negative input (Internal Ground)
    6862:	015b      	lsls	r3, r3, #5
    6864:	6113      	str	r3, [r2, #16]
  ADC->AVGCTRL.reg = ADC_AVGCTRL_SAMPLENUM_1 |    // 1 sample only (no oversampling nor averaging)
    6866:	7090      	strb	r0, [r2, #2]
                     ADC_AVGCTRL_ADJRES(0x0ul);   // Adjusting result by 0

  analogReference( AR_DEFAULT ) ; // Analog Reference is AREF pin (3.3v)
    6868:	f000 f824 	bl	68b4 <analogReference>

  // Initialize DAC
  // Setting clock
  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY );
    686c:	7863      	ldrb	r3, [r4, #1]
    686e:	b25b      	sxtb	r3, r3
    6870:	2b00      	cmp	r3, #0
    6872:	dbfb      	blt.n	686c <init+0xa8>
  GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID( GCM_DAC ) | // Generic Clock ADC
    6874:	4b0d      	ldr	r3, [pc, #52]	; (68ac <init+0xe8>)
                      GCLK_CLKCTRL_GEN_GCLK0     | // Generic Clock Generator 0 is source
                      GCLK_CLKCTRL_CLKEN ;

  while ( DAC->STATUS.bit.SYNCBUSY == 1 ); // Wait for synchronization of registers between the clock domains
    6876:	4a0e      	ldr	r2, [pc, #56]	; (68b0 <init+0xec>)
  GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID( GCM_DAC ) | // Generic Clock ADC
    6878:	8063      	strh	r3, [r4, #2]
  while ( DAC->STATUS.bit.SYNCBUSY == 1 ); // Wait for synchronization of registers between the clock domains
    687a:	79d3      	ldrb	r3, [r2, #7]
    687c:	09db      	lsrs	r3, r3, #7
    687e:	2b01      	cmp	r3, #1
    6880:	d0fb      	beq.n	687a <init+0xb6>
  DAC->CTRLB.reg = DAC_CTRLB_REFSEL_AVCC | // Using the 3.3V reference
    6882:	2341      	movs	r3, #65	; 0x41
    6884:	7053      	strb	r3, [r2, #1]
                   DAC_CTRLB_EOEN ;        // External Output Enable (Vout)
}
    6886:	bd10      	pop	{r4, pc}
    6888:	e7fe      	b.n	6888 <init+0xc4>
    688a:	46c0      	nop			; (mov r8, r8)
    688c:	20000084 	.word	0x20000084
    6890:	00ffffff 	.word	0x00ffffff
    6894:	e000e010 	.word	0xe000e010
    6898:	e000ed00 	.word	0xe000ed00
    689c:	40000400 	.word	0x40000400
    68a0:	40000c00 	.word	0x40000c00
    68a4:	0000401e 	.word	0x0000401e
    68a8:	42004000 	.word	0x42004000
    68ac:	00004021 	.word	0x00004021
    68b0:	42004800 	.word	0x42004800

000068b4 <analogReference>:
static int _writeResolution = 8;

// Wait for synchronization of registers between the clock domains
static __inline__ void syncADC() __attribute__((always_inline, unused));
static void syncADC() {
  while (ADC->STATUS.bit.SYNCBUSY == 1)
    68b4:	4a16      	ldr	r2, [pc, #88]	; (6910 <analogReference+0x5c>)
 * External Reference should be between 1v and VDDANA-0.6v=2.7v
 *
 * Warning : On Arduino Zero board the input/output voltage for SAMD21G18 is 3.3 volts maximum
 */
void analogReference(eAnalogReference mode)
{
    68b6:	b500      	push	{lr}
    68b8:	0013      	movs	r3, r2
  while (ADC->STATUS.bit.SYNCBUSY == 1)
    68ba:	7e51      	ldrb	r1, [r2, #25]
    68bc:	09c9      	lsrs	r1, r1, #7
    68be:	2901      	cmp	r1, #1
    68c0:	d0fb      	beq.n	68ba <analogReference+0x6>
  syncADC();
  switch (mode)
    68c2:	3801      	subs	r0, #1
    68c4:	2804      	cmp	r0, #4
    68c6:	d816      	bhi.n	68f6 <analogReference+0x42>
      ADC->INPUTCTRL.bit.GAIN = ADC_INPUTCTRL_GAIN_1X_Val;      // Gain Factor Selection
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_INT1V_Val;   // 1.0V voltage reference
      break;

    case AR_INTERNAL1V65:
      ADC->INPUTCTRL.bit.GAIN = ADC_INPUTCTRL_GAIN_1X_Val;      // Gain Factor Selection
    68c8:	6919      	ldr	r1, [r3, #16]
    68ca:	4a12      	ldr	r2, [pc, #72]	; (6914 <analogReference+0x60>)
    68cc:	400a      	ands	r2, r1
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_INTVCC1_Val; // 1/2 VDDANA = 0.5* 3V3 = 1.65V
    68ce:	210f      	movs	r1, #15
      ADC->INPUTCTRL.bit.GAIN = ADC_INPUTCTRL_GAIN_1X_Val;      // Gain Factor Selection
    68d0:	611a      	str	r2, [r3, #16]
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_INTVCC1_Val; // 1/2 VDDANA = 0.5* 3V3 = 1.65V
    68d2:	785a      	ldrb	r2, [r3, #1]
    68d4:	438a      	bics	r2, r1
  switch (mode)
    68d6:	f000 fd97 	bl	7408 <__gnu_thumb1_case_uqi>
    68da:	0803      	.short	0x0803
    68dc:	0b06      	.short	0x0b06
    68de:	03          	.byte	0x03
    68df:	00          	.byte	0x00
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_INTVCC0_Val; // 1/1.48 VDDANA = 1/1.48* 3V3 = 2.2297
    68e0:	0011      	movs	r1, r2
    68e2:	2201      	movs	r2, #1
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_INTVCC1_Val; // 1/2 VDDANA = 0.5* 3V3 = 1.65V
    68e4:	430a      	orrs	r2, r1
    68e6:	705a      	strb	r2, [r3, #1]
    default:
      ADC->INPUTCTRL.bit.GAIN = ADC_INPUTCTRL_GAIN_DIV2_Val;
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_INTVCC1_Val; // 1/2 VDDANA = 0.5* 3V3 = 1.65V
      break;
  }
}
    68e8:	bd00      	pop	{pc}
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_AREFA_Val;
    68ea:	0011      	movs	r1, r2
    68ec:	2203      	movs	r2, #3
    68ee:	e7f9      	b.n	68e4 <analogReference+0x30>
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_INTVCC1_Val; // 1/2 VDDANA = 0.5* 3V3 = 1.65V
    68f0:	0011      	movs	r1, r2
    68f2:	2202      	movs	r2, #2
    68f4:	e7f6      	b.n	68e4 <analogReference+0x30>
      ADC->INPUTCTRL.bit.GAIN = ADC_INPUTCTRL_GAIN_DIV2_Val;
    68f6:	23f0      	movs	r3, #240	; 0xf0
    68f8:	6911      	ldr	r1, [r2, #16]
    68fa:	051b      	lsls	r3, r3, #20
    68fc:	430b      	orrs	r3, r1
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_INTVCC1_Val; // 1/2 VDDANA = 0.5* 3V3 = 1.65V
    68fe:	210f      	movs	r1, #15
      ADC->INPUTCTRL.bit.GAIN = ADC_INPUTCTRL_GAIN_DIV2_Val;
    6900:	6113      	str	r3, [r2, #16]
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_INTVCC1_Val; // 1/2 VDDANA = 0.5* 3V3 = 1.65V
    6902:	7853      	ldrb	r3, [r2, #1]
    6904:	438b      	bics	r3, r1
    6906:	0019      	movs	r1, r3
    6908:	2302      	movs	r3, #2
    690a:	430b      	orrs	r3, r1
    690c:	7053      	strb	r3, [r2, #1]
}
    690e:	e7eb      	b.n	68e8 <analogReference+0x34>
    6910:	42004000 	.word	0x42004000
    6914:	f0ffffff 	.word	0xf0ffffff

00006918 <pinMode>:
#endif

void pinMode( uint32_t ulPin, uint32_t ulMode )
{
  // Handle the case the pin isn't usable as PIO
  if ( g_APinDescription[ulPin].ulPinType == PIO_NOT_A_PIN )
    6918:	2318      	movs	r3, #24
{
    691a:	b530      	push	{r4, r5, lr}
  if ( g_APinDescription[ulPin].ulPinType == PIO_NOT_A_PIN )
    691c:	001d      	movs	r5, r3
{
    691e:	0004      	movs	r4, r0
  if ( g_APinDescription[ulPin].ulPinType == PIO_NOT_A_PIN )
    6920:	4345      	muls	r5, r0
    6922:	2008      	movs	r0, #8
    6924:	4a20      	ldr	r2, [pc, #128]	; (69a8 <pinMode+0x90>)
    6926:	1955      	adds	r5, r2, r5
    6928:	5628      	ldrsb	r0, [r5, r0]
    692a:	3001      	adds	r0, #1
    692c:	d014      	beq.n	6958 <pinMode+0x40>
  {
    return ;
  }

  // Set pin mode according to chapter '22.6.3 I/O Pin Configuration'
  switch ( ulMode )
    692e:	2903      	cmp	r1, #3
    6930:	d812      	bhi.n	6958 <pinMode+0x40>
    6932:	0008      	movs	r0, r1
      PORT->Group[g_APinDescription[ulPin].ulPort].OUTSET.reg = (uint32_t)(1<<g_APinDescription[ulPin].ulPin) ;
    break ;

    case INPUT_PULLDOWN:
      // Set pin to input mode with pull-down resistor enabled
      PORT->Group[g_APinDescription[ulPin].ulPort].PINCFG[g_APinDescription[ulPin].ulPin].reg=(uint8_t)(PORT_PINCFG_INEN|PORT_PINCFG_PULLEN) ;
    6934:	4363      	muls	r3, r4
    6936:	56d1      	ldrsb	r1, [r2, r3]
    6938:	18d3      	adds	r3, r2, r3
  switch ( ulMode )
    693a:	f000 fd65 	bl	7408 <__gnu_thumb1_case_uqi>
    693e:	2802      	.short	0x2802
    6940:	1b0e      	.short	0x1b0e
      PORT->Group[g_APinDescription[ulPin].ulPort].PINCFG[g_APinDescription[ulPin].ulPin].reg=(uint8_t)(PORT_PINCFG_INEN) ;
    6942:	6858      	ldr	r0, [r3, #4]
    6944:	01cb      	lsls	r3, r1, #7
    6946:	2102      	movs	r1, #2
    6948:	4a18      	ldr	r2, [pc, #96]	; (69ac <pinMode+0x94>)
    694a:	189b      	adds	r3, r3, r2
    694c:	181a      	adds	r2, r3, r0
    694e:	3240      	adds	r2, #64	; 0x40
    6950:	7011      	strb	r1, [r2, #0]
      PORT->Group[g_APinDescription[ulPin].ulPort].DIRCLR.reg = (uint32_t)(1<<g_APinDescription[ulPin].ulPin) ;
    6952:	2201      	movs	r2, #1
    6954:	4082      	lsls	r2, r0
    6956:	605a      	str	r2, [r3, #4]

    default:
      // do nothing
    break ;
  }
}
    6958:	bd30      	pop	{r4, r5, pc}
      PORT->Group[g_APinDescription[ulPin].ulPort].PINCFG[g_APinDescription[ulPin].ulPin].reg=(uint8_t)(PORT_PINCFG_INEN|PORT_PINCFG_PULLEN) ;
    695a:	6858      	ldr	r0, [r3, #4]
    695c:	01cb      	lsls	r3, r1, #7
    695e:	2106      	movs	r1, #6
    6960:	4a12      	ldr	r2, [pc, #72]	; (69ac <pinMode+0x94>)
    6962:	189b      	adds	r3, r3, r2
    6964:	181a      	adds	r2, r3, r0
    6966:	3240      	adds	r2, #64	; 0x40
    6968:	7011      	strb	r1, [r2, #0]
      PORT->Group[g_APinDescription[ulPin].ulPort].DIRCLR.reg = (uint32_t)(1<<g_APinDescription[ulPin].ulPin) ;
    696a:	2201      	movs	r2, #1
    696c:	4082      	lsls	r2, r0
    696e:	605a      	str	r2, [r3, #4]
      PORT->Group[g_APinDescription[ulPin].ulPort].OUTSET.reg = (uint32_t)(1<<g_APinDescription[ulPin].ulPin) ;
    6970:	619a      	str	r2, [r3, #24]
    break ;
    6972:	e7f1      	b.n	6958 <pinMode+0x40>
      PORT->Group[g_APinDescription[ulPin].ulPort].PINCFG[g_APinDescription[ulPin].ulPin].reg=(uint8_t)(PORT_PINCFG_INEN|PORT_PINCFG_PULLEN) ;
    6974:	6858      	ldr	r0, [r3, #4]
    6976:	01cb      	lsls	r3, r1, #7
    6978:	2106      	movs	r1, #6
    697a:	4a0c      	ldr	r2, [pc, #48]	; (69ac <pinMode+0x94>)
    697c:	189b      	adds	r3, r3, r2
    697e:	181a      	adds	r2, r3, r0
    6980:	3240      	adds	r2, #64	; 0x40
    6982:	7011      	strb	r1, [r2, #0]
      PORT->Group[g_APinDescription[ulPin].ulPort].DIRCLR.reg = (uint32_t)(1<<g_APinDescription[ulPin].ulPin) ;
    6984:	2201      	movs	r2, #1
    6986:	4082      	lsls	r2, r0
    6988:	605a      	str	r2, [r3, #4]
      PORT->Group[g_APinDescription[ulPin].ulPort].OUTCLR.reg = (uint32_t)(1<<g_APinDescription[ulPin].ulPin) ;
    698a:	615a      	str	r2, [r3, #20]
    break ;
    698c:	e7e4      	b.n	6958 <pinMode+0x40>
      PORT->Group[g_APinDescription[ulPin].ulPort].PINCFG[g_APinDescription[ulPin].ulPin].reg=(uint8_t)(PORT_PINCFG_INEN) ;
    698e:	6858      	ldr	r0, [r3, #4]
    6990:	01cb      	lsls	r3, r1, #7
    6992:	2102      	movs	r1, #2
    6994:	4a05      	ldr	r2, [pc, #20]	; (69ac <pinMode+0x94>)
    6996:	189b      	adds	r3, r3, r2
    6998:	181a      	adds	r2, r3, r0
    699a:	3240      	adds	r2, #64	; 0x40
    699c:	7011      	strb	r1, [r2, #0]
      PORT->Group[g_APinDescription[ulPin].ulPort].DIRSET.reg = (uint32_t)(1<<g_APinDescription[ulPin].ulPin) ;
    699e:	2201      	movs	r2, #1
    69a0:	4082      	lsls	r2, r0
    69a2:	609a      	str	r2, [r3, #8]
    break ;
    69a4:	e7d8      	b.n	6958 <pinMode+0x40>
    69a6:	46c0      	nop			; (mov r8, r8)
    69a8:	0000ba0c 	.word	0x0000ba0c
    69ac:	41004400 	.word	0x41004400

000069b0 <digitalWrite>:

void digitalWrite( uint32_t ulPin, uint32_t ulVal )
{
  // Handle the case the pin isn't usable as PIO
  if ( g_APinDescription[ulPin].ulPinType == PIO_NOT_A_PIN )
    69b0:	2318      	movs	r3, #24
{
    69b2:	b5f0      	push	{r4, r5, r6, r7, lr}
  if ( g_APinDescription[ulPin].ulPinType == PIO_NOT_A_PIN )
    69b4:	2408      	movs	r4, #8
    69b6:	4358      	muls	r0, r3
    69b8:	4a11      	ldr	r2, [pc, #68]	; (6a00 <digitalWrite+0x50>)
    69ba:	1813      	adds	r3, r2, r0
    69bc:	571c      	ldrsb	r4, [r3, r4]
    69be:	3401      	adds	r4, #1
    69c0:	d01b      	beq.n	69fa <digitalWrite+0x4a>
    return ;
  }

  EPortType port = g_APinDescription[ulPin].ulPort;
  uint32_t pin = g_APinDescription[ulPin].ulPin;
  uint32_t pinMask = (1ul << pin);
    69c2:	2601      	movs	r6, #1
    69c4:	0035      	movs	r5, r6
  uint32_t pin = g_APinDescription[ulPin].ulPin;
    69c6:	685f      	ldr	r7, [r3, #4]

  if ( (PORT->Group[port].DIRSET.reg & pinMask) == 0 ) {
    69c8:	5683      	ldrsb	r3, [r0, r2]
  uint32_t pinMask = (1ul << pin);
    69ca:	40bd      	lsls	r5, r7
  if ( (PORT->Group[port].DIRSET.reg & pinMask) == 0 ) {
    69cc:	4a0d      	ldr	r2, [pc, #52]	; (6a04 <digitalWrite+0x54>)
    69ce:	01db      	lsls	r3, r3, #7
    69d0:	189a      	adds	r2, r3, r2
    69d2:	6890      	ldr	r0, [r2, #8]
    69d4:	4228      	tst	r0, r5
    69d6:	d10b      	bne.n	69f0 <digitalWrite+0x40>
    // the pin is not an output, disable pull-up if val is LOW, otherwise enable pull-up
    PORT->Group[port].PINCFG[pin].bit.PULLEN = ((ulVal == LOW) ? 0 : 1) ;
    69d8:	000c      	movs	r4, r1
    69da:	1e60      	subs	r0, r4, #1
    69dc:	4184      	sbcs	r4, r0
    69de:	19d2      	adds	r2, r2, r7
    69e0:	3240      	adds	r2, #64	; 0x40
    69e2:	7810      	ldrb	r0, [r2, #0]
    69e4:	4034      	ands	r4, r6
    69e6:	3603      	adds	r6, #3
    69e8:	00a4      	lsls	r4, r4, #2
    69ea:	43b0      	bics	r0, r6
    69ec:	4320      	orrs	r0, r4
    69ee:	7010      	strb	r0, [r2, #0]
  }

  switch ( ulVal )
  {
    case LOW:
      PORT->Group[port].OUTCLR.reg = pinMask;
    69f0:	4a04      	ldr	r2, [pc, #16]	; (6a04 <digitalWrite+0x54>)
    69f2:	189b      	adds	r3, r3, r2
  switch ( ulVal )
    69f4:	2900      	cmp	r1, #0
    69f6:	d101      	bne.n	69fc <digitalWrite+0x4c>
      PORT->Group[port].OUTCLR.reg = pinMask;
    69f8:	615d      	str	r5, [r3, #20]
      PORT->Group[port].OUTSET.reg = pinMask;
    break ;
  }

  return ;
}
    69fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
      PORT->Group[port].OUTSET.reg = pinMask;
    69fc:	619d      	str	r5, [r3, #24]
    break ;
    69fe:	e7fc      	b.n	69fa <digitalWrite+0x4a>
    6a00:	0000ba0c 	.word	0x0000ba0c
    6a04:	41004400 	.word	0x41004400

00006a08 <pinPeripheral>:

#include "Arduino.h"
#include "wiring_private.h"

int pinPeripheral( uint32_t ulPin, EPioType ulPeripheral )
{
    6a08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6a0a:	0003      	movs	r3, r0
  // Handle the case the pin isn't usable as PIO
  if ( g_APinDescription[ulPin].ulPinType == PIO_NOT_A_PIN )
    6a0c:	2018      	movs	r0, #24
    6a0e:	4358      	muls	r0, r3
    6a10:	4a2a      	ldr	r2, [pc, #168]	; (6abc <pinPeripheral+0xb4>)
    6a12:	1810      	adds	r0, r2, r0
    6a14:	7a00      	ldrb	r0, [r0, #8]
    6a16:	b240      	sxtb	r0, r0
  {
    return -1 ;
    6a18:	0004      	movs	r4, r0
  if ( g_APinDescription[ulPin].ulPinType == PIO_NOT_A_PIN )
    6a1a:	3001      	adds	r0, #1
    6a1c:	d013      	beq.n	6a46 <pinPeripheral+0x3e>
  }

  switch ( ulPeripheral )
    6a1e:	1c48      	adds	r0, r1, #1
    case PIO_NOT_A_PIN:
      return -1l ;
    break ;
  }

  return 0l ;
    6a20:	2400      	movs	r4, #0
  switch ( ulPeripheral )
    6a22:	280c      	cmp	r0, #12
    6a24:	d80f      	bhi.n	6a46 <pinPeripheral+0x3e>
    6a26:	f000 fcef 	bl	7408 <__gnu_thumb1_case_uqi>
    6a2a:	1c45      	.short	0x1c45
    6a2c:	1c1c1c1c 	.word	0x1c1c1c1c
    6a30:	071c1c1c 	.word	0x071c1c1c
    6a34:	0707      	.short	0x0707
    6a36:	07          	.byte	0x07
    6a37:	00          	.byte	0x00
      if ( ulPeripheral == PIO_INPUT )
    6a38:	2909      	cmp	r1, #9
    6a3a:	d106      	bne.n	6a4a <pinPeripheral+0x42>
        pinMode( ulPin, INPUT ) ;
    6a3c:	2100      	movs	r1, #0
          pinMode( ulPin, INPUT_PULLUP ) ;
    6a3e:	0018      	movs	r0, r3
    6a40:	f7ff ff6a 	bl	6918 <pinMode>
  return 0l ;
    6a44:	2400      	movs	r4, #0
}
    6a46:	0020      	movs	r0, r4
    6a48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if ( ulPeripheral == PIO_INPUT_PULLUP )
    6a4a:	290a      	cmp	r1, #10
    6a4c:	d101      	bne.n	6a52 <pinPeripheral+0x4a>
          pinMode( ulPin, INPUT_PULLUP ) ;
    6a4e:	3908      	subs	r1, #8
    6a50:	e7f5      	b.n	6a3e <pinPeripheral+0x36>
  return 0l ;
    6a52:	2400      	movs	r4, #0
          if ( ulPeripheral == PIO_OUTPUT )
    6a54:	290b      	cmp	r1, #11
    6a56:	d1f6      	bne.n	6a46 <pinPeripheral+0x3e>
            pinMode( ulPin, OUTPUT ) ;
    6a58:	390a      	subs	r1, #10
    6a5a:	0018      	movs	r0, r3
    6a5c:	f7ff ff5c 	bl	6918 <pinMode>
    6a60:	e7f1      	b.n	6a46 <pinPeripheral+0x3e>
      if ( g_APinDescription[ulPin].ulPin & 1 ) // is pin odd?
    6a62:	2018      	movs	r0, #24
    6a64:	4343      	muls	r3, r0
    6a66:	18d0      	adds	r0, r2, r3
    6a68:	6846      	ldr	r6, [r0, #4]
    6a6a:	2501      	movs	r5, #1
    6a6c:	0034      	movs	r4, r6
    6a6e:	56d2      	ldrsb	r2, [r2, r3]
        temp = (PORT->Group[g_APinDescription[ulPin].ulPort].PMUX[g_APinDescription[ulPin].ulPin >> 1].reg) & PORT_PMUX_PMUXE( 0xF ) ;
    6a70:	4813      	ldr	r0, [pc, #76]	; (6ac0 <pinPeripheral+0xb8>)
    6a72:	01d2      	lsls	r2, r2, #7
    6a74:	1812      	adds	r2, r2, r0
    6a76:	0873      	lsrs	r3, r6, #1
    6a78:	18d3      	adds	r3, r2, r3
    6a7a:	3330      	adds	r3, #48	; 0x30
      if ( g_APinDescription[ulPin].ulPin & 1 ) // is pin odd?
    6a7c:	402c      	ands	r4, r5
        temp = (PORT->Group[g_APinDescription[ulPin].ulPort].PMUX[g_APinDescription[ulPin].ulPin >> 1].reg) & PORT_PMUX_PMUXE( 0xF ) ;
    6a7e:	7818      	ldrb	r0, [r3, #0]
      if ( g_APinDescription[ulPin].ulPin & 1 ) // is pin odd?
    6a80:	2c00      	cmp	r4, #0
    6a82:	d00b      	beq.n	6a9c <pinPeripheral+0x94>
        PORT->Group[g_APinDescription[ulPin].ulPort].PMUX[g_APinDescription[ulPin].ulPin >> 1].reg = temp|PORT_PMUX_PMUXO( ulPeripheral ) ;
    6a84:	240f      	movs	r4, #15
    6a86:	0109      	lsls	r1, r1, #4
    6a88:	4020      	ands	r0, r4
    6a8a:	4301      	orrs	r1, r0
    6a8c:	b2c9      	uxtb	r1, r1
        PORT->Group[g_APinDescription[ulPin].ulPort].PINCFG[g_APinDescription[ulPin].ulPin].reg |= PORT_PINCFG_PMUXEN ;
    6a8e:	1992      	adds	r2, r2, r6
        PORT->Group[g_APinDescription[ulPin].ulPort].PMUX[g_APinDescription[ulPin].ulPin >> 1].reg = temp|PORT_PMUX_PMUXO( ulPeripheral ) ;
    6a90:	7019      	strb	r1, [r3, #0]
        PORT->Group[g_APinDescription[ulPin].ulPort].PINCFG[g_APinDescription[ulPin].ulPin].reg |= PORT_PINCFG_PMUXEN ;
    6a92:	3240      	adds	r2, #64	; 0x40
    6a94:	7813      	ldrb	r3, [r2, #0]
    6a96:	431d      	orrs	r5, r3
    6a98:	7015      	strb	r5, [r2, #0]
    6a9a:	e7d3      	b.n	6a44 <pinPeripheral+0x3c>
        PORT->Group[g_APinDescription[ulPin].ulPort].PMUX[g_APinDescription[ulPin].ulPin >> 1].reg = temp|PORT_PMUX_PMUXE( ulPeripheral ) ;
    6a9c:	270f      	movs	r7, #15
    6a9e:	43b8      	bics	r0, r7
    6aa0:	4301      	orrs	r1, r0
        PORT->Group[g_APinDescription[ulPin].ulPort].PINCFG[g_APinDescription[ulPin].ulPin].reg |= PORT_PINCFG_PMUXEN ; // Enable port mux
    6aa2:	1992      	adds	r2, r2, r6
        PORT->Group[g_APinDescription[ulPin].ulPort].PMUX[g_APinDescription[ulPin].ulPin >> 1].reg = temp|PORT_PMUX_PMUXE( ulPeripheral ) ;
    6aa4:	b2c9      	uxtb	r1, r1
    6aa6:	7019      	strb	r1, [r3, #0]
        PORT->Group[g_APinDescription[ulPin].ulPort].PINCFG[g_APinDescription[ulPin].ulPin].reg |= PORT_PINCFG_PMUXEN ; // Enable port mux
    6aa8:	0013      	movs	r3, r2
    6aaa:	3340      	adds	r3, #64	; 0x40
    6aac:	781a      	ldrb	r2, [r3, #0]
    6aae:	4315      	orrs	r5, r2
    6ab0:	701d      	strb	r5, [r3, #0]
    6ab2:	e7c8      	b.n	6a46 <pinPeripheral+0x3e>
      return -1l ;
    6ab4:	2401      	movs	r4, #1
    6ab6:	4264      	negs	r4, r4
    6ab8:	e7c5      	b.n	6a46 <pinPeripheral+0x3e>
    6aba:	46c0      	nop			; (mov r8, r8)
    6abc:	0000ba0c 	.word	0x0000ba0c
    6ac0:	41004400 	.word	0x41004400

00006ac4 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	*this = dtostrf(value, (decimalPlaces + 2), decimalPlaces, buf);
}

String::~String()
    6ac4:	b510      	push	{r4, lr}
    6ac6:	0004      	movs	r4, r0
{
	free(buffer);
    6ac8:	6800      	ldr	r0, [r0, #0]
    6aca:	f002 fc1f 	bl	930c <free>
}
    6ace:	0020      	movs	r0, r4
    6ad0:	bd10      	pop	{r4, pc}

00006ad2 <_ZN6String10invalidateEv>:
	capacity = 0;
	len = 0;
}

void String::invalidate(void)
{
    6ad2:	b510      	push	{r4, lr}
    6ad4:	0004      	movs	r4, r0
	if (buffer) free(buffer);
    6ad6:	6800      	ldr	r0, [r0, #0]
    6ad8:	2800      	cmp	r0, #0
    6ada:	d001      	beq.n	6ae0 <_ZN6String10invalidateEv+0xe>
    6adc:	f002 fc16 	bl	930c <free>
	buffer = NULL;
    6ae0:	2300      	movs	r3, #0
    6ae2:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
    6ae4:	60a3      	str	r3, [r4, #8]
    6ae6:	6063      	str	r3, [r4, #4]
}
    6ae8:	bd10      	pop	{r4, pc}

00006aea <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
    6aea:	b570      	push	{r4, r5, r6, lr}
    6aec:	0004      	movs	r4, r0
    6aee:	000d      	movs	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
    6af0:	6800      	ldr	r0, [r0, #0]
    6af2:	3101      	adds	r1, #1
    6af4:	f003 f970 	bl	9dd8 <realloc>
    6af8:	1e03      	subs	r3, r0, #0
	if (newbuffer) {
    6afa:	d001      	beq.n	6b00 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
		return 1;
    6afc:	2001      	movs	r0, #1
		capacity = maxStrLen;
    6afe:	c428      	stmia	r4!, {r3, r5}
	}
	return 0;
}
    6b00:	bd70      	pop	{r4, r5, r6, pc}

00006b02 <_ZN6String7reserveEj>:
	if (buffer && capacity >= size) return 1;
    6b02:	6803      	ldr	r3, [r0, #0]
{
    6b04:	b510      	push	{r4, lr}
    6b06:	0004      	movs	r4, r0
	if (buffer && capacity >= size) return 1;
    6b08:	2b00      	cmp	r3, #0
    6b0a:	d004      	beq.n	6b16 <_ZN6String7reserveEj+0x14>
    6b0c:	6843      	ldr	r3, [r0, #4]
    6b0e:	428b      	cmp	r3, r1
    6b10:	d301      	bcc.n	6b16 <_ZN6String7reserveEj+0x14>
		if (len == 0) buffer[0] = 0;
    6b12:	2001      	movs	r0, #1
}
    6b14:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
    6b16:	0020      	movs	r0, r4
    6b18:	f7ff ffe7 	bl	6aea <_ZN6String12changeBufferEj>
    6b1c:	2800      	cmp	r0, #0
    6b1e:	d0f9      	beq.n	6b14 <_ZN6String7reserveEj+0x12>
		if (len == 0) buffer[0] = 0;
    6b20:	68a3      	ldr	r3, [r4, #8]
    6b22:	2b00      	cmp	r3, #0
    6b24:	d1f5      	bne.n	6b12 <_ZN6String7reserveEj+0x10>
    6b26:	6822      	ldr	r2, [r4, #0]
    6b28:	7013      	strb	r3, [r2, #0]
    6b2a:	e7f2      	b.n	6b12 <_ZN6String7reserveEj+0x10>

00006b2c <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
    6b2c:	b570      	push	{r4, r5, r6, lr}
    6b2e:	000e      	movs	r6, r1
	if (!reserve(length)) {
    6b30:	0011      	movs	r1, r2
{
    6b32:	0004      	movs	r4, r0
    6b34:	0015      	movs	r5, r2
	if (!reserve(length)) {
    6b36:	f7ff ffe4 	bl	6b02 <_ZN6String7reserveEj>
    6b3a:	2800      	cmp	r0, #0
    6b3c:	d104      	bne.n	6b48 <_ZN6String4copyEPKcj+0x1c>
		invalidate();
    6b3e:	0020      	movs	r0, r4
    6b40:	f7ff ffc7 	bl	6ad2 <_ZN6String10invalidateEv>
		return *this;
	}
	len = length;
	strcpy(buffer, cstr);
	return *this;
}
    6b44:	0020      	movs	r0, r4
    6b46:	bd70      	pop	{r4, r5, r6, pc}
	len = length;
    6b48:	60a5      	str	r5, [r4, #8]
	strcpy(buffer, cstr);
    6b4a:	0031      	movs	r1, r6
    6b4c:	6820      	ldr	r0, [r4, #0]
    6b4e:	f003 f981 	bl	9e54 <strcpy>
	return *this;
    6b52:	e7f7      	b.n	6b44 <_ZN6String4copyEPKcj+0x18>

00006b54 <_ZN6StringC1EPKc>:
	buffer = NULL;
    6b54:	2300      	movs	r3, #0
String::String(const char *cstr)
    6b56:	b570      	push	{r4, r5, r6, lr}
    6b58:	0004      	movs	r4, r0
    6b5a:	000d      	movs	r5, r1
	buffer = NULL;
    6b5c:	6003      	str	r3, [r0, #0]
	capacity = 0;
    6b5e:	6043      	str	r3, [r0, #4]
	len = 0;
    6b60:	6083      	str	r3, [r0, #8]
	if (cstr) copy(cstr, strlen(cstr));
    6b62:	4299      	cmp	r1, r3
    6b64:	d007      	beq.n	6b76 <_ZN6StringC1EPKc+0x22>
    6b66:	0008      	movs	r0, r1
    6b68:	f003 f97c 	bl	9e64 <strlen>
    6b6c:	0029      	movs	r1, r5
    6b6e:	0002      	movs	r2, r0
    6b70:	0020      	movs	r0, r4
    6b72:	f7ff ffdb 	bl	6b2c <_ZN6String4copyEPKcj>
}
    6b76:	0020      	movs	r0, r4
    6b78:	bd70      	pop	{r4, r5, r6, pc}

00006b7a <_Z11initVariantv>:
  PERIPH_WIRE.disableWIRE();
}

#endif

void initVariant() {
    6b7a:	b510      	push	{r4, lr}
  }
  disable_battery_fet(!batteryPresent);
#endif

  // NINA - SPI boot
  pinMode(NINA_GPIO0, OUTPUT);
    6b7c:	2101      	movs	r1, #1
    6b7e:	201e      	movs	r0, #30
    6b80:	f7ff feca 	bl	6918 <pinMode>
  digitalWrite(NINA_GPIO0, HIGH);
    6b84:	2101      	movs	r1, #1
    6b86:	201e      	movs	r0, #30
    6b88:	f7ff ff12 	bl	69b0 <digitalWrite>

  // disable NINA
  pinMode(NINA_RESETN, OUTPUT);
    6b8c:	2101      	movs	r1, #1
    6b8e:	201f      	movs	r0, #31
    6b90:	f7ff fec2 	bl	6918 <pinMode>
  digitalWrite(NINA_RESETN, HIGH);
    6b94:	2101      	movs	r1, #1
    6b96:	201f      	movs	r0, #31
    6b98:	f7ff ff0a 	bl	69b0 <digitalWrite>
}
    6b9c:	bd10      	pop	{r4, pc}
	...

00006ba0 <SERCOM5_Handler>:

// Serial1
Uart Serial1(&sercom5, PIN_SERIAL1_RX, PIN_SERIAL1_TX, PAD_SERIAL1_RX, PAD_SERIAL1_TX);

void SERCOM5_Handler()
{
    6ba0:	b510      	push	{r4, lr}
  Serial1.IrqHandler();
    6ba2:	4802      	ldr	r0, [pc, #8]	; (6bac <SERCOM5_Handler+0xc>)
    6ba4:	f000 faeb 	bl	717e <_ZN4Uart10IrqHandlerEv>
}
    6ba8:	bd10      	pop	{r4, pc}
    6baa:	46c0      	nop			; (mov r8, r8)
    6bac:	20000c04 	.word	0x20000c04

00006bb0 <SERCOM4_Handler>:

// Serial2
Uart Serial2(&sercom4, PIN_SERIAL2_RX, PIN_SERIAL2_TX, PAD_SERIAL2_RX, PAD_SERIAL2_TX, PIN_SERIAL2_RTS, PIN_SERIAL2_CTS);

void SERCOM4_Handler()
{
    6bb0:	b510      	push	{r4, lr}
  Serial2.IrqHandler();
    6bb2:	4802      	ldr	r0, [pc, #8]	; (6bbc <SERCOM4_Handler+0xc>)
    6bb4:	f000 fae3 	bl	717e <_ZN4Uart10IrqHandlerEv>
}
    6bb8:	bd10      	pop	{r4, pc}
    6bba:	46c0      	nop			; (mov r8, r8)
    6bbc:	20000e40 	.word	0x20000e40

00006bc0 <_GLOBAL__sub_I_g_APinDescription>:
    6bc0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
SERCOM sercom0(SERCOM0);
    6bc2:	4919      	ldr	r1, [pc, #100]	; (6c28 <_GLOBAL__sub_I_g_APinDescription+0x68>)
    6bc4:	4819      	ldr	r0, [pc, #100]	; (6c2c <_GLOBAL__sub_I_g_APinDescription+0x6c>)
    6bc6:	f000 f84b 	bl	6c60 <_ZN6SERCOMC1EP6Sercom>
SERCOM sercom1(SERCOM1);
    6bca:	4919      	ldr	r1, [pc, #100]	; (6c30 <_GLOBAL__sub_I_g_APinDescription+0x70>)
    6bcc:	4819      	ldr	r0, [pc, #100]	; (6c34 <_GLOBAL__sub_I_g_APinDescription+0x74>)
    6bce:	f000 f847 	bl	6c60 <_ZN6SERCOMC1EP6Sercom>
SERCOM sercom2(SERCOM2);
    6bd2:	4919      	ldr	r1, [pc, #100]	; (6c38 <_GLOBAL__sub_I_g_APinDescription+0x78>)
    6bd4:	4819      	ldr	r0, [pc, #100]	; (6c3c <_GLOBAL__sub_I_g_APinDescription+0x7c>)
    6bd6:	f000 f843 	bl	6c60 <_ZN6SERCOMC1EP6Sercom>
SERCOM sercom3(SERCOM3);
    6bda:	4919      	ldr	r1, [pc, #100]	; (6c40 <_GLOBAL__sub_I_g_APinDescription+0x80>)
    6bdc:	4819      	ldr	r0, [pc, #100]	; (6c44 <_GLOBAL__sub_I_g_APinDescription+0x84>)
    6bde:	f000 f83f 	bl	6c60 <_ZN6SERCOMC1EP6Sercom>
SERCOM sercom4(SERCOM4);
    6be2:	4c19      	ldr	r4, [pc, #100]	; (6c48 <_GLOBAL__sub_I_g_APinDescription+0x88>)
    6be4:	4919      	ldr	r1, [pc, #100]	; (6c4c <_GLOBAL__sub_I_g_APinDescription+0x8c>)
    6be6:	0020      	movs	r0, r4
    6be8:	f000 f83a 	bl	6c60 <_ZN6SERCOMC1EP6Sercom>
SERCOM sercom5(SERCOM5);
    6bec:	4e18      	ldr	r6, [pc, #96]	; (6c50 <_GLOBAL__sub_I_g_APinDescription+0x90>)
    6bee:	4919      	ldr	r1, [pc, #100]	; (6c54 <_GLOBAL__sub_I_g_APinDescription+0x94>)
    6bf0:	0030      	movs	r0, r6
    6bf2:	f000 f835 	bl	6c60 <_ZN6SERCOMC1EP6Sercom>
Uart Serial1(&sercom5, PIN_SERIAL1_RX, PIN_SERIAL1_TX, PAD_SERIAL1_RX, PAD_SERIAL1_TX);
    6bf6:	2501      	movs	r5, #1
    6bf8:	2303      	movs	r3, #3
    6bfa:	0031      	movs	r1, r6
    6bfc:	9501      	str	r5, [sp, #4]
    6bfe:	9300      	str	r3, [sp, #0]
    6c00:	220d      	movs	r2, #13
    6c02:	330b      	adds	r3, #11
    6c04:	4814      	ldr	r0, [pc, #80]	; (6c58 <_GLOBAL__sub_I_g_APinDescription+0x98>)
    6c06:	f000 fa4f 	bl	70a8 <_ZN4UartC1EP6SERCOMhh11SercomRXPad15SercomUartTXPad>
Uart Serial2(&sercom4, PIN_SERIAL2_RX, PIN_SERIAL2_TX, PAD_SERIAL2_RX, PAD_SERIAL2_TX, PIN_SERIAL2_RTS, PIN_SERIAL2_CTS);
    6c0a:	231d      	movs	r3, #29
    6c0c:	9303      	str	r3, [sp, #12]
    6c0e:	3b01      	subs	r3, #1
    6c10:	9302      	str	r3, [sp, #8]
    6c12:	3b1a      	subs	r3, #26
    6c14:	9301      	str	r3, [sp, #4]
    6c16:	9500      	str	r5, [sp, #0]
    6c18:	3318      	adds	r3, #24
    6c1a:	221b      	movs	r2, #27
    6c1c:	0021      	movs	r1, r4
    6c1e:	480f      	ldr	r0, [pc, #60]	; (6c5c <_GLOBAL__sub_I_g_APinDescription+0x9c>)
    6c20:	f000 f9fe 	bl	7020 <_ZN4UartC1EP6SERCOMhh11SercomRXPad15SercomUartTXPadhh>
}
    6c24:	bd7f      	pop	{r0, r1, r2, r3, r4, r5, r6, pc}
    6c26:	46c0      	nop			; (mov r8, r8)
    6c28:	42000800 	.word	0x42000800
    6c2c:	2000107c 	.word	0x2000107c
    6c30:	42000c00 	.word	0x42000c00
    6c34:	20001080 	.word	0x20001080
    6c38:	42001000 	.word	0x42001000
    6c3c:	20001084 	.word	0x20001084
    6c40:	42001400 	.word	0x42001400
    6c44:	20001088 	.word	0x20001088
    6c48:	2000108c 	.word	0x2000108c
    6c4c:	42001800 	.word	0x42001800
    6c50:	20001090 	.word	0x20001090
    6c54:	42001c00 	.word	0x42001c00
    6c58:	20000c04 	.word	0x20000c04
    6c5c:	20000e40 	.word	0x20000e40

00006c60 <_ZN6SERCOMC1EP6Sercom>:
#define WIRE_RISE_TIME_NANOSECONDS 125
#endif

SERCOM::SERCOM(Sercom* s)
{
  sercom = s;
    6c60:	6001      	str	r1, [r0, #0]
}
    6c62:	4770      	bx	lr

00006c64 <_ZN6SERCOM9initFrameE18SercomUartCharSize15SercomDataOrder16SercomParityMode19SercomNumberStopBit>:
    sercom->USART.BAUD.FRAC.FP   = (baudTimes8 % 8);
    sercom->USART.BAUD.FRAC.BAUD = (baudTimes8 / 8);
  }
}
void SERCOM::initFrame(SercomUartCharSize charSize, SercomDataOrder dataOrder, SercomParityMode parityMode, SercomNumberStopBit nbStopBits)
{
    6c64:	b5f0      	push	{r4, r5, r6, r7, lr}
    6c66:	ac05      	add	r4, sp, #20
    6c68:	7825      	ldrb	r5, [r4, #0]
  //Setting the CTRLA register
  sercom->USART.CTRLA.reg |=	SERCOM_USART_CTRLA_FORM( (parityMode == SERCOM_NO_PARITY ? 0 : 1) ) |
    6c6a:	6804      	ldr	r4, [r0, #0]
    6c6c:	1e98      	subs	r0, r3, #2
    6c6e:	1e47      	subs	r7, r0, #1
    6c70:	41b8      	sbcs	r0, r7
                dataOrder << SERCOM_USART_CTRLA_DORD_Pos;
    6c72:	6826      	ldr	r6, [r4, #0]
    6c74:	0792      	lsls	r2, r2, #30
  sercom->USART.CTRLA.reg |=	SERCOM_USART_CTRLA_FORM( (parityMode == SERCOM_NO_PARITY ? 0 : 1) ) |
    6c76:	0600      	lsls	r0, r0, #24
                dataOrder << SERCOM_USART_CTRLA_DORD_Pos;
    6c78:	4332      	orrs	r2, r6
    6c7a:	4302      	orrs	r2, r0

  //Setting the CTRLB register
  sercom->USART.CTRLB.reg |=	SERCOM_USART_CTRLB_CHSIZE(charSize) |
    6c7c:	2007      	movs	r0, #7
  sercom->USART.CTRLA.reg |=	SERCOM_USART_CTRLA_FORM( (parityMode == SERCOM_NO_PARITY ? 0 : 1) ) |
    6c7e:	6022      	str	r2, [r4, #0]
  sercom->USART.CTRLB.reg |=	SERCOM_USART_CTRLB_CHSIZE(charSize) |
    6c80:	4001      	ands	r1, r0
                nbStopBits << SERCOM_USART_CTRLB_SBMODE_Pos |
    6c82:	01ad      	lsls	r5, r5, #6
                (parityMode == SERCOM_NO_PARITY ? 0 : parityMode) << SERCOM_USART_CTRLB_PMODE_Pos; //If no parity use default value
    6c84:	6862      	ldr	r2, [r4, #4]
    6c86:	4329      	orrs	r1, r5
    6c88:	2000      	movs	r0, #0
    6c8a:	2b02      	cmp	r3, #2
    6c8c:	d000      	beq.n	6c90 <_ZN6SERCOM9initFrameE18SercomUartCharSize15SercomDataOrder16SercomParityMode19SercomNumberStopBit+0x2c>
    6c8e:	0358      	lsls	r0, r3, #13
    6c90:	4311      	orrs	r1, r2
    6c92:	4301      	orrs	r1, r0
  sercom->USART.CTRLB.reg |=	SERCOM_USART_CTRLB_CHSIZE(charSize) |
    6c94:	6061      	str	r1, [r4, #4]
}
    6c96:	bdf0      	pop	{r4, r5, r6, r7, pc}

00006c98 <_ZN6SERCOM8initPadsE15SercomUartTXPad11SercomRXPad>:

void SERCOM::initPads(SercomUartTXPad txPad, SercomRXPad rxPad)
{
    6c98:	b510      	push	{r4, lr}
  //Setting the CTRLA register
  sercom->USART.CTRLA.reg |=	SERCOM_USART_CTRLA_TXPO(txPad) |
                SERCOM_USART_CTRLA_RXPO(rxPad);
    6c9a:	24c0      	movs	r4, #192	; 0xc0
  sercom->USART.CTRLA.reg |=	SERCOM_USART_CTRLA_TXPO(txPad) |
    6c9c:	6803      	ldr	r3, [r0, #0]
                SERCOM_USART_CTRLA_RXPO(rxPad);
    6c9e:	03a4      	lsls	r4, r4, #14
    6ca0:	6818      	ldr	r0, [r3, #0]
    6ca2:	0512      	lsls	r2, r2, #20
    6ca4:	4022      	ands	r2, r4
    6ca6:	4302      	orrs	r2, r0
  sercom->USART.CTRLA.reg |=	SERCOM_USART_CTRLA_TXPO(txPad) |
    6ca8:	20c0      	movs	r0, #192	; 0xc0
    6caa:	0409      	lsls	r1, r1, #16
    6cac:	0280      	lsls	r0, r0, #10
    6cae:	4001      	ands	r1, r0
                SERCOM_USART_CTRLA_RXPO(rxPad);
    6cb0:	4311      	orrs	r1, r2
  sercom->USART.CTRLA.reg |=	SERCOM_USART_CTRLA_TXPO(txPad) |
    6cb2:	6019      	str	r1, [r3, #0]

  // Enable Transceiver and Receiver
  sercom->USART.CTRLB.reg |= SERCOM_USART_CTRLB_TXEN | SERCOM_USART_CTRLB_RXEN ;
    6cb4:	685a      	ldr	r2, [r3, #4]
    6cb6:	4310      	orrs	r0, r2
    6cb8:	6058      	str	r0, [r3, #4]
}
    6cba:	bd10      	pop	{r4, pc}

00006cbc <_ZN6SERCOM9resetUARTEv>:

void SERCOM::resetUART()
{
  // Start the Software Reset
  sercom->USART.CTRLA.bit.SWRST = 1 ;
    6cbc:	2201      	movs	r2, #1
    6cbe:	6803      	ldr	r3, [r0, #0]
    6cc0:	6819      	ldr	r1, [r3, #0]
    6cc2:	430a      	orrs	r2, r1
    6cc4:	601a      	str	r2, [r3, #0]

  while ( sercom->USART.CTRLA.bit.SWRST || sercom->USART.SYNCBUSY.bit.SWRST )
    6cc6:	681a      	ldr	r2, [r3, #0]
    6cc8:	07d2      	lsls	r2, r2, #31
    6cca:	d4fc      	bmi.n	6cc6 <_ZN6SERCOM9resetUARTEv+0xa>
    6ccc:	69da      	ldr	r2, [r3, #28]
    6cce:	07d2      	lsls	r2, r2, #31
    6cd0:	d4f9      	bmi.n	6cc6 <_ZN6SERCOM9resetUARTEv+0xa>
  {
    // Wait for both bits Software Reset from CTRLA and SYNCBUSY coming back to 0
  }
}
    6cd2:	4770      	bx	lr

00006cd4 <_ZN6SERCOM10enableUARTEv>:

void SERCOM::enableUART()
{
  //Setting  the enable bit to 1
  sercom->USART.CTRLA.bit.ENABLE = 0x1u;
    6cd4:	2202      	movs	r2, #2
    6cd6:	6803      	ldr	r3, [r0, #0]
    6cd8:	6819      	ldr	r1, [r3, #0]
    6cda:	430a      	orrs	r2, r1
    6cdc:	601a      	str	r2, [r3, #0]

  //Wait for then enable bit from SYNCBUSY is equal to 0;
  while(sercom->USART.SYNCBUSY.bit.ENABLE);
    6cde:	69da      	ldr	r2, [r3, #28]
    6ce0:	0792      	lsls	r2, r2, #30
    6ce2:	d4fc      	bmi.n	6cde <_ZN6SERCOM10enableUARTEv+0xa>
}
    6ce4:	4770      	bx	lr

00006ce6 <_ZN6SERCOM9flushUARTEv>:
}

bool SERCOM::isDataRegisterEmptyUART()
{
  //DRE : Data Register Empty
  return sercom->USART.INTFLAG.bit.DRE;
    6ce6:	6803      	ldr	r3, [r0, #0]
    6ce8:	7e1a      	ldrb	r2, [r3, #24]
  if(isDataRegisterEmptyUART())
    6cea:	07d2      	lsls	r2, r2, #31
    6cec:	d402      	bmi.n	6cf4 <_ZN6SERCOM9flushUARTEv+0xe>
  while(!sercom->USART.INTFLAG.bit.TXC);
    6cee:	7e1a      	ldrb	r2, [r3, #24]
    6cf0:	0792      	lsls	r2, r2, #30
    6cf2:	d5fc      	bpl.n	6cee <_ZN6SERCOM9flushUARTEv+0x8>
}
    6cf4:	4770      	bx	lr

00006cf6 <_ZN6SERCOM15clearStatusUARTEv>:
  sercom->USART.STATUS.reg = SERCOM_USART_STATUS_RESETVALUE;
    6cf6:	2200      	movs	r2, #0
    6cf8:	6803      	ldr	r3, [r0, #0]
    6cfa:	835a      	strh	r2, [r3, #26]
}
    6cfc:	4770      	bx	lr

00006cfe <_ZN6SERCOM17availableDataUARTEv>:
  return sercom->USART.INTFLAG.bit.RXC;
    6cfe:	6803      	ldr	r3, [r0, #0]
    6d00:	7e18      	ldrb	r0, [r3, #24]
    6d02:	0740      	lsls	r0, r0, #29
    6d04:	0fc0      	lsrs	r0, r0, #31
}
    6d06:	4770      	bx	lr

00006d08 <_ZN6SERCOM11isUARTErrorEv>:
  return sercom->USART.INTFLAG.bit.ERROR;
    6d08:	6803      	ldr	r3, [r0, #0]
    6d0a:	7e18      	ldrb	r0, [r3, #24]
    6d0c:	09c0      	lsrs	r0, r0, #7
}
    6d0e:	4770      	bx	lr

00006d10 <_ZN6SERCOM20acknowledgeUARTErrorEv>:
  sercom->USART.INTFLAG.bit.ERROR = 1;
    6d10:	2380      	movs	r3, #128	; 0x80
    6d12:	6802      	ldr	r2, [r0, #0]
    6d14:	425b      	negs	r3, r3
    6d16:	7e11      	ldrb	r1, [r2, #24]
    6d18:	430b      	orrs	r3, r1
    6d1a:	7613      	strb	r3, [r2, #24]
}
    6d1c:	4770      	bx	lr

00006d1e <_ZN6SERCOM16isFrameErrorUARTEv>:
  return sercom->USART.STATUS.bit.FERR;
    6d1e:	6803      	ldr	r3, [r0, #0]
    6d20:	8b58      	ldrh	r0, [r3, #26]
    6d22:	0780      	lsls	r0, r0, #30
    6d24:	0fc0      	lsrs	r0, r0, #31
}
    6d26:	4770      	bx	lr

00006d28 <_ZN6SERCOM19clearFrameErrorUARTEv>:
  sercom->USART.STATUS.bit.FERR = 1;
    6d28:	2302      	movs	r3, #2
    6d2a:	6802      	ldr	r2, [r0, #0]
    6d2c:	8b51      	ldrh	r1, [r2, #26]
    6d2e:	430b      	orrs	r3, r1
    6d30:	8353      	strh	r3, [r2, #26]
}
    6d32:	4770      	bx	lr

00006d34 <_ZN6SERCOM23isDataRegisterEmptyUARTEv>:
  return sercom->USART.INTFLAG.bit.DRE;
    6d34:	6803      	ldr	r3, [r0, #0]
    6d36:	7e18      	ldrb	r0, [r3, #24]
    6d38:	07c0      	lsls	r0, r0, #31
    6d3a:	0fc0      	lsrs	r0, r0, #31
}
    6d3c:	4770      	bx	lr

00006d3e <_ZN6SERCOM12readDataUARTEv>:

uint8_t SERCOM::readDataUART()
{
  return sercom->USART.DATA.bit.DATA;
    6d3e:	6803      	ldr	r3, [r0, #0]
    6d40:	8d18      	ldrh	r0, [r3, #40]	; 0x28
    6d42:	b2c0      	uxtb	r0, r0
}
    6d44:	4770      	bx	lr

00006d46 <_ZN6SERCOM13writeDataUARTEh>:
  return sercom->USART.INTFLAG.bit.DRE;
    6d46:	6803      	ldr	r3, [r0, #0]
    6d48:	7e1a      	ldrb	r2, [r3, #24]

int SERCOM::writeDataUART(uint8_t data)
{
  // Wait for data register to be empty
  while(!isDataRegisterEmptyUART());
    6d4a:	07d2      	lsls	r2, r2, #31
    6d4c:	d5fc      	bpl.n	6d48 <_ZN6SERCOM13writeDataUARTEh+0x2>

  //Put data into DATA register
  sercom->USART.DATA.reg = (uint16_t)data;
    6d4e:	b289      	uxth	r1, r1
  return 1;
}
    6d50:	2001      	movs	r0, #1
  sercom->USART.DATA.reg = (uint16_t)data;
    6d52:	8519      	strh	r1, [r3, #40]	; 0x28
}
    6d54:	4770      	bx	lr

00006d56 <_ZN6SERCOM36enableDataRegisterEmptyInterruptUARTEv>:

void SERCOM::enableDataRegisterEmptyInterruptUART()
{
  sercom->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
    6d56:	2201      	movs	r2, #1
    6d58:	6803      	ldr	r3, [r0, #0]
    6d5a:	759a      	strb	r2, [r3, #22]
}
    6d5c:	4770      	bx	lr

00006d5e <_ZN6SERCOM37disableDataRegisterEmptyInterruptUARTEv>:

void SERCOM::disableDataRegisterEmptyInterruptUART()
{
  sercom->USART.INTENCLR.reg = SERCOM_USART_INTENCLR_DRE;
    6d5e:	2201      	movs	r2, #1
    6d60:	6803      	ldr	r3, [r0, #0]
    6d62:	751a      	strb	r2, [r3, #20]
}
    6d64:	4770      	bx	lr
	...

00006d68 <_ZN6SERCOM13initClockNVICEv>:
void SERCOM::initClockNVIC( void )
{
  uint8_t clockId = 0;
  IRQn_Type IdNvic=PendSV_IRQn ; // Dummy init to intercept potential error later

  if(sercom == SERCOM0)
    6d68:	6803      	ldr	r3, [r0, #0]
    6d6a:	4a21      	ldr	r2, [pc, #132]	; (6df0 <_ZN6SERCOM13initClockNVICEv+0x88>)
{
    6d6c:	b530      	push	{r4, r5, lr}
  if(sercom == SERCOM0)
    6d6e:	4293      	cmp	r3, r2
    6d70:	d011      	beq.n	6d96 <_ZN6SERCOM13initClockNVICEv+0x2e>
  {
    clockId = GCM_SERCOM0_CORE;
    IdNvic = SERCOM0_IRQn;
  }
  else if(sercom == SERCOM1)
    6d72:	4a20      	ldr	r2, [pc, #128]	; (6df4 <_ZN6SERCOM13initClockNVICEv+0x8c>)
    6d74:	4293      	cmp	r3, r2
    6d76:	d02f      	beq.n	6dd8 <_ZN6SERCOM13initClockNVICEv+0x70>
  {
    clockId = GCM_SERCOM1_CORE;
    IdNvic = SERCOM1_IRQn;
  }
  else if(sercom == SERCOM2)
    6d78:	4a1f      	ldr	r2, [pc, #124]	; (6df8 <_ZN6SERCOM13initClockNVICEv+0x90>)
    6d7a:	4293      	cmp	r3, r2
    6d7c:	d02f      	beq.n	6dde <_ZN6SERCOM13initClockNVICEv+0x76>
  {
    clockId = GCM_SERCOM2_CORE;
    IdNvic = SERCOM2_IRQn;
  }
  else if(sercom == SERCOM3)
    6d7e:	4a1f      	ldr	r2, [pc, #124]	; (6dfc <_ZN6SERCOM13initClockNVICEv+0x94>)
    6d80:	4293      	cmp	r3, r2
    6d82:	d02f      	beq.n	6de4 <_ZN6SERCOM13initClockNVICEv+0x7c>
  {
    clockId = GCM_SERCOM3_CORE;
    IdNvic = SERCOM3_IRQn;
  }
  #if defined(SERCOM4)
  else if(sercom == SERCOM4)
    6d84:	4a1e      	ldr	r2, [pc, #120]	; (6e00 <_ZN6SERCOM13initClockNVICEv+0x98>)
    6d86:	4293      	cmp	r3, r2
    6d88:	d02f      	beq.n	6dea <_ZN6SERCOM13initClockNVICEv+0x82>
    clockId = GCM_SERCOM4_CORE;
    IdNvic = SERCOM4_IRQn;
  }
  #endif // SERCOM4
  #if defined(SERCOM5)
  else if(sercom == SERCOM5)
    6d8a:	4a1e      	ldr	r2, [pc, #120]	; (6e04 <_ZN6SERCOM13initClockNVICEv+0x9c>)
    6d8c:	4293      	cmp	r3, r2
    6d8e:	d122      	bne.n	6dd6 <_ZN6SERCOM13initClockNVICEv+0x6e>
  {
    clockId = GCM_SERCOM5_CORE;
    IdNvic = SERCOM5_IRQn;
    6d90:	230e      	movs	r3, #14
    clockId = GCM_SERCOM5_CORE;
    6d92:	2219      	movs	r2, #25
    6d94:	e001      	b.n	6d9a <_ZN6SERCOM13initClockNVICEv+0x32>
    IdNvic = SERCOM0_IRQn;
    6d96:	2309      	movs	r3, #9
    clockId = GCM_SERCOM0_CORE;
    6d98:	2214      	movs	r2, #20
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    6d9a:	2101      	movs	r1, #1
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    6d9c:	2503      	movs	r5, #3
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    6d9e:	4099      	lsls	r1, r3
    6da0:	4819      	ldr	r0, [pc, #100]	; (6e08 <_ZN6SERCOM13initClockNVICEv+0xa0>)
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    6da2:	24c0      	movs	r4, #192	; 0xc0
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    6da4:	6001      	str	r1, [r0, #0]
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    6da6:	0899      	lsrs	r1, r3, #2
    6da8:	402b      	ands	r3, r5
    6daa:	40ab      	lsls	r3, r5
    6dac:	35fc      	adds	r5, #252	; 0xfc
    6dae:	409d      	lsls	r5, r3
    6db0:	0089      	lsls	r1, r1, #2
    6db2:	1809      	adds	r1, r1, r0
    6db4:	00a4      	lsls	r4, r4, #2
    6db6:	5908      	ldr	r0, [r1, r4]
    6db8:	43a8      	bics	r0, r5
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
    6dba:	25c0      	movs	r5, #192	; 0xc0
    6dbc:	409d      	lsls	r5, r3
    6dbe:	002b      	movs	r3, r5
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    6dc0:	4303      	orrs	r3, r0
    6dc2:	510b      	str	r3, [r1, r4]
  NVIC_EnableIRQ(IdNvic);
  NVIC_SetPriority (IdNvic, SERCOM_NVIC_PRIORITY);  /* set Priority */

  //Setting clock
  GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID( clockId ) | // Generic Clock 0 (SERCOMx)
                      GCLK_CLKCTRL_GEN_GCLK0 | // Generic Clock Generator 0 is source
    6dc4:	2380      	movs	r3, #128	; 0x80
    6dc6:	01db      	lsls	r3, r3, #7
    6dc8:	431a      	orrs	r2, r3
  GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID( clockId ) | // Generic Clock 0 (SERCOMx)
    6dca:	4b10      	ldr	r3, [pc, #64]	; (6e0c <_ZN6SERCOM13initClockNVICEv+0xa4>)
    6dcc:	805a      	strh	r2, [r3, #2]
                      GCLK_CLKCTRL_CLKEN ;

  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY )
    6dce:	785a      	ldrb	r2, [r3, #1]
    6dd0:	b252      	sxtb	r2, r2
    6dd2:	2a00      	cmp	r2, #0
    6dd4:	dbfb      	blt.n	6dce <_ZN6SERCOM13initClockNVICEv+0x66>
  {
    /* Wait for synchronization */
  }
}
    6dd6:	bd30      	pop	{r4, r5, pc}
    IdNvic = SERCOM1_IRQn;
    6dd8:	230a      	movs	r3, #10
    clockId = GCM_SERCOM1_CORE;
    6dda:	2215      	movs	r2, #21
    6ddc:	e7dd      	b.n	6d9a <_ZN6SERCOM13initClockNVICEv+0x32>
    IdNvic = SERCOM2_IRQn;
    6dde:	230b      	movs	r3, #11
    clockId = GCM_SERCOM2_CORE;
    6de0:	2216      	movs	r2, #22
    6de2:	e7da      	b.n	6d9a <_ZN6SERCOM13initClockNVICEv+0x32>
    IdNvic = SERCOM3_IRQn;
    6de4:	230c      	movs	r3, #12
    clockId = GCM_SERCOM3_CORE;
    6de6:	2217      	movs	r2, #23
    6de8:	e7d7      	b.n	6d9a <_ZN6SERCOM13initClockNVICEv+0x32>
    IdNvic = SERCOM4_IRQn;
    6dea:	230d      	movs	r3, #13
    clockId = GCM_SERCOM4_CORE;
    6dec:	2218      	movs	r2, #24
    6dee:	e7d4      	b.n	6d9a <_ZN6SERCOM13initClockNVICEv+0x32>
    6df0:	42000800 	.word	0x42000800
    6df4:	42000c00 	.word	0x42000c00
    6df8:	42001000 	.word	0x42001000
    6dfc:	42001400 	.word	0x42001400
    6e00:	42001800 	.word	0x42001800
    6e04:	42001c00 	.word	0x42001c00
    6e08:	e000e100 	.word	0xe000e100
    6e0c:	40000c00 	.word	0x40000c00

00006e10 <_ZN6SERCOM8initUARTE14SercomUartMode20SercomUartSampleRatem>:
{
    6e10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6e12:	0004      	movs	r4, r0
    6e14:	0016      	movs	r6, r2
    6e16:	000f      	movs	r7, r1
    6e18:	001d      	movs	r5, r3
  initClockNVIC();
    6e1a:	f7ff ffa5 	bl	6d68 <_ZN6SERCOM13initClockNVICEv>
  resetUART();
    6e1e:	0020      	movs	r0, r4
    6e20:	f7ff ff4c 	bl	6cbc <_ZN6SERCOM9resetUARTEv>
  sercom->USART.CTRLA.reg =	SERCOM_USART_CTRLA_MODE(mode) |
    6e24:	221c      	movs	r2, #28
    6e26:	00bb      	lsls	r3, r7, #2
    6e28:	4013      	ands	r3, r2
                SERCOM_USART_CTRLA_SAMPR(sampleRate);
    6e2a:	0772      	lsls	r2, r6, #29
  sercom->USART.CTRLA.reg =	SERCOM_USART_CTRLA_MODE(mode) |
    6e2c:	6824      	ldr	r4, [r4, #0]
                SERCOM_USART_CTRLA_SAMPR(sampleRate);
    6e2e:	0c12      	lsrs	r2, r2, #16
  sercom->USART.CTRLA.reg =	SERCOM_USART_CTRLA_MODE(mode) |
    6e30:	4313      	orrs	r3, r2
    6e32:	6023      	str	r3, [r4, #0]
  sercom->USART.INTENSET.reg =	SERCOM_USART_INTENSET_RXC |  //Received complete
    6e34:	2384      	movs	r3, #132	; 0x84
    6e36:	75a3      	strb	r3, [r4, #22]
  if ( mode == UART_INT_CLOCK )
    6e38:	2f01      	cmp	r7, #1
    6e3a:	d118      	bne.n	6e6e <_ZN6SERCOM8initUARTE14SercomUartMode20SercomUartSampleRatem+0x5e>
      sampleRateValue = 16;
    6e3c:	2110      	movs	r1, #16
    if (sampleRate == SAMPLE_RATE_x16) {
    6e3e:	2e01      	cmp	r6, #1
    6e40:	d000      	beq.n	6e44 <_ZN6SERCOM8initUARTE14SercomUartMode20SercomUartSampleRatem+0x34>
      sampleRateValue = 8;
    6e42:	3908      	subs	r1, #8
    uint32_t baudTimes8 = (SystemCoreClock * 8) / (sampleRateValue * baudrate);
    6e44:	4b0a      	ldr	r3, [pc, #40]	; (6e70 <_ZN6SERCOM8initUARTE14SercomUartMode20SercomUartSampleRatem+0x60>)
    6e46:	4369      	muls	r1, r5
    6e48:	6818      	ldr	r0, [r3, #0]
    6e4a:	00c0      	lsls	r0, r0, #3
    6e4c:	f000 fae6 	bl	741c <__udivsi3>
    sercom->USART.BAUD.FRAC.FP   = (baudTimes8 % 8);
    6e50:	2207      	movs	r2, #7
    6e52:	89a3      	ldrh	r3, [r4, #12]
    6e54:	4002      	ands	r2, r0
    6e56:	04db      	lsls	r3, r3, #19
    6e58:	0352      	lsls	r2, r2, #13
    6e5a:	0cdb      	lsrs	r3, r3, #19
    6e5c:	4313      	orrs	r3, r2
    6e5e:	81a3      	strh	r3, [r4, #12]
    sercom->USART.BAUD.FRAC.BAUD = (baudTimes8 / 8);
    6e60:	0403      	lsls	r3, r0, #16
    6e62:	89a0      	ldrh	r0, [r4, #12]
    6e64:	0cdb      	lsrs	r3, r3, #19
    6e66:	0b40      	lsrs	r0, r0, #13
    6e68:	0340      	lsls	r0, r0, #13
    6e6a:	4318      	orrs	r0, r3
    6e6c:	81a0      	strh	r0, [r4, #12]
}
    6e6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6e70:	20000084 	.word	0x20000084

00006e74 <_ZN4UartcvbEv>:
    size_t write(const uint8_t data);
    using Print::write; // pull in write(str) and write(buf, size) from Print

    void IrqHandler();

    operator bool() { return true; }
    6e74:	2001      	movs	r0, #1
    6e76:	4770      	bx	lr

00006e78 <_ZN4Uart5beginEm>:
  uc_pinRTS = _pinRTS;
  uc_pinCTS = _pinCTS;
}

void Uart::begin(unsigned long baudrate)
{
    6e78:	b510      	push	{r4, lr}
  begin(baudrate, SERIAL_8N1);
    6e7a:	6803      	ldr	r3, [r0, #0]
    6e7c:	4a01      	ldr	r2, [pc, #4]	; (6e84 <_ZN4Uart5beginEm+0xc>)
    6e7e:	6a1b      	ldr	r3, [r3, #32]
    6e80:	4798      	blx	r3
}
    6e82:	bd10      	pop	{r4, pc}
    6e84:	00000413 	.word	0x00000413

00006e88 <_ZN4Uart4peekEv>:
}

template <int N>
int RingBufferN<N>::peek()
{
  if(_iTail == _iHead)
    6e88:	0003      	movs	r3, r0
    6e8a:	33fc      	adds	r3, #252	; 0xfc
    6e8c:	69d9      	ldr	r1, [r3, #28]
    6e8e:	699a      	ldr	r2, [r3, #24]
    6e90:	4291      	cmp	r1, r2
    6e92:	d003      	beq.n	6e9c <_ZN4Uart4peekEv+0x14>
    return -1;

  return _aucBuffer[_iTail];
    6e94:	69db      	ldr	r3, [r3, #28]
    6e96:	18c0      	adds	r0, r0, r3
    6e98:	7d00      	ldrb	r0, [r0, #20]
}

int Uart::peek()
{
  return rxBuffer.peek();
}
    6e9a:	4770      	bx	lr
    return -1;
    6e9c:	2001      	movs	r0, #1
    6e9e:	4240      	negs	r0, r0
  return rxBuffer.peek();
    6ea0:	e7fb      	b.n	6e9a <_ZN4Uart4peekEv+0x12>

00006ea2 <_ZN4Uart3endEv>:
{
    6ea2:	b510      	push	{r4, lr}
    6ea4:	0004      	movs	r4, r0
  sercom->resetUART();
    6ea6:	6900      	ldr	r0, [r0, #16]
    6ea8:	f7ff ff08 	bl	6cbc <_ZN6SERCOM9resetUARTEv>
  _iHead = 0;
    6eac:	0022      	movs	r2, r4
    6eae:	2300      	movs	r3, #0
    6eb0:	32fc      	adds	r2, #252	; 0xfc
    6eb2:	6193      	str	r3, [r2, #24]
  _iTail = 0;
    6eb4:	61d3      	str	r3, [r2, #28]
  _iHead = 0;
    6eb6:	2286      	movs	r2, #134	; 0x86
    6eb8:	0092      	lsls	r2, r2, #2
    6eba:	18a4      	adds	r4, r4, r2
    6ebc:	6063      	str	r3, [r4, #4]
  _iTail = 0;
    6ebe:	60a3      	str	r3, [r4, #8]
}
    6ec0:	bd10      	pop	{r4, pc}

00006ec2 <_ZN4Uart16extractNbStopBitEt>:
  return 1;
}

SercomNumberStopBit Uart::extractNbStopBit(uint16_t config)
{
  switch(config & HARDSER_STOP_BIT_MASK)
    6ec2:	20f0      	movs	r0, #240	; 0xf0
    6ec4:	4001      	ands	r1, r0
  {
    case HARDSER_STOP_BIT_1:
    default:
      return SERCOM_STOP_BIT_1;
    6ec6:	3930      	subs	r1, #48	; 0x30
    6ec8:	4248      	negs	r0, r1
    6eca:	4148      	adcs	r0, r1

    case HARDSER_STOP_BIT_2:
      return SERCOM_STOP_BITS_2;
  }
}
    6ecc:	4770      	bx	lr

00006ece <_ZN4Uart15extractCharSizeEt>:

SercomUartCharSize Uart::extractCharSize(uint16_t config)
{
  switch(config & HARDSER_DATA_MASK)
    6ece:	23f0      	movs	r3, #240	; 0xf0
    6ed0:	011b      	lsls	r3, r3, #4
    6ed2:	4019      	ands	r1, r3
    6ed4:	2380      	movs	r3, #128	; 0x80
  {
    case HARDSER_DATA_5:
      return UART_CHAR_SIZE_5_BITS;

    case HARDSER_DATA_6:
      return UART_CHAR_SIZE_6_BITS;
    6ed6:	2006      	movs	r0, #6
  switch(config & HARDSER_DATA_MASK)
    6ed8:	009b      	lsls	r3, r3, #2
    6eda:	4299      	cmp	r1, r3
    6edc:	d00a      	beq.n	6ef4 <_ZN4Uart15extractCharSizeEt+0x26>
    6ede:	3301      	adds	r3, #1
    6ee0:	33ff      	adds	r3, #255	; 0xff

    case HARDSER_DATA_7:
      return UART_CHAR_SIZE_7_BITS;
    6ee2:	3001      	adds	r0, #1
  switch(config & HARDSER_DATA_MASK)
    6ee4:	4299      	cmp	r1, r3
    6ee6:	d005      	beq.n	6ef4 <_ZN4Uart15extractCharSizeEt+0x26>
    6ee8:	2380      	movs	r3, #128	; 0x80
      return UART_CHAR_SIZE_5_BITS;
    6eea:	3802      	subs	r0, #2
  switch(config & HARDSER_DATA_MASK)
    6eec:	005b      	lsls	r3, r3, #1
    6eee:	4299      	cmp	r1, r3
    6ef0:	d000      	beq.n	6ef4 <_ZN4Uart15extractCharSizeEt+0x26>

    case HARDSER_DATA_8:
    default:
      return UART_CHAR_SIZE_8_BITS;
    6ef2:	2000      	movs	r0, #0

  }
}
    6ef4:	4770      	bx	lr

00006ef6 <_ZN4Uart13extractParityEt>:

SercomParityMode Uart::extractParity(uint16_t config)
{
  switch(config & HARDSER_PARITY_MASK)
    6ef6:	200f      	movs	r0, #15
    6ef8:	4001      	ands	r1, r0
    case HARDSER_PARITY_NONE:
    default:
      return SERCOM_NO_PARITY;

    case HARDSER_PARITY_EVEN:
      return SERCOM_EVEN_PARITY;
    6efa:	2000      	movs	r0, #0
  switch(config & HARDSER_PARITY_MASK)
    6efc:	2901      	cmp	r1, #1
    6efe:	d003      	beq.n	6f08 <_ZN4Uart13extractParityEt+0x12>
      return SERCOM_NO_PARITY;
    6f00:	3902      	subs	r1, #2
    6f02:	1e48      	subs	r0, r1, #1
    6f04:	4181      	sbcs	r1, r0
    6f06:	1c48      	adds	r0, r1, #1

    case HARDSER_PARITY_ODD:
      return SERCOM_ODD_PARITY;
  }
}
    6f08:	4770      	bx	lr
	...

00006f0c <_ZN4Uart5beginEmt>:
  pinPeripheral(uc_pinRX, g_APinDescription[uc_pinRX].ulPinType);
    6f0c:	2389      	movs	r3, #137	; 0x89
{
    6f0e:	b5f0      	push	{r4, r5, r6, r7, lr}
  pinPeripheral(uc_pinRX, g_APinDescription[uc_pinRX].ulPinType);
    6f10:	2618      	movs	r6, #24
{
    6f12:	b085      	sub	sp, #20
    6f14:	9102      	str	r1, [sp, #8]
  pinPeripheral(uc_pinRX, g_APinDescription[uc_pinRX].ulPinType);
    6f16:	009b      	lsls	r3, r3, #2
{
    6f18:	0004      	movs	r4, r0
  pinPeripheral(uc_pinRX, g_APinDescription[uc_pinRX].ulPinType);
    6f1a:	5cc0      	ldrb	r0, [r0, r3]
    6f1c:	0033      	movs	r3, r6
    6f1e:	2108      	movs	r1, #8
    6f20:	4343      	muls	r3, r0
    6f22:	4d32      	ldr	r5, [pc, #200]	; (6fec <_ZN4Uart5beginEmt+0xe0>)
{
    6f24:	0017      	movs	r7, r2
  pinPeripheral(uc_pinRX, g_APinDescription[uc_pinRX].ulPinType);
    6f26:	18eb      	adds	r3, r5, r3
    6f28:	5659      	ldrsb	r1, [r3, r1]
    6f2a:	f7ff fd6d 	bl	6a08 <pinPeripheral>
  pinPeripheral(uc_pinTX, g_APinDescription[uc_pinTX].ulPinType);
    6f2e:	4b30      	ldr	r3, [pc, #192]	; (6ff0 <_ZN4Uart5beginEmt+0xe4>)
    6f30:	2108      	movs	r1, #8
    6f32:	5ce0      	ldrb	r0, [r4, r3]
    6f34:	0033      	movs	r3, r6
    6f36:	4343      	muls	r3, r0
    6f38:	18eb      	adds	r3, r5, r3
    6f3a:	5659      	ldrsb	r1, [r3, r1]
    6f3c:	f7ff fd64 	bl	6a08 <pinPeripheral>
  if (uc_padTX == UART_TX_RTS_CTS_PAD_0_2_3) { 
    6f40:	4b2c      	ldr	r3, [pc, #176]	; (6ff4 <_ZN4Uart5beginEmt+0xe8>)
    6f42:	5ce2      	ldrb	r2, [r4, r3]
    6f44:	9303      	str	r3, [sp, #12]
    6f46:	2a02      	cmp	r2, #2
    6f48:	d109      	bne.n	6f5e <_ZN4Uart5beginEmt+0x52>
    if (uc_pinCTS != NO_CTS_PIN) {
    6f4a:	3311      	adds	r3, #17
    6f4c:	5ce0      	ldrb	r0, [r4, r3]
    6f4e:	28ff      	cmp	r0, #255	; 0xff
    6f50:	d005      	beq.n	6f5e <_ZN4Uart5beginEmt+0x52>
      pinPeripheral(uc_pinCTS, g_APinDescription[uc_pinCTS].ulPinType);
    6f52:	2108      	movs	r1, #8
    6f54:	4346      	muls	r6, r0
    6f56:	19ae      	adds	r6, r5, r6
    6f58:	5671      	ldrsb	r1, [r6, r1]
    6f5a:	f7ff fd55 	bl	6a08 <pinPeripheral>
  if (uc_pinRTS != NO_RTS_PIN) {
    6f5e:	268a      	movs	r6, #138	; 0x8a
    6f60:	00b6      	lsls	r6, r6, #2
    6f62:	5da0      	ldrb	r0, [r4, r6]
    6f64:	28ff      	cmp	r0, #255	; 0xff
    6f66:	d019      	beq.n	6f9c <_ZN4Uart5beginEmt+0x90>
    pinMode(uc_pinRTS, OUTPUT);
    6f68:	2101      	movs	r1, #1
    6f6a:	f7ff fcd5 	bl	6918 <pinMode>
    EPortType rtsPort = g_APinDescription[uc_pinRTS].ulPort;
    6f6e:	2218      	movs	r2, #24
    6f70:	5da3      	ldrb	r3, [r4, r6]
    pul_outsetRTS = &PORT->Group[rtsPort].OUTSET.reg;
    6f72:	4921      	ldr	r1, [pc, #132]	; (6ff8 <_ZN4Uart5beginEmt+0xec>)
    EPortType rtsPort = g_APinDescription[uc_pinRTS].ulPort;
    6f74:	435a      	muls	r2, r3
    pul_outsetRTS = &PORT->Group[rtsPort].OUTSET.reg;
    6f76:	56ab      	ldrsb	r3, [r5, r2]
    ul_pinMaskRTS = (1ul << g_APinDescription[uc_pinRTS].ulPin);
    6f78:	18ad      	adds	r5, r5, r2
    pul_outsetRTS = &PORT->Group[rtsPort].OUTSET.reg;
    6f7a:	01db      	lsls	r3, r3, #7
    6f7c:	1858      	adds	r0, r3, r1
    6f7e:	218b      	movs	r1, #139	; 0x8b
    6f80:	0089      	lsls	r1, r1, #2
    6f82:	5060      	str	r0, [r4, r1]
    pul_outclrRTS = &PORT->Group[rtsPort].OUTCLR.reg;
    6f84:	491d      	ldr	r1, [pc, #116]	; (6ffc <_ZN4Uart5beginEmt+0xf0>)
    ul_pinMaskRTS = (1ul << g_APinDescription[uc_pinRTS].ulPin);
    6f86:	2201      	movs	r2, #1
    pul_outclrRTS = &PORT->Group[rtsPort].OUTCLR.reg;
    6f88:	185b      	adds	r3, r3, r1
    6f8a:	218c      	movs	r1, #140	; 0x8c
    6f8c:	0089      	lsls	r1, r1, #2
    6f8e:	5063      	str	r3, [r4, r1]
    ul_pinMaskRTS = (1ul << g_APinDescription[uc_pinRTS].ulPin);
    6f90:	6869      	ldr	r1, [r5, #4]
    6f92:	408a      	lsls	r2, r1
    6f94:	218d      	movs	r1, #141	; 0x8d
    6f96:	0089      	lsls	r1, r1, #2
    6f98:	5062      	str	r2, [r4, r1]
    *pul_outclrRTS = ul_pinMaskRTS;
    6f9a:	601a      	str	r2, [r3, #0]
  sercom->initUART(UART_INT_CLOCK, SAMPLE_RATE_x16, baudrate);
    6f9c:	2201      	movs	r2, #1
    6f9e:	9b02      	ldr	r3, [sp, #8]
    6fa0:	0011      	movs	r1, r2
    6fa2:	6920      	ldr	r0, [r4, #16]
    6fa4:	f7ff ff34 	bl	6e10 <_ZN6SERCOM8initUARTE14SercomUartMode20SercomUartSampleRatem>
  sercom->initFrame(extractCharSize(config), LSB_FIRST, extractParity(config), extractNbStopBit(config));
    6fa8:	0039      	movs	r1, r7
    6faa:	0020      	movs	r0, r4
    6fac:	f7ff ff8f 	bl	6ece <_ZN4Uart15extractCharSizeEt>
    6fb0:	0039      	movs	r1, r7
    6fb2:	0005      	movs	r5, r0
    6fb4:	0020      	movs	r0, r4
    6fb6:	f7ff ff9e 	bl	6ef6 <_ZN4Uart13extractParityEt>
    6fba:	0039      	movs	r1, r7
    6fbc:	0006      	movs	r6, r0
    6fbe:	0020      	movs	r0, r4
    6fc0:	f7ff ff7f 	bl	6ec2 <_ZN4Uart16extractNbStopBitEt>
    6fc4:	0033      	movs	r3, r6
    6fc6:	9000      	str	r0, [sp, #0]
    6fc8:	0029      	movs	r1, r5
    6fca:	6920      	ldr	r0, [r4, #16]
    6fcc:	2201      	movs	r2, #1
    6fce:	f7ff fe49 	bl	6c64 <_ZN6SERCOM9initFrameE18SercomUartCharSize15SercomDataOrder16SercomParityMode19SercomNumberStopBit>
  sercom->initPads(uc_padTX, uc_padRX);
    6fd2:	4b0b      	ldr	r3, [pc, #44]	; (7000 <_ZN4Uart5beginEmt+0xf4>)
    6fd4:	6920      	ldr	r0, [r4, #16]
    6fd6:	5ce2      	ldrb	r2, [r4, r3]
    6fd8:	9b03      	ldr	r3, [sp, #12]
    6fda:	5ce1      	ldrb	r1, [r4, r3]
    6fdc:	f7ff fe5c 	bl	6c98 <_ZN6SERCOM8initPadsE15SercomUartTXPad11SercomRXPad>
  sercom->enableUART();
    6fe0:	6920      	ldr	r0, [r4, #16]
    6fe2:	f7ff fe77 	bl	6cd4 <_ZN6SERCOM10enableUARTEv>
}
    6fe6:	b005      	add	sp, #20
    6fe8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6fea:	46c0      	nop			; (mov r8, r8)
    6fec:	0000ba0c 	.word	0x0000ba0c
    6ff0:	00000225 	.word	0x00000225
    6ff4:	00000227 	.word	0x00000227
    6ff8:	41004418 	.word	0x41004418
    6ffc:	41004414 	.word	0x41004414
    7000:	00000226 	.word	0x00000226

00007004 <_ZN11RingBufferNILi256EEC1Ev>:
    memset( _aucBuffer, 0, N ) ;
    7004:	2280      	movs	r2, #128	; 0x80
RingBufferN<N>::RingBufferN( void )
    7006:	b510      	push	{r4, lr}
    7008:	0004      	movs	r4, r0
    memset( _aucBuffer, 0, N ) ;
    700a:	0052      	lsls	r2, r2, #1
    700c:	2100      	movs	r1, #0
    700e:	f002 f9c3 	bl	9398 <memset>
  _iHead = 0;
    7012:	0023      	movs	r3, r4
    7014:	2200      	movs	r2, #0
    7016:	33fc      	adds	r3, #252	; 0xfc
    7018:	605a      	str	r2, [r3, #4]
}
    701a:	0020      	movs	r0, r4
  _iTail = 0;
    701c:	609a      	str	r2, [r3, #8]
}
    701e:	bd10      	pop	{r4, pc}

00007020 <_ZN4UartC1EP6SERCOMhh11SercomRXPad15SercomUartTXPadhh>:
Uart::Uart(SERCOM *_s, uint8_t _pinRX, uint8_t _pinTX, SercomRXPad _padRX, SercomUartTXPad _padTX, uint8_t _pinRTS, uint8_t _pinCTS)
    7020:	b5f0      	push	{r4, r5, r6, r7, lr}
    7022:	b085      	sub	sp, #20
    7024:	001d      	movs	r5, r3
    7026:	ab0a      	add	r3, sp, #40	; 0x28
    7028:	781b      	ldrb	r3, [r3, #0]
    702a:	0004      	movs	r4, r0
    702c:	9300      	str	r3, [sp, #0]
    702e:	ab0b      	add	r3, sp, #44	; 0x2c
    7030:	781b      	ldrb	r3, [r3, #0]
    7032:	0016      	movs	r6, r2
    7034:	9301      	str	r3, [sp, #4]
    7036:	ab0c      	add	r3, sp, #48	; 0x30
    7038:	781b      	ldrb	r3, [r3, #0]
    703a:	000f      	movs	r7, r1
    703c:	9302      	str	r3, [sp, #8]
    703e:	ab0d      	add	r3, sp, #52	; 0x34
    7040:	781b      	ldrb	r3, [r3, #0]
    7042:	9303      	str	r3, [sp, #12]
    7044:	2300      	movs	r3, #0
    7046:	6043      	str	r3, [r0, #4]
    7048:	23fa      	movs	r3, #250	; 0xfa
    704a:	009b      	lsls	r3, r3, #2
    704c:	6083      	str	r3, [r0, #8]
    704e:	4b12      	ldr	r3, [pc, #72]	; (7098 <_ZN4UartC1EP6SERCOMhh11SercomRXPad15SercomUartTXPadhh+0x78>)
    7050:	3308      	adds	r3, #8
    7052:	6003      	str	r3, [r0, #0]
    7054:	3014      	adds	r0, #20
    7056:	f7ff ffd5 	bl	7004 <_ZN11RingBufferNILi256EEC1Ev>
    705a:	0020      	movs	r0, r4
    705c:	301d      	adds	r0, #29
    705e:	30ff      	adds	r0, #255	; 0xff
    7060:	f7ff ffd0 	bl	7004 <_ZN11RingBufferNILi256EEC1Ev>
  uc_pinRX = _pinRX;
    7064:	2389      	movs	r3, #137	; 0x89
  uc_padRX = _padRX ;
    7066:	466a      	mov	r2, sp
  uc_pinRX = _pinRX;
    7068:	009b      	lsls	r3, r3, #2
  sercom = _s;
    706a:	6127      	str	r7, [r4, #16]
  uc_pinRX = _pinRX;
    706c:	54e6      	strb	r6, [r4, r3]
  uc_pinTX = _pinTX;
    706e:	4b0b      	ldr	r3, [pc, #44]	; (709c <_ZN4UartC1EP6SERCOMhh11SercomRXPad15SercomUartTXPadhh+0x7c>)
  uc_padRX = _padRX ;
    7070:	7812      	ldrb	r2, [r2, #0]
  uc_pinTX = _pinTX;
    7072:	54e5      	strb	r5, [r4, r3]
  uc_padRX = _padRX ;
    7074:	4b0a      	ldr	r3, [pc, #40]	; (70a0 <_ZN4UartC1EP6SERCOMhh11SercomRXPad15SercomUartTXPadhh+0x80>)
}
    7076:	0020      	movs	r0, r4
  uc_padRX = _padRX ;
    7078:	54e2      	strb	r2, [r4, r3]
  uc_padTX = _padTX;
    707a:	466a      	mov	r2, sp
    707c:	4b09      	ldr	r3, [pc, #36]	; (70a4 <_ZN4UartC1EP6SERCOMhh11SercomRXPad15SercomUartTXPadhh+0x84>)
    707e:	7912      	ldrb	r2, [r2, #4]
    7080:	54e2      	strb	r2, [r4, r3]
  uc_pinRTS = _pinRTS;
    7082:	466a      	mov	r2, sp
    7084:	7a12      	ldrb	r2, [r2, #8]
    7086:	3301      	adds	r3, #1
    7088:	54e2      	strb	r2, [r4, r3]
  uc_pinCTS = _pinCTS;
    708a:	466a      	mov	r2, sp
    708c:	7b12      	ldrb	r2, [r2, #12]
    708e:	3310      	adds	r3, #16
    7090:	54e2      	strb	r2, [r4, r3]
}
    7092:	b005      	add	sp, #20
    7094:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7096:	46c0      	nop			; (mov r8, r8)
    7098:	0000bd6c 	.word	0x0000bd6c
    709c:	00000225 	.word	0x00000225
    70a0:	00000226 	.word	0x00000226
    70a4:	00000227 	.word	0x00000227

000070a8 <_ZN4UartC1EP6SERCOMhh11SercomRXPad15SercomUartTXPad>:
Uart::Uart(SERCOM *_s, uint8_t _pinRX, uint8_t _pinTX, SercomRXPad _padRX, SercomUartTXPad _padTX) :
    70a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    70aa:	001d      	movs	r5, r3
    70ac:	ab08      	add	r3, sp, #32
    70ae:	781b      	ldrb	r3, [r3, #0]
    70b0:	0004      	movs	r4, r0
    70b2:	9300      	str	r3, [sp, #0]
    70b4:	ab09      	add	r3, sp, #36	; 0x24
    70b6:	781b      	ldrb	r3, [r3, #0]
    70b8:	0016      	movs	r6, r2
    70ba:	9301      	str	r3, [sp, #4]
    70bc:	2300      	movs	r3, #0
    70be:	6043      	str	r3, [r0, #4]
    70c0:	23fa      	movs	r3, #250	; 0xfa
    70c2:	009b      	lsls	r3, r3, #2
    70c4:	6083      	str	r3, [r0, #8]
Uart::Uart(SERCOM *_s, uint8_t _pinRX, uint8_t _pinTX, SercomRXPad _padRX, SercomUartTXPad _padTX, uint8_t _pinRTS, uint8_t _pinCTS)
    70c6:	4b11      	ldr	r3, [pc, #68]	; (710c <_ZN4UartC1EP6SERCOMhh11SercomRXPad15SercomUartTXPad+0x64>)
Uart::Uart(SERCOM *_s, uint8_t _pinRX, uint8_t _pinTX, SercomRXPad _padRX, SercomUartTXPad _padTX) :
    70c8:	000f      	movs	r7, r1
Uart::Uart(SERCOM *_s, uint8_t _pinRX, uint8_t _pinTX, SercomRXPad _padRX, SercomUartTXPad _padTX, uint8_t _pinRTS, uint8_t _pinCTS)
    70ca:	3308      	adds	r3, #8
    70cc:	6003      	str	r3, [r0, #0]
    70ce:	3014      	adds	r0, #20
    70d0:	f7ff ff98 	bl	7004 <_ZN11RingBufferNILi256EEC1Ev>
    70d4:	0020      	movs	r0, r4
    70d6:	301d      	adds	r0, #29
    70d8:	30ff      	adds	r0, #255	; 0xff
    70da:	f7ff ff93 	bl	7004 <_ZN11RingBufferNILi256EEC1Ev>
  uc_pinRX = _pinRX;
    70de:	2389      	movs	r3, #137	; 0x89
  uc_padRX = _padRX ;
    70e0:	466a      	mov	r2, sp
  uc_pinRX = _pinRX;
    70e2:	009b      	lsls	r3, r3, #2
  sercom = _s;
    70e4:	6127      	str	r7, [r4, #16]
  uc_pinRX = _pinRX;
    70e6:	54e6      	strb	r6, [r4, r3]
  uc_pinTX = _pinTX;
    70e8:	4b09      	ldr	r3, [pc, #36]	; (7110 <_ZN4UartC1EP6SERCOMhh11SercomRXPad15SercomUartTXPad+0x68>)
  uc_padRX = _padRX ;
    70ea:	7812      	ldrb	r2, [r2, #0]
  uc_pinTX = _pinTX;
    70ec:	54e5      	strb	r5, [r4, r3]
  uc_padRX = _padRX ;
    70ee:	4b09      	ldr	r3, [pc, #36]	; (7114 <_ZN4UartC1EP6SERCOMhh11SercomRXPad15SercomUartTXPad+0x6c>)
}
    70f0:	0020      	movs	r0, r4
  uc_padRX = _padRX ;
    70f2:	54e2      	strb	r2, [r4, r3]
  uc_padTX = _padTX;
    70f4:	466a      	mov	r2, sp
    70f6:	4b08      	ldr	r3, [pc, #32]	; (7118 <_ZN4UartC1EP6SERCOMhh11SercomRXPad15SercomUartTXPad+0x70>)
    70f8:	7912      	ldrb	r2, [r2, #4]
    70fa:	54e2      	strb	r2, [r4, r3]
  uc_pinRTS = _pinRTS;
    70fc:	228a      	movs	r2, #138	; 0x8a
    70fe:	3b29      	subs	r3, #41	; 0x29
    7100:	3bff      	subs	r3, #255	; 0xff
    7102:	0092      	lsls	r2, r2, #2
    7104:	54a3      	strb	r3, [r4, r2]
  uc_pinCTS = _pinCTS;
    7106:	3210      	adds	r2, #16
    7108:	54a3      	strb	r3, [r4, r2]
}
    710a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    710c:	0000bd6c 	.word	0x0000bd6c
    7110:	00000225 	.word	0x00000225
    7114:	00000226 	.word	0x00000226
    7118:	00000227 	.word	0x00000227

0000711c <_ZN11RingBufferNILi256EE9availableEv>:
  int delta = _iHead - _iTail;
    711c:	0003      	movs	r3, r0
    711e:	33fc      	adds	r3, #252	; 0xfc
    7120:	6858      	ldr	r0, [r3, #4]
    7122:	689b      	ldr	r3, [r3, #8]
    7124:	1ac0      	subs	r0, r0, r3
  if(delta < 0)
    7126:	d501      	bpl.n	712c <_ZN11RingBufferNILi256EE9availableEv+0x10>
    return N + delta;
    7128:	3001      	adds	r0, #1
    712a:	30ff      	adds	r0, #255	; 0xff
}
    712c:	4770      	bx	lr

0000712e <_ZN4Uart5flushEv>:
{
    712e:	b510      	push	{r4, lr}
    7130:	0004      	movs	r4, r0
  while(txBuffer.available()); // wait until TX buffer is empty
    7132:	0020      	movs	r0, r4
    7134:	301d      	adds	r0, #29
    7136:	30ff      	adds	r0, #255	; 0xff
    7138:	f7ff fff0 	bl	711c <_ZN11RingBufferNILi256EE9availableEv>
    713c:	2800      	cmp	r0, #0
    713e:	d1f8      	bne.n	7132 <_ZN4Uart5flushEv+0x4>
  sercom->flushUART();
    7140:	6920      	ldr	r0, [r4, #16]
    7142:	f7ff fdd0 	bl	6ce6 <_ZN6SERCOM9flushUARTEv>
}
    7146:	bd10      	pop	{r4, pc}

00007148 <_ZN4Uart9availableEv>:
{
    7148:	b510      	push	{r4, lr}
  return rxBuffer.available();
    714a:	3014      	adds	r0, #20
    714c:	f7ff ffe6 	bl	711c <_ZN11RingBufferNILi256EE9availableEv>
}
    7150:	bd10      	pop	{r4, pc}

00007152 <_ZN11RingBufferNILi256EE17availableForStoreEv>:
  if (_iHead >= _iTail)
    7152:	0003      	movs	r3, r0
    7154:	33fc      	adds	r3, #252	; 0xfc
    7156:	6859      	ldr	r1, [r3, #4]
    7158:	689a      	ldr	r2, [r3, #8]
    715a:	4291      	cmp	r1, r2
    715c:	db04      	blt.n	7168 <_ZN11RingBufferNILi256EE17availableForStoreEv+0x16>
    return N - 1 - _iHead + _iTail;
    715e:	685a      	ldr	r2, [r3, #4]
    7160:	6898      	ldr	r0, [r3, #8]
    7162:	1a80      	subs	r0, r0, r2
    7164:	30ff      	adds	r0, #255	; 0xff
}
    7166:	4770      	bx	lr
    return _iTail - _iHead - 1;
    7168:	6898      	ldr	r0, [r3, #8]
    716a:	685b      	ldr	r3, [r3, #4]
    716c:	1ac0      	subs	r0, r0, r3
    716e:	3801      	subs	r0, #1
    7170:	e7f9      	b.n	7166 <_ZN11RingBufferNILi256EE17availableForStoreEv+0x14>

00007172 <_ZN4Uart17availableForWriteEv>:
{
    7172:	b510      	push	{r4, lr}
  return txBuffer.availableForStore();
    7174:	301d      	adds	r0, #29
    7176:	30ff      	adds	r0, #255	; 0xff
    7178:	f7ff ffeb 	bl	7152 <_ZN11RingBufferNILi256EE17availableForStoreEv>
}
    717c:	bd10      	pop	{r4, pc}

0000717e <_ZN4Uart10IrqHandlerEv>:
{
    717e:	b510      	push	{r4, lr}
    7180:	0004      	movs	r4, r0
  if (sercom->isFrameErrorUART()) {
    7182:	6900      	ldr	r0, [r0, #16]
    7184:	f7ff fdcb 	bl	6d1e <_ZN6SERCOM16isFrameErrorUARTEv>
    7188:	2800      	cmp	r0, #0
    718a:	d005      	beq.n	7198 <_ZN4Uart10IrqHandlerEv+0x1a>
    sercom->readDataUART();
    718c:	6920      	ldr	r0, [r4, #16]
    718e:	f7ff fdd6 	bl	6d3e <_ZN6SERCOM12readDataUARTEv>
    sercom->clearFrameErrorUART();
    7192:	6920      	ldr	r0, [r4, #16]
    7194:	f7ff fdc8 	bl	6d28 <_ZN6SERCOM19clearFrameErrorUARTEv>
  if (sercom->availableDataUART()) {
    7198:	6920      	ldr	r0, [r4, #16]
    719a:	f7ff fdb0 	bl	6cfe <_ZN6SERCOM17availableDataUARTEv>
    719e:	2800      	cmp	r0, #0
    71a0:	d020      	beq.n	71e4 <_ZN4Uart10IrqHandlerEv+0x66>
    rxBuffer.store_char(sercom->readDataUART());
    71a2:	6920      	ldr	r0, [r4, #16]
    71a4:	f7ff fdcb 	bl	6d3e <_ZN6SERCOM12readDataUARTEv>
  int i = nextIndex(_iHead);
    71a8:	0022      	movs	r2, r4
    71aa:	32fc      	adds	r2, #252	; 0xfc
    71ac:	6993      	ldr	r3, [r2, #24]
  if ( i != _iTail )
    71ae:	69d1      	ldr	r1, [r2, #28]
}

template <int N>
int RingBufferN<N>::nextIndex(int index)
{
  return (uint32_t)(index + 1) % N;
    71b0:	3301      	adds	r3, #1
    71b2:	b2db      	uxtb	r3, r3
  if ( i != _iTail )
    71b4:	428b      	cmp	r3, r1
    71b6:	d003      	beq.n	71c0 <_ZN4Uart10IrqHandlerEv+0x42>
    _aucBuffer[_iHead] = c ;
    71b8:	6991      	ldr	r1, [r2, #24]
    71ba:	1861      	adds	r1, r4, r1
    71bc:	7508      	strb	r0, [r1, #20]
    _iHead = i ;
    71be:	6193      	str	r3, [r2, #24]
    if (uc_pinRTS != NO_RTS_PIN) {
    71c0:	238a      	movs	r3, #138	; 0x8a
    71c2:	009b      	lsls	r3, r3, #2
    71c4:	5ce3      	ldrb	r3, [r4, r3]
    71c6:	2bff      	cmp	r3, #255	; 0xff
    71c8:	d00c      	beq.n	71e4 <_ZN4Uart10IrqHandlerEv+0x66>
    rxBuffer.store_char(sercom->readDataUART());
    71ca:	0020      	movs	r0, r4
    71cc:	3014      	adds	r0, #20
      if (rxBuffer.availableForStore() < RTS_RX_THRESHOLD) {
    71ce:	f7ff ffc0 	bl	7152 <_ZN11RingBufferNILi256EE17availableForStoreEv>
    71d2:	2809      	cmp	r0, #9
    71d4:	dc06      	bgt.n	71e4 <_ZN4Uart10IrqHandlerEv+0x66>
        *pul_outsetRTS = ul_pinMaskRTS;
    71d6:	238b      	movs	r3, #139	; 0x8b
    71d8:	228d      	movs	r2, #141	; 0x8d
    71da:	009b      	lsls	r3, r3, #2
    71dc:	0092      	lsls	r2, r2, #2
    71de:	58e3      	ldr	r3, [r4, r3]
    71e0:	58a2      	ldr	r2, [r4, r2]
    71e2:	601a      	str	r2, [r3, #0]
  if (sercom->isDataRegisterEmptyUART()) {
    71e4:	6920      	ldr	r0, [r4, #16]
    71e6:	f7ff fda5 	bl	6d34 <_ZN6SERCOM23isDataRegisterEmptyUARTEv>
    71ea:	2800      	cmp	r0, #0
    71ec:	d01a      	beq.n	7224 <_ZN4Uart10IrqHandlerEv+0xa6>
    if (txBuffer.available()) {
    71ee:	0020      	movs	r0, r4
    71f0:	301d      	adds	r0, #29
    71f2:	30ff      	adds	r0, #255	; 0xff
    71f4:	f7ff ff92 	bl	711c <_ZN11RingBufferNILi256EE9availableEv>
    71f8:	2800      	cmp	r0, #0
    71fa:	d022      	beq.n	7242 <_ZN4Uart10IrqHandlerEv+0xc4>
  if(_iTail == _iHead)
    71fc:	2386      	movs	r3, #134	; 0x86
    71fe:	009b      	lsls	r3, r3, #2
    7200:	18e3      	adds	r3, r4, r3
    7202:	6899      	ldr	r1, [r3, #8]
    7204:	685a      	ldr	r2, [r3, #4]
    7206:	4291      	cmp	r1, r2
    7208:	d018      	beq.n	723c <_ZN4Uart10IrqHandlerEv+0xbe>
  uint8_t value = _aucBuffer[_iTail];
    720a:	218e      	movs	r1, #142	; 0x8e
    720c:	689a      	ldr	r2, [r3, #8]
    720e:	0049      	lsls	r1, r1, #1
    7210:	18a2      	adds	r2, r4, r2
    7212:	5c51      	ldrb	r1, [r2, r1]
  _iTail = nextIndex(_iTail);
    7214:	689a      	ldr	r2, [r3, #8]
  return (uint32_t)(index + 1) % N;
    7216:	3201      	adds	r2, #1
    7218:	b2d2      	uxtb	r2, r2
  _iTail = nextIndex(_iTail);
    721a:	609a      	str	r2, [r3, #8]
      sercom->writeDataUART(data);
    721c:	b2c9      	uxtb	r1, r1
    721e:	6920      	ldr	r0, [r4, #16]
    7220:	f7ff fd91 	bl	6d46 <_ZN6SERCOM13writeDataUARTEh>
  if (sercom->isUARTError()) {
    7224:	6920      	ldr	r0, [r4, #16]
    7226:	f7ff fd6f 	bl	6d08 <_ZN6SERCOM11isUARTErrorEv>
    722a:	2800      	cmp	r0, #0
    722c:	d005      	beq.n	723a <_ZN4Uart10IrqHandlerEv+0xbc>
    sercom->acknowledgeUARTError();
    722e:	6920      	ldr	r0, [r4, #16]
    7230:	f7ff fd6e 	bl	6d10 <_ZN6SERCOM20acknowledgeUARTErrorEv>
    sercom->clearStatusUART();
    7234:	6920      	ldr	r0, [r4, #16]
    7236:	f7ff fd5e 	bl	6cf6 <_ZN6SERCOM15clearStatusUARTEv>
}
    723a:	bd10      	pop	{r4, pc}
    return -1;
    723c:	2101      	movs	r1, #1
    723e:	4249      	negs	r1, r1
    7240:	e7ec      	b.n	721c <_ZN4Uart10IrqHandlerEv+0x9e>
      sercom->disableDataRegisterEmptyInterruptUART();
    7242:	6920      	ldr	r0, [r4, #16]
    7244:	f7ff fd8b 	bl	6d5e <_ZN6SERCOM37disableDataRegisterEmptyInterruptUARTEv>
    7248:	e7ec      	b.n	7224 <_ZN4Uart10IrqHandlerEv+0xa6>
	...

0000724c <_ZN4Uart5writeEh>:
{
    724c:	b570      	push	{r4, r5, r6, lr}
    724e:	0004      	movs	r4, r0
  if (sercom->isDataRegisterEmptyUART() && txBuffer.available() == 0) {
    7250:	6900      	ldr	r0, [r0, #16]
{
    7252:	000d      	movs	r5, r1
  if (sercom->isDataRegisterEmptyUART() && txBuffer.available() == 0) {
    7254:	f7ff fd6e 	bl	6d34 <_ZN6SERCOM23isDataRegisterEmptyUARTEv>
    7258:	2800      	cmp	r0, #0
    725a:	d124      	bne.n	72a6 <_ZN4Uart5writeEh+0x5a>
  return (uint32_t)(index + 1) % N;
    725c:	26ff      	movs	r6, #255	; 0xff
}

template <int N>
bool RingBufferN<N>::isFull()
{
  return (nextIndex(_iHead) == _iTail);
    725e:	2386      	movs	r3, #134	; 0x86
    7260:	009b      	lsls	r3, r3, #2
    7262:	18e3      	adds	r3, r4, r3
    7264:	685a      	ldr	r2, [r3, #4]
    7266:	6899      	ldr	r1, [r3, #8]
  return (uint32_t)(index + 1) % N;
    7268:	3201      	adds	r2, #1
    726a:	4032      	ands	r2, r6
    while(txBuffer.isFull()) {
    726c:	428a      	cmp	r2, r1
    726e:	d12f      	bne.n	72d0 <_ZN4Uart5writeEh+0x84>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    7270:	f3ef 8310 	mrs	r3, PRIMASK
      if (interruptsEnabled) {
    7274:	07db      	lsls	r3, r3, #31
    7276:	d40d      	bmi.n	7294 <_ZN4Uart5writeEh+0x48>
        uint32_t exceptionNumber = (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk);
    7278:	4b1e      	ldr	r3, [pc, #120]	; (72f4 <_ZN4Uart5writeEh+0xa8>)
    727a:	685b      	ldr	r3, [r3, #4]
    727c:	05db      	lsls	r3, r3, #23
    727e:	0ddb      	lsrs	r3, r3, #23
        if (exceptionNumber == 0 ||
    7280:	d0ed      	beq.n	725e <_ZN4Uart5writeEh+0x12>
              NVIC_GetPriority((IRQn_Type)(exceptionNumber - 16)) > SERCOM_NVIC_PRIORITY) {
    7282:	3b10      	subs	r3, #16
    7284:	b25b      	sxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
    7286:	2b00      	cmp	r3, #0
    7288:	db19      	blt.n	72be <_ZN4Uart5writeEh+0x72>
    return((uint32_t)(((NVIC->IP[ _IP_IDX(IRQn)] >> _BIT_SHIFT(IRQn) ) & (uint32_t)0xFFUL) >> (8U - __NVIC_PRIO_BITS)));
    728a:	089b      	lsrs	r3, r3, #2
    728c:	33c0      	adds	r3, #192	; 0xc0
    728e:	4a1a      	ldr	r2, [pc, #104]	; (72f8 <_ZN4Uart5writeEh+0xac>)
    7290:	009b      	lsls	r3, r3, #2
    7292:	589b      	ldr	r3, [r3, r2]
      if (sercom->isDataRegisterEmptyUART()) {
    7294:	6920      	ldr	r0, [r4, #16]
    7296:	f7ff fd4d 	bl	6d34 <_ZN6SERCOM23isDataRegisterEmptyUARTEv>
    729a:	2800      	cmp	r0, #0
    729c:	d0df      	beq.n	725e <_ZN4Uart5writeEh+0x12>
        IrqHandler();
    729e:	0020      	movs	r0, r4
    72a0:	f7ff ff6d 	bl	717e <_ZN4Uart10IrqHandlerEv>
    72a4:	e7db      	b.n	725e <_ZN4Uart5writeEh+0x12>
  if (sercom->isDataRegisterEmptyUART() && txBuffer.available() == 0) {
    72a6:	0020      	movs	r0, r4
    72a8:	301d      	adds	r0, #29
    72aa:	30ff      	adds	r0, #255	; 0xff
    72ac:	f7ff ff36 	bl	711c <_ZN11RingBufferNILi256EE9availableEv>
    72b0:	2800      	cmp	r0, #0
    72b2:	d1d3      	bne.n	725c <_ZN4Uart5writeEh+0x10>
    sercom->writeDataUART(data);
    72b4:	0029      	movs	r1, r5
    72b6:	6920      	ldr	r0, [r4, #16]
    72b8:	f7ff fd45 	bl	6d46 <_ZN6SERCOM13writeDataUARTEh>
  return 1;
    72bc:	e017      	b.n	72ee <_ZN4Uart5writeEh+0xa2>
    return((uint32_t)(((SCB->SHP[_SHP_IDX(IRQn)] >> _BIT_SHIFT(IRQn) ) & (uint32_t)0xFFUL) >> (8U - __NVIC_PRIO_BITS)));
    72be:	220f      	movs	r2, #15
    72c0:	4013      	ands	r3, r2
    72c2:	3b08      	subs	r3, #8
    72c4:	089b      	lsrs	r3, r3, #2
    72c6:	4a0d      	ldr	r2, [pc, #52]	; (72fc <_ZN4Uart5writeEh+0xb0>)
    72c8:	009b      	lsls	r3, r3, #2
    72ca:	189b      	adds	r3, r3, r2
    72cc:	681b      	ldr	r3, [r3, #0]
    72ce:	e7e1      	b.n	7294 <_ZN4Uart5writeEh+0x48>
  int i = nextIndex(_iHead);
    72d0:	685a      	ldr	r2, [r3, #4]
  return (uint32_t)(index + 1) % N;
    72d2:	3201      	adds	r2, #1
    72d4:	4016      	ands	r6, r2
  if ( i != _iTail )
    72d6:	689a      	ldr	r2, [r3, #8]
    72d8:	4296      	cmp	r6, r2
    72da:	d005      	beq.n	72e8 <_ZN4Uart5writeEh+0x9c>
    _aucBuffer[_iHead] = c ;
    72dc:	218e      	movs	r1, #142	; 0x8e
    72de:	685a      	ldr	r2, [r3, #4]
    72e0:	0049      	lsls	r1, r1, #1
    72e2:	18a2      	adds	r2, r4, r2
    72e4:	5455      	strb	r5, [r2, r1]
    _iHead = i ;
    72e6:	605e      	str	r6, [r3, #4]
    sercom->enableDataRegisterEmptyInterruptUART();
    72e8:	6920      	ldr	r0, [r4, #16]
    72ea:	f7ff fd34 	bl	6d56 <_ZN6SERCOM36enableDataRegisterEmptyInterruptUARTEv>
}
    72ee:	2001      	movs	r0, #1
    72f0:	bd70      	pop	{r4, r5, r6, pc}
    72f2:	46c0      	nop			; (mov r8, r8)
    72f4:	e000ed00 	.word	0xe000ed00
    72f8:	e000e100 	.word	0xe000e100
    72fc:	e000ed1c 	.word	0xe000ed1c

00007300 <_ZN4Uart4readEv>:
  if(_iTail == _iHead)
    7300:	0003      	movs	r3, r0
    7302:	33fc      	adds	r3, #252	; 0xfc
    7304:	69d9      	ldr	r1, [r3, #28]
    7306:	699a      	ldr	r2, [r3, #24]
{
    7308:	b570      	push	{r4, r5, r6, lr}
    730a:	0004      	movs	r4, r0
    730c:	4291      	cmp	r1, r2
    730e:	d01a      	beq.n	7346 <_ZN4Uart4readEv+0x46>
  uint8_t value = _aucBuffer[_iTail];
    7310:	69da      	ldr	r2, [r3, #28]
    7312:	1882      	adds	r2, r0, r2
    7314:	7d15      	ldrb	r5, [r2, #20]
  _iTail = nextIndex(_iTail);
    7316:	69da      	ldr	r2, [r3, #28]
  return (uint32_t)(index + 1) % N;
    7318:	3201      	adds	r2, #1
    731a:	b2d2      	uxtb	r2, r2
  _iTail = nextIndex(_iTail);
    731c:	61da      	str	r2, [r3, #28]
  if (uc_pinRTS != NO_RTS_PIN) {
    731e:	238a      	movs	r3, #138	; 0x8a
    7320:	009b      	lsls	r3, r3, #2
    7322:	5ce3      	ldrb	r3, [r4, r3]
    7324:	2bff      	cmp	r3, #255	; 0xff
    7326:	d00c      	beq.n	7342 <_ZN4Uart4readEv+0x42>
  int c = rxBuffer.read_char();
    7328:	0020      	movs	r0, r4
    732a:	3014      	adds	r0, #20
    if (rxBuffer.availableForStore() > RTS_RX_THRESHOLD) {
    732c:	f7ff ff11 	bl	7152 <_ZN11RingBufferNILi256EE17availableForStoreEv>
    7330:	280a      	cmp	r0, #10
    7332:	dd06      	ble.n	7342 <_ZN4Uart4readEv+0x42>
      *pul_outclrRTS = ul_pinMaskRTS;
    7334:	238c      	movs	r3, #140	; 0x8c
    7336:	228d      	movs	r2, #141	; 0x8d
    7338:	009b      	lsls	r3, r3, #2
    733a:	0092      	lsls	r2, r2, #2
    733c:	58e3      	ldr	r3, [r4, r3]
    733e:	58a2      	ldr	r2, [r4, r2]
    7340:	601a      	str	r2, [r3, #0]
}
    7342:	0028      	movs	r0, r5
    7344:	bd70      	pop	{r4, r5, r6, pc}
    return -1;
    7346:	2501      	movs	r5, #1
    7348:	426d      	negs	r5, r5
    734a:	e7e8      	b.n	731e <_ZN4Uart4readEv+0x1e>

0000734c <_ZN13PluggableUSB_12getInterfaceEPh>:
#ifdef PLUGGABLE_USB_ENABLED

extern uint32_t EndPoints[];

int PluggableUSB_::getInterface(uint8_t* interfaceCount)
{
    734c:	b570      	push	{r4, r5, r6, lr}
    734e:	000e      	movs	r6, r1
	int sent = 0;
    7350:	2500      	movs	r5, #0
	PluggableUSBModule* node;
	for (node = rootNode; node; node = node->next) {
    7352:	6844      	ldr	r4, [r0, #4]
    7354:	2c00      	cmp	r4, #0
    7356:	d00b      	beq.n	7370 <_ZN13PluggableUSB_12getInterfaceEPh+0x24>
		int res = node->getInterface(interfaceCount);
    7358:	6823      	ldr	r3, [r4, #0]
    735a:	0031      	movs	r1, r6
    735c:	685b      	ldr	r3, [r3, #4]
    735e:	0020      	movs	r0, r4
    7360:	4798      	blx	r3
		if (res < 0)
    7362:	2800      	cmp	r0, #0
    7364:	db02      	blt.n	736c <_ZN13PluggableUSB_12getInterfaceEPh+0x20>
			return -1;
		sent += res;
    7366:	182d      	adds	r5, r5, r0
	for (node = rootNode; node; node = node->next) {
    7368:	68e4      	ldr	r4, [r4, #12]
    736a:	e7f3      	b.n	7354 <_ZN13PluggableUSB_12getInterfaceEPh+0x8>
			return -1;
    736c:	2501      	movs	r5, #1
    736e:	426d      	negs	r5, r5
	}
	return sent;
}
    7370:	0028      	movs	r0, r5
    7372:	bd70      	pop	{r4, r5, r6, pc}

00007374 <_ZN13PluggableUSB_13getDescriptorER8USBSetup>:

int PluggableUSB_::getDescriptor(USBSetup& setup)
{
    7374:	b570      	push	{r4, r5, r6, lr}
    7376:	000d      	movs	r5, r1
	PluggableUSBModule* node;
	for (node = rootNode; node; node = node->next) {
    7378:	6844      	ldr	r4, [r0, #4]
    737a:	2c00      	cmp	r4, #0
    737c:	d008      	beq.n	7390 <_ZN13PluggableUSB_13getDescriptorER8USBSetup+0x1c>
		int ret = node->getDescriptor(setup);
    737e:	6823      	ldr	r3, [r4, #0]
    7380:	0029      	movs	r1, r5
    7382:	689b      	ldr	r3, [r3, #8]
    7384:	0020      	movs	r0, r4
    7386:	4798      	blx	r3
		// ret!=0 -> request has been processed
		if (ret)
    7388:	2800      	cmp	r0, #0
    738a:	d102      	bne.n	7392 <_ZN13PluggableUSB_13getDescriptorER8USBSetup+0x1e>
	for (node = rootNode; node; node = node->next) {
    738c:	68e4      	ldr	r4, [r4, #12]
    738e:	e7f4      	b.n	737a <_ZN13PluggableUSB_13getDescriptorER8USBSetup+0x6>
			return ret;
	}
	return 0;
    7390:	0020      	movs	r0, r4
}
    7392:	bd70      	pop	{r4, r5, r6, pc}

00007394 <_ZN13PluggableUSB_12getShortNameEPc>:

void PluggableUSB_::getShortName(char *iSerialNum)
{
    7394:	b570      	push	{r4, r5, r6, lr}
    7396:	000d      	movs	r5, r1
       PluggableUSBModule* node;
       for (node = rootNode; node; node = node->next) {
    7398:	6844      	ldr	r4, [r0, #4]
    739a:	2c00      	cmp	r4, #0
    739c:	d007      	beq.n	73ae <_ZN13PluggableUSB_12getShortNameEPc+0x1a>
               iSerialNum += node->getShortName(iSerialNum);
    739e:	6823      	ldr	r3, [r4, #0]
    73a0:	0029      	movs	r1, r5
    73a2:	0020      	movs	r0, r4
    73a4:	68db      	ldr	r3, [r3, #12]
    73a6:	4798      	blx	r3
       for (node = rootNode; node; node = node->next) {
    73a8:	68e4      	ldr	r4, [r4, #12]
               iSerialNum += node->getShortName(iSerialNum);
    73aa:	182d      	adds	r5, r5, r0
       for (node = rootNode; node; node = node->next) {
    73ac:	e7f5      	b.n	739a <_ZN13PluggableUSB_12getShortNameEPc+0x6>
       }
       *iSerialNum = 0;
    73ae:	702c      	strb	r4, [r5, #0]
}
    73b0:	bd70      	pop	{r4, r5, r6, pc}

000073b2 <_ZN13PluggableUSB_5setupER8USBSetup>:

bool PluggableUSB_::setup(USBSetup& setup)
{
    73b2:	b570      	push	{r4, r5, r6, lr}
    73b4:	000d      	movs	r5, r1
	PluggableUSBModule* node;
	for (node = rootNode; node; node = node->next) {
    73b6:	6844      	ldr	r4, [r0, #4]
    73b8:	2c00      	cmp	r4, #0
    73ba:	d008      	beq.n	73ce <_ZN13PluggableUSB_5setupER8USBSetup+0x1c>
		if (node->setup(setup)) {
    73bc:	6823      	ldr	r3, [r4, #0]
    73be:	0029      	movs	r1, r5
    73c0:	681b      	ldr	r3, [r3, #0]
    73c2:	0020      	movs	r0, r4
    73c4:	4798      	blx	r3
    73c6:	2800      	cmp	r0, #0
    73c8:	d102      	bne.n	73d0 <_ZN13PluggableUSB_5setupER8USBSetup+0x1e>
	for (node = rootNode; node; node = node->next) {
    73ca:	68e4      	ldr	r4, [r4, #12]
    73cc:	e7f4      	b.n	73b8 <_ZN13PluggableUSB_5setupER8USBSetup+0x6>
			return true;
		}
	}
	return false;
    73ce:	0020      	movs	r0, r4
}
    73d0:	bd70      	pop	{r4, r5, r6, pc}
	...

000073d4 <_Z12PluggableUSBv>:
	// restart USB layer???
}

PluggableUSB_& PluggableUSB()
{
	static PluggableUSB_ obj;
    73d4:	2101      	movs	r1, #1
    73d6:	4a06      	ldr	r2, [pc, #24]	; (73f0 <_Z12PluggableUSBv+0x1c>)
{
    73d8:	b510      	push	{r4, lr}
	static PluggableUSB_ obj;
    73da:	6813      	ldr	r3, [r2, #0]
    73dc:	4805      	ldr	r0, [pc, #20]	; (73f4 <_Z12PluggableUSBv+0x20>)
    73de:	400b      	ands	r3, r1
    73e0:	d105      	bne.n	73ee <_Z12PluggableUSBv+0x1a>
	return obj;
}

PluggableUSB_::PluggableUSB_() : lastIf(CDC_ACM_INTERFACE + CDC_INTERFACE_COUNT),
                                 lastEp(CDC_FIRST_ENDPOINT + CDC_ENPOINT_COUNT),
                                 rootNode(NULL)
    73e2:	2402      	movs	r4, #2
    73e4:	7004      	strb	r4, [r0, #0]
    73e6:	1924      	adds	r4, r4, r4
    73e8:	7044      	strb	r4, [r0, #1]
    73ea:	6043      	str	r3, [r0, #4]
	static PluggableUSB_ obj;
    73ec:	6011      	str	r1, [r2, #0]
}
    73ee:	bd10      	pop	{r4, pc}
    73f0:	20001094 	.word	0x20001094
    73f4:	20001098 	.word	0x20001098

000073f8 <__aeabi_atexit>:
    73f8:	000b      	movs	r3, r1
    73fa:	b510      	push	{r4, lr}
    73fc:	0001      	movs	r1, r0
    73fe:	0018      	movs	r0, r3
    7400:	f001 ff44 	bl	928c <__cxa_atexit>
    7404:	bd10      	pop	{r4, pc}
	...

00007408 <__gnu_thumb1_case_uqi>:
    7408:	b402      	push	{r1}
    740a:	4671      	mov	r1, lr
    740c:	0849      	lsrs	r1, r1, #1
    740e:	0049      	lsls	r1, r1, #1
    7410:	5c09      	ldrb	r1, [r1, r0]
    7412:	0049      	lsls	r1, r1, #1
    7414:	448e      	add	lr, r1
    7416:	bc02      	pop	{r1}
    7418:	4770      	bx	lr
    741a:	46c0      	nop			; (mov r8, r8)

0000741c <__udivsi3>:
    741c:	2200      	movs	r2, #0
    741e:	0843      	lsrs	r3, r0, #1
    7420:	428b      	cmp	r3, r1
    7422:	d374      	bcc.n	750e <__udivsi3+0xf2>
    7424:	0903      	lsrs	r3, r0, #4
    7426:	428b      	cmp	r3, r1
    7428:	d35f      	bcc.n	74ea <__udivsi3+0xce>
    742a:	0a03      	lsrs	r3, r0, #8
    742c:	428b      	cmp	r3, r1
    742e:	d344      	bcc.n	74ba <__udivsi3+0x9e>
    7430:	0b03      	lsrs	r3, r0, #12
    7432:	428b      	cmp	r3, r1
    7434:	d328      	bcc.n	7488 <__udivsi3+0x6c>
    7436:	0c03      	lsrs	r3, r0, #16
    7438:	428b      	cmp	r3, r1
    743a:	d30d      	bcc.n	7458 <__udivsi3+0x3c>
    743c:	22ff      	movs	r2, #255	; 0xff
    743e:	0209      	lsls	r1, r1, #8
    7440:	ba12      	rev	r2, r2
    7442:	0c03      	lsrs	r3, r0, #16
    7444:	428b      	cmp	r3, r1
    7446:	d302      	bcc.n	744e <__udivsi3+0x32>
    7448:	1212      	asrs	r2, r2, #8
    744a:	0209      	lsls	r1, r1, #8
    744c:	d065      	beq.n	751a <__udivsi3+0xfe>
    744e:	0b03      	lsrs	r3, r0, #12
    7450:	428b      	cmp	r3, r1
    7452:	d319      	bcc.n	7488 <__udivsi3+0x6c>
    7454:	e000      	b.n	7458 <__udivsi3+0x3c>
    7456:	0a09      	lsrs	r1, r1, #8
    7458:	0bc3      	lsrs	r3, r0, #15
    745a:	428b      	cmp	r3, r1
    745c:	d301      	bcc.n	7462 <__udivsi3+0x46>
    745e:	03cb      	lsls	r3, r1, #15
    7460:	1ac0      	subs	r0, r0, r3
    7462:	4152      	adcs	r2, r2
    7464:	0b83      	lsrs	r3, r0, #14
    7466:	428b      	cmp	r3, r1
    7468:	d301      	bcc.n	746e <__udivsi3+0x52>
    746a:	038b      	lsls	r3, r1, #14
    746c:	1ac0      	subs	r0, r0, r3
    746e:	4152      	adcs	r2, r2
    7470:	0b43      	lsrs	r3, r0, #13
    7472:	428b      	cmp	r3, r1
    7474:	d301      	bcc.n	747a <__udivsi3+0x5e>
    7476:	034b      	lsls	r3, r1, #13
    7478:	1ac0      	subs	r0, r0, r3
    747a:	4152      	adcs	r2, r2
    747c:	0b03      	lsrs	r3, r0, #12
    747e:	428b      	cmp	r3, r1
    7480:	d301      	bcc.n	7486 <__udivsi3+0x6a>
    7482:	030b      	lsls	r3, r1, #12
    7484:	1ac0      	subs	r0, r0, r3
    7486:	4152      	adcs	r2, r2
    7488:	0ac3      	lsrs	r3, r0, #11
    748a:	428b      	cmp	r3, r1
    748c:	d301      	bcc.n	7492 <__udivsi3+0x76>
    748e:	02cb      	lsls	r3, r1, #11
    7490:	1ac0      	subs	r0, r0, r3
    7492:	4152      	adcs	r2, r2
    7494:	0a83      	lsrs	r3, r0, #10
    7496:	428b      	cmp	r3, r1
    7498:	d301      	bcc.n	749e <__udivsi3+0x82>
    749a:	028b      	lsls	r3, r1, #10
    749c:	1ac0      	subs	r0, r0, r3
    749e:	4152      	adcs	r2, r2
    74a0:	0a43      	lsrs	r3, r0, #9
    74a2:	428b      	cmp	r3, r1
    74a4:	d301      	bcc.n	74aa <__udivsi3+0x8e>
    74a6:	024b      	lsls	r3, r1, #9
    74a8:	1ac0      	subs	r0, r0, r3
    74aa:	4152      	adcs	r2, r2
    74ac:	0a03      	lsrs	r3, r0, #8
    74ae:	428b      	cmp	r3, r1
    74b0:	d301      	bcc.n	74b6 <__udivsi3+0x9a>
    74b2:	020b      	lsls	r3, r1, #8
    74b4:	1ac0      	subs	r0, r0, r3
    74b6:	4152      	adcs	r2, r2
    74b8:	d2cd      	bcs.n	7456 <__udivsi3+0x3a>
    74ba:	09c3      	lsrs	r3, r0, #7
    74bc:	428b      	cmp	r3, r1
    74be:	d301      	bcc.n	74c4 <__udivsi3+0xa8>
    74c0:	01cb      	lsls	r3, r1, #7
    74c2:	1ac0      	subs	r0, r0, r3
    74c4:	4152      	adcs	r2, r2
    74c6:	0983      	lsrs	r3, r0, #6
    74c8:	428b      	cmp	r3, r1
    74ca:	d301      	bcc.n	74d0 <__udivsi3+0xb4>
    74cc:	018b      	lsls	r3, r1, #6
    74ce:	1ac0      	subs	r0, r0, r3
    74d0:	4152      	adcs	r2, r2
    74d2:	0943      	lsrs	r3, r0, #5
    74d4:	428b      	cmp	r3, r1
    74d6:	d301      	bcc.n	74dc <__udivsi3+0xc0>
    74d8:	014b      	lsls	r3, r1, #5
    74da:	1ac0      	subs	r0, r0, r3
    74dc:	4152      	adcs	r2, r2
    74de:	0903      	lsrs	r3, r0, #4
    74e0:	428b      	cmp	r3, r1
    74e2:	d301      	bcc.n	74e8 <__udivsi3+0xcc>
    74e4:	010b      	lsls	r3, r1, #4
    74e6:	1ac0      	subs	r0, r0, r3
    74e8:	4152      	adcs	r2, r2
    74ea:	08c3      	lsrs	r3, r0, #3
    74ec:	428b      	cmp	r3, r1
    74ee:	d301      	bcc.n	74f4 <__udivsi3+0xd8>
    74f0:	00cb      	lsls	r3, r1, #3
    74f2:	1ac0      	subs	r0, r0, r3
    74f4:	4152      	adcs	r2, r2
    74f6:	0883      	lsrs	r3, r0, #2
    74f8:	428b      	cmp	r3, r1
    74fa:	d301      	bcc.n	7500 <__udivsi3+0xe4>
    74fc:	008b      	lsls	r3, r1, #2
    74fe:	1ac0      	subs	r0, r0, r3
    7500:	4152      	adcs	r2, r2
    7502:	0843      	lsrs	r3, r0, #1
    7504:	428b      	cmp	r3, r1
    7506:	d301      	bcc.n	750c <__udivsi3+0xf0>
    7508:	004b      	lsls	r3, r1, #1
    750a:	1ac0      	subs	r0, r0, r3
    750c:	4152      	adcs	r2, r2
    750e:	1a41      	subs	r1, r0, r1
    7510:	d200      	bcs.n	7514 <__udivsi3+0xf8>
    7512:	4601      	mov	r1, r0
    7514:	4152      	adcs	r2, r2
    7516:	4610      	mov	r0, r2
    7518:	4770      	bx	lr
    751a:	e7ff      	b.n	751c <__udivsi3+0x100>
    751c:	b501      	push	{r0, lr}
    751e:	2000      	movs	r0, #0
    7520:	f000 f8f0 	bl	7704 <__aeabi_idiv0>
    7524:	bd02      	pop	{r1, pc}
    7526:	46c0      	nop			; (mov r8, r8)

00007528 <__aeabi_uidivmod>:
    7528:	2900      	cmp	r1, #0
    752a:	d0f7      	beq.n	751c <__udivsi3+0x100>
    752c:	e776      	b.n	741c <__udivsi3>
    752e:	4770      	bx	lr

00007530 <__divsi3>:
    7530:	4603      	mov	r3, r0
    7532:	430b      	orrs	r3, r1
    7534:	d47f      	bmi.n	7636 <__divsi3+0x106>
    7536:	2200      	movs	r2, #0
    7538:	0843      	lsrs	r3, r0, #1
    753a:	428b      	cmp	r3, r1
    753c:	d374      	bcc.n	7628 <__divsi3+0xf8>
    753e:	0903      	lsrs	r3, r0, #4
    7540:	428b      	cmp	r3, r1
    7542:	d35f      	bcc.n	7604 <__divsi3+0xd4>
    7544:	0a03      	lsrs	r3, r0, #8
    7546:	428b      	cmp	r3, r1
    7548:	d344      	bcc.n	75d4 <__divsi3+0xa4>
    754a:	0b03      	lsrs	r3, r0, #12
    754c:	428b      	cmp	r3, r1
    754e:	d328      	bcc.n	75a2 <__divsi3+0x72>
    7550:	0c03      	lsrs	r3, r0, #16
    7552:	428b      	cmp	r3, r1
    7554:	d30d      	bcc.n	7572 <__divsi3+0x42>
    7556:	22ff      	movs	r2, #255	; 0xff
    7558:	0209      	lsls	r1, r1, #8
    755a:	ba12      	rev	r2, r2
    755c:	0c03      	lsrs	r3, r0, #16
    755e:	428b      	cmp	r3, r1
    7560:	d302      	bcc.n	7568 <__divsi3+0x38>
    7562:	1212      	asrs	r2, r2, #8
    7564:	0209      	lsls	r1, r1, #8
    7566:	d065      	beq.n	7634 <__divsi3+0x104>
    7568:	0b03      	lsrs	r3, r0, #12
    756a:	428b      	cmp	r3, r1
    756c:	d319      	bcc.n	75a2 <__divsi3+0x72>
    756e:	e000      	b.n	7572 <__divsi3+0x42>
    7570:	0a09      	lsrs	r1, r1, #8
    7572:	0bc3      	lsrs	r3, r0, #15
    7574:	428b      	cmp	r3, r1
    7576:	d301      	bcc.n	757c <__divsi3+0x4c>
    7578:	03cb      	lsls	r3, r1, #15
    757a:	1ac0      	subs	r0, r0, r3
    757c:	4152      	adcs	r2, r2
    757e:	0b83      	lsrs	r3, r0, #14
    7580:	428b      	cmp	r3, r1
    7582:	d301      	bcc.n	7588 <__divsi3+0x58>
    7584:	038b      	lsls	r3, r1, #14
    7586:	1ac0      	subs	r0, r0, r3
    7588:	4152      	adcs	r2, r2
    758a:	0b43      	lsrs	r3, r0, #13
    758c:	428b      	cmp	r3, r1
    758e:	d301      	bcc.n	7594 <__divsi3+0x64>
    7590:	034b      	lsls	r3, r1, #13
    7592:	1ac0      	subs	r0, r0, r3
    7594:	4152      	adcs	r2, r2
    7596:	0b03      	lsrs	r3, r0, #12
    7598:	428b      	cmp	r3, r1
    759a:	d301      	bcc.n	75a0 <__divsi3+0x70>
    759c:	030b      	lsls	r3, r1, #12
    759e:	1ac0      	subs	r0, r0, r3
    75a0:	4152      	adcs	r2, r2
    75a2:	0ac3      	lsrs	r3, r0, #11
    75a4:	428b      	cmp	r3, r1
    75a6:	d301      	bcc.n	75ac <__divsi3+0x7c>
    75a8:	02cb      	lsls	r3, r1, #11
    75aa:	1ac0      	subs	r0, r0, r3
    75ac:	4152      	adcs	r2, r2
    75ae:	0a83      	lsrs	r3, r0, #10
    75b0:	428b      	cmp	r3, r1
    75b2:	d301      	bcc.n	75b8 <__divsi3+0x88>
    75b4:	028b      	lsls	r3, r1, #10
    75b6:	1ac0      	subs	r0, r0, r3
    75b8:	4152      	adcs	r2, r2
    75ba:	0a43      	lsrs	r3, r0, #9
    75bc:	428b      	cmp	r3, r1
    75be:	d301      	bcc.n	75c4 <__divsi3+0x94>
    75c0:	024b      	lsls	r3, r1, #9
    75c2:	1ac0      	subs	r0, r0, r3
    75c4:	4152      	adcs	r2, r2
    75c6:	0a03      	lsrs	r3, r0, #8
    75c8:	428b      	cmp	r3, r1
    75ca:	d301      	bcc.n	75d0 <__divsi3+0xa0>
    75cc:	020b      	lsls	r3, r1, #8
    75ce:	1ac0      	subs	r0, r0, r3
    75d0:	4152      	adcs	r2, r2
    75d2:	d2cd      	bcs.n	7570 <__divsi3+0x40>
    75d4:	09c3      	lsrs	r3, r0, #7
    75d6:	428b      	cmp	r3, r1
    75d8:	d301      	bcc.n	75de <__divsi3+0xae>
    75da:	01cb      	lsls	r3, r1, #7
    75dc:	1ac0      	subs	r0, r0, r3
    75de:	4152      	adcs	r2, r2
    75e0:	0983      	lsrs	r3, r0, #6
    75e2:	428b      	cmp	r3, r1
    75e4:	d301      	bcc.n	75ea <__divsi3+0xba>
    75e6:	018b      	lsls	r3, r1, #6
    75e8:	1ac0      	subs	r0, r0, r3
    75ea:	4152      	adcs	r2, r2
    75ec:	0943      	lsrs	r3, r0, #5
    75ee:	428b      	cmp	r3, r1
    75f0:	d301      	bcc.n	75f6 <__divsi3+0xc6>
    75f2:	014b      	lsls	r3, r1, #5
    75f4:	1ac0      	subs	r0, r0, r3
    75f6:	4152      	adcs	r2, r2
    75f8:	0903      	lsrs	r3, r0, #4
    75fa:	428b      	cmp	r3, r1
    75fc:	d301      	bcc.n	7602 <__divsi3+0xd2>
    75fe:	010b      	lsls	r3, r1, #4
    7600:	1ac0      	subs	r0, r0, r3
    7602:	4152      	adcs	r2, r2
    7604:	08c3      	lsrs	r3, r0, #3
    7606:	428b      	cmp	r3, r1
    7608:	d301      	bcc.n	760e <__divsi3+0xde>
    760a:	00cb      	lsls	r3, r1, #3
    760c:	1ac0      	subs	r0, r0, r3
    760e:	4152      	adcs	r2, r2
    7610:	0883      	lsrs	r3, r0, #2
    7612:	428b      	cmp	r3, r1
    7614:	d301      	bcc.n	761a <__divsi3+0xea>
    7616:	008b      	lsls	r3, r1, #2
    7618:	1ac0      	subs	r0, r0, r3
    761a:	4152      	adcs	r2, r2
    761c:	0843      	lsrs	r3, r0, #1
    761e:	428b      	cmp	r3, r1
    7620:	d301      	bcc.n	7626 <__divsi3+0xf6>
    7622:	004b      	lsls	r3, r1, #1
    7624:	1ac0      	subs	r0, r0, r3
    7626:	4152      	adcs	r2, r2
    7628:	1a41      	subs	r1, r0, r1
    762a:	d200      	bcs.n	762e <__divsi3+0xfe>
    762c:	4601      	mov	r1, r0
    762e:	4152      	adcs	r2, r2
    7630:	4610      	mov	r0, r2
    7632:	4770      	bx	lr
    7634:	e05d      	b.n	76f2 <__divsi3+0x1c2>
    7636:	0fca      	lsrs	r2, r1, #31
    7638:	d000      	beq.n	763c <__divsi3+0x10c>
    763a:	4249      	negs	r1, r1
    763c:	1003      	asrs	r3, r0, #32
    763e:	d300      	bcc.n	7642 <__divsi3+0x112>
    7640:	4240      	negs	r0, r0
    7642:	4053      	eors	r3, r2
    7644:	2200      	movs	r2, #0
    7646:	469c      	mov	ip, r3
    7648:	0903      	lsrs	r3, r0, #4
    764a:	428b      	cmp	r3, r1
    764c:	d32d      	bcc.n	76aa <__divsi3+0x17a>
    764e:	0a03      	lsrs	r3, r0, #8
    7650:	428b      	cmp	r3, r1
    7652:	d312      	bcc.n	767a <__divsi3+0x14a>
    7654:	22fc      	movs	r2, #252	; 0xfc
    7656:	0189      	lsls	r1, r1, #6
    7658:	ba12      	rev	r2, r2
    765a:	0a03      	lsrs	r3, r0, #8
    765c:	428b      	cmp	r3, r1
    765e:	d30c      	bcc.n	767a <__divsi3+0x14a>
    7660:	0189      	lsls	r1, r1, #6
    7662:	1192      	asrs	r2, r2, #6
    7664:	428b      	cmp	r3, r1
    7666:	d308      	bcc.n	767a <__divsi3+0x14a>
    7668:	0189      	lsls	r1, r1, #6
    766a:	1192      	asrs	r2, r2, #6
    766c:	428b      	cmp	r3, r1
    766e:	d304      	bcc.n	767a <__divsi3+0x14a>
    7670:	0189      	lsls	r1, r1, #6
    7672:	d03a      	beq.n	76ea <__divsi3+0x1ba>
    7674:	1192      	asrs	r2, r2, #6
    7676:	e000      	b.n	767a <__divsi3+0x14a>
    7678:	0989      	lsrs	r1, r1, #6
    767a:	09c3      	lsrs	r3, r0, #7
    767c:	428b      	cmp	r3, r1
    767e:	d301      	bcc.n	7684 <__divsi3+0x154>
    7680:	01cb      	lsls	r3, r1, #7
    7682:	1ac0      	subs	r0, r0, r3
    7684:	4152      	adcs	r2, r2
    7686:	0983      	lsrs	r3, r0, #6
    7688:	428b      	cmp	r3, r1
    768a:	d301      	bcc.n	7690 <__divsi3+0x160>
    768c:	018b      	lsls	r3, r1, #6
    768e:	1ac0      	subs	r0, r0, r3
    7690:	4152      	adcs	r2, r2
    7692:	0943      	lsrs	r3, r0, #5
    7694:	428b      	cmp	r3, r1
    7696:	d301      	bcc.n	769c <__divsi3+0x16c>
    7698:	014b      	lsls	r3, r1, #5
    769a:	1ac0      	subs	r0, r0, r3
    769c:	4152      	adcs	r2, r2
    769e:	0903      	lsrs	r3, r0, #4
    76a0:	428b      	cmp	r3, r1
    76a2:	d301      	bcc.n	76a8 <__divsi3+0x178>
    76a4:	010b      	lsls	r3, r1, #4
    76a6:	1ac0      	subs	r0, r0, r3
    76a8:	4152      	adcs	r2, r2
    76aa:	08c3      	lsrs	r3, r0, #3
    76ac:	428b      	cmp	r3, r1
    76ae:	d301      	bcc.n	76b4 <__divsi3+0x184>
    76b0:	00cb      	lsls	r3, r1, #3
    76b2:	1ac0      	subs	r0, r0, r3
    76b4:	4152      	adcs	r2, r2
    76b6:	0883      	lsrs	r3, r0, #2
    76b8:	428b      	cmp	r3, r1
    76ba:	d301      	bcc.n	76c0 <__divsi3+0x190>
    76bc:	008b      	lsls	r3, r1, #2
    76be:	1ac0      	subs	r0, r0, r3
    76c0:	4152      	adcs	r2, r2
    76c2:	d2d9      	bcs.n	7678 <__divsi3+0x148>
    76c4:	0843      	lsrs	r3, r0, #1
    76c6:	428b      	cmp	r3, r1
    76c8:	d301      	bcc.n	76ce <__divsi3+0x19e>
    76ca:	004b      	lsls	r3, r1, #1
    76cc:	1ac0      	subs	r0, r0, r3
    76ce:	4152      	adcs	r2, r2
    76d0:	1a41      	subs	r1, r0, r1
    76d2:	d200      	bcs.n	76d6 <__divsi3+0x1a6>
    76d4:	4601      	mov	r1, r0
    76d6:	4663      	mov	r3, ip
    76d8:	4152      	adcs	r2, r2
    76da:	105b      	asrs	r3, r3, #1
    76dc:	4610      	mov	r0, r2
    76de:	d301      	bcc.n	76e4 <__divsi3+0x1b4>
    76e0:	4240      	negs	r0, r0
    76e2:	2b00      	cmp	r3, #0
    76e4:	d500      	bpl.n	76e8 <__divsi3+0x1b8>
    76e6:	4249      	negs	r1, r1
    76e8:	4770      	bx	lr
    76ea:	4663      	mov	r3, ip
    76ec:	105b      	asrs	r3, r3, #1
    76ee:	d300      	bcc.n	76f2 <__divsi3+0x1c2>
    76f0:	4240      	negs	r0, r0
    76f2:	b501      	push	{r0, lr}
    76f4:	2000      	movs	r0, #0
    76f6:	f000 f805 	bl	7704 <__aeabi_idiv0>
    76fa:	bd02      	pop	{r1, pc}

000076fc <__aeabi_idivmod>:
    76fc:	2900      	cmp	r1, #0
    76fe:	d0f8      	beq.n	76f2 <__divsi3+0x1c2>
    7700:	e716      	b.n	7530 <__divsi3>
    7702:	4770      	bx	lr

00007704 <__aeabi_idiv0>:
    7704:	4770      	bx	lr
    7706:	46c0      	nop			; (mov r8, r8)

00007708 <__aeabi_cdrcmple>:
    7708:	4684      	mov	ip, r0
    770a:	1c10      	adds	r0, r2, #0
    770c:	4662      	mov	r2, ip
    770e:	468c      	mov	ip, r1
    7710:	1c19      	adds	r1, r3, #0
    7712:	4663      	mov	r3, ip
    7714:	e000      	b.n	7718 <__aeabi_cdcmpeq>
    7716:	46c0      	nop			; (mov r8, r8)

00007718 <__aeabi_cdcmpeq>:
    7718:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    771a:	f000 ff15 	bl	8548 <__ledf2>
    771e:	2800      	cmp	r0, #0
    7720:	d401      	bmi.n	7726 <__aeabi_cdcmpeq+0xe>
    7722:	2100      	movs	r1, #0
    7724:	42c8      	cmn	r0, r1
    7726:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

00007728 <__aeabi_dcmpeq>:
    7728:	b510      	push	{r4, lr}
    772a:	f000 fe6f 	bl	840c <__eqdf2>
    772e:	4240      	negs	r0, r0
    7730:	3001      	adds	r0, #1
    7732:	bd10      	pop	{r4, pc}

00007734 <__aeabi_dcmplt>:
    7734:	b510      	push	{r4, lr}
    7736:	f000 ff07 	bl	8548 <__ledf2>
    773a:	2800      	cmp	r0, #0
    773c:	db01      	blt.n	7742 <__aeabi_dcmplt+0xe>
    773e:	2000      	movs	r0, #0
    7740:	bd10      	pop	{r4, pc}
    7742:	2001      	movs	r0, #1
    7744:	bd10      	pop	{r4, pc}
    7746:	46c0      	nop			; (mov r8, r8)

00007748 <__aeabi_dcmple>:
    7748:	b510      	push	{r4, lr}
    774a:	f000 fefd 	bl	8548 <__ledf2>
    774e:	2800      	cmp	r0, #0
    7750:	dd01      	ble.n	7756 <__aeabi_dcmple+0xe>
    7752:	2000      	movs	r0, #0
    7754:	bd10      	pop	{r4, pc}
    7756:	2001      	movs	r0, #1
    7758:	bd10      	pop	{r4, pc}
    775a:	46c0      	nop			; (mov r8, r8)

0000775c <__aeabi_dcmpgt>:
    775c:	b510      	push	{r4, lr}
    775e:	f000 fe8f 	bl	8480 <__gedf2>
    7762:	2800      	cmp	r0, #0
    7764:	dc01      	bgt.n	776a <__aeabi_dcmpgt+0xe>
    7766:	2000      	movs	r0, #0
    7768:	bd10      	pop	{r4, pc}
    776a:	2001      	movs	r0, #1
    776c:	bd10      	pop	{r4, pc}
    776e:	46c0      	nop			; (mov r8, r8)

00007770 <__aeabi_dcmpge>:
    7770:	b510      	push	{r4, lr}
    7772:	f000 fe85 	bl	8480 <__gedf2>
    7776:	2800      	cmp	r0, #0
    7778:	da01      	bge.n	777e <__aeabi_dcmpge+0xe>
    777a:	2000      	movs	r0, #0
    777c:	bd10      	pop	{r4, pc}
    777e:	2001      	movs	r0, #1
    7780:	bd10      	pop	{r4, pc}
    7782:	46c0      	nop			; (mov r8, r8)

00007784 <__aeabi_dadd>:
    7784:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7786:	4645      	mov	r5, r8
    7788:	46de      	mov	lr, fp
    778a:	4657      	mov	r7, sl
    778c:	464e      	mov	r6, r9
    778e:	030c      	lsls	r4, r1, #12
    7790:	b5e0      	push	{r5, r6, r7, lr}
    7792:	004e      	lsls	r6, r1, #1
    7794:	0fc9      	lsrs	r1, r1, #31
    7796:	4688      	mov	r8, r1
    7798:	000d      	movs	r5, r1
    779a:	0a61      	lsrs	r1, r4, #9
    779c:	0f44      	lsrs	r4, r0, #29
    779e:	430c      	orrs	r4, r1
    77a0:	00c7      	lsls	r7, r0, #3
    77a2:	0319      	lsls	r1, r3, #12
    77a4:	0058      	lsls	r0, r3, #1
    77a6:	0fdb      	lsrs	r3, r3, #31
    77a8:	469b      	mov	fp, r3
    77aa:	0a4b      	lsrs	r3, r1, #9
    77ac:	0f51      	lsrs	r1, r2, #29
    77ae:	430b      	orrs	r3, r1
    77b0:	0d76      	lsrs	r6, r6, #21
    77b2:	0d40      	lsrs	r0, r0, #21
    77b4:	0019      	movs	r1, r3
    77b6:	00d2      	lsls	r2, r2, #3
    77b8:	45d8      	cmp	r8, fp
    77ba:	d100      	bne.n	77be <__aeabi_dadd+0x3a>
    77bc:	e0ae      	b.n	791c <__aeabi_dadd+0x198>
    77be:	1a35      	subs	r5, r6, r0
    77c0:	2d00      	cmp	r5, #0
    77c2:	dc00      	bgt.n	77c6 <__aeabi_dadd+0x42>
    77c4:	e0f6      	b.n	79b4 <__aeabi_dadd+0x230>
    77c6:	2800      	cmp	r0, #0
    77c8:	d10f      	bne.n	77ea <__aeabi_dadd+0x66>
    77ca:	4313      	orrs	r3, r2
    77cc:	d100      	bne.n	77d0 <__aeabi_dadd+0x4c>
    77ce:	e0db      	b.n	7988 <__aeabi_dadd+0x204>
    77d0:	1e6b      	subs	r3, r5, #1
    77d2:	2b00      	cmp	r3, #0
    77d4:	d000      	beq.n	77d8 <__aeabi_dadd+0x54>
    77d6:	e137      	b.n	7a48 <__aeabi_dadd+0x2c4>
    77d8:	1aba      	subs	r2, r7, r2
    77da:	4297      	cmp	r7, r2
    77dc:	41bf      	sbcs	r7, r7
    77de:	1a64      	subs	r4, r4, r1
    77e0:	427f      	negs	r7, r7
    77e2:	1be4      	subs	r4, r4, r7
    77e4:	2601      	movs	r6, #1
    77e6:	0017      	movs	r7, r2
    77e8:	e024      	b.n	7834 <__aeabi_dadd+0xb0>
    77ea:	4bc6      	ldr	r3, [pc, #792]	; (7b04 <__aeabi_dadd+0x380>)
    77ec:	429e      	cmp	r6, r3
    77ee:	d04d      	beq.n	788c <__aeabi_dadd+0x108>
    77f0:	2380      	movs	r3, #128	; 0x80
    77f2:	041b      	lsls	r3, r3, #16
    77f4:	4319      	orrs	r1, r3
    77f6:	2d38      	cmp	r5, #56	; 0x38
    77f8:	dd00      	ble.n	77fc <__aeabi_dadd+0x78>
    77fa:	e107      	b.n	7a0c <__aeabi_dadd+0x288>
    77fc:	2d1f      	cmp	r5, #31
    77fe:	dd00      	ble.n	7802 <__aeabi_dadd+0x7e>
    7800:	e138      	b.n	7a74 <__aeabi_dadd+0x2f0>
    7802:	2020      	movs	r0, #32
    7804:	1b43      	subs	r3, r0, r5
    7806:	469a      	mov	sl, r3
    7808:	000b      	movs	r3, r1
    780a:	4650      	mov	r0, sl
    780c:	4083      	lsls	r3, r0
    780e:	4699      	mov	r9, r3
    7810:	0013      	movs	r3, r2
    7812:	4648      	mov	r0, r9
    7814:	40eb      	lsrs	r3, r5
    7816:	4318      	orrs	r0, r3
    7818:	0003      	movs	r3, r0
    781a:	4650      	mov	r0, sl
    781c:	4082      	lsls	r2, r0
    781e:	1e50      	subs	r0, r2, #1
    7820:	4182      	sbcs	r2, r0
    7822:	40e9      	lsrs	r1, r5
    7824:	431a      	orrs	r2, r3
    7826:	1aba      	subs	r2, r7, r2
    7828:	1a61      	subs	r1, r4, r1
    782a:	4297      	cmp	r7, r2
    782c:	41a4      	sbcs	r4, r4
    782e:	0017      	movs	r7, r2
    7830:	4264      	negs	r4, r4
    7832:	1b0c      	subs	r4, r1, r4
    7834:	0223      	lsls	r3, r4, #8
    7836:	d562      	bpl.n	78fe <__aeabi_dadd+0x17a>
    7838:	0264      	lsls	r4, r4, #9
    783a:	0a65      	lsrs	r5, r4, #9
    783c:	2d00      	cmp	r5, #0
    783e:	d100      	bne.n	7842 <__aeabi_dadd+0xbe>
    7840:	e0df      	b.n	7a02 <__aeabi_dadd+0x27e>
    7842:	0028      	movs	r0, r5
    7844:	f001 fd04 	bl	9250 <__clzsi2>
    7848:	0003      	movs	r3, r0
    784a:	3b08      	subs	r3, #8
    784c:	2b1f      	cmp	r3, #31
    784e:	dd00      	ble.n	7852 <__aeabi_dadd+0xce>
    7850:	e0d2      	b.n	79f8 <__aeabi_dadd+0x274>
    7852:	2220      	movs	r2, #32
    7854:	003c      	movs	r4, r7
    7856:	1ad2      	subs	r2, r2, r3
    7858:	409d      	lsls	r5, r3
    785a:	40d4      	lsrs	r4, r2
    785c:	409f      	lsls	r7, r3
    785e:	4325      	orrs	r5, r4
    7860:	429e      	cmp	r6, r3
    7862:	dd00      	ble.n	7866 <__aeabi_dadd+0xe2>
    7864:	e0c4      	b.n	79f0 <__aeabi_dadd+0x26c>
    7866:	1b9e      	subs	r6, r3, r6
    7868:	1c73      	adds	r3, r6, #1
    786a:	2b1f      	cmp	r3, #31
    786c:	dd00      	ble.n	7870 <__aeabi_dadd+0xec>
    786e:	e0f1      	b.n	7a54 <__aeabi_dadd+0x2d0>
    7870:	2220      	movs	r2, #32
    7872:	0038      	movs	r0, r7
    7874:	0029      	movs	r1, r5
    7876:	1ad2      	subs	r2, r2, r3
    7878:	40d8      	lsrs	r0, r3
    787a:	4091      	lsls	r1, r2
    787c:	4097      	lsls	r7, r2
    787e:	002c      	movs	r4, r5
    7880:	4301      	orrs	r1, r0
    7882:	1e78      	subs	r0, r7, #1
    7884:	4187      	sbcs	r7, r0
    7886:	40dc      	lsrs	r4, r3
    7888:	2600      	movs	r6, #0
    788a:	430f      	orrs	r7, r1
    788c:	077b      	lsls	r3, r7, #29
    788e:	d009      	beq.n	78a4 <__aeabi_dadd+0x120>
    7890:	230f      	movs	r3, #15
    7892:	403b      	ands	r3, r7
    7894:	2b04      	cmp	r3, #4
    7896:	d005      	beq.n	78a4 <__aeabi_dadd+0x120>
    7898:	1d3b      	adds	r3, r7, #4
    789a:	42bb      	cmp	r3, r7
    789c:	41bf      	sbcs	r7, r7
    789e:	427f      	negs	r7, r7
    78a0:	19e4      	adds	r4, r4, r7
    78a2:	001f      	movs	r7, r3
    78a4:	0223      	lsls	r3, r4, #8
    78a6:	d52c      	bpl.n	7902 <__aeabi_dadd+0x17e>
    78a8:	4b96      	ldr	r3, [pc, #600]	; (7b04 <__aeabi_dadd+0x380>)
    78aa:	3601      	adds	r6, #1
    78ac:	429e      	cmp	r6, r3
    78ae:	d100      	bne.n	78b2 <__aeabi_dadd+0x12e>
    78b0:	e09a      	b.n	79e8 <__aeabi_dadd+0x264>
    78b2:	4645      	mov	r5, r8
    78b4:	4b94      	ldr	r3, [pc, #592]	; (7b08 <__aeabi_dadd+0x384>)
    78b6:	08ff      	lsrs	r7, r7, #3
    78b8:	401c      	ands	r4, r3
    78ba:	0760      	lsls	r0, r4, #29
    78bc:	0576      	lsls	r6, r6, #21
    78be:	0264      	lsls	r4, r4, #9
    78c0:	4307      	orrs	r7, r0
    78c2:	0b24      	lsrs	r4, r4, #12
    78c4:	0d76      	lsrs	r6, r6, #21
    78c6:	2100      	movs	r1, #0
    78c8:	0324      	lsls	r4, r4, #12
    78ca:	0b23      	lsrs	r3, r4, #12
    78cc:	0d0c      	lsrs	r4, r1, #20
    78ce:	4a8f      	ldr	r2, [pc, #572]	; (7b0c <__aeabi_dadd+0x388>)
    78d0:	0524      	lsls	r4, r4, #20
    78d2:	431c      	orrs	r4, r3
    78d4:	4014      	ands	r4, r2
    78d6:	0533      	lsls	r3, r6, #20
    78d8:	4323      	orrs	r3, r4
    78da:	005b      	lsls	r3, r3, #1
    78dc:	07ed      	lsls	r5, r5, #31
    78de:	085b      	lsrs	r3, r3, #1
    78e0:	432b      	orrs	r3, r5
    78e2:	0038      	movs	r0, r7
    78e4:	0019      	movs	r1, r3
    78e6:	bc3c      	pop	{r2, r3, r4, r5}
    78e8:	4690      	mov	r8, r2
    78ea:	4699      	mov	r9, r3
    78ec:	46a2      	mov	sl, r4
    78ee:	46ab      	mov	fp, r5
    78f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    78f2:	4664      	mov	r4, ip
    78f4:	4304      	orrs	r4, r0
    78f6:	d100      	bne.n	78fa <__aeabi_dadd+0x176>
    78f8:	e211      	b.n	7d1e <__aeabi_dadd+0x59a>
    78fa:	0004      	movs	r4, r0
    78fc:	4667      	mov	r7, ip
    78fe:	077b      	lsls	r3, r7, #29
    7900:	d1c6      	bne.n	7890 <__aeabi_dadd+0x10c>
    7902:	4645      	mov	r5, r8
    7904:	0760      	lsls	r0, r4, #29
    7906:	08ff      	lsrs	r7, r7, #3
    7908:	4307      	orrs	r7, r0
    790a:	08e4      	lsrs	r4, r4, #3
    790c:	4b7d      	ldr	r3, [pc, #500]	; (7b04 <__aeabi_dadd+0x380>)
    790e:	429e      	cmp	r6, r3
    7910:	d030      	beq.n	7974 <__aeabi_dadd+0x1f0>
    7912:	0324      	lsls	r4, r4, #12
    7914:	0576      	lsls	r6, r6, #21
    7916:	0b24      	lsrs	r4, r4, #12
    7918:	0d76      	lsrs	r6, r6, #21
    791a:	e7d4      	b.n	78c6 <__aeabi_dadd+0x142>
    791c:	1a33      	subs	r3, r6, r0
    791e:	469a      	mov	sl, r3
    7920:	2b00      	cmp	r3, #0
    7922:	dd78      	ble.n	7a16 <__aeabi_dadd+0x292>
    7924:	2800      	cmp	r0, #0
    7926:	d031      	beq.n	798c <__aeabi_dadd+0x208>
    7928:	4876      	ldr	r0, [pc, #472]	; (7b04 <__aeabi_dadd+0x380>)
    792a:	4286      	cmp	r6, r0
    792c:	d0ae      	beq.n	788c <__aeabi_dadd+0x108>
    792e:	2080      	movs	r0, #128	; 0x80
    7930:	0400      	lsls	r0, r0, #16
    7932:	4301      	orrs	r1, r0
    7934:	4653      	mov	r3, sl
    7936:	2b38      	cmp	r3, #56	; 0x38
    7938:	dc00      	bgt.n	793c <__aeabi_dadd+0x1b8>
    793a:	e0e9      	b.n	7b10 <__aeabi_dadd+0x38c>
    793c:	430a      	orrs	r2, r1
    793e:	1e51      	subs	r1, r2, #1
    7940:	418a      	sbcs	r2, r1
    7942:	2100      	movs	r1, #0
    7944:	19d2      	adds	r2, r2, r7
    7946:	42ba      	cmp	r2, r7
    7948:	41bf      	sbcs	r7, r7
    794a:	1909      	adds	r1, r1, r4
    794c:	427c      	negs	r4, r7
    794e:	0017      	movs	r7, r2
    7950:	190c      	adds	r4, r1, r4
    7952:	0223      	lsls	r3, r4, #8
    7954:	d5d3      	bpl.n	78fe <__aeabi_dadd+0x17a>
    7956:	4b6b      	ldr	r3, [pc, #428]	; (7b04 <__aeabi_dadd+0x380>)
    7958:	3601      	adds	r6, #1
    795a:	429e      	cmp	r6, r3
    795c:	d100      	bne.n	7960 <__aeabi_dadd+0x1dc>
    795e:	e13a      	b.n	7bd6 <__aeabi_dadd+0x452>
    7960:	2001      	movs	r0, #1
    7962:	4b69      	ldr	r3, [pc, #420]	; (7b08 <__aeabi_dadd+0x384>)
    7964:	401c      	ands	r4, r3
    7966:	087b      	lsrs	r3, r7, #1
    7968:	4007      	ands	r7, r0
    796a:	431f      	orrs	r7, r3
    796c:	07e0      	lsls	r0, r4, #31
    796e:	4307      	orrs	r7, r0
    7970:	0864      	lsrs	r4, r4, #1
    7972:	e78b      	b.n	788c <__aeabi_dadd+0x108>
    7974:	0023      	movs	r3, r4
    7976:	433b      	orrs	r3, r7
    7978:	d100      	bne.n	797c <__aeabi_dadd+0x1f8>
    797a:	e1cb      	b.n	7d14 <__aeabi_dadd+0x590>
    797c:	2280      	movs	r2, #128	; 0x80
    797e:	0312      	lsls	r2, r2, #12
    7980:	4314      	orrs	r4, r2
    7982:	0324      	lsls	r4, r4, #12
    7984:	0b24      	lsrs	r4, r4, #12
    7986:	e79e      	b.n	78c6 <__aeabi_dadd+0x142>
    7988:	002e      	movs	r6, r5
    798a:	e77f      	b.n	788c <__aeabi_dadd+0x108>
    798c:	0008      	movs	r0, r1
    798e:	4310      	orrs	r0, r2
    7990:	d100      	bne.n	7994 <__aeabi_dadd+0x210>
    7992:	e0b4      	b.n	7afe <__aeabi_dadd+0x37a>
    7994:	1e58      	subs	r0, r3, #1
    7996:	2800      	cmp	r0, #0
    7998:	d000      	beq.n	799c <__aeabi_dadd+0x218>
    799a:	e0de      	b.n	7b5a <__aeabi_dadd+0x3d6>
    799c:	18ba      	adds	r2, r7, r2
    799e:	42ba      	cmp	r2, r7
    79a0:	419b      	sbcs	r3, r3
    79a2:	1864      	adds	r4, r4, r1
    79a4:	425b      	negs	r3, r3
    79a6:	18e4      	adds	r4, r4, r3
    79a8:	0017      	movs	r7, r2
    79aa:	2601      	movs	r6, #1
    79ac:	0223      	lsls	r3, r4, #8
    79ae:	d5a6      	bpl.n	78fe <__aeabi_dadd+0x17a>
    79b0:	2602      	movs	r6, #2
    79b2:	e7d5      	b.n	7960 <__aeabi_dadd+0x1dc>
    79b4:	2d00      	cmp	r5, #0
    79b6:	d16e      	bne.n	7a96 <__aeabi_dadd+0x312>
    79b8:	1c70      	adds	r0, r6, #1
    79ba:	0540      	lsls	r0, r0, #21
    79bc:	0d40      	lsrs	r0, r0, #21
    79be:	2801      	cmp	r0, #1
    79c0:	dc00      	bgt.n	79c4 <__aeabi_dadd+0x240>
    79c2:	e0f9      	b.n	7bb8 <__aeabi_dadd+0x434>
    79c4:	1ab8      	subs	r0, r7, r2
    79c6:	4684      	mov	ip, r0
    79c8:	4287      	cmp	r7, r0
    79ca:	4180      	sbcs	r0, r0
    79cc:	1ae5      	subs	r5, r4, r3
    79ce:	4240      	negs	r0, r0
    79d0:	1a2d      	subs	r5, r5, r0
    79d2:	0228      	lsls	r0, r5, #8
    79d4:	d400      	bmi.n	79d8 <__aeabi_dadd+0x254>
    79d6:	e089      	b.n	7aec <__aeabi_dadd+0x368>
    79d8:	1bd7      	subs	r7, r2, r7
    79da:	42ba      	cmp	r2, r7
    79dc:	4192      	sbcs	r2, r2
    79de:	1b1c      	subs	r4, r3, r4
    79e0:	4252      	negs	r2, r2
    79e2:	1aa5      	subs	r5, r4, r2
    79e4:	46d8      	mov	r8, fp
    79e6:	e729      	b.n	783c <__aeabi_dadd+0xb8>
    79e8:	4645      	mov	r5, r8
    79ea:	2400      	movs	r4, #0
    79ec:	2700      	movs	r7, #0
    79ee:	e76a      	b.n	78c6 <__aeabi_dadd+0x142>
    79f0:	4c45      	ldr	r4, [pc, #276]	; (7b08 <__aeabi_dadd+0x384>)
    79f2:	1af6      	subs	r6, r6, r3
    79f4:	402c      	ands	r4, r5
    79f6:	e749      	b.n	788c <__aeabi_dadd+0x108>
    79f8:	003d      	movs	r5, r7
    79fa:	3828      	subs	r0, #40	; 0x28
    79fc:	4085      	lsls	r5, r0
    79fe:	2700      	movs	r7, #0
    7a00:	e72e      	b.n	7860 <__aeabi_dadd+0xdc>
    7a02:	0038      	movs	r0, r7
    7a04:	f001 fc24 	bl	9250 <__clzsi2>
    7a08:	3020      	adds	r0, #32
    7a0a:	e71d      	b.n	7848 <__aeabi_dadd+0xc4>
    7a0c:	430a      	orrs	r2, r1
    7a0e:	1e51      	subs	r1, r2, #1
    7a10:	418a      	sbcs	r2, r1
    7a12:	2100      	movs	r1, #0
    7a14:	e707      	b.n	7826 <__aeabi_dadd+0xa2>
    7a16:	2b00      	cmp	r3, #0
    7a18:	d000      	beq.n	7a1c <__aeabi_dadd+0x298>
    7a1a:	e0f3      	b.n	7c04 <__aeabi_dadd+0x480>
    7a1c:	1c70      	adds	r0, r6, #1
    7a1e:	0543      	lsls	r3, r0, #21
    7a20:	0d5b      	lsrs	r3, r3, #21
    7a22:	2b01      	cmp	r3, #1
    7a24:	dc00      	bgt.n	7a28 <__aeabi_dadd+0x2a4>
    7a26:	e0ad      	b.n	7b84 <__aeabi_dadd+0x400>
    7a28:	4b36      	ldr	r3, [pc, #216]	; (7b04 <__aeabi_dadd+0x380>)
    7a2a:	4298      	cmp	r0, r3
    7a2c:	d100      	bne.n	7a30 <__aeabi_dadd+0x2ac>
    7a2e:	e0d1      	b.n	7bd4 <__aeabi_dadd+0x450>
    7a30:	18ba      	adds	r2, r7, r2
    7a32:	42ba      	cmp	r2, r7
    7a34:	41bf      	sbcs	r7, r7
    7a36:	1864      	adds	r4, r4, r1
    7a38:	427f      	negs	r7, r7
    7a3a:	19e4      	adds	r4, r4, r7
    7a3c:	07e7      	lsls	r7, r4, #31
    7a3e:	0852      	lsrs	r2, r2, #1
    7a40:	4317      	orrs	r7, r2
    7a42:	0864      	lsrs	r4, r4, #1
    7a44:	0006      	movs	r6, r0
    7a46:	e721      	b.n	788c <__aeabi_dadd+0x108>
    7a48:	482e      	ldr	r0, [pc, #184]	; (7b04 <__aeabi_dadd+0x380>)
    7a4a:	4285      	cmp	r5, r0
    7a4c:	d100      	bne.n	7a50 <__aeabi_dadd+0x2cc>
    7a4e:	e093      	b.n	7b78 <__aeabi_dadd+0x3f4>
    7a50:	001d      	movs	r5, r3
    7a52:	e6d0      	b.n	77f6 <__aeabi_dadd+0x72>
    7a54:	0029      	movs	r1, r5
    7a56:	3e1f      	subs	r6, #31
    7a58:	40f1      	lsrs	r1, r6
    7a5a:	2b20      	cmp	r3, #32
    7a5c:	d100      	bne.n	7a60 <__aeabi_dadd+0x2dc>
    7a5e:	e08d      	b.n	7b7c <__aeabi_dadd+0x3f8>
    7a60:	2240      	movs	r2, #64	; 0x40
    7a62:	1ad3      	subs	r3, r2, r3
    7a64:	409d      	lsls	r5, r3
    7a66:	432f      	orrs	r7, r5
    7a68:	1e7d      	subs	r5, r7, #1
    7a6a:	41af      	sbcs	r7, r5
    7a6c:	2400      	movs	r4, #0
    7a6e:	430f      	orrs	r7, r1
    7a70:	2600      	movs	r6, #0
    7a72:	e744      	b.n	78fe <__aeabi_dadd+0x17a>
    7a74:	002b      	movs	r3, r5
    7a76:	0008      	movs	r0, r1
    7a78:	3b20      	subs	r3, #32
    7a7a:	40d8      	lsrs	r0, r3
    7a7c:	0003      	movs	r3, r0
    7a7e:	2d20      	cmp	r5, #32
    7a80:	d100      	bne.n	7a84 <__aeabi_dadd+0x300>
    7a82:	e07d      	b.n	7b80 <__aeabi_dadd+0x3fc>
    7a84:	2040      	movs	r0, #64	; 0x40
    7a86:	1b45      	subs	r5, r0, r5
    7a88:	40a9      	lsls	r1, r5
    7a8a:	430a      	orrs	r2, r1
    7a8c:	1e51      	subs	r1, r2, #1
    7a8e:	418a      	sbcs	r2, r1
    7a90:	2100      	movs	r1, #0
    7a92:	431a      	orrs	r2, r3
    7a94:	e6c7      	b.n	7826 <__aeabi_dadd+0xa2>
    7a96:	2e00      	cmp	r6, #0
    7a98:	d050      	beq.n	7b3c <__aeabi_dadd+0x3b8>
    7a9a:	4e1a      	ldr	r6, [pc, #104]	; (7b04 <__aeabi_dadd+0x380>)
    7a9c:	42b0      	cmp	r0, r6
    7a9e:	d057      	beq.n	7b50 <__aeabi_dadd+0x3cc>
    7aa0:	2680      	movs	r6, #128	; 0x80
    7aa2:	426b      	negs	r3, r5
    7aa4:	4699      	mov	r9, r3
    7aa6:	0436      	lsls	r6, r6, #16
    7aa8:	4334      	orrs	r4, r6
    7aaa:	464b      	mov	r3, r9
    7aac:	2b38      	cmp	r3, #56	; 0x38
    7aae:	dd00      	ble.n	7ab2 <__aeabi_dadd+0x32e>
    7ab0:	e0d6      	b.n	7c60 <__aeabi_dadd+0x4dc>
    7ab2:	2b1f      	cmp	r3, #31
    7ab4:	dd00      	ble.n	7ab8 <__aeabi_dadd+0x334>
    7ab6:	e135      	b.n	7d24 <__aeabi_dadd+0x5a0>
    7ab8:	2620      	movs	r6, #32
    7aba:	1af5      	subs	r5, r6, r3
    7abc:	0026      	movs	r6, r4
    7abe:	40ae      	lsls	r6, r5
    7ac0:	46b2      	mov	sl, r6
    7ac2:	003e      	movs	r6, r7
    7ac4:	40de      	lsrs	r6, r3
    7ac6:	46ac      	mov	ip, r5
    7ac8:	0035      	movs	r5, r6
    7aca:	4656      	mov	r6, sl
    7acc:	432e      	orrs	r6, r5
    7ace:	4665      	mov	r5, ip
    7ad0:	40af      	lsls	r7, r5
    7ad2:	1e7d      	subs	r5, r7, #1
    7ad4:	41af      	sbcs	r7, r5
    7ad6:	40dc      	lsrs	r4, r3
    7ad8:	4337      	orrs	r7, r6
    7ada:	1bd7      	subs	r7, r2, r7
    7adc:	42ba      	cmp	r2, r7
    7ade:	4192      	sbcs	r2, r2
    7ae0:	1b0c      	subs	r4, r1, r4
    7ae2:	4252      	negs	r2, r2
    7ae4:	1aa4      	subs	r4, r4, r2
    7ae6:	0006      	movs	r6, r0
    7ae8:	46d8      	mov	r8, fp
    7aea:	e6a3      	b.n	7834 <__aeabi_dadd+0xb0>
    7aec:	4664      	mov	r4, ip
    7aee:	4667      	mov	r7, ip
    7af0:	432c      	orrs	r4, r5
    7af2:	d000      	beq.n	7af6 <__aeabi_dadd+0x372>
    7af4:	e6a2      	b.n	783c <__aeabi_dadd+0xb8>
    7af6:	2500      	movs	r5, #0
    7af8:	2600      	movs	r6, #0
    7afa:	2700      	movs	r7, #0
    7afc:	e706      	b.n	790c <__aeabi_dadd+0x188>
    7afe:	001e      	movs	r6, r3
    7b00:	e6c4      	b.n	788c <__aeabi_dadd+0x108>
    7b02:	46c0      	nop			; (mov r8, r8)
    7b04:	000007ff 	.word	0x000007ff
    7b08:	ff7fffff 	.word	0xff7fffff
    7b0c:	800fffff 	.word	0x800fffff
    7b10:	2b1f      	cmp	r3, #31
    7b12:	dc63      	bgt.n	7bdc <__aeabi_dadd+0x458>
    7b14:	2020      	movs	r0, #32
    7b16:	1ac3      	subs	r3, r0, r3
    7b18:	0008      	movs	r0, r1
    7b1a:	4098      	lsls	r0, r3
    7b1c:	469c      	mov	ip, r3
    7b1e:	4683      	mov	fp, r0
    7b20:	4653      	mov	r3, sl
    7b22:	0010      	movs	r0, r2
    7b24:	40d8      	lsrs	r0, r3
    7b26:	0003      	movs	r3, r0
    7b28:	4658      	mov	r0, fp
    7b2a:	4318      	orrs	r0, r3
    7b2c:	4663      	mov	r3, ip
    7b2e:	409a      	lsls	r2, r3
    7b30:	1e53      	subs	r3, r2, #1
    7b32:	419a      	sbcs	r2, r3
    7b34:	4653      	mov	r3, sl
    7b36:	4302      	orrs	r2, r0
    7b38:	40d9      	lsrs	r1, r3
    7b3a:	e703      	b.n	7944 <__aeabi_dadd+0x1c0>
    7b3c:	0026      	movs	r6, r4
    7b3e:	433e      	orrs	r6, r7
    7b40:	d006      	beq.n	7b50 <__aeabi_dadd+0x3cc>
    7b42:	43eb      	mvns	r3, r5
    7b44:	4699      	mov	r9, r3
    7b46:	2b00      	cmp	r3, #0
    7b48:	d0c7      	beq.n	7ada <__aeabi_dadd+0x356>
    7b4a:	4e94      	ldr	r6, [pc, #592]	; (7d9c <__aeabi_dadd+0x618>)
    7b4c:	42b0      	cmp	r0, r6
    7b4e:	d1ac      	bne.n	7aaa <__aeabi_dadd+0x326>
    7b50:	000c      	movs	r4, r1
    7b52:	0017      	movs	r7, r2
    7b54:	0006      	movs	r6, r0
    7b56:	46d8      	mov	r8, fp
    7b58:	e698      	b.n	788c <__aeabi_dadd+0x108>
    7b5a:	4b90      	ldr	r3, [pc, #576]	; (7d9c <__aeabi_dadd+0x618>)
    7b5c:	459a      	cmp	sl, r3
    7b5e:	d00b      	beq.n	7b78 <__aeabi_dadd+0x3f4>
    7b60:	4682      	mov	sl, r0
    7b62:	e6e7      	b.n	7934 <__aeabi_dadd+0x1b0>
    7b64:	2800      	cmp	r0, #0
    7b66:	d000      	beq.n	7b6a <__aeabi_dadd+0x3e6>
    7b68:	e09e      	b.n	7ca8 <__aeabi_dadd+0x524>
    7b6a:	0018      	movs	r0, r3
    7b6c:	4310      	orrs	r0, r2
    7b6e:	d100      	bne.n	7b72 <__aeabi_dadd+0x3ee>
    7b70:	e0e9      	b.n	7d46 <__aeabi_dadd+0x5c2>
    7b72:	001c      	movs	r4, r3
    7b74:	0017      	movs	r7, r2
    7b76:	46d8      	mov	r8, fp
    7b78:	4e88      	ldr	r6, [pc, #544]	; (7d9c <__aeabi_dadd+0x618>)
    7b7a:	e687      	b.n	788c <__aeabi_dadd+0x108>
    7b7c:	2500      	movs	r5, #0
    7b7e:	e772      	b.n	7a66 <__aeabi_dadd+0x2e2>
    7b80:	2100      	movs	r1, #0
    7b82:	e782      	b.n	7a8a <__aeabi_dadd+0x306>
    7b84:	0023      	movs	r3, r4
    7b86:	433b      	orrs	r3, r7
    7b88:	2e00      	cmp	r6, #0
    7b8a:	d000      	beq.n	7b8e <__aeabi_dadd+0x40a>
    7b8c:	e0ab      	b.n	7ce6 <__aeabi_dadd+0x562>
    7b8e:	2b00      	cmp	r3, #0
    7b90:	d100      	bne.n	7b94 <__aeabi_dadd+0x410>
    7b92:	e0e7      	b.n	7d64 <__aeabi_dadd+0x5e0>
    7b94:	000b      	movs	r3, r1
    7b96:	4313      	orrs	r3, r2
    7b98:	d100      	bne.n	7b9c <__aeabi_dadd+0x418>
    7b9a:	e677      	b.n	788c <__aeabi_dadd+0x108>
    7b9c:	18ba      	adds	r2, r7, r2
    7b9e:	42ba      	cmp	r2, r7
    7ba0:	41bf      	sbcs	r7, r7
    7ba2:	1864      	adds	r4, r4, r1
    7ba4:	427f      	negs	r7, r7
    7ba6:	19e4      	adds	r4, r4, r7
    7ba8:	0223      	lsls	r3, r4, #8
    7baa:	d400      	bmi.n	7bae <__aeabi_dadd+0x42a>
    7bac:	e0f2      	b.n	7d94 <__aeabi_dadd+0x610>
    7bae:	4b7c      	ldr	r3, [pc, #496]	; (7da0 <__aeabi_dadd+0x61c>)
    7bb0:	0017      	movs	r7, r2
    7bb2:	401c      	ands	r4, r3
    7bb4:	0006      	movs	r6, r0
    7bb6:	e669      	b.n	788c <__aeabi_dadd+0x108>
    7bb8:	0020      	movs	r0, r4
    7bba:	4338      	orrs	r0, r7
    7bbc:	2e00      	cmp	r6, #0
    7bbe:	d1d1      	bne.n	7b64 <__aeabi_dadd+0x3e0>
    7bc0:	2800      	cmp	r0, #0
    7bc2:	d15b      	bne.n	7c7c <__aeabi_dadd+0x4f8>
    7bc4:	001c      	movs	r4, r3
    7bc6:	4314      	orrs	r4, r2
    7bc8:	d100      	bne.n	7bcc <__aeabi_dadd+0x448>
    7bca:	e0a8      	b.n	7d1e <__aeabi_dadd+0x59a>
    7bcc:	001c      	movs	r4, r3
    7bce:	0017      	movs	r7, r2
    7bd0:	46d8      	mov	r8, fp
    7bd2:	e65b      	b.n	788c <__aeabi_dadd+0x108>
    7bd4:	0006      	movs	r6, r0
    7bd6:	2400      	movs	r4, #0
    7bd8:	2700      	movs	r7, #0
    7bda:	e697      	b.n	790c <__aeabi_dadd+0x188>
    7bdc:	4650      	mov	r0, sl
    7bde:	000b      	movs	r3, r1
    7be0:	3820      	subs	r0, #32
    7be2:	40c3      	lsrs	r3, r0
    7be4:	4699      	mov	r9, r3
    7be6:	4653      	mov	r3, sl
    7be8:	2b20      	cmp	r3, #32
    7bea:	d100      	bne.n	7bee <__aeabi_dadd+0x46a>
    7bec:	e095      	b.n	7d1a <__aeabi_dadd+0x596>
    7bee:	2340      	movs	r3, #64	; 0x40
    7bf0:	4650      	mov	r0, sl
    7bf2:	1a1b      	subs	r3, r3, r0
    7bf4:	4099      	lsls	r1, r3
    7bf6:	430a      	orrs	r2, r1
    7bf8:	1e51      	subs	r1, r2, #1
    7bfa:	418a      	sbcs	r2, r1
    7bfc:	464b      	mov	r3, r9
    7bfe:	2100      	movs	r1, #0
    7c00:	431a      	orrs	r2, r3
    7c02:	e69f      	b.n	7944 <__aeabi_dadd+0x1c0>
    7c04:	2e00      	cmp	r6, #0
    7c06:	d130      	bne.n	7c6a <__aeabi_dadd+0x4e6>
    7c08:	0026      	movs	r6, r4
    7c0a:	433e      	orrs	r6, r7
    7c0c:	d067      	beq.n	7cde <__aeabi_dadd+0x55a>
    7c0e:	43db      	mvns	r3, r3
    7c10:	469a      	mov	sl, r3
    7c12:	2b00      	cmp	r3, #0
    7c14:	d01c      	beq.n	7c50 <__aeabi_dadd+0x4cc>
    7c16:	4e61      	ldr	r6, [pc, #388]	; (7d9c <__aeabi_dadd+0x618>)
    7c18:	42b0      	cmp	r0, r6
    7c1a:	d060      	beq.n	7cde <__aeabi_dadd+0x55a>
    7c1c:	4653      	mov	r3, sl
    7c1e:	2b38      	cmp	r3, #56	; 0x38
    7c20:	dd00      	ble.n	7c24 <__aeabi_dadd+0x4a0>
    7c22:	e096      	b.n	7d52 <__aeabi_dadd+0x5ce>
    7c24:	2b1f      	cmp	r3, #31
    7c26:	dd00      	ble.n	7c2a <__aeabi_dadd+0x4a6>
    7c28:	e09f      	b.n	7d6a <__aeabi_dadd+0x5e6>
    7c2a:	2620      	movs	r6, #32
    7c2c:	1af3      	subs	r3, r6, r3
    7c2e:	0026      	movs	r6, r4
    7c30:	409e      	lsls	r6, r3
    7c32:	469c      	mov	ip, r3
    7c34:	46b3      	mov	fp, r6
    7c36:	4653      	mov	r3, sl
    7c38:	003e      	movs	r6, r7
    7c3a:	40de      	lsrs	r6, r3
    7c3c:	0033      	movs	r3, r6
    7c3e:	465e      	mov	r6, fp
    7c40:	431e      	orrs	r6, r3
    7c42:	4663      	mov	r3, ip
    7c44:	409f      	lsls	r7, r3
    7c46:	1e7b      	subs	r3, r7, #1
    7c48:	419f      	sbcs	r7, r3
    7c4a:	4653      	mov	r3, sl
    7c4c:	40dc      	lsrs	r4, r3
    7c4e:	4337      	orrs	r7, r6
    7c50:	18bf      	adds	r7, r7, r2
    7c52:	4297      	cmp	r7, r2
    7c54:	4192      	sbcs	r2, r2
    7c56:	1864      	adds	r4, r4, r1
    7c58:	4252      	negs	r2, r2
    7c5a:	18a4      	adds	r4, r4, r2
    7c5c:	0006      	movs	r6, r0
    7c5e:	e678      	b.n	7952 <__aeabi_dadd+0x1ce>
    7c60:	4327      	orrs	r7, r4
    7c62:	1e7c      	subs	r4, r7, #1
    7c64:	41a7      	sbcs	r7, r4
    7c66:	2400      	movs	r4, #0
    7c68:	e737      	b.n	7ada <__aeabi_dadd+0x356>
    7c6a:	4e4c      	ldr	r6, [pc, #304]	; (7d9c <__aeabi_dadd+0x618>)
    7c6c:	42b0      	cmp	r0, r6
    7c6e:	d036      	beq.n	7cde <__aeabi_dadd+0x55a>
    7c70:	2680      	movs	r6, #128	; 0x80
    7c72:	425b      	negs	r3, r3
    7c74:	0436      	lsls	r6, r6, #16
    7c76:	469a      	mov	sl, r3
    7c78:	4334      	orrs	r4, r6
    7c7a:	e7cf      	b.n	7c1c <__aeabi_dadd+0x498>
    7c7c:	0018      	movs	r0, r3
    7c7e:	4310      	orrs	r0, r2
    7c80:	d100      	bne.n	7c84 <__aeabi_dadd+0x500>
    7c82:	e603      	b.n	788c <__aeabi_dadd+0x108>
    7c84:	1ab8      	subs	r0, r7, r2
    7c86:	4684      	mov	ip, r0
    7c88:	4567      	cmp	r7, ip
    7c8a:	41ad      	sbcs	r5, r5
    7c8c:	1ae0      	subs	r0, r4, r3
    7c8e:	426d      	negs	r5, r5
    7c90:	1b40      	subs	r0, r0, r5
    7c92:	0205      	lsls	r5, r0, #8
    7c94:	d400      	bmi.n	7c98 <__aeabi_dadd+0x514>
    7c96:	e62c      	b.n	78f2 <__aeabi_dadd+0x16e>
    7c98:	1bd7      	subs	r7, r2, r7
    7c9a:	42ba      	cmp	r2, r7
    7c9c:	4192      	sbcs	r2, r2
    7c9e:	1b1c      	subs	r4, r3, r4
    7ca0:	4252      	negs	r2, r2
    7ca2:	1aa4      	subs	r4, r4, r2
    7ca4:	46d8      	mov	r8, fp
    7ca6:	e5f1      	b.n	788c <__aeabi_dadd+0x108>
    7ca8:	0018      	movs	r0, r3
    7caa:	4310      	orrs	r0, r2
    7cac:	d100      	bne.n	7cb0 <__aeabi_dadd+0x52c>
    7cae:	e763      	b.n	7b78 <__aeabi_dadd+0x3f4>
    7cb0:	08f8      	lsrs	r0, r7, #3
    7cb2:	0767      	lsls	r7, r4, #29
    7cb4:	4307      	orrs	r7, r0
    7cb6:	2080      	movs	r0, #128	; 0x80
    7cb8:	08e4      	lsrs	r4, r4, #3
    7cba:	0300      	lsls	r0, r0, #12
    7cbc:	4204      	tst	r4, r0
    7cbe:	d008      	beq.n	7cd2 <__aeabi_dadd+0x54e>
    7cc0:	08dd      	lsrs	r5, r3, #3
    7cc2:	4205      	tst	r5, r0
    7cc4:	d105      	bne.n	7cd2 <__aeabi_dadd+0x54e>
    7cc6:	08d2      	lsrs	r2, r2, #3
    7cc8:	0759      	lsls	r1, r3, #29
    7cca:	4311      	orrs	r1, r2
    7ccc:	000f      	movs	r7, r1
    7cce:	002c      	movs	r4, r5
    7cd0:	46d8      	mov	r8, fp
    7cd2:	0f7b      	lsrs	r3, r7, #29
    7cd4:	00e4      	lsls	r4, r4, #3
    7cd6:	431c      	orrs	r4, r3
    7cd8:	00ff      	lsls	r7, r7, #3
    7cda:	4e30      	ldr	r6, [pc, #192]	; (7d9c <__aeabi_dadd+0x618>)
    7cdc:	e5d6      	b.n	788c <__aeabi_dadd+0x108>
    7cde:	000c      	movs	r4, r1
    7ce0:	0017      	movs	r7, r2
    7ce2:	0006      	movs	r6, r0
    7ce4:	e5d2      	b.n	788c <__aeabi_dadd+0x108>
    7ce6:	2b00      	cmp	r3, #0
    7ce8:	d038      	beq.n	7d5c <__aeabi_dadd+0x5d8>
    7cea:	000b      	movs	r3, r1
    7cec:	4313      	orrs	r3, r2
    7cee:	d100      	bne.n	7cf2 <__aeabi_dadd+0x56e>
    7cf0:	e742      	b.n	7b78 <__aeabi_dadd+0x3f4>
    7cf2:	08f8      	lsrs	r0, r7, #3
    7cf4:	0767      	lsls	r7, r4, #29
    7cf6:	4307      	orrs	r7, r0
    7cf8:	2080      	movs	r0, #128	; 0x80
    7cfa:	08e4      	lsrs	r4, r4, #3
    7cfc:	0300      	lsls	r0, r0, #12
    7cfe:	4204      	tst	r4, r0
    7d00:	d0e7      	beq.n	7cd2 <__aeabi_dadd+0x54e>
    7d02:	08cb      	lsrs	r3, r1, #3
    7d04:	4203      	tst	r3, r0
    7d06:	d1e4      	bne.n	7cd2 <__aeabi_dadd+0x54e>
    7d08:	08d2      	lsrs	r2, r2, #3
    7d0a:	0749      	lsls	r1, r1, #29
    7d0c:	4311      	orrs	r1, r2
    7d0e:	000f      	movs	r7, r1
    7d10:	001c      	movs	r4, r3
    7d12:	e7de      	b.n	7cd2 <__aeabi_dadd+0x54e>
    7d14:	2700      	movs	r7, #0
    7d16:	2400      	movs	r4, #0
    7d18:	e5d5      	b.n	78c6 <__aeabi_dadd+0x142>
    7d1a:	2100      	movs	r1, #0
    7d1c:	e76b      	b.n	7bf6 <__aeabi_dadd+0x472>
    7d1e:	2500      	movs	r5, #0
    7d20:	2700      	movs	r7, #0
    7d22:	e5f3      	b.n	790c <__aeabi_dadd+0x188>
    7d24:	464e      	mov	r6, r9
    7d26:	0025      	movs	r5, r4
    7d28:	3e20      	subs	r6, #32
    7d2a:	40f5      	lsrs	r5, r6
    7d2c:	464b      	mov	r3, r9
    7d2e:	002e      	movs	r6, r5
    7d30:	2b20      	cmp	r3, #32
    7d32:	d02d      	beq.n	7d90 <__aeabi_dadd+0x60c>
    7d34:	2540      	movs	r5, #64	; 0x40
    7d36:	1aed      	subs	r5, r5, r3
    7d38:	40ac      	lsls	r4, r5
    7d3a:	4327      	orrs	r7, r4
    7d3c:	1e7c      	subs	r4, r7, #1
    7d3e:	41a7      	sbcs	r7, r4
    7d40:	2400      	movs	r4, #0
    7d42:	4337      	orrs	r7, r6
    7d44:	e6c9      	b.n	7ada <__aeabi_dadd+0x356>
    7d46:	2480      	movs	r4, #128	; 0x80
    7d48:	2500      	movs	r5, #0
    7d4a:	0324      	lsls	r4, r4, #12
    7d4c:	4e13      	ldr	r6, [pc, #76]	; (7d9c <__aeabi_dadd+0x618>)
    7d4e:	2700      	movs	r7, #0
    7d50:	e5dc      	b.n	790c <__aeabi_dadd+0x188>
    7d52:	4327      	orrs	r7, r4
    7d54:	1e7c      	subs	r4, r7, #1
    7d56:	41a7      	sbcs	r7, r4
    7d58:	2400      	movs	r4, #0
    7d5a:	e779      	b.n	7c50 <__aeabi_dadd+0x4cc>
    7d5c:	000c      	movs	r4, r1
    7d5e:	0017      	movs	r7, r2
    7d60:	4e0e      	ldr	r6, [pc, #56]	; (7d9c <__aeabi_dadd+0x618>)
    7d62:	e593      	b.n	788c <__aeabi_dadd+0x108>
    7d64:	000c      	movs	r4, r1
    7d66:	0017      	movs	r7, r2
    7d68:	e590      	b.n	788c <__aeabi_dadd+0x108>
    7d6a:	4656      	mov	r6, sl
    7d6c:	0023      	movs	r3, r4
    7d6e:	3e20      	subs	r6, #32
    7d70:	40f3      	lsrs	r3, r6
    7d72:	4699      	mov	r9, r3
    7d74:	4653      	mov	r3, sl
    7d76:	2b20      	cmp	r3, #32
    7d78:	d00e      	beq.n	7d98 <__aeabi_dadd+0x614>
    7d7a:	2340      	movs	r3, #64	; 0x40
    7d7c:	4656      	mov	r6, sl
    7d7e:	1b9b      	subs	r3, r3, r6
    7d80:	409c      	lsls	r4, r3
    7d82:	4327      	orrs	r7, r4
    7d84:	1e7c      	subs	r4, r7, #1
    7d86:	41a7      	sbcs	r7, r4
    7d88:	464b      	mov	r3, r9
    7d8a:	2400      	movs	r4, #0
    7d8c:	431f      	orrs	r7, r3
    7d8e:	e75f      	b.n	7c50 <__aeabi_dadd+0x4cc>
    7d90:	2400      	movs	r4, #0
    7d92:	e7d2      	b.n	7d3a <__aeabi_dadd+0x5b6>
    7d94:	0017      	movs	r7, r2
    7d96:	e5b2      	b.n	78fe <__aeabi_dadd+0x17a>
    7d98:	2400      	movs	r4, #0
    7d9a:	e7f2      	b.n	7d82 <__aeabi_dadd+0x5fe>
    7d9c:	000007ff 	.word	0x000007ff
    7da0:	ff7fffff 	.word	0xff7fffff

00007da4 <__aeabi_ddiv>:
    7da4:	b5f0      	push	{r4, r5, r6, r7, lr}
    7da6:	4657      	mov	r7, sl
    7da8:	4645      	mov	r5, r8
    7daa:	46de      	mov	lr, fp
    7dac:	464e      	mov	r6, r9
    7dae:	b5e0      	push	{r5, r6, r7, lr}
    7db0:	004c      	lsls	r4, r1, #1
    7db2:	030e      	lsls	r6, r1, #12
    7db4:	b087      	sub	sp, #28
    7db6:	4683      	mov	fp, r0
    7db8:	4692      	mov	sl, r2
    7dba:	001d      	movs	r5, r3
    7dbc:	4680      	mov	r8, r0
    7dbe:	0b36      	lsrs	r6, r6, #12
    7dc0:	0d64      	lsrs	r4, r4, #21
    7dc2:	0fcf      	lsrs	r7, r1, #31
    7dc4:	2c00      	cmp	r4, #0
    7dc6:	d04f      	beq.n	7e68 <__aeabi_ddiv+0xc4>
    7dc8:	4b6f      	ldr	r3, [pc, #444]	; (7f88 <__aeabi_ddiv+0x1e4>)
    7dca:	429c      	cmp	r4, r3
    7dcc:	d035      	beq.n	7e3a <__aeabi_ddiv+0x96>
    7dce:	2380      	movs	r3, #128	; 0x80
    7dd0:	0f42      	lsrs	r2, r0, #29
    7dd2:	041b      	lsls	r3, r3, #16
    7dd4:	00f6      	lsls	r6, r6, #3
    7dd6:	4313      	orrs	r3, r2
    7dd8:	4333      	orrs	r3, r6
    7dda:	4699      	mov	r9, r3
    7ddc:	00c3      	lsls	r3, r0, #3
    7dde:	4698      	mov	r8, r3
    7de0:	4b6a      	ldr	r3, [pc, #424]	; (7f8c <__aeabi_ddiv+0x1e8>)
    7de2:	2600      	movs	r6, #0
    7de4:	469c      	mov	ip, r3
    7de6:	2300      	movs	r3, #0
    7de8:	4464      	add	r4, ip
    7dea:	9303      	str	r3, [sp, #12]
    7dec:	032b      	lsls	r3, r5, #12
    7dee:	0b1b      	lsrs	r3, r3, #12
    7df0:	469b      	mov	fp, r3
    7df2:	006b      	lsls	r3, r5, #1
    7df4:	0fed      	lsrs	r5, r5, #31
    7df6:	4650      	mov	r0, sl
    7df8:	0d5b      	lsrs	r3, r3, #21
    7dfa:	9501      	str	r5, [sp, #4]
    7dfc:	d05e      	beq.n	7ebc <__aeabi_ddiv+0x118>
    7dfe:	4a62      	ldr	r2, [pc, #392]	; (7f88 <__aeabi_ddiv+0x1e4>)
    7e00:	4293      	cmp	r3, r2
    7e02:	d053      	beq.n	7eac <__aeabi_ddiv+0x108>
    7e04:	465a      	mov	r2, fp
    7e06:	00d1      	lsls	r1, r2, #3
    7e08:	2280      	movs	r2, #128	; 0x80
    7e0a:	0f40      	lsrs	r0, r0, #29
    7e0c:	0412      	lsls	r2, r2, #16
    7e0e:	4302      	orrs	r2, r0
    7e10:	430a      	orrs	r2, r1
    7e12:	4693      	mov	fp, r2
    7e14:	4652      	mov	r2, sl
    7e16:	00d1      	lsls	r1, r2, #3
    7e18:	4a5c      	ldr	r2, [pc, #368]	; (7f8c <__aeabi_ddiv+0x1e8>)
    7e1a:	4694      	mov	ip, r2
    7e1c:	2200      	movs	r2, #0
    7e1e:	4463      	add	r3, ip
    7e20:	0038      	movs	r0, r7
    7e22:	4068      	eors	r0, r5
    7e24:	4684      	mov	ip, r0
    7e26:	9002      	str	r0, [sp, #8]
    7e28:	1ae4      	subs	r4, r4, r3
    7e2a:	4316      	orrs	r6, r2
    7e2c:	2e0f      	cmp	r6, #15
    7e2e:	d900      	bls.n	7e32 <__aeabi_ddiv+0x8e>
    7e30:	e0b4      	b.n	7f9c <__aeabi_ddiv+0x1f8>
    7e32:	4b57      	ldr	r3, [pc, #348]	; (7f90 <__aeabi_ddiv+0x1ec>)
    7e34:	00b6      	lsls	r6, r6, #2
    7e36:	599b      	ldr	r3, [r3, r6]
    7e38:	469f      	mov	pc, r3
    7e3a:	0003      	movs	r3, r0
    7e3c:	4333      	orrs	r3, r6
    7e3e:	4699      	mov	r9, r3
    7e40:	d16c      	bne.n	7f1c <__aeabi_ddiv+0x178>
    7e42:	2300      	movs	r3, #0
    7e44:	4698      	mov	r8, r3
    7e46:	3302      	adds	r3, #2
    7e48:	2608      	movs	r6, #8
    7e4a:	9303      	str	r3, [sp, #12]
    7e4c:	e7ce      	b.n	7dec <__aeabi_ddiv+0x48>
    7e4e:	46cb      	mov	fp, r9
    7e50:	4641      	mov	r1, r8
    7e52:	9a03      	ldr	r2, [sp, #12]
    7e54:	9701      	str	r7, [sp, #4]
    7e56:	2a02      	cmp	r2, #2
    7e58:	d165      	bne.n	7f26 <__aeabi_ddiv+0x182>
    7e5a:	9b01      	ldr	r3, [sp, #4]
    7e5c:	4c4a      	ldr	r4, [pc, #296]	; (7f88 <__aeabi_ddiv+0x1e4>)
    7e5e:	469c      	mov	ip, r3
    7e60:	2300      	movs	r3, #0
    7e62:	2200      	movs	r2, #0
    7e64:	4698      	mov	r8, r3
    7e66:	e06b      	b.n	7f40 <__aeabi_ddiv+0x19c>
    7e68:	0003      	movs	r3, r0
    7e6a:	4333      	orrs	r3, r6
    7e6c:	4699      	mov	r9, r3
    7e6e:	d04e      	beq.n	7f0e <__aeabi_ddiv+0x16a>
    7e70:	2e00      	cmp	r6, #0
    7e72:	d100      	bne.n	7e76 <__aeabi_ddiv+0xd2>
    7e74:	e1bc      	b.n	81f0 <__aeabi_ddiv+0x44c>
    7e76:	0030      	movs	r0, r6
    7e78:	f001 f9ea 	bl	9250 <__clzsi2>
    7e7c:	0003      	movs	r3, r0
    7e7e:	3b0b      	subs	r3, #11
    7e80:	2b1c      	cmp	r3, #28
    7e82:	dd00      	ble.n	7e86 <__aeabi_ddiv+0xe2>
    7e84:	e1ac      	b.n	81e0 <__aeabi_ddiv+0x43c>
    7e86:	221d      	movs	r2, #29
    7e88:	1ad3      	subs	r3, r2, r3
    7e8a:	465a      	mov	r2, fp
    7e8c:	0001      	movs	r1, r0
    7e8e:	40da      	lsrs	r2, r3
    7e90:	3908      	subs	r1, #8
    7e92:	408e      	lsls	r6, r1
    7e94:	0013      	movs	r3, r2
    7e96:	4333      	orrs	r3, r6
    7e98:	4699      	mov	r9, r3
    7e9a:	465b      	mov	r3, fp
    7e9c:	408b      	lsls	r3, r1
    7e9e:	4698      	mov	r8, r3
    7ea0:	2300      	movs	r3, #0
    7ea2:	4c3c      	ldr	r4, [pc, #240]	; (7f94 <__aeabi_ddiv+0x1f0>)
    7ea4:	2600      	movs	r6, #0
    7ea6:	1a24      	subs	r4, r4, r0
    7ea8:	9303      	str	r3, [sp, #12]
    7eaa:	e79f      	b.n	7dec <__aeabi_ddiv+0x48>
    7eac:	4651      	mov	r1, sl
    7eae:	465a      	mov	r2, fp
    7eb0:	4311      	orrs	r1, r2
    7eb2:	d129      	bne.n	7f08 <__aeabi_ddiv+0x164>
    7eb4:	2200      	movs	r2, #0
    7eb6:	4693      	mov	fp, r2
    7eb8:	3202      	adds	r2, #2
    7eba:	e7b1      	b.n	7e20 <__aeabi_ddiv+0x7c>
    7ebc:	4659      	mov	r1, fp
    7ebe:	4301      	orrs	r1, r0
    7ec0:	d01e      	beq.n	7f00 <__aeabi_ddiv+0x15c>
    7ec2:	465b      	mov	r3, fp
    7ec4:	2b00      	cmp	r3, #0
    7ec6:	d100      	bne.n	7eca <__aeabi_ddiv+0x126>
    7ec8:	e19e      	b.n	8208 <__aeabi_ddiv+0x464>
    7eca:	4658      	mov	r0, fp
    7ecc:	f001 f9c0 	bl	9250 <__clzsi2>
    7ed0:	0003      	movs	r3, r0
    7ed2:	3b0b      	subs	r3, #11
    7ed4:	2b1c      	cmp	r3, #28
    7ed6:	dd00      	ble.n	7eda <__aeabi_ddiv+0x136>
    7ed8:	e18f      	b.n	81fa <__aeabi_ddiv+0x456>
    7eda:	0002      	movs	r2, r0
    7edc:	4659      	mov	r1, fp
    7ede:	3a08      	subs	r2, #8
    7ee0:	4091      	lsls	r1, r2
    7ee2:	468b      	mov	fp, r1
    7ee4:	211d      	movs	r1, #29
    7ee6:	1acb      	subs	r3, r1, r3
    7ee8:	4651      	mov	r1, sl
    7eea:	40d9      	lsrs	r1, r3
    7eec:	000b      	movs	r3, r1
    7eee:	4659      	mov	r1, fp
    7ef0:	430b      	orrs	r3, r1
    7ef2:	4651      	mov	r1, sl
    7ef4:	469b      	mov	fp, r3
    7ef6:	4091      	lsls	r1, r2
    7ef8:	4b26      	ldr	r3, [pc, #152]	; (7f94 <__aeabi_ddiv+0x1f0>)
    7efa:	2200      	movs	r2, #0
    7efc:	1a1b      	subs	r3, r3, r0
    7efe:	e78f      	b.n	7e20 <__aeabi_ddiv+0x7c>
    7f00:	2300      	movs	r3, #0
    7f02:	2201      	movs	r2, #1
    7f04:	469b      	mov	fp, r3
    7f06:	e78b      	b.n	7e20 <__aeabi_ddiv+0x7c>
    7f08:	4651      	mov	r1, sl
    7f0a:	2203      	movs	r2, #3
    7f0c:	e788      	b.n	7e20 <__aeabi_ddiv+0x7c>
    7f0e:	2300      	movs	r3, #0
    7f10:	4698      	mov	r8, r3
    7f12:	3301      	adds	r3, #1
    7f14:	2604      	movs	r6, #4
    7f16:	2400      	movs	r4, #0
    7f18:	9303      	str	r3, [sp, #12]
    7f1a:	e767      	b.n	7dec <__aeabi_ddiv+0x48>
    7f1c:	2303      	movs	r3, #3
    7f1e:	46b1      	mov	r9, r6
    7f20:	9303      	str	r3, [sp, #12]
    7f22:	260c      	movs	r6, #12
    7f24:	e762      	b.n	7dec <__aeabi_ddiv+0x48>
    7f26:	2a03      	cmp	r2, #3
    7f28:	d100      	bne.n	7f2c <__aeabi_ddiv+0x188>
    7f2a:	e25c      	b.n	83e6 <__aeabi_ddiv+0x642>
    7f2c:	9b01      	ldr	r3, [sp, #4]
    7f2e:	2a01      	cmp	r2, #1
    7f30:	d000      	beq.n	7f34 <__aeabi_ddiv+0x190>
    7f32:	e1e4      	b.n	82fe <__aeabi_ddiv+0x55a>
    7f34:	4013      	ands	r3, r2
    7f36:	469c      	mov	ip, r3
    7f38:	2300      	movs	r3, #0
    7f3a:	2400      	movs	r4, #0
    7f3c:	2200      	movs	r2, #0
    7f3e:	4698      	mov	r8, r3
    7f40:	2100      	movs	r1, #0
    7f42:	0312      	lsls	r2, r2, #12
    7f44:	0b13      	lsrs	r3, r2, #12
    7f46:	0d0a      	lsrs	r2, r1, #20
    7f48:	0512      	lsls	r2, r2, #20
    7f4a:	431a      	orrs	r2, r3
    7f4c:	0523      	lsls	r3, r4, #20
    7f4e:	4c12      	ldr	r4, [pc, #72]	; (7f98 <__aeabi_ddiv+0x1f4>)
    7f50:	4640      	mov	r0, r8
    7f52:	4022      	ands	r2, r4
    7f54:	4313      	orrs	r3, r2
    7f56:	4662      	mov	r2, ip
    7f58:	005b      	lsls	r3, r3, #1
    7f5a:	07d2      	lsls	r2, r2, #31
    7f5c:	085b      	lsrs	r3, r3, #1
    7f5e:	4313      	orrs	r3, r2
    7f60:	0019      	movs	r1, r3
    7f62:	b007      	add	sp, #28
    7f64:	bc3c      	pop	{r2, r3, r4, r5}
    7f66:	4690      	mov	r8, r2
    7f68:	4699      	mov	r9, r3
    7f6a:	46a2      	mov	sl, r4
    7f6c:	46ab      	mov	fp, r5
    7f6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7f70:	2300      	movs	r3, #0
    7f72:	2280      	movs	r2, #128	; 0x80
    7f74:	469c      	mov	ip, r3
    7f76:	0312      	lsls	r2, r2, #12
    7f78:	4698      	mov	r8, r3
    7f7a:	4c03      	ldr	r4, [pc, #12]	; (7f88 <__aeabi_ddiv+0x1e4>)
    7f7c:	e7e0      	b.n	7f40 <__aeabi_ddiv+0x19c>
    7f7e:	2300      	movs	r3, #0
    7f80:	4c01      	ldr	r4, [pc, #4]	; (7f88 <__aeabi_ddiv+0x1e4>)
    7f82:	2200      	movs	r2, #0
    7f84:	4698      	mov	r8, r3
    7f86:	e7db      	b.n	7f40 <__aeabi_ddiv+0x19c>
    7f88:	000007ff 	.word	0x000007ff
    7f8c:	fffffc01 	.word	0xfffffc01
    7f90:	0000bda0 	.word	0x0000bda0
    7f94:	fffffc0d 	.word	0xfffffc0d
    7f98:	800fffff 	.word	0x800fffff
    7f9c:	45d9      	cmp	r9, fp
    7f9e:	d900      	bls.n	7fa2 <__aeabi_ddiv+0x1fe>
    7fa0:	e139      	b.n	8216 <__aeabi_ddiv+0x472>
    7fa2:	d100      	bne.n	7fa6 <__aeabi_ddiv+0x202>
    7fa4:	e134      	b.n	8210 <__aeabi_ddiv+0x46c>
    7fa6:	2300      	movs	r3, #0
    7fa8:	4646      	mov	r6, r8
    7faa:	464d      	mov	r5, r9
    7fac:	469a      	mov	sl, r3
    7fae:	3c01      	subs	r4, #1
    7fb0:	465b      	mov	r3, fp
    7fb2:	0e0a      	lsrs	r2, r1, #24
    7fb4:	021b      	lsls	r3, r3, #8
    7fb6:	431a      	orrs	r2, r3
    7fb8:	020b      	lsls	r3, r1, #8
    7fba:	0c17      	lsrs	r7, r2, #16
    7fbc:	9303      	str	r3, [sp, #12]
    7fbe:	0413      	lsls	r3, r2, #16
    7fc0:	0c1b      	lsrs	r3, r3, #16
    7fc2:	0039      	movs	r1, r7
    7fc4:	0028      	movs	r0, r5
    7fc6:	4690      	mov	r8, r2
    7fc8:	9301      	str	r3, [sp, #4]
    7fca:	f7ff fa27 	bl	741c <__udivsi3>
    7fce:	0002      	movs	r2, r0
    7fd0:	9b01      	ldr	r3, [sp, #4]
    7fd2:	4683      	mov	fp, r0
    7fd4:	435a      	muls	r2, r3
    7fd6:	0028      	movs	r0, r5
    7fd8:	0039      	movs	r1, r7
    7fda:	4691      	mov	r9, r2
    7fdc:	f7ff faa4 	bl	7528 <__aeabi_uidivmod>
    7fe0:	0c35      	lsrs	r5, r6, #16
    7fe2:	0409      	lsls	r1, r1, #16
    7fe4:	430d      	orrs	r5, r1
    7fe6:	45a9      	cmp	r9, r5
    7fe8:	d90d      	bls.n	8006 <__aeabi_ddiv+0x262>
    7fea:	465b      	mov	r3, fp
    7fec:	4445      	add	r5, r8
    7fee:	3b01      	subs	r3, #1
    7ff0:	45a8      	cmp	r8, r5
    7ff2:	d900      	bls.n	7ff6 <__aeabi_ddiv+0x252>
    7ff4:	e13a      	b.n	826c <__aeabi_ddiv+0x4c8>
    7ff6:	45a9      	cmp	r9, r5
    7ff8:	d800      	bhi.n	7ffc <__aeabi_ddiv+0x258>
    7ffa:	e137      	b.n	826c <__aeabi_ddiv+0x4c8>
    7ffc:	2302      	movs	r3, #2
    7ffe:	425b      	negs	r3, r3
    8000:	469c      	mov	ip, r3
    8002:	4445      	add	r5, r8
    8004:	44e3      	add	fp, ip
    8006:	464b      	mov	r3, r9
    8008:	1aeb      	subs	r3, r5, r3
    800a:	0039      	movs	r1, r7
    800c:	0018      	movs	r0, r3
    800e:	9304      	str	r3, [sp, #16]
    8010:	f7ff fa04 	bl	741c <__udivsi3>
    8014:	9b01      	ldr	r3, [sp, #4]
    8016:	0005      	movs	r5, r0
    8018:	4343      	muls	r3, r0
    801a:	0039      	movs	r1, r7
    801c:	9804      	ldr	r0, [sp, #16]
    801e:	4699      	mov	r9, r3
    8020:	f7ff fa82 	bl	7528 <__aeabi_uidivmod>
    8024:	0433      	lsls	r3, r6, #16
    8026:	0409      	lsls	r1, r1, #16
    8028:	0c1b      	lsrs	r3, r3, #16
    802a:	430b      	orrs	r3, r1
    802c:	4599      	cmp	r9, r3
    802e:	d909      	bls.n	8044 <__aeabi_ddiv+0x2a0>
    8030:	4443      	add	r3, r8
    8032:	1e6a      	subs	r2, r5, #1
    8034:	4598      	cmp	r8, r3
    8036:	d900      	bls.n	803a <__aeabi_ddiv+0x296>
    8038:	e11a      	b.n	8270 <__aeabi_ddiv+0x4cc>
    803a:	4599      	cmp	r9, r3
    803c:	d800      	bhi.n	8040 <__aeabi_ddiv+0x29c>
    803e:	e117      	b.n	8270 <__aeabi_ddiv+0x4cc>
    8040:	3d02      	subs	r5, #2
    8042:	4443      	add	r3, r8
    8044:	464a      	mov	r2, r9
    8046:	1a9b      	subs	r3, r3, r2
    8048:	465a      	mov	r2, fp
    804a:	0412      	lsls	r2, r2, #16
    804c:	432a      	orrs	r2, r5
    804e:	9903      	ldr	r1, [sp, #12]
    8050:	4693      	mov	fp, r2
    8052:	0c10      	lsrs	r0, r2, #16
    8054:	0c0a      	lsrs	r2, r1, #16
    8056:	4691      	mov	r9, r2
    8058:	0409      	lsls	r1, r1, #16
    805a:	465a      	mov	r2, fp
    805c:	0c09      	lsrs	r1, r1, #16
    805e:	464e      	mov	r6, r9
    8060:	000d      	movs	r5, r1
    8062:	0412      	lsls	r2, r2, #16
    8064:	0c12      	lsrs	r2, r2, #16
    8066:	4345      	muls	r5, r0
    8068:	9105      	str	r1, [sp, #20]
    806a:	4351      	muls	r1, r2
    806c:	4372      	muls	r2, r6
    806e:	4370      	muls	r0, r6
    8070:	1952      	adds	r2, r2, r5
    8072:	0c0e      	lsrs	r6, r1, #16
    8074:	18b2      	adds	r2, r6, r2
    8076:	4295      	cmp	r5, r2
    8078:	d903      	bls.n	8082 <__aeabi_ddiv+0x2de>
    807a:	2580      	movs	r5, #128	; 0x80
    807c:	026d      	lsls	r5, r5, #9
    807e:	46ac      	mov	ip, r5
    8080:	4460      	add	r0, ip
    8082:	0c15      	lsrs	r5, r2, #16
    8084:	0409      	lsls	r1, r1, #16
    8086:	0412      	lsls	r2, r2, #16
    8088:	0c09      	lsrs	r1, r1, #16
    808a:	1828      	adds	r0, r5, r0
    808c:	1852      	adds	r2, r2, r1
    808e:	4283      	cmp	r3, r0
    8090:	d200      	bcs.n	8094 <__aeabi_ddiv+0x2f0>
    8092:	e0ce      	b.n	8232 <__aeabi_ddiv+0x48e>
    8094:	d100      	bne.n	8098 <__aeabi_ddiv+0x2f4>
    8096:	e0c8      	b.n	822a <__aeabi_ddiv+0x486>
    8098:	1a1d      	subs	r5, r3, r0
    809a:	4653      	mov	r3, sl
    809c:	1a9e      	subs	r6, r3, r2
    809e:	45b2      	cmp	sl, r6
    80a0:	4192      	sbcs	r2, r2
    80a2:	4252      	negs	r2, r2
    80a4:	1aab      	subs	r3, r5, r2
    80a6:	469a      	mov	sl, r3
    80a8:	4598      	cmp	r8, r3
    80aa:	d100      	bne.n	80ae <__aeabi_ddiv+0x30a>
    80ac:	e117      	b.n	82de <__aeabi_ddiv+0x53a>
    80ae:	0039      	movs	r1, r7
    80b0:	0018      	movs	r0, r3
    80b2:	f7ff f9b3 	bl	741c <__udivsi3>
    80b6:	9b01      	ldr	r3, [sp, #4]
    80b8:	0005      	movs	r5, r0
    80ba:	4343      	muls	r3, r0
    80bc:	0039      	movs	r1, r7
    80be:	4650      	mov	r0, sl
    80c0:	9304      	str	r3, [sp, #16]
    80c2:	f7ff fa31 	bl	7528 <__aeabi_uidivmod>
    80c6:	9804      	ldr	r0, [sp, #16]
    80c8:	040b      	lsls	r3, r1, #16
    80ca:	0c31      	lsrs	r1, r6, #16
    80cc:	4319      	orrs	r1, r3
    80ce:	4288      	cmp	r0, r1
    80d0:	d909      	bls.n	80e6 <__aeabi_ddiv+0x342>
    80d2:	4441      	add	r1, r8
    80d4:	1e6b      	subs	r3, r5, #1
    80d6:	4588      	cmp	r8, r1
    80d8:	d900      	bls.n	80dc <__aeabi_ddiv+0x338>
    80da:	e107      	b.n	82ec <__aeabi_ddiv+0x548>
    80dc:	4288      	cmp	r0, r1
    80de:	d800      	bhi.n	80e2 <__aeabi_ddiv+0x33e>
    80e0:	e104      	b.n	82ec <__aeabi_ddiv+0x548>
    80e2:	3d02      	subs	r5, #2
    80e4:	4441      	add	r1, r8
    80e6:	9b04      	ldr	r3, [sp, #16]
    80e8:	1acb      	subs	r3, r1, r3
    80ea:	0018      	movs	r0, r3
    80ec:	0039      	movs	r1, r7
    80ee:	9304      	str	r3, [sp, #16]
    80f0:	f7ff f994 	bl	741c <__udivsi3>
    80f4:	9b01      	ldr	r3, [sp, #4]
    80f6:	4682      	mov	sl, r0
    80f8:	4343      	muls	r3, r0
    80fa:	0039      	movs	r1, r7
    80fc:	9804      	ldr	r0, [sp, #16]
    80fe:	9301      	str	r3, [sp, #4]
    8100:	f7ff fa12 	bl	7528 <__aeabi_uidivmod>
    8104:	9801      	ldr	r0, [sp, #4]
    8106:	040b      	lsls	r3, r1, #16
    8108:	0431      	lsls	r1, r6, #16
    810a:	0c09      	lsrs	r1, r1, #16
    810c:	4319      	orrs	r1, r3
    810e:	4288      	cmp	r0, r1
    8110:	d90d      	bls.n	812e <__aeabi_ddiv+0x38a>
    8112:	4653      	mov	r3, sl
    8114:	4441      	add	r1, r8
    8116:	3b01      	subs	r3, #1
    8118:	4588      	cmp	r8, r1
    811a:	d900      	bls.n	811e <__aeabi_ddiv+0x37a>
    811c:	e0e8      	b.n	82f0 <__aeabi_ddiv+0x54c>
    811e:	4288      	cmp	r0, r1
    8120:	d800      	bhi.n	8124 <__aeabi_ddiv+0x380>
    8122:	e0e5      	b.n	82f0 <__aeabi_ddiv+0x54c>
    8124:	2302      	movs	r3, #2
    8126:	425b      	negs	r3, r3
    8128:	469c      	mov	ip, r3
    812a:	4441      	add	r1, r8
    812c:	44e2      	add	sl, ip
    812e:	9b01      	ldr	r3, [sp, #4]
    8130:	042d      	lsls	r5, r5, #16
    8132:	1ace      	subs	r6, r1, r3
    8134:	4651      	mov	r1, sl
    8136:	4329      	orrs	r1, r5
    8138:	9d05      	ldr	r5, [sp, #20]
    813a:	464f      	mov	r7, r9
    813c:	002a      	movs	r2, r5
    813e:	040b      	lsls	r3, r1, #16
    8140:	0c08      	lsrs	r0, r1, #16
    8142:	0c1b      	lsrs	r3, r3, #16
    8144:	435a      	muls	r2, r3
    8146:	4345      	muls	r5, r0
    8148:	437b      	muls	r3, r7
    814a:	4378      	muls	r0, r7
    814c:	195b      	adds	r3, r3, r5
    814e:	0c17      	lsrs	r7, r2, #16
    8150:	18fb      	adds	r3, r7, r3
    8152:	429d      	cmp	r5, r3
    8154:	d903      	bls.n	815e <__aeabi_ddiv+0x3ba>
    8156:	2580      	movs	r5, #128	; 0x80
    8158:	026d      	lsls	r5, r5, #9
    815a:	46ac      	mov	ip, r5
    815c:	4460      	add	r0, ip
    815e:	0c1d      	lsrs	r5, r3, #16
    8160:	0412      	lsls	r2, r2, #16
    8162:	041b      	lsls	r3, r3, #16
    8164:	0c12      	lsrs	r2, r2, #16
    8166:	1828      	adds	r0, r5, r0
    8168:	189b      	adds	r3, r3, r2
    816a:	4286      	cmp	r6, r0
    816c:	d200      	bcs.n	8170 <__aeabi_ddiv+0x3cc>
    816e:	e093      	b.n	8298 <__aeabi_ddiv+0x4f4>
    8170:	d100      	bne.n	8174 <__aeabi_ddiv+0x3d0>
    8172:	e08e      	b.n	8292 <__aeabi_ddiv+0x4ee>
    8174:	2301      	movs	r3, #1
    8176:	4319      	orrs	r1, r3
    8178:	4ba0      	ldr	r3, [pc, #640]	; (83fc <__aeabi_ddiv+0x658>)
    817a:	18e3      	adds	r3, r4, r3
    817c:	2b00      	cmp	r3, #0
    817e:	dc00      	bgt.n	8182 <__aeabi_ddiv+0x3de>
    8180:	e099      	b.n	82b6 <__aeabi_ddiv+0x512>
    8182:	074a      	lsls	r2, r1, #29
    8184:	d000      	beq.n	8188 <__aeabi_ddiv+0x3e4>
    8186:	e09e      	b.n	82c6 <__aeabi_ddiv+0x522>
    8188:	465a      	mov	r2, fp
    818a:	01d2      	lsls	r2, r2, #7
    818c:	d506      	bpl.n	819c <__aeabi_ddiv+0x3f8>
    818e:	465a      	mov	r2, fp
    8190:	4b9b      	ldr	r3, [pc, #620]	; (8400 <__aeabi_ddiv+0x65c>)
    8192:	401a      	ands	r2, r3
    8194:	2380      	movs	r3, #128	; 0x80
    8196:	4693      	mov	fp, r2
    8198:	00db      	lsls	r3, r3, #3
    819a:	18e3      	adds	r3, r4, r3
    819c:	4a99      	ldr	r2, [pc, #612]	; (8404 <__aeabi_ddiv+0x660>)
    819e:	4293      	cmp	r3, r2
    81a0:	dd68      	ble.n	8274 <__aeabi_ddiv+0x4d0>
    81a2:	2301      	movs	r3, #1
    81a4:	9a02      	ldr	r2, [sp, #8]
    81a6:	4c98      	ldr	r4, [pc, #608]	; (8408 <__aeabi_ddiv+0x664>)
    81a8:	401a      	ands	r2, r3
    81aa:	2300      	movs	r3, #0
    81ac:	4694      	mov	ip, r2
    81ae:	4698      	mov	r8, r3
    81b0:	2200      	movs	r2, #0
    81b2:	e6c5      	b.n	7f40 <__aeabi_ddiv+0x19c>
    81b4:	2280      	movs	r2, #128	; 0x80
    81b6:	464b      	mov	r3, r9
    81b8:	0312      	lsls	r2, r2, #12
    81ba:	4213      	tst	r3, r2
    81bc:	d00a      	beq.n	81d4 <__aeabi_ddiv+0x430>
    81be:	465b      	mov	r3, fp
    81c0:	4213      	tst	r3, r2
    81c2:	d106      	bne.n	81d2 <__aeabi_ddiv+0x42e>
    81c4:	431a      	orrs	r2, r3
    81c6:	0312      	lsls	r2, r2, #12
    81c8:	0b12      	lsrs	r2, r2, #12
    81ca:	46ac      	mov	ip, r5
    81cc:	4688      	mov	r8, r1
    81ce:	4c8e      	ldr	r4, [pc, #568]	; (8408 <__aeabi_ddiv+0x664>)
    81d0:	e6b6      	b.n	7f40 <__aeabi_ddiv+0x19c>
    81d2:	464b      	mov	r3, r9
    81d4:	431a      	orrs	r2, r3
    81d6:	0312      	lsls	r2, r2, #12
    81d8:	0b12      	lsrs	r2, r2, #12
    81da:	46bc      	mov	ip, r7
    81dc:	4c8a      	ldr	r4, [pc, #552]	; (8408 <__aeabi_ddiv+0x664>)
    81de:	e6af      	b.n	7f40 <__aeabi_ddiv+0x19c>
    81e0:	0003      	movs	r3, r0
    81e2:	465a      	mov	r2, fp
    81e4:	3b28      	subs	r3, #40	; 0x28
    81e6:	409a      	lsls	r2, r3
    81e8:	2300      	movs	r3, #0
    81ea:	4691      	mov	r9, r2
    81ec:	4698      	mov	r8, r3
    81ee:	e657      	b.n	7ea0 <__aeabi_ddiv+0xfc>
    81f0:	4658      	mov	r0, fp
    81f2:	f001 f82d 	bl	9250 <__clzsi2>
    81f6:	3020      	adds	r0, #32
    81f8:	e640      	b.n	7e7c <__aeabi_ddiv+0xd8>
    81fa:	0003      	movs	r3, r0
    81fc:	4652      	mov	r2, sl
    81fe:	3b28      	subs	r3, #40	; 0x28
    8200:	409a      	lsls	r2, r3
    8202:	2100      	movs	r1, #0
    8204:	4693      	mov	fp, r2
    8206:	e677      	b.n	7ef8 <__aeabi_ddiv+0x154>
    8208:	f001 f822 	bl	9250 <__clzsi2>
    820c:	3020      	adds	r0, #32
    820e:	e65f      	b.n	7ed0 <__aeabi_ddiv+0x12c>
    8210:	4588      	cmp	r8, r1
    8212:	d200      	bcs.n	8216 <__aeabi_ddiv+0x472>
    8214:	e6c7      	b.n	7fa6 <__aeabi_ddiv+0x202>
    8216:	464b      	mov	r3, r9
    8218:	07de      	lsls	r6, r3, #31
    821a:	085d      	lsrs	r5, r3, #1
    821c:	4643      	mov	r3, r8
    821e:	085b      	lsrs	r3, r3, #1
    8220:	431e      	orrs	r6, r3
    8222:	4643      	mov	r3, r8
    8224:	07db      	lsls	r3, r3, #31
    8226:	469a      	mov	sl, r3
    8228:	e6c2      	b.n	7fb0 <__aeabi_ddiv+0x20c>
    822a:	2500      	movs	r5, #0
    822c:	4592      	cmp	sl, r2
    822e:	d300      	bcc.n	8232 <__aeabi_ddiv+0x48e>
    8230:	e733      	b.n	809a <__aeabi_ddiv+0x2f6>
    8232:	9e03      	ldr	r6, [sp, #12]
    8234:	4659      	mov	r1, fp
    8236:	46b4      	mov	ip, r6
    8238:	44e2      	add	sl, ip
    823a:	45b2      	cmp	sl, r6
    823c:	41ad      	sbcs	r5, r5
    823e:	426d      	negs	r5, r5
    8240:	4445      	add	r5, r8
    8242:	18eb      	adds	r3, r5, r3
    8244:	3901      	subs	r1, #1
    8246:	4598      	cmp	r8, r3
    8248:	d207      	bcs.n	825a <__aeabi_ddiv+0x4b6>
    824a:	4298      	cmp	r0, r3
    824c:	d900      	bls.n	8250 <__aeabi_ddiv+0x4ac>
    824e:	e07f      	b.n	8350 <__aeabi_ddiv+0x5ac>
    8250:	d100      	bne.n	8254 <__aeabi_ddiv+0x4b0>
    8252:	e0bc      	b.n	83ce <__aeabi_ddiv+0x62a>
    8254:	1a1d      	subs	r5, r3, r0
    8256:	468b      	mov	fp, r1
    8258:	e71f      	b.n	809a <__aeabi_ddiv+0x2f6>
    825a:	4598      	cmp	r8, r3
    825c:	d1fa      	bne.n	8254 <__aeabi_ddiv+0x4b0>
    825e:	9d03      	ldr	r5, [sp, #12]
    8260:	4555      	cmp	r5, sl
    8262:	d9f2      	bls.n	824a <__aeabi_ddiv+0x4a6>
    8264:	4643      	mov	r3, r8
    8266:	468b      	mov	fp, r1
    8268:	1a1d      	subs	r5, r3, r0
    826a:	e716      	b.n	809a <__aeabi_ddiv+0x2f6>
    826c:	469b      	mov	fp, r3
    826e:	e6ca      	b.n	8006 <__aeabi_ddiv+0x262>
    8270:	0015      	movs	r5, r2
    8272:	e6e7      	b.n	8044 <__aeabi_ddiv+0x2a0>
    8274:	465a      	mov	r2, fp
    8276:	08c9      	lsrs	r1, r1, #3
    8278:	0752      	lsls	r2, r2, #29
    827a:	430a      	orrs	r2, r1
    827c:	055b      	lsls	r3, r3, #21
    827e:	4690      	mov	r8, r2
    8280:	0d5c      	lsrs	r4, r3, #21
    8282:	465a      	mov	r2, fp
    8284:	2301      	movs	r3, #1
    8286:	9902      	ldr	r1, [sp, #8]
    8288:	0252      	lsls	r2, r2, #9
    828a:	4019      	ands	r1, r3
    828c:	0b12      	lsrs	r2, r2, #12
    828e:	468c      	mov	ip, r1
    8290:	e656      	b.n	7f40 <__aeabi_ddiv+0x19c>
    8292:	2b00      	cmp	r3, #0
    8294:	d100      	bne.n	8298 <__aeabi_ddiv+0x4f4>
    8296:	e76f      	b.n	8178 <__aeabi_ddiv+0x3d4>
    8298:	4446      	add	r6, r8
    829a:	1e4a      	subs	r2, r1, #1
    829c:	45b0      	cmp	r8, r6
    829e:	d929      	bls.n	82f4 <__aeabi_ddiv+0x550>
    82a0:	0011      	movs	r1, r2
    82a2:	4286      	cmp	r6, r0
    82a4:	d000      	beq.n	82a8 <__aeabi_ddiv+0x504>
    82a6:	e765      	b.n	8174 <__aeabi_ddiv+0x3d0>
    82a8:	9a03      	ldr	r2, [sp, #12]
    82aa:	4293      	cmp	r3, r2
    82ac:	d000      	beq.n	82b0 <__aeabi_ddiv+0x50c>
    82ae:	e761      	b.n	8174 <__aeabi_ddiv+0x3d0>
    82b0:	e762      	b.n	8178 <__aeabi_ddiv+0x3d4>
    82b2:	2101      	movs	r1, #1
    82b4:	4249      	negs	r1, r1
    82b6:	2001      	movs	r0, #1
    82b8:	1ac2      	subs	r2, r0, r3
    82ba:	2a38      	cmp	r2, #56	; 0x38
    82bc:	dd21      	ble.n	8302 <__aeabi_ddiv+0x55e>
    82be:	9b02      	ldr	r3, [sp, #8]
    82c0:	4003      	ands	r3, r0
    82c2:	469c      	mov	ip, r3
    82c4:	e638      	b.n	7f38 <__aeabi_ddiv+0x194>
    82c6:	220f      	movs	r2, #15
    82c8:	400a      	ands	r2, r1
    82ca:	2a04      	cmp	r2, #4
    82cc:	d100      	bne.n	82d0 <__aeabi_ddiv+0x52c>
    82ce:	e75b      	b.n	8188 <__aeabi_ddiv+0x3e4>
    82d0:	000a      	movs	r2, r1
    82d2:	1d11      	adds	r1, r2, #4
    82d4:	4291      	cmp	r1, r2
    82d6:	4192      	sbcs	r2, r2
    82d8:	4252      	negs	r2, r2
    82da:	4493      	add	fp, r2
    82dc:	e754      	b.n	8188 <__aeabi_ddiv+0x3e4>
    82de:	4b47      	ldr	r3, [pc, #284]	; (83fc <__aeabi_ddiv+0x658>)
    82e0:	18e3      	adds	r3, r4, r3
    82e2:	2b00      	cmp	r3, #0
    82e4:	dde5      	ble.n	82b2 <__aeabi_ddiv+0x50e>
    82e6:	2201      	movs	r2, #1
    82e8:	4252      	negs	r2, r2
    82ea:	e7f2      	b.n	82d2 <__aeabi_ddiv+0x52e>
    82ec:	001d      	movs	r5, r3
    82ee:	e6fa      	b.n	80e6 <__aeabi_ddiv+0x342>
    82f0:	469a      	mov	sl, r3
    82f2:	e71c      	b.n	812e <__aeabi_ddiv+0x38a>
    82f4:	42b0      	cmp	r0, r6
    82f6:	d839      	bhi.n	836c <__aeabi_ddiv+0x5c8>
    82f8:	d06e      	beq.n	83d8 <__aeabi_ddiv+0x634>
    82fa:	0011      	movs	r1, r2
    82fc:	e73a      	b.n	8174 <__aeabi_ddiv+0x3d0>
    82fe:	9302      	str	r3, [sp, #8]
    8300:	e73a      	b.n	8178 <__aeabi_ddiv+0x3d4>
    8302:	2a1f      	cmp	r2, #31
    8304:	dc3c      	bgt.n	8380 <__aeabi_ddiv+0x5dc>
    8306:	2320      	movs	r3, #32
    8308:	1a9b      	subs	r3, r3, r2
    830a:	000c      	movs	r4, r1
    830c:	4658      	mov	r0, fp
    830e:	4099      	lsls	r1, r3
    8310:	4098      	lsls	r0, r3
    8312:	1e4b      	subs	r3, r1, #1
    8314:	4199      	sbcs	r1, r3
    8316:	465b      	mov	r3, fp
    8318:	40d4      	lsrs	r4, r2
    831a:	40d3      	lsrs	r3, r2
    831c:	4320      	orrs	r0, r4
    831e:	4308      	orrs	r0, r1
    8320:	001a      	movs	r2, r3
    8322:	0743      	lsls	r3, r0, #29
    8324:	d009      	beq.n	833a <__aeabi_ddiv+0x596>
    8326:	230f      	movs	r3, #15
    8328:	4003      	ands	r3, r0
    832a:	2b04      	cmp	r3, #4
    832c:	d005      	beq.n	833a <__aeabi_ddiv+0x596>
    832e:	0001      	movs	r1, r0
    8330:	1d08      	adds	r0, r1, #4
    8332:	4288      	cmp	r0, r1
    8334:	419b      	sbcs	r3, r3
    8336:	425b      	negs	r3, r3
    8338:	18d2      	adds	r2, r2, r3
    833a:	0213      	lsls	r3, r2, #8
    833c:	d53a      	bpl.n	83b4 <__aeabi_ddiv+0x610>
    833e:	2301      	movs	r3, #1
    8340:	9a02      	ldr	r2, [sp, #8]
    8342:	2401      	movs	r4, #1
    8344:	401a      	ands	r2, r3
    8346:	2300      	movs	r3, #0
    8348:	4694      	mov	ip, r2
    834a:	4698      	mov	r8, r3
    834c:	2200      	movs	r2, #0
    834e:	e5f7      	b.n	7f40 <__aeabi_ddiv+0x19c>
    8350:	2102      	movs	r1, #2
    8352:	4249      	negs	r1, r1
    8354:	468c      	mov	ip, r1
    8356:	9d03      	ldr	r5, [sp, #12]
    8358:	44e3      	add	fp, ip
    835a:	46ac      	mov	ip, r5
    835c:	44e2      	add	sl, ip
    835e:	45aa      	cmp	sl, r5
    8360:	41ad      	sbcs	r5, r5
    8362:	426d      	negs	r5, r5
    8364:	4445      	add	r5, r8
    8366:	18ed      	adds	r5, r5, r3
    8368:	1a2d      	subs	r5, r5, r0
    836a:	e696      	b.n	809a <__aeabi_ddiv+0x2f6>
    836c:	1e8a      	subs	r2, r1, #2
    836e:	9903      	ldr	r1, [sp, #12]
    8370:	004d      	lsls	r5, r1, #1
    8372:	428d      	cmp	r5, r1
    8374:	4189      	sbcs	r1, r1
    8376:	4249      	negs	r1, r1
    8378:	4441      	add	r1, r8
    837a:	1876      	adds	r6, r6, r1
    837c:	9503      	str	r5, [sp, #12]
    837e:	e78f      	b.n	82a0 <__aeabi_ddiv+0x4fc>
    8380:	201f      	movs	r0, #31
    8382:	4240      	negs	r0, r0
    8384:	1ac3      	subs	r3, r0, r3
    8386:	4658      	mov	r0, fp
    8388:	40d8      	lsrs	r0, r3
    838a:	0003      	movs	r3, r0
    838c:	2a20      	cmp	r2, #32
    838e:	d028      	beq.n	83e2 <__aeabi_ddiv+0x63e>
    8390:	2040      	movs	r0, #64	; 0x40
    8392:	465d      	mov	r5, fp
    8394:	1a82      	subs	r2, r0, r2
    8396:	4095      	lsls	r5, r2
    8398:	4329      	orrs	r1, r5
    839a:	1e4a      	subs	r2, r1, #1
    839c:	4191      	sbcs	r1, r2
    839e:	4319      	orrs	r1, r3
    83a0:	2307      	movs	r3, #7
    83a2:	2200      	movs	r2, #0
    83a4:	400b      	ands	r3, r1
    83a6:	d009      	beq.n	83bc <__aeabi_ddiv+0x618>
    83a8:	230f      	movs	r3, #15
    83aa:	2200      	movs	r2, #0
    83ac:	400b      	ands	r3, r1
    83ae:	0008      	movs	r0, r1
    83b0:	2b04      	cmp	r3, #4
    83b2:	d1bd      	bne.n	8330 <__aeabi_ddiv+0x58c>
    83b4:	0001      	movs	r1, r0
    83b6:	0753      	lsls	r3, r2, #29
    83b8:	0252      	lsls	r2, r2, #9
    83ba:	0b12      	lsrs	r2, r2, #12
    83bc:	08c9      	lsrs	r1, r1, #3
    83be:	4319      	orrs	r1, r3
    83c0:	2301      	movs	r3, #1
    83c2:	4688      	mov	r8, r1
    83c4:	9902      	ldr	r1, [sp, #8]
    83c6:	2400      	movs	r4, #0
    83c8:	4019      	ands	r1, r3
    83ca:	468c      	mov	ip, r1
    83cc:	e5b8      	b.n	7f40 <__aeabi_ddiv+0x19c>
    83ce:	4552      	cmp	r2, sl
    83d0:	d8be      	bhi.n	8350 <__aeabi_ddiv+0x5ac>
    83d2:	468b      	mov	fp, r1
    83d4:	2500      	movs	r5, #0
    83d6:	e660      	b.n	809a <__aeabi_ddiv+0x2f6>
    83d8:	9d03      	ldr	r5, [sp, #12]
    83da:	429d      	cmp	r5, r3
    83dc:	d3c6      	bcc.n	836c <__aeabi_ddiv+0x5c8>
    83de:	0011      	movs	r1, r2
    83e0:	e762      	b.n	82a8 <__aeabi_ddiv+0x504>
    83e2:	2500      	movs	r5, #0
    83e4:	e7d8      	b.n	8398 <__aeabi_ddiv+0x5f4>
    83e6:	2280      	movs	r2, #128	; 0x80
    83e8:	465b      	mov	r3, fp
    83ea:	0312      	lsls	r2, r2, #12
    83ec:	431a      	orrs	r2, r3
    83ee:	9b01      	ldr	r3, [sp, #4]
    83f0:	0312      	lsls	r2, r2, #12
    83f2:	0b12      	lsrs	r2, r2, #12
    83f4:	469c      	mov	ip, r3
    83f6:	4688      	mov	r8, r1
    83f8:	4c03      	ldr	r4, [pc, #12]	; (8408 <__aeabi_ddiv+0x664>)
    83fa:	e5a1      	b.n	7f40 <__aeabi_ddiv+0x19c>
    83fc:	000003ff 	.word	0x000003ff
    8400:	feffffff 	.word	0xfeffffff
    8404:	000007fe 	.word	0x000007fe
    8408:	000007ff 	.word	0x000007ff

0000840c <__eqdf2>:
    840c:	b5f0      	push	{r4, r5, r6, r7, lr}
    840e:	464f      	mov	r7, r9
    8410:	4646      	mov	r6, r8
    8412:	46d6      	mov	lr, sl
    8414:	005c      	lsls	r4, r3, #1
    8416:	b5c0      	push	{r6, r7, lr}
    8418:	031f      	lsls	r7, r3, #12
    841a:	0fdb      	lsrs	r3, r3, #31
    841c:	469a      	mov	sl, r3
    841e:	4b17      	ldr	r3, [pc, #92]	; (847c <__eqdf2+0x70>)
    8420:	030e      	lsls	r6, r1, #12
    8422:	004d      	lsls	r5, r1, #1
    8424:	4684      	mov	ip, r0
    8426:	4680      	mov	r8, r0
    8428:	0b36      	lsrs	r6, r6, #12
    842a:	0d6d      	lsrs	r5, r5, #21
    842c:	0fc9      	lsrs	r1, r1, #31
    842e:	4691      	mov	r9, r2
    8430:	0b3f      	lsrs	r7, r7, #12
    8432:	0d64      	lsrs	r4, r4, #21
    8434:	2001      	movs	r0, #1
    8436:	429d      	cmp	r5, r3
    8438:	d008      	beq.n	844c <__eqdf2+0x40>
    843a:	429c      	cmp	r4, r3
    843c:	d001      	beq.n	8442 <__eqdf2+0x36>
    843e:	42a5      	cmp	r5, r4
    8440:	d00b      	beq.n	845a <__eqdf2+0x4e>
    8442:	bc1c      	pop	{r2, r3, r4}
    8444:	4690      	mov	r8, r2
    8446:	4699      	mov	r9, r3
    8448:	46a2      	mov	sl, r4
    844a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    844c:	4663      	mov	r3, ip
    844e:	4333      	orrs	r3, r6
    8450:	d1f7      	bne.n	8442 <__eqdf2+0x36>
    8452:	42ac      	cmp	r4, r5
    8454:	d1f5      	bne.n	8442 <__eqdf2+0x36>
    8456:	433a      	orrs	r2, r7
    8458:	d1f3      	bne.n	8442 <__eqdf2+0x36>
    845a:	2001      	movs	r0, #1
    845c:	42be      	cmp	r6, r7
    845e:	d1f0      	bne.n	8442 <__eqdf2+0x36>
    8460:	45c8      	cmp	r8, r9
    8462:	d1ee      	bne.n	8442 <__eqdf2+0x36>
    8464:	4551      	cmp	r1, sl
    8466:	d007      	beq.n	8478 <__eqdf2+0x6c>
    8468:	2d00      	cmp	r5, #0
    846a:	d1ea      	bne.n	8442 <__eqdf2+0x36>
    846c:	4663      	mov	r3, ip
    846e:	431e      	orrs	r6, r3
    8470:	0030      	movs	r0, r6
    8472:	1e46      	subs	r6, r0, #1
    8474:	41b0      	sbcs	r0, r6
    8476:	e7e4      	b.n	8442 <__eqdf2+0x36>
    8478:	2000      	movs	r0, #0
    847a:	e7e2      	b.n	8442 <__eqdf2+0x36>
    847c:	000007ff 	.word	0x000007ff

00008480 <__gedf2>:
    8480:	b5f0      	push	{r4, r5, r6, r7, lr}
    8482:	4645      	mov	r5, r8
    8484:	46de      	mov	lr, fp
    8486:	4657      	mov	r7, sl
    8488:	464e      	mov	r6, r9
    848a:	b5e0      	push	{r5, r6, r7, lr}
    848c:	031f      	lsls	r7, r3, #12
    848e:	0b3d      	lsrs	r5, r7, #12
    8490:	4f2c      	ldr	r7, [pc, #176]	; (8544 <__gedf2+0xc4>)
    8492:	030e      	lsls	r6, r1, #12
    8494:	004c      	lsls	r4, r1, #1
    8496:	46ab      	mov	fp, r5
    8498:	005d      	lsls	r5, r3, #1
    849a:	4684      	mov	ip, r0
    849c:	0b36      	lsrs	r6, r6, #12
    849e:	0d64      	lsrs	r4, r4, #21
    84a0:	0fc9      	lsrs	r1, r1, #31
    84a2:	4690      	mov	r8, r2
    84a4:	0d6d      	lsrs	r5, r5, #21
    84a6:	0fdb      	lsrs	r3, r3, #31
    84a8:	42bc      	cmp	r4, r7
    84aa:	d02a      	beq.n	8502 <__gedf2+0x82>
    84ac:	4f25      	ldr	r7, [pc, #148]	; (8544 <__gedf2+0xc4>)
    84ae:	42bd      	cmp	r5, r7
    84b0:	d02d      	beq.n	850e <__gedf2+0x8e>
    84b2:	2c00      	cmp	r4, #0
    84b4:	d10f      	bne.n	84d6 <__gedf2+0x56>
    84b6:	4330      	orrs	r0, r6
    84b8:	0007      	movs	r7, r0
    84ba:	4681      	mov	r9, r0
    84bc:	4278      	negs	r0, r7
    84be:	4178      	adcs	r0, r7
    84c0:	b2c0      	uxtb	r0, r0
    84c2:	2d00      	cmp	r5, #0
    84c4:	d117      	bne.n	84f6 <__gedf2+0x76>
    84c6:	465f      	mov	r7, fp
    84c8:	433a      	orrs	r2, r7
    84ca:	d114      	bne.n	84f6 <__gedf2+0x76>
    84cc:	464b      	mov	r3, r9
    84ce:	2000      	movs	r0, #0
    84d0:	2b00      	cmp	r3, #0
    84d2:	d00a      	beq.n	84ea <__gedf2+0x6a>
    84d4:	e006      	b.n	84e4 <__gedf2+0x64>
    84d6:	2d00      	cmp	r5, #0
    84d8:	d102      	bne.n	84e0 <__gedf2+0x60>
    84da:	4658      	mov	r0, fp
    84dc:	4302      	orrs	r2, r0
    84de:	d001      	beq.n	84e4 <__gedf2+0x64>
    84e0:	4299      	cmp	r1, r3
    84e2:	d018      	beq.n	8516 <__gedf2+0x96>
    84e4:	4248      	negs	r0, r1
    84e6:	2101      	movs	r1, #1
    84e8:	4308      	orrs	r0, r1
    84ea:	bc3c      	pop	{r2, r3, r4, r5}
    84ec:	4690      	mov	r8, r2
    84ee:	4699      	mov	r9, r3
    84f0:	46a2      	mov	sl, r4
    84f2:	46ab      	mov	fp, r5
    84f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    84f6:	2800      	cmp	r0, #0
    84f8:	d0f2      	beq.n	84e0 <__gedf2+0x60>
    84fa:	2001      	movs	r0, #1
    84fc:	3b01      	subs	r3, #1
    84fe:	4318      	orrs	r0, r3
    8500:	e7f3      	b.n	84ea <__gedf2+0x6a>
    8502:	0037      	movs	r7, r6
    8504:	4307      	orrs	r7, r0
    8506:	d0d1      	beq.n	84ac <__gedf2+0x2c>
    8508:	2002      	movs	r0, #2
    850a:	4240      	negs	r0, r0
    850c:	e7ed      	b.n	84ea <__gedf2+0x6a>
    850e:	465f      	mov	r7, fp
    8510:	4317      	orrs	r7, r2
    8512:	d0ce      	beq.n	84b2 <__gedf2+0x32>
    8514:	e7f8      	b.n	8508 <__gedf2+0x88>
    8516:	42ac      	cmp	r4, r5
    8518:	dce4      	bgt.n	84e4 <__gedf2+0x64>
    851a:	da03      	bge.n	8524 <__gedf2+0xa4>
    851c:	1e48      	subs	r0, r1, #1
    851e:	2101      	movs	r1, #1
    8520:	4308      	orrs	r0, r1
    8522:	e7e2      	b.n	84ea <__gedf2+0x6a>
    8524:	455e      	cmp	r6, fp
    8526:	d8dd      	bhi.n	84e4 <__gedf2+0x64>
    8528:	d006      	beq.n	8538 <__gedf2+0xb8>
    852a:	2000      	movs	r0, #0
    852c:	455e      	cmp	r6, fp
    852e:	d2dc      	bcs.n	84ea <__gedf2+0x6a>
    8530:	2301      	movs	r3, #1
    8532:	1e48      	subs	r0, r1, #1
    8534:	4318      	orrs	r0, r3
    8536:	e7d8      	b.n	84ea <__gedf2+0x6a>
    8538:	45c4      	cmp	ip, r8
    853a:	d8d3      	bhi.n	84e4 <__gedf2+0x64>
    853c:	2000      	movs	r0, #0
    853e:	45c4      	cmp	ip, r8
    8540:	d3f6      	bcc.n	8530 <__gedf2+0xb0>
    8542:	e7d2      	b.n	84ea <__gedf2+0x6a>
    8544:	000007ff 	.word	0x000007ff

00008548 <__ledf2>:
    8548:	b5f0      	push	{r4, r5, r6, r7, lr}
    854a:	464e      	mov	r6, r9
    854c:	4645      	mov	r5, r8
    854e:	46de      	mov	lr, fp
    8550:	4657      	mov	r7, sl
    8552:	005c      	lsls	r4, r3, #1
    8554:	b5e0      	push	{r5, r6, r7, lr}
    8556:	031f      	lsls	r7, r3, #12
    8558:	0fdb      	lsrs	r3, r3, #31
    855a:	4699      	mov	r9, r3
    855c:	4b2a      	ldr	r3, [pc, #168]	; (8608 <__ledf2+0xc0>)
    855e:	030e      	lsls	r6, r1, #12
    8560:	004d      	lsls	r5, r1, #1
    8562:	0fc9      	lsrs	r1, r1, #31
    8564:	4684      	mov	ip, r0
    8566:	0b36      	lsrs	r6, r6, #12
    8568:	0d6d      	lsrs	r5, r5, #21
    856a:	468b      	mov	fp, r1
    856c:	4690      	mov	r8, r2
    856e:	0b3f      	lsrs	r7, r7, #12
    8570:	0d64      	lsrs	r4, r4, #21
    8572:	429d      	cmp	r5, r3
    8574:	d020      	beq.n	85b8 <__ledf2+0x70>
    8576:	4b24      	ldr	r3, [pc, #144]	; (8608 <__ledf2+0xc0>)
    8578:	429c      	cmp	r4, r3
    857a:	d022      	beq.n	85c2 <__ledf2+0x7a>
    857c:	2d00      	cmp	r5, #0
    857e:	d112      	bne.n	85a6 <__ledf2+0x5e>
    8580:	4330      	orrs	r0, r6
    8582:	4243      	negs	r3, r0
    8584:	4143      	adcs	r3, r0
    8586:	b2db      	uxtb	r3, r3
    8588:	2c00      	cmp	r4, #0
    858a:	d01f      	beq.n	85cc <__ledf2+0x84>
    858c:	2b00      	cmp	r3, #0
    858e:	d00c      	beq.n	85aa <__ledf2+0x62>
    8590:	464b      	mov	r3, r9
    8592:	2001      	movs	r0, #1
    8594:	3b01      	subs	r3, #1
    8596:	4303      	orrs	r3, r0
    8598:	0018      	movs	r0, r3
    859a:	bc3c      	pop	{r2, r3, r4, r5}
    859c:	4690      	mov	r8, r2
    859e:	4699      	mov	r9, r3
    85a0:	46a2      	mov	sl, r4
    85a2:	46ab      	mov	fp, r5
    85a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    85a6:	2c00      	cmp	r4, #0
    85a8:	d016      	beq.n	85d8 <__ledf2+0x90>
    85aa:	45cb      	cmp	fp, r9
    85ac:	d017      	beq.n	85de <__ledf2+0x96>
    85ae:	465b      	mov	r3, fp
    85b0:	4259      	negs	r1, r3
    85b2:	2301      	movs	r3, #1
    85b4:	430b      	orrs	r3, r1
    85b6:	e7ef      	b.n	8598 <__ledf2+0x50>
    85b8:	0031      	movs	r1, r6
    85ba:	2302      	movs	r3, #2
    85bc:	4301      	orrs	r1, r0
    85be:	d1eb      	bne.n	8598 <__ledf2+0x50>
    85c0:	e7d9      	b.n	8576 <__ledf2+0x2e>
    85c2:	0039      	movs	r1, r7
    85c4:	2302      	movs	r3, #2
    85c6:	4311      	orrs	r1, r2
    85c8:	d1e6      	bne.n	8598 <__ledf2+0x50>
    85ca:	e7d7      	b.n	857c <__ledf2+0x34>
    85cc:	433a      	orrs	r2, r7
    85ce:	d1dd      	bne.n	858c <__ledf2+0x44>
    85d0:	2300      	movs	r3, #0
    85d2:	2800      	cmp	r0, #0
    85d4:	d0e0      	beq.n	8598 <__ledf2+0x50>
    85d6:	e7ea      	b.n	85ae <__ledf2+0x66>
    85d8:	433a      	orrs	r2, r7
    85da:	d1e6      	bne.n	85aa <__ledf2+0x62>
    85dc:	e7e7      	b.n	85ae <__ledf2+0x66>
    85de:	42a5      	cmp	r5, r4
    85e0:	dce5      	bgt.n	85ae <__ledf2+0x66>
    85e2:	db05      	blt.n	85f0 <__ledf2+0xa8>
    85e4:	42be      	cmp	r6, r7
    85e6:	d8e2      	bhi.n	85ae <__ledf2+0x66>
    85e8:	d007      	beq.n	85fa <__ledf2+0xb2>
    85ea:	2300      	movs	r3, #0
    85ec:	42be      	cmp	r6, r7
    85ee:	d2d3      	bcs.n	8598 <__ledf2+0x50>
    85f0:	4659      	mov	r1, fp
    85f2:	2301      	movs	r3, #1
    85f4:	3901      	subs	r1, #1
    85f6:	430b      	orrs	r3, r1
    85f8:	e7ce      	b.n	8598 <__ledf2+0x50>
    85fa:	45c4      	cmp	ip, r8
    85fc:	d8d7      	bhi.n	85ae <__ledf2+0x66>
    85fe:	2300      	movs	r3, #0
    8600:	45c4      	cmp	ip, r8
    8602:	d3f5      	bcc.n	85f0 <__ledf2+0xa8>
    8604:	e7c8      	b.n	8598 <__ledf2+0x50>
    8606:	46c0      	nop			; (mov r8, r8)
    8608:	000007ff 	.word	0x000007ff

0000860c <__aeabi_dmul>:
    860c:	b5f0      	push	{r4, r5, r6, r7, lr}
    860e:	4657      	mov	r7, sl
    8610:	4645      	mov	r5, r8
    8612:	46de      	mov	lr, fp
    8614:	464e      	mov	r6, r9
    8616:	b5e0      	push	{r5, r6, r7, lr}
    8618:	030c      	lsls	r4, r1, #12
    861a:	4698      	mov	r8, r3
    861c:	004e      	lsls	r6, r1, #1
    861e:	0b23      	lsrs	r3, r4, #12
    8620:	b087      	sub	sp, #28
    8622:	0007      	movs	r7, r0
    8624:	4692      	mov	sl, r2
    8626:	469b      	mov	fp, r3
    8628:	0d76      	lsrs	r6, r6, #21
    862a:	0fcd      	lsrs	r5, r1, #31
    862c:	2e00      	cmp	r6, #0
    862e:	d06b      	beq.n	8708 <__aeabi_dmul+0xfc>
    8630:	4b6d      	ldr	r3, [pc, #436]	; (87e8 <__aeabi_dmul+0x1dc>)
    8632:	429e      	cmp	r6, r3
    8634:	d035      	beq.n	86a2 <__aeabi_dmul+0x96>
    8636:	2480      	movs	r4, #128	; 0x80
    8638:	465b      	mov	r3, fp
    863a:	0f42      	lsrs	r2, r0, #29
    863c:	0424      	lsls	r4, r4, #16
    863e:	00db      	lsls	r3, r3, #3
    8640:	4314      	orrs	r4, r2
    8642:	431c      	orrs	r4, r3
    8644:	00c3      	lsls	r3, r0, #3
    8646:	4699      	mov	r9, r3
    8648:	4b68      	ldr	r3, [pc, #416]	; (87ec <__aeabi_dmul+0x1e0>)
    864a:	46a3      	mov	fp, r4
    864c:	469c      	mov	ip, r3
    864e:	2300      	movs	r3, #0
    8650:	2700      	movs	r7, #0
    8652:	4466      	add	r6, ip
    8654:	9302      	str	r3, [sp, #8]
    8656:	4643      	mov	r3, r8
    8658:	031c      	lsls	r4, r3, #12
    865a:	005a      	lsls	r2, r3, #1
    865c:	0fdb      	lsrs	r3, r3, #31
    865e:	4650      	mov	r0, sl
    8660:	0b24      	lsrs	r4, r4, #12
    8662:	0d52      	lsrs	r2, r2, #21
    8664:	4698      	mov	r8, r3
    8666:	d100      	bne.n	866a <__aeabi_dmul+0x5e>
    8668:	e076      	b.n	8758 <__aeabi_dmul+0x14c>
    866a:	4b5f      	ldr	r3, [pc, #380]	; (87e8 <__aeabi_dmul+0x1dc>)
    866c:	429a      	cmp	r2, r3
    866e:	d06d      	beq.n	874c <__aeabi_dmul+0x140>
    8670:	2380      	movs	r3, #128	; 0x80
    8672:	0f41      	lsrs	r1, r0, #29
    8674:	041b      	lsls	r3, r3, #16
    8676:	430b      	orrs	r3, r1
    8678:	495c      	ldr	r1, [pc, #368]	; (87ec <__aeabi_dmul+0x1e0>)
    867a:	00e4      	lsls	r4, r4, #3
    867c:	468c      	mov	ip, r1
    867e:	431c      	orrs	r4, r3
    8680:	00c3      	lsls	r3, r0, #3
    8682:	2000      	movs	r0, #0
    8684:	4462      	add	r2, ip
    8686:	4641      	mov	r1, r8
    8688:	18b6      	adds	r6, r6, r2
    868a:	4069      	eors	r1, r5
    868c:	1c72      	adds	r2, r6, #1
    868e:	9101      	str	r1, [sp, #4]
    8690:	4694      	mov	ip, r2
    8692:	4307      	orrs	r7, r0
    8694:	2f0f      	cmp	r7, #15
    8696:	d900      	bls.n	869a <__aeabi_dmul+0x8e>
    8698:	e0b0      	b.n	87fc <__aeabi_dmul+0x1f0>
    869a:	4a55      	ldr	r2, [pc, #340]	; (87f0 <__aeabi_dmul+0x1e4>)
    869c:	00bf      	lsls	r7, r7, #2
    869e:	59d2      	ldr	r2, [r2, r7]
    86a0:	4697      	mov	pc, r2
    86a2:	465b      	mov	r3, fp
    86a4:	4303      	orrs	r3, r0
    86a6:	4699      	mov	r9, r3
    86a8:	d000      	beq.n	86ac <__aeabi_dmul+0xa0>
    86aa:	e087      	b.n	87bc <__aeabi_dmul+0x1b0>
    86ac:	2300      	movs	r3, #0
    86ae:	469b      	mov	fp, r3
    86b0:	3302      	adds	r3, #2
    86b2:	2708      	movs	r7, #8
    86b4:	9302      	str	r3, [sp, #8]
    86b6:	e7ce      	b.n	8656 <__aeabi_dmul+0x4a>
    86b8:	4642      	mov	r2, r8
    86ba:	9201      	str	r2, [sp, #4]
    86bc:	2802      	cmp	r0, #2
    86be:	d067      	beq.n	8790 <__aeabi_dmul+0x184>
    86c0:	2803      	cmp	r0, #3
    86c2:	d100      	bne.n	86c6 <__aeabi_dmul+0xba>
    86c4:	e20e      	b.n	8ae4 <__aeabi_dmul+0x4d8>
    86c6:	2801      	cmp	r0, #1
    86c8:	d000      	beq.n	86cc <__aeabi_dmul+0xc0>
    86ca:	e162      	b.n	8992 <__aeabi_dmul+0x386>
    86cc:	2300      	movs	r3, #0
    86ce:	2400      	movs	r4, #0
    86d0:	2200      	movs	r2, #0
    86d2:	4699      	mov	r9, r3
    86d4:	9901      	ldr	r1, [sp, #4]
    86d6:	4001      	ands	r1, r0
    86d8:	b2cd      	uxtb	r5, r1
    86da:	2100      	movs	r1, #0
    86dc:	0312      	lsls	r2, r2, #12
    86de:	0d0b      	lsrs	r3, r1, #20
    86e0:	0b12      	lsrs	r2, r2, #12
    86e2:	051b      	lsls	r3, r3, #20
    86e4:	4313      	orrs	r3, r2
    86e6:	4a43      	ldr	r2, [pc, #268]	; (87f4 <__aeabi_dmul+0x1e8>)
    86e8:	0524      	lsls	r4, r4, #20
    86ea:	4013      	ands	r3, r2
    86ec:	431c      	orrs	r4, r3
    86ee:	0064      	lsls	r4, r4, #1
    86f0:	07ed      	lsls	r5, r5, #31
    86f2:	0864      	lsrs	r4, r4, #1
    86f4:	432c      	orrs	r4, r5
    86f6:	4648      	mov	r0, r9
    86f8:	0021      	movs	r1, r4
    86fa:	b007      	add	sp, #28
    86fc:	bc3c      	pop	{r2, r3, r4, r5}
    86fe:	4690      	mov	r8, r2
    8700:	4699      	mov	r9, r3
    8702:	46a2      	mov	sl, r4
    8704:	46ab      	mov	fp, r5
    8706:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8708:	4303      	orrs	r3, r0
    870a:	4699      	mov	r9, r3
    870c:	d04f      	beq.n	87ae <__aeabi_dmul+0x1a2>
    870e:	465b      	mov	r3, fp
    8710:	2b00      	cmp	r3, #0
    8712:	d100      	bne.n	8716 <__aeabi_dmul+0x10a>
    8714:	e189      	b.n	8a2a <__aeabi_dmul+0x41e>
    8716:	4658      	mov	r0, fp
    8718:	f000 fd9a 	bl	9250 <__clzsi2>
    871c:	0003      	movs	r3, r0
    871e:	3b0b      	subs	r3, #11
    8720:	2b1c      	cmp	r3, #28
    8722:	dd00      	ble.n	8726 <__aeabi_dmul+0x11a>
    8724:	e17a      	b.n	8a1c <__aeabi_dmul+0x410>
    8726:	221d      	movs	r2, #29
    8728:	1ad3      	subs	r3, r2, r3
    872a:	003a      	movs	r2, r7
    872c:	0001      	movs	r1, r0
    872e:	465c      	mov	r4, fp
    8730:	40da      	lsrs	r2, r3
    8732:	3908      	subs	r1, #8
    8734:	408c      	lsls	r4, r1
    8736:	0013      	movs	r3, r2
    8738:	408f      	lsls	r7, r1
    873a:	4323      	orrs	r3, r4
    873c:	469b      	mov	fp, r3
    873e:	46b9      	mov	r9, r7
    8740:	2300      	movs	r3, #0
    8742:	4e2d      	ldr	r6, [pc, #180]	; (87f8 <__aeabi_dmul+0x1ec>)
    8744:	2700      	movs	r7, #0
    8746:	1a36      	subs	r6, r6, r0
    8748:	9302      	str	r3, [sp, #8]
    874a:	e784      	b.n	8656 <__aeabi_dmul+0x4a>
    874c:	4653      	mov	r3, sl
    874e:	4323      	orrs	r3, r4
    8750:	d12a      	bne.n	87a8 <__aeabi_dmul+0x19c>
    8752:	2400      	movs	r4, #0
    8754:	2002      	movs	r0, #2
    8756:	e796      	b.n	8686 <__aeabi_dmul+0x7a>
    8758:	4653      	mov	r3, sl
    875a:	4323      	orrs	r3, r4
    875c:	d020      	beq.n	87a0 <__aeabi_dmul+0x194>
    875e:	2c00      	cmp	r4, #0
    8760:	d100      	bne.n	8764 <__aeabi_dmul+0x158>
    8762:	e157      	b.n	8a14 <__aeabi_dmul+0x408>
    8764:	0020      	movs	r0, r4
    8766:	f000 fd73 	bl	9250 <__clzsi2>
    876a:	0003      	movs	r3, r0
    876c:	3b0b      	subs	r3, #11
    876e:	2b1c      	cmp	r3, #28
    8770:	dd00      	ble.n	8774 <__aeabi_dmul+0x168>
    8772:	e149      	b.n	8a08 <__aeabi_dmul+0x3fc>
    8774:	211d      	movs	r1, #29
    8776:	1acb      	subs	r3, r1, r3
    8778:	4651      	mov	r1, sl
    877a:	0002      	movs	r2, r0
    877c:	40d9      	lsrs	r1, r3
    877e:	4653      	mov	r3, sl
    8780:	3a08      	subs	r2, #8
    8782:	4094      	lsls	r4, r2
    8784:	4093      	lsls	r3, r2
    8786:	430c      	orrs	r4, r1
    8788:	4a1b      	ldr	r2, [pc, #108]	; (87f8 <__aeabi_dmul+0x1ec>)
    878a:	1a12      	subs	r2, r2, r0
    878c:	2000      	movs	r0, #0
    878e:	e77a      	b.n	8686 <__aeabi_dmul+0x7a>
    8790:	2501      	movs	r5, #1
    8792:	9b01      	ldr	r3, [sp, #4]
    8794:	4c14      	ldr	r4, [pc, #80]	; (87e8 <__aeabi_dmul+0x1dc>)
    8796:	401d      	ands	r5, r3
    8798:	2300      	movs	r3, #0
    879a:	2200      	movs	r2, #0
    879c:	4699      	mov	r9, r3
    879e:	e79c      	b.n	86da <__aeabi_dmul+0xce>
    87a0:	2400      	movs	r4, #0
    87a2:	2200      	movs	r2, #0
    87a4:	2001      	movs	r0, #1
    87a6:	e76e      	b.n	8686 <__aeabi_dmul+0x7a>
    87a8:	4653      	mov	r3, sl
    87aa:	2003      	movs	r0, #3
    87ac:	e76b      	b.n	8686 <__aeabi_dmul+0x7a>
    87ae:	2300      	movs	r3, #0
    87b0:	469b      	mov	fp, r3
    87b2:	3301      	adds	r3, #1
    87b4:	2704      	movs	r7, #4
    87b6:	2600      	movs	r6, #0
    87b8:	9302      	str	r3, [sp, #8]
    87ba:	e74c      	b.n	8656 <__aeabi_dmul+0x4a>
    87bc:	2303      	movs	r3, #3
    87be:	4681      	mov	r9, r0
    87c0:	270c      	movs	r7, #12
    87c2:	9302      	str	r3, [sp, #8]
    87c4:	e747      	b.n	8656 <__aeabi_dmul+0x4a>
    87c6:	2280      	movs	r2, #128	; 0x80
    87c8:	2300      	movs	r3, #0
    87ca:	2500      	movs	r5, #0
    87cc:	0312      	lsls	r2, r2, #12
    87ce:	4699      	mov	r9, r3
    87d0:	4c05      	ldr	r4, [pc, #20]	; (87e8 <__aeabi_dmul+0x1dc>)
    87d2:	e782      	b.n	86da <__aeabi_dmul+0xce>
    87d4:	465c      	mov	r4, fp
    87d6:	464b      	mov	r3, r9
    87d8:	9802      	ldr	r0, [sp, #8]
    87da:	e76f      	b.n	86bc <__aeabi_dmul+0xb0>
    87dc:	465c      	mov	r4, fp
    87de:	464b      	mov	r3, r9
    87e0:	9501      	str	r5, [sp, #4]
    87e2:	9802      	ldr	r0, [sp, #8]
    87e4:	e76a      	b.n	86bc <__aeabi_dmul+0xb0>
    87e6:	46c0      	nop			; (mov r8, r8)
    87e8:	000007ff 	.word	0x000007ff
    87ec:	fffffc01 	.word	0xfffffc01
    87f0:	0000bde0 	.word	0x0000bde0
    87f4:	800fffff 	.word	0x800fffff
    87f8:	fffffc0d 	.word	0xfffffc0d
    87fc:	464a      	mov	r2, r9
    87fe:	4649      	mov	r1, r9
    8800:	0c17      	lsrs	r7, r2, #16
    8802:	0c1a      	lsrs	r2, r3, #16
    8804:	041b      	lsls	r3, r3, #16
    8806:	0c1b      	lsrs	r3, r3, #16
    8808:	0408      	lsls	r0, r1, #16
    880a:	0019      	movs	r1, r3
    880c:	0c00      	lsrs	r0, r0, #16
    880e:	4341      	muls	r1, r0
    8810:	0015      	movs	r5, r2
    8812:	4688      	mov	r8, r1
    8814:	0019      	movs	r1, r3
    8816:	437d      	muls	r5, r7
    8818:	4379      	muls	r1, r7
    881a:	9503      	str	r5, [sp, #12]
    881c:	4689      	mov	r9, r1
    881e:	0029      	movs	r1, r5
    8820:	0015      	movs	r5, r2
    8822:	4345      	muls	r5, r0
    8824:	444d      	add	r5, r9
    8826:	9502      	str	r5, [sp, #8]
    8828:	4645      	mov	r5, r8
    882a:	0c2d      	lsrs	r5, r5, #16
    882c:	46aa      	mov	sl, r5
    882e:	9d02      	ldr	r5, [sp, #8]
    8830:	4455      	add	r5, sl
    8832:	45a9      	cmp	r9, r5
    8834:	d906      	bls.n	8844 <__aeabi_dmul+0x238>
    8836:	468a      	mov	sl, r1
    8838:	2180      	movs	r1, #128	; 0x80
    883a:	0249      	lsls	r1, r1, #9
    883c:	4689      	mov	r9, r1
    883e:	44ca      	add	sl, r9
    8840:	4651      	mov	r1, sl
    8842:	9103      	str	r1, [sp, #12]
    8844:	0c29      	lsrs	r1, r5, #16
    8846:	9104      	str	r1, [sp, #16]
    8848:	4641      	mov	r1, r8
    884a:	0409      	lsls	r1, r1, #16
    884c:	042d      	lsls	r5, r5, #16
    884e:	0c09      	lsrs	r1, r1, #16
    8850:	4688      	mov	r8, r1
    8852:	0029      	movs	r1, r5
    8854:	0c25      	lsrs	r5, r4, #16
    8856:	0424      	lsls	r4, r4, #16
    8858:	4441      	add	r1, r8
    885a:	0c24      	lsrs	r4, r4, #16
    885c:	9105      	str	r1, [sp, #20]
    885e:	0021      	movs	r1, r4
    8860:	4341      	muls	r1, r0
    8862:	4688      	mov	r8, r1
    8864:	0021      	movs	r1, r4
    8866:	4379      	muls	r1, r7
    8868:	468a      	mov	sl, r1
    886a:	4368      	muls	r0, r5
    886c:	4641      	mov	r1, r8
    886e:	4450      	add	r0, sl
    8870:	4681      	mov	r9, r0
    8872:	0c08      	lsrs	r0, r1, #16
    8874:	4448      	add	r0, r9
    8876:	436f      	muls	r7, r5
    8878:	4582      	cmp	sl, r0
    887a:	d903      	bls.n	8884 <__aeabi_dmul+0x278>
    887c:	2180      	movs	r1, #128	; 0x80
    887e:	0249      	lsls	r1, r1, #9
    8880:	4689      	mov	r9, r1
    8882:	444f      	add	r7, r9
    8884:	0c01      	lsrs	r1, r0, #16
    8886:	4689      	mov	r9, r1
    8888:	0039      	movs	r1, r7
    888a:	4449      	add	r1, r9
    888c:	9102      	str	r1, [sp, #8]
    888e:	4641      	mov	r1, r8
    8890:	040f      	lsls	r7, r1, #16
    8892:	9904      	ldr	r1, [sp, #16]
    8894:	0c3f      	lsrs	r7, r7, #16
    8896:	4688      	mov	r8, r1
    8898:	0400      	lsls	r0, r0, #16
    889a:	19c0      	adds	r0, r0, r7
    889c:	4480      	add	r8, r0
    889e:	4641      	mov	r1, r8
    88a0:	9104      	str	r1, [sp, #16]
    88a2:	4659      	mov	r1, fp
    88a4:	0c0f      	lsrs	r7, r1, #16
    88a6:	0409      	lsls	r1, r1, #16
    88a8:	0c09      	lsrs	r1, r1, #16
    88aa:	4688      	mov	r8, r1
    88ac:	4359      	muls	r1, r3
    88ae:	468a      	mov	sl, r1
    88b0:	0039      	movs	r1, r7
    88b2:	4351      	muls	r1, r2
    88b4:	4689      	mov	r9, r1
    88b6:	4641      	mov	r1, r8
    88b8:	434a      	muls	r2, r1
    88ba:	4651      	mov	r1, sl
    88bc:	0c09      	lsrs	r1, r1, #16
    88be:	468b      	mov	fp, r1
    88c0:	437b      	muls	r3, r7
    88c2:	18d2      	adds	r2, r2, r3
    88c4:	445a      	add	r2, fp
    88c6:	4293      	cmp	r3, r2
    88c8:	d903      	bls.n	88d2 <__aeabi_dmul+0x2c6>
    88ca:	2380      	movs	r3, #128	; 0x80
    88cc:	025b      	lsls	r3, r3, #9
    88ce:	469b      	mov	fp, r3
    88d0:	44d9      	add	r9, fp
    88d2:	4651      	mov	r1, sl
    88d4:	0409      	lsls	r1, r1, #16
    88d6:	0c09      	lsrs	r1, r1, #16
    88d8:	468a      	mov	sl, r1
    88da:	4641      	mov	r1, r8
    88dc:	4361      	muls	r1, r4
    88de:	437c      	muls	r4, r7
    88e0:	0c13      	lsrs	r3, r2, #16
    88e2:	0412      	lsls	r2, r2, #16
    88e4:	444b      	add	r3, r9
    88e6:	4452      	add	r2, sl
    88e8:	46a1      	mov	r9, r4
    88ea:	468a      	mov	sl, r1
    88ec:	003c      	movs	r4, r7
    88ee:	4641      	mov	r1, r8
    88f0:	436c      	muls	r4, r5
    88f2:	434d      	muls	r5, r1
    88f4:	4651      	mov	r1, sl
    88f6:	444d      	add	r5, r9
    88f8:	0c0f      	lsrs	r7, r1, #16
    88fa:	197d      	adds	r5, r7, r5
    88fc:	45a9      	cmp	r9, r5
    88fe:	d903      	bls.n	8908 <__aeabi_dmul+0x2fc>
    8900:	2180      	movs	r1, #128	; 0x80
    8902:	0249      	lsls	r1, r1, #9
    8904:	4688      	mov	r8, r1
    8906:	4444      	add	r4, r8
    8908:	9f04      	ldr	r7, [sp, #16]
    890a:	9903      	ldr	r1, [sp, #12]
    890c:	46b8      	mov	r8, r7
    890e:	4441      	add	r1, r8
    8910:	468b      	mov	fp, r1
    8912:	4583      	cmp	fp, r0
    8914:	4180      	sbcs	r0, r0
    8916:	4241      	negs	r1, r0
    8918:	4688      	mov	r8, r1
    891a:	4651      	mov	r1, sl
    891c:	0408      	lsls	r0, r1, #16
    891e:	042f      	lsls	r7, r5, #16
    8920:	0c00      	lsrs	r0, r0, #16
    8922:	183f      	adds	r7, r7, r0
    8924:	4658      	mov	r0, fp
    8926:	9902      	ldr	r1, [sp, #8]
    8928:	1810      	adds	r0, r2, r0
    892a:	4689      	mov	r9, r1
    892c:	4290      	cmp	r0, r2
    892e:	4192      	sbcs	r2, r2
    8930:	444f      	add	r7, r9
    8932:	46ba      	mov	sl, r7
    8934:	4252      	negs	r2, r2
    8936:	4699      	mov	r9, r3
    8938:	4693      	mov	fp, r2
    893a:	44c2      	add	sl, r8
    893c:	44d1      	add	r9, sl
    893e:	44cb      	add	fp, r9
    8940:	428f      	cmp	r7, r1
    8942:	41bf      	sbcs	r7, r7
    8944:	45c2      	cmp	sl, r8
    8946:	4189      	sbcs	r1, r1
    8948:	4599      	cmp	r9, r3
    894a:	419b      	sbcs	r3, r3
    894c:	4593      	cmp	fp, r2
    894e:	4192      	sbcs	r2, r2
    8950:	427f      	negs	r7, r7
    8952:	4249      	negs	r1, r1
    8954:	0c2d      	lsrs	r5, r5, #16
    8956:	4252      	negs	r2, r2
    8958:	430f      	orrs	r7, r1
    895a:	425b      	negs	r3, r3
    895c:	4313      	orrs	r3, r2
    895e:	197f      	adds	r7, r7, r5
    8960:	18ff      	adds	r7, r7, r3
    8962:	465b      	mov	r3, fp
    8964:	193c      	adds	r4, r7, r4
    8966:	0ddb      	lsrs	r3, r3, #23
    8968:	9a05      	ldr	r2, [sp, #20]
    896a:	0264      	lsls	r4, r4, #9
    896c:	431c      	orrs	r4, r3
    896e:	0243      	lsls	r3, r0, #9
    8970:	4313      	orrs	r3, r2
    8972:	1e5d      	subs	r5, r3, #1
    8974:	41ab      	sbcs	r3, r5
    8976:	465a      	mov	r2, fp
    8978:	0dc0      	lsrs	r0, r0, #23
    897a:	4303      	orrs	r3, r0
    897c:	0252      	lsls	r2, r2, #9
    897e:	4313      	orrs	r3, r2
    8980:	01e2      	lsls	r2, r4, #7
    8982:	d556      	bpl.n	8a32 <__aeabi_dmul+0x426>
    8984:	2001      	movs	r0, #1
    8986:	085a      	lsrs	r2, r3, #1
    8988:	4003      	ands	r3, r0
    898a:	4313      	orrs	r3, r2
    898c:	07e2      	lsls	r2, r4, #31
    898e:	4313      	orrs	r3, r2
    8990:	0864      	lsrs	r4, r4, #1
    8992:	485a      	ldr	r0, [pc, #360]	; (8afc <__aeabi_dmul+0x4f0>)
    8994:	4460      	add	r0, ip
    8996:	2800      	cmp	r0, #0
    8998:	dd4d      	ble.n	8a36 <__aeabi_dmul+0x42a>
    899a:	075a      	lsls	r2, r3, #29
    899c:	d009      	beq.n	89b2 <__aeabi_dmul+0x3a6>
    899e:	220f      	movs	r2, #15
    89a0:	401a      	ands	r2, r3
    89a2:	2a04      	cmp	r2, #4
    89a4:	d005      	beq.n	89b2 <__aeabi_dmul+0x3a6>
    89a6:	1d1a      	adds	r2, r3, #4
    89a8:	429a      	cmp	r2, r3
    89aa:	419b      	sbcs	r3, r3
    89ac:	425b      	negs	r3, r3
    89ae:	18e4      	adds	r4, r4, r3
    89b0:	0013      	movs	r3, r2
    89b2:	01e2      	lsls	r2, r4, #7
    89b4:	d504      	bpl.n	89c0 <__aeabi_dmul+0x3b4>
    89b6:	2080      	movs	r0, #128	; 0x80
    89b8:	4a51      	ldr	r2, [pc, #324]	; (8b00 <__aeabi_dmul+0x4f4>)
    89ba:	00c0      	lsls	r0, r0, #3
    89bc:	4014      	ands	r4, r2
    89be:	4460      	add	r0, ip
    89c0:	4a50      	ldr	r2, [pc, #320]	; (8b04 <__aeabi_dmul+0x4f8>)
    89c2:	4290      	cmp	r0, r2
    89c4:	dd00      	ble.n	89c8 <__aeabi_dmul+0x3bc>
    89c6:	e6e3      	b.n	8790 <__aeabi_dmul+0x184>
    89c8:	2501      	movs	r5, #1
    89ca:	08db      	lsrs	r3, r3, #3
    89cc:	0762      	lsls	r2, r4, #29
    89ce:	431a      	orrs	r2, r3
    89d0:	0264      	lsls	r4, r4, #9
    89d2:	9b01      	ldr	r3, [sp, #4]
    89d4:	4691      	mov	r9, r2
    89d6:	0b22      	lsrs	r2, r4, #12
    89d8:	0544      	lsls	r4, r0, #21
    89da:	0d64      	lsrs	r4, r4, #21
    89dc:	401d      	ands	r5, r3
    89de:	e67c      	b.n	86da <__aeabi_dmul+0xce>
    89e0:	2280      	movs	r2, #128	; 0x80
    89e2:	4659      	mov	r1, fp
    89e4:	0312      	lsls	r2, r2, #12
    89e6:	4211      	tst	r1, r2
    89e8:	d008      	beq.n	89fc <__aeabi_dmul+0x3f0>
    89ea:	4214      	tst	r4, r2
    89ec:	d106      	bne.n	89fc <__aeabi_dmul+0x3f0>
    89ee:	4322      	orrs	r2, r4
    89f0:	0312      	lsls	r2, r2, #12
    89f2:	0b12      	lsrs	r2, r2, #12
    89f4:	4645      	mov	r5, r8
    89f6:	4699      	mov	r9, r3
    89f8:	4c43      	ldr	r4, [pc, #268]	; (8b08 <__aeabi_dmul+0x4fc>)
    89fa:	e66e      	b.n	86da <__aeabi_dmul+0xce>
    89fc:	465b      	mov	r3, fp
    89fe:	431a      	orrs	r2, r3
    8a00:	0312      	lsls	r2, r2, #12
    8a02:	0b12      	lsrs	r2, r2, #12
    8a04:	4c40      	ldr	r4, [pc, #256]	; (8b08 <__aeabi_dmul+0x4fc>)
    8a06:	e668      	b.n	86da <__aeabi_dmul+0xce>
    8a08:	0003      	movs	r3, r0
    8a0a:	4654      	mov	r4, sl
    8a0c:	3b28      	subs	r3, #40	; 0x28
    8a0e:	409c      	lsls	r4, r3
    8a10:	2300      	movs	r3, #0
    8a12:	e6b9      	b.n	8788 <__aeabi_dmul+0x17c>
    8a14:	f000 fc1c 	bl	9250 <__clzsi2>
    8a18:	3020      	adds	r0, #32
    8a1a:	e6a6      	b.n	876a <__aeabi_dmul+0x15e>
    8a1c:	0003      	movs	r3, r0
    8a1e:	3b28      	subs	r3, #40	; 0x28
    8a20:	409f      	lsls	r7, r3
    8a22:	2300      	movs	r3, #0
    8a24:	46bb      	mov	fp, r7
    8a26:	4699      	mov	r9, r3
    8a28:	e68a      	b.n	8740 <__aeabi_dmul+0x134>
    8a2a:	f000 fc11 	bl	9250 <__clzsi2>
    8a2e:	3020      	adds	r0, #32
    8a30:	e674      	b.n	871c <__aeabi_dmul+0x110>
    8a32:	46b4      	mov	ip, r6
    8a34:	e7ad      	b.n	8992 <__aeabi_dmul+0x386>
    8a36:	2501      	movs	r5, #1
    8a38:	1a2a      	subs	r2, r5, r0
    8a3a:	2a38      	cmp	r2, #56	; 0x38
    8a3c:	dd06      	ble.n	8a4c <__aeabi_dmul+0x440>
    8a3e:	9b01      	ldr	r3, [sp, #4]
    8a40:	2400      	movs	r4, #0
    8a42:	401d      	ands	r5, r3
    8a44:	2300      	movs	r3, #0
    8a46:	2200      	movs	r2, #0
    8a48:	4699      	mov	r9, r3
    8a4a:	e646      	b.n	86da <__aeabi_dmul+0xce>
    8a4c:	2a1f      	cmp	r2, #31
    8a4e:	dc21      	bgt.n	8a94 <__aeabi_dmul+0x488>
    8a50:	2520      	movs	r5, #32
    8a52:	0020      	movs	r0, r4
    8a54:	1aad      	subs	r5, r5, r2
    8a56:	001e      	movs	r6, r3
    8a58:	40ab      	lsls	r3, r5
    8a5a:	40a8      	lsls	r0, r5
    8a5c:	40d6      	lsrs	r6, r2
    8a5e:	1e5d      	subs	r5, r3, #1
    8a60:	41ab      	sbcs	r3, r5
    8a62:	4330      	orrs	r0, r6
    8a64:	4318      	orrs	r0, r3
    8a66:	40d4      	lsrs	r4, r2
    8a68:	0743      	lsls	r3, r0, #29
    8a6a:	d009      	beq.n	8a80 <__aeabi_dmul+0x474>
    8a6c:	230f      	movs	r3, #15
    8a6e:	4003      	ands	r3, r0
    8a70:	2b04      	cmp	r3, #4
    8a72:	d005      	beq.n	8a80 <__aeabi_dmul+0x474>
    8a74:	0003      	movs	r3, r0
    8a76:	1d18      	adds	r0, r3, #4
    8a78:	4298      	cmp	r0, r3
    8a7a:	419b      	sbcs	r3, r3
    8a7c:	425b      	negs	r3, r3
    8a7e:	18e4      	adds	r4, r4, r3
    8a80:	0223      	lsls	r3, r4, #8
    8a82:	d521      	bpl.n	8ac8 <__aeabi_dmul+0x4bc>
    8a84:	2501      	movs	r5, #1
    8a86:	9b01      	ldr	r3, [sp, #4]
    8a88:	2401      	movs	r4, #1
    8a8a:	401d      	ands	r5, r3
    8a8c:	2300      	movs	r3, #0
    8a8e:	2200      	movs	r2, #0
    8a90:	4699      	mov	r9, r3
    8a92:	e622      	b.n	86da <__aeabi_dmul+0xce>
    8a94:	251f      	movs	r5, #31
    8a96:	0021      	movs	r1, r4
    8a98:	426d      	negs	r5, r5
    8a9a:	1a28      	subs	r0, r5, r0
    8a9c:	40c1      	lsrs	r1, r0
    8a9e:	0008      	movs	r0, r1
    8aa0:	2a20      	cmp	r2, #32
    8aa2:	d01d      	beq.n	8ae0 <__aeabi_dmul+0x4d4>
    8aa4:	355f      	adds	r5, #95	; 0x5f
    8aa6:	1aaa      	subs	r2, r5, r2
    8aa8:	4094      	lsls	r4, r2
    8aaa:	4323      	orrs	r3, r4
    8aac:	1e5c      	subs	r4, r3, #1
    8aae:	41a3      	sbcs	r3, r4
    8ab0:	2507      	movs	r5, #7
    8ab2:	4303      	orrs	r3, r0
    8ab4:	401d      	ands	r5, r3
    8ab6:	2200      	movs	r2, #0
    8ab8:	2d00      	cmp	r5, #0
    8aba:	d009      	beq.n	8ad0 <__aeabi_dmul+0x4c4>
    8abc:	220f      	movs	r2, #15
    8abe:	2400      	movs	r4, #0
    8ac0:	401a      	ands	r2, r3
    8ac2:	0018      	movs	r0, r3
    8ac4:	2a04      	cmp	r2, #4
    8ac6:	d1d6      	bne.n	8a76 <__aeabi_dmul+0x46a>
    8ac8:	0003      	movs	r3, r0
    8aca:	0765      	lsls	r5, r4, #29
    8acc:	0264      	lsls	r4, r4, #9
    8ace:	0b22      	lsrs	r2, r4, #12
    8ad0:	08db      	lsrs	r3, r3, #3
    8ad2:	432b      	orrs	r3, r5
    8ad4:	2501      	movs	r5, #1
    8ad6:	4699      	mov	r9, r3
    8ad8:	9b01      	ldr	r3, [sp, #4]
    8ada:	2400      	movs	r4, #0
    8adc:	401d      	ands	r5, r3
    8ade:	e5fc      	b.n	86da <__aeabi_dmul+0xce>
    8ae0:	2400      	movs	r4, #0
    8ae2:	e7e2      	b.n	8aaa <__aeabi_dmul+0x49e>
    8ae4:	2280      	movs	r2, #128	; 0x80
    8ae6:	2501      	movs	r5, #1
    8ae8:	0312      	lsls	r2, r2, #12
    8aea:	4322      	orrs	r2, r4
    8aec:	9901      	ldr	r1, [sp, #4]
    8aee:	0312      	lsls	r2, r2, #12
    8af0:	0b12      	lsrs	r2, r2, #12
    8af2:	400d      	ands	r5, r1
    8af4:	4699      	mov	r9, r3
    8af6:	4c04      	ldr	r4, [pc, #16]	; (8b08 <__aeabi_dmul+0x4fc>)
    8af8:	e5ef      	b.n	86da <__aeabi_dmul+0xce>
    8afa:	46c0      	nop			; (mov r8, r8)
    8afc:	000003ff 	.word	0x000003ff
    8b00:	feffffff 	.word	0xfeffffff
    8b04:	000007fe 	.word	0x000007fe
    8b08:	000007ff 	.word	0x000007ff

00008b0c <__aeabi_dsub>:
    8b0c:	b5f0      	push	{r4, r5, r6, r7, lr}
    8b0e:	4646      	mov	r6, r8
    8b10:	46d6      	mov	lr, sl
    8b12:	464f      	mov	r7, r9
    8b14:	030c      	lsls	r4, r1, #12
    8b16:	b5c0      	push	{r6, r7, lr}
    8b18:	0fcd      	lsrs	r5, r1, #31
    8b1a:	004e      	lsls	r6, r1, #1
    8b1c:	0a61      	lsrs	r1, r4, #9
    8b1e:	0f44      	lsrs	r4, r0, #29
    8b20:	430c      	orrs	r4, r1
    8b22:	00c1      	lsls	r1, r0, #3
    8b24:	0058      	lsls	r0, r3, #1
    8b26:	0d40      	lsrs	r0, r0, #21
    8b28:	4684      	mov	ip, r0
    8b2a:	468a      	mov	sl, r1
    8b2c:	000f      	movs	r7, r1
    8b2e:	0319      	lsls	r1, r3, #12
    8b30:	0f50      	lsrs	r0, r2, #29
    8b32:	0a49      	lsrs	r1, r1, #9
    8b34:	4301      	orrs	r1, r0
    8b36:	48c6      	ldr	r0, [pc, #792]	; (8e50 <__aeabi_dsub+0x344>)
    8b38:	0d76      	lsrs	r6, r6, #21
    8b3a:	46a8      	mov	r8, r5
    8b3c:	0fdb      	lsrs	r3, r3, #31
    8b3e:	00d2      	lsls	r2, r2, #3
    8b40:	4584      	cmp	ip, r0
    8b42:	d100      	bne.n	8b46 <__aeabi_dsub+0x3a>
    8b44:	e0d8      	b.n	8cf8 <__aeabi_dsub+0x1ec>
    8b46:	2001      	movs	r0, #1
    8b48:	4043      	eors	r3, r0
    8b4a:	42ab      	cmp	r3, r5
    8b4c:	d100      	bne.n	8b50 <__aeabi_dsub+0x44>
    8b4e:	e0a6      	b.n	8c9e <__aeabi_dsub+0x192>
    8b50:	4660      	mov	r0, ip
    8b52:	1a35      	subs	r5, r6, r0
    8b54:	2d00      	cmp	r5, #0
    8b56:	dc00      	bgt.n	8b5a <__aeabi_dsub+0x4e>
    8b58:	e105      	b.n	8d66 <__aeabi_dsub+0x25a>
    8b5a:	2800      	cmp	r0, #0
    8b5c:	d110      	bne.n	8b80 <__aeabi_dsub+0x74>
    8b5e:	000b      	movs	r3, r1
    8b60:	4313      	orrs	r3, r2
    8b62:	d100      	bne.n	8b66 <__aeabi_dsub+0x5a>
    8b64:	e0d7      	b.n	8d16 <__aeabi_dsub+0x20a>
    8b66:	1e6b      	subs	r3, r5, #1
    8b68:	2b00      	cmp	r3, #0
    8b6a:	d000      	beq.n	8b6e <__aeabi_dsub+0x62>
    8b6c:	e14b      	b.n	8e06 <__aeabi_dsub+0x2fa>
    8b6e:	4653      	mov	r3, sl
    8b70:	1a9f      	subs	r7, r3, r2
    8b72:	45ba      	cmp	sl, r7
    8b74:	4180      	sbcs	r0, r0
    8b76:	1a64      	subs	r4, r4, r1
    8b78:	4240      	negs	r0, r0
    8b7a:	1a24      	subs	r4, r4, r0
    8b7c:	2601      	movs	r6, #1
    8b7e:	e01e      	b.n	8bbe <__aeabi_dsub+0xb2>
    8b80:	4bb3      	ldr	r3, [pc, #716]	; (8e50 <__aeabi_dsub+0x344>)
    8b82:	429e      	cmp	r6, r3
    8b84:	d048      	beq.n	8c18 <__aeabi_dsub+0x10c>
    8b86:	2380      	movs	r3, #128	; 0x80
    8b88:	041b      	lsls	r3, r3, #16
    8b8a:	4319      	orrs	r1, r3
    8b8c:	2d38      	cmp	r5, #56	; 0x38
    8b8e:	dd00      	ble.n	8b92 <__aeabi_dsub+0x86>
    8b90:	e119      	b.n	8dc6 <__aeabi_dsub+0x2ba>
    8b92:	2d1f      	cmp	r5, #31
    8b94:	dd00      	ble.n	8b98 <__aeabi_dsub+0x8c>
    8b96:	e14c      	b.n	8e32 <__aeabi_dsub+0x326>
    8b98:	2320      	movs	r3, #32
    8b9a:	000f      	movs	r7, r1
    8b9c:	1b5b      	subs	r3, r3, r5
    8b9e:	0010      	movs	r0, r2
    8ba0:	409a      	lsls	r2, r3
    8ba2:	409f      	lsls	r7, r3
    8ba4:	40e8      	lsrs	r0, r5
    8ba6:	1e53      	subs	r3, r2, #1
    8ba8:	419a      	sbcs	r2, r3
    8baa:	40e9      	lsrs	r1, r5
    8bac:	4307      	orrs	r7, r0
    8bae:	4317      	orrs	r7, r2
    8bb0:	4653      	mov	r3, sl
    8bb2:	1bdf      	subs	r7, r3, r7
    8bb4:	1a61      	subs	r1, r4, r1
    8bb6:	45ba      	cmp	sl, r7
    8bb8:	41a4      	sbcs	r4, r4
    8bba:	4264      	negs	r4, r4
    8bbc:	1b0c      	subs	r4, r1, r4
    8bbe:	0223      	lsls	r3, r4, #8
    8bc0:	d400      	bmi.n	8bc4 <__aeabi_dsub+0xb8>
    8bc2:	e0c5      	b.n	8d50 <__aeabi_dsub+0x244>
    8bc4:	0264      	lsls	r4, r4, #9
    8bc6:	0a65      	lsrs	r5, r4, #9
    8bc8:	2d00      	cmp	r5, #0
    8bca:	d100      	bne.n	8bce <__aeabi_dsub+0xc2>
    8bcc:	e0f6      	b.n	8dbc <__aeabi_dsub+0x2b0>
    8bce:	0028      	movs	r0, r5
    8bd0:	f000 fb3e 	bl	9250 <__clzsi2>
    8bd4:	0003      	movs	r3, r0
    8bd6:	3b08      	subs	r3, #8
    8bd8:	2b1f      	cmp	r3, #31
    8bda:	dd00      	ble.n	8bde <__aeabi_dsub+0xd2>
    8bdc:	e0e9      	b.n	8db2 <__aeabi_dsub+0x2a6>
    8bde:	2220      	movs	r2, #32
    8be0:	003c      	movs	r4, r7
    8be2:	1ad2      	subs	r2, r2, r3
    8be4:	409d      	lsls	r5, r3
    8be6:	40d4      	lsrs	r4, r2
    8be8:	409f      	lsls	r7, r3
    8bea:	4325      	orrs	r5, r4
    8bec:	429e      	cmp	r6, r3
    8bee:	dd00      	ble.n	8bf2 <__aeabi_dsub+0xe6>
    8bf0:	e0db      	b.n	8daa <__aeabi_dsub+0x29e>
    8bf2:	1b9e      	subs	r6, r3, r6
    8bf4:	1c73      	adds	r3, r6, #1
    8bf6:	2b1f      	cmp	r3, #31
    8bf8:	dd00      	ble.n	8bfc <__aeabi_dsub+0xf0>
    8bfa:	e10a      	b.n	8e12 <__aeabi_dsub+0x306>
    8bfc:	2220      	movs	r2, #32
    8bfe:	0038      	movs	r0, r7
    8c00:	1ad2      	subs	r2, r2, r3
    8c02:	0029      	movs	r1, r5
    8c04:	4097      	lsls	r7, r2
    8c06:	002c      	movs	r4, r5
    8c08:	4091      	lsls	r1, r2
    8c0a:	40d8      	lsrs	r0, r3
    8c0c:	1e7a      	subs	r2, r7, #1
    8c0e:	4197      	sbcs	r7, r2
    8c10:	40dc      	lsrs	r4, r3
    8c12:	2600      	movs	r6, #0
    8c14:	4301      	orrs	r1, r0
    8c16:	430f      	orrs	r7, r1
    8c18:	077b      	lsls	r3, r7, #29
    8c1a:	d009      	beq.n	8c30 <__aeabi_dsub+0x124>
    8c1c:	230f      	movs	r3, #15
    8c1e:	403b      	ands	r3, r7
    8c20:	2b04      	cmp	r3, #4
    8c22:	d005      	beq.n	8c30 <__aeabi_dsub+0x124>
    8c24:	1d3b      	adds	r3, r7, #4
    8c26:	42bb      	cmp	r3, r7
    8c28:	41bf      	sbcs	r7, r7
    8c2a:	427f      	negs	r7, r7
    8c2c:	19e4      	adds	r4, r4, r7
    8c2e:	001f      	movs	r7, r3
    8c30:	0223      	lsls	r3, r4, #8
    8c32:	d525      	bpl.n	8c80 <__aeabi_dsub+0x174>
    8c34:	4b86      	ldr	r3, [pc, #536]	; (8e50 <__aeabi_dsub+0x344>)
    8c36:	3601      	adds	r6, #1
    8c38:	429e      	cmp	r6, r3
    8c3a:	d100      	bne.n	8c3e <__aeabi_dsub+0x132>
    8c3c:	e0af      	b.n	8d9e <__aeabi_dsub+0x292>
    8c3e:	4b85      	ldr	r3, [pc, #532]	; (8e54 <__aeabi_dsub+0x348>)
    8c40:	2501      	movs	r5, #1
    8c42:	401c      	ands	r4, r3
    8c44:	4643      	mov	r3, r8
    8c46:	0762      	lsls	r2, r4, #29
    8c48:	08ff      	lsrs	r7, r7, #3
    8c4a:	0264      	lsls	r4, r4, #9
    8c4c:	0576      	lsls	r6, r6, #21
    8c4e:	4317      	orrs	r7, r2
    8c50:	0b24      	lsrs	r4, r4, #12
    8c52:	0d76      	lsrs	r6, r6, #21
    8c54:	401d      	ands	r5, r3
    8c56:	2100      	movs	r1, #0
    8c58:	0324      	lsls	r4, r4, #12
    8c5a:	0b23      	lsrs	r3, r4, #12
    8c5c:	0d0c      	lsrs	r4, r1, #20
    8c5e:	4a7e      	ldr	r2, [pc, #504]	; (8e58 <__aeabi_dsub+0x34c>)
    8c60:	0524      	lsls	r4, r4, #20
    8c62:	431c      	orrs	r4, r3
    8c64:	4014      	ands	r4, r2
    8c66:	0533      	lsls	r3, r6, #20
    8c68:	4323      	orrs	r3, r4
    8c6a:	005b      	lsls	r3, r3, #1
    8c6c:	07ed      	lsls	r5, r5, #31
    8c6e:	085b      	lsrs	r3, r3, #1
    8c70:	432b      	orrs	r3, r5
    8c72:	0038      	movs	r0, r7
    8c74:	0019      	movs	r1, r3
    8c76:	bc1c      	pop	{r2, r3, r4}
    8c78:	4690      	mov	r8, r2
    8c7a:	4699      	mov	r9, r3
    8c7c:	46a2      	mov	sl, r4
    8c7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8c80:	2501      	movs	r5, #1
    8c82:	4643      	mov	r3, r8
    8c84:	0762      	lsls	r2, r4, #29
    8c86:	08ff      	lsrs	r7, r7, #3
    8c88:	4317      	orrs	r7, r2
    8c8a:	08e4      	lsrs	r4, r4, #3
    8c8c:	401d      	ands	r5, r3
    8c8e:	4b70      	ldr	r3, [pc, #448]	; (8e50 <__aeabi_dsub+0x344>)
    8c90:	429e      	cmp	r6, r3
    8c92:	d036      	beq.n	8d02 <__aeabi_dsub+0x1f6>
    8c94:	0324      	lsls	r4, r4, #12
    8c96:	0576      	lsls	r6, r6, #21
    8c98:	0b24      	lsrs	r4, r4, #12
    8c9a:	0d76      	lsrs	r6, r6, #21
    8c9c:	e7db      	b.n	8c56 <__aeabi_dsub+0x14a>
    8c9e:	4663      	mov	r3, ip
    8ca0:	1af3      	subs	r3, r6, r3
    8ca2:	2b00      	cmp	r3, #0
    8ca4:	dc00      	bgt.n	8ca8 <__aeabi_dsub+0x19c>
    8ca6:	e094      	b.n	8dd2 <__aeabi_dsub+0x2c6>
    8ca8:	4660      	mov	r0, ip
    8caa:	2800      	cmp	r0, #0
    8cac:	d035      	beq.n	8d1a <__aeabi_dsub+0x20e>
    8cae:	4868      	ldr	r0, [pc, #416]	; (8e50 <__aeabi_dsub+0x344>)
    8cb0:	4286      	cmp	r6, r0
    8cb2:	d0b1      	beq.n	8c18 <__aeabi_dsub+0x10c>
    8cb4:	2780      	movs	r7, #128	; 0x80
    8cb6:	043f      	lsls	r7, r7, #16
    8cb8:	4339      	orrs	r1, r7
    8cba:	2b38      	cmp	r3, #56	; 0x38
    8cbc:	dc00      	bgt.n	8cc0 <__aeabi_dsub+0x1b4>
    8cbe:	e0fd      	b.n	8ebc <__aeabi_dsub+0x3b0>
    8cc0:	430a      	orrs	r2, r1
    8cc2:	0017      	movs	r7, r2
    8cc4:	2100      	movs	r1, #0
    8cc6:	1e7a      	subs	r2, r7, #1
    8cc8:	4197      	sbcs	r7, r2
    8cca:	4457      	add	r7, sl
    8ccc:	4557      	cmp	r7, sl
    8cce:	4180      	sbcs	r0, r0
    8cd0:	1909      	adds	r1, r1, r4
    8cd2:	4244      	negs	r4, r0
    8cd4:	190c      	adds	r4, r1, r4
    8cd6:	0223      	lsls	r3, r4, #8
    8cd8:	d53a      	bpl.n	8d50 <__aeabi_dsub+0x244>
    8cda:	4b5d      	ldr	r3, [pc, #372]	; (8e50 <__aeabi_dsub+0x344>)
    8cdc:	3601      	adds	r6, #1
    8cde:	429e      	cmp	r6, r3
    8ce0:	d100      	bne.n	8ce4 <__aeabi_dsub+0x1d8>
    8ce2:	e14b      	b.n	8f7c <__aeabi_dsub+0x470>
    8ce4:	2201      	movs	r2, #1
    8ce6:	4b5b      	ldr	r3, [pc, #364]	; (8e54 <__aeabi_dsub+0x348>)
    8ce8:	401c      	ands	r4, r3
    8cea:	087b      	lsrs	r3, r7, #1
    8cec:	4017      	ands	r7, r2
    8cee:	431f      	orrs	r7, r3
    8cf0:	07e2      	lsls	r2, r4, #31
    8cf2:	4317      	orrs	r7, r2
    8cf4:	0864      	lsrs	r4, r4, #1
    8cf6:	e78f      	b.n	8c18 <__aeabi_dsub+0x10c>
    8cf8:	0008      	movs	r0, r1
    8cfa:	4310      	orrs	r0, r2
    8cfc:	d000      	beq.n	8d00 <__aeabi_dsub+0x1f4>
    8cfe:	e724      	b.n	8b4a <__aeabi_dsub+0x3e>
    8d00:	e721      	b.n	8b46 <__aeabi_dsub+0x3a>
    8d02:	0023      	movs	r3, r4
    8d04:	433b      	orrs	r3, r7
    8d06:	d100      	bne.n	8d0a <__aeabi_dsub+0x1fe>
    8d08:	e1b9      	b.n	907e <__aeabi_dsub+0x572>
    8d0a:	2280      	movs	r2, #128	; 0x80
    8d0c:	0312      	lsls	r2, r2, #12
    8d0e:	4314      	orrs	r4, r2
    8d10:	0324      	lsls	r4, r4, #12
    8d12:	0b24      	lsrs	r4, r4, #12
    8d14:	e79f      	b.n	8c56 <__aeabi_dsub+0x14a>
    8d16:	002e      	movs	r6, r5
    8d18:	e77e      	b.n	8c18 <__aeabi_dsub+0x10c>
    8d1a:	0008      	movs	r0, r1
    8d1c:	4310      	orrs	r0, r2
    8d1e:	d100      	bne.n	8d22 <__aeabi_dsub+0x216>
    8d20:	e0ca      	b.n	8eb8 <__aeabi_dsub+0x3ac>
    8d22:	1e58      	subs	r0, r3, #1
    8d24:	4684      	mov	ip, r0
    8d26:	2800      	cmp	r0, #0
    8d28:	d000      	beq.n	8d2c <__aeabi_dsub+0x220>
    8d2a:	e0e7      	b.n	8efc <__aeabi_dsub+0x3f0>
    8d2c:	4452      	add	r2, sl
    8d2e:	4552      	cmp	r2, sl
    8d30:	4180      	sbcs	r0, r0
    8d32:	1864      	adds	r4, r4, r1
    8d34:	4240      	negs	r0, r0
    8d36:	1824      	adds	r4, r4, r0
    8d38:	0017      	movs	r7, r2
    8d3a:	2601      	movs	r6, #1
    8d3c:	0223      	lsls	r3, r4, #8
    8d3e:	d507      	bpl.n	8d50 <__aeabi_dsub+0x244>
    8d40:	2602      	movs	r6, #2
    8d42:	e7cf      	b.n	8ce4 <__aeabi_dsub+0x1d8>
    8d44:	4664      	mov	r4, ip
    8d46:	432c      	orrs	r4, r5
    8d48:	d100      	bne.n	8d4c <__aeabi_dsub+0x240>
    8d4a:	e1b3      	b.n	90b4 <__aeabi_dsub+0x5a8>
    8d4c:	002c      	movs	r4, r5
    8d4e:	4667      	mov	r7, ip
    8d50:	077b      	lsls	r3, r7, #29
    8d52:	d000      	beq.n	8d56 <__aeabi_dsub+0x24a>
    8d54:	e762      	b.n	8c1c <__aeabi_dsub+0x110>
    8d56:	0763      	lsls	r3, r4, #29
    8d58:	08ff      	lsrs	r7, r7, #3
    8d5a:	431f      	orrs	r7, r3
    8d5c:	2501      	movs	r5, #1
    8d5e:	4643      	mov	r3, r8
    8d60:	08e4      	lsrs	r4, r4, #3
    8d62:	401d      	ands	r5, r3
    8d64:	e793      	b.n	8c8e <__aeabi_dsub+0x182>
    8d66:	2d00      	cmp	r5, #0
    8d68:	d178      	bne.n	8e5c <__aeabi_dsub+0x350>
    8d6a:	1c75      	adds	r5, r6, #1
    8d6c:	056d      	lsls	r5, r5, #21
    8d6e:	0d6d      	lsrs	r5, r5, #21
    8d70:	2d01      	cmp	r5, #1
    8d72:	dc00      	bgt.n	8d76 <__aeabi_dsub+0x26a>
    8d74:	e0f2      	b.n	8f5c <__aeabi_dsub+0x450>
    8d76:	4650      	mov	r0, sl
    8d78:	1a80      	subs	r0, r0, r2
    8d7a:	4582      	cmp	sl, r0
    8d7c:	41bf      	sbcs	r7, r7
    8d7e:	1a65      	subs	r5, r4, r1
    8d80:	427f      	negs	r7, r7
    8d82:	1bed      	subs	r5, r5, r7
    8d84:	4684      	mov	ip, r0
    8d86:	0228      	lsls	r0, r5, #8
    8d88:	d400      	bmi.n	8d8c <__aeabi_dsub+0x280>
    8d8a:	e08c      	b.n	8ea6 <__aeabi_dsub+0x39a>
    8d8c:	4650      	mov	r0, sl
    8d8e:	1a17      	subs	r7, r2, r0
    8d90:	42ba      	cmp	r2, r7
    8d92:	4192      	sbcs	r2, r2
    8d94:	1b0c      	subs	r4, r1, r4
    8d96:	4255      	negs	r5, r2
    8d98:	1b65      	subs	r5, r4, r5
    8d9a:	4698      	mov	r8, r3
    8d9c:	e714      	b.n	8bc8 <__aeabi_dsub+0xbc>
    8d9e:	2501      	movs	r5, #1
    8da0:	4643      	mov	r3, r8
    8da2:	2400      	movs	r4, #0
    8da4:	401d      	ands	r5, r3
    8da6:	2700      	movs	r7, #0
    8da8:	e755      	b.n	8c56 <__aeabi_dsub+0x14a>
    8daa:	4c2a      	ldr	r4, [pc, #168]	; (8e54 <__aeabi_dsub+0x348>)
    8dac:	1af6      	subs	r6, r6, r3
    8dae:	402c      	ands	r4, r5
    8db0:	e732      	b.n	8c18 <__aeabi_dsub+0x10c>
    8db2:	003d      	movs	r5, r7
    8db4:	3828      	subs	r0, #40	; 0x28
    8db6:	4085      	lsls	r5, r0
    8db8:	2700      	movs	r7, #0
    8dba:	e717      	b.n	8bec <__aeabi_dsub+0xe0>
    8dbc:	0038      	movs	r0, r7
    8dbe:	f000 fa47 	bl	9250 <__clzsi2>
    8dc2:	3020      	adds	r0, #32
    8dc4:	e706      	b.n	8bd4 <__aeabi_dsub+0xc8>
    8dc6:	430a      	orrs	r2, r1
    8dc8:	0017      	movs	r7, r2
    8dca:	2100      	movs	r1, #0
    8dcc:	1e7a      	subs	r2, r7, #1
    8dce:	4197      	sbcs	r7, r2
    8dd0:	e6ee      	b.n	8bb0 <__aeabi_dsub+0xa4>
    8dd2:	2b00      	cmp	r3, #0
    8dd4:	d000      	beq.n	8dd8 <__aeabi_dsub+0x2cc>
    8dd6:	e0e5      	b.n	8fa4 <__aeabi_dsub+0x498>
    8dd8:	1c73      	adds	r3, r6, #1
    8dda:	469c      	mov	ip, r3
    8ddc:	055b      	lsls	r3, r3, #21
    8dde:	0d5b      	lsrs	r3, r3, #21
    8de0:	2b01      	cmp	r3, #1
    8de2:	dc00      	bgt.n	8de6 <__aeabi_dsub+0x2da>
    8de4:	e09f      	b.n	8f26 <__aeabi_dsub+0x41a>
    8de6:	4b1a      	ldr	r3, [pc, #104]	; (8e50 <__aeabi_dsub+0x344>)
    8de8:	459c      	cmp	ip, r3
    8dea:	d100      	bne.n	8dee <__aeabi_dsub+0x2e2>
    8dec:	e0c5      	b.n	8f7a <__aeabi_dsub+0x46e>
    8dee:	4452      	add	r2, sl
    8df0:	4552      	cmp	r2, sl
    8df2:	4180      	sbcs	r0, r0
    8df4:	1864      	adds	r4, r4, r1
    8df6:	4240      	negs	r0, r0
    8df8:	1824      	adds	r4, r4, r0
    8dfa:	07e7      	lsls	r7, r4, #31
    8dfc:	0852      	lsrs	r2, r2, #1
    8dfe:	4317      	orrs	r7, r2
    8e00:	0864      	lsrs	r4, r4, #1
    8e02:	4666      	mov	r6, ip
    8e04:	e708      	b.n	8c18 <__aeabi_dsub+0x10c>
    8e06:	4812      	ldr	r0, [pc, #72]	; (8e50 <__aeabi_dsub+0x344>)
    8e08:	4285      	cmp	r5, r0
    8e0a:	d100      	bne.n	8e0e <__aeabi_dsub+0x302>
    8e0c:	e085      	b.n	8f1a <__aeabi_dsub+0x40e>
    8e0e:	001d      	movs	r5, r3
    8e10:	e6bc      	b.n	8b8c <__aeabi_dsub+0x80>
    8e12:	0029      	movs	r1, r5
    8e14:	3e1f      	subs	r6, #31
    8e16:	40f1      	lsrs	r1, r6
    8e18:	2b20      	cmp	r3, #32
    8e1a:	d100      	bne.n	8e1e <__aeabi_dsub+0x312>
    8e1c:	e07f      	b.n	8f1e <__aeabi_dsub+0x412>
    8e1e:	2240      	movs	r2, #64	; 0x40
    8e20:	1ad3      	subs	r3, r2, r3
    8e22:	409d      	lsls	r5, r3
    8e24:	432f      	orrs	r7, r5
    8e26:	1e7d      	subs	r5, r7, #1
    8e28:	41af      	sbcs	r7, r5
    8e2a:	2400      	movs	r4, #0
    8e2c:	430f      	orrs	r7, r1
    8e2e:	2600      	movs	r6, #0
    8e30:	e78e      	b.n	8d50 <__aeabi_dsub+0x244>
    8e32:	002b      	movs	r3, r5
    8e34:	000f      	movs	r7, r1
    8e36:	3b20      	subs	r3, #32
    8e38:	40df      	lsrs	r7, r3
    8e3a:	2d20      	cmp	r5, #32
    8e3c:	d071      	beq.n	8f22 <__aeabi_dsub+0x416>
    8e3e:	2340      	movs	r3, #64	; 0x40
    8e40:	1b5d      	subs	r5, r3, r5
    8e42:	40a9      	lsls	r1, r5
    8e44:	430a      	orrs	r2, r1
    8e46:	1e51      	subs	r1, r2, #1
    8e48:	418a      	sbcs	r2, r1
    8e4a:	2100      	movs	r1, #0
    8e4c:	4317      	orrs	r7, r2
    8e4e:	e6af      	b.n	8bb0 <__aeabi_dsub+0xa4>
    8e50:	000007ff 	.word	0x000007ff
    8e54:	ff7fffff 	.word	0xff7fffff
    8e58:	800fffff 	.word	0x800fffff
    8e5c:	2e00      	cmp	r6, #0
    8e5e:	d03e      	beq.n	8ede <__aeabi_dsub+0x3d2>
    8e60:	4eb3      	ldr	r6, [pc, #716]	; (9130 <__aeabi_dsub+0x624>)
    8e62:	45b4      	cmp	ip, r6
    8e64:	d045      	beq.n	8ef2 <__aeabi_dsub+0x3e6>
    8e66:	2680      	movs	r6, #128	; 0x80
    8e68:	0436      	lsls	r6, r6, #16
    8e6a:	426d      	negs	r5, r5
    8e6c:	4334      	orrs	r4, r6
    8e6e:	2d38      	cmp	r5, #56	; 0x38
    8e70:	dd00      	ble.n	8e74 <__aeabi_dsub+0x368>
    8e72:	e0a8      	b.n	8fc6 <__aeabi_dsub+0x4ba>
    8e74:	2d1f      	cmp	r5, #31
    8e76:	dd00      	ble.n	8e7a <__aeabi_dsub+0x36e>
    8e78:	e11f      	b.n	90ba <__aeabi_dsub+0x5ae>
    8e7a:	2620      	movs	r6, #32
    8e7c:	0027      	movs	r7, r4
    8e7e:	4650      	mov	r0, sl
    8e80:	1b76      	subs	r6, r6, r5
    8e82:	40b7      	lsls	r7, r6
    8e84:	40e8      	lsrs	r0, r5
    8e86:	4307      	orrs	r7, r0
    8e88:	4650      	mov	r0, sl
    8e8a:	40b0      	lsls	r0, r6
    8e8c:	1e46      	subs	r6, r0, #1
    8e8e:	41b0      	sbcs	r0, r6
    8e90:	40ec      	lsrs	r4, r5
    8e92:	4338      	orrs	r0, r7
    8e94:	1a17      	subs	r7, r2, r0
    8e96:	42ba      	cmp	r2, r7
    8e98:	4192      	sbcs	r2, r2
    8e9a:	1b0c      	subs	r4, r1, r4
    8e9c:	4252      	negs	r2, r2
    8e9e:	1aa4      	subs	r4, r4, r2
    8ea0:	4666      	mov	r6, ip
    8ea2:	4698      	mov	r8, r3
    8ea4:	e68b      	b.n	8bbe <__aeabi_dsub+0xb2>
    8ea6:	4664      	mov	r4, ip
    8ea8:	4667      	mov	r7, ip
    8eaa:	432c      	orrs	r4, r5
    8eac:	d000      	beq.n	8eb0 <__aeabi_dsub+0x3a4>
    8eae:	e68b      	b.n	8bc8 <__aeabi_dsub+0xbc>
    8eb0:	2500      	movs	r5, #0
    8eb2:	2600      	movs	r6, #0
    8eb4:	2700      	movs	r7, #0
    8eb6:	e6ea      	b.n	8c8e <__aeabi_dsub+0x182>
    8eb8:	001e      	movs	r6, r3
    8eba:	e6ad      	b.n	8c18 <__aeabi_dsub+0x10c>
    8ebc:	2b1f      	cmp	r3, #31
    8ebe:	dc60      	bgt.n	8f82 <__aeabi_dsub+0x476>
    8ec0:	2720      	movs	r7, #32
    8ec2:	1af8      	subs	r0, r7, r3
    8ec4:	000f      	movs	r7, r1
    8ec6:	4684      	mov	ip, r0
    8ec8:	4087      	lsls	r7, r0
    8eca:	0010      	movs	r0, r2
    8ecc:	40d8      	lsrs	r0, r3
    8ece:	4307      	orrs	r7, r0
    8ed0:	4660      	mov	r0, ip
    8ed2:	4082      	lsls	r2, r0
    8ed4:	1e50      	subs	r0, r2, #1
    8ed6:	4182      	sbcs	r2, r0
    8ed8:	40d9      	lsrs	r1, r3
    8eda:	4317      	orrs	r7, r2
    8edc:	e6f5      	b.n	8cca <__aeabi_dsub+0x1be>
    8ede:	0026      	movs	r6, r4
    8ee0:	4650      	mov	r0, sl
    8ee2:	4306      	orrs	r6, r0
    8ee4:	d005      	beq.n	8ef2 <__aeabi_dsub+0x3e6>
    8ee6:	43ed      	mvns	r5, r5
    8ee8:	2d00      	cmp	r5, #0
    8eea:	d0d3      	beq.n	8e94 <__aeabi_dsub+0x388>
    8eec:	4e90      	ldr	r6, [pc, #576]	; (9130 <__aeabi_dsub+0x624>)
    8eee:	45b4      	cmp	ip, r6
    8ef0:	d1bd      	bne.n	8e6e <__aeabi_dsub+0x362>
    8ef2:	000c      	movs	r4, r1
    8ef4:	0017      	movs	r7, r2
    8ef6:	4666      	mov	r6, ip
    8ef8:	4698      	mov	r8, r3
    8efa:	e68d      	b.n	8c18 <__aeabi_dsub+0x10c>
    8efc:	488c      	ldr	r0, [pc, #560]	; (9130 <__aeabi_dsub+0x624>)
    8efe:	4283      	cmp	r3, r0
    8f00:	d00b      	beq.n	8f1a <__aeabi_dsub+0x40e>
    8f02:	4663      	mov	r3, ip
    8f04:	e6d9      	b.n	8cba <__aeabi_dsub+0x1ae>
    8f06:	2d00      	cmp	r5, #0
    8f08:	d000      	beq.n	8f0c <__aeabi_dsub+0x400>
    8f0a:	e096      	b.n	903a <__aeabi_dsub+0x52e>
    8f0c:	0008      	movs	r0, r1
    8f0e:	4310      	orrs	r0, r2
    8f10:	d100      	bne.n	8f14 <__aeabi_dsub+0x408>
    8f12:	e0e2      	b.n	90da <__aeabi_dsub+0x5ce>
    8f14:	000c      	movs	r4, r1
    8f16:	0017      	movs	r7, r2
    8f18:	4698      	mov	r8, r3
    8f1a:	4e85      	ldr	r6, [pc, #532]	; (9130 <__aeabi_dsub+0x624>)
    8f1c:	e67c      	b.n	8c18 <__aeabi_dsub+0x10c>
    8f1e:	2500      	movs	r5, #0
    8f20:	e780      	b.n	8e24 <__aeabi_dsub+0x318>
    8f22:	2100      	movs	r1, #0
    8f24:	e78e      	b.n	8e44 <__aeabi_dsub+0x338>
    8f26:	0023      	movs	r3, r4
    8f28:	4650      	mov	r0, sl
    8f2a:	4303      	orrs	r3, r0
    8f2c:	2e00      	cmp	r6, #0
    8f2e:	d000      	beq.n	8f32 <__aeabi_dsub+0x426>
    8f30:	e0a8      	b.n	9084 <__aeabi_dsub+0x578>
    8f32:	2b00      	cmp	r3, #0
    8f34:	d100      	bne.n	8f38 <__aeabi_dsub+0x42c>
    8f36:	e0de      	b.n	90f6 <__aeabi_dsub+0x5ea>
    8f38:	000b      	movs	r3, r1
    8f3a:	4313      	orrs	r3, r2
    8f3c:	d100      	bne.n	8f40 <__aeabi_dsub+0x434>
    8f3e:	e66b      	b.n	8c18 <__aeabi_dsub+0x10c>
    8f40:	4452      	add	r2, sl
    8f42:	4552      	cmp	r2, sl
    8f44:	4180      	sbcs	r0, r0
    8f46:	1864      	adds	r4, r4, r1
    8f48:	4240      	negs	r0, r0
    8f4a:	1824      	adds	r4, r4, r0
    8f4c:	0017      	movs	r7, r2
    8f4e:	0223      	lsls	r3, r4, #8
    8f50:	d400      	bmi.n	8f54 <__aeabi_dsub+0x448>
    8f52:	e6fd      	b.n	8d50 <__aeabi_dsub+0x244>
    8f54:	4b77      	ldr	r3, [pc, #476]	; (9134 <__aeabi_dsub+0x628>)
    8f56:	4666      	mov	r6, ip
    8f58:	401c      	ands	r4, r3
    8f5a:	e65d      	b.n	8c18 <__aeabi_dsub+0x10c>
    8f5c:	0025      	movs	r5, r4
    8f5e:	4650      	mov	r0, sl
    8f60:	4305      	orrs	r5, r0
    8f62:	2e00      	cmp	r6, #0
    8f64:	d1cf      	bne.n	8f06 <__aeabi_dsub+0x3fa>
    8f66:	2d00      	cmp	r5, #0
    8f68:	d14f      	bne.n	900a <__aeabi_dsub+0x4fe>
    8f6a:	000c      	movs	r4, r1
    8f6c:	4314      	orrs	r4, r2
    8f6e:	d100      	bne.n	8f72 <__aeabi_dsub+0x466>
    8f70:	e0a0      	b.n	90b4 <__aeabi_dsub+0x5a8>
    8f72:	000c      	movs	r4, r1
    8f74:	0017      	movs	r7, r2
    8f76:	4698      	mov	r8, r3
    8f78:	e64e      	b.n	8c18 <__aeabi_dsub+0x10c>
    8f7a:	4666      	mov	r6, ip
    8f7c:	2400      	movs	r4, #0
    8f7e:	2700      	movs	r7, #0
    8f80:	e685      	b.n	8c8e <__aeabi_dsub+0x182>
    8f82:	001f      	movs	r7, r3
    8f84:	0008      	movs	r0, r1
    8f86:	3f20      	subs	r7, #32
    8f88:	40f8      	lsrs	r0, r7
    8f8a:	0007      	movs	r7, r0
    8f8c:	2b20      	cmp	r3, #32
    8f8e:	d100      	bne.n	8f92 <__aeabi_dsub+0x486>
    8f90:	e08e      	b.n	90b0 <__aeabi_dsub+0x5a4>
    8f92:	2040      	movs	r0, #64	; 0x40
    8f94:	1ac3      	subs	r3, r0, r3
    8f96:	4099      	lsls	r1, r3
    8f98:	430a      	orrs	r2, r1
    8f9a:	1e51      	subs	r1, r2, #1
    8f9c:	418a      	sbcs	r2, r1
    8f9e:	2100      	movs	r1, #0
    8fa0:	4317      	orrs	r7, r2
    8fa2:	e692      	b.n	8cca <__aeabi_dsub+0x1be>
    8fa4:	2e00      	cmp	r6, #0
    8fa6:	d114      	bne.n	8fd2 <__aeabi_dsub+0x4c6>
    8fa8:	0026      	movs	r6, r4
    8faa:	4650      	mov	r0, sl
    8fac:	4306      	orrs	r6, r0
    8fae:	d062      	beq.n	9076 <__aeabi_dsub+0x56a>
    8fb0:	43db      	mvns	r3, r3
    8fb2:	2b00      	cmp	r3, #0
    8fb4:	d15c      	bne.n	9070 <__aeabi_dsub+0x564>
    8fb6:	1887      	adds	r7, r0, r2
    8fb8:	4297      	cmp	r7, r2
    8fba:	4192      	sbcs	r2, r2
    8fbc:	1864      	adds	r4, r4, r1
    8fbe:	4252      	negs	r2, r2
    8fc0:	18a4      	adds	r4, r4, r2
    8fc2:	4666      	mov	r6, ip
    8fc4:	e687      	b.n	8cd6 <__aeabi_dsub+0x1ca>
    8fc6:	4650      	mov	r0, sl
    8fc8:	4320      	orrs	r0, r4
    8fca:	1e44      	subs	r4, r0, #1
    8fcc:	41a0      	sbcs	r0, r4
    8fce:	2400      	movs	r4, #0
    8fd0:	e760      	b.n	8e94 <__aeabi_dsub+0x388>
    8fd2:	4e57      	ldr	r6, [pc, #348]	; (9130 <__aeabi_dsub+0x624>)
    8fd4:	45b4      	cmp	ip, r6
    8fd6:	d04e      	beq.n	9076 <__aeabi_dsub+0x56a>
    8fd8:	2680      	movs	r6, #128	; 0x80
    8fda:	0436      	lsls	r6, r6, #16
    8fdc:	425b      	negs	r3, r3
    8fde:	4334      	orrs	r4, r6
    8fe0:	2b38      	cmp	r3, #56	; 0x38
    8fe2:	dd00      	ble.n	8fe6 <__aeabi_dsub+0x4da>
    8fe4:	e07f      	b.n	90e6 <__aeabi_dsub+0x5da>
    8fe6:	2b1f      	cmp	r3, #31
    8fe8:	dd00      	ble.n	8fec <__aeabi_dsub+0x4e0>
    8fea:	e08b      	b.n	9104 <__aeabi_dsub+0x5f8>
    8fec:	2620      	movs	r6, #32
    8fee:	0027      	movs	r7, r4
    8ff0:	4650      	mov	r0, sl
    8ff2:	1af6      	subs	r6, r6, r3
    8ff4:	40b7      	lsls	r7, r6
    8ff6:	40d8      	lsrs	r0, r3
    8ff8:	4307      	orrs	r7, r0
    8ffa:	4650      	mov	r0, sl
    8ffc:	40b0      	lsls	r0, r6
    8ffe:	1e46      	subs	r6, r0, #1
    9000:	41b0      	sbcs	r0, r6
    9002:	4307      	orrs	r7, r0
    9004:	40dc      	lsrs	r4, r3
    9006:	18bf      	adds	r7, r7, r2
    9008:	e7d6      	b.n	8fb8 <__aeabi_dsub+0x4ac>
    900a:	000d      	movs	r5, r1
    900c:	4315      	orrs	r5, r2
    900e:	d100      	bne.n	9012 <__aeabi_dsub+0x506>
    9010:	e602      	b.n	8c18 <__aeabi_dsub+0x10c>
    9012:	4650      	mov	r0, sl
    9014:	1a80      	subs	r0, r0, r2
    9016:	4582      	cmp	sl, r0
    9018:	41bf      	sbcs	r7, r7
    901a:	1a65      	subs	r5, r4, r1
    901c:	427f      	negs	r7, r7
    901e:	1bed      	subs	r5, r5, r7
    9020:	4684      	mov	ip, r0
    9022:	0228      	lsls	r0, r5, #8
    9024:	d400      	bmi.n	9028 <__aeabi_dsub+0x51c>
    9026:	e68d      	b.n	8d44 <__aeabi_dsub+0x238>
    9028:	4650      	mov	r0, sl
    902a:	1a17      	subs	r7, r2, r0
    902c:	42ba      	cmp	r2, r7
    902e:	4192      	sbcs	r2, r2
    9030:	1b0c      	subs	r4, r1, r4
    9032:	4252      	negs	r2, r2
    9034:	1aa4      	subs	r4, r4, r2
    9036:	4698      	mov	r8, r3
    9038:	e5ee      	b.n	8c18 <__aeabi_dsub+0x10c>
    903a:	000d      	movs	r5, r1
    903c:	4315      	orrs	r5, r2
    903e:	d100      	bne.n	9042 <__aeabi_dsub+0x536>
    9040:	e76b      	b.n	8f1a <__aeabi_dsub+0x40e>
    9042:	4650      	mov	r0, sl
    9044:	0767      	lsls	r7, r4, #29
    9046:	08c0      	lsrs	r0, r0, #3
    9048:	4307      	orrs	r7, r0
    904a:	2080      	movs	r0, #128	; 0x80
    904c:	08e4      	lsrs	r4, r4, #3
    904e:	0300      	lsls	r0, r0, #12
    9050:	4204      	tst	r4, r0
    9052:	d007      	beq.n	9064 <__aeabi_dsub+0x558>
    9054:	08cd      	lsrs	r5, r1, #3
    9056:	4205      	tst	r5, r0
    9058:	d104      	bne.n	9064 <__aeabi_dsub+0x558>
    905a:	002c      	movs	r4, r5
    905c:	4698      	mov	r8, r3
    905e:	08d7      	lsrs	r7, r2, #3
    9060:	0749      	lsls	r1, r1, #29
    9062:	430f      	orrs	r7, r1
    9064:	0f7b      	lsrs	r3, r7, #29
    9066:	00e4      	lsls	r4, r4, #3
    9068:	431c      	orrs	r4, r3
    906a:	00ff      	lsls	r7, r7, #3
    906c:	4e30      	ldr	r6, [pc, #192]	; (9130 <__aeabi_dsub+0x624>)
    906e:	e5d3      	b.n	8c18 <__aeabi_dsub+0x10c>
    9070:	4e2f      	ldr	r6, [pc, #188]	; (9130 <__aeabi_dsub+0x624>)
    9072:	45b4      	cmp	ip, r6
    9074:	d1b4      	bne.n	8fe0 <__aeabi_dsub+0x4d4>
    9076:	000c      	movs	r4, r1
    9078:	0017      	movs	r7, r2
    907a:	4666      	mov	r6, ip
    907c:	e5cc      	b.n	8c18 <__aeabi_dsub+0x10c>
    907e:	2700      	movs	r7, #0
    9080:	2400      	movs	r4, #0
    9082:	e5e8      	b.n	8c56 <__aeabi_dsub+0x14a>
    9084:	2b00      	cmp	r3, #0
    9086:	d039      	beq.n	90fc <__aeabi_dsub+0x5f0>
    9088:	000b      	movs	r3, r1
    908a:	4313      	orrs	r3, r2
    908c:	d100      	bne.n	9090 <__aeabi_dsub+0x584>
    908e:	e744      	b.n	8f1a <__aeabi_dsub+0x40e>
    9090:	08c0      	lsrs	r0, r0, #3
    9092:	0767      	lsls	r7, r4, #29
    9094:	4307      	orrs	r7, r0
    9096:	2080      	movs	r0, #128	; 0x80
    9098:	08e4      	lsrs	r4, r4, #3
    909a:	0300      	lsls	r0, r0, #12
    909c:	4204      	tst	r4, r0
    909e:	d0e1      	beq.n	9064 <__aeabi_dsub+0x558>
    90a0:	08cb      	lsrs	r3, r1, #3
    90a2:	4203      	tst	r3, r0
    90a4:	d1de      	bne.n	9064 <__aeabi_dsub+0x558>
    90a6:	08d7      	lsrs	r7, r2, #3
    90a8:	0749      	lsls	r1, r1, #29
    90aa:	430f      	orrs	r7, r1
    90ac:	001c      	movs	r4, r3
    90ae:	e7d9      	b.n	9064 <__aeabi_dsub+0x558>
    90b0:	2100      	movs	r1, #0
    90b2:	e771      	b.n	8f98 <__aeabi_dsub+0x48c>
    90b4:	2500      	movs	r5, #0
    90b6:	2700      	movs	r7, #0
    90b8:	e5e9      	b.n	8c8e <__aeabi_dsub+0x182>
    90ba:	002e      	movs	r6, r5
    90bc:	0027      	movs	r7, r4
    90be:	3e20      	subs	r6, #32
    90c0:	40f7      	lsrs	r7, r6
    90c2:	2d20      	cmp	r5, #32
    90c4:	d02f      	beq.n	9126 <__aeabi_dsub+0x61a>
    90c6:	2640      	movs	r6, #64	; 0x40
    90c8:	1b75      	subs	r5, r6, r5
    90ca:	40ac      	lsls	r4, r5
    90cc:	4650      	mov	r0, sl
    90ce:	4320      	orrs	r0, r4
    90d0:	1e44      	subs	r4, r0, #1
    90d2:	41a0      	sbcs	r0, r4
    90d4:	2400      	movs	r4, #0
    90d6:	4338      	orrs	r0, r7
    90d8:	e6dc      	b.n	8e94 <__aeabi_dsub+0x388>
    90da:	2480      	movs	r4, #128	; 0x80
    90dc:	2500      	movs	r5, #0
    90de:	0324      	lsls	r4, r4, #12
    90e0:	4e13      	ldr	r6, [pc, #76]	; (9130 <__aeabi_dsub+0x624>)
    90e2:	2700      	movs	r7, #0
    90e4:	e5d3      	b.n	8c8e <__aeabi_dsub+0x182>
    90e6:	4650      	mov	r0, sl
    90e8:	4320      	orrs	r0, r4
    90ea:	0007      	movs	r7, r0
    90ec:	1e78      	subs	r0, r7, #1
    90ee:	4187      	sbcs	r7, r0
    90f0:	2400      	movs	r4, #0
    90f2:	18bf      	adds	r7, r7, r2
    90f4:	e760      	b.n	8fb8 <__aeabi_dsub+0x4ac>
    90f6:	000c      	movs	r4, r1
    90f8:	0017      	movs	r7, r2
    90fa:	e58d      	b.n	8c18 <__aeabi_dsub+0x10c>
    90fc:	000c      	movs	r4, r1
    90fe:	0017      	movs	r7, r2
    9100:	4e0b      	ldr	r6, [pc, #44]	; (9130 <__aeabi_dsub+0x624>)
    9102:	e589      	b.n	8c18 <__aeabi_dsub+0x10c>
    9104:	001e      	movs	r6, r3
    9106:	0027      	movs	r7, r4
    9108:	3e20      	subs	r6, #32
    910a:	40f7      	lsrs	r7, r6
    910c:	2b20      	cmp	r3, #32
    910e:	d00c      	beq.n	912a <__aeabi_dsub+0x61e>
    9110:	2640      	movs	r6, #64	; 0x40
    9112:	1af3      	subs	r3, r6, r3
    9114:	409c      	lsls	r4, r3
    9116:	4650      	mov	r0, sl
    9118:	4320      	orrs	r0, r4
    911a:	1e44      	subs	r4, r0, #1
    911c:	41a0      	sbcs	r0, r4
    911e:	4307      	orrs	r7, r0
    9120:	2400      	movs	r4, #0
    9122:	18bf      	adds	r7, r7, r2
    9124:	e748      	b.n	8fb8 <__aeabi_dsub+0x4ac>
    9126:	2400      	movs	r4, #0
    9128:	e7d0      	b.n	90cc <__aeabi_dsub+0x5c0>
    912a:	2400      	movs	r4, #0
    912c:	e7f3      	b.n	9116 <__aeabi_dsub+0x60a>
    912e:	46c0      	nop			; (mov r8, r8)
    9130:	000007ff 	.word	0x000007ff
    9134:	ff7fffff 	.word	0xff7fffff

00009138 <__aeabi_dcmpun>:
    9138:	b570      	push	{r4, r5, r6, lr}
    913a:	4e0e      	ldr	r6, [pc, #56]	; (9174 <__aeabi_dcmpun+0x3c>)
    913c:	030d      	lsls	r5, r1, #12
    913e:	031c      	lsls	r4, r3, #12
    9140:	0049      	lsls	r1, r1, #1
    9142:	005b      	lsls	r3, r3, #1
    9144:	0b2d      	lsrs	r5, r5, #12
    9146:	0d49      	lsrs	r1, r1, #21
    9148:	0b24      	lsrs	r4, r4, #12
    914a:	0d5b      	lsrs	r3, r3, #21
    914c:	42b1      	cmp	r1, r6
    914e:	d004      	beq.n	915a <__aeabi_dcmpun+0x22>
    9150:	4908      	ldr	r1, [pc, #32]	; (9174 <__aeabi_dcmpun+0x3c>)
    9152:	2000      	movs	r0, #0
    9154:	428b      	cmp	r3, r1
    9156:	d008      	beq.n	916a <__aeabi_dcmpun+0x32>
    9158:	bd70      	pop	{r4, r5, r6, pc}
    915a:	4305      	orrs	r5, r0
    915c:	2001      	movs	r0, #1
    915e:	2d00      	cmp	r5, #0
    9160:	d1fa      	bne.n	9158 <__aeabi_dcmpun+0x20>
    9162:	4904      	ldr	r1, [pc, #16]	; (9174 <__aeabi_dcmpun+0x3c>)
    9164:	2000      	movs	r0, #0
    9166:	428b      	cmp	r3, r1
    9168:	d1f6      	bne.n	9158 <__aeabi_dcmpun+0x20>
    916a:	4314      	orrs	r4, r2
    916c:	0020      	movs	r0, r4
    916e:	1e44      	subs	r4, r0, #1
    9170:	41a0      	sbcs	r0, r4
    9172:	e7f1      	b.n	9158 <__aeabi_dcmpun+0x20>
    9174:	000007ff 	.word	0x000007ff

00009178 <__aeabi_d2iz>:
    9178:	b530      	push	{r4, r5, lr}
    917a:	4d13      	ldr	r5, [pc, #76]	; (91c8 <__aeabi_d2iz+0x50>)
    917c:	030a      	lsls	r2, r1, #12
    917e:	004b      	lsls	r3, r1, #1
    9180:	0b12      	lsrs	r2, r2, #12
    9182:	0d5b      	lsrs	r3, r3, #21
    9184:	0fc9      	lsrs	r1, r1, #31
    9186:	2400      	movs	r4, #0
    9188:	42ab      	cmp	r3, r5
    918a:	dd10      	ble.n	91ae <__aeabi_d2iz+0x36>
    918c:	4c0f      	ldr	r4, [pc, #60]	; (91cc <__aeabi_d2iz+0x54>)
    918e:	42a3      	cmp	r3, r4
    9190:	dc0f      	bgt.n	91b2 <__aeabi_d2iz+0x3a>
    9192:	2480      	movs	r4, #128	; 0x80
    9194:	4d0e      	ldr	r5, [pc, #56]	; (91d0 <__aeabi_d2iz+0x58>)
    9196:	0364      	lsls	r4, r4, #13
    9198:	4322      	orrs	r2, r4
    919a:	1aed      	subs	r5, r5, r3
    919c:	2d1f      	cmp	r5, #31
    919e:	dd0b      	ble.n	91b8 <__aeabi_d2iz+0x40>
    91a0:	480c      	ldr	r0, [pc, #48]	; (91d4 <__aeabi_d2iz+0x5c>)
    91a2:	1ac3      	subs	r3, r0, r3
    91a4:	40da      	lsrs	r2, r3
    91a6:	4254      	negs	r4, r2
    91a8:	2900      	cmp	r1, #0
    91aa:	d100      	bne.n	91ae <__aeabi_d2iz+0x36>
    91ac:	0014      	movs	r4, r2
    91ae:	0020      	movs	r0, r4
    91b0:	bd30      	pop	{r4, r5, pc}
    91b2:	4b09      	ldr	r3, [pc, #36]	; (91d8 <__aeabi_d2iz+0x60>)
    91b4:	18cc      	adds	r4, r1, r3
    91b6:	e7fa      	b.n	91ae <__aeabi_d2iz+0x36>
    91b8:	4c08      	ldr	r4, [pc, #32]	; (91dc <__aeabi_d2iz+0x64>)
    91ba:	40e8      	lsrs	r0, r5
    91bc:	46a4      	mov	ip, r4
    91be:	4463      	add	r3, ip
    91c0:	409a      	lsls	r2, r3
    91c2:	4302      	orrs	r2, r0
    91c4:	e7ef      	b.n	91a6 <__aeabi_d2iz+0x2e>
    91c6:	46c0      	nop			; (mov r8, r8)
    91c8:	000003fe 	.word	0x000003fe
    91cc:	0000041d 	.word	0x0000041d
    91d0:	00000433 	.word	0x00000433
    91d4:	00000413 	.word	0x00000413
    91d8:	7fffffff 	.word	0x7fffffff
    91dc:	fffffbed 	.word	0xfffffbed

000091e0 <__aeabi_ui2d>:
    91e0:	b510      	push	{r4, lr}
    91e2:	1e04      	subs	r4, r0, #0
    91e4:	d028      	beq.n	9238 <__aeabi_ui2d+0x58>
    91e6:	f000 f833 	bl	9250 <__clzsi2>
    91ea:	4b15      	ldr	r3, [pc, #84]	; (9240 <__aeabi_ui2d+0x60>)
    91ec:	4a15      	ldr	r2, [pc, #84]	; (9244 <__aeabi_ui2d+0x64>)
    91ee:	1a1b      	subs	r3, r3, r0
    91f0:	1ad2      	subs	r2, r2, r3
    91f2:	2a1f      	cmp	r2, #31
    91f4:	dd15      	ble.n	9222 <__aeabi_ui2d+0x42>
    91f6:	4a14      	ldr	r2, [pc, #80]	; (9248 <__aeabi_ui2d+0x68>)
    91f8:	1ad2      	subs	r2, r2, r3
    91fa:	4094      	lsls	r4, r2
    91fc:	2200      	movs	r2, #0
    91fe:	0324      	lsls	r4, r4, #12
    9200:	055b      	lsls	r3, r3, #21
    9202:	0b24      	lsrs	r4, r4, #12
    9204:	0d5b      	lsrs	r3, r3, #21
    9206:	2100      	movs	r1, #0
    9208:	0010      	movs	r0, r2
    920a:	0324      	lsls	r4, r4, #12
    920c:	0d0a      	lsrs	r2, r1, #20
    920e:	0b24      	lsrs	r4, r4, #12
    9210:	0512      	lsls	r2, r2, #20
    9212:	4322      	orrs	r2, r4
    9214:	4c0d      	ldr	r4, [pc, #52]	; (924c <__aeabi_ui2d+0x6c>)
    9216:	051b      	lsls	r3, r3, #20
    9218:	4022      	ands	r2, r4
    921a:	4313      	orrs	r3, r2
    921c:	005b      	lsls	r3, r3, #1
    921e:	0859      	lsrs	r1, r3, #1
    9220:	bd10      	pop	{r4, pc}
    9222:	0021      	movs	r1, r4
    9224:	4091      	lsls	r1, r2
    9226:	000a      	movs	r2, r1
    9228:	210b      	movs	r1, #11
    922a:	1a08      	subs	r0, r1, r0
    922c:	40c4      	lsrs	r4, r0
    922e:	055b      	lsls	r3, r3, #21
    9230:	0324      	lsls	r4, r4, #12
    9232:	0b24      	lsrs	r4, r4, #12
    9234:	0d5b      	lsrs	r3, r3, #21
    9236:	e7e6      	b.n	9206 <__aeabi_ui2d+0x26>
    9238:	2300      	movs	r3, #0
    923a:	2400      	movs	r4, #0
    923c:	2200      	movs	r2, #0
    923e:	e7e2      	b.n	9206 <__aeabi_ui2d+0x26>
    9240:	0000041e 	.word	0x0000041e
    9244:	00000433 	.word	0x00000433
    9248:	00000413 	.word	0x00000413
    924c:	800fffff 	.word	0x800fffff

00009250 <__clzsi2>:
    9250:	211c      	movs	r1, #28
    9252:	2301      	movs	r3, #1
    9254:	041b      	lsls	r3, r3, #16
    9256:	4298      	cmp	r0, r3
    9258:	d301      	bcc.n	925e <__clzsi2+0xe>
    925a:	0c00      	lsrs	r0, r0, #16
    925c:	3910      	subs	r1, #16
    925e:	0a1b      	lsrs	r3, r3, #8
    9260:	4298      	cmp	r0, r3
    9262:	d301      	bcc.n	9268 <__clzsi2+0x18>
    9264:	0a00      	lsrs	r0, r0, #8
    9266:	3908      	subs	r1, #8
    9268:	091b      	lsrs	r3, r3, #4
    926a:	4298      	cmp	r0, r3
    926c:	d301      	bcc.n	9272 <__clzsi2+0x22>
    926e:	0900      	lsrs	r0, r0, #4
    9270:	3904      	subs	r1, #4
    9272:	a202      	add	r2, pc, #8	; (adr r2, 927c <__clzsi2+0x2c>)
    9274:	5c10      	ldrb	r0, [r2, r0]
    9276:	1840      	adds	r0, r0, r1
    9278:	4770      	bx	lr
    927a:	46c0      	nop			; (mov r8, r8)
    927c:	02020304 	.word	0x02020304
    9280:	01010101 	.word	0x01010101
	...

0000928c <__cxa_atexit>:
    928c:	b570      	push	{r4, r5, r6, lr}
    928e:	4c05      	ldr	r4, [pc, #20]	; (92a4 <__cxa_atexit+0x18>)
    9290:	0005      	movs	r5, r0
    9292:	0013      	movs	r3, r2
    9294:	1e20      	subs	r0, r4, #0
    9296:	d004      	beq.n	92a2 <__cxa_atexit+0x16>
    9298:	000a      	movs	r2, r1
    929a:	2002      	movs	r0, #2
    929c:	0029      	movs	r1, r5
    929e:	e000      	b.n	92a2 <__cxa_atexit+0x16>
    92a0:	bf00      	nop
    92a2:	bd70      	pop	{r4, r5, r6, pc}
    92a4:	00000000 	.word	0x00000000

000092a8 <__libc_init_array>:
    92a8:	b570      	push	{r4, r5, r6, lr}
    92aa:	2600      	movs	r6, #0
    92ac:	4d0c      	ldr	r5, [pc, #48]	; (92e0 <__libc_init_array+0x38>)
    92ae:	4c0d      	ldr	r4, [pc, #52]	; (92e4 <__libc_init_array+0x3c>)
    92b0:	1b64      	subs	r4, r4, r5
    92b2:	10a4      	asrs	r4, r4, #2
    92b4:	42a6      	cmp	r6, r4
    92b6:	d109      	bne.n	92cc <__libc_init_array+0x24>
    92b8:	2600      	movs	r6, #0
    92ba:	f002 f9db 	bl	b674 <_init>
    92be:	4d0a      	ldr	r5, [pc, #40]	; (92e8 <__libc_init_array+0x40>)
    92c0:	4c0a      	ldr	r4, [pc, #40]	; (92ec <__libc_init_array+0x44>)
    92c2:	1b64      	subs	r4, r4, r5
    92c4:	10a4      	asrs	r4, r4, #2
    92c6:	42a6      	cmp	r6, r4
    92c8:	d105      	bne.n	92d6 <__libc_init_array+0x2e>
    92ca:	bd70      	pop	{r4, r5, r6, pc}
    92cc:	00b3      	lsls	r3, r6, #2
    92ce:	58eb      	ldr	r3, [r5, r3]
    92d0:	4798      	blx	r3
    92d2:	3601      	adds	r6, #1
    92d4:	e7ee      	b.n	92b4 <__libc_init_array+0xc>
    92d6:	00b3      	lsls	r3, r6, #2
    92d8:	58eb      	ldr	r3, [r5, r3]
    92da:	4798      	blx	r3
    92dc:	3601      	adds	r6, #1
    92de:	e7f2      	b.n	92c6 <__libc_init_array+0x1e>
    92e0:	20000258 	.word	0x20000258
    92e4:	20000258 	.word	0x20000258
    92e8:	20000258 	.word	0x20000258
    92ec:	20000298 	.word	0x20000298

000092f0 <__locale_ctype_ptr_l>:
    92f0:	30ec      	adds	r0, #236	; 0xec
    92f2:	6800      	ldr	r0, [r0, #0]
    92f4:	4770      	bx	lr
	...

000092f8 <malloc>:
    92f8:	b510      	push	{r4, lr}
    92fa:	4b03      	ldr	r3, [pc, #12]	; (9308 <malloc+0x10>)
    92fc:	0001      	movs	r1, r0
    92fe:	6818      	ldr	r0, [r3, #0]
    9300:	f000 f89c 	bl	943c <_malloc_r>
    9304:	bd10      	pop	{r4, pc}
    9306:	46c0      	nop			; (mov r8, r8)
    9308:	20000088 	.word	0x20000088

0000930c <free>:
    930c:	b510      	push	{r4, lr}
    930e:	4b03      	ldr	r3, [pc, #12]	; (931c <free+0x10>)
    9310:	0001      	movs	r1, r0
    9312:	6818      	ldr	r0, [r3, #0]
    9314:	f000 f848 	bl	93a8 <_free_r>
    9318:	bd10      	pop	{r4, pc}
    931a:	46c0      	nop			; (mov r8, r8)
    931c:	20000088 	.word	0x20000088

00009320 <__ascii_mbtowc>:
    9320:	b082      	sub	sp, #8
    9322:	2900      	cmp	r1, #0
    9324:	d100      	bne.n	9328 <__ascii_mbtowc+0x8>
    9326:	a901      	add	r1, sp, #4
    9328:	1e10      	subs	r0, r2, #0
    932a:	d006      	beq.n	933a <__ascii_mbtowc+0x1a>
    932c:	2b00      	cmp	r3, #0
    932e:	d006      	beq.n	933e <__ascii_mbtowc+0x1e>
    9330:	7813      	ldrb	r3, [r2, #0]
    9332:	600b      	str	r3, [r1, #0]
    9334:	7810      	ldrb	r0, [r2, #0]
    9336:	1e43      	subs	r3, r0, #1
    9338:	4198      	sbcs	r0, r3
    933a:	b002      	add	sp, #8
    933c:	4770      	bx	lr
    933e:	2002      	movs	r0, #2
    9340:	4240      	negs	r0, r0
    9342:	e7fa      	b.n	933a <__ascii_mbtowc+0x1a>

00009344 <memcmp>:
    9344:	b530      	push	{r4, r5, lr}
    9346:	2400      	movs	r4, #0
    9348:	42a2      	cmp	r2, r4
    934a:	d101      	bne.n	9350 <memcmp+0xc>
    934c:	2000      	movs	r0, #0
    934e:	e005      	b.n	935c <memcmp+0x18>
    9350:	5d03      	ldrb	r3, [r0, r4]
    9352:	1c65      	adds	r5, r4, #1
    9354:	5d0c      	ldrb	r4, [r1, r4]
    9356:	42a3      	cmp	r3, r4
    9358:	d001      	beq.n	935e <memcmp+0x1a>
    935a:	1b18      	subs	r0, r3, r4
    935c:	bd30      	pop	{r4, r5, pc}
    935e:	002c      	movs	r4, r5
    9360:	e7f2      	b.n	9348 <memcmp+0x4>

00009362 <memcpy>:
    9362:	2300      	movs	r3, #0
    9364:	b510      	push	{r4, lr}
    9366:	429a      	cmp	r2, r3
    9368:	d100      	bne.n	936c <memcpy+0xa>
    936a:	bd10      	pop	{r4, pc}
    936c:	5ccc      	ldrb	r4, [r1, r3]
    936e:	54c4      	strb	r4, [r0, r3]
    9370:	3301      	adds	r3, #1
    9372:	e7f8      	b.n	9366 <memcpy+0x4>

00009374 <memmove>:
    9374:	b510      	push	{r4, lr}
    9376:	4288      	cmp	r0, r1
    9378:	d902      	bls.n	9380 <memmove+0xc>
    937a:	188b      	adds	r3, r1, r2
    937c:	4298      	cmp	r0, r3
    937e:	d308      	bcc.n	9392 <memmove+0x1e>
    9380:	2300      	movs	r3, #0
    9382:	429a      	cmp	r2, r3
    9384:	d007      	beq.n	9396 <memmove+0x22>
    9386:	5ccc      	ldrb	r4, [r1, r3]
    9388:	54c4      	strb	r4, [r0, r3]
    938a:	3301      	adds	r3, #1
    938c:	e7f9      	b.n	9382 <memmove+0xe>
    938e:	5c8b      	ldrb	r3, [r1, r2]
    9390:	5483      	strb	r3, [r0, r2]
    9392:	3a01      	subs	r2, #1
    9394:	d2fb      	bcs.n	938e <memmove+0x1a>
    9396:	bd10      	pop	{r4, pc}

00009398 <memset>:
    9398:	0003      	movs	r3, r0
    939a:	1882      	adds	r2, r0, r2
    939c:	4293      	cmp	r3, r2
    939e:	d100      	bne.n	93a2 <memset+0xa>
    93a0:	4770      	bx	lr
    93a2:	7019      	strb	r1, [r3, #0]
    93a4:	3301      	adds	r3, #1
    93a6:	e7f9      	b.n	939c <memset+0x4>

000093a8 <_free_r>:
    93a8:	b570      	push	{r4, r5, r6, lr}
    93aa:	0005      	movs	r5, r0
    93ac:	2900      	cmp	r1, #0
    93ae:	d010      	beq.n	93d2 <_free_r+0x2a>
    93b0:	1f0c      	subs	r4, r1, #4
    93b2:	6823      	ldr	r3, [r4, #0]
    93b4:	2b00      	cmp	r3, #0
    93b6:	da00      	bge.n	93ba <_free_r+0x12>
    93b8:	18e4      	adds	r4, r4, r3
    93ba:	0028      	movs	r0, r5
    93bc:	f001 fc83 	bl	acc6 <__malloc_lock>
    93c0:	4a1d      	ldr	r2, [pc, #116]	; (9438 <_free_r+0x90>)
    93c2:	6813      	ldr	r3, [r2, #0]
    93c4:	2b00      	cmp	r3, #0
    93c6:	d105      	bne.n	93d4 <_free_r+0x2c>
    93c8:	6063      	str	r3, [r4, #4]
    93ca:	6014      	str	r4, [r2, #0]
    93cc:	0028      	movs	r0, r5
    93ce:	f001 fc7b 	bl	acc8 <__malloc_unlock>
    93d2:	bd70      	pop	{r4, r5, r6, pc}
    93d4:	42a3      	cmp	r3, r4
    93d6:	d909      	bls.n	93ec <_free_r+0x44>
    93d8:	6821      	ldr	r1, [r4, #0]
    93da:	1860      	adds	r0, r4, r1
    93dc:	4283      	cmp	r3, r0
    93de:	d1f3      	bne.n	93c8 <_free_r+0x20>
    93e0:	6818      	ldr	r0, [r3, #0]
    93e2:	685b      	ldr	r3, [r3, #4]
    93e4:	1841      	adds	r1, r0, r1
    93e6:	6021      	str	r1, [r4, #0]
    93e8:	e7ee      	b.n	93c8 <_free_r+0x20>
    93ea:	0013      	movs	r3, r2
    93ec:	685a      	ldr	r2, [r3, #4]
    93ee:	2a00      	cmp	r2, #0
    93f0:	d001      	beq.n	93f6 <_free_r+0x4e>
    93f2:	42a2      	cmp	r2, r4
    93f4:	d9f9      	bls.n	93ea <_free_r+0x42>
    93f6:	6819      	ldr	r1, [r3, #0]
    93f8:	1858      	adds	r0, r3, r1
    93fa:	42a0      	cmp	r0, r4
    93fc:	d10b      	bne.n	9416 <_free_r+0x6e>
    93fe:	6820      	ldr	r0, [r4, #0]
    9400:	1809      	adds	r1, r1, r0
    9402:	1858      	adds	r0, r3, r1
    9404:	6019      	str	r1, [r3, #0]
    9406:	4282      	cmp	r2, r0
    9408:	d1e0      	bne.n	93cc <_free_r+0x24>
    940a:	6810      	ldr	r0, [r2, #0]
    940c:	6852      	ldr	r2, [r2, #4]
    940e:	1841      	adds	r1, r0, r1
    9410:	6019      	str	r1, [r3, #0]
    9412:	605a      	str	r2, [r3, #4]
    9414:	e7da      	b.n	93cc <_free_r+0x24>
    9416:	42a0      	cmp	r0, r4
    9418:	d902      	bls.n	9420 <_free_r+0x78>
    941a:	230c      	movs	r3, #12
    941c:	602b      	str	r3, [r5, #0]
    941e:	e7d5      	b.n	93cc <_free_r+0x24>
    9420:	6821      	ldr	r1, [r4, #0]
    9422:	1860      	adds	r0, r4, r1
    9424:	4282      	cmp	r2, r0
    9426:	d103      	bne.n	9430 <_free_r+0x88>
    9428:	6810      	ldr	r0, [r2, #0]
    942a:	6852      	ldr	r2, [r2, #4]
    942c:	1841      	adds	r1, r0, r1
    942e:	6021      	str	r1, [r4, #0]
    9430:	6062      	str	r2, [r4, #4]
    9432:	605c      	str	r4, [r3, #4]
    9434:	e7ca      	b.n	93cc <_free_r+0x24>
    9436:	46c0      	nop			; (mov r8, r8)
    9438:	200010a0 	.word	0x200010a0

0000943c <_malloc_r>:
    943c:	2303      	movs	r3, #3
    943e:	b570      	push	{r4, r5, r6, lr}
    9440:	1ccd      	adds	r5, r1, #3
    9442:	439d      	bics	r5, r3
    9444:	3508      	adds	r5, #8
    9446:	0006      	movs	r6, r0
    9448:	2d0c      	cmp	r5, #12
    944a:	d21e      	bcs.n	948a <_malloc_r+0x4e>
    944c:	250c      	movs	r5, #12
    944e:	42a9      	cmp	r1, r5
    9450:	d81d      	bhi.n	948e <_malloc_r+0x52>
    9452:	0030      	movs	r0, r6
    9454:	f001 fc37 	bl	acc6 <__malloc_lock>
    9458:	4a25      	ldr	r2, [pc, #148]	; (94f0 <_malloc_r+0xb4>)
    945a:	6814      	ldr	r4, [r2, #0]
    945c:	0021      	movs	r1, r4
    945e:	2900      	cmp	r1, #0
    9460:	d119      	bne.n	9496 <_malloc_r+0x5a>
    9462:	4c24      	ldr	r4, [pc, #144]	; (94f4 <_malloc_r+0xb8>)
    9464:	6823      	ldr	r3, [r4, #0]
    9466:	2b00      	cmp	r3, #0
    9468:	d103      	bne.n	9472 <_malloc_r+0x36>
    946a:	0030      	movs	r0, r6
    946c:	f000 fcbe 	bl	9dec <_sbrk_r>
    9470:	6020      	str	r0, [r4, #0]
    9472:	0029      	movs	r1, r5
    9474:	0030      	movs	r0, r6
    9476:	f000 fcb9 	bl	9dec <_sbrk_r>
    947a:	1c43      	adds	r3, r0, #1
    947c:	d12c      	bne.n	94d8 <_malloc_r+0x9c>
    947e:	230c      	movs	r3, #12
    9480:	0030      	movs	r0, r6
    9482:	6033      	str	r3, [r6, #0]
    9484:	f001 fc20 	bl	acc8 <__malloc_unlock>
    9488:	e003      	b.n	9492 <_malloc_r+0x56>
    948a:	2d00      	cmp	r5, #0
    948c:	dadf      	bge.n	944e <_malloc_r+0x12>
    948e:	230c      	movs	r3, #12
    9490:	6033      	str	r3, [r6, #0]
    9492:	2000      	movs	r0, #0
    9494:	bd70      	pop	{r4, r5, r6, pc}
    9496:	680b      	ldr	r3, [r1, #0]
    9498:	1b5b      	subs	r3, r3, r5
    949a:	d41a      	bmi.n	94d2 <_malloc_r+0x96>
    949c:	2b0b      	cmp	r3, #11
    949e:	d903      	bls.n	94a8 <_malloc_r+0x6c>
    94a0:	600b      	str	r3, [r1, #0]
    94a2:	18cc      	adds	r4, r1, r3
    94a4:	6025      	str	r5, [r4, #0]
    94a6:	e003      	b.n	94b0 <_malloc_r+0x74>
    94a8:	428c      	cmp	r4, r1
    94aa:	d10e      	bne.n	94ca <_malloc_r+0x8e>
    94ac:	6863      	ldr	r3, [r4, #4]
    94ae:	6013      	str	r3, [r2, #0]
    94b0:	0030      	movs	r0, r6
    94b2:	f001 fc09 	bl	acc8 <__malloc_unlock>
    94b6:	0020      	movs	r0, r4
    94b8:	2207      	movs	r2, #7
    94ba:	300b      	adds	r0, #11
    94bc:	1d23      	adds	r3, r4, #4
    94be:	4390      	bics	r0, r2
    94c0:	1ac3      	subs	r3, r0, r3
    94c2:	d0e7      	beq.n	9494 <_malloc_r+0x58>
    94c4:	425a      	negs	r2, r3
    94c6:	50e2      	str	r2, [r4, r3]
    94c8:	e7e4      	b.n	9494 <_malloc_r+0x58>
    94ca:	684b      	ldr	r3, [r1, #4]
    94cc:	6063      	str	r3, [r4, #4]
    94ce:	000c      	movs	r4, r1
    94d0:	e7ee      	b.n	94b0 <_malloc_r+0x74>
    94d2:	000c      	movs	r4, r1
    94d4:	6849      	ldr	r1, [r1, #4]
    94d6:	e7c2      	b.n	945e <_malloc_r+0x22>
    94d8:	2303      	movs	r3, #3
    94da:	1cc4      	adds	r4, r0, #3
    94dc:	439c      	bics	r4, r3
    94de:	42a0      	cmp	r0, r4
    94e0:	d0e0      	beq.n	94a4 <_malloc_r+0x68>
    94e2:	1a21      	subs	r1, r4, r0
    94e4:	0030      	movs	r0, r6
    94e6:	f000 fc81 	bl	9dec <_sbrk_r>
    94ea:	1c43      	adds	r3, r0, #1
    94ec:	d1da      	bne.n	94a4 <_malloc_r+0x68>
    94ee:	e7c6      	b.n	947e <_malloc_r+0x42>
    94f0:	200010a0 	.word	0x200010a0
    94f4:	200010a4 	.word	0x200010a4

000094f8 <__cvt>:
    94f8:	b5f0      	push	{r4, r5, r6, r7, lr}
    94fa:	b08b      	sub	sp, #44	; 0x2c
    94fc:	0014      	movs	r4, r2
    94fe:	1e1d      	subs	r5, r3, #0
    9500:	9912      	ldr	r1, [sp, #72]	; 0x48
    9502:	da53      	bge.n	95ac <__cvt+0xb4>
    9504:	2480      	movs	r4, #128	; 0x80
    9506:	0624      	lsls	r4, r4, #24
    9508:	191b      	adds	r3, r3, r4
    950a:	001d      	movs	r5, r3
    950c:	0014      	movs	r4, r2
    950e:	232d      	movs	r3, #45	; 0x2d
    9510:	700b      	strb	r3, [r1, #0]
    9512:	2320      	movs	r3, #32
    9514:	9e14      	ldr	r6, [sp, #80]	; 0x50
    9516:	2203      	movs	r2, #3
    9518:	439e      	bics	r6, r3
    951a:	2e46      	cmp	r6, #70	; 0x46
    951c:	d007      	beq.n	952e <__cvt+0x36>
    951e:	0033      	movs	r3, r6
    9520:	3b45      	subs	r3, #69	; 0x45
    9522:	4259      	negs	r1, r3
    9524:	414b      	adcs	r3, r1
    9526:	9910      	ldr	r1, [sp, #64]	; 0x40
    9528:	3a01      	subs	r2, #1
    952a:	18cb      	adds	r3, r1, r3
    952c:	9310      	str	r3, [sp, #64]	; 0x40
    952e:	ab09      	add	r3, sp, #36	; 0x24
    9530:	9304      	str	r3, [sp, #16]
    9532:	ab08      	add	r3, sp, #32
    9534:	9303      	str	r3, [sp, #12]
    9536:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    9538:	9200      	str	r2, [sp, #0]
    953a:	9302      	str	r3, [sp, #8]
    953c:	9b10      	ldr	r3, [sp, #64]	; 0x40
    953e:	0022      	movs	r2, r4
    9540:	9301      	str	r3, [sp, #4]
    9542:	002b      	movs	r3, r5
    9544:	f000 fdc0 	bl	a0c8 <_dtoa_r>
    9548:	0007      	movs	r7, r0
    954a:	2e47      	cmp	r6, #71	; 0x47
    954c:	d102      	bne.n	9554 <__cvt+0x5c>
    954e:	9b11      	ldr	r3, [sp, #68]	; 0x44
    9550:	07db      	lsls	r3, r3, #31
    9552:	d524      	bpl.n	959e <__cvt+0xa6>
    9554:	9b10      	ldr	r3, [sp, #64]	; 0x40
    9556:	18fb      	adds	r3, r7, r3
    9558:	9307      	str	r3, [sp, #28]
    955a:	2e46      	cmp	r6, #70	; 0x46
    955c:	d114      	bne.n	9588 <__cvt+0x90>
    955e:	783b      	ldrb	r3, [r7, #0]
    9560:	2b30      	cmp	r3, #48	; 0x30
    9562:	d10c      	bne.n	957e <__cvt+0x86>
    9564:	2200      	movs	r2, #0
    9566:	2300      	movs	r3, #0
    9568:	0020      	movs	r0, r4
    956a:	0029      	movs	r1, r5
    956c:	f7fe f8dc 	bl	7728 <__aeabi_dcmpeq>
    9570:	2800      	cmp	r0, #0
    9572:	d104      	bne.n	957e <__cvt+0x86>
    9574:	2301      	movs	r3, #1
    9576:	9a10      	ldr	r2, [sp, #64]	; 0x40
    9578:	1a9b      	subs	r3, r3, r2
    957a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    957c:	6013      	str	r3, [r2, #0]
    957e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    9580:	9a07      	ldr	r2, [sp, #28]
    9582:	681b      	ldr	r3, [r3, #0]
    9584:	18d3      	adds	r3, r2, r3
    9586:	9307      	str	r3, [sp, #28]
    9588:	2200      	movs	r2, #0
    958a:	2300      	movs	r3, #0
    958c:	0020      	movs	r0, r4
    958e:	0029      	movs	r1, r5
    9590:	f7fe f8ca 	bl	7728 <__aeabi_dcmpeq>
    9594:	2230      	movs	r2, #48	; 0x30
    9596:	2800      	cmp	r0, #0
    9598:	d00d      	beq.n	95b6 <__cvt+0xbe>
    959a:	9b07      	ldr	r3, [sp, #28]
    959c:	9309      	str	r3, [sp, #36]	; 0x24
    959e:	0038      	movs	r0, r7
    95a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
    95a2:	9a15      	ldr	r2, [sp, #84]	; 0x54
    95a4:	1bdb      	subs	r3, r3, r7
    95a6:	6013      	str	r3, [r2, #0]
    95a8:	b00b      	add	sp, #44	; 0x2c
    95aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    95ac:	2300      	movs	r3, #0
    95ae:	e7af      	b.n	9510 <__cvt+0x18>
    95b0:	1c59      	adds	r1, r3, #1
    95b2:	9109      	str	r1, [sp, #36]	; 0x24
    95b4:	701a      	strb	r2, [r3, #0]
    95b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
    95b8:	9907      	ldr	r1, [sp, #28]
    95ba:	4299      	cmp	r1, r3
    95bc:	d8f8      	bhi.n	95b0 <__cvt+0xb8>
    95be:	e7ee      	b.n	959e <__cvt+0xa6>

000095c0 <__exponent>:
    95c0:	b5f0      	push	{r4, r5, r6, r7, lr}
    95c2:	232b      	movs	r3, #43	; 0x2b
    95c4:	b085      	sub	sp, #20
    95c6:	0007      	movs	r7, r0
    95c8:	000c      	movs	r4, r1
    95ca:	7002      	strb	r2, [r0, #0]
    95cc:	1c86      	adds	r6, r0, #2
    95ce:	2900      	cmp	r1, #0
    95d0:	da01      	bge.n	95d6 <__exponent+0x16>
    95d2:	232d      	movs	r3, #45	; 0x2d
    95d4:	424c      	negs	r4, r1
    95d6:	707b      	strb	r3, [r7, #1]
    95d8:	2c09      	cmp	r4, #9
    95da:	dd23      	ble.n	9624 <__exponent+0x64>
    95dc:	ab02      	add	r3, sp, #8
    95de:	1ddd      	adds	r5, r3, #7
    95e0:	1e6b      	subs	r3, r5, #1
    95e2:	0020      	movs	r0, r4
    95e4:	210a      	movs	r1, #10
    95e6:	9301      	str	r3, [sp, #4]
    95e8:	f7fe f888 	bl	76fc <__aeabi_idivmod>
    95ec:	1e6b      	subs	r3, r5, #1
    95ee:	3130      	adds	r1, #48	; 0x30
    95f0:	7019      	strb	r1, [r3, #0]
    95f2:	0020      	movs	r0, r4
    95f4:	210a      	movs	r1, #10
    95f6:	f7fd ff9b 	bl	7530 <__divsi3>
    95fa:	0004      	movs	r4, r0
    95fc:	2809      	cmp	r0, #9
    95fe:	dc0a      	bgt.n	9616 <__exponent+0x56>
    9600:	3d02      	subs	r5, #2
    9602:	3430      	adds	r4, #48	; 0x30
    9604:	702c      	strb	r4, [r5, #0]
    9606:	ab02      	add	r3, sp, #8
    9608:	3307      	adds	r3, #7
    960a:	0030      	movs	r0, r6
    960c:	42ab      	cmp	r3, r5
    960e:	d804      	bhi.n	961a <__exponent+0x5a>
    9610:	1bc0      	subs	r0, r0, r7
    9612:	b005      	add	sp, #20
    9614:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9616:	9d01      	ldr	r5, [sp, #4]
    9618:	e7e2      	b.n	95e0 <__exponent+0x20>
    961a:	782b      	ldrb	r3, [r5, #0]
    961c:	3501      	adds	r5, #1
    961e:	7033      	strb	r3, [r6, #0]
    9620:	3601      	adds	r6, #1
    9622:	e7f0      	b.n	9606 <__exponent+0x46>
    9624:	2330      	movs	r3, #48	; 0x30
    9626:	18e4      	adds	r4, r4, r3
    9628:	7033      	strb	r3, [r6, #0]
    962a:	1cb0      	adds	r0, r6, #2
    962c:	7074      	strb	r4, [r6, #1]
    962e:	e7ef      	b.n	9610 <__exponent+0x50>

00009630 <_printf_float>:
    9630:	b5f0      	push	{r4, r5, r6, r7, lr}
    9632:	b095      	sub	sp, #84	; 0x54
    9634:	000c      	movs	r4, r1
    9636:	920a      	str	r2, [sp, #40]	; 0x28
    9638:	930b      	str	r3, [sp, #44]	; 0x2c
    963a:	9d1a      	ldr	r5, [sp, #104]	; 0x68
    963c:	9009      	str	r0, [sp, #36]	; 0x24
    963e:	f001 fb2b 	bl	ac98 <_localeconv_r>
    9642:	6803      	ldr	r3, [r0, #0]
    9644:	0018      	movs	r0, r3
    9646:	930d      	str	r3, [sp, #52]	; 0x34
    9648:	f000 fc0c 	bl	9e64 <strlen>
    964c:	2300      	movs	r3, #0
    964e:	9312      	str	r3, [sp, #72]	; 0x48
    9650:	6823      	ldr	r3, [r4, #0]
    9652:	900e      	str	r0, [sp, #56]	; 0x38
    9654:	930c      	str	r3, [sp, #48]	; 0x30
    9656:	990c      	ldr	r1, [sp, #48]	; 0x30
    9658:	7e27      	ldrb	r7, [r4, #24]
    965a:	682b      	ldr	r3, [r5, #0]
    965c:	2207      	movs	r2, #7
    965e:	05c9      	lsls	r1, r1, #23
    9660:	d547      	bpl.n	96f2 <_printf_float+0xc2>
    9662:	189b      	adds	r3, r3, r2
    9664:	4393      	bics	r3, r2
    9666:	001a      	movs	r2, r3
    9668:	3208      	adds	r2, #8
    966a:	602a      	str	r2, [r5, #0]
    966c:	681a      	ldr	r2, [r3, #0]
    966e:	685b      	ldr	r3, [r3, #4]
    9670:	64a2      	str	r2, [r4, #72]	; 0x48
    9672:	64e3      	str	r3, [r4, #76]	; 0x4c
    9674:	2201      	movs	r2, #1
    9676:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
    9678:	6ca6      	ldr	r6, [r4, #72]	; 0x48
    967a:	006b      	lsls	r3, r5, #1
    967c:	085b      	lsrs	r3, r3, #1
    967e:	930f      	str	r3, [sp, #60]	; 0x3c
    9680:	4252      	negs	r2, r2
    9682:	4ba7      	ldr	r3, [pc, #668]	; (9920 <_printf_float+0x2f0>)
    9684:	0030      	movs	r0, r6
    9686:	990f      	ldr	r1, [sp, #60]	; 0x3c
    9688:	f7ff fd56 	bl	9138 <__aeabi_dcmpun>
    968c:	2800      	cmp	r0, #0
    968e:	d000      	beq.n	9692 <_printf_float+0x62>
    9690:	e206      	b.n	9aa0 <_printf_float+0x470>
    9692:	2201      	movs	r2, #1
    9694:	4ba2      	ldr	r3, [pc, #648]	; (9920 <_printf_float+0x2f0>)
    9696:	4252      	negs	r2, r2
    9698:	0030      	movs	r0, r6
    969a:	990f      	ldr	r1, [sp, #60]	; 0x3c
    969c:	f7fe f854 	bl	7748 <__aeabi_dcmple>
    96a0:	2800      	cmp	r0, #0
    96a2:	d000      	beq.n	96a6 <_printf_float+0x76>
    96a4:	e1fc      	b.n	9aa0 <_printf_float+0x470>
    96a6:	2200      	movs	r2, #0
    96a8:	2300      	movs	r3, #0
    96aa:	0030      	movs	r0, r6
    96ac:	0029      	movs	r1, r5
    96ae:	f7fe f841 	bl	7734 <__aeabi_dcmplt>
    96b2:	2800      	cmp	r0, #0
    96b4:	d003      	beq.n	96be <_printf_float+0x8e>
    96b6:	0023      	movs	r3, r4
    96b8:	222d      	movs	r2, #45	; 0x2d
    96ba:	3343      	adds	r3, #67	; 0x43
    96bc:	701a      	strb	r2, [r3, #0]
    96be:	4d99      	ldr	r5, [pc, #612]	; (9924 <_printf_float+0x2f4>)
    96c0:	2f47      	cmp	r7, #71	; 0x47
    96c2:	d800      	bhi.n	96c6 <_printf_float+0x96>
    96c4:	4d98      	ldr	r5, [pc, #608]	; (9928 <_printf_float+0x2f8>)
    96c6:	2303      	movs	r3, #3
    96c8:	2600      	movs	r6, #0
    96ca:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    96cc:	6123      	str	r3, [r4, #16]
    96ce:	3301      	adds	r3, #1
    96d0:	439a      	bics	r2, r3
    96d2:	6022      	str	r2, [r4, #0]
    96d4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    96d6:	aa13      	add	r2, sp, #76	; 0x4c
    96d8:	9300      	str	r3, [sp, #0]
    96da:	0021      	movs	r1, r4
    96dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    96de:	9809      	ldr	r0, [sp, #36]	; 0x24
    96e0:	f000 f9f2 	bl	9ac8 <_printf_common>
    96e4:	1c43      	adds	r3, r0, #1
    96e6:	d000      	beq.n	96ea <_printf_float+0xba>
    96e8:	e09c      	b.n	9824 <_printf_float+0x1f4>
    96ea:	2001      	movs	r0, #1
    96ec:	4240      	negs	r0, r0
    96ee:	b015      	add	sp, #84	; 0x54
    96f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    96f2:	3307      	adds	r3, #7
    96f4:	e7b6      	b.n	9664 <_printf_float+0x34>
    96f6:	2380      	movs	r3, #128	; 0x80
    96f8:	6862      	ldr	r2, [r4, #4]
    96fa:	00db      	lsls	r3, r3, #3
    96fc:	1c51      	adds	r1, r2, #1
    96fe:	d145      	bne.n	978c <_printf_float+0x15c>
    9700:	3207      	adds	r2, #7
    9702:	6062      	str	r2, [r4, #4]
    9704:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    9706:	2100      	movs	r1, #0
    9708:	4313      	orrs	r3, r2
    970a:	aa12      	add	r2, sp, #72	; 0x48
    970c:	9205      	str	r2, [sp, #20]
    970e:	aa11      	add	r2, sp, #68	; 0x44
    9710:	9203      	str	r2, [sp, #12]
    9712:	2223      	movs	r2, #35	; 0x23
    9714:	6023      	str	r3, [r4, #0]
    9716:	9106      	str	r1, [sp, #24]
    9718:	9301      	str	r3, [sp, #4]
    971a:	a908      	add	r1, sp, #32
    971c:	6863      	ldr	r3, [r4, #4]
    971e:	1852      	adds	r2, r2, r1
    9720:	9202      	str	r2, [sp, #8]
    9722:	9300      	str	r3, [sp, #0]
    9724:	0032      	movs	r2, r6
    9726:	002b      	movs	r3, r5
    9728:	9704      	str	r7, [sp, #16]
    972a:	9809      	ldr	r0, [sp, #36]	; 0x24
    972c:	f7ff fee4 	bl	94f8 <__cvt>
    9730:	2320      	movs	r3, #32
    9732:	003a      	movs	r2, r7
    9734:	0005      	movs	r5, r0
    9736:	439a      	bics	r2, r3
    9738:	2a47      	cmp	r2, #71	; 0x47
    973a:	d107      	bne.n	974c <_printf_float+0x11c>
    973c:	9b11      	ldr	r3, [sp, #68]	; 0x44
    973e:	1cda      	adds	r2, r3, #3
    9740:	db02      	blt.n	9748 <_printf_float+0x118>
    9742:	6862      	ldr	r2, [r4, #4]
    9744:	4293      	cmp	r3, r2
    9746:	dd5b      	ble.n	9800 <_printf_float+0x1d0>
    9748:	3f02      	subs	r7, #2
    974a:	b2ff      	uxtb	r7, r7
    974c:	9911      	ldr	r1, [sp, #68]	; 0x44
    974e:	2f65      	cmp	r7, #101	; 0x65
    9750:	d83b      	bhi.n	97ca <_printf_float+0x19a>
    9752:	0020      	movs	r0, r4
    9754:	3901      	subs	r1, #1
    9756:	003a      	movs	r2, r7
    9758:	3050      	adds	r0, #80	; 0x50
    975a:	9111      	str	r1, [sp, #68]	; 0x44
    975c:	f7ff ff30 	bl	95c0 <__exponent>
    9760:	9a12      	ldr	r2, [sp, #72]	; 0x48
    9762:	0006      	movs	r6, r0
    9764:	1883      	adds	r3, r0, r2
    9766:	6123      	str	r3, [r4, #16]
    9768:	2a01      	cmp	r2, #1
    976a:	dc02      	bgt.n	9772 <_printf_float+0x142>
    976c:	6822      	ldr	r2, [r4, #0]
    976e:	07d2      	lsls	r2, r2, #31
    9770:	d501      	bpl.n	9776 <_printf_float+0x146>
    9772:	3301      	adds	r3, #1
    9774:	6123      	str	r3, [r4, #16]
    9776:	2323      	movs	r3, #35	; 0x23
    9778:	aa08      	add	r2, sp, #32
    977a:	189b      	adds	r3, r3, r2
    977c:	781b      	ldrb	r3, [r3, #0]
    977e:	2b00      	cmp	r3, #0
    9780:	d0a8      	beq.n	96d4 <_printf_float+0xa4>
    9782:	0023      	movs	r3, r4
    9784:	222d      	movs	r2, #45	; 0x2d
    9786:	3343      	adds	r3, #67	; 0x43
    9788:	701a      	strb	r2, [r3, #0]
    978a:	e7a3      	b.n	96d4 <_printf_float+0xa4>
    978c:	2f67      	cmp	r7, #103	; 0x67
    978e:	d001      	beq.n	9794 <_printf_float+0x164>
    9790:	2f47      	cmp	r7, #71	; 0x47
    9792:	d1b7      	bne.n	9704 <_printf_float+0xd4>
    9794:	2a00      	cmp	r2, #0
    9796:	d016      	beq.n	97c6 <_printf_float+0x196>
    9798:	990c      	ldr	r1, [sp, #48]	; 0x30
    979a:	a808      	add	r0, sp, #32
    979c:	430b      	orrs	r3, r1
    979e:	2100      	movs	r1, #0
    97a0:	9106      	str	r1, [sp, #24]
    97a2:	a912      	add	r1, sp, #72	; 0x48
    97a4:	9105      	str	r1, [sp, #20]
    97a6:	a911      	add	r1, sp, #68	; 0x44
    97a8:	9103      	str	r1, [sp, #12]
    97aa:	2123      	movs	r1, #35	; 0x23
    97ac:	1809      	adds	r1, r1, r0
    97ae:	6023      	str	r3, [r4, #0]
    97b0:	9301      	str	r3, [sp, #4]
    97b2:	9200      	str	r2, [sp, #0]
    97b4:	002b      	movs	r3, r5
    97b6:	9704      	str	r7, [sp, #16]
    97b8:	9102      	str	r1, [sp, #8]
    97ba:	0032      	movs	r2, r6
    97bc:	9809      	ldr	r0, [sp, #36]	; 0x24
    97be:	f7ff fe9b 	bl	94f8 <__cvt>
    97c2:	0005      	movs	r5, r0
    97c4:	e7ba      	b.n	973c <_printf_float+0x10c>
    97c6:	2201      	movs	r2, #1
    97c8:	e79b      	b.n	9702 <_printf_float+0xd2>
    97ca:	2f66      	cmp	r7, #102	; 0x66
    97cc:	d119      	bne.n	9802 <_printf_float+0x1d2>
    97ce:	6863      	ldr	r3, [r4, #4]
    97d0:	2900      	cmp	r1, #0
    97d2:	dd0c      	ble.n	97ee <_printf_float+0x1be>
    97d4:	6121      	str	r1, [r4, #16]
    97d6:	2b00      	cmp	r3, #0
    97d8:	d102      	bne.n	97e0 <_printf_float+0x1b0>
    97da:	6822      	ldr	r2, [r4, #0]
    97dc:	07d2      	lsls	r2, r2, #31
    97de:	d502      	bpl.n	97e6 <_printf_float+0x1b6>
    97e0:	3301      	adds	r3, #1
    97e2:	185b      	adds	r3, r3, r1
    97e4:	6123      	str	r3, [r4, #16]
    97e6:	9b11      	ldr	r3, [sp, #68]	; 0x44
    97e8:	2600      	movs	r6, #0
    97ea:	65a3      	str	r3, [r4, #88]	; 0x58
    97ec:	e7c3      	b.n	9776 <_printf_float+0x146>
    97ee:	2b00      	cmp	r3, #0
    97f0:	d103      	bne.n	97fa <_printf_float+0x1ca>
    97f2:	2201      	movs	r2, #1
    97f4:	6821      	ldr	r1, [r4, #0]
    97f6:	4211      	tst	r1, r2
    97f8:	d000      	beq.n	97fc <_printf_float+0x1cc>
    97fa:	1c9a      	adds	r2, r3, #2
    97fc:	6122      	str	r2, [r4, #16]
    97fe:	e7f2      	b.n	97e6 <_printf_float+0x1b6>
    9800:	2767      	movs	r7, #103	; 0x67
    9802:	9b11      	ldr	r3, [sp, #68]	; 0x44
    9804:	9812      	ldr	r0, [sp, #72]	; 0x48
    9806:	4283      	cmp	r3, r0
    9808:	db05      	blt.n	9816 <_printf_float+0x1e6>
    980a:	6822      	ldr	r2, [r4, #0]
    980c:	6123      	str	r3, [r4, #16]
    980e:	07d2      	lsls	r2, r2, #31
    9810:	d5e9      	bpl.n	97e6 <_printf_float+0x1b6>
    9812:	3301      	adds	r3, #1
    9814:	e7e6      	b.n	97e4 <_printf_float+0x1b4>
    9816:	2201      	movs	r2, #1
    9818:	2b00      	cmp	r3, #0
    981a:	dc01      	bgt.n	9820 <_printf_float+0x1f0>
    981c:	1892      	adds	r2, r2, r2
    981e:	1ad2      	subs	r2, r2, r3
    9820:	1812      	adds	r2, r2, r0
    9822:	e7eb      	b.n	97fc <_printf_float+0x1cc>
    9824:	6822      	ldr	r2, [r4, #0]
    9826:	0553      	lsls	r3, r2, #21
    9828:	d408      	bmi.n	983c <_printf_float+0x20c>
    982a:	6923      	ldr	r3, [r4, #16]
    982c:	002a      	movs	r2, r5
    982e:	990a      	ldr	r1, [sp, #40]	; 0x28
    9830:	9809      	ldr	r0, [sp, #36]	; 0x24
    9832:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    9834:	47a8      	blx	r5
    9836:	1c43      	adds	r3, r0, #1
    9838:	d129      	bne.n	988e <_printf_float+0x25e>
    983a:	e756      	b.n	96ea <_printf_float+0xba>
    983c:	2f65      	cmp	r7, #101	; 0x65
    983e:	d800      	bhi.n	9842 <_printf_float+0x212>
    9840:	e0dc      	b.n	99fc <_printf_float+0x3cc>
    9842:	6ca0      	ldr	r0, [r4, #72]	; 0x48
    9844:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
    9846:	2200      	movs	r2, #0
    9848:	2300      	movs	r3, #0
    984a:	f7fd ff6d 	bl	7728 <__aeabi_dcmpeq>
    984e:	2800      	cmp	r0, #0
    9850:	d035      	beq.n	98be <_printf_float+0x28e>
    9852:	2301      	movs	r3, #1
    9854:	4a35      	ldr	r2, [pc, #212]	; (992c <_printf_float+0x2fc>)
    9856:	990a      	ldr	r1, [sp, #40]	; 0x28
    9858:	9809      	ldr	r0, [sp, #36]	; 0x24
    985a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    985c:	47a8      	blx	r5
    985e:	1c43      	adds	r3, r0, #1
    9860:	d100      	bne.n	9864 <_printf_float+0x234>
    9862:	e742      	b.n	96ea <_printf_float+0xba>
    9864:	9b11      	ldr	r3, [sp, #68]	; 0x44
    9866:	9a12      	ldr	r2, [sp, #72]	; 0x48
    9868:	4293      	cmp	r3, r2
    986a:	db02      	blt.n	9872 <_printf_float+0x242>
    986c:	6823      	ldr	r3, [r4, #0]
    986e:	07db      	lsls	r3, r3, #31
    9870:	d50d      	bpl.n	988e <_printf_float+0x25e>
    9872:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    9874:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    9876:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    9878:	990a      	ldr	r1, [sp, #40]	; 0x28
    987a:	9809      	ldr	r0, [sp, #36]	; 0x24
    987c:	47a8      	blx	r5
    987e:	2500      	movs	r5, #0
    9880:	1c43      	adds	r3, r0, #1
    9882:	d100      	bne.n	9886 <_printf_float+0x256>
    9884:	e731      	b.n	96ea <_printf_float+0xba>
    9886:	9b12      	ldr	r3, [sp, #72]	; 0x48
    9888:	3b01      	subs	r3, #1
    988a:	429d      	cmp	r5, r3
    988c:	db0b      	blt.n	98a6 <_printf_float+0x276>
    988e:	6823      	ldr	r3, [r4, #0]
    9890:	2500      	movs	r5, #0
    9892:	079b      	lsls	r3, r3, #30
    9894:	d500      	bpl.n	9898 <_printf_float+0x268>
    9896:	e0fd      	b.n	9a94 <_printf_float+0x464>
    9898:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    989a:	68e0      	ldr	r0, [r4, #12]
    989c:	4298      	cmp	r0, r3
    989e:	db00      	blt.n	98a2 <_printf_float+0x272>
    98a0:	e725      	b.n	96ee <_printf_float+0xbe>
    98a2:	0018      	movs	r0, r3
    98a4:	e723      	b.n	96ee <_printf_float+0xbe>
    98a6:	0022      	movs	r2, r4
    98a8:	2301      	movs	r3, #1
    98aa:	321a      	adds	r2, #26
    98ac:	990a      	ldr	r1, [sp, #40]	; 0x28
    98ae:	9809      	ldr	r0, [sp, #36]	; 0x24
    98b0:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    98b2:	47b0      	blx	r6
    98b4:	1c43      	adds	r3, r0, #1
    98b6:	d100      	bne.n	98ba <_printf_float+0x28a>
    98b8:	e717      	b.n	96ea <_printf_float+0xba>
    98ba:	3501      	adds	r5, #1
    98bc:	e7e3      	b.n	9886 <_printf_float+0x256>
    98be:	9b11      	ldr	r3, [sp, #68]	; 0x44
    98c0:	2b00      	cmp	r3, #0
    98c2:	dc35      	bgt.n	9930 <_printf_float+0x300>
    98c4:	2301      	movs	r3, #1
    98c6:	4a19      	ldr	r2, [pc, #100]	; (992c <_printf_float+0x2fc>)
    98c8:	990a      	ldr	r1, [sp, #40]	; 0x28
    98ca:	9809      	ldr	r0, [sp, #36]	; 0x24
    98cc:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    98ce:	47b0      	blx	r6
    98d0:	1c43      	adds	r3, r0, #1
    98d2:	d100      	bne.n	98d6 <_printf_float+0x2a6>
    98d4:	e709      	b.n	96ea <_printf_float+0xba>
    98d6:	9b11      	ldr	r3, [sp, #68]	; 0x44
    98d8:	2b00      	cmp	r3, #0
    98da:	d105      	bne.n	98e8 <_printf_float+0x2b8>
    98dc:	9b12      	ldr	r3, [sp, #72]	; 0x48
    98de:	2b00      	cmp	r3, #0
    98e0:	d102      	bne.n	98e8 <_printf_float+0x2b8>
    98e2:	6823      	ldr	r3, [r4, #0]
    98e4:	07db      	lsls	r3, r3, #31
    98e6:	d5d2      	bpl.n	988e <_printf_float+0x25e>
    98e8:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    98ea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    98ec:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    98ee:	990a      	ldr	r1, [sp, #40]	; 0x28
    98f0:	9809      	ldr	r0, [sp, #36]	; 0x24
    98f2:	47b0      	blx	r6
    98f4:	2600      	movs	r6, #0
    98f6:	1c43      	adds	r3, r0, #1
    98f8:	d100      	bne.n	98fc <_printf_float+0x2cc>
    98fa:	e6f6      	b.n	96ea <_printf_float+0xba>
    98fc:	9b11      	ldr	r3, [sp, #68]	; 0x44
    98fe:	425b      	negs	r3, r3
    9900:	429e      	cmp	r6, r3
    9902:	db01      	blt.n	9908 <_printf_float+0x2d8>
    9904:	9b12      	ldr	r3, [sp, #72]	; 0x48
    9906:	e791      	b.n	982c <_printf_float+0x1fc>
    9908:	0022      	movs	r2, r4
    990a:	2301      	movs	r3, #1
    990c:	321a      	adds	r2, #26
    990e:	990a      	ldr	r1, [sp, #40]	; 0x28
    9910:	9809      	ldr	r0, [sp, #36]	; 0x24
    9912:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    9914:	47b8      	blx	r7
    9916:	1c43      	adds	r3, r0, #1
    9918:	d100      	bne.n	991c <_printf_float+0x2ec>
    991a:	e6e6      	b.n	96ea <_printf_float+0xba>
    991c:	3601      	adds	r6, #1
    991e:	e7ed      	b.n	98fc <_printf_float+0x2cc>
    9920:	7fefffff 	.word	0x7fefffff
    9924:	0000be2c 	.word	0x0000be2c
    9928:	0000be28 	.word	0x0000be28
    992c:	0000b807 	.word	0x0000b807
    9930:	6da3      	ldr	r3, [r4, #88]	; 0x58
    9932:	9e12      	ldr	r6, [sp, #72]	; 0x48
    9934:	429e      	cmp	r6, r3
    9936:	dd00      	ble.n	993a <_printf_float+0x30a>
    9938:	001e      	movs	r6, r3
    993a:	2e00      	cmp	r6, #0
    993c:	dc35      	bgt.n	99aa <_printf_float+0x37a>
    993e:	2300      	movs	r3, #0
    9940:	930c      	str	r3, [sp, #48]	; 0x30
    9942:	43f3      	mvns	r3, r6
    9944:	17db      	asrs	r3, r3, #31
    9946:	930f      	str	r3, [sp, #60]	; 0x3c
    9948:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    994a:	6da7      	ldr	r7, [r4, #88]	; 0x58
    994c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    994e:	4033      	ands	r3, r6
    9950:	1afb      	subs	r3, r7, r3
    9952:	429a      	cmp	r2, r3
    9954:	db32      	blt.n	99bc <_printf_float+0x38c>
    9956:	9b11      	ldr	r3, [sp, #68]	; 0x44
    9958:	9a12      	ldr	r2, [sp, #72]	; 0x48
    995a:	4293      	cmp	r3, r2
    995c:	db3c      	blt.n	99d8 <_printf_float+0x3a8>
    995e:	6823      	ldr	r3, [r4, #0]
    9960:	07db      	lsls	r3, r3, #31
    9962:	d439      	bmi.n	99d8 <_printf_float+0x3a8>
    9964:	9e12      	ldr	r6, [sp, #72]	; 0x48
    9966:	9a11      	ldr	r2, [sp, #68]	; 0x44
    9968:	1bf3      	subs	r3, r6, r7
    996a:	1ab6      	subs	r6, r6, r2
    996c:	429e      	cmp	r6, r3
    996e:	dd00      	ble.n	9972 <_printf_float+0x342>
    9970:	001e      	movs	r6, r3
    9972:	2e00      	cmp	r6, #0
    9974:	dc39      	bgt.n	99ea <_printf_float+0x3ba>
    9976:	43f7      	mvns	r7, r6
    9978:	2500      	movs	r5, #0
    997a:	17fb      	asrs	r3, r7, #31
    997c:	930c      	str	r3, [sp, #48]	; 0x30
    997e:	9a11      	ldr	r2, [sp, #68]	; 0x44
    9980:	9b12      	ldr	r3, [sp, #72]	; 0x48
    9982:	990c      	ldr	r1, [sp, #48]	; 0x30
    9984:	1a9b      	subs	r3, r3, r2
    9986:	0032      	movs	r2, r6
    9988:	400a      	ands	r2, r1
    998a:	1a9b      	subs	r3, r3, r2
    998c:	429d      	cmp	r5, r3
    998e:	db00      	blt.n	9992 <_printf_float+0x362>
    9990:	e77d      	b.n	988e <_printf_float+0x25e>
    9992:	0022      	movs	r2, r4
    9994:	2301      	movs	r3, #1
    9996:	321a      	adds	r2, #26
    9998:	990a      	ldr	r1, [sp, #40]	; 0x28
    999a:	9809      	ldr	r0, [sp, #36]	; 0x24
    999c:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    999e:	47b8      	blx	r7
    99a0:	1c43      	adds	r3, r0, #1
    99a2:	d100      	bne.n	99a6 <_printf_float+0x376>
    99a4:	e6a1      	b.n	96ea <_printf_float+0xba>
    99a6:	3501      	adds	r5, #1
    99a8:	e7e9      	b.n	997e <_printf_float+0x34e>
    99aa:	0033      	movs	r3, r6
    99ac:	002a      	movs	r2, r5
    99ae:	990a      	ldr	r1, [sp, #40]	; 0x28
    99b0:	9809      	ldr	r0, [sp, #36]	; 0x24
    99b2:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    99b4:	47b8      	blx	r7
    99b6:	1c43      	adds	r3, r0, #1
    99b8:	d1c1      	bne.n	993e <_printf_float+0x30e>
    99ba:	e696      	b.n	96ea <_printf_float+0xba>
    99bc:	0022      	movs	r2, r4
    99be:	2301      	movs	r3, #1
    99c0:	321a      	adds	r2, #26
    99c2:	990a      	ldr	r1, [sp, #40]	; 0x28
    99c4:	9809      	ldr	r0, [sp, #36]	; 0x24
    99c6:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    99c8:	47b8      	blx	r7
    99ca:	1c43      	adds	r3, r0, #1
    99cc:	d100      	bne.n	99d0 <_printf_float+0x3a0>
    99ce:	e68c      	b.n	96ea <_printf_float+0xba>
    99d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    99d2:	3301      	adds	r3, #1
    99d4:	930c      	str	r3, [sp, #48]	; 0x30
    99d6:	e7b7      	b.n	9948 <_printf_float+0x318>
    99d8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    99da:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    99dc:	990a      	ldr	r1, [sp, #40]	; 0x28
    99de:	9809      	ldr	r0, [sp, #36]	; 0x24
    99e0:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    99e2:	47b0      	blx	r6
    99e4:	1c43      	adds	r3, r0, #1
    99e6:	d1bd      	bne.n	9964 <_printf_float+0x334>
    99e8:	e67f      	b.n	96ea <_printf_float+0xba>
    99ea:	19ea      	adds	r2, r5, r7
    99ec:	0033      	movs	r3, r6
    99ee:	990a      	ldr	r1, [sp, #40]	; 0x28
    99f0:	9809      	ldr	r0, [sp, #36]	; 0x24
    99f2:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    99f4:	47a8      	blx	r5
    99f6:	1c43      	adds	r3, r0, #1
    99f8:	d1bd      	bne.n	9976 <_printf_float+0x346>
    99fa:	e676      	b.n	96ea <_printf_float+0xba>
    99fc:	9b12      	ldr	r3, [sp, #72]	; 0x48
    99fe:	2b01      	cmp	r3, #1
    9a00:	dc02      	bgt.n	9a08 <_printf_float+0x3d8>
    9a02:	2301      	movs	r3, #1
    9a04:	421a      	tst	r2, r3
    9a06:	d038      	beq.n	9a7a <_printf_float+0x44a>
    9a08:	2301      	movs	r3, #1
    9a0a:	002a      	movs	r2, r5
    9a0c:	990a      	ldr	r1, [sp, #40]	; 0x28
    9a0e:	9809      	ldr	r0, [sp, #36]	; 0x24
    9a10:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    9a12:	47b8      	blx	r7
    9a14:	1c43      	adds	r3, r0, #1
    9a16:	d100      	bne.n	9a1a <_printf_float+0x3ea>
    9a18:	e667      	b.n	96ea <_printf_float+0xba>
    9a1a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    9a1c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    9a1e:	990a      	ldr	r1, [sp, #40]	; 0x28
    9a20:	9809      	ldr	r0, [sp, #36]	; 0x24
    9a22:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    9a24:	47b8      	blx	r7
    9a26:	1c43      	adds	r3, r0, #1
    9a28:	d100      	bne.n	9a2c <_printf_float+0x3fc>
    9a2a:	e65e      	b.n	96ea <_printf_float+0xba>
    9a2c:	6ca0      	ldr	r0, [r4, #72]	; 0x48
    9a2e:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
    9a30:	2200      	movs	r2, #0
    9a32:	2300      	movs	r3, #0
    9a34:	f7fd fe78 	bl	7728 <__aeabi_dcmpeq>
    9a38:	2800      	cmp	r0, #0
    9a3a:	d008      	beq.n	9a4e <_printf_float+0x41e>
    9a3c:	2500      	movs	r5, #0
    9a3e:	9b12      	ldr	r3, [sp, #72]	; 0x48
    9a40:	3b01      	subs	r3, #1
    9a42:	429d      	cmp	r5, r3
    9a44:	db0d      	blt.n	9a62 <_printf_float+0x432>
    9a46:	0022      	movs	r2, r4
    9a48:	0033      	movs	r3, r6
    9a4a:	3250      	adds	r2, #80	; 0x50
    9a4c:	e6ef      	b.n	982e <_printf_float+0x1fe>
    9a4e:	9b12      	ldr	r3, [sp, #72]	; 0x48
    9a50:	1c6a      	adds	r2, r5, #1
    9a52:	3b01      	subs	r3, #1
    9a54:	990a      	ldr	r1, [sp, #40]	; 0x28
    9a56:	9809      	ldr	r0, [sp, #36]	; 0x24
    9a58:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    9a5a:	47a8      	blx	r5
    9a5c:	1c43      	adds	r3, r0, #1
    9a5e:	d1f2      	bne.n	9a46 <_printf_float+0x416>
    9a60:	e643      	b.n	96ea <_printf_float+0xba>
    9a62:	0022      	movs	r2, r4
    9a64:	2301      	movs	r3, #1
    9a66:	321a      	adds	r2, #26
    9a68:	990a      	ldr	r1, [sp, #40]	; 0x28
    9a6a:	9809      	ldr	r0, [sp, #36]	; 0x24
    9a6c:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    9a6e:	47b8      	blx	r7
    9a70:	1c43      	adds	r3, r0, #1
    9a72:	d100      	bne.n	9a76 <_printf_float+0x446>
    9a74:	e639      	b.n	96ea <_printf_float+0xba>
    9a76:	3501      	adds	r5, #1
    9a78:	e7e1      	b.n	9a3e <_printf_float+0x40e>
    9a7a:	002a      	movs	r2, r5
    9a7c:	e7ea      	b.n	9a54 <_printf_float+0x424>
    9a7e:	0022      	movs	r2, r4
    9a80:	2301      	movs	r3, #1
    9a82:	3219      	adds	r2, #25
    9a84:	990a      	ldr	r1, [sp, #40]	; 0x28
    9a86:	9809      	ldr	r0, [sp, #36]	; 0x24
    9a88:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    9a8a:	47b0      	blx	r6
    9a8c:	1c43      	adds	r3, r0, #1
    9a8e:	d100      	bne.n	9a92 <_printf_float+0x462>
    9a90:	e62b      	b.n	96ea <_printf_float+0xba>
    9a92:	3501      	adds	r5, #1
    9a94:	68e3      	ldr	r3, [r4, #12]
    9a96:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    9a98:	1a9b      	subs	r3, r3, r2
    9a9a:	429d      	cmp	r5, r3
    9a9c:	dbef      	blt.n	9a7e <_printf_float+0x44e>
    9a9e:	e6fb      	b.n	9898 <_printf_float+0x268>
    9aa0:	0032      	movs	r2, r6
    9aa2:	002b      	movs	r3, r5
    9aa4:	0030      	movs	r0, r6
    9aa6:	0029      	movs	r1, r5
    9aa8:	f7ff fb46 	bl	9138 <__aeabi_dcmpun>
    9aac:	2800      	cmp	r0, #0
    9aae:	d100      	bne.n	9ab2 <_printf_float+0x482>
    9ab0:	e621      	b.n	96f6 <_printf_float+0xc6>
    9ab2:	4d03      	ldr	r5, [pc, #12]	; (9ac0 <_printf_float+0x490>)
    9ab4:	2f47      	cmp	r7, #71	; 0x47
    9ab6:	d900      	bls.n	9aba <_printf_float+0x48a>
    9ab8:	e605      	b.n	96c6 <_printf_float+0x96>
    9aba:	4d02      	ldr	r5, [pc, #8]	; (9ac4 <_printf_float+0x494>)
    9abc:	e603      	b.n	96c6 <_printf_float+0x96>
    9abe:	46c0      	nop			; (mov r8, r8)
    9ac0:	0000be34 	.word	0x0000be34
    9ac4:	0000be30 	.word	0x0000be30

00009ac8 <_printf_common>:
    9ac8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    9aca:	0015      	movs	r5, r2
    9acc:	9301      	str	r3, [sp, #4]
    9ace:	688a      	ldr	r2, [r1, #8]
    9ad0:	690b      	ldr	r3, [r1, #16]
    9ad2:	9000      	str	r0, [sp, #0]
    9ad4:	000c      	movs	r4, r1
    9ad6:	4293      	cmp	r3, r2
    9ad8:	da00      	bge.n	9adc <_printf_common+0x14>
    9ada:	0013      	movs	r3, r2
    9adc:	0022      	movs	r2, r4
    9ade:	602b      	str	r3, [r5, #0]
    9ae0:	3243      	adds	r2, #67	; 0x43
    9ae2:	7812      	ldrb	r2, [r2, #0]
    9ae4:	2a00      	cmp	r2, #0
    9ae6:	d001      	beq.n	9aec <_printf_common+0x24>
    9ae8:	3301      	adds	r3, #1
    9aea:	602b      	str	r3, [r5, #0]
    9aec:	6823      	ldr	r3, [r4, #0]
    9aee:	069b      	lsls	r3, r3, #26
    9af0:	d502      	bpl.n	9af8 <_printf_common+0x30>
    9af2:	682b      	ldr	r3, [r5, #0]
    9af4:	3302      	adds	r3, #2
    9af6:	602b      	str	r3, [r5, #0]
    9af8:	2706      	movs	r7, #6
    9afa:	6823      	ldr	r3, [r4, #0]
    9afc:	401f      	ands	r7, r3
    9afe:	d027      	beq.n	9b50 <_printf_common+0x88>
    9b00:	0023      	movs	r3, r4
    9b02:	3343      	adds	r3, #67	; 0x43
    9b04:	781b      	ldrb	r3, [r3, #0]
    9b06:	1e5a      	subs	r2, r3, #1
    9b08:	4193      	sbcs	r3, r2
    9b0a:	6822      	ldr	r2, [r4, #0]
    9b0c:	0692      	lsls	r2, r2, #26
    9b0e:	d430      	bmi.n	9b72 <_printf_common+0xaa>
    9b10:	0022      	movs	r2, r4
    9b12:	9901      	ldr	r1, [sp, #4]
    9b14:	3243      	adds	r2, #67	; 0x43
    9b16:	9800      	ldr	r0, [sp, #0]
    9b18:	9e08      	ldr	r6, [sp, #32]
    9b1a:	47b0      	blx	r6
    9b1c:	1c43      	adds	r3, r0, #1
    9b1e:	d025      	beq.n	9b6c <_printf_common+0xa4>
    9b20:	2306      	movs	r3, #6
    9b22:	6820      	ldr	r0, [r4, #0]
    9b24:	682a      	ldr	r2, [r5, #0]
    9b26:	68e1      	ldr	r1, [r4, #12]
    9b28:	4003      	ands	r3, r0
    9b2a:	2500      	movs	r5, #0
    9b2c:	2b04      	cmp	r3, #4
    9b2e:	d103      	bne.n	9b38 <_printf_common+0x70>
    9b30:	1a8d      	subs	r5, r1, r2
    9b32:	43eb      	mvns	r3, r5
    9b34:	17db      	asrs	r3, r3, #31
    9b36:	401d      	ands	r5, r3
    9b38:	68a3      	ldr	r3, [r4, #8]
    9b3a:	6922      	ldr	r2, [r4, #16]
    9b3c:	4293      	cmp	r3, r2
    9b3e:	dd01      	ble.n	9b44 <_printf_common+0x7c>
    9b40:	1a9b      	subs	r3, r3, r2
    9b42:	18ed      	adds	r5, r5, r3
    9b44:	2700      	movs	r7, #0
    9b46:	42bd      	cmp	r5, r7
    9b48:	d120      	bne.n	9b8c <_printf_common+0xc4>
    9b4a:	2000      	movs	r0, #0
    9b4c:	e010      	b.n	9b70 <_printf_common+0xa8>
    9b4e:	3701      	adds	r7, #1
    9b50:	68e3      	ldr	r3, [r4, #12]
    9b52:	682a      	ldr	r2, [r5, #0]
    9b54:	1a9b      	subs	r3, r3, r2
    9b56:	429f      	cmp	r7, r3
    9b58:	dad2      	bge.n	9b00 <_printf_common+0x38>
    9b5a:	0022      	movs	r2, r4
    9b5c:	2301      	movs	r3, #1
    9b5e:	3219      	adds	r2, #25
    9b60:	9901      	ldr	r1, [sp, #4]
    9b62:	9800      	ldr	r0, [sp, #0]
    9b64:	9e08      	ldr	r6, [sp, #32]
    9b66:	47b0      	blx	r6
    9b68:	1c43      	adds	r3, r0, #1
    9b6a:	d1f0      	bne.n	9b4e <_printf_common+0x86>
    9b6c:	2001      	movs	r0, #1
    9b6e:	4240      	negs	r0, r0
    9b70:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    9b72:	2030      	movs	r0, #48	; 0x30
    9b74:	18e1      	adds	r1, r4, r3
    9b76:	3143      	adds	r1, #67	; 0x43
    9b78:	7008      	strb	r0, [r1, #0]
    9b7a:	0021      	movs	r1, r4
    9b7c:	1c5a      	adds	r2, r3, #1
    9b7e:	3145      	adds	r1, #69	; 0x45
    9b80:	7809      	ldrb	r1, [r1, #0]
    9b82:	18a2      	adds	r2, r4, r2
    9b84:	3243      	adds	r2, #67	; 0x43
    9b86:	3302      	adds	r3, #2
    9b88:	7011      	strb	r1, [r2, #0]
    9b8a:	e7c1      	b.n	9b10 <_printf_common+0x48>
    9b8c:	0022      	movs	r2, r4
    9b8e:	2301      	movs	r3, #1
    9b90:	321a      	adds	r2, #26
    9b92:	9901      	ldr	r1, [sp, #4]
    9b94:	9800      	ldr	r0, [sp, #0]
    9b96:	9e08      	ldr	r6, [sp, #32]
    9b98:	47b0      	blx	r6
    9b9a:	1c43      	adds	r3, r0, #1
    9b9c:	d0e6      	beq.n	9b6c <_printf_common+0xa4>
    9b9e:	3701      	adds	r7, #1
    9ba0:	e7d1      	b.n	9b46 <_printf_common+0x7e>
	...

00009ba4 <_printf_i>:
    9ba4:	b5f0      	push	{r4, r5, r6, r7, lr}
    9ba6:	b08b      	sub	sp, #44	; 0x2c
    9ba8:	9206      	str	r2, [sp, #24]
    9baa:	000a      	movs	r2, r1
    9bac:	3243      	adds	r2, #67	; 0x43
    9bae:	9307      	str	r3, [sp, #28]
    9bb0:	9005      	str	r0, [sp, #20]
    9bb2:	9204      	str	r2, [sp, #16]
    9bb4:	7e0a      	ldrb	r2, [r1, #24]
    9bb6:	000c      	movs	r4, r1
    9bb8:	9b10      	ldr	r3, [sp, #64]	; 0x40
    9bba:	2a6e      	cmp	r2, #110	; 0x6e
    9bbc:	d100      	bne.n	9bc0 <_printf_i+0x1c>
    9bbe:	e08f      	b.n	9ce0 <_printf_i+0x13c>
    9bc0:	d817      	bhi.n	9bf2 <_printf_i+0x4e>
    9bc2:	2a63      	cmp	r2, #99	; 0x63
    9bc4:	d02c      	beq.n	9c20 <_printf_i+0x7c>
    9bc6:	d808      	bhi.n	9bda <_printf_i+0x36>
    9bc8:	2a00      	cmp	r2, #0
    9bca:	d100      	bne.n	9bce <_printf_i+0x2a>
    9bcc:	e099      	b.n	9d02 <_printf_i+0x15e>
    9bce:	2a58      	cmp	r2, #88	; 0x58
    9bd0:	d054      	beq.n	9c7c <_printf_i+0xd8>
    9bd2:	0026      	movs	r6, r4
    9bd4:	3642      	adds	r6, #66	; 0x42
    9bd6:	7032      	strb	r2, [r6, #0]
    9bd8:	e029      	b.n	9c2e <_printf_i+0x8a>
    9bda:	2a64      	cmp	r2, #100	; 0x64
    9bdc:	d001      	beq.n	9be2 <_printf_i+0x3e>
    9bde:	2a69      	cmp	r2, #105	; 0x69
    9be0:	d1f7      	bne.n	9bd2 <_printf_i+0x2e>
    9be2:	6821      	ldr	r1, [r4, #0]
    9be4:	681a      	ldr	r2, [r3, #0]
    9be6:	0608      	lsls	r0, r1, #24
    9be8:	d523      	bpl.n	9c32 <_printf_i+0x8e>
    9bea:	1d11      	adds	r1, r2, #4
    9bec:	6019      	str	r1, [r3, #0]
    9bee:	6815      	ldr	r5, [r2, #0]
    9bf0:	e025      	b.n	9c3e <_printf_i+0x9a>
    9bf2:	2a73      	cmp	r2, #115	; 0x73
    9bf4:	d100      	bne.n	9bf8 <_printf_i+0x54>
    9bf6:	e088      	b.n	9d0a <_printf_i+0x166>
    9bf8:	d808      	bhi.n	9c0c <_printf_i+0x68>
    9bfa:	2a6f      	cmp	r2, #111	; 0x6f
    9bfc:	d029      	beq.n	9c52 <_printf_i+0xae>
    9bfe:	2a70      	cmp	r2, #112	; 0x70
    9c00:	d1e7      	bne.n	9bd2 <_printf_i+0x2e>
    9c02:	2220      	movs	r2, #32
    9c04:	6809      	ldr	r1, [r1, #0]
    9c06:	430a      	orrs	r2, r1
    9c08:	6022      	str	r2, [r4, #0]
    9c0a:	e003      	b.n	9c14 <_printf_i+0x70>
    9c0c:	2a75      	cmp	r2, #117	; 0x75
    9c0e:	d020      	beq.n	9c52 <_printf_i+0xae>
    9c10:	2a78      	cmp	r2, #120	; 0x78
    9c12:	d1de      	bne.n	9bd2 <_printf_i+0x2e>
    9c14:	0022      	movs	r2, r4
    9c16:	2178      	movs	r1, #120	; 0x78
    9c18:	3245      	adds	r2, #69	; 0x45
    9c1a:	7011      	strb	r1, [r2, #0]
    9c1c:	4a6c      	ldr	r2, [pc, #432]	; (9dd0 <_printf_i+0x22c>)
    9c1e:	e030      	b.n	9c82 <_printf_i+0xde>
    9c20:	000e      	movs	r6, r1
    9c22:	681a      	ldr	r2, [r3, #0]
    9c24:	3642      	adds	r6, #66	; 0x42
    9c26:	1d11      	adds	r1, r2, #4
    9c28:	6019      	str	r1, [r3, #0]
    9c2a:	6813      	ldr	r3, [r2, #0]
    9c2c:	7033      	strb	r3, [r6, #0]
    9c2e:	2301      	movs	r3, #1
    9c30:	e079      	b.n	9d26 <_printf_i+0x182>
    9c32:	0649      	lsls	r1, r1, #25
    9c34:	d5d9      	bpl.n	9bea <_printf_i+0x46>
    9c36:	1d11      	adds	r1, r2, #4
    9c38:	6019      	str	r1, [r3, #0]
    9c3a:	2300      	movs	r3, #0
    9c3c:	5ed5      	ldrsh	r5, [r2, r3]
    9c3e:	2d00      	cmp	r5, #0
    9c40:	da03      	bge.n	9c4a <_printf_i+0xa6>
    9c42:	232d      	movs	r3, #45	; 0x2d
    9c44:	9a04      	ldr	r2, [sp, #16]
    9c46:	426d      	negs	r5, r5
    9c48:	7013      	strb	r3, [r2, #0]
    9c4a:	4b62      	ldr	r3, [pc, #392]	; (9dd4 <_printf_i+0x230>)
    9c4c:	270a      	movs	r7, #10
    9c4e:	9303      	str	r3, [sp, #12]
    9c50:	e02f      	b.n	9cb2 <_printf_i+0x10e>
    9c52:	6820      	ldr	r0, [r4, #0]
    9c54:	6819      	ldr	r1, [r3, #0]
    9c56:	0605      	lsls	r5, r0, #24
    9c58:	d503      	bpl.n	9c62 <_printf_i+0xbe>
    9c5a:	1d08      	adds	r0, r1, #4
    9c5c:	6018      	str	r0, [r3, #0]
    9c5e:	680d      	ldr	r5, [r1, #0]
    9c60:	e005      	b.n	9c6e <_printf_i+0xca>
    9c62:	0640      	lsls	r0, r0, #25
    9c64:	d5f9      	bpl.n	9c5a <_printf_i+0xb6>
    9c66:	680d      	ldr	r5, [r1, #0]
    9c68:	1d08      	adds	r0, r1, #4
    9c6a:	6018      	str	r0, [r3, #0]
    9c6c:	b2ad      	uxth	r5, r5
    9c6e:	4b59      	ldr	r3, [pc, #356]	; (9dd4 <_printf_i+0x230>)
    9c70:	2708      	movs	r7, #8
    9c72:	9303      	str	r3, [sp, #12]
    9c74:	2a6f      	cmp	r2, #111	; 0x6f
    9c76:	d018      	beq.n	9caa <_printf_i+0x106>
    9c78:	270a      	movs	r7, #10
    9c7a:	e016      	b.n	9caa <_printf_i+0x106>
    9c7c:	3145      	adds	r1, #69	; 0x45
    9c7e:	700a      	strb	r2, [r1, #0]
    9c80:	4a54      	ldr	r2, [pc, #336]	; (9dd4 <_printf_i+0x230>)
    9c82:	9203      	str	r2, [sp, #12]
    9c84:	681a      	ldr	r2, [r3, #0]
    9c86:	6821      	ldr	r1, [r4, #0]
    9c88:	1d10      	adds	r0, r2, #4
    9c8a:	6018      	str	r0, [r3, #0]
    9c8c:	6815      	ldr	r5, [r2, #0]
    9c8e:	0608      	lsls	r0, r1, #24
    9c90:	d522      	bpl.n	9cd8 <_printf_i+0x134>
    9c92:	07cb      	lsls	r3, r1, #31
    9c94:	d502      	bpl.n	9c9c <_printf_i+0xf8>
    9c96:	2320      	movs	r3, #32
    9c98:	4319      	orrs	r1, r3
    9c9a:	6021      	str	r1, [r4, #0]
    9c9c:	2710      	movs	r7, #16
    9c9e:	2d00      	cmp	r5, #0
    9ca0:	d103      	bne.n	9caa <_printf_i+0x106>
    9ca2:	2320      	movs	r3, #32
    9ca4:	6822      	ldr	r2, [r4, #0]
    9ca6:	439a      	bics	r2, r3
    9ca8:	6022      	str	r2, [r4, #0]
    9caa:	0023      	movs	r3, r4
    9cac:	2200      	movs	r2, #0
    9cae:	3343      	adds	r3, #67	; 0x43
    9cb0:	701a      	strb	r2, [r3, #0]
    9cb2:	6863      	ldr	r3, [r4, #4]
    9cb4:	60a3      	str	r3, [r4, #8]
    9cb6:	2b00      	cmp	r3, #0
    9cb8:	db5c      	blt.n	9d74 <_printf_i+0x1d0>
    9cba:	2204      	movs	r2, #4
    9cbc:	6821      	ldr	r1, [r4, #0]
    9cbe:	4391      	bics	r1, r2
    9cc0:	6021      	str	r1, [r4, #0]
    9cc2:	2d00      	cmp	r5, #0
    9cc4:	d158      	bne.n	9d78 <_printf_i+0x1d4>
    9cc6:	9e04      	ldr	r6, [sp, #16]
    9cc8:	2b00      	cmp	r3, #0
    9cca:	d064      	beq.n	9d96 <_printf_i+0x1f2>
    9ccc:	0026      	movs	r6, r4
    9cce:	9b03      	ldr	r3, [sp, #12]
    9cd0:	3642      	adds	r6, #66	; 0x42
    9cd2:	781b      	ldrb	r3, [r3, #0]
    9cd4:	7033      	strb	r3, [r6, #0]
    9cd6:	e05e      	b.n	9d96 <_printf_i+0x1f2>
    9cd8:	0648      	lsls	r0, r1, #25
    9cda:	d5da      	bpl.n	9c92 <_printf_i+0xee>
    9cdc:	b2ad      	uxth	r5, r5
    9cde:	e7d8      	b.n	9c92 <_printf_i+0xee>
    9ce0:	6809      	ldr	r1, [r1, #0]
    9ce2:	681a      	ldr	r2, [r3, #0]
    9ce4:	0608      	lsls	r0, r1, #24
    9ce6:	d505      	bpl.n	9cf4 <_printf_i+0x150>
    9ce8:	1d11      	adds	r1, r2, #4
    9cea:	6019      	str	r1, [r3, #0]
    9cec:	6813      	ldr	r3, [r2, #0]
    9cee:	6962      	ldr	r2, [r4, #20]
    9cf0:	601a      	str	r2, [r3, #0]
    9cf2:	e006      	b.n	9d02 <_printf_i+0x15e>
    9cf4:	0649      	lsls	r1, r1, #25
    9cf6:	d5f7      	bpl.n	9ce8 <_printf_i+0x144>
    9cf8:	1d11      	adds	r1, r2, #4
    9cfa:	6019      	str	r1, [r3, #0]
    9cfc:	6813      	ldr	r3, [r2, #0]
    9cfe:	8aa2      	ldrh	r2, [r4, #20]
    9d00:	801a      	strh	r2, [r3, #0]
    9d02:	2300      	movs	r3, #0
    9d04:	9e04      	ldr	r6, [sp, #16]
    9d06:	6123      	str	r3, [r4, #16]
    9d08:	e054      	b.n	9db4 <_printf_i+0x210>
    9d0a:	681a      	ldr	r2, [r3, #0]
    9d0c:	1d11      	adds	r1, r2, #4
    9d0e:	6019      	str	r1, [r3, #0]
    9d10:	6816      	ldr	r6, [r2, #0]
    9d12:	2100      	movs	r1, #0
    9d14:	6862      	ldr	r2, [r4, #4]
    9d16:	0030      	movs	r0, r6
    9d18:	f000 ffca 	bl	acb0 <memchr>
    9d1c:	2800      	cmp	r0, #0
    9d1e:	d001      	beq.n	9d24 <_printf_i+0x180>
    9d20:	1b80      	subs	r0, r0, r6
    9d22:	6060      	str	r0, [r4, #4]
    9d24:	6863      	ldr	r3, [r4, #4]
    9d26:	6123      	str	r3, [r4, #16]
    9d28:	2300      	movs	r3, #0
    9d2a:	9a04      	ldr	r2, [sp, #16]
    9d2c:	7013      	strb	r3, [r2, #0]
    9d2e:	e041      	b.n	9db4 <_printf_i+0x210>
    9d30:	6923      	ldr	r3, [r4, #16]
    9d32:	0032      	movs	r2, r6
    9d34:	9906      	ldr	r1, [sp, #24]
    9d36:	9805      	ldr	r0, [sp, #20]
    9d38:	9d07      	ldr	r5, [sp, #28]
    9d3a:	47a8      	blx	r5
    9d3c:	1c43      	adds	r3, r0, #1
    9d3e:	d043      	beq.n	9dc8 <_printf_i+0x224>
    9d40:	6823      	ldr	r3, [r4, #0]
    9d42:	2500      	movs	r5, #0
    9d44:	079b      	lsls	r3, r3, #30
    9d46:	d40f      	bmi.n	9d68 <_printf_i+0x1c4>
    9d48:	9b09      	ldr	r3, [sp, #36]	; 0x24
    9d4a:	68e0      	ldr	r0, [r4, #12]
    9d4c:	4298      	cmp	r0, r3
    9d4e:	da3d      	bge.n	9dcc <_printf_i+0x228>
    9d50:	0018      	movs	r0, r3
    9d52:	e03b      	b.n	9dcc <_printf_i+0x228>
    9d54:	0022      	movs	r2, r4
    9d56:	2301      	movs	r3, #1
    9d58:	3219      	adds	r2, #25
    9d5a:	9906      	ldr	r1, [sp, #24]
    9d5c:	9805      	ldr	r0, [sp, #20]
    9d5e:	9e07      	ldr	r6, [sp, #28]
    9d60:	47b0      	blx	r6
    9d62:	1c43      	adds	r3, r0, #1
    9d64:	d030      	beq.n	9dc8 <_printf_i+0x224>
    9d66:	3501      	adds	r5, #1
    9d68:	68e3      	ldr	r3, [r4, #12]
    9d6a:	9a09      	ldr	r2, [sp, #36]	; 0x24
    9d6c:	1a9b      	subs	r3, r3, r2
    9d6e:	429d      	cmp	r5, r3
    9d70:	dbf0      	blt.n	9d54 <_printf_i+0x1b0>
    9d72:	e7e9      	b.n	9d48 <_printf_i+0x1a4>
    9d74:	2d00      	cmp	r5, #0
    9d76:	d0a9      	beq.n	9ccc <_printf_i+0x128>
    9d78:	9e04      	ldr	r6, [sp, #16]
    9d7a:	0028      	movs	r0, r5
    9d7c:	0039      	movs	r1, r7
    9d7e:	f7fd fbd3 	bl	7528 <__aeabi_uidivmod>
    9d82:	9b03      	ldr	r3, [sp, #12]
    9d84:	3e01      	subs	r6, #1
    9d86:	5c5b      	ldrb	r3, [r3, r1]
    9d88:	0028      	movs	r0, r5
    9d8a:	7033      	strb	r3, [r6, #0]
    9d8c:	0039      	movs	r1, r7
    9d8e:	f7fd fb45 	bl	741c <__udivsi3>
    9d92:	1e05      	subs	r5, r0, #0
    9d94:	d1f1      	bne.n	9d7a <_printf_i+0x1d6>
    9d96:	2f08      	cmp	r7, #8
    9d98:	d109      	bne.n	9dae <_printf_i+0x20a>
    9d9a:	6823      	ldr	r3, [r4, #0]
    9d9c:	07db      	lsls	r3, r3, #31
    9d9e:	d506      	bpl.n	9dae <_printf_i+0x20a>
    9da0:	6863      	ldr	r3, [r4, #4]
    9da2:	6922      	ldr	r2, [r4, #16]
    9da4:	4293      	cmp	r3, r2
    9da6:	dc02      	bgt.n	9dae <_printf_i+0x20a>
    9da8:	2330      	movs	r3, #48	; 0x30
    9daa:	3e01      	subs	r6, #1
    9dac:	7033      	strb	r3, [r6, #0]
    9dae:	9b04      	ldr	r3, [sp, #16]
    9db0:	1b9b      	subs	r3, r3, r6
    9db2:	6123      	str	r3, [r4, #16]
    9db4:	9b07      	ldr	r3, [sp, #28]
    9db6:	aa09      	add	r2, sp, #36	; 0x24
    9db8:	9300      	str	r3, [sp, #0]
    9dba:	0021      	movs	r1, r4
    9dbc:	9b06      	ldr	r3, [sp, #24]
    9dbe:	9805      	ldr	r0, [sp, #20]
    9dc0:	f7ff fe82 	bl	9ac8 <_printf_common>
    9dc4:	1c43      	adds	r3, r0, #1
    9dc6:	d1b3      	bne.n	9d30 <_printf_i+0x18c>
    9dc8:	2001      	movs	r0, #1
    9dca:	4240      	negs	r0, r0
    9dcc:	b00b      	add	sp, #44	; 0x2c
    9dce:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9dd0:	0000be49 	.word	0x0000be49
    9dd4:	0000be38 	.word	0x0000be38

00009dd8 <realloc>:
    9dd8:	b510      	push	{r4, lr}
    9dda:	4b03      	ldr	r3, [pc, #12]	; (9de8 <realloc+0x10>)
    9ddc:	000a      	movs	r2, r1
    9dde:	0001      	movs	r1, r0
    9de0:	6818      	ldr	r0, [r3, #0]
    9de2:	f001 fa63 	bl	b2ac <_realloc_r>
    9de6:	bd10      	pop	{r4, pc}
    9de8:	20000088 	.word	0x20000088

00009dec <_sbrk_r>:
    9dec:	2300      	movs	r3, #0
    9dee:	b570      	push	{r4, r5, r6, lr}
    9df0:	4c06      	ldr	r4, [pc, #24]	; (9e0c <_sbrk_r+0x20>)
    9df2:	0005      	movs	r5, r0
    9df4:	0008      	movs	r0, r1
    9df6:	6023      	str	r3, [r4, #0]
    9df8:	f001 fc2e 	bl	b658 <_sbrk>
    9dfc:	1c43      	adds	r3, r0, #1
    9dfe:	d103      	bne.n	9e08 <_sbrk_r+0x1c>
    9e00:	6823      	ldr	r3, [r4, #0]
    9e02:	2b00      	cmp	r3, #0
    9e04:	d000      	beq.n	9e08 <_sbrk_r+0x1c>
    9e06:	602b      	str	r3, [r5, #0]
    9e08:	bd70      	pop	{r4, r5, r6, pc}
    9e0a:	46c0      	nop			; (mov r8, r8)
    9e0c:	200010ac 	.word	0x200010ac

00009e10 <siprintf>:
    9e10:	b40e      	push	{r1, r2, r3}
    9e12:	b510      	push	{r4, lr}
    9e14:	b09d      	sub	sp, #116	; 0x74
    9e16:	a902      	add	r1, sp, #8
    9e18:	9002      	str	r0, [sp, #8]
    9e1a:	6108      	str	r0, [r1, #16]
    9e1c:	480b      	ldr	r0, [pc, #44]	; (9e4c <siprintf+0x3c>)
    9e1e:	2482      	movs	r4, #130	; 0x82
    9e20:	6088      	str	r0, [r1, #8]
    9e22:	6148      	str	r0, [r1, #20]
    9e24:	2001      	movs	r0, #1
    9e26:	4240      	negs	r0, r0
    9e28:	ab1f      	add	r3, sp, #124	; 0x7c
    9e2a:	81c8      	strh	r0, [r1, #14]
    9e2c:	4808      	ldr	r0, [pc, #32]	; (9e50 <siprintf+0x40>)
    9e2e:	cb04      	ldmia	r3!, {r2}
    9e30:	00a4      	lsls	r4, r4, #2
    9e32:	6800      	ldr	r0, [r0, #0]
    9e34:	9301      	str	r3, [sp, #4]
    9e36:	818c      	strh	r4, [r1, #12]
    9e38:	f001 fac0 	bl	b3bc <_svfiprintf_r>
    9e3c:	2300      	movs	r3, #0
    9e3e:	9a02      	ldr	r2, [sp, #8]
    9e40:	7013      	strb	r3, [r2, #0]
    9e42:	b01d      	add	sp, #116	; 0x74
    9e44:	bc10      	pop	{r4}
    9e46:	bc08      	pop	{r3}
    9e48:	b003      	add	sp, #12
    9e4a:	4718      	bx	r3
    9e4c:	7fffffff 	.word	0x7fffffff
    9e50:	20000088 	.word	0x20000088

00009e54 <strcpy>:
    9e54:	1c03      	adds	r3, r0, #0
    9e56:	780a      	ldrb	r2, [r1, #0]
    9e58:	3101      	adds	r1, #1
    9e5a:	701a      	strb	r2, [r3, #0]
    9e5c:	3301      	adds	r3, #1
    9e5e:	2a00      	cmp	r2, #0
    9e60:	d1f9      	bne.n	9e56 <strcpy+0x2>
    9e62:	4770      	bx	lr

00009e64 <strlen>:
    9e64:	2300      	movs	r3, #0
    9e66:	5cc2      	ldrb	r2, [r0, r3]
    9e68:	3301      	adds	r3, #1
    9e6a:	2a00      	cmp	r2, #0
    9e6c:	d1fb      	bne.n	9e66 <strlen+0x2>
    9e6e:	1e58      	subs	r0, r3, #1
    9e70:	4770      	bx	lr

00009e72 <_strtoul_l.isra.0>:
    9e72:	b5f0      	push	{r4, r5, r6, r7, lr}
    9e74:	001f      	movs	r7, r3
    9e76:	000e      	movs	r6, r1
    9e78:	b087      	sub	sp, #28
    9e7a:	9005      	str	r0, [sp, #20]
    9e7c:	9103      	str	r1, [sp, #12]
    9e7e:	9201      	str	r2, [sp, #4]
    9e80:	980c      	ldr	r0, [sp, #48]	; 0x30
    9e82:	7834      	ldrb	r4, [r6, #0]
    9e84:	f7ff fa34 	bl	92f0 <__locale_ctype_ptr_l>
    9e88:	2208      	movs	r2, #8
    9e8a:	1900      	adds	r0, r0, r4
    9e8c:	7843      	ldrb	r3, [r0, #1]
    9e8e:	1c75      	adds	r5, r6, #1
    9e90:	4013      	ands	r3, r2
    9e92:	d10c      	bne.n	9eae <_strtoul_l.isra.0+0x3c>
    9e94:	2c2d      	cmp	r4, #45	; 0x2d
    9e96:	d10c      	bne.n	9eb2 <_strtoul_l.isra.0+0x40>
    9e98:	3301      	adds	r3, #1
    9e9a:	782c      	ldrb	r4, [r5, #0]
    9e9c:	9302      	str	r3, [sp, #8]
    9e9e:	1cb5      	adds	r5, r6, #2
    9ea0:	2f00      	cmp	r7, #0
    9ea2:	d00c      	beq.n	9ebe <_strtoul_l.isra.0+0x4c>
    9ea4:	2f10      	cmp	r7, #16
    9ea6:	d114      	bne.n	9ed2 <_strtoul_l.isra.0+0x60>
    9ea8:	2c30      	cmp	r4, #48	; 0x30
    9eaa:	d00a      	beq.n	9ec2 <_strtoul_l.isra.0+0x50>
    9eac:	e011      	b.n	9ed2 <_strtoul_l.isra.0+0x60>
    9eae:	002e      	movs	r6, r5
    9eb0:	e7e6      	b.n	9e80 <_strtoul_l.isra.0+0xe>
    9eb2:	9302      	str	r3, [sp, #8]
    9eb4:	2c2b      	cmp	r4, #43	; 0x2b
    9eb6:	d1f3      	bne.n	9ea0 <_strtoul_l.isra.0+0x2e>
    9eb8:	782c      	ldrb	r4, [r5, #0]
    9eba:	1cb5      	adds	r5, r6, #2
    9ebc:	e7f0      	b.n	9ea0 <_strtoul_l.isra.0+0x2e>
    9ebe:	2c30      	cmp	r4, #48	; 0x30
    9ec0:	d12f      	bne.n	9f22 <_strtoul_l.isra.0+0xb0>
    9ec2:	2220      	movs	r2, #32
    9ec4:	782b      	ldrb	r3, [r5, #0]
    9ec6:	4393      	bics	r3, r2
    9ec8:	2b58      	cmp	r3, #88	; 0x58
    9eca:	d154      	bne.n	9f76 <_strtoul_l.isra.0+0x104>
    9ecc:	2710      	movs	r7, #16
    9ece:	786c      	ldrb	r4, [r5, #1]
    9ed0:	3502      	adds	r5, #2
    9ed2:	2001      	movs	r0, #1
    9ed4:	0039      	movs	r1, r7
    9ed6:	4240      	negs	r0, r0
    9ed8:	f7fd faa0 	bl	741c <__udivsi3>
    9edc:	0006      	movs	r6, r0
    9ede:	2001      	movs	r0, #1
    9ee0:	0039      	movs	r1, r7
    9ee2:	4240      	negs	r0, r0
    9ee4:	f7fd fb20 	bl	7528 <__aeabi_uidivmod>
    9ee8:	2300      	movs	r3, #0
    9eea:	9104      	str	r1, [sp, #16]
    9eec:	2101      	movs	r1, #1
    9eee:	2201      	movs	r2, #1
    9ef0:	0018      	movs	r0, r3
    9ef2:	468c      	mov	ip, r1
    9ef4:	4252      	negs	r2, r2
    9ef6:	0021      	movs	r1, r4
    9ef8:	3930      	subs	r1, #48	; 0x30
    9efa:	2909      	cmp	r1, #9
    9efc:	d813      	bhi.n	9f26 <_strtoul_l.isra.0+0xb4>
    9efe:	000c      	movs	r4, r1
    9f00:	42a7      	cmp	r7, r4
    9f02:	dd1e      	ble.n	9f42 <_strtoul_l.isra.0+0xd0>
    9f04:	2b00      	cmp	r3, #0
    9f06:	db1a      	blt.n	9f3e <_strtoul_l.isra.0+0xcc>
    9f08:	0013      	movs	r3, r2
    9f0a:	4286      	cmp	r6, r0
    9f0c:	d306      	bcc.n	9f1c <_strtoul_l.isra.0+0xaa>
    9f0e:	d102      	bne.n	9f16 <_strtoul_l.isra.0+0xa4>
    9f10:	9904      	ldr	r1, [sp, #16]
    9f12:	42a1      	cmp	r1, r4
    9f14:	db02      	blt.n	9f1c <_strtoul_l.isra.0+0xaa>
    9f16:	4663      	mov	r3, ip
    9f18:	4378      	muls	r0, r7
    9f1a:	1820      	adds	r0, r4, r0
    9f1c:	782c      	ldrb	r4, [r5, #0]
    9f1e:	3501      	adds	r5, #1
    9f20:	e7e9      	b.n	9ef6 <_strtoul_l.isra.0+0x84>
    9f22:	270a      	movs	r7, #10
    9f24:	e7d5      	b.n	9ed2 <_strtoul_l.isra.0+0x60>
    9f26:	0021      	movs	r1, r4
    9f28:	3941      	subs	r1, #65	; 0x41
    9f2a:	2919      	cmp	r1, #25
    9f2c:	d801      	bhi.n	9f32 <_strtoul_l.isra.0+0xc0>
    9f2e:	3c37      	subs	r4, #55	; 0x37
    9f30:	e7e6      	b.n	9f00 <_strtoul_l.isra.0+0x8e>
    9f32:	0021      	movs	r1, r4
    9f34:	3961      	subs	r1, #97	; 0x61
    9f36:	2919      	cmp	r1, #25
    9f38:	d803      	bhi.n	9f42 <_strtoul_l.isra.0+0xd0>
    9f3a:	3c57      	subs	r4, #87	; 0x57
    9f3c:	e7e0      	b.n	9f00 <_strtoul_l.isra.0+0x8e>
    9f3e:	0013      	movs	r3, r2
    9f40:	e7ec      	b.n	9f1c <_strtoul_l.isra.0+0xaa>
    9f42:	2b00      	cmp	r3, #0
    9f44:	da09      	bge.n	9f5a <_strtoul_l.isra.0+0xe8>
    9f46:	2322      	movs	r3, #34	; 0x22
    9f48:	2001      	movs	r0, #1
    9f4a:	9a05      	ldr	r2, [sp, #20]
    9f4c:	4240      	negs	r0, r0
    9f4e:	6013      	str	r3, [r2, #0]
    9f50:	9b01      	ldr	r3, [sp, #4]
    9f52:	2b00      	cmp	r3, #0
    9f54:	d10b      	bne.n	9f6e <_strtoul_l.isra.0+0xfc>
    9f56:	b007      	add	sp, #28
    9f58:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9f5a:	9a02      	ldr	r2, [sp, #8]
    9f5c:	2a00      	cmp	r2, #0
    9f5e:	d000      	beq.n	9f62 <_strtoul_l.isra.0+0xf0>
    9f60:	4240      	negs	r0, r0
    9f62:	9a01      	ldr	r2, [sp, #4]
    9f64:	2a00      	cmp	r2, #0
    9f66:	d0f6      	beq.n	9f56 <_strtoul_l.isra.0+0xe4>
    9f68:	9a03      	ldr	r2, [sp, #12]
    9f6a:	2b00      	cmp	r3, #0
    9f6c:	d000      	beq.n	9f70 <_strtoul_l.isra.0+0xfe>
    9f6e:	1e6a      	subs	r2, r5, #1
    9f70:	9b01      	ldr	r3, [sp, #4]
    9f72:	601a      	str	r2, [r3, #0]
    9f74:	e7ef      	b.n	9f56 <_strtoul_l.isra.0+0xe4>
    9f76:	2430      	movs	r4, #48	; 0x30
    9f78:	2f00      	cmp	r7, #0
    9f7a:	d1aa      	bne.n	9ed2 <_strtoul_l.isra.0+0x60>
    9f7c:	3708      	adds	r7, #8
    9f7e:	e7a8      	b.n	9ed2 <_strtoul_l.isra.0+0x60>

00009f80 <strtoul>:
    9f80:	b537      	push	{r0, r1, r2, r4, r5, lr}
    9f82:	0013      	movs	r3, r2
    9f84:	4a06      	ldr	r2, [pc, #24]	; (9fa0 <strtoul+0x20>)
    9f86:	0005      	movs	r5, r0
    9f88:	6810      	ldr	r0, [r2, #0]
    9f8a:	6a04      	ldr	r4, [r0, #32]
    9f8c:	2c00      	cmp	r4, #0
    9f8e:	d100      	bne.n	9f92 <strtoul+0x12>
    9f90:	4c04      	ldr	r4, [pc, #16]	; (9fa4 <strtoul+0x24>)
    9f92:	000a      	movs	r2, r1
    9f94:	9400      	str	r4, [sp, #0]
    9f96:	0029      	movs	r1, r5
    9f98:	f7ff ff6b 	bl	9e72 <_strtoul_l.isra.0>
    9f9c:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    9f9e:	46c0      	nop			; (mov r8, r8)
    9fa0:	20000088 	.word	0x20000088
    9fa4:	200000ec 	.word	0x200000ec

00009fa8 <__ascii_wctomb>:
    9fa8:	1e0b      	subs	r3, r1, #0
    9faa:	d004      	beq.n	9fb6 <__ascii_wctomb+0xe>
    9fac:	2aff      	cmp	r2, #255	; 0xff
    9fae:	d904      	bls.n	9fba <__ascii_wctomb+0x12>
    9fb0:	238a      	movs	r3, #138	; 0x8a
    9fb2:	6003      	str	r3, [r0, #0]
    9fb4:	3b8b      	subs	r3, #139	; 0x8b
    9fb6:	0018      	movs	r0, r3
    9fb8:	4770      	bx	lr
    9fba:	700a      	strb	r2, [r1, #0]
    9fbc:	2301      	movs	r3, #1
    9fbe:	e7fa      	b.n	9fb6 <__ascii_wctomb+0xe>

00009fc0 <quorem>:
    9fc0:	b5f0      	push	{r4, r5, r6, r7, lr}
    9fc2:	6903      	ldr	r3, [r0, #16]
    9fc4:	690c      	ldr	r4, [r1, #16]
    9fc6:	b089      	sub	sp, #36	; 0x24
    9fc8:	0007      	movs	r7, r0
    9fca:	9105      	str	r1, [sp, #20]
    9fcc:	2600      	movs	r6, #0
    9fce:	429c      	cmp	r4, r3
    9fd0:	dc6d      	bgt.n	a0ae <quorem+0xee>
    9fd2:	000b      	movs	r3, r1
    9fd4:	3c01      	subs	r4, #1
    9fd6:	3314      	adds	r3, #20
    9fd8:	00a5      	lsls	r5, r4, #2
    9fda:	9303      	str	r3, [sp, #12]
    9fdc:	195b      	adds	r3, r3, r5
    9fde:	9304      	str	r3, [sp, #16]
    9fe0:	0003      	movs	r3, r0
    9fe2:	3314      	adds	r3, #20
    9fe4:	9302      	str	r3, [sp, #8]
    9fe6:	195d      	adds	r5, r3, r5
    9fe8:	9b04      	ldr	r3, [sp, #16]
    9fea:	6828      	ldr	r0, [r5, #0]
    9fec:	681b      	ldr	r3, [r3, #0]
    9fee:	1c59      	adds	r1, r3, #1
    9ff0:	9301      	str	r3, [sp, #4]
    9ff2:	f7fd fa13 	bl	741c <__udivsi3>
    9ff6:	9001      	str	r0, [sp, #4]
    9ff8:	42b0      	cmp	r0, r6
    9ffa:	d02d      	beq.n	a058 <quorem+0x98>
    9ffc:	9b03      	ldr	r3, [sp, #12]
    9ffe:	9802      	ldr	r0, [sp, #8]
    a000:	469c      	mov	ip, r3
    a002:	9606      	str	r6, [sp, #24]
    a004:	4662      	mov	r2, ip
    a006:	ca08      	ldmia	r2!, {r3}
    a008:	4694      	mov	ip, r2
    a00a:	9a01      	ldr	r2, [sp, #4]
    a00c:	b299      	uxth	r1, r3
    a00e:	4351      	muls	r1, r2
    a010:	0c1b      	lsrs	r3, r3, #16
    a012:	4353      	muls	r3, r2
    a014:	1989      	adds	r1, r1, r6
    a016:	0c0a      	lsrs	r2, r1, #16
    a018:	189b      	adds	r3, r3, r2
    a01a:	9307      	str	r3, [sp, #28]
    a01c:	8802      	ldrh	r2, [r0, #0]
    a01e:	0c1e      	lsrs	r6, r3, #16
    a020:	9b06      	ldr	r3, [sp, #24]
    a022:	b289      	uxth	r1, r1
    a024:	18d2      	adds	r2, r2, r3
    a026:	6803      	ldr	r3, [r0, #0]
    a028:	1a52      	subs	r2, r2, r1
    a02a:	0c19      	lsrs	r1, r3, #16
    a02c:	466b      	mov	r3, sp
    a02e:	8b9b      	ldrh	r3, [r3, #28]
    a030:	1acb      	subs	r3, r1, r3
    a032:	1411      	asrs	r1, r2, #16
    a034:	185b      	adds	r3, r3, r1
    a036:	1419      	asrs	r1, r3, #16
    a038:	b292      	uxth	r2, r2
    a03a:	041b      	lsls	r3, r3, #16
    a03c:	431a      	orrs	r2, r3
    a03e:	9b04      	ldr	r3, [sp, #16]
    a040:	9106      	str	r1, [sp, #24]
    a042:	c004      	stmia	r0!, {r2}
    a044:	4563      	cmp	r3, ip
    a046:	d2dd      	bcs.n	a004 <quorem+0x44>
    a048:	682b      	ldr	r3, [r5, #0]
    a04a:	2b00      	cmp	r3, #0
    a04c:	d104      	bne.n	a058 <quorem+0x98>
    a04e:	9b02      	ldr	r3, [sp, #8]
    a050:	3d04      	subs	r5, #4
    a052:	42ab      	cmp	r3, r5
    a054:	d32e      	bcc.n	a0b4 <quorem+0xf4>
    a056:	613c      	str	r4, [r7, #16]
    a058:	9905      	ldr	r1, [sp, #20]
    a05a:	0038      	movs	r0, r7
    a05c:	f001 f847 	bl	b0ee <__mcmp>
    a060:	2800      	cmp	r0, #0
    a062:	db23      	blt.n	a0ac <quorem+0xec>
    a064:	2500      	movs	r5, #0
    a066:	9b01      	ldr	r3, [sp, #4]
    a068:	9802      	ldr	r0, [sp, #8]
    a06a:	3301      	adds	r3, #1
    a06c:	9903      	ldr	r1, [sp, #12]
    a06e:	9301      	str	r3, [sp, #4]
    a070:	c908      	ldmia	r1!, {r3}
    a072:	8802      	ldrh	r2, [r0, #0]
    a074:	1955      	adds	r5, r2, r5
    a076:	b29a      	uxth	r2, r3
    a078:	1aaa      	subs	r2, r5, r2
    a07a:	6805      	ldr	r5, [r0, #0]
    a07c:	0c1b      	lsrs	r3, r3, #16
    a07e:	0c2d      	lsrs	r5, r5, #16
    a080:	1aeb      	subs	r3, r5, r3
    a082:	1415      	asrs	r5, r2, #16
    a084:	195b      	adds	r3, r3, r5
    a086:	141d      	asrs	r5, r3, #16
    a088:	b292      	uxth	r2, r2
    a08a:	041b      	lsls	r3, r3, #16
    a08c:	4313      	orrs	r3, r2
    a08e:	c008      	stmia	r0!, {r3}
    a090:	9b04      	ldr	r3, [sp, #16]
    a092:	428b      	cmp	r3, r1
    a094:	d2ec      	bcs.n	a070 <quorem+0xb0>
    a096:	9a02      	ldr	r2, [sp, #8]
    a098:	00a3      	lsls	r3, r4, #2
    a09a:	18d3      	adds	r3, r2, r3
    a09c:	681a      	ldr	r2, [r3, #0]
    a09e:	2a00      	cmp	r2, #0
    a0a0:	d104      	bne.n	a0ac <quorem+0xec>
    a0a2:	9a02      	ldr	r2, [sp, #8]
    a0a4:	3b04      	subs	r3, #4
    a0a6:	429a      	cmp	r2, r3
    a0a8:	d309      	bcc.n	a0be <quorem+0xfe>
    a0aa:	613c      	str	r4, [r7, #16]
    a0ac:	9e01      	ldr	r6, [sp, #4]
    a0ae:	0030      	movs	r0, r6
    a0b0:	b009      	add	sp, #36	; 0x24
    a0b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a0b4:	682b      	ldr	r3, [r5, #0]
    a0b6:	2b00      	cmp	r3, #0
    a0b8:	d1cd      	bne.n	a056 <quorem+0x96>
    a0ba:	3c01      	subs	r4, #1
    a0bc:	e7c7      	b.n	a04e <quorem+0x8e>
    a0be:	681a      	ldr	r2, [r3, #0]
    a0c0:	2a00      	cmp	r2, #0
    a0c2:	d1f2      	bne.n	a0aa <quorem+0xea>
    a0c4:	3c01      	subs	r4, #1
    a0c6:	e7ec      	b.n	a0a2 <quorem+0xe2>

0000a0c8 <_dtoa_r>:
    a0c8:	b5f0      	push	{r4, r5, r6, r7, lr}
    a0ca:	0016      	movs	r6, r2
    a0cc:	001f      	movs	r7, r3
    a0ce:	6a44      	ldr	r4, [r0, #36]	; 0x24
    a0d0:	b09d      	sub	sp, #116	; 0x74
    a0d2:	9004      	str	r0, [sp, #16]
    a0d4:	9d25      	ldr	r5, [sp, #148]	; 0x94
    a0d6:	9606      	str	r6, [sp, #24]
    a0d8:	9707      	str	r7, [sp, #28]
    a0da:	2c00      	cmp	r4, #0
    a0dc:	d108      	bne.n	a0f0 <_dtoa_r+0x28>
    a0de:	2010      	movs	r0, #16
    a0e0:	f7ff f90a 	bl	92f8 <malloc>
    a0e4:	9b04      	ldr	r3, [sp, #16]
    a0e6:	6258      	str	r0, [r3, #36]	; 0x24
    a0e8:	6044      	str	r4, [r0, #4]
    a0ea:	6084      	str	r4, [r0, #8]
    a0ec:	6004      	str	r4, [r0, #0]
    a0ee:	60c4      	str	r4, [r0, #12]
    a0f0:	9b04      	ldr	r3, [sp, #16]
    a0f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    a0f4:	6819      	ldr	r1, [r3, #0]
    a0f6:	2900      	cmp	r1, #0
    a0f8:	d00b      	beq.n	a112 <_dtoa_r+0x4a>
    a0fa:	685a      	ldr	r2, [r3, #4]
    a0fc:	2301      	movs	r3, #1
    a0fe:	4093      	lsls	r3, r2
    a100:	604a      	str	r2, [r1, #4]
    a102:	608b      	str	r3, [r1, #8]
    a104:	9804      	ldr	r0, [sp, #16]
    a106:	f000 fe18 	bl	ad3a <_Bfree>
    a10a:	2200      	movs	r2, #0
    a10c:	9b04      	ldr	r3, [sp, #16]
    a10e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    a110:	601a      	str	r2, [r3, #0]
    a112:	9b07      	ldr	r3, [sp, #28]
    a114:	2b00      	cmp	r3, #0
    a116:	da1f      	bge.n	a158 <_dtoa_r+0x90>
    a118:	2301      	movs	r3, #1
    a11a:	602b      	str	r3, [r5, #0]
    a11c:	007b      	lsls	r3, r7, #1
    a11e:	085b      	lsrs	r3, r3, #1
    a120:	9307      	str	r3, [sp, #28]
    a122:	9c07      	ldr	r4, [sp, #28]
    a124:	4bb7      	ldr	r3, [pc, #732]	; (a404 <_dtoa_r+0x33c>)
    a126:	0022      	movs	r2, r4
    a128:	9319      	str	r3, [sp, #100]	; 0x64
    a12a:	401a      	ands	r2, r3
    a12c:	429a      	cmp	r2, r3
    a12e:	d116      	bne.n	a15e <_dtoa_r+0x96>
    a130:	4bb5      	ldr	r3, [pc, #724]	; (a408 <_dtoa_r+0x340>)
    a132:	9a24      	ldr	r2, [sp, #144]	; 0x90
    a134:	6013      	str	r3, [r2, #0]
    a136:	9b06      	ldr	r3, [sp, #24]
    a138:	2b00      	cmp	r3, #0
    a13a:	d103      	bne.n	a144 <_dtoa_r+0x7c>
    a13c:	0324      	lsls	r4, r4, #12
    a13e:	d101      	bne.n	a144 <_dtoa_r+0x7c>
    a140:	f000 fd91 	bl	ac66 <_dtoa_r+0xb9e>
    a144:	4bb1      	ldr	r3, [pc, #708]	; (a40c <_dtoa_r+0x344>)
    a146:	9a26      	ldr	r2, [sp, #152]	; 0x98
    a148:	930a      	str	r3, [sp, #40]	; 0x28
    a14a:	4bb1      	ldr	r3, [pc, #708]	; (a410 <_dtoa_r+0x348>)
    a14c:	2a00      	cmp	r2, #0
    a14e:	d001      	beq.n	a154 <_dtoa_r+0x8c>
    a150:	f000 fd8f 	bl	ac72 <_dtoa_r+0xbaa>
    a154:	f000 fd8f 	bl	ac76 <_dtoa_r+0xbae>
    a158:	2300      	movs	r3, #0
    a15a:	602b      	str	r3, [r5, #0]
    a15c:	e7e1      	b.n	a122 <_dtoa_r+0x5a>
    a15e:	9e06      	ldr	r6, [sp, #24]
    a160:	9f07      	ldr	r7, [sp, #28]
    a162:	2200      	movs	r2, #0
    a164:	2300      	movs	r3, #0
    a166:	0030      	movs	r0, r6
    a168:	0039      	movs	r1, r7
    a16a:	f7fd fadd 	bl	7728 <__aeabi_dcmpeq>
    a16e:	1e05      	subs	r5, r0, #0
    a170:	d00e      	beq.n	a190 <_dtoa_r+0xc8>
    a172:	2301      	movs	r3, #1
    a174:	9a24      	ldr	r2, [sp, #144]	; 0x90
    a176:	6013      	str	r3, [r2, #0]
    a178:	4ba6      	ldr	r3, [pc, #664]	; (a414 <_dtoa_r+0x34c>)
    a17a:	9a26      	ldr	r2, [sp, #152]	; 0x98
    a17c:	930a      	str	r3, [sp, #40]	; 0x28
    a17e:	2a00      	cmp	r2, #0
    a180:	d101      	bne.n	a186 <_dtoa_r+0xbe>
    a182:	f000 fd78 	bl	ac76 <_dtoa_r+0xbae>
    a186:	4aa4      	ldr	r2, [pc, #656]	; (a418 <_dtoa_r+0x350>)
    a188:	9926      	ldr	r1, [sp, #152]	; 0x98
    a18a:	600a      	str	r2, [r1, #0]
    a18c:	f000 fd73 	bl	ac76 <_dtoa_r+0xbae>
    a190:	ab1a      	add	r3, sp, #104	; 0x68
    a192:	9301      	str	r3, [sp, #4]
    a194:	ab1b      	add	r3, sp, #108	; 0x6c
    a196:	9300      	str	r3, [sp, #0]
    a198:	0032      	movs	r2, r6
    a19a:	003b      	movs	r3, r7
    a19c:	9804      	ldr	r0, [sp, #16]
    a19e:	f001 f823 	bl	b1e8 <__d2b>
    a1a2:	0063      	lsls	r3, r4, #1
    a1a4:	9005      	str	r0, [sp, #20]
    a1a6:	0d5b      	lsrs	r3, r3, #21
    a1a8:	d100      	bne.n	a1ac <_dtoa_r+0xe4>
    a1aa:	e07f      	b.n	a2ac <_dtoa_r+0x1e4>
    a1ac:	033a      	lsls	r2, r7, #12
    a1ae:	4c9b      	ldr	r4, [pc, #620]	; (a41c <_dtoa_r+0x354>)
    a1b0:	0b12      	lsrs	r2, r2, #12
    a1b2:	4314      	orrs	r4, r2
    a1b4:	0021      	movs	r1, r4
    a1b6:	4a9a      	ldr	r2, [pc, #616]	; (a420 <_dtoa_r+0x358>)
    a1b8:	0030      	movs	r0, r6
    a1ba:	9518      	str	r5, [sp, #96]	; 0x60
    a1bc:	189e      	adds	r6, r3, r2
    a1be:	2200      	movs	r2, #0
    a1c0:	4b98      	ldr	r3, [pc, #608]	; (a424 <_dtoa_r+0x35c>)
    a1c2:	f7fe fca3 	bl	8b0c <__aeabi_dsub>
    a1c6:	4a98      	ldr	r2, [pc, #608]	; (a428 <_dtoa_r+0x360>)
    a1c8:	4b98      	ldr	r3, [pc, #608]	; (a42c <_dtoa_r+0x364>)
    a1ca:	f7fe fa1f 	bl	860c <__aeabi_dmul>
    a1ce:	4a98      	ldr	r2, [pc, #608]	; (a430 <_dtoa_r+0x368>)
    a1d0:	4b98      	ldr	r3, [pc, #608]	; (a434 <_dtoa_r+0x36c>)
    a1d2:	f7fd fad7 	bl	7784 <__aeabi_dadd>
    a1d6:	0004      	movs	r4, r0
    a1d8:	0030      	movs	r0, r6
    a1da:	000d      	movs	r5, r1
    a1dc:	f001 f9fa 	bl	b5d4 <__aeabi_i2d>
    a1e0:	4a95      	ldr	r2, [pc, #596]	; (a438 <_dtoa_r+0x370>)
    a1e2:	4b96      	ldr	r3, [pc, #600]	; (a43c <_dtoa_r+0x374>)
    a1e4:	f7fe fa12 	bl	860c <__aeabi_dmul>
    a1e8:	0002      	movs	r2, r0
    a1ea:	000b      	movs	r3, r1
    a1ec:	0020      	movs	r0, r4
    a1ee:	0029      	movs	r1, r5
    a1f0:	f7fd fac8 	bl	7784 <__aeabi_dadd>
    a1f4:	0004      	movs	r4, r0
    a1f6:	000d      	movs	r5, r1
    a1f8:	f7fe ffbe 	bl	9178 <__aeabi_d2iz>
    a1fc:	2200      	movs	r2, #0
    a1fe:	9003      	str	r0, [sp, #12]
    a200:	2300      	movs	r3, #0
    a202:	0020      	movs	r0, r4
    a204:	0029      	movs	r1, r5
    a206:	f7fd fa95 	bl	7734 <__aeabi_dcmplt>
    a20a:	2800      	cmp	r0, #0
    a20c:	d00e      	beq.n	a22c <_dtoa_r+0x164>
    a20e:	9803      	ldr	r0, [sp, #12]
    a210:	f001 f9e0 	bl	b5d4 <__aeabi_i2d>
    a214:	000b      	movs	r3, r1
    a216:	0002      	movs	r2, r0
    a218:	0029      	movs	r1, r5
    a21a:	0020      	movs	r0, r4
    a21c:	f7fd fa84 	bl	7728 <__aeabi_dcmpeq>
    a220:	0003      	movs	r3, r0
    a222:	4258      	negs	r0, r3
    a224:	4158      	adcs	r0, r3
    a226:	9b03      	ldr	r3, [sp, #12]
    a228:	1a1b      	subs	r3, r3, r0
    a22a:	9303      	str	r3, [sp, #12]
    a22c:	2301      	movs	r3, #1
    a22e:	9316      	str	r3, [sp, #88]	; 0x58
    a230:	9b03      	ldr	r3, [sp, #12]
    a232:	2b16      	cmp	r3, #22
    a234:	d80f      	bhi.n	a256 <_dtoa_r+0x18e>
    a236:	4982      	ldr	r1, [pc, #520]	; (a440 <_dtoa_r+0x378>)
    a238:	00db      	lsls	r3, r3, #3
    a23a:	18c9      	adds	r1, r1, r3
    a23c:	6808      	ldr	r0, [r1, #0]
    a23e:	6849      	ldr	r1, [r1, #4]
    a240:	9a06      	ldr	r2, [sp, #24]
    a242:	9b07      	ldr	r3, [sp, #28]
    a244:	f7fd fa8a 	bl	775c <__aeabi_dcmpgt>
    a248:	2800      	cmp	r0, #0
    a24a:	d04b      	beq.n	a2e4 <_dtoa_r+0x21c>
    a24c:	9b03      	ldr	r3, [sp, #12]
    a24e:	3b01      	subs	r3, #1
    a250:	9303      	str	r3, [sp, #12]
    a252:	2300      	movs	r3, #0
    a254:	9316      	str	r3, [sp, #88]	; 0x58
    a256:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    a258:	1b9e      	subs	r6, r3, r6
    a25a:	2300      	movs	r3, #0
    a25c:	930b      	str	r3, [sp, #44]	; 0x2c
    a25e:	0033      	movs	r3, r6
    a260:	3b01      	subs	r3, #1
    a262:	930c      	str	r3, [sp, #48]	; 0x30
    a264:	d504      	bpl.n	a270 <_dtoa_r+0x1a8>
    a266:	2301      	movs	r3, #1
    a268:	1b9b      	subs	r3, r3, r6
    a26a:	930b      	str	r3, [sp, #44]	; 0x2c
    a26c:	2300      	movs	r3, #0
    a26e:	930c      	str	r3, [sp, #48]	; 0x30
    a270:	9b03      	ldr	r3, [sp, #12]
    a272:	2b00      	cmp	r3, #0
    a274:	db38      	blt.n	a2e8 <_dtoa_r+0x220>
    a276:	9a03      	ldr	r2, [sp, #12]
    a278:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    a27a:	4694      	mov	ip, r2
    a27c:	4463      	add	r3, ip
    a27e:	930c      	str	r3, [sp, #48]	; 0x30
    a280:	2300      	movs	r3, #0
    a282:	920f      	str	r2, [sp, #60]	; 0x3c
    a284:	9308      	str	r3, [sp, #32]
    a286:	9b22      	ldr	r3, [sp, #136]	; 0x88
    a288:	2501      	movs	r5, #1
    a28a:	2b09      	cmp	r3, #9
    a28c:	d900      	bls.n	a290 <_dtoa_r+0x1c8>
    a28e:	e091      	b.n	a3b4 <_dtoa_r+0x2ec>
    a290:	2b05      	cmp	r3, #5
    a292:	dd02      	ble.n	a29a <_dtoa_r+0x1d2>
    a294:	2500      	movs	r5, #0
    a296:	3b04      	subs	r3, #4
    a298:	9322      	str	r3, [sp, #136]	; 0x88
    a29a:	9b22      	ldr	r3, [sp, #136]	; 0x88
    a29c:	1e98      	subs	r0, r3, #2
    a29e:	2803      	cmp	r0, #3
    a2a0:	d900      	bls.n	a2a4 <_dtoa_r+0x1dc>
    a2a2:	e091      	b.n	a3c8 <_dtoa_r+0x300>
    a2a4:	f7fd f8b0 	bl	7408 <__gnu_thumb1_case_uqi>
    a2a8:	76298482 	.word	0x76298482
    a2ac:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    a2ae:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    a2b0:	189e      	adds	r6, r3, r2
    a2b2:	4b64      	ldr	r3, [pc, #400]	; (a444 <_dtoa_r+0x37c>)
    a2b4:	18f2      	adds	r2, r6, r3
    a2b6:	2a20      	cmp	r2, #32
    a2b8:	dd0f      	ble.n	a2da <_dtoa_r+0x212>
    a2ba:	4b63      	ldr	r3, [pc, #396]	; (a448 <_dtoa_r+0x380>)
    a2bc:	9806      	ldr	r0, [sp, #24]
    a2be:	18f3      	adds	r3, r6, r3
    a2c0:	40d8      	lsrs	r0, r3
    a2c2:	2340      	movs	r3, #64	; 0x40
    a2c4:	1a9b      	subs	r3, r3, r2
    a2c6:	409c      	lsls	r4, r3
    a2c8:	4320      	orrs	r0, r4
    a2ca:	f7fe ff89 	bl	91e0 <__aeabi_ui2d>
    a2ce:	2301      	movs	r3, #1
    a2d0:	4c5e      	ldr	r4, [pc, #376]	; (a44c <_dtoa_r+0x384>)
    a2d2:	3e01      	subs	r6, #1
    a2d4:	1909      	adds	r1, r1, r4
    a2d6:	9318      	str	r3, [sp, #96]	; 0x60
    a2d8:	e771      	b.n	a1be <_dtoa_r+0xf6>
    a2da:	2320      	movs	r3, #32
    a2dc:	9806      	ldr	r0, [sp, #24]
    a2de:	1a9b      	subs	r3, r3, r2
    a2e0:	4098      	lsls	r0, r3
    a2e2:	e7f2      	b.n	a2ca <_dtoa_r+0x202>
    a2e4:	9016      	str	r0, [sp, #88]	; 0x58
    a2e6:	e7b6      	b.n	a256 <_dtoa_r+0x18e>
    a2e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    a2ea:	9a03      	ldr	r2, [sp, #12]
    a2ec:	1a9b      	subs	r3, r3, r2
    a2ee:	930b      	str	r3, [sp, #44]	; 0x2c
    a2f0:	4253      	negs	r3, r2
    a2f2:	9308      	str	r3, [sp, #32]
    a2f4:	2300      	movs	r3, #0
    a2f6:	930f      	str	r3, [sp, #60]	; 0x3c
    a2f8:	e7c5      	b.n	a286 <_dtoa_r+0x1be>
    a2fa:	2301      	movs	r3, #1
    a2fc:	930e      	str	r3, [sp, #56]	; 0x38
    a2fe:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    a300:	2b00      	cmp	r3, #0
    a302:	dd65      	ble.n	a3d0 <_dtoa_r+0x308>
    a304:	001f      	movs	r7, r3
    a306:	930d      	str	r3, [sp, #52]	; 0x34
    a308:	9a04      	ldr	r2, [sp, #16]
    a30a:	6a54      	ldr	r4, [r2, #36]	; 0x24
    a30c:	2200      	movs	r2, #0
    a30e:	6062      	str	r2, [r4, #4]
    a310:	3204      	adds	r2, #4
    a312:	0011      	movs	r1, r2
    a314:	3114      	adds	r1, #20
    a316:	4299      	cmp	r1, r3
    a318:	d95f      	bls.n	a3da <_dtoa_r+0x312>
    a31a:	6861      	ldr	r1, [r4, #4]
    a31c:	9804      	ldr	r0, [sp, #16]
    a31e:	f000 fcd4 	bl	acca <_Balloc>
    a322:	9b04      	ldr	r3, [sp, #16]
    a324:	6020      	str	r0, [r4, #0]
    a326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    a328:	681b      	ldr	r3, [r3, #0]
    a32a:	930a      	str	r3, [sp, #40]	; 0x28
    a32c:	2f0e      	cmp	r7, #14
    a32e:	d900      	bls.n	a332 <_dtoa_r+0x26a>
    a330:	e105      	b.n	a53e <_dtoa_r+0x476>
    a332:	2d00      	cmp	r5, #0
    a334:	d100      	bne.n	a338 <_dtoa_r+0x270>
    a336:	e102      	b.n	a53e <_dtoa_r+0x476>
    a338:	9b06      	ldr	r3, [sp, #24]
    a33a:	9c07      	ldr	r4, [sp, #28]
    a33c:	9314      	str	r3, [sp, #80]	; 0x50
    a33e:	9415      	str	r4, [sp, #84]	; 0x54
    a340:	9b03      	ldr	r3, [sp, #12]
    a342:	2b00      	cmp	r3, #0
    a344:	dc00      	bgt.n	a348 <_dtoa_r+0x280>
    a346:	e085      	b.n	a454 <_dtoa_r+0x38c>
    a348:	001a      	movs	r2, r3
    a34a:	210f      	movs	r1, #15
    a34c:	4b3c      	ldr	r3, [pc, #240]	; (a440 <_dtoa_r+0x378>)
    a34e:	400a      	ands	r2, r1
    a350:	00d2      	lsls	r2, r2, #3
    a352:	189b      	adds	r3, r3, r2
    a354:	685c      	ldr	r4, [r3, #4]
    a356:	681b      	ldr	r3, [r3, #0]
    a358:	9310      	str	r3, [sp, #64]	; 0x40
    a35a:	9411      	str	r4, [sp, #68]	; 0x44
    a35c:	9b03      	ldr	r3, [sp, #12]
    a35e:	2402      	movs	r4, #2
    a360:	111d      	asrs	r5, r3, #4
    a362:	06eb      	lsls	r3, r5, #27
    a364:	d50a      	bpl.n	a37c <_dtoa_r+0x2b4>
    a366:	4b3a      	ldr	r3, [pc, #232]	; (a450 <_dtoa_r+0x388>)
    a368:	400d      	ands	r5, r1
    a36a:	6a1a      	ldr	r2, [r3, #32]
    a36c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    a36e:	9814      	ldr	r0, [sp, #80]	; 0x50
    a370:	9915      	ldr	r1, [sp, #84]	; 0x54
    a372:	f7fd fd17 	bl	7da4 <__aeabi_ddiv>
    a376:	9006      	str	r0, [sp, #24]
    a378:	9107      	str	r1, [sp, #28]
    a37a:	3401      	adds	r4, #1
    a37c:	4e34      	ldr	r6, [pc, #208]	; (a450 <_dtoa_r+0x388>)
    a37e:	2d00      	cmp	r5, #0
    a380:	d130      	bne.n	a3e4 <_dtoa_r+0x31c>
    a382:	9a10      	ldr	r2, [sp, #64]	; 0x40
    a384:	9b11      	ldr	r3, [sp, #68]	; 0x44
    a386:	9806      	ldr	r0, [sp, #24]
    a388:	9907      	ldr	r1, [sp, #28]
    a38a:	f7fd fd0b 	bl	7da4 <__aeabi_ddiv>
    a38e:	9006      	str	r0, [sp, #24]
    a390:	9107      	str	r1, [sp, #28]
    a392:	e07a      	b.n	a48a <_dtoa_r+0x3c2>
    a394:	2301      	movs	r3, #1
    a396:	9a23      	ldr	r2, [sp, #140]	; 0x8c
    a398:	930e      	str	r3, [sp, #56]	; 0x38
    a39a:	4694      	mov	ip, r2
    a39c:	9b03      	ldr	r3, [sp, #12]
    a39e:	4463      	add	r3, ip
    a3a0:	1c5f      	adds	r7, r3, #1
    a3a2:	930d      	str	r3, [sp, #52]	; 0x34
    a3a4:	1e3b      	subs	r3, r7, #0
    a3a6:	dcaf      	bgt.n	a308 <_dtoa_r+0x240>
    a3a8:	2301      	movs	r3, #1
    a3aa:	e7ad      	b.n	a308 <_dtoa_r+0x240>
    a3ac:	2300      	movs	r3, #0
    a3ae:	e7a5      	b.n	a2fc <_dtoa_r+0x234>
    a3b0:	2300      	movs	r3, #0
    a3b2:	e7f0      	b.n	a396 <_dtoa_r+0x2ce>
    a3b4:	2300      	movs	r3, #0
    a3b6:	950e      	str	r5, [sp, #56]	; 0x38
    a3b8:	9322      	str	r3, [sp, #136]	; 0x88
    a3ba:	3b01      	subs	r3, #1
    a3bc:	2200      	movs	r2, #0
    a3be:	930d      	str	r3, [sp, #52]	; 0x34
    a3c0:	001f      	movs	r7, r3
    a3c2:	3313      	adds	r3, #19
    a3c4:	9223      	str	r2, [sp, #140]	; 0x8c
    a3c6:	e79f      	b.n	a308 <_dtoa_r+0x240>
    a3c8:	2301      	movs	r3, #1
    a3ca:	930e      	str	r3, [sp, #56]	; 0x38
    a3cc:	3b02      	subs	r3, #2
    a3ce:	e7f5      	b.n	a3bc <_dtoa_r+0x2f4>
    a3d0:	2301      	movs	r3, #1
    a3d2:	930d      	str	r3, [sp, #52]	; 0x34
    a3d4:	001f      	movs	r7, r3
    a3d6:	001a      	movs	r2, r3
    a3d8:	e7f4      	b.n	a3c4 <_dtoa_r+0x2fc>
    a3da:	6861      	ldr	r1, [r4, #4]
    a3dc:	0052      	lsls	r2, r2, #1
    a3de:	3101      	adds	r1, #1
    a3e0:	6061      	str	r1, [r4, #4]
    a3e2:	e796      	b.n	a312 <_dtoa_r+0x24a>
    a3e4:	2301      	movs	r3, #1
    a3e6:	421d      	tst	r5, r3
    a3e8:	d008      	beq.n	a3fc <_dtoa_r+0x334>
    a3ea:	9810      	ldr	r0, [sp, #64]	; 0x40
    a3ec:	9911      	ldr	r1, [sp, #68]	; 0x44
    a3ee:	18e4      	adds	r4, r4, r3
    a3f0:	6832      	ldr	r2, [r6, #0]
    a3f2:	6873      	ldr	r3, [r6, #4]
    a3f4:	f7fe f90a 	bl	860c <__aeabi_dmul>
    a3f8:	9010      	str	r0, [sp, #64]	; 0x40
    a3fa:	9111      	str	r1, [sp, #68]	; 0x44
    a3fc:	106d      	asrs	r5, r5, #1
    a3fe:	3608      	adds	r6, #8
    a400:	e7bd      	b.n	a37e <_dtoa_r+0x2b6>
    a402:	46c0      	nop			; (mov r8, r8)
    a404:	7ff00000 	.word	0x7ff00000
    a408:	0000270f 	.word	0x0000270f
    a40c:	0000bf64 	.word	0x0000bf64
    a410:	0000bf67 	.word	0x0000bf67
    a414:	0000b807 	.word	0x0000b807
    a418:	0000b808 	.word	0x0000b808
    a41c:	3ff00000 	.word	0x3ff00000
    a420:	fffffc01 	.word	0xfffffc01
    a424:	3ff80000 	.word	0x3ff80000
    a428:	636f4361 	.word	0x636f4361
    a42c:	3fd287a7 	.word	0x3fd287a7
    a430:	8b60c8b3 	.word	0x8b60c8b3
    a434:	3fc68a28 	.word	0x3fc68a28
    a438:	509f79fb 	.word	0x509f79fb
    a43c:	3fd34413 	.word	0x3fd34413
    a440:	0000bf90 	.word	0x0000bf90
    a444:	00000432 	.word	0x00000432
    a448:	00000412 	.word	0x00000412
    a44c:	fe100000 	.word	0xfe100000
    a450:	0000bf68 	.word	0x0000bf68
    a454:	9b03      	ldr	r3, [sp, #12]
    a456:	2402      	movs	r4, #2
    a458:	2b00      	cmp	r3, #0
    a45a:	d016      	beq.n	a48a <_dtoa_r+0x3c2>
    a45c:	9814      	ldr	r0, [sp, #80]	; 0x50
    a45e:	9915      	ldr	r1, [sp, #84]	; 0x54
    a460:	425d      	negs	r5, r3
    a462:	230f      	movs	r3, #15
    a464:	4aca      	ldr	r2, [pc, #808]	; (a790 <_dtoa_r+0x6c8>)
    a466:	402b      	ands	r3, r5
    a468:	00db      	lsls	r3, r3, #3
    a46a:	18d3      	adds	r3, r2, r3
    a46c:	681a      	ldr	r2, [r3, #0]
    a46e:	685b      	ldr	r3, [r3, #4]
    a470:	f7fe f8cc 	bl	860c <__aeabi_dmul>
    a474:	2300      	movs	r3, #0
    a476:	9006      	str	r0, [sp, #24]
    a478:	9107      	str	r1, [sp, #28]
    a47a:	4ec6      	ldr	r6, [pc, #792]	; (a794 <_dtoa_r+0x6cc>)
    a47c:	112d      	asrs	r5, r5, #4
    a47e:	2d00      	cmp	r5, #0
    a480:	d000      	beq.n	a484 <_dtoa_r+0x3bc>
    a482:	e08c      	b.n	a59e <_dtoa_r+0x4d6>
    a484:	2b00      	cmp	r3, #0
    a486:	d000      	beq.n	a48a <_dtoa_r+0x3c2>
    a488:	e781      	b.n	a38e <_dtoa_r+0x2c6>
    a48a:	9b16      	ldr	r3, [sp, #88]	; 0x58
    a48c:	2b00      	cmp	r3, #0
    a48e:	d100      	bne.n	a492 <_dtoa_r+0x3ca>
    a490:	e091      	b.n	a5b6 <_dtoa_r+0x4ee>
    a492:	9a06      	ldr	r2, [sp, #24]
    a494:	9b07      	ldr	r3, [sp, #28]
    a496:	9210      	str	r2, [sp, #64]	; 0x40
    a498:	9311      	str	r3, [sp, #68]	; 0x44
    a49a:	9810      	ldr	r0, [sp, #64]	; 0x40
    a49c:	9911      	ldr	r1, [sp, #68]	; 0x44
    a49e:	2200      	movs	r2, #0
    a4a0:	4bbd      	ldr	r3, [pc, #756]	; (a798 <_dtoa_r+0x6d0>)
    a4a2:	f7fd f947 	bl	7734 <__aeabi_dcmplt>
    a4a6:	2800      	cmp	r0, #0
    a4a8:	d100      	bne.n	a4ac <_dtoa_r+0x3e4>
    a4aa:	e084      	b.n	a5b6 <_dtoa_r+0x4ee>
    a4ac:	2f00      	cmp	r7, #0
    a4ae:	d100      	bne.n	a4b2 <_dtoa_r+0x3ea>
    a4b0:	e081      	b.n	a5b6 <_dtoa_r+0x4ee>
    a4b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    a4b4:	2b00      	cmp	r3, #0
    a4b6:	dd3e      	ble.n	a536 <_dtoa_r+0x46e>
    a4b8:	9810      	ldr	r0, [sp, #64]	; 0x40
    a4ba:	9911      	ldr	r1, [sp, #68]	; 0x44
    a4bc:	9b03      	ldr	r3, [sp, #12]
    a4be:	2200      	movs	r2, #0
    a4c0:	1e5e      	subs	r6, r3, #1
    a4c2:	4bb6      	ldr	r3, [pc, #728]	; (a79c <_dtoa_r+0x6d4>)
    a4c4:	f7fe f8a2 	bl	860c <__aeabi_dmul>
    a4c8:	9006      	str	r0, [sp, #24]
    a4ca:	9107      	str	r1, [sp, #28]
    a4cc:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    a4ce:	3401      	adds	r4, #1
    a4d0:	0020      	movs	r0, r4
    a4d2:	f001 f87f 	bl	b5d4 <__aeabi_i2d>
    a4d6:	9a06      	ldr	r2, [sp, #24]
    a4d8:	9b07      	ldr	r3, [sp, #28]
    a4da:	f7fe f897 	bl	860c <__aeabi_dmul>
    a4de:	2200      	movs	r2, #0
    a4e0:	4baf      	ldr	r3, [pc, #700]	; (a7a0 <_dtoa_r+0x6d8>)
    a4e2:	f7fd f94f 	bl	7784 <__aeabi_dadd>
    a4e6:	9012      	str	r0, [sp, #72]	; 0x48
    a4e8:	9113      	str	r1, [sp, #76]	; 0x4c
    a4ea:	9b12      	ldr	r3, [sp, #72]	; 0x48
    a4ec:	9c13      	ldr	r4, [sp, #76]	; 0x4c
    a4ee:	4aad      	ldr	r2, [pc, #692]	; (a7a4 <_dtoa_r+0x6dc>)
    a4f0:	9310      	str	r3, [sp, #64]	; 0x40
    a4f2:	9411      	str	r4, [sp, #68]	; 0x44
    a4f4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    a4f6:	189c      	adds	r4, r3, r2
    a4f8:	9411      	str	r4, [sp, #68]	; 0x44
    a4fa:	2d00      	cmp	r5, #0
    a4fc:	d15e      	bne.n	a5bc <_dtoa_r+0x4f4>
    a4fe:	9806      	ldr	r0, [sp, #24]
    a500:	9907      	ldr	r1, [sp, #28]
    a502:	2200      	movs	r2, #0
    a504:	4ba8      	ldr	r3, [pc, #672]	; (a7a8 <_dtoa_r+0x6e0>)
    a506:	f7fe fb01 	bl	8b0c <__aeabi_dsub>
    a50a:	9a10      	ldr	r2, [sp, #64]	; 0x40
    a50c:	0023      	movs	r3, r4
    a50e:	9006      	str	r0, [sp, #24]
    a510:	9107      	str	r1, [sp, #28]
    a512:	f7fd f923 	bl	775c <__aeabi_dcmpgt>
    a516:	2800      	cmp	r0, #0
    a518:	d000      	beq.n	a51c <_dtoa_r+0x454>
    a51a:	e301      	b.n	ab20 <_dtoa_r+0xa58>
    a51c:	48a3      	ldr	r0, [pc, #652]	; (a7ac <_dtoa_r+0x6e4>)
    a51e:	9913      	ldr	r1, [sp, #76]	; 0x4c
    a520:	4684      	mov	ip, r0
    a522:	4461      	add	r1, ip
    a524:	000b      	movs	r3, r1
    a526:	9806      	ldr	r0, [sp, #24]
    a528:	9907      	ldr	r1, [sp, #28]
    a52a:	9a10      	ldr	r2, [sp, #64]	; 0x40
    a52c:	f7fd f902 	bl	7734 <__aeabi_dcmplt>
    a530:	2800      	cmp	r0, #0
    a532:	d000      	beq.n	a536 <_dtoa_r+0x46e>
    a534:	e2e8      	b.n	ab08 <_dtoa_r+0xa40>
    a536:	9b14      	ldr	r3, [sp, #80]	; 0x50
    a538:	9c15      	ldr	r4, [sp, #84]	; 0x54
    a53a:	9306      	str	r3, [sp, #24]
    a53c:	9407      	str	r4, [sp, #28]
    a53e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    a540:	2b00      	cmp	r3, #0
    a542:	da00      	bge.n	a546 <_dtoa_r+0x47e>
    a544:	e157      	b.n	a7f6 <_dtoa_r+0x72e>
    a546:	9a03      	ldr	r2, [sp, #12]
    a548:	2a0e      	cmp	r2, #14
    a54a:	dd00      	ble.n	a54e <_dtoa_r+0x486>
    a54c:	e153      	b.n	a7f6 <_dtoa_r+0x72e>
    a54e:	4b90      	ldr	r3, [pc, #576]	; (a790 <_dtoa_r+0x6c8>)
    a550:	00d2      	lsls	r2, r2, #3
    a552:	189b      	adds	r3, r3, r2
    a554:	685c      	ldr	r4, [r3, #4]
    a556:	681b      	ldr	r3, [r3, #0]
    a558:	9308      	str	r3, [sp, #32]
    a55a:	9409      	str	r4, [sp, #36]	; 0x24
    a55c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    a55e:	2b00      	cmp	r3, #0
    a560:	db00      	blt.n	a564 <_dtoa_r+0x49c>
    a562:	e0ce      	b.n	a702 <_dtoa_r+0x63a>
    a564:	2f00      	cmp	r7, #0
    a566:	dd00      	ble.n	a56a <_dtoa_r+0x4a2>
    a568:	e0cb      	b.n	a702 <_dtoa_r+0x63a>
    a56a:	d000      	beq.n	a56e <_dtoa_r+0x4a6>
    a56c:	e2cf      	b.n	ab0e <_dtoa_r+0xa46>
    a56e:	9808      	ldr	r0, [sp, #32]
    a570:	9909      	ldr	r1, [sp, #36]	; 0x24
    a572:	2200      	movs	r2, #0
    a574:	4b8c      	ldr	r3, [pc, #560]	; (a7a8 <_dtoa_r+0x6e0>)
    a576:	f7fe f849 	bl	860c <__aeabi_dmul>
    a57a:	9a06      	ldr	r2, [sp, #24]
    a57c:	9b07      	ldr	r3, [sp, #28]
    a57e:	f7fd f8f7 	bl	7770 <__aeabi_dcmpge>
    a582:	003e      	movs	r6, r7
    a584:	9708      	str	r7, [sp, #32]
    a586:	2800      	cmp	r0, #0
    a588:	d000      	beq.n	a58c <_dtoa_r+0x4c4>
    a58a:	e2a4      	b.n	aad6 <_dtoa_r+0xa0e>
    a58c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    a58e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    a590:	1c5d      	adds	r5, r3, #1
    a592:	2331      	movs	r3, #49	; 0x31
    a594:	7013      	strb	r3, [r2, #0]
    a596:	9b03      	ldr	r3, [sp, #12]
    a598:	3301      	adds	r3, #1
    a59a:	9303      	str	r3, [sp, #12]
    a59c:	e29f      	b.n	aade <_dtoa_r+0xa16>
    a59e:	2201      	movs	r2, #1
    a5a0:	4215      	tst	r5, r2
    a5a2:	d005      	beq.n	a5b0 <_dtoa_r+0x4e8>
    a5a4:	18a4      	adds	r4, r4, r2
    a5a6:	6832      	ldr	r2, [r6, #0]
    a5a8:	6873      	ldr	r3, [r6, #4]
    a5aa:	f7fe f82f 	bl	860c <__aeabi_dmul>
    a5ae:	2301      	movs	r3, #1
    a5b0:	106d      	asrs	r5, r5, #1
    a5b2:	3608      	adds	r6, #8
    a5b4:	e763      	b.n	a47e <_dtoa_r+0x3b6>
    a5b6:	9e03      	ldr	r6, [sp, #12]
    a5b8:	003d      	movs	r5, r7
    a5ba:	e789      	b.n	a4d0 <_dtoa_r+0x408>
    a5bc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    a5be:	1e69      	subs	r1, r5, #1
    a5c0:	1952      	adds	r2, r2, r5
    a5c2:	9217      	str	r2, [sp, #92]	; 0x5c
    a5c4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    a5c6:	4b72      	ldr	r3, [pc, #456]	; (a790 <_dtoa_r+0x6c8>)
    a5c8:	00c9      	lsls	r1, r1, #3
    a5ca:	2a00      	cmp	r2, #0
    a5cc:	d04a      	beq.n	a664 <_dtoa_r+0x59c>
    a5ce:	185b      	adds	r3, r3, r1
    a5d0:	681a      	ldr	r2, [r3, #0]
    a5d2:	685b      	ldr	r3, [r3, #4]
    a5d4:	2000      	movs	r0, #0
    a5d6:	4976      	ldr	r1, [pc, #472]	; (a7b0 <_dtoa_r+0x6e8>)
    a5d8:	f7fd fbe4 	bl	7da4 <__aeabi_ddiv>
    a5dc:	9a10      	ldr	r2, [sp, #64]	; 0x40
    a5de:	9b11      	ldr	r3, [sp, #68]	; 0x44
    a5e0:	f7fe fa94 	bl	8b0c <__aeabi_dsub>
    a5e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    a5e6:	9010      	str	r0, [sp, #64]	; 0x40
    a5e8:	9111      	str	r1, [sp, #68]	; 0x44
    a5ea:	9312      	str	r3, [sp, #72]	; 0x48
    a5ec:	9806      	ldr	r0, [sp, #24]
    a5ee:	9907      	ldr	r1, [sp, #28]
    a5f0:	f7fe fdc2 	bl	9178 <__aeabi_d2iz>
    a5f4:	0004      	movs	r4, r0
    a5f6:	f000 ffed 	bl	b5d4 <__aeabi_i2d>
    a5fa:	0002      	movs	r2, r0
    a5fc:	000b      	movs	r3, r1
    a5fe:	9806      	ldr	r0, [sp, #24]
    a600:	9907      	ldr	r1, [sp, #28]
    a602:	f7fe fa83 	bl	8b0c <__aeabi_dsub>
    a606:	9b12      	ldr	r3, [sp, #72]	; 0x48
    a608:	3430      	adds	r4, #48	; 0x30
    a60a:	1c5d      	adds	r5, r3, #1
    a60c:	701c      	strb	r4, [r3, #0]
    a60e:	9a10      	ldr	r2, [sp, #64]	; 0x40
    a610:	9b11      	ldr	r3, [sp, #68]	; 0x44
    a612:	9006      	str	r0, [sp, #24]
    a614:	9107      	str	r1, [sp, #28]
    a616:	f7fd f88d 	bl	7734 <__aeabi_dcmplt>
    a61a:	2800      	cmp	r0, #0
    a61c:	d165      	bne.n	a6ea <_dtoa_r+0x622>
    a61e:	9a06      	ldr	r2, [sp, #24]
    a620:	9b07      	ldr	r3, [sp, #28]
    a622:	2000      	movs	r0, #0
    a624:	495c      	ldr	r1, [pc, #368]	; (a798 <_dtoa_r+0x6d0>)
    a626:	f7fe fa71 	bl	8b0c <__aeabi_dsub>
    a62a:	9a10      	ldr	r2, [sp, #64]	; 0x40
    a62c:	9b11      	ldr	r3, [sp, #68]	; 0x44
    a62e:	f7fd f881 	bl	7734 <__aeabi_dcmplt>
    a632:	2800      	cmp	r0, #0
    a634:	d000      	beq.n	a638 <_dtoa_r+0x570>
    a636:	e0be      	b.n	a7b6 <_dtoa_r+0x6ee>
    a638:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    a63a:	429d      	cmp	r5, r3
    a63c:	d100      	bne.n	a640 <_dtoa_r+0x578>
    a63e:	e77a      	b.n	a536 <_dtoa_r+0x46e>
    a640:	9810      	ldr	r0, [sp, #64]	; 0x40
    a642:	9911      	ldr	r1, [sp, #68]	; 0x44
    a644:	2200      	movs	r2, #0
    a646:	4b55      	ldr	r3, [pc, #340]	; (a79c <_dtoa_r+0x6d4>)
    a648:	f7fd ffe0 	bl	860c <__aeabi_dmul>
    a64c:	2200      	movs	r2, #0
    a64e:	9010      	str	r0, [sp, #64]	; 0x40
    a650:	9111      	str	r1, [sp, #68]	; 0x44
    a652:	9806      	ldr	r0, [sp, #24]
    a654:	9907      	ldr	r1, [sp, #28]
    a656:	4b51      	ldr	r3, [pc, #324]	; (a79c <_dtoa_r+0x6d4>)
    a658:	f7fd ffd8 	bl	860c <__aeabi_dmul>
    a65c:	9512      	str	r5, [sp, #72]	; 0x48
    a65e:	9006      	str	r0, [sp, #24]
    a660:	9107      	str	r1, [sp, #28]
    a662:	e7c3      	b.n	a5ec <_dtoa_r+0x524>
    a664:	1859      	adds	r1, r3, r1
    a666:	6808      	ldr	r0, [r1, #0]
    a668:	6849      	ldr	r1, [r1, #4]
    a66a:	9a10      	ldr	r2, [sp, #64]	; 0x40
    a66c:	9b11      	ldr	r3, [sp, #68]	; 0x44
    a66e:	f7fd ffcd 	bl	860c <__aeabi_dmul>
    a672:	9010      	str	r0, [sp, #64]	; 0x40
    a674:	9111      	str	r1, [sp, #68]	; 0x44
    a676:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    a678:	9d17      	ldr	r5, [sp, #92]	; 0x5c
    a67a:	9806      	ldr	r0, [sp, #24]
    a67c:	9907      	ldr	r1, [sp, #28]
    a67e:	f7fe fd7b 	bl	9178 <__aeabi_d2iz>
    a682:	9012      	str	r0, [sp, #72]	; 0x48
    a684:	f000 ffa6 	bl	b5d4 <__aeabi_i2d>
    a688:	0002      	movs	r2, r0
    a68a:	000b      	movs	r3, r1
    a68c:	9806      	ldr	r0, [sp, #24]
    a68e:	9907      	ldr	r1, [sp, #28]
    a690:	f7fe fa3c 	bl	8b0c <__aeabi_dsub>
    a694:	9b12      	ldr	r3, [sp, #72]	; 0x48
    a696:	9006      	str	r0, [sp, #24]
    a698:	9107      	str	r1, [sp, #28]
    a69a:	3330      	adds	r3, #48	; 0x30
    a69c:	7023      	strb	r3, [r4, #0]
    a69e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    a6a0:	3401      	adds	r4, #1
    a6a2:	2200      	movs	r2, #0
    a6a4:	42a3      	cmp	r3, r4
    a6a6:	d124      	bne.n	a6f2 <_dtoa_r+0x62a>
    a6a8:	4b41      	ldr	r3, [pc, #260]	; (a7b0 <_dtoa_r+0x6e8>)
    a6aa:	9810      	ldr	r0, [sp, #64]	; 0x40
    a6ac:	9911      	ldr	r1, [sp, #68]	; 0x44
    a6ae:	f7fd f869 	bl	7784 <__aeabi_dadd>
    a6b2:	0002      	movs	r2, r0
    a6b4:	000b      	movs	r3, r1
    a6b6:	9806      	ldr	r0, [sp, #24]
    a6b8:	9907      	ldr	r1, [sp, #28]
    a6ba:	f7fd f84f 	bl	775c <__aeabi_dcmpgt>
    a6be:	2800      	cmp	r0, #0
    a6c0:	d000      	beq.n	a6c4 <_dtoa_r+0x5fc>
    a6c2:	e078      	b.n	a7b6 <_dtoa_r+0x6ee>
    a6c4:	9a10      	ldr	r2, [sp, #64]	; 0x40
    a6c6:	9b11      	ldr	r3, [sp, #68]	; 0x44
    a6c8:	2000      	movs	r0, #0
    a6ca:	4939      	ldr	r1, [pc, #228]	; (a7b0 <_dtoa_r+0x6e8>)
    a6cc:	f7fe fa1e 	bl	8b0c <__aeabi_dsub>
    a6d0:	0002      	movs	r2, r0
    a6d2:	000b      	movs	r3, r1
    a6d4:	9806      	ldr	r0, [sp, #24]
    a6d6:	9907      	ldr	r1, [sp, #28]
    a6d8:	f7fd f82c 	bl	7734 <__aeabi_dcmplt>
    a6dc:	2800      	cmp	r0, #0
    a6de:	d100      	bne.n	a6e2 <_dtoa_r+0x61a>
    a6e0:	e729      	b.n	a536 <_dtoa_r+0x46e>
    a6e2:	1e6b      	subs	r3, r5, #1
    a6e4:	781a      	ldrb	r2, [r3, #0]
    a6e6:	2a30      	cmp	r2, #48	; 0x30
    a6e8:	d001      	beq.n	a6ee <_dtoa_r+0x626>
    a6ea:	9603      	str	r6, [sp, #12]
    a6ec:	e03f      	b.n	a76e <_dtoa_r+0x6a6>
    a6ee:	001d      	movs	r5, r3
    a6f0:	e7f7      	b.n	a6e2 <_dtoa_r+0x61a>
    a6f2:	9806      	ldr	r0, [sp, #24]
    a6f4:	9907      	ldr	r1, [sp, #28]
    a6f6:	4b29      	ldr	r3, [pc, #164]	; (a79c <_dtoa_r+0x6d4>)
    a6f8:	f7fd ff88 	bl	860c <__aeabi_dmul>
    a6fc:	9006      	str	r0, [sp, #24]
    a6fe:	9107      	str	r1, [sp, #28]
    a700:	e7bb      	b.n	a67a <_dtoa_r+0x5b2>
    a702:	9e0a      	ldr	r6, [sp, #40]	; 0x28
    a704:	9a08      	ldr	r2, [sp, #32]
    a706:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a708:	9806      	ldr	r0, [sp, #24]
    a70a:	9907      	ldr	r1, [sp, #28]
    a70c:	f7fd fb4a 	bl	7da4 <__aeabi_ddiv>
    a710:	f7fe fd32 	bl	9178 <__aeabi_d2iz>
    a714:	0004      	movs	r4, r0
    a716:	f000 ff5d 	bl	b5d4 <__aeabi_i2d>
    a71a:	9a08      	ldr	r2, [sp, #32]
    a71c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a71e:	f7fd ff75 	bl	860c <__aeabi_dmul>
    a722:	000b      	movs	r3, r1
    a724:	0002      	movs	r2, r0
    a726:	9806      	ldr	r0, [sp, #24]
    a728:	9907      	ldr	r1, [sp, #28]
    a72a:	f7fe f9ef 	bl	8b0c <__aeabi_dsub>
    a72e:	0023      	movs	r3, r4
    a730:	3330      	adds	r3, #48	; 0x30
    a732:	7033      	strb	r3, [r6, #0]
    a734:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    a736:	1c75      	adds	r5, r6, #1
    a738:	1aeb      	subs	r3, r5, r3
    a73a:	429f      	cmp	r7, r3
    a73c:	d14c      	bne.n	a7d8 <_dtoa_r+0x710>
    a73e:	0002      	movs	r2, r0
    a740:	000b      	movs	r3, r1
    a742:	f7fd f81f 	bl	7784 <__aeabi_dadd>
    a746:	0006      	movs	r6, r0
    a748:	000f      	movs	r7, r1
    a74a:	0002      	movs	r2, r0
    a74c:	000b      	movs	r3, r1
    a74e:	9808      	ldr	r0, [sp, #32]
    a750:	9909      	ldr	r1, [sp, #36]	; 0x24
    a752:	f7fc ffef 	bl	7734 <__aeabi_dcmplt>
    a756:	2800      	cmp	r0, #0
    a758:	d12c      	bne.n	a7b4 <_dtoa_r+0x6ec>
    a75a:	9808      	ldr	r0, [sp, #32]
    a75c:	9909      	ldr	r1, [sp, #36]	; 0x24
    a75e:	0032      	movs	r2, r6
    a760:	003b      	movs	r3, r7
    a762:	f7fc ffe1 	bl	7728 <__aeabi_dcmpeq>
    a766:	2800      	cmp	r0, #0
    a768:	d001      	beq.n	a76e <_dtoa_r+0x6a6>
    a76a:	07e3      	lsls	r3, r4, #31
    a76c:	d422      	bmi.n	a7b4 <_dtoa_r+0x6ec>
    a76e:	9905      	ldr	r1, [sp, #20]
    a770:	9804      	ldr	r0, [sp, #16]
    a772:	f000 fae2 	bl	ad3a <_Bfree>
    a776:	2300      	movs	r3, #0
    a778:	702b      	strb	r3, [r5, #0]
    a77a:	9b03      	ldr	r3, [sp, #12]
    a77c:	9a24      	ldr	r2, [sp, #144]	; 0x90
    a77e:	3301      	adds	r3, #1
    a780:	6013      	str	r3, [r2, #0]
    a782:	9b26      	ldr	r3, [sp, #152]	; 0x98
    a784:	2b00      	cmp	r3, #0
    a786:	d100      	bne.n	a78a <_dtoa_r+0x6c2>
    a788:	e275      	b.n	ac76 <_dtoa_r+0xbae>
    a78a:	601d      	str	r5, [r3, #0]
    a78c:	e273      	b.n	ac76 <_dtoa_r+0xbae>
    a78e:	46c0      	nop			; (mov r8, r8)
    a790:	0000bf90 	.word	0x0000bf90
    a794:	0000bf68 	.word	0x0000bf68
    a798:	3ff00000 	.word	0x3ff00000
    a79c:	40240000 	.word	0x40240000
    a7a0:	401c0000 	.word	0x401c0000
    a7a4:	fcc00000 	.word	0xfcc00000
    a7a8:	40140000 	.word	0x40140000
    a7ac:	7cc00000 	.word	0x7cc00000
    a7b0:	3fe00000 	.word	0x3fe00000
    a7b4:	9e03      	ldr	r6, [sp, #12]
    a7b6:	1e6b      	subs	r3, r5, #1
    a7b8:	781a      	ldrb	r2, [r3, #0]
    a7ba:	2a39      	cmp	r2, #57	; 0x39
    a7bc:	d106      	bne.n	a7cc <_dtoa_r+0x704>
    a7be:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    a7c0:	429a      	cmp	r2, r3
    a7c2:	d107      	bne.n	a7d4 <_dtoa_r+0x70c>
    a7c4:	2330      	movs	r3, #48	; 0x30
    a7c6:	7013      	strb	r3, [r2, #0]
    a7c8:	0013      	movs	r3, r2
    a7ca:	3601      	adds	r6, #1
    a7cc:	781a      	ldrb	r2, [r3, #0]
    a7ce:	3201      	adds	r2, #1
    a7d0:	701a      	strb	r2, [r3, #0]
    a7d2:	e78a      	b.n	a6ea <_dtoa_r+0x622>
    a7d4:	001d      	movs	r5, r3
    a7d6:	e7ee      	b.n	a7b6 <_dtoa_r+0x6ee>
    a7d8:	2200      	movs	r2, #0
    a7da:	4bcf      	ldr	r3, [pc, #828]	; (ab18 <_dtoa_r+0xa50>)
    a7dc:	f7fd ff16 	bl	860c <__aeabi_dmul>
    a7e0:	2200      	movs	r2, #0
    a7e2:	2300      	movs	r3, #0
    a7e4:	9006      	str	r0, [sp, #24]
    a7e6:	9107      	str	r1, [sp, #28]
    a7e8:	002e      	movs	r6, r5
    a7ea:	f7fc ff9d 	bl	7728 <__aeabi_dcmpeq>
    a7ee:	2800      	cmp	r0, #0
    a7f0:	d100      	bne.n	a7f4 <_dtoa_r+0x72c>
    a7f2:	e787      	b.n	a704 <_dtoa_r+0x63c>
    a7f4:	e7bb      	b.n	a76e <_dtoa_r+0x6a6>
    a7f6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    a7f8:	2a00      	cmp	r2, #0
    a7fa:	d100      	bne.n	a7fe <_dtoa_r+0x736>
    a7fc:	e087      	b.n	a90e <_dtoa_r+0x846>
    a7fe:	9a22      	ldr	r2, [sp, #136]	; 0x88
    a800:	2a01      	cmp	r2, #1
    a802:	dc6e      	bgt.n	a8e2 <_dtoa_r+0x81a>
    a804:	9a18      	ldr	r2, [sp, #96]	; 0x60
    a806:	2a00      	cmp	r2, #0
    a808:	d067      	beq.n	a8da <_dtoa_r+0x812>
    a80a:	4ac4      	ldr	r2, [pc, #784]	; (ab1c <_dtoa_r+0xa54>)
    a80c:	189b      	adds	r3, r3, r2
    a80e:	9d08      	ldr	r5, [sp, #32]
    a810:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    a812:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    a814:	2101      	movs	r1, #1
    a816:	18d2      	adds	r2, r2, r3
    a818:	920b      	str	r2, [sp, #44]	; 0x2c
    a81a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    a81c:	9804      	ldr	r0, [sp, #16]
    a81e:	18d3      	adds	r3, r2, r3
    a820:	930c      	str	r3, [sp, #48]	; 0x30
    a822:	f000 fb28 	bl	ae76 <__i2b>
    a826:	0006      	movs	r6, r0
    a828:	2c00      	cmp	r4, #0
    a82a:	dd0e      	ble.n	a84a <_dtoa_r+0x782>
    a82c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    a82e:	2b00      	cmp	r3, #0
    a830:	dd0b      	ble.n	a84a <_dtoa_r+0x782>
    a832:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    a834:	0023      	movs	r3, r4
    a836:	4294      	cmp	r4, r2
    a838:	dd00      	ble.n	a83c <_dtoa_r+0x774>
    a83a:	0013      	movs	r3, r2
    a83c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    a83e:	1ae4      	subs	r4, r4, r3
    a840:	1ad2      	subs	r2, r2, r3
    a842:	920b      	str	r2, [sp, #44]	; 0x2c
    a844:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    a846:	1ad3      	subs	r3, r2, r3
    a848:	930c      	str	r3, [sp, #48]	; 0x30
    a84a:	9b08      	ldr	r3, [sp, #32]
    a84c:	2b00      	cmp	r3, #0
    a84e:	d01e      	beq.n	a88e <_dtoa_r+0x7c6>
    a850:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    a852:	2b00      	cmp	r3, #0
    a854:	d05f      	beq.n	a916 <_dtoa_r+0x84e>
    a856:	2d00      	cmp	r5, #0
    a858:	dd11      	ble.n	a87e <_dtoa_r+0x7b6>
    a85a:	0031      	movs	r1, r6
    a85c:	002a      	movs	r2, r5
    a85e:	9804      	ldr	r0, [sp, #16]
    a860:	f000 fba2 	bl	afa8 <__pow5mult>
    a864:	9a05      	ldr	r2, [sp, #20]
    a866:	0001      	movs	r1, r0
    a868:	0006      	movs	r6, r0
    a86a:	9804      	ldr	r0, [sp, #16]
    a86c:	f000 fb0c 	bl	ae88 <__multiply>
    a870:	9905      	ldr	r1, [sp, #20]
    a872:	9010      	str	r0, [sp, #64]	; 0x40
    a874:	9804      	ldr	r0, [sp, #16]
    a876:	f000 fa60 	bl	ad3a <_Bfree>
    a87a:	9b10      	ldr	r3, [sp, #64]	; 0x40
    a87c:	9305      	str	r3, [sp, #20]
    a87e:	9b08      	ldr	r3, [sp, #32]
    a880:	1b5a      	subs	r2, r3, r5
    a882:	d004      	beq.n	a88e <_dtoa_r+0x7c6>
    a884:	9905      	ldr	r1, [sp, #20]
    a886:	9804      	ldr	r0, [sp, #16]
    a888:	f000 fb8e 	bl	afa8 <__pow5mult>
    a88c:	9005      	str	r0, [sp, #20]
    a88e:	2101      	movs	r1, #1
    a890:	9804      	ldr	r0, [sp, #16]
    a892:	f000 faf0 	bl	ae76 <__i2b>
    a896:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    a898:	9008      	str	r0, [sp, #32]
    a89a:	2b00      	cmp	r3, #0
    a89c:	dd3d      	ble.n	a91a <_dtoa_r+0x852>
    a89e:	001a      	movs	r2, r3
    a8a0:	0001      	movs	r1, r0
    a8a2:	9804      	ldr	r0, [sp, #16]
    a8a4:	f000 fb80 	bl	afa8 <__pow5mult>
    a8a8:	9b22      	ldr	r3, [sp, #136]	; 0x88
    a8aa:	9008      	str	r0, [sp, #32]
    a8ac:	2500      	movs	r5, #0
    a8ae:	2b01      	cmp	r3, #1
    a8b0:	dc3b      	bgt.n	a92a <_dtoa_r+0x862>
    a8b2:	2500      	movs	r5, #0
    a8b4:	9b06      	ldr	r3, [sp, #24]
    a8b6:	42ab      	cmp	r3, r5
    a8b8:	d133      	bne.n	a922 <_dtoa_r+0x85a>
    a8ba:	9b07      	ldr	r3, [sp, #28]
    a8bc:	031b      	lsls	r3, r3, #12
    a8be:	42ab      	cmp	r3, r5
    a8c0:	d12f      	bne.n	a922 <_dtoa_r+0x85a>
    a8c2:	9b19      	ldr	r3, [sp, #100]	; 0x64
    a8c4:	9a07      	ldr	r2, [sp, #28]
    a8c6:	4213      	tst	r3, r2
    a8c8:	d02b      	beq.n	a922 <_dtoa_r+0x85a>
    a8ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    a8cc:	3501      	adds	r5, #1
    a8ce:	3301      	adds	r3, #1
    a8d0:	930b      	str	r3, [sp, #44]	; 0x2c
    a8d2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    a8d4:	3301      	adds	r3, #1
    a8d6:	930c      	str	r3, [sp, #48]	; 0x30
    a8d8:	e023      	b.n	a922 <_dtoa_r+0x85a>
    a8da:	2336      	movs	r3, #54	; 0x36
    a8dc:	9a1a      	ldr	r2, [sp, #104]	; 0x68
    a8de:	1a9b      	subs	r3, r3, r2
    a8e0:	e795      	b.n	a80e <_dtoa_r+0x746>
    a8e2:	9b08      	ldr	r3, [sp, #32]
    a8e4:	1e7d      	subs	r5, r7, #1
    a8e6:	42ab      	cmp	r3, r5
    a8e8:	db06      	blt.n	a8f8 <_dtoa_r+0x830>
    a8ea:	1b5d      	subs	r5, r3, r5
    a8ec:	2f00      	cmp	r7, #0
    a8ee:	da0b      	bge.n	a908 <_dtoa_r+0x840>
    a8f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    a8f2:	1bdc      	subs	r4, r3, r7
    a8f4:	2300      	movs	r3, #0
    a8f6:	e78c      	b.n	a812 <_dtoa_r+0x74a>
    a8f8:	9b08      	ldr	r3, [sp, #32]
    a8fa:	9508      	str	r5, [sp, #32]
    a8fc:	1aea      	subs	r2, r5, r3
    a8fe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    a900:	2500      	movs	r5, #0
    a902:	189b      	adds	r3, r3, r2
    a904:	930f      	str	r3, [sp, #60]	; 0x3c
    a906:	e7f1      	b.n	a8ec <_dtoa_r+0x824>
    a908:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    a90a:	003b      	movs	r3, r7
    a90c:	e781      	b.n	a812 <_dtoa_r+0x74a>
    a90e:	9d08      	ldr	r5, [sp, #32]
    a910:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    a912:	9e0e      	ldr	r6, [sp, #56]	; 0x38
    a914:	e788      	b.n	a828 <_dtoa_r+0x760>
    a916:	9a08      	ldr	r2, [sp, #32]
    a918:	e7b4      	b.n	a884 <_dtoa_r+0x7bc>
    a91a:	9b22      	ldr	r3, [sp, #136]	; 0x88
    a91c:	2500      	movs	r5, #0
    a91e:	2b01      	cmp	r3, #1
    a920:	ddc7      	ble.n	a8b2 <_dtoa_r+0x7ea>
    a922:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    a924:	2001      	movs	r0, #1
    a926:	2b00      	cmp	r3, #0
    a928:	d00b      	beq.n	a942 <_dtoa_r+0x87a>
    a92a:	9b08      	ldr	r3, [sp, #32]
    a92c:	9a08      	ldr	r2, [sp, #32]
    a92e:	691b      	ldr	r3, [r3, #16]
    a930:	930f      	str	r3, [sp, #60]	; 0x3c
    a932:	3303      	adds	r3, #3
    a934:	009b      	lsls	r3, r3, #2
    a936:	18d3      	adds	r3, r2, r3
    a938:	6858      	ldr	r0, [r3, #4]
    a93a:	f000 fa53 	bl	ade4 <__hi0bits>
    a93e:	2320      	movs	r3, #32
    a940:	1a18      	subs	r0, r3, r0
    a942:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    a944:	18c0      	adds	r0, r0, r3
    a946:	231f      	movs	r3, #31
    a948:	4018      	ands	r0, r3
    a94a:	d100      	bne.n	a94e <_dtoa_r+0x886>
    a94c:	e0ab      	b.n	aaa6 <_dtoa_r+0x9de>
    a94e:	3301      	adds	r3, #1
    a950:	1a1b      	subs	r3, r3, r0
    a952:	2b04      	cmp	r3, #4
    a954:	dc00      	bgt.n	a958 <_dtoa_r+0x890>
    a956:	e09b      	b.n	aa90 <_dtoa_r+0x9c8>
    a958:	231c      	movs	r3, #28
    a95a:	1a18      	subs	r0, r3, r0
    a95c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    a95e:	1824      	adds	r4, r4, r0
    a960:	181b      	adds	r3, r3, r0
    a962:	930b      	str	r3, [sp, #44]	; 0x2c
    a964:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    a966:	181b      	adds	r3, r3, r0
    a968:	930c      	str	r3, [sp, #48]	; 0x30
    a96a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    a96c:	2b00      	cmp	r3, #0
    a96e:	dd05      	ble.n	a97c <_dtoa_r+0x8b4>
    a970:	001a      	movs	r2, r3
    a972:	9905      	ldr	r1, [sp, #20]
    a974:	9804      	ldr	r0, [sp, #16]
    a976:	f000 fb69 	bl	b04c <__lshift>
    a97a:	9005      	str	r0, [sp, #20]
    a97c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    a97e:	2b00      	cmp	r3, #0
    a980:	dd05      	ble.n	a98e <_dtoa_r+0x8c6>
    a982:	001a      	movs	r2, r3
    a984:	9908      	ldr	r1, [sp, #32]
    a986:	9804      	ldr	r0, [sp, #16]
    a988:	f000 fb60 	bl	b04c <__lshift>
    a98c:	9008      	str	r0, [sp, #32]
    a98e:	9b16      	ldr	r3, [sp, #88]	; 0x58
    a990:	2b00      	cmp	r3, #0
    a992:	d100      	bne.n	a996 <_dtoa_r+0x8ce>
    a994:	e089      	b.n	aaaa <_dtoa_r+0x9e2>
    a996:	9908      	ldr	r1, [sp, #32]
    a998:	9805      	ldr	r0, [sp, #20]
    a99a:	f000 fba8 	bl	b0ee <__mcmp>
    a99e:	2800      	cmp	r0, #0
    a9a0:	db00      	blt.n	a9a4 <_dtoa_r+0x8dc>
    a9a2:	e082      	b.n	aaaa <_dtoa_r+0x9e2>
    a9a4:	9b03      	ldr	r3, [sp, #12]
    a9a6:	220a      	movs	r2, #10
    a9a8:	3b01      	subs	r3, #1
    a9aa:	9303      	str	r3, [sp, #12]
    a9ac:	9905      	ldr	r1, [sp, #20]
    a9ae:	2300      	movs	r3, #0
    a9b0:	9804      	ldr	r0, [sp, #16]
    a9b2:	f000 f9db 	bl	ad6c <__multadd>
    a9b6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    a9b8:	9005      	str	r0, [sp, #20]
    a9ba:	2b00      	cmp	r3, #0
    a9bc:	d100      	bne.n	a9c0 <_dtoa_r+0x8f8>
    a9be:	e15d      	b.n	ac7c <_dtoa_r+0xbb4>
    a9c0:	2300      	movs	r3, #0
    a9c2:	0031      	movs	r1, r6
    a9c4:	220a      	movs	r2, #10
    a9c6:	9804      	ldr	r0, [sp, #16]
    a9c8:	f000 f9d0 	bl	ad6c <__multadd>
    a9cc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    a9ce:	0006      	movs	r6, r0
    a9d0:	2b00      	cmp	r3, #0
    a9d2:	dc02      	bgt.n	a9da <_dtoa_r+0x912>
    a9d4:	9b22      	ldr	r3, [sp, #136]	; 0x88
    a9d6:	2b02      	cmp	r3, #2
    a9d8:	dc6d      	bgt.n	aab6 <_dtoa_r+0x9ee>
    a9da:	2c00      	cmp	r4, #0
    a9dc:	dd05      	ble.n	a9ea <_dtoa_r+0x922>
    a9de:	0031      	movs	r1, r6
    a9e0:	0022      	movs	r2, r4
    a9e2:	9804      	ldr	r0, [sp, #16]
    a9e4:	f000 fb32 	bl	b04c <__lshift>
    a9e8:	0006      	movs	r6, r0
    a9ea:	0030      	movs	r0, r6
    a9ec:	2d00      	cmp	r5, #0
    a9ee:	d011      	beq.n	aa14 <_dtoa_r+0x94c>
    a9f0:	6871      	ldr	r1, [r6, #4]
    a9f2:	9804      	ldr	r0, [sp, #16]
    a9f4:	f000 f969 	bl	acca <_Balloc>
    a9f8:	0031      	movs	r1, r6
    a9fa:	0004      	movs	r4, r0
    a9fc:	6933      	ldr	r3, [r6, #16]
    a9fe:	310c      	adds	r1, #12
    aa00:	1c9a      	adds	r2, r3, #2
    aa02:	0092      	lsls	r2, r2, #2
    aa04:	300c      	adds	r0, #12
    aa06:	f7fe fcac 	bl	9362 <memcpy>
    aa0a:	2201      	movs	r2, #1
    aa0c:	0021      	movs	r1, r4
    aa0e:	9804      	ldr	r0, [sp, #16]
    aa10:	f000 fb1c 	bl	b04c <__lshift>
    aa14:	9f0d      	ldr	r7, [sp, #52]	; 0x34
    aa16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    aa18:	3f01      	subs	r7, #1
    aa1a:	930b      	str	r3, [sp, #44]	; 0x2c
    aa1c:	19db      	adds	r3, r3, r7
    aa1e:	0037      	movs	r7, r6
    aa20:	0006      	movs	r6, r0
    aa22:	930f      	str	r3, [sp, #60]	; 0x3c
    aa24:	9908      	ldr	r1, [sp, #32]
    aa26:	9805      	ldr	r0, [sp, #20]
    aa28:	f7ff faca 	bl	9fc0 <quorem>
    aa2c:	0039      	movs	r1, r7
    aa2e:	900d      	str	r0, [sp, #52]	; 0x34
    aa30:	0004      	movs	r4, r0
    aa32:	9805      	ldr	r0, [sp, #20]
    aa34:	f000 fb5b 	bl	b0ee <__mcmp>
    aa38:	0032      	movs	r2, r6
    aa3a:	900e      	str	r0, [sp, #56]	; 0x38
    aa3c:	9908      	ldr	r1, [sp, #32]
    aa3e:	9804      	ldr	r0, [sp, #16]
    aa40:	f000 fb6e 	bl	b120 <__mdiff>
    aa44:	2301      	movs	r3, #1
    aa46:	930c      	str	r3, [sp, #48]	; 0x30
    aa48:	68c3      	ldr	r3, [r0, #12]
    aa4a:	3430      	adds	r4, #48	; 0x30
    aa4c:	0005      	movs	r5, r0
    aa4e:	2b00      	cmp	r3, #0
    aa50:	d104      	bne.n	aa5c <_dtoa_r+0x994>
    aa52:	0001      	movs	r1, r0
    aa54:	9805      	ldr	r0, [sp, #20]
    aa56:	f000 fb4a 	bl	b0ee <__mcmp>
    aa5a:	900c      	str	r0, [sp, #48]	; 0x30
    aa5c:	0029      	movs	r1, r5
    aa5e:	9804      	ldr	r0, [sp, #16]
    aa60:	f000 f96b 	bl	ad3a <_Bfree>
    aa64:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    aa66:	9a22      	ldr	r2, [sp, #136]	; 0x88
    aa68:	4313      	orrs	r3, r2
    aa6a:	d000      	beq.n	aa6e <_dtoa_r+0x9a6>
    aa6c:	e089      	b.n	ab82 <_dtoa_r+0xaba>
    aa6e:	9a06      	ldr	r2, [sp, #24]
    aa70:	3301      	adds	r3, #1
    aa72:	4213      	tst	r3, r2
    aa74:	d000      	beq.n	aa78 <_dtoa_r+0x9b0>
    aa76:	e084      	b.n	ab82 <_dtoa_r+0xaba>
    aa78:	2c39      	cmp	r4, #57	; 0x39
    aa7a:	d100      	bne.n	aa7e <_dtoa_r+0x9b6>
    aa7c:	e0a3      	b.n	abc6 <_dtoa_r+0xafe>
    aa7e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    aa80:	2b00      	cmp	r3, #0
    aa82:	dd01      	ble.n	aa88 <_dtoa_r+0x9c0>
    aa84:	9c0d      	ldr	r4, [sp, #52]	; 0x34
    aa86:	3431      	adds	r4, #49	; 0x31
    aa88:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    aa8a:	1c5d      	adds	r5, r3, #1
    aa8c:	701c      	strb	r4, [r3, #0]
    aa8e:	e027      	b.n	aae0 <_dtoa_r+0xa18>
    aa90:	2b04      	cmp	r3, #4
    aa92:	d100      	bne.n	aa96 <_dtoa_r+0x9ce>
    aa94:	e769      	b.n	a96a <_dtoa_r+0x8a2>
    aa96:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    aa98:	331c      	adds	r3, #28
    aa9a:	18d2      	adds	r2, r2, r3
    aa9c:	920b      	str	r2, [sp, #44]	; 0x2c
    aa9e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    aaa0:	18e4      	adds	r4, r4, r3
    aaa2:	18d3      	adds	r3, r2, r3
    aaa4:	e760      	b.n	a968 <_dtoa_r+0x8a0>
    aaa6:	0003      	movs	r3, r0
    aaa8:	e7f5      	b.n	aa96 <_dtoa_r+0x9ce>
    aaaa:	2f00      	cmp	r7, #0
    aaac:	dc3c      	bgt.n	ab28 <_dtoa_r+0xa60>
    aaae:	9b22      	ldr	r3, [sp, #136]	; 0x88
    aab0:	2b02      	cmp	r3, #2
    aab2:	dd39      	ble.n	ab28 <_dtoa_r+0xa60>
    aab4:	970d      	str	r7, [sp, #52]	; 0x34
    aab6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    aab8:	2b00      	cmp	r3, #0
    aaba:	d10c      	bne.n	aad6 <_dtoa_r+0xa0e>
    aabc:	9908      	ldr	r1, [sp, #32]
    aabe:	2205      	movs	r2, #5
    aac0:	9804      	ldr	r0, [sp, #16]
    aac2:	f000 f953 	bl	ad6c <__multadd>
    aac6:	9008      	str	r0, [sp, #32]
    aac8:	0001      	movs	r1, r0
    aaca:	9805      	ldr	r0, [sp, #20]
    aacc:	f000 fb0f 	bl	b0ee <__mcmp>
    aad0:	2800      	cmp	r0, #0
    aad2:	dd00      	ble.n	aad6 <_dtoa_r+0xa0e>
    aad4:	e55a      	b.n	a58c <_dtoa_r+0x4c4>
    aad6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    aad8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    aada:	43db      	mvns	r3, r3
    aadc:	9303      	str	r3, [sp, #12]
    aade:	2700      	movs	r7, #0
    aae0:	9908      	ldr	r1, [sp, #32]
    aae2:	9804      	ldr	r0, [sp, #16]
    aae4:	f000 f929 	bl	ad3a <_Bfree>
    aae8:	2e00      	cmp	r6, #0
    aaea:	d100      	bne.n	aaee <_dtoa_r+0xa26>
    aaec:	e63f      	b.n	a76e <_dtoa_r+0x6a6>
    aaee:	2f00      	cmp	r7, #0
    aaf0:	d005      	beq.n	aafe <_dtoa_r+0xa36>
    aaf2:	42b7      	cmp	r7, r6
    aaf4:	d003      	beq.n	aafe <_dtoa_r+0xa36>
    aaf6:	0039      	movs	r1, r7
    aaf8:	9804      	ldr	r0, [sp, #16]
    aafa:	f000 f91e 	bl	ad3a <_Bfree>
    aafe:	0031      	movs	r1, r6
    ab00:	9804      	ldr	r0, [sp, #16]
    ab02:	f000 f91a 	bl	ad3a <_Bfree>
    ab06:	e632      	b.n	a76e <_dtoa_r+0x6a6>
    ab08:	9508      	str	r5, [sp, #32]
    ab0a:	002e      	movs	r6, r5
    ab0c:	e7e3      	b.n	aad6 <_dtoa_r+0xa0e>
    ab0e:	2300      	movs	r3, #0
    ab10:	9308      	str	r3, [sp, #32]
    ab12:	001e      	movs	r6, r3
    ab14:	e7df      	b.n	aad6 <_dtoa_r+0xa0e>
    ab16:	46c0      	nop			; (mov r8, r8)
    ab18:	40240000 	.word	0x40240000
    ab1c:	00000433 	.word	0x00000433
    ab20:	9603      	str	r6, [sp, #12]
    ab22:	9508      	str	r5, [sp, #32]
    ab24:	002e      	movs	r6, r5
    ab26:	e531      	b.n	a58c <_dtoa_r+0x4c4>
    ab28:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    ab2a:	970d      	str	r7, [sp, #52]	; 0x34
    ab2c:	2b00      	cmp	r3, #0
    ab2e:	d000      	beq.n	ab32 <_dtoa_r+0xa6a>
    ab30:	e753      	b.n	a9da <_dtoa_r+0x912>
    ab32:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    ab34:	9908      	ldr	r1, [sp, #32]
    ab36:	9805      	ldr	r0, [sp, #20]
    ab38:	f7ff fa42 	bl	9fc0 <quorem>
    ab3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    ab3e:	3030      	adds	r0, #48	; 0x30
    ab40:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    ab42:	7028      	strb	r0, [r5, #0]
    ab44:	3501      	adds	r5, #1
    ab46:	0004      	movs	r4, r0
    ab48:	1aeb      	subs	r3, r5, r3
    ab4a:	429a      	cmp	r2, r3
    ab4c:	dc78      	bgt.n	ac40 <_dtoa_r+0xb78>
    ab4e:	1e15      	subs	r5, r2, #0
    ab50:	dc00      	bgt.n	ab54 <_dtoa_r+0xa8c>
    ab52:	2501      	movs	r5, #1
    ab54:	2700      	movs	r7, #0
    ab56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    ab58:	195d      	adds	r5, r3, r5
    ab5a:	9905      	ldr	r1, [sp, #20]
    ab5c:	2201      	movs	r2, #1
    ab5e:	9804      	ldr	r0, [sp, #16]
    ab60:	f000 fa74 	bl	b04c <__lshift>
    ab64:	9908      	ldr	r1, [sp, #32]
    ab66:	9005      	str	r0, [sp, #20]
    ab68:	f000 fac1 	bl	b0ee <__mcmp>
    ab6c:	2800      	cmp	r0, #0
    ab6e:	dc2f      	bgt.n	abd0 <_dtoa_r+0xb08>
    ab70:	d101      	bne.n	ab76 <_dtoa_r+0xaae>
    ab72:	07e3      	lsls	r3, r4, #31
    ab74:	d42c      	bmi.n	abd0 <_dtoa_r+0xb08>
    ab76:	1e6b      	subs	r3, r5, #1
    ab78:	781a      	ldrb	r2, [r3, #0]
    ab7a:	2a30      	cmp	r2, #48	; 0x30
    ab7c:	d1b0      	bne.n	aae0 <_dtoa_r+0xa18>
    ab7e:	001d      	movs	r5, r3
    ab80:	e7f9      	b.n	ab76 <_dtoa_r+0xaae>
    ab82:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    ab84:	2b00      	cmp	r3, #0
    ab86:	db07      	blt.n	ab98 <_dtoa_r+0xad0>
    ab88:	001d      	movs	r5, r3
    ab8a:	9b22      	ldr	r3, [sp, #136]	; 0x88
    ab8c:	431d      	orrs	r5, r3
    ab8e:	d126      	bne.n	abde <_dtoa_r+0xb16>
    ab90:	2301      	movs	r3, #1
    ab92:	9a06      	ldr	r2, [sp, #24]
    ab94:	4213      	tst	r3, r2
    ab96:	d122      	bne.n	abde <_dtoa_r+0xb16>
    ab98:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    ab9a:	2b00      	cmp	r3, #0
    ab9c:	dc00      	bgt.n	aba0 <_dtoa_r+0xad8>
    ab9e:	e773      	b.n	aa88 <_dtoa_r+0x9c0>
    aba0:	9905      	ldr	r1, [sp, #20]
    aba2:	2201      	movs	r2, #1
    aba4:	9804      	ldr	r0, [sp, #16]
    aba6:	f000 fa51 	bl	b04c <__lshift>
    abaa:	9908      	ldr	r1, [sp, #32]
    abac:	9005      	str	r0, [sp, #20]
    abae:	f000 fa9e 	bl	b0ee <__mcmp>
    abb2:	2800      	cmp	r0, #0
    abb4:	dc04      	bgt.n	abc0 <_dtoa_r+0xaf8>
    abb6:	d000      	beq.n	abba <_dtoa_r+0xaf2>
    abb8:	e766      	b.n	aa88 <_dtoa_r+0x9c0>
    abba:	07e3      	lsls	r3, r4, #31
    abbc:	d400      	bmi.n	abc0 <_dtoa_r+0xaf8>
    abbe:	e763      	b.n	aa88 <_dtoa_r+0x9c0>
    abc0:	2c39      	cmp	r4, #57	; 0x39
    abc2:	d000      	beq.n	abc6 <_dtoa_r+0xafe>
    abc4:	e75e      	b.n	aa84 <_dtoa_r+0x9bc>
    abc6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    abc8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    abca:	1c5d      	adds	r5, r3, #1
    abcc:	2339      	movs	r3, #57	; 0x39
    abce:	7013      	strb	r3, [r2, #0]
    abd0:	1e6b      	subs	r3, r5, #1
    abd2:	781a      	ldrb	r2, [r3, #0]
    abd4:	2a39      	cmp	r2, #57	; 0x39
    abd6:	d03b      	beq.n	ac50 <_dtoa_r+0xb88>
    abd8:	3201      	adds	r2, #1
    abda:	701a      	strb	r2, [r3, #0]
    abdc:	e780      	b.n	aae0 <_dtoa_r+0xa18>
    abde:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    abe0:	3301      	adds	r3, #1
    abe2:	930d      	str	r3, [sp, #52]	; 0x34
    abe4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    abe6:	2b00      	cmp	r3, #0
    abe8:	dd05      	ble.n	abf6 <_dtoa_r+0xb2e>
    abea:	2c39      	cmp	r4, #57	; 0x39
    abec:	d0eb      	beq.n	abc6 <_dtoa_r+0xafe>
    abee:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    abf0:	3401      	adds	r4, #1
    abf2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    abf4:	e74a      	b.n	aa8c <_dtoa_r+0x9c4>
    abf6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    abf8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    abfa:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    abfc:	701c      	strb	r4, [r3, #0]
    abfe:	4293      	cmp	r3, r2
    ac00:	d0ab      	beq.n	ab5a <_dtoa_r+0xa92>
    ac02:	2300      	movs	r3, #0
    ac04:	220a      	movs	r2, #10
    ac06:	9905      	ldr	r1, [sp, #20]
    ac08:	9804      	ldr	r0, [sp, #16]
    ac0a:	f000 f8af 	bl	ad6c <__multadd>
    ac0e:	2300      	movs	r3, #0
    ac10:	9005      	str	r0, [sp, #20]
    ac12:	220a      	movs	r2, #10
    ac14:	0039      	movs	r1, r7
    ac16:	9804      	ldr	r0, [sp, #16]
    ac18:	42b7      	cmp	r7, r6
    ac1a:	d106      	bne.n	ac2a <_dtoa_r+0xb62>
    ac1c:	f000 f8a6 	bl	ad6c <__multadd>
    ac20:	0007      	movs	r7, r0
    ac22:	0006      	movs	r6, r0
    ac24:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    ac26:	930b      	str	r3, [sp, #44]	; 0x2c
    ac28:	e6fc      	b.n	aa24 <_dtoa_r+0x95c>
    ac2a:	f000 f89f 	bl	ad6c <__multadd>
    ac2e:	0031      	movs	r1, r6
    ac30:	0007      	movs	r7, r0
    ac32:	2300      	movs	r3, #0
    ac34:	220a      	movs	r2, #10
    ac36:	9804      	ldr	r0, [sp, #16]
    ac38:	f000 f898 	bl	ad6c <__multadd>
    ac3c:	0006      	movs	r6, r0
    ac3e:	e7f1      	b.n	ac24 <_dtoa_r+0xb5c>
    ac40:	2300      	movs	r3, #0
    ac42:	220a      	movs	r2, #10
    ac44:	9905      	ldr	r1, [sp, #20]
    ac46:	9804      	ldr	r0, [sp, #16]
    ac48:	f000 f890 	bl	ad6c <__multadd>
    ac4c:	9005      	str	r0, [sp, #20]
    ac4e:	e771      	b.n	ab34 <_dtoa_r+0xa6c>
    ac50:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    ac52:	429a      	cmp	r2, r3
    ac54:	d105      	bne.n	ac62 <_dtoa_r+0xb9a>
    ac56:	9b03      	ldr	r3, [sp, #12]
    ac58:	3301      	adds	r3, #1
    ac5a:	9303      	str	r3, [sp, #12]
    ac5c:	2331      	movs	r3, #49	; 0x31
    ac5e:	7013      	strb	r3, [r2, #0]
    ac60:	e73e      	b.n	aae0 <_dtoa_r+0xa18>
    ac62:	001d      	movs	r5, r3
    ac64:	e7b4      	b.n	abd0 <_dtoa_r+0xb08>
    ac66:	4b0a      	ldr	r3, [pc, #40]	; (ac90 <_dtoa_r+0xbc8>)
    ac68:	9a26      	ldr	r2, [sp, #152]	; 0x98
    ac6a:	930a      	str	r3, [sp, #40]	; 0x28
    ac6c:	4b09      	ldr	r3, [pc, #36]	; (ac94 <_dtoa_r+0xbcc>)
    ac6e:	2a00      	cmp	r2, #0
    ac70:	d001      	beq.n	ac76 <_dtoa_r+0xbae>
    ac72:	9a26      	ldr	r2, [sp, #152]	; 0x98
    ac74:	6013      	str	r3, [r2, #0]
    ac76:	980a      	ldr	r0, [sp, #40]	; 0x28
    ac78:	b01d      	add	sp, #116	; 0x74
    ac7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ac7c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    ac7e:	2b00      	cmp	r3, #0
    ac80:	dd00      	ble.n	ac84 <_dtoa_r+0xbbc>
    ac82:	e756      	b.n	ab32 <_dtoa_r+0xa6a>
    ac84:	9b22      	ldr	r3, [sp, #136]	; 0x88
    ac86:	2b02      	cmp	r3, #2
    ac88:	dc00      	bgt.n	ac8c <_dtoa_r+0xbc4>
    ac8a:	e752      	b.n	ab32 <_dtoa_r+0xa6a>
    ac8c:	e713      	b.n	aab6 <_dtoa_r+0x9ee>
    ac8e:	46c0      	nop			; (mov r8, r8)
    ac90:	0000bf5b 	.word	0x0000bf5b
    ac94:	0000bf63 	.word	0x0000bf63

0000ac98 <_localeconv_r>:
    ac98:	4b03      	ldr	r3, [pc, #12]	; (aca8 <_localeconv_r+0x10>)
    ac9a:	681b      	ldr	r3, [r3, #0]
    ac9c:	6a18      	ldr	r0, [r3, #32]
    ac9e:	2800      	cmp	r0, #0
    aca0:	d100      	bne.n	aca4 <_localeconv_r+0xc>
    aca2:	4802      	ldr	r0, [pc, #8]	; (acac <_localeconv_r+0x14>)
    aca4:	30f0      	adds	r0, #240	; 0xf0
    aca6:	4770      	bx	lr
    aca8:	20000088 	.word	0x20000088
    acac:	200000ec 	.word	0x200000ec

0000acb0 <memchr>:
    acb0:	b2c9      	uxtb	r1, r1
    acb2:	1882      	adds	r2, r0, r2
    acb4:	4290      	cmp	r0, r2
    acb6:	d101      	bne.n	acbc <memchr+0xc>
    acb8:	2000      	movs	r0, #0
    acba:	4770      	bx	lr
    acbc:	7803      	ldrb	r3, [r0, #0]
    acbe:	428b      	cmp	r3, r1
    acc0:	d0fb      	beq.n	acba <memchr+0xa>
    acc2:	3001      	adds	r0, #1
    acc4:	e7f6      	b.n	acb4 <memchr+0x4>

0000acc6 <__malloc_lock>:
    acc6:	4770      	bx	lr

0000acc8 <__malloc_unlock>:
    acc8:	4770      	bx	lr

0000acca <_Balloc>:
    acca:	b570      	push	{r4, r5, r6, lr}
    accc:	6a46      	ldr	r6, [r0, #36]	; 0x24
    acce:	0004      	movs	r4, r0
    acd0:	000d      	movs	r5, r1
    acd2:	2e00      	cmp	r6, #0
    acd4:	d107      	bne.n	ace6 <_Balloc+0x1c>
    acd6:	2010      	movs	r0, #16
    acd8:	f7fe fb0e 	bl	92f8 <malloc>
    acdc:	6260      	str	r0, [r4, #36]	; 0x24
    acde:	6046      	str	r6, [r0, #4]
    ace0:	6086      	str	r6, [r0, #8]
    ace2:	6006      	str	r6, [r0, #0]
    ace4:	60c6      	str	r6, [r0, #12]
    ace6:	6a66      	ldr	r6, [r4, #36]	; 0x24
    ace8:	68f3      	ldr	r3, [r6, #12]
    acea:	2b00      	cmp	r3, #0
    acec:	d013      	beq.n	ad16 <_Balloc+0x4c>
    acee:	6a63      	ldr	r3, [r4, #36]	; 0x24
    acf0:	00aa      	lsls	r2, r5, #2
    acf2:	68db      	ldr	r3, [r3, #12]
    acf4:	189b      	adds	r3, r3, r2
    acf6:	6818      	ldr	r0, [r3, #0]
    acf8:	2800      	cmp	r0, #0
    acfa:	d118      	bne.n	ad2e <_Balloc+0x64>
    acfc:	2101      	movs	r1, #1
    acfe:	000e      	movs	r6, r1
    ad00:	40ae      	lsls	r6, r5
    ad02:	1d72      	adds	r2, r6, #5
    ad04:	0092      	lsls	r2, r2, #2
    ad06:	0020      	movs	r0, r4
    ad08:	f000 fac2 	bl	b290 <_calloc_r>
    ad0c:	2800      	cmp	r0, #0
    ad0e:	d00c      	beq.n	ad2a <_Balloc+0x60>
    ad10:	6045      	str	r5, [r0, #4]
    ad12:	6086      	str	r6, [r0, #8]
    ad14:	e00d      	b.n	ad32 <_Balloc+0x68>
    ad16:	2221      	movs	r2, #33	; 0x21
    ad18:	2104      	movs	r1, #4
    ad1a:	0020      	movs	r0, r4
    ad1c:	f000 fab8 	bl	b290 <_calloc_r>
    ad20:	6a63      	ldr	r3, [r4, #36]	; 0x24
    ad22:	60f0      	str	r0, [r6, #12]
    ad24:	68db      	ldr	r3, [r3, #12]
    ad26:	2b00      	cmp	r3, #0
    ad28:	d1e1      	bne.n	acee <_Balloc+0x24>
    ad2a:	2000      	movs	r0, #0
    ad2c:	bd70      	pop	{r4, r5, r6, pc}
    ad2e:	6802      	ldr	r2, [r0, #0]
    ad30:	601a      	str	r2, [r3, #0]
    ad32:	2300      	movs	r3, #0
    ad34:	6103      	str	r3, [r0, #16]
    ad36:	60c3      	str	r3, [r0, #12]
    ad38:	e7f8      	b.n	ad2c <_Balloc+0x62>

0000ad3a <_Bfree>:
    ad3a:	b570      	push	{r4, r5, r6, lr}
    ad3c:	6a44      	ldr	r4, [r0, #36]	; 0x24
    ad3e:	0006      	movs	r6, r0
    ad40:	000d      	movs	r5, r1
    ad42:	2c00      	cmp	r4, #0
    ad44:	d107      	bne.n	ad56 <_Bfree+0x1c>
    ad46:	2010      	movs	r0, #16
    ad48:	f7fe fad6 	bl	92f8 <malloc>
    ad4c:	6270      	str	r0, [r6, #36]	; 0x24
    ad4e:	6044      	str	r4, [r0, #4]
    ad50:	6084      	str	r4, [r0, #8]
    ad52:	6004      	str	r4, [r0, #0]
    ad54:	60c4      	str	r4, [r0, #12]
    ad56:	2d00      	cmp	r5, #0
    ad58:	d007      	beq.n	ad6a <_Bfree+0x30>
    ad5a:	6a73      	ldr	r3, [r6, #36]	; 0x24
    ad5c:	686a      	ldr	r2, [r5, #4]
    ad5e:	68db      	ldr	r3, [r3, #12]
    ad60:	0092      	lsls	r2, r2, #2
    ad62:	189b      	adds	r3, r3, r2
    ad64:	681a      	ldr	r2, [r3, #0]
    ad66:	602a      	str	r2, [r5, #0]
    ad68:	601d      	str	r5, [r3, #0]
    ad6a:	bd70      	pop	{r4, r5, r6, pc}

0000ad6c <__multadd>:
    ad6c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    ad6e:	001e      	movs	r6, r3
    ad70:	2314      	movs	r3, #20
    ad72:	469c      	mov	ip, r3
    ad74:	0007      	movs	r7, r0
    ad76:	000c      	movs	r4, r1
    ad78:	2000      	movs	r0, #0
    ad7a:	690d      	ldr	r5, [r1, #16]
    ad7c:	448c      	add	ip, r1
    ad7e:	4663      	mov	r3, ip
    ad80:	8819      	ldrh	r1, [r3, #0]
    ad82:	681b      	ldr	r3, [r3, #0]
    ad84:	4351      	muls	r1, r2
    ad86:	0c1b      	lsrs	r3, r3, #16
    ad88:	4353      	muls	r3, r2
    ad8a:	1989      	adds	r1, r1, r6
    ad8c:	0c0e      	lsrs	r6, r1, #16
    ad8e:	199b      	adds	r3, r3, r6
    ad90:	b289      	uxth	r1, r1
    ad92:	0c1e      	lsrs	r6, r3, #16
    ad94:	041b      	lsls	r3, r3, #16
    ad96:	185b      	adds	r3, r3, r1
    ad98:	4661      	mov	r1, ip
    ad9a:	3001      	adds	r0, #1
    ad9c:	c108      	stmia	r1!, {r3}
    ad9e:	468c      	mov	ip, r1
    ada0:	4285      	cmp	r5, r0
    ada2:	dcec      	bgt.n	ad7e <__multadd+0x12>
    ada4:	2e00      	cmp	r6, #0
    ada6:	d01b      	beq.n	ade0 <__multadd+0x74>
    ada8:	68a3      	ldr	r3, [r4, #8]
    adaa:	429d      	cmp	r5, r3
    adac:	db12      	blt.n	add4 <__multadd+0x68>
    adae:	6863      	ldr	r3, [r4, #4]
    adb0:	0038      	movs	r0, r7
    adb2:	1c59      	adds	r1, r3, #1
    adb4:	f7ff ff89 	bl	acca <_Balloc>
    adb8:	0021      	movs	r1, r4
    adba:	6923      	ldr	r3, [r4, #16]
    adbc:	9001      	str	r0, [sp, #4]
    adbe:	1c9a      	adds	r2, r3, #2
    adc0:	0092      	lsls	r2, r2, #2
    adc2:	310c      	adds	r1, #12
    adc4:	300c      	adds	r0, #12
    adc6:	f7fe facc 	bl	9362 <memcpy>
    adca:	0021      	movs	r1, r4
    adcc:	0038      	movs	r0, r7
    adce:	f7ff ffb4 	bl	ad3a <_Bfree>
    add2:	9c01      	ldr	r4, [sp, #4]
    add4:	1d2b      	adds	r3, r5, #4
    add6:	009b      	lsls	r3, r3, #2
    add8:	18e3      	adds	r3, r4, r3
    adda:	3501      	adds	r5, #1
    addc:	605e      	str	r6, [r3, #4]
    adde:	6125      	str	r5, [r4, #16]
    ade0:	0020      	movs	r0, r4
    ade2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

0000ade4 <__hi0bits>:
    ade4:	0003      	movs	r3, r0
    ade6:	0c02      	lsrs	r2, r0, #16
    ade8:	2000      	movs	r0, #0
    adea:	4282      	cmp	r2, r0
    adec:	d101      	bne.n	adf2 <__hi0bits+0xe>
    adee:	041b      	lsls	r3, r3, #16
    adf0:	3010      	adds	r0, #16
    adf2:	0e1a      	lsrs	r2, r3, #24
    adf4:	d101      	bne.n	adfa <__hi0bits+0x16>
    adf6:	3008      	adds	r0, #8
    adf8:	021b      	lsls	r3, r3, #8
    adfa:	0f1a      	lsrs	r2, r3, #28
    adfc:	d101      	bne.n	ae02 <__hi0bits+0x1e>
    adfe:	3004      	adds	r0, #4
    ae00:	011b      	lsls	r3, r3, #4
    ae02:	0f9a      	lsrs	r2, r3, #30
    ae04:	d101      	bne.n	ae0a <__hi0bits+0x26>
    ae06:	3002      	adds	r0, #2
    ae08:	009b      	lsls	r3, r3, #2
    ae0a:	2b00      	cmp	r3, #0
    ae0c:	db03      	blt.n	ae16 <__hi0bits+0x32>
    ae0e:	3001      	adds	r0, #1
    ae10:	005b      	lsls	r3, r3, #1
    ae12:	d400      	bmi.n	ae16 <__hi0bits+0x32>
    ae14:	2020      	movs	r0, #32
    ae16:	4770      	bx	lr

0000ae18 <__lo0bits>:
    ae18:	2207      	movs	r2, #7
    ae1a:	6803      	ldr	r3, [r0, #0]
    ae1c:	b510      	push	{r4, lr}
    ae1e:	0001      	movs	r1, r0
    ae20:	401a      	ands	r2, r3
    ae22:	d00d      	beq.n	ae40 <__lo0bits+0x28>
    ae24:	2401      	movs	r4, #1
    ae26:	2000      	movs	r0, #0
    ae28:	4223      	tst	r3, r4
    ae2a:	d105      	bne.n	ae38 <__lo0bits+0x20>
    ae2c:	3002      	adds	r0, #2
    ae2e:	4203      	tst	r3, r0
    ae30:	d003      	beq.n	ae3a <__lo0bits+0x22>
    ae32:	40e3      	lsrs	r3, r4
    ae34:	0020      	movs	r0, r4
    ae36:	600b      	str	r3, [r1, #0]
    ae38:	bd10      	pop	{r4, pc}
    ae3a:	089b      	lsrs	r3, r3, #2
    ae3c:	600b      	str	r3, [r1, #0]
    ae3e:	e7fb      	b.n	ae38 <__lo0bits+0x20>
    ae40:	b29c      	uxth	r4, r3
    ae42:	0010      	movs	r0, r2
    ae44:	2c00      	cmp	r4, #0
    ae46:	d101      	bne.n	ae4c <__lo0bits+0x34>
    ae48:	2010      	movs	r0, #16
    ae4a:	0c1b      	lsrs	r3, r3, #16
    ae4c:	b2da      	uxtb	r2, r3
    ae4e:	2a00      	cmp	r2, #0
    ae50:	d101      	bne.n	ae56 <__lo0bits+0x3e>
    ae52:	3008      	adds	r0, #8
    ae54:	0a1b      	lsrs	r3, r3, #8
    ae56:	071a      	lsls	r2, r3, #28
    ae58:	d101      	bne.n	ae5e <__lo0bits+0x46>
    ae5a:	3004      	adds	r0, #4
    ae5c:	091b      	lsrs	r3, r3, #4
    ae5e:	079a      	lsls	r2, r3, #30
    ae60:	d101      	bne.n	ae66 <__lo0bits+0x4e>
    ae62:	3002      	adds	r0, #2
    ae64:	089b      	lsrs	r3, r3, #2
    ae66:	07da      	lsls	r2, r3, #31
    ae68:	d4e8      	bmi.n	ae3c <__lo0bits+0x24>
    ae6a:	085b      	lsrs	r3, r3, #1
    ae6c:	d001      	beq.n	ae72 <__lo0bits+0x5a>
    ae6e:	3001      	adds	r0, #1
    ae70:	e7e4      	b.n	ae3c <__lo0bits+0x24>
    ae72:	2020      	movs	r0, #32
    ae74:	e7e0      	b.n	ae38 <__lo0bits+0x20>

0000ae76 <__i2b>:
    ae76:	b510      	push	{r4, lr}
    ae78:	000c      	movs	r4, r1
    ae7a:	2101      	movs	r1, #1
    ae7c:	f7ff ff25 	bl	acca <_Balloc>
    ae80:	2301      	movs	r3, #1
    ae82:	6144      	str	r4, [r0, #20]
    ae84:	6103      	str	r3, [r0, #16]
    ae86:	bd10      	pop	{r4, pc}

0000ae88 <__multiply>:
    ae88:	b5f0      	push	{r4, r5, r6, r7, lr}
    ae8a:	690b      	ldr	r3, [r1, #16]
    ae8c:	0015      	movs	r5, r2
    ae8e:	6912      	ldr	r2, [r2, #16]
    ae90:	b089      	sub	sp, #36	; 0x24
    ae92:	000c      	movs	r4, r1
    ae94:	4293      	cmp	r3, r2
    ae96:	da01      	bge.n	ae9c <__multiply+0x14>
    ae98:	002c      	movs	r4, r5
    ae9a:	000d      	movs	r5, r1
    ae9c:	6927      	ldr	r7, [r4, #16]
    ae9e:	692e      	ldr	r6, [r5, #16]
    aea0:	68a2      	ldr	r2, [r4, #8]
    aea2:	19bb      	adds	r3, r7, r6
    aea4:	6861      	ldr	r1, [r4, #4]
    aea6:	9301      	str	r3, [sp, #4]
    aea8:	4293      	cmp	r3, r2
    aeaa:	dd00      	ble.n	aeae <__multiply+0x26>
    aeac:	3101      	adds	r1, #1
    aeae:	f7ff ff0c 	bl	acca <_Balloc>
    aeb2:	0003      	movs	r3, r0
    aeb4:	3314      	adds	r3, #20
    aeb6:	9300      	str	r3, [sp, #0]
    aeb8:	9a00      	ldr	r2, [sp, #0]
    aeba:	19bb      	adds	r3, r7, r6
    aebc:	4694      	mov	ip, r2
    aebe:	009b      	lsls	r3, r3, #2
    aec0:	449c      	add	ip, r3
    aec2:	0013      	movs	r3, r2
    aec4:	2200      	movs	r2, #0
    aec6:	9004      	str	r0, [sp, #16]
    aec8:	4563      	cmp	r3, ip
    aeca:	d31c      	bcc.n	af06 <__multiply+0x7e>
    aecc:	002a      	movs	r2, r5
    aece:	3414      	adds	r4, #20
    aed0:	00bf      	lsls	r7, r7, #2
    aed2:	19e3      	adds	r3, r4, r7
    aed4:	3214      	adds	r2, #20
    aed6:	00b6      	lsls	r6, r6, #2
    aed8:	9305      	str	r3, [sp, #20]
    aeda:	1993      	adds	r3, r2, r6
    aedc:	9402      	str	r4, [sp, #8]
    aede:	9306      	str	r3, [sp, #24]
    aee0:	9b06      	ldr	r3, [sp, #24]
    aee2:	429a      	cmp	r2, r3
    aee4:	d311      	bcc.n	af0a <__multiply+0x82>
    aee6:	9b01      	ldr	r3, [sp, #4]
    aee8:	2b00      	cmp	r3, #0
    aeea:	dd06      	ble.n	aefa <__multiply+0x72>
    aeec:	2304      	movs	r3, #4
    aeee:	425b      	negs	r3, r3
    aef0:	449c      	add	ip, r3
    aef2:	4663      	mov	r3, ip
    aef4:	681b      	ldr	r3, [r3, #0]
    aef6:	2b00      	cmp	r3, #0
    aef8:	d051      	beq.n	af9e <__multiply+0x116>
    aefa:	9b04      	ldr	r3, [sp, #16]
    aefc:	9a01      	ldr	r2, [sp, #4]
    aefe:	0018      	movs	r0, r3
    af00:	611a      	str	r2, [r3, #16]
    af02:	b009      	add	sp, #36	; 0x24
    af04:	bdf0      	pop	{r4, r5, r6, r7, pc}
    af06:	c304      	stmia	r3!, {r2}
    af08:	e7de      	b.n	aec8 <__multiply+0x40>
    af0a:	8814      	ldrh	r4, [r2, #0]
    af0c:	2c00      	cmp	r4, #0
    af0e:	d01e      	beq.n	af4e <__multiply+0xc6>
    af10:	2600      	movs	r6, #0
    af12:	9d00      	ldr	r5, [sp, #0]
    af14:	9f02      	ldr	r7, [sp, #8]
    af16:	cf01      	ldmia	r7!, {r0}
    af18:	9507      	str	r5, [sp, #28]
    af1a:	cd08      	ldmia	r5!, {r3}
    af1c:	9303      	str	r3, [sp, #12]
    af1e:	b283      	uxth	r3, r0
    af20:	4363      	muls	r3, r4
    af22:	0019      	movs	r1, r3
    af24:	466b      	mov	r3, sp
    af26:	0c00      	lsrs	r0, r0, #16
    af28:	899b      	ldrh	r3, [r3, #12]
    af2a:	4360      	muls	r0, r4
    af2c:	18cb      	adds	r3, r1, r3
    af2e:	9903      	ldr	r1, [sp, #12]
    af30:	199b      	adds	r3, r3, r6
    af32:	0c09      	lsrs	r1, r1, #16
    af34:	1841      	adds	r1, r0, r1
    af36:	0c18      	lsrs	r0, r3, #16
    af38:	1809      	adds	r1, r1, r0
    af3a:	0c0e      	lsrs	r6, r1, #16
    af3c:	b29b      	uxth	r3, r3
    af3e:	0409      	lsls	r1, r1, #16
    af40:	430b      	orrs	r3, r1
    af42:	9907      	ldr	r1, [sp, #28]
    af44:	600b      	str	r3, [r1, #0]
    af46:	9b05      	ldr	r3, [sp, #20]
    af48:	42bb      	cmp	r3, r7
    af4a:	d8e4      	bhi.n	af16 <__multiply+0x8e>
    af4c:	602e      	str	r6, [r5, #0]
    af4e:	6813      	ldr	r3, [r2, #0]
    af50:	0c1b      	lsrs	r3, r3, #16
    af52:	9303      	str	r3, [sp, #12]
    af54:	d01e      	beq.n	af94 <__multiply+0x10c>
    af56:	2600      	movs	r6, #0
    af58:	9b00      	ldr	r3, [sp, #0]
    af5a:	9c02      	ldr	r4, [sp, #8]
    af5c:	681b      	ldr	r3, [r3, #0]
    af5e:	9800      	ldr	r0, [sp, #0]
    af60:	0007      	movs	r7, r0
    af62:	8821      	ldrh	r1, [r4, #0]
    af64:	9d03      	ldr	r5, [sp, #12]
    af66:	b29b      	uxth	r3, r3
    af68:	4369      	muls	r1, r5
    af6a:	c820      	ldmia	r0!, {r5}
    af6c:	0c2d      	lsrs	r5, r5, #16
    af6e:	1949      	adds	r1, r1, r5
    af70:	198e      	adds	r6, r1, r6
    af72:	0431      	lsls	r1, r6, #16
    af74:	430b      	orrs	r3, r1
    af76:	603b      	str	r3, [r7, #0]
    af78:	cc08      	ldmia	r4!, {r3}
    af7a:	9903      	ldr	r1, [sp, #12]
    af7c:	0c1b      	lsrs	r3, r3, #16
    af7e:	434b      	muls	r3, r1
    af80:	6879      	ldr	r1, [r7, #4]
    af82:	0c36      	lsrs	r6, r6, #16
    af84:	b289      	uxth	r1, r1
    af86:	185b      	adds	r3, r3, r1
    af88:	9905      	ldr	r1, [sp, #20]
    af8a:	199b      	adds	r3, r3, r6
    af8c:	0c1e      	lsrs	r6, r3, #16
    af8e:	42a1      	cmp	r1, r4
    af90:	d8e6      	bhi.n	af60 <__multiply+0xd8>
    af92:	6003      	str	r3, [r0, #0]
    af94:	9b00      	ldr	r3, [sp, #0]
    af96:	3204      	adds	r2, #4
    af98:	3304      	adds	r3, #4
    af9a:	9300      	str	r3, [sp, #0]
    af9c:	e7a0      	b.n	aee0 <__multiply+0x58>
    af9e:	9b01      	ldr	r3, [sp, #4]
    afa0:	3b01      	subs	r3, #1
    afa2:	9301      	str	r3, [sp, #4]
    afa4:	e79f      	b.n	aee6 <__multiply+0x5e>
	...

0000afa8 <__pow5mult>:
    afa8:	2303      	movs	r3, #3
    afaa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    afac:	4013      	ands	r3, r2
    afae:	0005      	movs	r5, r0
    afb0:	000e      	movs	r6, r1
    afb2:	0014      	movs	r4, r2
    afb4:	2b00      	cmp	r3, #0
    afb6:	d008      	beq.n	afca <__pow5mult+0x22>
    afb8:	4922      	ldr	r1, [pc, #136]	; (b044 <__pow5mult+0x9c>)
    afba:	3b01      	subs	r3, #1
    afbc:	009a      	lsls	r2, r3, #2
    afbe:	5852      	ldr	r2, [r2, r1]
    afc0:	2300      	movs	r3, #0
    afc2:	0031      	movs	r1, r6
    afc4:	f7ff fed2 	bl	ad6c <__multadd>
    afc8:	0006      	movs	r6, r0
    afca:	10a3      	asrs	r3, r4, #2
    afcc:	9301      	str	r3, [sp, #4]
    afce:	d036      	beq.n	b03e <__pow5mult+0x96>
    afd0:	6a6c      	ldr	r4, [r5, #36]	; 0x24
    afd2:	2c00      	cmp	r4, #0
    afd4:	d107      	bne.n	afe6 <__pow5mult+0x3e>
    afd6:	2010      	movs	r0, #16
    afd8:	f7fe f98e 	bl	92f8 <malloc>
    afdc:	6268      	str	r0, [r5, #36]	; 0x24
    afde:	6044      	str	r4, [r0, #4]
    afe0:	6084      	str	r4, [r0, #8]
    afe2:	6004      	str	r4, [r0, #0]
    afe4:	60c4      	str	r4, [r0, #12]
    afe6:	6a6f      	ldr	r7, [r5, #36]	; 0x24
    afe8:	68bc      	ldr	r4, [r7, #8]
    afea:	2c00      	cmp	r4, #0
    afec:	d107      	bne.n	affe <__pow5mult+0x56>
    afee:	4916      	ldr	r1, [pc, #88]	; (b048 <__pow5mult+0xa0>)
    aff0:	0028      	movs	r0, r5
    aff2:	f7ff ff40 	bl	ae76 <__i2b>
    aff6:	2300      	movs	r3, #0
    aff8:	0004      	movs	r4, r0
    affa:	60b8      	str	r0, [r7, #8]
    affc:	6003      	str	r3, [r0, #0]
    affe:	2201      	movs	r2, #1
    b000:	9b01      	ldr	r3, [sp, #4]
    b002:	4213      	tst	r3, r2
    b004:	d00a      	beq.n	b01c <__pow5mult+0x74>
    b006:	0031      	movs	r1, r6
    b008:	0022      	movs	r2, r4
    b00a:	0028      	movs	r0, r5
    b00c:	f7ff ff3c 	bl	ae88 <__multiply>
    b010:	0007      	movs	r7, r0
    b012:	0031      	movs	r1, r6
    b014:	0028      	movs	r0, r5
    b016:	f7ff fe90 	bl	ad3a <_Bfree>
    b01a:	003e      	movs	r6, r7
    b01c:	9b01      	ldr	r3, [sp, #4]
    b01e:	105b      	asrs	r3, r3, #1
    b020:	9301      	str	r3, [sp, #4]
    b022:	d00c      	beq.n	b03e <__pow5mult+0x96>
    b024:	6820      	ldr	r0, [r4, #0]
    b026:	2800      	cmp	r0, #0
    b028:	d107      	bne.n	b03a <__pow5mult+0x92>
    b02a:	0022      	movs	r2, r4
    b02c:	0021      	movs	r1, r4
    b02e:	0028      	movs	r0, r5
    b030:	f7ff ff2a 	bl	ae88 <__multiply>
    b034:	2300      	movs	r3, #0
    b036:	6020      	str	r0, [r4, #0]
    b038:	6003      	str	r3, [r0, #0]
    b03a:	0004      	movs	r4, r0
    b03c:	e7df      	b.n	affe <__pow5mult+0x56>
    b03e:	0030      	movs	r0, r6
    b040:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    b042:	46c0      	nop			; (mov r8, r8)
    b044:	0000c058 	.word	0x0000c058
    b048:	00000271 	.word	0x00000271

0000b04c <__lshift>:
    b04c:	b5f0      	push	{r4, r5, r6, r7, lr}
    b04e:	000d      	movs	r5, r1
    b050:	0017      	movs	r7, r2
    b052:	692b      	ldr	r3, [r5, #16]
    b054:	1154      	asrs	r4, r2, #5
    b056:	b085      	sub	sp, #20
    b058:	18e3      	adds	r3, r4, r3
    b05a:	9302      	str	r3, [sp, #8]
    b05c:	3301      	adds	r3, #1
    b05e:	9301      	str	r3, [sp, #4]
    b060:	6849      	ldr	r1, [r1, #4]
    b062:	68ab      	ldr	r3, [r5, #8]
    b064:	9003      	str	r0, [sp, #12]
    b066:	9a01      	ldr	r2, [sp, #4]
    b068:	4293      	cmp	r3, r2
    b06a:	db34      	blt.n	b0d6 <__lshift+0x8a>
    b06c:	9803      	ldr	r0, [sp, #12]
    b06e:	f7ff fe2c 	bl	acca <_Balloc>
    b072:	2300      	movs	r3, #0
    b074:	0002      	movs	r2, r0
    b076:	0006      	movs	r6, r0
    b078:	0019      	movs	r1, r3
    b07a:	3214      	adds	r2, #20
    b07c:	42a3      	cmp	r3, r4
    b07e:	db2d      	blt.n	b0dc <__lshift+0x90>
    b080:	43e3      	mvns	r3, r4
    b082:	17db      	asrs	r3, r3, #31
    b084:	401c      	ands	r4, r3
    b086:	002b      	movs	r3, r5
    b088:	211f      	movs	r1, #31
    b08a:	00a4      	lsls	r4, r4, #2
    b08c:	1914      	adds	r4, r2, r4
    b08e:	692a      	ldr	r2, [r5, #16]
    b090:	3314      	adds	r3, #20
    b092:	0092      	lsls	r2, r2, #2
    b094:	189a      	adds	r2, r3, r2
    b096:	400f      	ands	r7, r1
    b098:	d024      	beq.n	b0e4 <__lshift+0x98>
    b09a:	3101      	adds	r1, #1
    b09c:	1bc9      	subs	r1, r1, r7
    b09e:	468c      	mov	ip, r1
    b0a0:	2100      	movs	r1, #0
    b0a2:	6818      	ldr	r0, [r3, #0]
    b0a4:	40b8      	lsls	r0, r7
    b0a6:	4301      	orrs	r1, r0
    b0a8:	4660      	mov	r0, ip
    b0aa:	6021      	str	r1, [r4, #0]
    b0ac:	cb02      	ldmia	r3!, {r1}
    b0ae:	3404      	adds	r4, #4
    b0b0:	40c1      	lsrs	r1, r0
    b0b2:	429a      	cmp	r2, r3
    b0b4:	d8f5      	bhi.n	b0a2 <__lshift+0x56>
    b0b6:	6021      	str	r1, [r4, #0]
    b0b8:	2900      	cmp	r1, #0
    b0ba:	d002      	beq.n	b0c2 <__lshift+0x76>
    b0bc:	9b02      	ldr	r3, [sp, #8]
    b0be:	3302      	adds	r3, #2
    b0c0:	9301      	str	r3, [sp, #4]
    b0c2:	9b01      	ldr	r3, [sp, #4]
    b0c4:	9803      	ldr	r0, [sp, #12]
    b0c6:	3b01      	subs	r3, #1
    b0c8:	6133      	str	r3, [r6, #16]
    b0ca:	0029      	movs	r1, r5
    b0cc:	f7ff fe35 	bl	ad3a <_Bfree>
    b0d0:	0030      	movs	r0, r6
    b0d2:	b005      	add	sp, #20
    b0d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b0d6:	3101      	adds	r1, #1
    b0d8:	005b      	lsls	r3, r3, #1
    b0da:	e7c4      	b.n	b066 <__lshift+0x1a>
    b0dc:	0098      	lsls	r0, r3, #2
    b0de:	5011      	str	r1, [r2, r0]
    b0e0:	3301      	adds	r3, #1
    b0e2:	e7cb      	b.n	b07c <__lshift+0x30>
    b0e4:	cb02      	ldmia	r3!, {r1}
    b0e6:	c402      	stmia	r4!, {r1}
    b0e8:	429a      	cmp	r2, r3
    b0ea:	d8fb      	bhi.n	b0e4 <__lshift+0x98>
    b0ec:	e7e9      	b.n	b0c2 <__lshift+0x76>

0000b0ee <__mcmp>:
    b0ee:	690a      	ldr	r2, [r1, #16]
    b0f0:	6903      	ldr	r3, [r0, #16]
    b0f2:	b530      	push	{r4, r5, lr}
    b0f4:	1a9b      	subs	r3, r3, r2
    b0f6:	d10e      	bne.n	b116 <__mcmp+0x28>
    b0f8:	0092      	lsls	r2, r2, #2
    b0fa:	3014      	adds	r0, #20
    b0fc:	3114      	adds	r1, #20
    b0fe:	1884      	adds	r4, r0, r2
    b100:	1889      	adds	r1, r1, r2
    b102:	3c04      	subs	r4, #4
    b104:	3904      	subs	r1, #4
    b106:	6822      	ldr	r2, [r4, #0]
    b108:	680d      	ldr	r5, [r1, #0]
    b10a:	42aa      	cmp	r2, r5
    b10c:	d005      	beq.n	b11a <__mcmp+0x2c>
    b10e:	42aa      	cmp	r2, r5
    b110:	4192      	sbcs	r2, r2
    b112:	2301      	movs	r3, #1
    b114:	4313      	orrs	r3, r2
    b116:	0018      	movs	r0, r3
    b118:	bd30      	pop	{r4, r5, pc}
    b11a:	42a0      	cmp	r0, r4
    b11c:	d3f1      	bcc.n	b102 <__mcmp+0x14>
    b11e:	e7fa      	b.n	b116 <__mcmp+0x28>

0000b120 <__mdiff>:
    b120:	b5f0      	push	{r4, r5, r6, r7, lr}
    b122:	000d      	movs	r5, r1
    b124:	b085      	sub	sp, #20
    b126:	0007      	movs	r7, r0
    b128:	0011      	movs	r1, r2
    b12a:	0028      	movs	r0, r5
    b12c:	0014      	movs	r4, r2
    b12e:	f7ff ffde 	bl	b0ee <__mcmp>
    b132:	1e06      	subs	r6, r0, #0
    b134:	d108      	bne.n	b148 <__mdiff+0x28>
    b136:	0001      	movs	r1, r0
    b138:	0038      	movs	r0, r7
    b13a:	f7ff fdc6 	bl	acca <_Balloc>
    b13e:	2301      	movs	r3, #1
    b140:	6146      	str	r6, [r0, #20]
    b142:	6103      	str	r3, [r0, #16]
    b144:	b005      	add	sp, #20
    b146:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b148:	2301      	movs	r3, #1
    b14a:	9301      	str	r3, [sp, #4]
    b14c:	2800      	cmp	r0, #0
    b14e:	db04      	blt.n	b15a <__mdiff+0x3a>
    b150:	0023      	movs	r3, r4
    b152:	002c      	movs	r4, r5
    b154:	001d      	movs	r5, r3
    b156:	2300      	movs	r3, #0
    b158:	9301      	str	r3, [sp, #4]
    b15a:	6861      	ldr	r1, [r4, #4]
    b15c:	0038      	movs	r0, r7
    b15e:	f7ff fdb4 	bl	acca <_Balloc>
    b162:	002f      	movs	r7, r5
    b164:	2200      	movs	r2, #0
    b166:	9b01      	ldr	r3, [sp, #4]
    b168:	6926      	ldr	r6, [r4, #16]
    b16a:	60c3      	str	r3, [r0, #12]
    b16c:	3414      	adds	r4, #20
    b16e:	00b3      	lsls	r3, r6, #2
    b170:	18e3      	adds	r3, r4, r3
    b172:	9302      	str	r3, [sp, #8]
    b174:	692b      	ldr	r3, [r5, #16]
    b176:	3714      	adds	r7, #20
    b178:	009b      	lsls	r3, r3, #2
    b17a:	18fb      	adds	r3, r7, r3
    b17c:	9303      	str	r3, [sp, #12]
    b17e:	0003      	movs	r3, r0
    b180:	4694      	mov	ip, r2
    b182:	3314      	adds	r3, #20
    b184:	cc20      	ldmia	r4!, {r5}
    b186:	cf04      	ldmia	r7!, {r2}
    b188:	9201      	str	r2, [sp, #4]
    b18a:	b2aa      	uxth	r2, r5
    b18c:	4494      	add	ip, r2
    b18e:	466a      	mov	r2, sp
    b190:	4661      	mov	r1, ip
    b192:	8892      	ldrh	r2, [r2, #4]
    b194:	0c2d      	lsrs	r5, r5, #16
    b196:	1a8a      	subs	r2, r1, r2
    b198:	9901      	ldr	r1, [sp, #4]
    b19a:	0c09      	lsrs	r1, r1, #16
    b19c:	1a69      	subs	r1, r5, r1
    b19e:	1415      	asrs	r5, r2, #16
    b1a0:	1949      	adds	r1, r1, r5
    b1a2:	140d      	asrs	r5, r1, #16
    b1a4:	b292      	uxth	r2, r2
    b1a6:	0409      	lsls	r1, r1, #16
    b1a8:	430a      	orrs	r2, r1
    b1aa:	601a      	str	r2, [r3, #0]
    b1ac:	9a03      	ldr	r2, [sp, #12]
    b1ae:	46ac      	mov	ip, r5
    b1b0:	3304      	adds	r3, #4
    b1b2:	42ba      	cmp	r2, r7
    b1b4:	d8e6      	bhi.n	b184 <__mdiff+0x64>
    b1b6:	9902      	ldr	r1, [sp, #8]
    b1b8:	001a      	movs	r2, r3
    b1ba:	428c      	cmp	r4, r1
    b1bc:	d305      	bcc.n	b1ca <__mdiff+0xaa>
    b1be:	3a04      	subs	r2, #4
    b1c0:	6813      	ldr	r3, [r2, #0]
    b1c2:	2b00      	cmp	r3, #0
    b1c4:	d00e      	beq.n	b1e4 <__mdiff+0xc4>
    b1c6:	6106      	str	r6, [r0, #16]
    b1c8:	e7bc      	b.n	b144 <__mdiff+0x24>
    b1ca:	cc04      	ldmia	r4!, {r2}
    b1cc:	b291      	uxth	r1, r2
    b1ce:	4461      	add	r1, ip
    b1d0:	140d      	asrs	r5, r1, #16
    b1d2:	0c12      	lsrs	r2, r2, #16
    b1d4:	1952      	adds	r2, r2, r5
    b1d6:	1415      	asrs	r5, r2, #16
    b1d8:	b289      	uxth	r1, r1
    b1da:	0412      	lsls	r2, r2, #16
    b1dc:	430a      	orrs	r2, r1
    b1de:	46ac      	mov	ip, r5
    b1e0:	c304      	stmia	r3!, {r2}
    b1e2:	e7e8      	b.n	b1b6 <__mdiff+0x96>
    b1e4:	3e01      	subs	r6, #1
    b1e6:	e7ea      	b.n	b1be <__mdiff+0x9e>

0000b1e8 <__d2b>:
    b1e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    b1ea:	001d      	movs	r5, r3
    b1ec:	2101      	movs	r1, #1
    b1ee:	9f08      	ldr	r7, [sp, #32]
    b1f0:	0014      	movs	r4, r2
    b1f2:	f7ff fd6a 	bl	acca <_Balloc>
    b1f6:	032b      	lsls	r3, r5, #12
    b1f8:	006d      	lsls	r5, r5, #1
    b1fa:	0006      	movs	r6, r0
    b1fc:	0b1b      	lsrs	r3, r3, #12
    b1fe:	0d6d      	lsrs	r5, r5, #21
    b200:	d124      	bne.n	b24c <__d2b+0x64>
    b202:	9301      	str	r3, [sp, #4]
    b204:	2c00      	cmp	r4, #0
    b206:	d027      	beq.n	b258 <__d2b+0x70>
    b208:	4668      	mov	r0, sp
    b20a:	9400      	str	r4, [sp, #0]
    b20c:	f7ff fe04 	bl	ae18 <__lo0bits>
    b210:	9c00      	ldr	r4, [sp, #0]
    b212:	2800      	cmp	r0, #0
    b214:	d01e      	beq.n	b254 <__d2b+0x6c>
    b216:	9b01      	ldr	r3, [sp, #4]
    b218:	2120      	movs	r1, #32
    b21a:	001a      	movs	r2, r3
    b21c:	1a09      	subs	r1, r1, r0
    b21e:	408a      	lsls	r2, r1
    b220:	40c3      	lsrs	r3, r0
    b222:	4322      	orrs	r2, r4
    b224:	6172      	str	r2, [r6, #20]
    b226:	9301      	str	r3, [sp, #4]
    b228:	9c01      	ldr	r4, [sp, #4]
    b22a:	61b4      	str	r4, [r6, #24]
    b22c:	1e63      	subs	r3, r4, #1
    b22e:	419c      	sbcs	r4, r3
    b230:	3401      	adds	r4, #1
    b232:	6134      	str	r4, [r6, #16]
    b234:	2d00      	cmp	r5, #0
    b236:	d018      	beq.n	b26a <__d2b+0x82>
    b238:	4b12      	ldr	r3, [pc, #72]	; (b284 <__d2b+0x9c>)
    b23a:	18ed      	adds	r5, r5, r3
    b23c:	2335      	movs	r3, #53	; 0x35
    b23e:	182d      	adds	r5, r5, r0
    b240:	603d      	str	r5, [r7, #0]
    b242:	1a18      	subs	r0, r3, r0
    b244:	9b09      	ldr	r3, [sp, #36]	; 0x24
    b246:	6018      	str	r0, [r3, #0]
    b248:	0030      	movs	r0, r6
    b24a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    b24c:	2280      	movs	r2, #128	; 0x80
    b24e:	0352      	lsls	r2, r2, #13
    b250:	4313      	orrs	r3, r2
    b252:	e7d6      	b.n	b202 <__d2b+0x1a>
    b254:	6174      	str	r4, [r6, #20]
    b256:	e7e7      	b.n	b228 <__d2b+0x40>
    b258:	a801      	add	r0, sp, #4
    b25a:	f7ff fddd 	bl	ae18 <__lo0bits>
    b25e:	2401      	movs	r4, #1
    b260:	9b01      	ldr	r3, [sp, #4]
    b262:	6134      	str	r4, [r6, #16]
    b264:	6173      	str	r3, [r6, #20]
    b266:	3020      	adds	r0, #32
    b268:	e7e4      	b.n	b234 <__d2b+0x4c>
    b26a:	4b07      	ldr	r3, [pc, #28]	; (b288 <__d2b+0xa0>)
    b26c:	18c0      	adds	r0, r0, r3
    b26e:	4b07      	ldr	r3, [pc, #28]	; (b28c <__d2b+0xa4>)
    b270:	6038      	str	r0, [r7, #0]
    b272:	18e3      	adds	r3, r4, r3
    b274:	009b      	lsls	r3, r3, #2
    b276:	18f3      	adds	r3, r6, r3
    b278:	6958      	ldr	r0, [r3, #20]
    b27a:	f7ff fdb3 	bl	ade4 <__hi0bits>
    b27e:	0164      	lsls	r4, r4, #5
    b280:	1a20      	subs	r0, r4, r0
    b282:	e7df      	b.n	b244 <__d2b+0x5c>
    b284:	fffffbcd 	.word	0xfffffbcd
    b288:	fffffbce 	.word	0xfffffbce
    b28c:	3fffffff 	.word	0x3fffffff

0000b290 <_calloc_r>:
    b290:	434a      	muls	r2, r1
    b292:	b570      	push	{r4, r5, r6, lr}
    b294:	0011      	movs	r1, r2
    b296:	0014      	movs	r4, r2
    b298:	f7fe f8d0 	bl	943c <_malloc_r>
    b29c:	1e05      	subs	r5, r0, #0
    b29e:	d003      	beq.n	b2a8 <_calloc_r+0x18>
    b2a0:	0022      	movs	r2, r4
    b2a2:	2100      	movs	r1, #0
    b2a4:	f7fe f878 	bl	9398 <memset>
    b2a8:	0028      	movs	r0, r5
    b2aa:	bd70      	pop	{r4, r5, r6, pc}

0000b2ac <_realloc_r>:
    b2ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b2ae:	0007      	movs	r7, r0
    b2b0:	000d      	movs	r5, r1
    b2b2:	0016      	movs	r6, r2
    b2b4:	2900      	cmp	r1, #0
    b2b6:	d105      	bne.n	b2c4 <_realloc_r+0x18>
    b2b8:	0011      	movs	r1, r2
    b2ba:	f7fe f8bf 	bl	943c <_malloc_r>
    b2be:	0004      	movs	r4, r0
    b2c0:	0020      	movs	r0, r4
    b2c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    b2c4:	2a00      	cmp	r2, #0
    b2c6:	d103      	bne.n	b2d0 <_realloc_r+0x24>
    b2c8:	f7fe f86e 	bl	93a8 <_free_r>
    b2cc:	0034      	movs	r4, r6
    b2ce:	e7f7      	b.n	b2c0 <_realloc_r+0x14>
    b2d0:	f000 f978 	bl	b5c4 <_malloc_usable_size_r>
    b2d4:	002c      	movs	r4, r5
    b2d6:	4286      	cmp	r6, r0
    b2d8:	d9f2      	bls.n	b2c0 <_realloc_r+0x14>
    b2da:	0031      	movs	r1, r6
    b2dc:	0038      	movs	r0, r7
    b2de:	f7fe f8ad 	bl	943c <_malloc_r>
    b2e2:	1e04      	subs	r4, r0, #0
    b2e4:	d0ec      	beq.n	b2c0 <_realloc_r+0x14>
    b2e6:	0029      	movs	r1, r5
    b2e8:	0032      	movs	r2, r6
    b2ea:	f7fe f83a 	bl	9362 <memcpy>
    b2ee:	0029      	movs	r1, r5
    b2f0:	0038      	movs	r0, r7
    b2f2:	f7fe f859 	bl	93a8 <_free_r>
    b2f6:	e7e3      	b.n	b2c0 <_realloc_r+0x14>

0000b2f8 <__ssputs_r>:
    b2f8:	b5f0      	push	{r4, r5, r6, r7, lr}
    b2fa:	688e      	ldr	r6, [r1, #8]
    b2fc:	b085      	sub	sp, #20
    b2fe:	0007      	movs	r7, r0
    b300:	000c      	movs	r4, r1
    b302:	9203      	str	r2, [sp, #12]
    b304:	9301      	str	r3, [sp, #4]
    b306:	429e      	cmp	r6, r3
    b308:	d839      	bhi.n	b37e <__ssputs_r+0x86>
    b30a:	2390      	movs	r3, #144	; 0x90
    b30c:	898a      	ldrh	r2, [r1, #12]
    b30e:	00db      	lsls	r3, r3, #3
    b310:	421a      	tst	r2, r3
    b312:	d034      	beq.n	b37e <__ssputs_r+0x86>
    b314:	2503      	movs	r5, #3
    b316:	6909      	ldr	r1, [r1, #16]
    b318:	6823      	ldr	r3, [r4, #0]
    b31a:	1a5b      	subs	r3, r3, r1
    b31c:	9302      	str	r3, [sp, #8]
    b31e:	6963      	ldr	r3, [r4, #20]
    b320:	9802      	ldr	r0, [sp, #8]
    b322:	435d      	muls	r5, r3
    b324:	0feb      	lsrs	r3, r5, #31
    b326:	195d      	adds	r5, r3, r5
    b328:	9b01      	ldr	r3, [sp, #4]
    b32a:	106d      	asrs	r5, r5, #1
    b32c:	3301      	adds	r3, #1
    b32e:	181b      	adds	r3, r3, r0
    b330:	42ab      	cmp	r3, r5
    b332:	d900      	bls.n	b336 <__ssputs_r+0x3e>
    b334:	001d      	movs	r5, r3
    b336:	0553      	lsls	r3, r2, #21
    b338:	d532      	bpl.n	b3a0 <__ssputs_r+0xa8>
    b33a:	0029      	movs	r1, r5
    b33c:	0038      	movs	r0, r7
    b33e:	f7fe f87d 	bl	943c <_malloc_r>
    b342:	1e06      	subs	r6, r0, #0
    b344:	d109      	bne.n	b35a <__ssputs_r+0x62>
    b346:	230c      	movs	r3, #12
    b348:	603b      	str	r3, [r7, #0]
    b34a:	2340      	movs	r3, #64	; 0x40
    b34c:	2001      	movs	r0, #1
    b34e:	89a2      	ldrh	r2, [r4, #12]
    b350:	4240      	negs	r0, r0
    b352:	4313      	orrs	r3, r2
    b354:	81a3      	strh	r3, [r4, #12]
    b356:	b005      	add	sp, #20
    b358:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b35a:	9a02      	ldr	r2, [sp, #8]
    b35c:	6921      	ldr	r1, [r4, #16]
    b35e:	f7fe f800 	bl	9362 <memcpy>
    b362:	89a3      	ldrh	r3, [r4, #12]
    b364:	4a14      	ldr	r2, [pc, #80]	; (b3b8 <__ssputs_r+0xc0>)
    b366:	401a      	ands	r2, r3
    b368:	2380      	movs	r3, #128	; 0x80
    b36a:	4313      	orrs	r3, r2
    b36c:	81a3      	strh	r3, [r4, #12]
    b36e:	9b02      	ldr	r3, [sp, #8]
    b370:	6126      	str	r6, [r4, #16]
    b372:	18f6      	adds	r6, r6, r3
    b374:	6026      	str	r6, [r4, #0]
    b376:	6165      	str	r5, [r4, #20]
    b378:	9e01      	ldr	r6, [sp, #4]
    b37a:	1aed      	subs	r5, r5, r3
    b37c:	60a5      	str	r5, [r4, #8]
    b37e:	9b01      	ldr	r3, [sp, #4]
    b380:	42b3      	cmp	r3, r6
    b382:	d200      	bcs.n	b386 <__ssputs_r+0x8e>
    b384:	001e      	movs	r6, r3
    b386:	0032      	movs	r2, r6
    b388:	9903      	ldr	r1, [sp, #12]
    b38a:	6820      	ldr	r0, [r4, #0]
    b38c:	f7fd fff2 	bl	9374 <memmove>
    b390:	68a3      	ldr	r3, [r4, #8]
    b392:	2000      	movs	r0, #0
    b394:	1b9b      	subs	r3, r3, r6
    b396:	60a3      	str	r3, [r4, #8]
    b398:	6823      	ldr	r3, [r4, #0]
    b39a:	199e      	adds	r6, r3, r6
    b39c:	6026      	str	r6, [r4, #0]
    b39e:	e7da      	b.n	b356 <__ssputs_r+0x5e>
    b3a0:	002a      	movs	r2, r5
    b3a2:	0038      	movs	r0, r7
    b3a4:	f7ff ff82 	bl	b2ac <_realloc_r>
    b3a8:	1e06      	subs	r6, r0, #0
    b3aa:	d1e0      	bne.n	b36e <__ssputs_r+0x76>
    b3ac:	6921      	ldr	r1, [r4, #16]
    b3ae:	0038      	movs	r0, r7
    b3b0:	f7fd fffa 	bl	93a8 <_free_r>
    b3b4:	e7c7      	b.n	b346 <__ssputs_r+0x4e>
    b3b6:	46c0      	nop			; (mov r8, r8)
    b3b8:	fffffb7f 	.word	0xfffffb7f

0000b3bc <_svfiprintf_r>:
    b3bc:	b5f0      	push	{r4, r5, r6, r7, lr}
    b3be:	b09f      	sub	sp, #124	; 0x7c
    b3c0:	9002      	str	r0, [sp, #8]
    b3c2:	9305      	str	r3, [sp, #20]
    b3c4:	898b      	ldrh	r3, [r1, #12]
    b3c6:	000f      	movs	r7, r1
    b3c8:	0016      	movs	r6, r2
    b3ca:	061b      	lsls	r3, r3, #24
    b3cc:	d511      	bpl.n	b3f2 <_svfiprintf_r+0x36>
    b3ce:	690b      	ldr	r3, [r1, #16]
    b3d0:	2b00      	cmp	r3, #0
    b3d2:	d10e      	bne.n	b3f2 <_svfiprintf_r+0x36>
    b3d4:	2140      	movs	r1, #64	; 0x40
    b3d6:	f7fe f831 	bl	943c <_malloc_r>
    b3da:	6038      	str	r0, [r7, #0]
    b3dc:	6138      	str	r0, [r7, #16]
    b3de:	2800      	cmp	r0, #0
    b3e0:	d105      	bne.n	b3ee <_svfiprintf_r+0x32>
    b3e2:	230c      	movs	r3, #12
    b3e4:	9a02      	ldr	r2, [sp, #8]
    b3e6:	3801      	subs	r0, #1
    b3e8:	6013      	str	r3, [r2, #0]
    b3ea:	b01f      	add	sp, #124	; 0x7c
    b3ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b3ee:	2340      	movs	r3, #64	; 0x40
    b3f0:	617b      	str	r3, [r7, #20]
    b3f2:	2300      	movs	r3, #0
    b3f4:	ad06      	add	r5, sp, #24
    b3f6:	616b      	str	r3, [r5, #20]
    b3f8:	3320      	adds	r3, #32
    b3fa:	766b      	strb	r3, [r5, #25]
    b3fc:	3310      	adds	r3, #16
    b3fe:	76ab      	strb	r3, [r5, #26]
    b400:	0034      	movs	r4, r6
    b402:	7823      	ldrb	r3, [r4, #0]
    b404:	2b00      	cmp	r3, #0
    b406:	d147      	bne.n	b498 <_svfiprintf_r+0xdc>
    b408:	1ba3      	subs	r3, r4, r6
    b40a:	9304      	str	r3, [sp, #16]
    b40c:	d00d      	beq.n	b42a <_svfiprintf_r+0x6e>
    b40e:	1ba3      	subs	r3, r4, r6
    b410:	0032      	movs	r2, r6
    b412:	0039      	movs	r1, r7
    b414:	9802      	ldr	r0, [sp, #8]
    b416:	f7ff ff6f 	bl	b2f8 <__ssputs_r>
    b41a:	1c43      	adds	r3, r0, #1
    b41c:	d100      	bne.n	b420 <_svfiprintf_r+0x64>
    b41e:	e0b5      	b.n	b58c <_svfiprintf_r+0x1d0>
    b420:	696a      	ldr	r2, [r5, #20]
    b422:	9b04      	ldr	r3, [sp, #16]
    b424:	4694      	mov	ip, r2
    b426:	4463      	add	r3, ip
    b428:	616b      	str	r3, [r5, #20]
    b42a:	7823      	ldrb	r3, [r4, #0]
    b42c:	2b00      	cmp	r3, #0
    b42e:	d100      	bne.n	b432 <_svfiprintf_r+0x76>
    b430:	e0ac      	b.n	b58c <_svfiprintf_r+0x1d0>
    b432:	2201      	movs	r2, #1
    b434:	2300      	movs	r3, #0
    b436:	4252      	negs	r2, r2
    b438:	606a      	str	r2, [r5, #4]
    b43a:	a902      	add	r1, sp, #8
    b43c:	3254      	adds	r2, #84	; 0x54
    b43e:	1852      	adds	r2, r2, r1
    b440:	3401      	adds	r4, #1
    b442:	602b      	str	r3, [r5, #0]
    b444:	60eb      	str	r3, [r5, #12]
    b446:	60ab      	str	r3, [r5, #8]
    b448:	7013      	strb	r3, [r2, #0]
    b44a:	65ab      	str	r3, [r5, #88]	; 0x58
    b44c:	4e58      	ldr	r6, [pc, #352]	; (b5b0 <_svfiprintf_r+0x1f4>)
    b44e:	2205      	movs	r2, #5
    b450:	7821      	ldrb	r1, [r4, #0]
    b452:	0030      	movs	r0, r6
    b454:	f7ff fc2c 	bl	acb0 <memchr>
    b458:	1c62      	adds	r2, r4, #1
    b45a:	2800      	cmp	r0, #0
    b45c:	d120      	bne.n	b4a0 <_svfiprintf_r+0xe4>
    b45e:	6829      	ldr	r1, [r5, #0]
    b460:	06cb      	lsls	r3, r1, #27
    b462:	d504      	bpl.n	b46e <_svfiprintf_r+0xb2>
    b464:	2353      	movs	r3, #83	; 0x53
    b466:	ae02      	add	r6, sp, #8
    b468:	3020      	adds	r0, #32
    b46a:	199b      	adds	r3, r3, r6
    b46c:	7018      	strb	r0, [r3, #0]
    b46e:	070b      	lsls	r3, r1, #28
    b470:	d504      	bpl.n	b47c <_svfiprintf_r+0xc0>
    b472:	2353      	movs	r3, #83	; 0x53
    b474:	202b      	movs	r0, #43	; 0x2b
    b476:	ae02      	add	r6, sp, #8
    b478:	199b      	adds	r3, r3, r6
    b47a:	7018      	strb	r0, [r3, #0]
    b47c:	7823      	ldrb	r3, [r4, #0]
    b47e:	2b2a      	cmp	r3, #42	; 0x2a
    b480:	d016      	beq.n	b4b0 <_svfiprintf_r+0xf4>
    b482:	2000      	movs	r0, #0
    b484:	210a      	movs	r1, #10
    b486:	9b09      	ldr	r3, [sp, #36]	; 0x24
    b488:	7822      	ldrb	r2, [r4, #0]
    b48a:	3a30      	subs	r2, #48	; 0x30
    b48c:	2a09      	cmp	r2, #9
    b48e:	d955      	bls.n	b53c <_svfiprintf_r+0x180>
    b490:	2800      	cmp	r0, #0
    b492:	d015      	beq.n	b4c0 <_svfiprintf_r+0x104>
    b494:	9309      	str	r3, [sp, #36]	; 0x24
    b496:	e013      	b.n	b4c0 <_svfiprintf_r+0x104>
    b498:	2b25      	cmp	r3, #37	; 0x25
    b49a:	d0b5      	beq.n	b408 <_svfiprintf_r+0x4c>
    b49c:	3401      	adds	r4, #1
    b49e:	e7b0      	b.n	b402 <_svfiprintf_r+0x46>
    b4a0:	2301      	movs	r3, #1
    b4a2:	1b80      	subs	r0, r0, r6
    b4a4:	4083      	lsls	r3, r0
    b4a6:	6829      	ldr	r1, [r5, #0]
    b4a8:	0014      	movs	r4, r2
    b4aa:	430b      	orrs	r3, r1
    b4ac:	602b      	str	r3, [r5, #0]
    b4ae:	e7cd      	b.n	b44c <_svfiprintf_r+0x90>
    b4b0:	9b05      	ldr	r3, [sp, #20]
    b4b2:	1d18      	adds	r0, r3, #4
    b4b4:	681b      	ldr	r3, [r3, #0]
    b4b6:	9005      	str	r0, [sp, #20]
    b4b8:	2b00      	cmp	r3, #0
    b4ba:	db39      	blt.n	b530 <_svfiprintf_r+0x174>
    b4bc:	9309      	str	r3, [sp, #36]	; 0x24
    b4be:	0014      	movs	r4, r2
    b4c0:	7823      	ldrb	r3, [r4, #0]
    b4c2:	2b2e      	cmp	r3, #46	; 0x2e
    b4c4:	d10b      	bne.n	b4de <_svfiprintf_r+0x122>
    b4c6:	7863      	ldrb	r3, [r4, #1]
    b4c8:	1c62      	adds	r2, r4, #1
    b4ca:	2b2a      	cmp	r3, #42	; 0x2a
    b4cc:	d13e      	bne.n	b54c <_svfiprintf_r+0x190>
    b4ce:	9b05      	ldr	r3, [sp, #20]
    b4d0:	3402      	adds	r4, #2
    b4d2:	1d1a      	adds	r2, r3, #4
    b4d4:	681b      	ldr	r3, [r3, #0]
    b4d6:	9205      	str	r2, [sp, #20]
    b4d8:	2b00      	cmp	r3, #0
    b4da:	db34      	blt.n	b546 <_svfiprintf_r+0x18a>
    b4dc:	9307      	str	r3, [sp, #28]
    b4de:	4e35      	ldr	r6, [pc, #212]	; (b5b4 <_svfiprintf_r+0x1f8>)
    b4e0:	7821      	ldrb	r1, [r4, #0]
    b4e2:	2203      	movs	r2, #3
    b4e4:	0030      	movs	r0, r6
    b4e6:	f7ff fbe3 	bl	acb0 <memchr>
    b4ea:	2800      	cmp	r0, #0
    b4ec:	d006      	beq.n	b4fc <_svfiprintf_r+0x140>
    b4ee:	2340      	movs	r3, #64	; 0x40
    b4f0:	1b80      	subs	r0, r0, r6
    b4f2:	4083      	lsls	r3, r0
    b4f4:	682a      	ldr	r2, [r5, #0]
    b4f6:	3401      	adds	r4, #1
    b4f8:	4313      	orrs	r3, r2
    b4fa:	602b      	str	r3, [r5, #0]
    b4fc:	7821      	ldrb	r1, [r4, #0]
    b4fe:	2206      	movs	r2, #6
    b500:	482d      	ldr	r0, [pc, #180]	; (b5b8 <_svfiprintf_r+0x1fc>)
    b502:	1c66      	adds	r6, r4, #1
    b504:	7629      	strb	r1, [r5, #24]
    b506:	f7ff fbd3 	bl	acb0 <memchr>
    b50a:	2800      	cmp	r0, #0
    b50c:	d046      	beq.n	b59c <_svfiprintf_r+0x1e0>
    b50e:	4b2b      	ldr	r3, [pc, #172]	; (b5bc <_svfiprintf_r+0x200>)
    b510:	2b00      	cmp	r3, #0
    b512:	d12f      	bne.n	b574 <_svfiprintf_r+0x1b8>
    b514:	6829      	ldr	r1, [r5, #0]
    b516:	9b05      	ldr	r3, [sp, #20]
    b518:	2207      	movs	r2, #7
    b51a:	05c9      	lsls	r1, r1, #23
    b51c:	d528      	bpl.n	b570 <_svfiprintf_r+0x1b4>
    b51e:	189b      	adds	r3, r3, r2
    b520:	4393      	bics	r3, r2
    b522:	3308      	adds	r3, #8
    b524:	9305      	str	r3, [sp, #20]
    b526:	696b      	ldr	r3, [r5, #20]
    b528:	9a03      	ldr	r2, [sp, #12]
    b52a:	189b      	adds	r3, r3, r2
    b52c:	616b      	str	r3, [r5, #20]
    b52e:	e767      	b.n	b400 <_svfiprintf_r+0x44>
    b530:	425b      	negs	r3, r3
    b532:	60eb      	str	r3, [r5, #12]
    b534:	2302      	movs	r3, #2
    b536:	430b      	orrs	r3, r1
    b538:	602b      	str	r3, [r5, #0]
    b53a:	e7c0      	b.n	b4be <_svfiprintf_r+0x102>
    b53c:	434b      	muls	r3, r1
    b53e:	3401      	adds	r4, #1
    b540:	189b      	adds	r3, r3, r2
    b542:	2001      	movs	r0, #1
    b544:	e7a0      	b.n	b488 <_svfiprintf_r+0xcc>
    b546:	2301      	movs	r3, #1
    b548:	425b      	negs	r3, r3
    b54a:	e7c7      	b.n	b4dc <_svfiprintf_r+0x120>
    b54c:	2300      	movs	r3, #0
    b54e:	0014      	movs	r4, r2
    b550:	200a      	movs	r0, #10
    b552:	001a      	movs	r2, r3
    b554:	606b      	str	r3, [r5, #4]
    b556:	7821      	ldrb	r1, [r4, #0]
    b558:	3930      	subs	r1, #48	; 0x30
    b55a:	2909      	cmp	r1, #9
    b55c:	d903      	bls.n	b566 <_svfiprintf_r+0x1aa>
    b55e:	2b00      	cmp	r3, #0
    b560:	d0bd      	beq.n	b4de <_svfiprintf_r+0x122>
    b562:	9207      	str	r2, [sp, #28]
    b564:	e7bb      	b.n	b4de <_svfiprintf_r+0x122>
    b566:	4342      	muls	r2, r0
    b568:	3401      	adds	r4, #1
    b56a:	1852      	adds	r2, r2, r1
    b56c:	2301      	movs	r3, #1
    b56e:	e7f2      	b.n	b556 <_svfiprintf_r+0x19a>
    b570:	3307      	adds	r3, #7
    b572:	e7d5      	b.n	b520 <_svfiprintf_r+0x164>
    b574:	ab05      	add	r3, sp, #20
    b576:	9300      	str	r3, [sp, #0]
    b578:	003a      	movs	r2, r7
    b57a:	4b11      	ldr	r3, [pc, #68]	; (b5c0 <_svfiprintf_r+0x204>)
    b57c:	0029      	movs	r1, r5
    b57e:	9802      	ldr	r0, [sp, #8]
    b580:	f7fe f856 	bl	9630 <_printf_float>
    b584:	9003      	str	r0, [sp, #12]
    b586:	9b03      	ldr	r3, [sp, #12]
    b588:	3301      	adds	r3, #1
    b58a:	d1cc      	bne.n	b526 <_svfiprintf_r+0x16a>
    b58c:	89bb      	ldrh	r3, [r7, #12]
    b58e:	980b      	ldr	r0, [sp, #44]	; 0x2c
    b590:	065b      	lsls	r3, r3, #25
    b592:	d400      	bmi.n	b596 <_svfiprintf_r+0x1da>
    b594:	e729      	b.n	b3ea <_svfiprintf_r+0x2e>
    b596:	2001      	movs	r0, #1
    b598:	4240      	negs	r0, r0
    b59a:	e726      	b.n	b3ea <_svfiprintf_r+0x2e>
    b59c:	ab05      	add	r3, sp, #20
    b59e:	9300      	str	r3, [sp, #0]
    b5a0:	003a      	movs	r2, r7
    b5a2:	4b07      	ldr	r3, [pc, #28]	; (b5c0 <_svfiprintf_r+0x204>)
    b5a4:	0029      	movs	r1, r5
    b5a6:	9802      	ldr	r0, [sp, #8]
    b5a8:	f7fe fafc 	bl	9ba4 <_printf_i>
    b5ac:	e7ea      	b.n	b584 <_svfiprintf_r+0x1c8>
    b5ae:	46c0      	nop			; (mov r8, r8)
    b5b0:	0000c064 	.word	0x0000c064
    b5b4:	0000c06a 	.word	0x0000c06a
    b5b8:	0000c06e 	.word	0x0000c06e
    b5bc:	00009631 	.word	0x00009631
    b5c0:	0000b2f9 	.word	0x0000b2f9

0000b5c4 <_malloc_usable_size_r>:
    b5c4:	1f0b      	subs	r3, r1, #4
    b5c6:	681b      	ldr	r3, [r3, #0]
    b5c8:	1f18      	subs	r0, r3, #4
    b5ca:	2b00      	cmp	r3, #0
    b5cc:	da01      	bge.n	b5d2 <_malloc_usable_size_r+0xe>
    b5ce:	580b      	ldr	r3, [r1, r0]
    b5d0:	18c0      	adds	r0, r0, r3
    b5d2:	4770      	bx	lr

0000b5d4 <__aeabi_i2d>:
    b5d4:	b570      	push	{r4, r5, r6, lr}
    b5d6:	2800      	cmp	r0, #0
    b5d8:	d030      	beq.n	b63c <__aeabi_i2d+0x68>
    b5da:	17c3      	asrs	r3, r0, #31
    b5dc:	18c4      	adds	r4, r0, r3
    b5de:	405c      	eors	r4, r3
    b5e0:	0fc5      	lsrs	r5, r0, #31
    b5e2:	0020      	movs	r0, r4
    b5e4:	f7fd fe34 	bl	9250 <__clzsi2>
    b5e8:	4b17      	ldr	r3, [pc, #92]	; (b648 <__aeabi_i2d+0x74>)
    b5ea:	4a18      	ldr	r2, [pc, #96]	; (b64c <__aeabi_i2d+0x78>)
    b5ec:	1a1b      	subs	r3, r3, r0
    b5ee:	1ad2      	subs	r2, r2, r3
    b5f0:	2a1f      	cmp	r2, #31
    b5f2:	dd18      	ble.n	b626 <__aeabi_i2d+0x52>
    b5f4:	4a16      	ldr	r2, [pc, #88]	; (b650 <__aeabi_i2d+0x7c>)
    b5f6:	1ad2      	subs	r2, r2, r3
    b5f8:	4094      	lsls	r4, r2
    b5fa:	2200      	movs	r2, #0
    b5fc:	0324      	lsls	r4, r4, #12
    b5fe:	055b      	lsls	r3, r3, #21
    b600:	0b24      	lsrs	r4, r4, #12
    b602:	0d5b      	lsrs	r3, r3, #21
    b604:	2100      	movs	r1, #0
    b606:	0010      	movs	r0, r2
    b608:	0324      	lsls	r4, r4, #12
    b60a:	0d0a      	lsrs	r2, r1, #20
    b60c:	0b24      	lsrs	r4, r4, #12
    b60e:	0512      	lsls	r2, r2, #20
    b610:	4322      	orrs	r2, r4
    b612:	4c10      	ldr	r4, [pc, #64]	; (b654 <__aeabi_i2d+0x80>)
    b614:	051b      	lsls	r3, r3, #20
    b616:	4022      	ands	r2, r4
    b618:	4313      	orrs	r3, r2
    b61a:	005b      	lsls	r3, r3, #1
    b61c:	07ed      	lsls	r5, r5, #31
    b61e:	085b      	lsrs	r3, r3, #1
    b620:	432b      	orrs	r3, r5
    b622:	0019      	movs	r1, r3
    b624:	bd70      	pop	{r4, r5, r6, pc}
    b626:	0021      	movs	r1, r4
    b628:	4091      	lsls	r1, r2
    b62a:	000a      	movs	r2, r1
    b62c:	210b      	movs	r1, #11
    b62e:	1a08      	subs	r0, r1, r0
    b630:	40c4      	lsrs	r4, r0
    b632:	055b      	lsls	r3, r3, #21
    b634:	0324      	lsls	r4, r4, #12
    b636:	0b24      	lsrs	r4, r4, #12
    b638:	0d5b      	lsrs	r3, r3, #21
    b63a:	e7e3      	b.n	b604 <__aeabi_i2d+0x30>
    b63c:	2500      	movs	r5, #0
    b63e:	2300      	movs	r3, #0
    b640:	2400      	movs	r4, #0
    b642:	2200      	movs	r2, #0
    b644:	e7de      	b.n	b604 <__aeabi_i2d+0x30>
    b646:	46c0      	nop			; (mov r8, r8)
    b648:	0000041e 	.word	0x0000041e
    b64c:	00000433 	.word	0x00000433
    b650:	00000413 	.word	0x00000413
    b654:	800fffff 	.word	0x800fffff

0000b658 <_sbrk>:
    b658:	4a04      	ldr	r2, [pc, #16]	; (b66c <_sbrk+0x14>)
    b65a:	6813      	ldr	r3, [r2, #0]
    b65c:	2b00      	cmp	r3, #0
    b65e:	d003      	beq.n	b668 <_sbrk+0x10>
    b660:	1818      	adds	r0, r3, r0
    b662:	6010      	str	r0, [r2, #0]
    b664:	0018      	movs	r0, r3
    b666:	4770      	bx	lr
    b668:	4b01      	ldr	r3, [pc, #4]	; (b670 <_sbrk+0x18>)
    b66a:	e7f9      	b.n	b660 <_sbrk+0x8>
    b66c:	200010a8 	.word	0x200010a8
    b670:	200010b0 	.word	0x200010b0

0000b674 <_init>:
    b674:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b676:	46c0      	nop			; (mov r8, r8)
    b678:	bcf8      	pop	{r3, r4, r5, r6, r7}
    b67a:	bc08      	pop	{r3}
    b67c:	469e      	mov	lr, r3
    b67e:	4770      	bx	lr

0000b680 <_fini>:
    b680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b682:	46c0      	nop			; (mov r8, r8)
    b684:	bcf8      	pop	{r3, r4, r5, r6, r7}
    b686:	bc08      	pop	{r3}
    b688:	469e      	mov	lr, r3
    b68a:	4770      	bx	lr

0000b68c <_ZTV12BLEAttribute>:
	...
    b694:	2115 0000 211b 0000 2117 0000               .!...!...!..

0000b6a0 <_ZTV17BLECharacteristic>:
	...
    b6a8:	2179 0000 21a5 0000 3025 7832 253a 3230     y!...!..%02x:%02
    b6b8:	3a78 3025 7832 253a 3230 3a78 3025 7832     x:%02x:%02x:%02x
    b6c8:	253a 3230 0078 0000                         :%02x...

0000b6d0 <_ZTV9BLEDevice>:
	...
    b6d8:	222b 0000 222d 0000 2239 0000 2249 0000     +"..-"..9"..I"..
    b6e8:	231d 0000 2259 0000 227d 0000 22b1 0000     .#..Y"..}"..."..
    b6f8:	22cd 0000 22fd 0000 2349 0000               ."..."..I#..

0000b704 <_ZTV10BLEService>:
	...
    b70c:	23ad 0000 23d9 0000                         .#...#..

0000b714 <_ZTV23BLEStringCharacteristic>:
	...
    b71c:	2459 0000 246d 0000                         Y$..m$..

0000b724 <_ZTV22BLETypedCharacteristicIhE>:
	...
    b72c:	24a9 0000 24bd 0000                         .$...$..

0000b734 <_ZTV21BLEByteCharacteristic>:
	...
    b73c:	24d1 0000 24e5 0000                         .$...$..

0000b744 <_ZTV22BLETypedCharacteristicItE>:
	...
    b74c:	24f9 0000 250d 0000                         .$...%..

0000b754 <_ZTV21BLEWordCharacteristic>:
	...
    b75c:	2521 0000 2535 0000 3932 3230 0000 0000     !%..5%..2902....

0000b76c <_ZTV22BLELocalCharacteristic>:
	...
    b774:	2839 0000 289d 0000 264d 0000               9(...(..M&..

0000b780 <_ZTV18BLELocalDescriptor>:
	...
    b788:	29c5 0000 29dd 0000 29bd 0000               .)...)...)..

0000b794 <_ZTV14BLELocalDevice>:
	...
    b79c:	2a41 0000 2a59 0000 2239 0000 2249 0000     A*..Y*..9"..I"..
    b7ac:	2a6d 0000 2a85 0000 2a95 0000 2c61 0000     m*...*...*..a,..
    b7bc:	2a29 0000 2a2d 0000 2a37 0000               )*..-*..7*..

0000b7c8 <_ZTV15BLELocalService>:
	...
    b7d0:	2d55 0000 2db1 0000 2c91 0000               U-...-...,..

0000b7dc <_ZTV8ATTClass>:
	...
    b7e4:	2dc5 0000 2de1 0000                         .-...-..

0000b7ec <_ZTV8GAPClass>:
	...
    b7f4:	3e11 0000 3e13 0000 7241 7564 6e69 006f     .>...>..Arduino.
    b804:	3831 3030 3200 3061 0030 6132 3130 3100     1800.2a00.2a01.1
    b814:	3038 0031 6132 3530 0000 0000               801.2a05....

0000b820 <_ZTV9GATTClass>:
	...
    b828:	42b1 0000 42f9 0000 4348 2049 4341 444c     .B...B..HCI ACLD
    b838:	5441 2041 5854 2d20 203e 4800 4943 4320     ATA TX -> .HCI C
    b848:	4d4f 414d 444e 5420 2058 3e2d 0020 4348     OMMAND TX -> .HC
    b858:	2049 4341 444c 5441 2041 5852 3c20 202d     I ACLDATA RX <- 
    b868:	4800 4943 4520 4556 544e 5220 2058 2d3c     .HCI EVENT RX <-
    b878:	0020 0000                                    ...

0000b87c <_ZTV8HCIClass>:
	...
    b884:	430b 0000 430d 0000                         .C...C..

0000b88c <HCITransport>:
    b88c:	05a0 2000                                   ... 

0000b890 <_ZTV21HCIUartTransportClass>:
	...
    b898:	49df 0000 49f1 0000 4a47 0000 49fd 0000     .I...I..GJ...I..
    b8a8:	4a09 0000 4a15 0000 4a21 0000 49dd 0000     .J...J..!J...I..
    b8b8:	4a3b 0000                                   ;J..

0000b8bc <_ZTV19L2CAPSignalingClass>:
	...
    b8c4:	4aa1 0000 4aa3 0000 6f63 6e6e 6365 6574     .J...J..connecte
    b8d4:	2064 6f74 6320 6e65 7274 6c61 203a 6400     d to central: .d
    b8e4:	7369 6f63 6e6e 6365 6574 2064 7266 6d6f     isconnected from
    b8f4:	6320 6e65 7274 6c61 203a 7300 6174 7472      central: .start
    b904:	6e69 2067 4c42 2045 6166 6c69 6465 0021     ing BLE failed!.
    b914:	6177 7469 6e69 2067 6f66 2072 4c42 2045     waiting for BLE 
    b924:	6f63 6e6e 6365 6974 6e6f 3100 3138 0036     connection.1816.
    b934:	4132 4235 3200 3541 0043 4132 4435 4b00     2A5B.2A5C.2A5D.K
    b944:	522d 6c6f 656c 0072 3831 4130 3200 3241     -Roller.180A.2A2
    b954:	0039 4132 3432 3200 3241 0035 6544 6976     9.2A24.2A25.Devi
    b964:	6563 6e49 6f66 6d72 7461 6f69 006e 6552     ceInformation.Re
    b974:	6461 6544 6973 6e67 6554 6863 5200 5444     adDesignTech.RDT
    b984:	312d 5300 2d4e 3030 3030 3130 0d00 000a     -1.SN-000001....

0000b994 <_ZTV7Serial_>:
	...
    b99c:	5771 0000 579d 0000 576d 0000 5791 0000     qW...W..mW...W..
    b9ac:	5785 0000 57d5 0000 57b9 0000               .W...W...W..

0000b9b8 <_ZTV26DoubleBufferedEPOutHandler>:
	...
    b9c0:	5c63 0000 5b45 0000 5aa1 0000 5909 0000     c\..E[...Z...Y..
    b9d0:	591d 0000                                   .Y..

0000b9d4 <_ZL14STRING_PRODUCT>:
    b9d4:	7241 7564 6e69 206f 4b4d 2052 6957 6946     Arduino MKR WiFi
    b9e4:	3120 3130 0030                               1010.

0000b9ea <_ZL15STRING_LANGUAGE>:
    b9ea:	0304 0409                                   ....

0000b9ee <_ZL19STRING_MANUFACTURER>:
    b9ee:	7241 7564 6e69 206f 4c4c 0043               Arduino LLC.

0000b9fa <_ZL21USB_DeviceDescriptorB>:
    b9fa:	0112 0200 02ef 4001 2341 8054 0100 0201     .......@A#T.....
    ba0a:	0103                                        ..

0000ba0c <g_APinDescription>:
    ba0c:	0000 0000 0016 0000 0008 0000 001c 0000     ................
    ba1c:	00ff 0400 0400 0006 0000 0000 0017 0000     ................
    ba2c:	0008 0000 001c 0000 00ff 0401 0401 0007     ................
    ba3c:	0000 0000 000a 0000 0008 0000 001c 0000     ................
    ba4c:	0012 0100 0100 00ff 0000 0000 000b 0000     ................
    ba5c:	0008 0000 001c 0000 0013 0101 0101 00ff     ................
    ba6c:	0001 0000 000a 0000 0008 0000 001c 0000     ................
    ba7c:	00ff 0500 0500 000a 0001 0000 000b 0000     ................
    ba8c:	0008 0000 001c 0000 00ff 0501 0501 000b     ................
    ba9c:	0000 0000 0014 0000 0008 0000 002c 0000     ............,...
    baac:	00ff 0002 0002 0004 0000 0000 0015 0000     ................
    babc:	0008 0000 002c 0000 00ff 0003 0003 0005     ....,...........
    bacc:	0000 0000 0010 0000 0002 0000 001c 0000     ................
    badc:	00ff 0200 0200 0000 0000 0000 0011 0000     ................
    baec:	0002 0000 0004 0000 00ff ffff ffff 0001     ................
    bafc:	0000 0000 0013 0000 0002 0000 001c 0000     ................
    bb0c:	00ff 0301 0301 00ff 0000 0000 0008 0000     ................
    bb1c:	0003 0000 0004 0000 0010 ffff ffff 0010     ................
    bb2c:	0000 0000 0009 0000 0003 0000 0004 0000     ................
    bb3c:	0011 ffff ffff 00ff 0001 0000 0017 0000     ................
    bb4c:	0003 0000 0004 0000 00ff ffff ffff 00ff     ................
    bb5c:	0001 0000 0016 0000 0003 0000 0004 0000     ................
    bb6c:	00ff ffff ffff 00ff 0000 0000 0002 0000     ................
    bb7c:	0001 0000 0006 0000 0000 ffff ffff 00ff     ................
    bb8c:	0001 0000 0002 0000 0001 0000 0004 0000     ................
    bb9c:	000a ffff ffff 0002 0001 0000 0003 0000     ................
    bbac:	0001 0000 0004 0000 000b ffff ffff 0003     ................
    bbbc:	0000 0000 0004 0000 0001 0000 001c 0000     ................
    bbcc:	0004 0000 0000 00ff 0000 0000 0005 0000     ................
    bbdc:	0001 0000 001c 0000 0005 0001 0001 00ff     ................
    bbec:	0000 0000 0006 0000 0001 0000 0004 0000     ................
    bbfc:	0006 ffff ffff 00ff 0000 0000 0007 0000     ................
    bc0c:	0001 0000 0004 0000 0007 ffff ffff 00ff     ................
    bc1c:	0000 0000 0018 0000 0006 0000 0000 0000     ................
    bc2c:	00ff ffff ffff 00ff 0000 0000 0019 0000     ................
    bc3c:	0006 0000 0000 0000 00ff ffff ffff 00ff     ................
    bc4c:	0000 0000 0012 0000 0008 0000 0004 0000     ................
    bc5c:	00ff ffff ffff 00ff 0000 0000 0003 0000     ................
    bc6c:	0008 0000 0004 0000 00ff ffff ffff 00ff     ................
    bc7c:	0000 0000 000c 0000 0003 0000 0000 0000     ................
    bc8c:	00ff ffff ffff 00ff 0000 0000 000d 0000     ................
    bc9c:	0003 0000 0000 0000 00ff ffff ffff 00ff     ................
    bcac:	0000 0000 000e 0000 0008 0000 0000 0000     ................
    bcbc:	00ff ffff ffff 00ff 0000 0000 000f 0000     ................
    bccc:	0003 0000 0000 0000 00ff ffff ffff 00ff     ................
    bcdc:	0000 0000 001b 0000 0008 0000 0000 0000     ................
    bcec:	00ff ffff ffff 000f 0001 0000 0008 0000     ................
    bcfc:	0008 0000 0006 0000 0002 ffff ffff 00ff     ................
    bd0c:	0001 0000 0009 0000 0001 0000 0018 0000     ................
    bd1c:	0003 0401 0401 0009 0000 0000 0000 0000     ................
    bd2c:	0008 0000 0000 0000 00ff ffff ffff 00ff     ................
    bd3c:	0000 0000 0001 0000 0008 0000 0000 0000     ................
    bd4c:	00ff ffff ffff 00ff 0000 0000 001c 0000     ................
    bd5c:	0008 0000 0004 0000 00ff ffff ffff 00ff     ................

0000bd6c <_ZTV4Uart>:
	...
    bd74:	724d 0000 5459 0000 7173 0000 712f 0000     Mr..YT..sq../q..
    bd84:	7149 0000 7301 0000 6e89 0000 6e79 0000     Iq...s...n..yn..
    bd94:	6f0d 0000 6ea3 0000 6e75 0000 7f9c 0000     .o...n..un......
    bda4:	7f7e 0000 7f38 0000 7e56 0000 7f38 0000     ~...8...V~..8...
    bdb4:	7f70 0000 7f38 0000 7e56 0000 7f7e 0000     p...8...V~..~...
    bdc4:	7f7e 0000 7f70 0000 7e56 0000 7e4e 0000     ~...p...V~..N~..
    bdd4:	7e4e 0000 7e4e 0000 81b4 0000 87fc 0000     N~..N~..........
    bde4:	86bc 0000 86bc 0000 86b8 0000 87d4 0000     ................
    bdf4:	87d4 0000 87c6 0000 86b8 0000 87d4 0000     ................
    be04:	87c6 0000 87d4 0000 86b8 0000 87dc 0000     ................
    be14:	87dc 0000 87dc 0000 89e0 0000 4f50 4953     ............POSI
    be24:	0058 002e 4e49 0046 6e69 0066 414e 004e     X...INF.inf.NAN.
    be34:	616e 006e 3130 3332 3534 3736 3938 4241     nan.0123456789AB
    be44:	4443 4645 3000 3231 3433 3635 3837 6139     CDEF.0123456789a
    be54:	6362 6564 0066                              bcdef.

0000be5a <_ctype_>:
    be5a:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
    be6a:	2020 2020 2020 2020 2020 2020 2020 2020                     
    be7a:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
    be8a:	0410 0404 0404 0404 0404 1004 1010 1010     ................
    be9a:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
    beaa:	0101 0101 0101 0101 0101 0101 1010 1010     ................
    beba:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
    beca:	0202 0202 0202 0202 0202 0202 1010 1010     ................
    beda:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...
    bf5a:	4900 666e 6e69 7469 0079 614e 004e          .Infinity.NaN.

0000bf68 <__mprec_bigtens>:
    bf68:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
    bf78:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
    bf88:	bf3c 7f73 4fdd 7515                         <.s..O.u

0000bf90 <__mprec_tens>:
    bf90:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
    bfa0:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
    bfb0:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
    bfc0:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
    bfd0:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
    bfe0:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
    bff0:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
    c000:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
    c010:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
    c020:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
    c030:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
    c040:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
    c050:	9db4 79d9 7843 44ea                         ...yCx.D

0000c058 <p05.6047>:
    c058:	0005 0000 0019 0000 007d 0000 2d23 2b30     ........}...#-0+
    c068:	0020 6c68 004c 6665 4567 4746 0000 0000      .hlL.efgEFG....

0000c078 <__EH_FRAME_BEGIN__>:
    c078:	0000 0000                                   ....
