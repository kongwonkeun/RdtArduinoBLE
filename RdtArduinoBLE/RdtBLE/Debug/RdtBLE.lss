
RdtBLE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000a01c  00002000  00002000  00002000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000002a0  20000000  0000c01c  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000dd4  200002a0  0000c2bc  000102a0  2**2
                  ALLOC
  3 .ARM.attributes 00000028  00000000  00000000  000102a0  2**0
                  CONTENTS, READONLY
  4 .comment      00000059  00000000  00000000  000102c8  2**0
                  CONTENTS, READONLY
  5 .debug_info   000b4cc1  00000000  00000000  00010321  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000dfb6  00000000  00000000  000c4fe2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_loc    000147a8  00000000  00000000  000d2f98  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_aranges 000017e0  00000000  00000000  000e7740  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00002a10  00000000  00000000  000e8f20  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_macro  000232f1  00000000  00000000  000eb930  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0001c6d4  00000000  00000000  0010ec21  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    0008b07a  00000000  00000000  0012b2f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00004aac  00000000  00000000  001b6370  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00002000 <exception_table>:
    2000:	00 80 00 20 a1 51 00 00 89 51 00 00 89 51 00 00     ... .Q...Q...Q..
	...
    202c:	89 51 00 00 00 00 00 00 00 00 00 00 89 51 00 00     .Q...........Q..
    203c:	f5 51 00 00 89 51 00 00 89 51 00 00 89 51 00 00     .Q...Q...Q...Q..
    204c:	89 51 00 00 89 51 00 00 89 51 00 00 89 51 00 00     .Q...Q...Q...Q..
    205c:	8d 51 00 00 89 51 00 00 89 51 00 00 89 51 00 00     .Q...Q...Q...Q..
    206c:	89 51 00 00 89 51 00 00 a1 6a 00 00 91 6a 00 00     .Q...Q...j...j..
    207c:	89 51 00 00 89 51 00 00 89 51 00 00 89 51 00 00     .Q...Q...Q...Q..
    208c:	89 51 00 00 0d 51 00 00 89 51 00 00 89 51 00 00     .Q...Q...Q...Q..
    209c:	89 51 00 00 89 51 00 00 89 51 00 00 89 51 00 00     .Q...Q...Q...Q..
    20ac:	89 51 00 00 00 00 00 00                             .Q......

000020b4 <__do_global_dtors_aux>:
    20b4:	b510      	push	{r4, lr}
    20b6:	4c06      	ldr	r4, [pc, #24]	; (20d0 <__do_global_dtors_aux+0x1c>)
    20b8:	7823      	ldrb	r3, [r4, #0]
    20ba:	2b00      	cmp	r3, #0
    20bc:	d107      	bne.n	20ce <__do_global_dtors_aux+0x1a>
    20be:	4b05      	ldr	r3, [pc, #20]	; (20d4 <__do_global_dtors_aux+0x20>)
    20c0:	2b00      	cmp	r3, #0
    20c2:	d002      	beq.n	20ca <__do_global_dtors_aux+0x16>
    20c4:	4804      	ldr	r0, [pc, #16]	; (20d8 <__do_global_dtors_aux+0x24>)
    20c6:	e000      	b.n	20ca <__do_global_dtors_aux+0x16>
    20c8:	bf00      	nop
    20ca:	2301      	movs	r3, #1
    20cc:	7023      	strb	r3, [r4, #0]
    20ce:	bd10      	pop	{r4, pc}
    20d0:	200002a0 	.word	0x200002a0
    20d4:	00000000 	.word	0x00000000
    20d8:	0000c018 	.word	0x0000c018

000020dc <frame_dummy>:
    20dc:	4b08      	ldr	r3, [pc, #32]	; (2100 <frame_dummy+0x24>)
    20de:	b510      	push	{r4, lr}
    20e0:	2b00      	cmp	r3, #0
    20e2:	d003      	beq.n	20ec <frame_dummy+0x10>
    20e4:	4907      	ldr	r1, [pc, #28]	; (2104 <frame_dummy+0x28>)
    20e6:	4808      	ldr	r0, [pc, #32]	; (2108 <frame_dummy+0x2c>)
    20e8:	e000      	b.n	20ec <frame_dummy+0x10>
    20ea:	bf00      	nop
    20ec:	4807      	ldr	r0, [pc, #28]	; (210c <frame_dummy+0x30>)
    20ee:	6803      	ldr	r3, [r0, #0]
    20f0:	2b00      	cmp	r3, #0
    20f2:	d100      	bne.n	20f6 <frame_dummy+0x1a>
    20f4:	bd10      	pop	{r4, pc}
    20f6:	4b06      	ldr	r3, [pc, #24]	; (2110 <frame_dummy+0x34>)
    20f8:	2b00      	cmp	r3, #0
    20fa:	d0fb      	beq.n	20f4 <frame_dummy+0x18>
    20fc:	4798      	blx	r3
    20fe:	e7f9      	b.n	20f4 <frame_dummy+0x18>
    2100:	00000000 	.word	0x00000000
    2104:	200002a4 	.word	0x200002a4
    2108:	0000c018 	.word	0x0000c018
    210c:	20000294 	.word	0x20000294
    2110:	00000000 	.word	0x00000000

00002114 <_ZN12BLEAttributeD1Ev>:
{
}

BLEAttribute::~BLEAttribute()
{
}
    2114:	4770      	bx	lr

00002116 <_ZNK12BLEAttribute4typeEv>:
}

enum BLEAttributeType BLEAttribute::type() const
{
  return BLETypeUnknown;
}
    2116:	2000      	movs	r0, #0
    2118:	4770      	bx	lr

0000211a <_ZN12BLEAttributeD0Ev>:
BLEAttribute::~BLEAttribute()
    211a:	b510      	push	{r4, lr}
    211c:	0004      	movs	r4, r0
}
    211e:	f003 f8f7 	bl	5310 <_ZdlPv>
    2122:	0020      	movs	r0, r4
    2124:	bd10      	pop	{r4, pc}
	...

00002128 <_ZN12BLEAttributeC1EPKc>:
  _refCount(0)
    2128:	4b05      	ldr	r3, [pc, #20]	; (2140 <_ZN12BLEAttributeC1EPKc+0x18>)
BLEAttribute::BLEAttribute(const char* uuid) :
    212a:	b510      	push	{r4, lr}
  _refCount(0)
    212c:	3308      	adds	r3, #8
BLEAttribute::BLEAttribute(const char* uuid) :
    212e:	0004      	movs	r4, r0
  _refCount(0)
    2130:	c008      	stmia	r0!, {r3}
    2132:	f000 fa21 	bl	2578 <_ZN7BLEUuidC1EPKc>
    2136:	2300      	movs	r3, #0
}
    2138:	0020      	movs	r0, r4
  _refCount(0)
    213a:	61e3      	str	r3, [r4, #28]
}
    213c:	bd10      	pop	{r4, pc}
    213e:	46c0      	nop			; (mov r8, r8)
    2140:	0000b57c 	.word	0x0000b57c

00002144 <_ZNK12BLEAttribute4uuidEv>:
{
    2144:	b510      	push	{r4, lr}
  return _uuid.str();
    2146:	3004      	adds	r0, #4
    2148:	f000 fa50 	bl	25ec <_ZNK7BLEUuid3strEv>
}
    214c:	bd10      	pop	{r4, pc}

0000214e <_ZNK12BLEAttribute8uuidDataEv>:
{
    214e:	b510      	push	{r4, lr}
  return _uuid.data();
    2150:	3004      	adds	r0, #4
    2152:	f000 fa4d 	bl	25f0 <_ZNK7BLEUuid4dataEv>
}
    2156:	bd10      	pop	{r4, pc}

00002158 <_ZNK12BLEAttribute10uuidLengthEv>:
{
    2158:	b510      	push	{r4, lr}
  return _uuid.length();
    215a:	3004      	adds	r0, #4
    215c:	f000 fa4a 	bl	25f4 <_ZNK7BLEUuid6lengthEv>
}
    2160:	bd10      	pop	{r4, pc}

00002162 <_ZN12BLEAttribute6retainEv>:

int BLEAttribute::retain()
{
  _refCount++;
    2162:	69c3      	ldr	r3, [r0, #28]
    2164:	3301      	adds	r3, #1
    2166:	61c3      	str	r3, [r0, #28]

  return _refCount;
}
    2168:	0018      	movs	r0, r3
    216a:	4770      	bx	lr

0000216c <_ZN12BLEAttribute7releaseEv>:

int BLEAttribute::release()
{
  _refCount--;
    216c:	69c3      	ldr	r3, [r0, #28]
    216e:	3b01      	subs	r3, #1
    2170:	61c3      	str	r3, [r0, #28]

  return _refCount;
}
    2172:	0018      	movs	r0, r3
    2174:	4770      	bx	lr
	...

00002178 <_ZN17BLECharacteristicD1Ev>:
BLECharacteristic::BLECharacteristic(const char* uuid, uint8_t properties, const char* value) :
  BLECharacteristic(new BLELocalCharacteristic(uuid, properties, value))
{
}

BLECharacteristic::~BLECharacteristic()
    2178:	4b09      	ldr	r3, [pc, #36]	; (21a0 <_ZN17BLECharacteristicD1Ev+0x28>)
    217a:	b510      	push	{r4, lr}
    217c:	3308      	adds	r3, #8
    217e:	0004      	movs	r4, r0
    2180:	6003      	str	r3, [r0, #0]
{
  if (_local && _local->release() <= 0) {
    2182:	6840      	ldr	r0, [r0, #4]
    2184:	2800      	cmp	r0, #0
    2186:	d009      	beq.n	219c <_ZN17BLECharacteristicD1Ev+0x24>
    2188:	f7ff fff0 	bl	216c <_ZN12BLEAttribute7releaseEv>
    218c:	2800      	cmp	r0, #0
    218e:	dc05      	bgt.n	219c <_ZN17BLECharacteristicD1Ev+0x24>
    delete _local;
    2190:	6860      	ldr	r0, [r4, #4]
    2192:	2800      	cmp	r0, #0
    2194:	d002      	beq.n	219c <_ZN17BLECharacteristicD1Ev+0x24>
    2196:	6803      	ldr	r3, [r0, #0]
    2198:	685b      	ldr	r3, [r3, #4]
    219a:	4798      	blx	r3
  }
}
    219c:	0020      	movs	r0, r4
    219e:	bd10      	pop	{r4, pc}
    21a0:	0000b590 	.word	0x0000b590

000021a4 <_ZN17BLECharacteristicD0Ev>:
BLECharacteristic::~BLECharacteristic()
    21a4:	b510      	push	{r4, lr}
    21a6:	0004      	movs	r4, r0
}
    21a8:	f7ff ffe6 	bl	2178 <_ZN17BLECharacteristicD1Ev>
    21ac:	0020      	movs	r0, r4
    21ae:	f003 f8af 	bl	5310 <_ZdlPv>
    21b2:	0020      	movs	r0, r4
    21b4:	bd10      	pop	{r4, pc}
	...

000021b8 <_ZN17BLECharacteristicC1EP22BLELocalCharacteristic>:
  _local(local)
    21b8:	4b06      	ldr	r3, [pc, #24]	; (21d4 <_ZN17BLECharacteristicC1EP22BLELocalCharacteristic+0x1c>)
BLECharacteristic::BLECharacteristic(BLELocalCharacteristic* local) :
    21ba:	b510      	push	{r4, lr}
  _local(local)
    21bc:	3308      	adds	r3, #8
BLECharacteristic::BLECharacteristic(BLELocalCharacteristic* local) :
    21be:	0004      	movs	r4, r0
  _local(local)
    21c0:	6003      	str	r3, [r0, #0]
    21c2:	6041      	str	r1, [r0, #4]
  if (_local) {
    21c4:	2900      	cmp	r1, #0
    21c6:	d002      	beq.n	21ce <_ZN17BLECharacteristicC1EP22BLELocalCharacteristic+0x16>
    _local->retain();
    21c8:	0008      	movs	r0, r1
    21ca:	f7ff ffca 	bl	2162 <_ZN12BLEAttribute6retainEv>
}
    21ce:	0020      	movs	r0, r4
    21d0:	bd10      	pop	{r4, pc}
    21d2:	46c0      	nop			; (mov r8, r8)
    21d4:	0000b590 	.word	0x0000b590

000021d8 <_ZN17BLECharacteristicC1EPKchib>:
BLECharacteristic::BLECharacteristic(const char* uuid, uint8_t properties, int valueSize, bool fixedLength) :
    21d8:	b5f0      	push	{r4, r5, r6, r7, lr}
    21da:	b085      	sub	sp, #20
    21dc:	0004      	movs	r4, r0
    21de:	001e      	movs	r6, r3
  BLECharacteristic(new BLELocalCharacteristic(uuid, properties, valueSize, fixedLength))
    21e0:	2054      	movs	r0, #84	; 0x54
BLECharacteristic::BLECharacteristic(const char* uuid, uint8_t properties, int valueSize, bool fixedLength) :
    21e2:	ab0a      	add	r3, sp, #40	; 0x28
    21e4:	781f      	ldrb	r7, [r3, #0]
    21e6:	9102      	str	r1, [sp, #8]
    21e8:	9203      	str	r2, [sp, #12]
  BLECharacteristic(new BLELocalCharacteristic(uuid, properties, valueSize, fixedLength))
    21ea:	f003 f88d 	bl	5308 <_Znwj>
    21ee:	0005      	movs	r5, r0
    21f0:	0033      	movs	r3, r6
    21f2:	9a03      	ldr	r2, [sp, #12]
    21f4:	9902      	ldr	r1, [sp, #8]
    21f6:	9700      	str	r7, [sp, #0]
    21f8:	f000 faac 	bl	2754 <_ZN22BLELocalCharacteristicC1EPKchib>
    21fc:	0029      	movs	r1, r5
    21fe:	0020      	movs	r0, r4
    2200:	f7ff ffda 	bl	21b8 <_ZN17BLECharacteristicC1EP22BLELocalCharacteristic>
}
    2204:	0020      	movs	r0, r4
    2206:	b005      	add	sp, #20
    2208:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000220a <_ZNK17BLECharacteristic9valueSizeEv>:
  return 0;
}

int BLECharacteristic::valueSize() const
{
  if (_local) {
    220a:	6843      	ldr	r3, [r0, #4]
{
    220c:	b510      	push	{r4, lr}
    return _local->valueSize();
  }

  return 0;
    220e:	1e18      	subs	r0, r3, #0
  if (_local) {
    2210:	d001      	beq.n	2216 <_ZNK17BLECharacteristic9valueSizeEv+0xc>
    return _local->valueSize();
    2212:	f000 f9f8 	bl	2606 <_ZNK22BLELocalCharacteristic9valueSizeEv>
}
    2216:	bd10      	pop	{r4, pc}

00002218 <_ZNK17BLECharacteristic5valueEv>:

const uint8_t* BLECharacteristic::value() const
{
  if (_local) {
    2218:	6843      	ldr	r3, [r0, #4]
{
    221a:	b510      	push	{r4, lr}
    return _local->value();
  }

  return NULL;
    221c:	1e18      	subs	r0, r3, #0
  if (_local) {
    221e:	d001      	beq.n	2224 <_ZNK17BLECharacteristic5valueEv+0xc>
    return _local->value();
    2220:	f000 f9f3 	bl	260a <_ZNK22BLELocalCharacteristic5valueEv>
}
    2224:	bd10      	pop	{r4, pc}

00002226 <_ZN17BLECharacteristic10writeValueEPKhi>:
  return 0;
}

int BLECharacteristic::writeValue(const uint8_t value[], int length)
{
  if (_local) {
    2226:	6843      	ldr	r3, [r0, #4]
{
    2228:	b510      	push	{r4, lr}
    return _local->writeValue(value, length);
  }

  return 0;
    222a:	1e18      	subs	r0, r3, #0
  if (_local) {
    222c:	d001      	beq.n	2232 <_ZN17BLECharacteristic10writeValueEPKhi+0xc>
    return _local->writeValue(value, length);
    222e:	f000 f9f1 	bl	2614 <_ZN22BLELocalCharacteristic10writeValueEPKhi>
}
    2232:	bd10      	pop	{r4, pc}

00002234 <_ZN17BLECharacteristic10writeValueEPKc>:

int BLECharacteristic::writeValue(const char* value)
{
  if (_local) {
    2234:	6843      	ldr	r3, [r0, #4]
{
    2236:	b510      	push	{r4, lr}
    return _local->writeValue(value);
  }

  return 0;
    2238:	1e18      	subs	r0, r3, #0
  if (_local) {
    223a:	d001      	beq.n	2240 <_ZN17BLECharacteristic10writeValueEPKc+0xc>
    return _local->writeValue(value);
    223c:	f000 fa44 	bl	26c8 <_ZN22BLELocalCharacteristic10writeValueEPKc>
}
    2240:	bd10      	pop	{r4, pc}

00002242 <_ZN17BLECharacteristic7writtenEv>:
  return 0;
}

bool BLECharacteristic::written()
{
  if (_local) {
    2242:	6843      	ldr	r3, [r0, #4]
{
    2244:	b510      	push	{r4, lr}
    return _local->written();
  }

  return false;
    2246:	1e18      	subs	r0, r3, #0
  if (_local) {
    2248:	d001      	beq.n	224e <_ZN17BLECharacteristic7writtenEv+0xc>
    return _local->written();
    224a:	f000 fa49 	bl	26e0 <_ZN22BLELocalCharacteristic7writtenEv>
}
    224e:	bd10      	pop	{r4, pc}

00002250 <_ZN17BLECharacteristic5localEv>:
  return (_local != NULL);
}

BLELocalCharacteristic* BLECharacteristic::local()
{
  return _local;
    2250:	6840      	ldr	r0, [r0, #4]
}
    2252:	4770      	bx	lr

00002254 <_ZN17BLECharacteristic15setEventHandlerEiPFv9BLEDeviceS_E>:

void BLECharacteristic::setEventHandler(int event, BLECharacteristicEventHandler eventHandler)
{
  if (_local) {
    2254:	6840      	ldr	r0, [r0, #4]
{
    2256:	b510      	push	{r4, lr}
  if (_local) {
    2258:	2800      	cmp	r0, #0
    225a:	d002      	beq.n	2262 <_ZN17BLECharacteristic15setEventHandlerEiPFv9BLEDeviceS_E+0xe>
    _local->setEventHandler((BLECharacteristicEvent)event, eventHandler);
    225c:	b2c9      	uxtb	r1, r1
    225e:	f000 fa45 	bl	26ec <_ZN22BLELocalCharacteristic15setEventHandlerE22BLECharacteristicEventPFv9BLEDevice17BLECharacteristicE>
  }
}
    2262:	bd10      	pop	{r4, pc}

00002264 <_ZN9BLEDeviceD1Ev>:
  memcpy(_address, address, sizeof(_address));
}

BLEDevice::~BLEDevice()
{
}
    2264:	4770      	bx	lr

00002266 <_ZN9BLEDeviceD0Ev>:
BLEDevice::~BLEDevice()
    2266:	b510      	push	{r4, lr}
    2268:	0004      	movs	r4, r0
}
    226a:	f003 f851 	bl	5310 <_ZdlPv>
    226e:	0020      	movs	r0, r4
    2270:	bd10      	pop	{r4, pc}
	...

00002274 <_ZN9BLEDevice4pollEv>:

void BLEDevice::poll()
{
    2274:	b510      	push	{r4, lr}
  HCI.poll();
    2276:	4802      	ldr	r0, [pc, #8]	; (2280 <_ZN9BLEDevice4pollEv+0xc>)
    2278:	f002 f98e 	bl	4598 <_ZN8HCIClass4pollEv>
}
    227c:	bd10      	pop	{r4, pc}
    227e:	46c0      	nop			; (mov r8, r8)
    2280:	20000480 	.word	0x20000480

00002284 <_ZN9BLEDevice4pollEm>:

void BLEDevice::poll(unsigned long timeout)
{
    2284:	b510      	push	{r4, lr}
  HCI.poll(timeout);
    2286:	4802      	ldr	r0, [pc, #8]	; (2290 <_ZN9BLEDevice4pollEm+0xc>)
    2288:	f002 f91e 	bl	44c8 <_ZN8HCIClass4pollEm>
}
    228c:	bd10      	pop	{r4, pc}
    228e:	46c0      	nop			; (mov r8, r8)
    2290:	20000480 	.word	0x20000480

00002294 <_ZN9BLEDevice10disconnectEv>:

  return ATT.connected(_handle, _address);
}

bool BLEDevice::disconnect()
{
    2294:	b510      	push	{r4, lr}
  if (_handle != 0xffff) {
    2296:	4b06      	ldr	r3, [pc, #24]	; (22b0 <_ZN9BLEDevice10disconnectEv+0x1c>)
    2298:	8881      	ldrh	r1, [r0, #4]
    return HCI.disconnect(_handle);
  }

  return false;
    229a:	2000      	movs	r0, #0
  if (_handle != 0xffff) {
    229c:	4299      	cmp	r1, r3
    229e:	d005      	beq.n	22ac <_ZN9BLEDevice10disconnectEv+0x18>
    return HCI.disconnect(_handle);
    22a0:	4804      	ldr	r0, [pc, #16]	; (22b4 <_ZN9BLEDevice10disconnectEv+0x20>)
    22a2:	f002 fb5f 	bl	4964 <_ZN8HCIClass10disconnectEt>
    22a6:	1e43      	subs	r3, r0, #1
    22a8:	4198      	sbcs	r0, r3
    22aa:	b2c0      	uxtb	r0, r0
}
    22ac:	bd10      	pop	{r4, pc}
    22ae:	46c0      	nop			; (mov r8, r8)
    22b0:	0000ffff 	.word	0x0000ffff
    22b4:	20000480 	.word	0x20000480

000022b8 <_ZNK9BLEDevice7addressEv>:

String BLEDevice::address() const
{
    22b8:	b510      	push	{r4, lr}
    22ba:	0004      	movs	r4, r0
  char result[18];
  sprintf(result, "%02x:%02x:%02x:%02x:%02x:%02x", _address[5], _address[4], _address[3], _address[2], _address[1], _address[0]);
    22bc:	7988      	ldrb	r0, [r1, #6]
{
    22be:	b08a      	sub	sp, #40	; 0x28
  sprintf(result, "%02x:%02x:%02x:%02x:%02x:%02x", _address[5], _address[4], _address[3], _address[2], _address[1], _address[0]);
    22c0:	7a8b      	ldrb	r3, [r1, #10]
    22c2:	7aca      	ldrb	r2, [r1, #11]
    22c4:	9003      	str	r0, [sp, #12]
    22c6:	79c8      	ldrb	r0, [r1, #7]
    22c8:	9002      	str	r0, [sp, #8]
    22ca:	7a08      	ldrb	r0, [r1, #8]
    22cc:	9001      	str	r0, [sp, #4]
    22ce:	7a49      	ldrb	r1, [r1, #9]
    22d0:	a805      	add	r0, sp, #20
    22d2:	9100      	str	r1, [sp, #0]
    22d4:	4904      	ldr	r1, [pc, #16]	; (22e8 <_ZNK9BLEDevice7addressEv+0x30>)
    22d6:	f007 fd13 	bl	9d00 <siprintf>

  return result;
    22da:	a905      	add	r1, sp, #20
    22dc:	0020      	movs	r0, r4
    22de:	f004 fbb1 	bl	6a44 <_ZN6StringC1EPKc>
}
    22e2:	0020      	movs	r0, r4
    22e4:	b00a      	add	sp, #40	; 0x28
    22e6:	bd10      	pop	{r4, pc}
    22e8:	0000b5a0 	.word	0x0000b5a0

000022ec <_ZN9BLEDevice4rssiEv>:

int BLEDevice::rssi()
{
    22ec:	b510      	push	{r4, lr}
  if (_handle != 0xffff) {
    22ee:	4b04      	ldr	r3, [pc, #16]	; (2300 <_ZN9BLEDevice4rssiEv+0x14>)
    22f0:	8881      	ldrh	r1, [r0, #4]
    return HCI.readRssi(_handle);
  }

  return 127;
    22f2:	207f      	movs	r0, #127	; 0x7f
  if (_handle != 0xffff) {
    22f4:	4299      	cmp	r1, r3
    22f6:	d002      	beq.n	22fe <_ZN9BLEDevice4rssiEv+0x12>
    return HCI.readRssi(_handle);
    22f8:	4802      	ldr	r0, [pc, #8]	; (2304 <_ZN9BLEDevice4rssiEv+0x18>)
    22fa:	f002 f9e5 	bl	46c8 <_ZN8HCIClass8readRssiEt>
}
    22fe:	bd10      	pop	{r4, pc}
    2300:	0000ffff 	.word	0x0000ffff
    2304:	20000480 	.word	0x20000480

00002308 <_ZNK9BLEDevicecvbEv>:

BLEDevice::operator bool() const
{
    2308:	b513      	push	{r0, r1, r4, lr}
    230a:	0004      	movs	r4, r0
  uint8_t zeros[6] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,};
    230c:	2206      	movs	r2, #6
    230e:	2100      	movs	r1, #0
    2310:	4668      	mov	r0, sp
    2312:	f006 ffb9 	bl	9288 <memset>

  return ((_handle != 0xffff) && memcmp(_address, zeros, sizeof(zeros)) != 0);
    2316:	88a2      	ldrh	r2, [r4, #4]
    2318:	4b06      	ldr	r3, [pc, #24]	; (2334 <_ZNK9BLEDevicecvbEv+0x2c>)
    231a:	2000      	movs	r0, #0
    231c:	429a      	cmp	r2, r3
    231e:	d007      	beq.n	2330 <_ZNK9BLEDevicecvbEv+0x28>
    2320:	1da0      	adds	r0, r4, #6
    2322:	2206      	movs	r2, #6
    2324:	4669      	mov	r1, sp
    2326:	f006 ff85 	bl	9234 <memcmp>
    232a:	1e43      	subs	r3, r0, #1
    232c:	4198      	sbcs	r0, r3
    232e:	b2c0      	uxtb	r0, r0
}
    2330:	bd16      	pop	{r1, r2, r4, pc}
    2332:	46c0      	nop			; (mov r8, r8)
    2334:	0000ffff 	.word	0x0000ffff

00002338 <_ZNK9BLEDeviceeqERKS_>:

bool BLEDevice::operator==(const BLEDevice& rhs) const
{
    2338:	b510      	push	{r4, lr}
  return ((_handle == rhs._handle) && memcmp(_address, rhs._address, sizeof(_address)) == 0);
    233a:	8884      	ldrh	r4, [r0, #4]
    233c:	888a      	ldrh	r2, [r1, #4]
    233e:	2300      	movs	r3, #0
    2340:	4294      	cmp	r4, r2
    2342:	d107      	bne.n	2354 <_ZNK9BLEDeviceeqERKS_+0x1c>
    2344:	3106      	adds	r1, #6
    2346:	3006      	adds	r0, #6
    2348:	2206      	movs	r2, #6
    234a:	f006 ff73 	bl	9234 <memcmp>
    234e:	4243      	negs	r3, r0
    2350:	4143      	adcs	r3, r0
    2352:	b2db      	uxtb	r3, r3
}
    2354:	0018      	movs	r0, r3
    2356:	bd10      	pop	{r4, pc}

00002358 <_ZNK9BLEDevice9connectedEv>:
{
    2358:	b510      	push	{r4, lr}
    235a:	0004      	movs	r4, r0
  HCI.poll();
    235c:	4807      	ldr	r0, [pc, #28]	; (237c <_ZNK9BLEDevice9connectedEv+0x24>)
    235e:	f002 f91b 	bl	4598 <_ZN8HCIClass4pollEv>
  if (!(*this)) {
    2362:	6823      	ldr	r3, [r4, #0]
    2364:	0020      	movs	r0, r4
    2366:	6a1b      	ldr	r3, [r3, #32]
    2368:	4798      	blx	r3
    236a:	2800      	cmp	r0, #0
    236c:	d004      	beq.n	2378 <_ZNK9BLEDevice9connectedEv+0x20>
  return ATT.connected(_handle, _address);
    236e:	1da2      	adds	r2, r4, #6
    2370:	88a1      	ldrh	r1, [r4, #4]
    2372:	4803      	ldr	r0, [pc, #12]	; (2380 <_ZNK9BLEDevice9connectedEv+0x28>)
    2374:	f000 fdf2 	bl	2f5c <_ZNK8ATTClass9connectedEtPKh>
}
    2378:	bd10      	pop	{r4, pc}
    237a:	46c0      	nop			; (mov r8, r8)
    237c:	20000480 	.word	0x20000480
    2380:	200002c8 	.word	0x200002c8

00002384 <_ZNK9BLEDeviceneERKS_>:

bool BLEDevice::operator!=(const BLEDevice& rhs) const
{
    2384:	b510      	push	{r4, lr}
  return ((_handle != rhs._handle) || memcmp(_address, rhs._address, sizeof(_address)) != 0);
    2386:	8884      	ldrh	r4, [r0, #4]
    2388:	888a      	ldrh	r2, [r1, #4]
    238a:	2301      	movs	r3, #1
    238c:	4294      	cmp	r4, r2
    238e:	d107      	bne.n	23a0 <_ZNK9BLEDeviceneERKS_+0x1c>
    2390:	3106      	adds	r1, #6
    2392:	3006      	adds	r0, #6
    2394:	2206      	movs	r2, #6
    2396:	f006 ff4d 	bl	9234 <memcmp>
    239a:	1e43      	subs	r3, r0, #1
    239c:	4198      	sbcs	r0, r3
    239e:	b2c3      	uxtb	r3, r0
}
    23a0:	0018      	movs	r0, r3
    23a2:	bd10      	pop	{r4, pc}

000023a4 <_ZN9BLEDeviceC1Ev>:
  _handle(0xffff)
    23a4:	4b07      	ldr	r3, [pc, #28]	; (23c4 <_ZN9BLEDeviceC1Ev+0x20>)
BLEDevice::BLEDevice() :
    23a6:	b510      	push	{r4, lr}
  _handle(0xffff)
    23a8:	3308      	adds	r3, #8
    23aa:	6003      	str	r3, [r0, #0]
    23ac:	2301      	movs	r3, #1
BLEDevice::BLEDevice() :
    23ae:	0004      	movs	r4, r0
  _handle(0xffff)
    23b0:	425b      	negs	r3, r3
    23b2:	8083      	strh	r3, [r0, #4]
  memset(_address, 0x00, sizeof(_address));
    23b4:	2206      	movs	r2, #6
    23b6:	2100      	movs	r1, #0
    23b8:	3006      	adds	r0, #6
    23ba:	f006 ff65 	bl	9288 <memset>
}
    23be:	0020      	movs	r0, r4
    23c0:	bd10      	pop	{r4, pc}
    23c2:	46c0      	nop			; (mov r8, r8)
    23c4:	0000b5c0 	.word	0x0000b5c0

000023c8 <_ZN9BLEDeviceC1EtPh>:
BLEDevice::BLEDevice(uint16_t handle, uint8_t address[6]) :
    23c8:	b510      	push	{r4, lr}
    23ca:	0004      	movs	r4, r0
    23cc:	0008      	movs	r0, r1
  _handle(handle)
    23ce:	4b05      	ldr	r3, [pc, #20]	; (23e4 <_ZN9BLEDeviceC1EtPh+0x1c>)
BLEDevice::BLEDevice(uint16_t handle, uint8_t address[6]) :
    23d0:	0011      	movs	r1, r2
  _handle(handle)
    23d2:	3308      	adds	r3, #8
    23d4:	80a0      	strh	r0, [r4, #4]
    23d6:	6023      	str	r3, [r4, #0]
  memcpy(_address, address, sizeof(_address));
    23d8:	1da0      	adds	r0, r4, #6
    23da:	2206      	movs	r2, #6
    23dc:	f006 ff39 	bl	9252 <memcpy>
}
    23e0:	0020      	movs	r0, r4
    23e2:	bd10      	pop	{r4, pc}
    23e4:	0000b5c0 	.word	0x0000b5c0

000023e8 <_ZN10BLEServiceD1Ev>:
BLEService::BLEService(const char* uuid) :
  BLEService(new BLELocalService(uuid))
{
}

BLEService::~BLEService()
    23e8:	4b09      	ldr	r3, [pc, #36]	; (2410 <_ZN10BLEServiceD1Ev+0x28>)
    23ea:	b510      	push	{r4, lr}
    23ec:	3308      	adds	r3, #8
    23ee:	0004      	movs	r4, r0
    23f0:	6003      	str	r3, [r0, #0]
{
  if (_local && _local->release() <= 0) {
    23f2:	6840      	ldr	r0, [r0, #4]
    23f4:	2800      	cmp	r0, #0
    23f6:	d009      	beq.n	240c <_ZN10BLEServiceD1Ev+0x24>
    23f8:	f7ff feb8 	bl	216c <_ZN12BLEAttribute7releaseEv>
    23fc:	2800      	cmp	r0, #0
    23fe:	dc05      	bgt.n	240c <_ZN10BLEServiceD1Ev+0x24>
    delete _local;
    2400:	6860      	ldr	r0, [r4, #4]
    2402:	2800      	cmp	r0, #0
    2404:	d002      	beq.n	240c <_ZN10BLEServiceD1Ev+0x24>
    2406:	6803      	ldr	r3, [r0, #0]
    2408:	685b      	ldr	r3, [r3, #4]
    240a:	4798      	blx	r3
  }
}
    240c:	0020      	movs	r0, r4
    240e:	bd10      	pop	{r4, pc}
    2410:	0000b5f4 	.word	0x0000b5f4

00002414 <_ZN10BLEServiceD0Ev>:
BLEService::~BLEService()
    2414:	b510      	push	{r4, lr}
    2416:	0004      	movs	r4, r0
}
    2418:	f7ff ffe6 	bl	23e8 <_ZN10BLEServiceD1Ev>
    241c:	0020      	movs	r0, r4
    241e:	f002 ff77 	bl	5310 <_ZdlPv>
    2422:	0020      	movs	r0, r4
    2424:	bd10      	pop	{r4, pc}
	...

00002428 <_ZN10BLEServiceC1EP15BLELocalService>:
  _local(local)
    2428:	4b06      	ldr	r3, [pc, #24]	; (2444 <_ZN10BLEServiceC1EP15BLELocalService+0x1c>)
BLEService::BLEService(BLELocalService* local) :
    242a:	b510      	push	{r4, lr}
  _local(local)
    242c:	3308      	adds	r3, #8
BLEService::BLEService(BLELocalService* local) :
    242e:	0004      	movs	r4, r0
  _local(local)
    2430:	6003      	str	r3, [r0, #0]
    2432:	6041      	str	r1, [r0, #4]
  if (_local) {
    2434:	2900      	cmp	r1, #0
    2436:	d002      	beq.n	243e <_ZN10BLEServiceC1EP15BLELocalService+0x16>
    _local->retain();
    2438:	0008      	movs	r0, r1
    243a:	f7ff fe92 	bl	2162 <_ZN12BLEAttribute6retainEv>
}
    243e:	0020      	movs	r0, r4
    2440:	bd10      	pop	{r4, pc}
    2442:	46c0      	nop			; (mov r8, r8)
    2444:	0000b5f4 	.word	0x0000b5f4

00002448 <_ZN10BLEServiceC1EPKc>:
BLEService::BLEService(const char* uuid) :
    2448:	b570      	push	{r4, r5, r6, lr}
    244a:	0004      	movs	r4, r0
  BLEService(new BLELocalService(uuid))
    244c:	2030      	movs	r0, #48	; 0x30
BLEService::BLEService(const char* uuid) :
    244e:	000e      	movs	r6, r1
  BLEService(new BLELocalService(uuid))
    2450:	f002 ff5a 	bl	5308 <_Znwj>
    2454:	0005      	movs	r5, r0
    2456:	0031      	movs	r1, r6
    2458:	f000 fc08 	bl	2c6c <_ZN15BLELocalServiceC1EPKc>
    245c:	0029      	movs	r1, r5
    245e:	0020      	movs	r0, r4
    2460:	f7ff ffe2 	bl	2428 <_ZN10BLEServiceC1EP15BLELocalService>
}
    2464:	0020      	movs	r0, r4
    2466:	bd70      	pop	{r4, r5, r6, pc}

00002468 <_ZNK10BLEService4uuidEv>:

const char* BLEService::uuid() const
{
  if (_local) {
    2468:	6843      	ldr	r3, [r0, #4]
{
    246a:	b510      	push	{r4, lr}
    return _local->uuid();
  }

  return "";
    246c:	4803      	ldr	r0, [pc, #12]	; (247c <_ZNK10BLEService4uuidEv+0x14>)
  if (_local) {
    246e:	2b00      	cmp	r3, #0
    2470:	d002      	beq.n	2478 <_ZNK10BLEService4uuidEv+0x10>
    return _local->uuid();
    2472:	0018      	movs	r0, r3
    2474:	f7ff fe66 	bl	2144 <_ZNK12BLEAttribute4uuidEv>
}
    2478:	bd10      	pop	{r4, pc}
    247a:	46c0      	nop			; (mov r8, r8)
    247c:	0000b928 	.word	0x0000b928

00002480 <_ZN10BLEService17addCharacteristicER17BLECharacteristic>:

void BLEService::addCharacteristic(BLECharacteristic& characteristic)
{
  if (_local) {
    2480:	6840      	ldr	r0, [r0, #4]
{
    2482:	b510      	push	{r4, lr}
  if (_local) {
    2484:	2800      	cmp	r0, #0
    2486:	d001      	beq.n	248c <_ZN10BLEService17addCharacteristicER17BLECharacteristic+0xc>
    _local->addCharacteristic(characteristic);
    2488:	f000 fc31 	bl	2cee <_ZN15BLELocalService17addCharacteristicER17BLECharacteristic>
  }
}
    248c:	bd10      	pop	{r4, pc}

0000248e <_ZN10BLEService5localEv>:

BLELocalService* BLEService::local()
{
  return _local;
    248e:	6840      	ldr	r0, [r0, #4]
}
    2490:	4770      	bx	lr
	...

00002494 <_ZN23BLEStringCharacteristicD1Ev>:

#include <Arduino.h>

#include "BLECharacteristic.h"

class BLEStringCharacteristic : public BLECharacteristic
    2494:	b510      	push	{r4, lr}
    2496:	0004      	movs	r4, r0
    2498:	4b02      	ldr	r3, [pc, #8]	; (24a4 <_ZN23BLEStringCharacteristicD1Ev+0x10>)
    249a:	6003      	str	r3, [r0, #0]
    249c:	f7ff fe6c 	bl	2178 <_ZN17BLECharacteristicD1Ev>
    24a0:	0020      	movs	r0, r4
    24a2:	bd10      	pop	{r4, pc}
    24a4:	0000b60c 	.word	0x0000b60c

000024a8 <_ZN23BLEStringCharacteristicD0Ev>:
    24a8:	b510      	push	{r4, lr}
    24aa:	0004      	movs	r4, r0
    24ac:	f7ff fff2 	bl	2494 <_ZN23BLEStringCharacteristicD1Ev>
    24b0:	0020      	movs	r0, r4
    24b2:	f002 ff2d 	bl	5310 <_ZdlPv>
    24b6:	0020      	movs	r0, r4
    24b8:	bd10      	pop	{r4, pc}
	...

000024bc <_ZN23BLEStringCharacteristicC1EPKchi>:
  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
*/

#include "BLEStringCharacteristic.h"

BLEStringCharacteristic::BLEStringCharacteristic(const char* uuid, unsigned char properties, int valueSize) :
    24bc:	b513      	push	{r0, r1, r4, lr}
    24be:	0004      	movs	r4, r0
  BLECharacteristic(uuid, properties, valueSize)
    24c0:	2000      	movs	r0, #0
    24c2:	9000      	str	r0, [sp, #0]
    24c4:	0020      	movs	r0, r4
    24c6:	f7ff fe87 	bl	21d8 <_ZN17BLECharacteristicC1EPKchib>
    24ca:	4b02      	ldr	r3, [pc, #8]	; (24d4 <_ZN23BLEStringCharacteristicC1EPKchi+0x18>)
{
}
    24cc:	0020      	movs	r0, r4
  BLECharacteristic(uuid, properties, valueSize)
    24ce:	6023      	str	r3, [r4, #0]
}
    24d0:	bd16      	pop	{r1, r2, r4, pc}
    24d2:	46c0      	nop			; (mov r8, r8)
    24d4:	0000b60c 	.word	0x0000b60c

000024d8 <_ZN23BLEStringCharacteristic10writeValueERK6String>:

int BLEStringCharacteristic::writeValue(const String& value)
{
    24d8:	b510      	push	{r4, lr}
  return BLECharacteristic::writeValue(value.c_str());
    24da:	6809      	ldr	r1, [r1, #0]
    24dc:	f7ff feaa 	bl	2234 <_ZN17BLECharacteristic10writeValueEPKc>
}
    24e0:	bd10      	pop	{r4, pc}
	...

000024e4 <_ZN22BLETypedCharacteristicIhED1Ev>:
#ifndef _BLE_TYPED_CHARACTERISTIC_H_
#define _BLE_TYPED_CHARACTERISTIC_H_

#include "BLECharacteristic.h"

template<typename T> class BLETypedCharacteristic : public BLECharacteristic
    24e4:	b510      	push	{r4, lr}
    24e6:	0004      	movs	r4, r0
    24e8:	4b02      	ldr	r3, [pc, #8]	; (24f4 <_ZN22BLETypedCharacteristicIhED1Ev+0x10>)
    24ea:	6003      	str	r3, [r0, #0]
    24ec:	f7ff fe44 	bl	2178 <_ZN17BLECharacteristicD1Ev>
    24f0:	0020      	movs	r0, r4
    24f2:	bd10      	pop	{r4, pc}
    24f4:	0000b61c 	.word	0x0000b61c

000024f8 <_ZN22BLETypedCharacteristicIhED0Ev>:
    24f8:	b510      	push	{r4, lr}
    24fa:	0004      	movs	r4, r0
    24fc:	f7ff fff2 	bl	24e4 <_ZN22BLETypedCharacteristicIhED1Ev>
    2500:	0020      	movs	r0, r4
    2502:	f002 ff05 	bl	5310 <_ZdlPv>
    2506:	0020      	movs	r0, r4
    2508:	bd10      	pop	{r4, pc}
	...

0000250c <_ZN21BLEByteCharacteristicD1Ev>:
class BLEUnsignedCharCharacteristic : public BLETypedCharacteristic<unsigned char> {
public:
  BLEUnsignedCharCharacteristic(const char* uuid, unsigned char properties);
};

class BLEByteCharacteristic : public BLETypedCharacteristic<byte> {
    250c:	b510      	push	{r4, lr}
    250e:	0004      	movs	r4, r0
    2510:	4b02      	ldr	r3, [pc, #8]	; (251c <_ZN21BLEByteCharacteristicD1Ev+0x10>)
    2512:	6003      	str	r3, [r0, #0]
    2514:	f7ff ffe6 	bl	24e4 <_ZN22BLETypedCharacteristicIhED1Ev>
    2518:	0020      	movs	r0, r4
    251a:	bd10      	pop	{r4, pc}
    251c:	0000b62c 	.word	0x0000b62c

00002520 <_ZN21BLEByteCharacteristicD0Ev>:
    2520:	b510      	push	{r4, lr}
    2522:	0004      	movs	r4, r0
    2524:	f7ff fff2 	bl	250c <_ZN21BLEByteCharacteristicD1Ev>
    2528:	0020      	movs	r0, r4
    252a:	f002 fef1 	bl	5310 <_ZdlPv>
    252e:	0020      	movs	r0, r4
    2530:	bd10      	pop	{r4, pc}
	...

00002534 <_ZN22BLETypedCharacteristicIhEC1EPKch>:

private:
  T byteSwap(T value);
};

template<typename T> BLETypedCharacteristic<T>::BLETypedCharacteristic(const char* uuid, unsigned char properties) :
    2534:	b530      	push	{r4, r5, lr}
  BLECharacteristic(uuid, properties, sizeof(T), true)
    2536:	2501      	movs	r5, #1
template<typename T> BLETypedCharacteristic<T>::BLETypedCharacteristic(const char* uuid, unsigned char properties) :
    2538:	0004      	movs	r4, r0
    253a:	b085      	sub	sp, #20
  BLECharacteristic(uuid, properties, sizeof(T), true)
    253c:	002b      	movs	r3, r5
    253e:	9500      	str	r5, [sp, #0]
    2540:	f7ff fe4a 	bl	21d8 <_ZN17BLECharacteristicC1EPKchib>
    2544:	4b06      	ldr	r3, [pc, #24]	; (2560 <_ZN22BLETypedCharacteristicIhEC1EPKch+0x2c>)
    2546:	210f      	movs	r1, #15
    2548:	6023      	str	r3, [r4, #0]
    254a:	2300      	movs	r3, #0
    254c:	4469      	add	r1, sp
  writeValue(value);
}

template<typename T> int BLETypedCharacteristic<T>::writeValue(T value)
{
  return BLECharacteristic::writeValue((uint8_t*)&value, sizeof(T));
    254e:	002a      	movs	r2, r5
    2550:	0020      	movs	r0, r4
    2552:	700b      	strb	r3, [r1, #0]
    2554:	f7ff fe67 	bl	2226 <_ZN17BLECharacteristic10writeValueEPKhi>
}
    2558:	0020      	movs	r0, r4
    255a:	b005      	add	sp, #20
    255c:	bd30      	pop	{r4, r5, pc}
    255e:	46c0      	nop			; (mov r8, r8)
    2560:	0000b61c 	.word	0x0000b61c

00002564 <_ZN21BLEByteCharacteristicC1EPKch>:
BLEUnsignedCharCharacteristic::BLEUnsignedCharCharacteristic(const char* uuid, unsigned char properties) :
  BLETypedCharacteristic<unsigned char>(uuid, properties)
{
}

BLEByteCharacteristic::BLEByteCharacteristic(const char* uuid, unsigned char properties) :
    2564:	b510      	push	{r4, lr}
    2566:	0004      	movs	r4, r0
  BLETypedCharacteristic<byte>(uuid, properties)
    2568:	f7ff ffe4 	bl	2534 <_ZN22BLETypedCharacteristicIhEC1EPKch>
    256c:	4b01      	ldr	r3, [pc, #4]	; (2574 <_ZN21BLEByteCharacteristicC1EPKch+0x10>)
{
}
    256e:	0020      	movs	r0, r4
  BLETypedCharacteristic<byte>(uuid, properties)
    2570:	6023      	str	r3, [r4, #0]
}
    2572:	bd10      	pop	{r4, pc}
    2574:	0000b62c 	.word	0x0000b62c

00002578 <_ZN7BLEUuidC1EPKc>:
#include <stdlib.h>
#include <string.h>

#include "BLEUuid.h"

BLEUuid::BLEUuid(const char * str) :
    2578:	b5f0      	push	{r4, r5, r6, r7, lr}
  _str(str)
{
  char temp[] = {0, 0, 0};
    257a:	2500      	movs	r5, #0
BLEUuid::BLEUuid(const char * str) :
    257c:	0004      	movs	r4, r0
    257e:	000f      	movs	r7, r1
    2580:	b085      	sub	sp, #20
  char temp[] = {0, 0, 0};
    2582:	ae03      	add	r6, sp, #12
  _str(str)
    2584:	c002      	stmia	r0!, {r1}

  memset(_data, 0x00, sizeof(_data));
    2586:	2210      	movs	r2, #16
    2588:	0029      	movs	r1, r5
  char temp[] = {0, 0, 0};
    258a:	7035      	strb	r5, [r6, #0]
    258c:	7075      	strb	r5, [r6, #1]
    258e:	70b5      	strb	r5, [r6, #2]
  memset(_data, 0x00, sizeof(_data));
    2590:	f006 fe7a 	bl	9288 <memset>

  _length = 0;
    2594:	7525      	strb	r5, [r4, #20]
  for (int i = strlen(str) - 1; i >= 0 && _length < BLE_UUID_MAX_LENGTH; i -= 2) {
    2596:	0038      	movs	r0, r7
    2598:	f007 fbdc 	bl	9d54 <strlen>
    259c:	1e45      	subs	r5, r0, #1
    259e:	7d23      	ldrb	r3, [r4, #20]
    25a0:	9301      	str	r3, [sp, #4]
    25a2:	2d00      	cmp	r5, #0
    25a4:	db18      	blt.n	25d8 <_ZN7BLEUuidC1EPKc+0x60>
    25a6:	2b0f      	cmp	r3, #15
    25a8:	dc16      	bgt.n	25d8 <_ZN7BLEUuidC1EPKc+0x60>
    if (str[i] == '-') {
    25aa:	5d7a      	ldrb	r2, [r7, r5]
    25ac:	2a2d      	cmp	r2, #45	; 0x2d
    25ae:	d102      	bne.n	25b6 <_ZN7BLEUuidC1EPKc+0x3e>
      i++;
    25b0:	3501      	adds	r5, #1
  for (int i = strlen(str) - 1; i >= 0 && _length < BLE_UUID_MAX_LENGTH; i -= 2) {
    25b2:	3d02      	subs	r5, #2
    25b4:	e7f3      	b.n	259e <_ZN7BLEUuidC1EPKc+0x26>
      continue;
    }

    temp[0] = str[i - 1];
    25b6:	197b      	adds	r3, r7, r5
    25b8:	3b01      	subs	r3, #1
    25ba:	781b      	ldrb	r3, [r3, #0]
    temp[1] = str[i];
    25bc:	7072      	strb	r2, [r6, #1]

    _data[_length] = strtoul(temp, NULL, 16);
    25be:	2100      	movs	r1, #0
    25c0:	2210      	movs	r2, #16
    25c2:	0030      	movs	r0, r6
    temp[0] = str[i - 1];
    25c4:	7033      	strb	r3, [r6, #0]
    _data[_length] = strtoul(temp, NULL, 16);
    25c6:	f007 fc53 	bl	9e70 <strtoul>
    25ca:	9b01      	ldr	r3, [sp, #4]
    25cc:	18e3      	adds	r3, r4, r3
    25ce:	7118      	strb	r0, [r3, #4]

    _length++;
    25d0:	7d23      	ldrb	r3, [r4, #20]
    25d2:	3301      	adds	r3, #1
    25d4:	7523      	strb	r3, [r4, #20]
    25d6:	e7ec      	b.n	25b2 <_ZN7BLEUuidC1EPKc+0x3a>
  }

  if (_length <= 2) {
    25d8:	9b01      	ldr	r3, [sp, #4]
    25da:	2b02      	cmp	r3, #2
    25dc:	dc04      	bgt.n	25e8 <_ZN7BLEUuidC1EPKc+0x70>
    _length = 2;
    25de:	2302      	movs	r3, #2
  } else {
    _length = 16;
  }
}
    25e0:	0020      	movs	r0, r4
    _length = 16;
    25e2:	7523      	strb	r3, [r4, #20]
}
    25e4:	b005      	add	sp, #20
    25e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    _length = 16;
    25e8:	2310      	movs	r3, #16
    25ea:	e7f9      	b.n	25e0 <_ZN7BLEUuidC1EPKc+0x68>

000025ec <_ZNK7BLEUuid3strEv>:

const char* BLEUuid::str() const
{
  return _str;
    25ec:	6800      	ldr	r0, [r0, #0]
}
    25ee:	4770      	bx	lr

000025f0 <_ZNK7BLEUuid4dataEv>:

const uint8_t* BLEUuid::data() const
{
  return _data;
    25f0:	3004      	adds	r0, #4
}
    25f2:	4770      	bx	lr

000025f4 <_ZNK7BLEUuid6lengthEv>:

uint8_t BLEUuid::length() const
{
  return _length;
    25f4:	7d00      	ldrb	r0, [r0, #20]
}
    25f6:	4770      	bx	lr

000025f8 <_ZNK22BLELocalCharacteristic4typeEv>:
}

enum BLEAttributeType BLELocalCharacteristic::type() const
{
  return BLETypeCharacteristic;
}
    25f8:	4800      	ldr	r0, [pc, #0]	; (25fc <_ZNK22BLELocalCharacteristic4typeEv+0x4>)
    25fa:	4770      	bx	lr
    25fc:	00002803 	.word	0x00002803

00002600 <_ZNK22BLELocalCharacteristic10propertiesEv>:

uint8_t BLELocalCharacteristic::properties() const
{
  return _properties;
    2600:	3001      	adds	r0, #1
    2602:	7fc0      	ldrb	r0, [r0, #31]
}
    2604:	4770      	bx	lr

00002606 <_ZNK22BLELocalCharacteristic9valueSizeEv>:

int BLELocalCharacteristic::valueSize() const
{
  return _valueSize;
    2606:	6a40      	ldr	r0, [r0, #36]	; 0x24
}
    2608:	4770      	bx	lr

0000260a <_ZNK22BLELocalCharacteristic5valueEv>:

const uint8_t* BLELocalCharacteristic::value() const
{
  return _value;
    260a:	6a80      	ldr	r0, [r0, #40]	; 0x28
}
    260c:	4770      	bx	lr

0000260e <_ZNK22BLELocalCharacteristic11valueLengthEv>:

int BLELocalCharacteristic::valueLength() const
{
  return _valueLength;
    260e:	8d80      	ldrh	r0, [r0, #44]	; 0x2c
}
    2610:	4770      	bx	lr
	...

00002614 <_ZN22BLELocalCharacteristic10writeValueEPKhi>:
  return _value[offset];
}

int BLELocalCharacteristic::writeValue(const uint8_t value[], int length)
{
  _valueLength = min(length, _valueSize);
    2614:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
    2616:	b570      	push	{r4, r5, r6, lr}
    2618:	0015      	movs	r5, r2
    261a:	0004      	movs	r4, r0
    261c:	000e      	movs	r6, r1
  _valueLength = min(length, _valueSize);
    261e:	b292      	uxth	r2, r2
    2620:	42ab      	cmp	r3, r5
    2622:	dc00      	bgt.n	2626 <_ZN22BLELocalCharacteristic10writeValueEPKhi+0x12>
    2624:	b29a      	uxth	r2, r3
    2626:	85a2      	strh	r2, [r4, #44]	; 0x2c
  memcpy(_value, value, _valueLength);
    2628:	0031      	movs	r1, r6
    262a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    262c:	f006 fe11 	bl	9252 <memcpy>

  if (_fixedLength) {
    2630:	0023      	movs	r3, r4
    2632:	332e      	adds	r3, #46	; 0x2e
    2634:	781b      	ldrb	r3, [r3, #0]
    2636:	2b00      	cmp	r3, #0
    2638:	d001      	beq.n	263e <_ZN22BLELocalCharacteristic10writeValueEPKhi+0x2a>
    _valueLength = _valueSize;
    263a:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
    263c:	85a3      	strh	r3, [r4, #44]	; 0x2c
  }

  if ((_properties & BLEIndicate) && (_cccdValue & 0x0002)) {
    263e:	1c63      	adds	r3, r4, #1
    2640:	7fdb      	ldrb	r3, [r3, #31]
    2642:	069a      	lsls	r2, r3, #26
    2644:	d50b      	bpl.n	265e <_ZN22BLELocalCharacteristic10writeValueEPKhi+0x4a>
    2646:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
    2648:	0792      	lsls	r2, r2, #30
    264a:	d508      	bpl.n	265e <_ZN22BLELocalCharacteristic10writeValueEPKhi+0x4a>
  return _handle;
}

uint16_t BLELocalCharacteristic::valueHandle() const
{
  return (_handle + 1);
    264c:	8e21      	ldrh	r1, [r4, #48]	; 0x30
    return ATT.handleInd(valueHandle(), _value, _valueLength);
    264e:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
  return (_handle + 1);
    2650:	3101      	adds	r1, #1
    return ATT.handleInd(valueHandle(), _value, _valueLength);
    2652:	b289      	uxth	r1, r1
    2654:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    2656:	4819      	ldr	r0, [pc, #100]	; (26bc <_ZN22BLELocalCharacteristic10writeValueEPKhi+0xa8>)
    2658:	f000 fcfa 	bl	3050 <_ZN8ATTClass9handleIndEtPKhi>
}
    265c:	bd70      	pop	{r4, r5, r6, pc}
  } else if ((_properties & BLENotify) && (_cccdValue & 0x0001)) {
    265e:	06db      	lsls	r3, r3, #27
    2660:	d50b      	bpl.n	267a <_ZN22BLELocalCharacteristic10writeValueEPKhi+0x66>
    2662:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    2664:	07db      	lsls	r3, r3, #31
    2666:	d508      	bpl.n	267a <_ZN22BLELocalCharacteristic10writeValueEPKhi+0x66>
  return (_handle + 1);
    2668:	8e21      	ldrh	r1, [r4, #48]	; 0x30
    return ATT.handleNotify(valueHandle(), _value, _valueLength);
    266a:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
  return (_handle + 1);
    266c:	3101      	adds	r1, #1
    return ATT.handleNotify(valueHandle(), _value, _valueLength);
    266e:	b289      	uxth	r1, r1
    2670:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    2672:	4812      	ldr	r0, [pc, #72]	; (26bc <_ZN22BLELocalCharacteristic10writeValueEPKhi+0xa8>)
    2674:	f000 fcb0 	bl	2fd8 <_ZN8ATTClass12handleNotifyEtPKhi>
    2678:	e7f0      	b.n	265c <_ZN22BLELocalCharacteristic10writeValueEPKhi+0x48>
  if (_broadcast) {
    267a:	0023      	movs	r3, r4
    267c:	3332      	adds	r3, #50	; 0x32
    267e:	781b      	ldrb	r3, [r3, #0]
    2680:	2b00      	cmp	r3, #0
    2682:	d101      	bne.n	2688 <_ZN22BLELocalCharacteristic10writeValueEPKhi+0x74>
  return 1;
    2684:	2001      	movs	r0, #1
    2686:	e7e9      	b.n	265c <_ZN22BLELocalCharacteristic10writeValueEPKhi+0x48>
    uint16_t serviceUuid = GATT.serviceUuidForCharacteristic(this);
    2688:	0021      	movs	r1, r4
    268a:	480d      	ldr	r0, [pc, #52]	; (26c0 <_ZN22BLELocalCharacteristic10writeValueEPKhi+0xac>)
    268c:	f001 fd24 	bl	40d8 <_ZNK9GATTClass28serviceUuidForCharacteristicEP22BLELocalCharacteristic>
    GAP.setAdvertisedServiceData(serviceUuid, value, length);
    2690:	4c0c      	ldr	r4, [pc, #48]	; (26c4 <_ZN22BLELocalCharacteristic10writeValueEPKhi+0xb0>)
    uint16_t serviceUuid = GATT.serviceUuidForCharacteristic(this);
    2692:	0001      	movs	r1, r0
    GAP.setAdvertisedServiceData(serviceUuid, value, length);
    2694:	002b      	movs	r3, r5
    2696:	0020      	movs	r0, r4
    2698:	0032      	movs	r2, r6
    269a:	f001 fc7b 	bl	3f94 <_ZN8GAPClass24setAdvertisedServiceDataEtPKhi>
    if (!ATT.connected() && GAP.advertising()) {
    269e:	4807      	ldr	r0, [pc, #28]	; (26bc <_ZN22BLELocalCharacteristic10writeValueEPKhi+0xa8>)
    26a0:	f000 fc52 	bl	2f48 <_ZNK8ATTClass9connectedEv>
    26a4:	2800      	cmp	r0, #0
    26a6:	d1ed      	bne.n	2684 <_ZN22BLELocalCharacteristic10writeValueEPKhi+0x70>
    26a8:	0020      	movs	r0, r4
    26aa:	f001 fbc1 	bl	3e30 <_ZN8GAPClass11advertisingEv>
    26ae:	2800      	cmp	r0, #0
    26b0:	d0e8      	beq.n	2684 <_ZN22BLELocalCharacteristic10writeValueEPKhi+0x70>
      GAP.advertise();
    26b2:	0020      	movs	r0, r4
    26b4:	f001 fbbe 	bl	3e34 <_ZN8GAPClass9advertiseEv>
    26b8:	e7e4      	b.n	2684 <_ZN22BLELocalCharacteristic10writeValueEPKhi+0x70>
    26ba:	46c0      	nop			; (mov r8, r8)
    26bc:	200002c8 	.word	0x200002c8
    26c0:	20000314 	.word	0x20000314
    26c4:	200002ec 	.word	0x200002ec

000026c8 <_ZN22BLELocalCharacteristic10writeValueEPKc>:
{
    26c8:	b570      	push	{r4, r5, r6, lr}
    26ca:	0005      	movs	r5, r0
  return writeValue((uint8_t*)value, strlen(value));
    26cc:	0008      	movs	r0, r1
{
    26ce:	000c      	movs	r4, r1
  return writeValue((uint8_t*)value, strlen(value));
    26d0:	f007 fb40 	bl	9d54 <strlen>
    26d4:	0021      	movs	r1, r4
    26d6:	0002      	movs	r2, r0
    26d8:	0028      	movs	r0, r5
    26da:	f7ff ff9b 	bl	2614 <_ZN22BLELocalCharacteristic10writeValueEPKhi>
}
    26de:	bd70      	pop	{r4, r5, r6, pc}

000026e0 <_ZN22BLELocalCharacteristic7writtenEv>:
  bool written = _written;
    26e0:	0003      	movs	r3, r0
  _written = false;
    26e2:	2200      	movs	r2, #0
  bool written = _written;
    26e4:	3333      	adds	r3, #51	; 0x33
    26e6:	7818      	ldrb	r0, [r3, #0]
  _written = false;
    26e8:	701a      	strb	r2, [r3, #0]
}
    26ea:	4770      	bx	lr

000026ec <_ZN22BLELocalCharacteristic15setEventHandlerE22BLECharacteristicEventPFv9BLEDevice17BLECharacteristicE>:
  if (event < (sizeof(_eventHandlers) / sizeof(_eventHandlers[0]))) {
    26ec:	2903      	cmp	r1, #3
    26ee:	d803      	bhi.n	26f8 <_ZN22BLELocalCharacteristic15setEventHandlerE22BLECharacteristicEventPFv9BLEDevice17BLECharacteristicE+0xc>
    _eventHandlers[event] = eventHandler;
    26f0:	3110      	adds	r1, #16
    26f2:	0089      	lsls	r1, r1, #2
    26f4:	1841      	adds	r1, r0, r1
    26f6:	604a      	str	r2, [r1, #4]
}
    26f8:	4770      	bx	lr

000026fa <_ZN22BLELocalCharacteristic9setHandleEt>:
  _handle = handle;
    26fa:	8601      	strh	r1, [r0, #48]	; 0x30
}
    26fc:	4770      	bx	lr

000026fe <_ZNK22BLELocalCharacteristic6handleEv>:
  return _handle;
    26fe:	8e00      	ldrh	r0, [r0, #48]	; 0x30
}
    2700:	4770      	bx	lr

00002702 <_ZNK22BLELocalCharacteristic11valueHandleEv>:
  return (_handle + 1);
    2702:	8e00      	ldrh	r0, [r0, #48]	; 0x30
    2704:	3001      	adds	r0, #1
    2706:	b280      	uxth	r0, r0
}
    2708:	4770      	bx	lr

0000270a <_ZNK22BLELocalCharacteristic15descriptorCountEv>:

unsigned int BLELocalCharacteristic::descriptorCount() const
{
  return _descriptors.size();
    270a:	6b80      	ldr	r0, [r0, #56]	; 0x38
}
    270c:	4770      	bx	lr

0000270e <_ZNK22BLELocalCharacteristic10descriptorEj>:
  _size++;
}

template <typename T> T BLELinkedList<T>::get(unsigned int index) const
{
  if (index >= _size) {
    270e:	6b82      	ldr	r2, [r0, #56]	; 0x38
    return T();
    2710:	2300      	movs	r3, #0
  if (index >= _size) {
    2712:	4291      	cmp	r1, r2
    2714:	d207      	bcs.n	2726 <_ZNK22BLELocalCharacteristic10descriptorEj+0x18>
  }

  BLELinkedListNode<T>* itemNode = _root;

  for (unsigned int i = 0; i < index; i++) {
    2716:	2200      	movs	r2, #0
  BLELinkedListNode<T>* itemNode = _root;
    2718:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
  for (unsigned int i = 0; i < index; i++) {
    271a:	4291      	cmp	r1, r2
    271c:	d002      	beq.n	2724 <_ZNK22BLELocalCharacteristic10descriptorEj+0x16>
    itemNode = itemNode->next;
    271e:	685b      	ldr	r3, [r3, #4]
  for (unsigned int i = 0; i < index; i++) {
    2720:	3201      	adds	r2, #1
    2722:	e7fa      	b.n	271a <_ZNK22BLELocalCharacteristic10descriptorEj+0xc>
  }

  return itemNode->data;
    2724:	681b      	ldr	r3, [r3, #0]

BLELocalDescriptor* BLELocalCharacteristic::descriptor(unsigned int index) const
{
  return _descriptors.get(index);
}
    2726:	0018      	movs	r0, r3
    2728:	4770      	bx	lr

0000272a <_ZN13BLELinkedListIP18BLELocalDescriptorE3addES1_>:
template <typename T> void BLELinkedList<T>::add(T item)
    272a:	b570      	push	{r4, r5, r6, lr}
    272c:	0004      	movs	r4, r0
  BLELinkedListNode<T>* itemNode = new BLELinkedListNode<T>();
    272e:	2008      	movs	r0, #8
template <typename T> void BLELinkedList<T>::add(T item)
    2730:	000d      	movs	r5, r1
  BLELinkedListNode<T>* itemNode = new BLELinkedListNode<T>();
    2732:	f002 fde9 	bl	5308 <_Znwj>
    2736:	2300      	movs	r3, #0
    2738:	6043      	str	r3, [r0, #4]
  if (_root == NULL) {
    273a:	6863      	ldr	r3, [r4, #4]
  itemNode->data = item;
    273c:	6005      	str	r5, [r0, #0]
  if (_root == NULL) {
    273e:	2b00      	cmp	r3, #0
    2740:	d105      	bne.n	274e <_ZN13BLELinkedListIP18BLELocalDescriptorE3addES1_+0x24>
    _root = itemNode;
    2742:	6060      	str	r0, [r4, #4]
  _size++;
    2744:	6823      	ldr	r3, [r4, #0]
  _last = itemNode;
    2746:	60a0      	str	r0, [r4, #8]
  _size++;
    2748:	3301      	adds	r3, #1
    274a:	6023      	str	r3, [r4, #0]
}
    274c:	bd70      	pop	{r4, r5, r6, pc}
    _last->next = itemNode;
    274e:	68a3      	ldr	r3, [r4, #8]
    2750:	6058      	str	r0, [r3, #4]
    2752:	e7f7      	b.n	2744 <_ZN13BLELinkedListIP18BLELocalDescriptorE3addES1_+0x1a>

00002754 <_ZN22BLELocalCharacteristicC1EPKchib>:
BLELocalCharacteristic::BLELocalCharacteristic(const char* uuid, uint8_t properties, int valueSize, bool fixedLength) :
    2754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2756:	0004      	movs	r4, r0
    2758:	001d      	movs	r5, r3
    275a:	ab06      	add	r3, sp, #24
    275c:	0016      	movs	r6, r2
    275e:	781f      	ldrb	r7, [r3, #0]
  _cccdValue(0x0000)
    2760:	f7ff fce2 	bl	2128 <_ZN12BLEAttributeC1EPKc>
  _valueSize(min(valueSize, 512)),
    2764:	2280      	movs	r2, #128	; 0x80
  _cccdValue(0x0000)
    2766:	4b1a      	ldr	r3, [pc, #104]	; (27d0 <_ZN22BLELocalCharacteristicC1EPKchib+0x7c>)
  _valueSize(min(valueSize, 512)),
    2768:	0092      	lsls	r2, r2, #2
  _cccdValue(0x0000)
    276a:	3308      	adds	r3, #8
    276c:	6023      	str	r3, [r4, #0]
    276e:	1c63      	adds	r3, r4, #1
    2770:	77de      	strb	r6, [r3, #31]
  _valueSize(min(valueSize, 512)),
    2772:	002b      	movs	r3, r5
    2774:	4295      	cmp	r5, r2
    2776:	dd00      	ble.n	277a <_ZN22BLELocalCharacteristicC1EPKchib+0x26>
    2778:	0013      	movs	r3, r2
  _cccdValue(0x0000)
    277a:	6263      	str	r3, [r4, #36]	; 0x24
    277c:	0023      	movs	r3, r4
    277e:	2100      	movs	r1, #0
  memset(_eventHandlers, 0x00, sizeof(_eventHandlers));
    2780:	0020      	movs	r0, r4
  _cccdValue(0x0000)
    2782:	332e      	adds	r3, #46	; 0x2e
    2784:	85a1      	strh	r1, [r4, #44]	; 0x2c
  memset(_eventHandlers, 0x00, sizeof(_eventHandlers));
    2786:	2210      	movs	r2, #16
  _cccdValue(0x0000)
    2788:	701f      	strb	r7, [r3, #0]
  memset(_eventHandlers, 0x00, sizeof(_eventHandlers));
    278a:	3044      	adds	r0, #68	; 0x44
  _cccdValue(0x0000)
    278c:	8621      	strh	r1, [r4, #48]	; 0x30
    278e:	7119      	strb	r1, [r3, #4]
    2790:	7159      	strb	r1, [r3, #5]
    2792:	86a1      	strh	r1, [r4, #52]	; 0x34
  _last(NULL)
    2794:	63a1      	str	r1, [r4, #56]	; 0x38
    2796:	63e1      	str	r1, [r4, #60]	; 0x3c
    2798:	6421      	str	r1, [r4, #64]	; 0x40
  memset(_eventHandlers, 0x00, sizeof(_eventHandlers));
    279a:	f006 fd75 	bl	9288 <memset>
  if (properties & (BLENotify | BLEIndicate)) {
    279e:	2330      	movs	r3, #48	; 0x30
    27a0:	421e      	tst	r6, r3
    27a2:	d00e      	beq.n	27c2 <_ZN22BLELocalCharacteristicC1EPKchib+0x6e>
    BLELocalDescriptor* cccd = new BLELocalDescriptor("2902", (uint8_t*)&_cccdValue, sizeof(_cccdValue));
    27a4:	202c      	movs	r0, #44	; 0x2c
    27a6:	f002 fdaf 	bl	5308 <_Znwj>
    27aa:	0022      	movs	r2, r4
    27ac:	4909      	ldr	r1, [pc, #36]	; (27d4 <_ZN22BLELocalCharacteristicC1EPKchib+0x80>)
    27ae:	2302      	movs	r3, #2
    27b0:	3234      	adds	r2, #52	; 0x34
    27b2:	0006      	movs	r6, r0
    27b4:	f000 f8fe 	bl	29b4 <_ZN18BLELocalDescriptorC1EPKcPKhi>
    _descriptors.add(cccd);
    27b8:	0020      	movs	r0, r4
    27ba:	0031      	movs	r1, r6
    27bc:	3038      	adds	r0, #56	; 0x38
    27be:	f7ff ffb4 	bl	272a <_ZN13BLELinkedListIP18BLELocalDescriptorE3addES1_>
  _value = (uint8_t*)malloc(valueSize);
    27c2:	0028      	movs	r0, r5
    27c4:	f006 fd10 	bl	91e8 <malloc>
    27c8:	62a0      	str	r0, [r4, #40]	; 0x28
}
    27ca:	0020      	movs	r0, r4
    27cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    27ce:	46c0      	nop			; (mov r8, r8)
    27d0:	0000b63c 	.word	0x0000b63c
    27d4:	0000b634 	.word	0x0000b634

000027d8 <_ZN13BLELinkedListIP18BLELocalDescriptorE5clearEv>:
}

template <typename T> void BLELinkedList<T>::clear()
    27d8:	b570      	push	{r4, r5, r6, lr}
{
  BLELinkedListNode<T>* itemNode = _root;

  for (unsigned int i = 0; i < _size; i++) {
    27da:	2500      	movs	r5, #0
template <typename T> void BLELinkedList<T>::clear()
    27dc:	0004      	movs	r4, r0
  BLELinkedListNode<T>* itemNode = _root;
    27de:	6840      	ldr	r0, [r0, #4]
  for (unsigned int i = 0; i < _size; i++) {
    27e0:	6823      	ldr	r3, [r4, #0]
    27e2:	429d      	cmp	r5, r3
    27e4:	d205      	bcs.n	27f2 <_ZN13BLELinkedListIP18BLELocalDescriptorE5clearEv+0x1a>
    BLELinkedListNode<T>* n = itemNode;

    itemNode = itemNode->next;
    27e6:	6846      	ldr	r6, [r0, #4]
  for (unsigned int i = 0; i < _size; i++) {
    27e8:	3501      	adds	r5, #1

    delete n;
    27ea:	f002 fd91 	bl	5310 <_ZdlPv>
    itemNode = itemNode->next;
    27ee:	0030      	movs	r0, r6
  for (unsigned int i = 0; i < _size; i++) {
    27f0:	e7f6      	b.n	27e0 <_ZN13BLELinkedListIP18BLELocalDescriptorE5clearEv+0x8>
  }

  _size = 0;
    27f2:	2300      	movs	r3, #0
    27f4:	6023      	str	r3, [r4, #0]
  _root = NULL;
    27f6:	6063      	str	r3, [r4, #4]
  _last = NULL;
    27f8:	60a3      	str	r3, [r4, #8]
}
    27fa:	bd70      	pop	{r4, r5, r6, pc}

000027fc <_ZN22BLELocalCharacteristicD1Ev>:
BLELocalCharacteristic::~BLELocalCharacteristic()
    27fc:	b570      	push	{r4, r5, r6, lr}
    27fe:	0004      	movs	r4, r0
  for (unsigned int i = 0; i < descriptorCount(); i++) {
    2800:	2500      	movs	r5, #0
BLELocalCharacteristic::~BLELocalCharacteristic()
    2802:	4b16      	ldr	r3, [pc, #88]	; (285c <_ZN22BLELocalCharacteristicD1Ev+0x60>)
    2804:	3308      	adds	r3, #8
    2806:	6003      	str	r3, [r0, #0]
  for (unsigned int i = 0; i < descriptorCount(); i++) {
    2808:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    280a:	429d      	cmp	r5, r3
    280c:	d214      	bcs.n	2838 <_ZN22BLELocalCharacteristicD1Ev+0x3c>
  for (unsigned int i = 0; i < index; i++) {
    280e:	2200      	movs	r2, #0
  BLELinkedListNode<T>* itemNode = _root;
    2810:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  for (unsigned int i = 0; i < index; i++) {
    2812:	4295      	cmp	r5, r2
    2814:	d002      	beq.n	281c <_ZN22BLELocalCharacteristicD1Ev+0x20>
    itemNode = itemNode->next;
    2816:	685b      	ldr	r3, [r3, #4]
  for (unsigned int i = 0; i < index; i++) {
    2818:	3201      	adds	r2, #1
    281a:	e7fa      	b.n	2812 <_ZN22BLELocalCharacteristicD1Ev+0x16>
  return itemNode->data;
    281c:	681e      	ldr	r6, [r3, #0]
    if (d->release() <= 0) {
    281e:	0030      	movs	r0, r6
    2820:	f7ff fca4 	bl	216c <_ZN12BLEAttribute7releaseEv>
    2824:	2800      	cmp	r0, #0
    2826:	dc05      	bgt.n	2834 <_ZN22BLELocalCharacteristicD1Ev+0x38>
      delete d;
    2828:	2e00      	cmp	r6, #0
    282a:	d003      	beq.n	2834 <_ZN22BLELocalCharacteristicD1Ev+0x38>
    282c:	6833      	ldr	r3, [r6, #0]
    282e:	0030      	movs	r0, r6
    2830:	685b      	ldr	r3, [r3, #4]
    2832:	4798      	blx	r3
  for (unsigned int i = 0; i < descriptorCount(); i++) {
    2834:	3501      	adds	r5, #1
    2836:	e7e7      	b.n	2808 <_ZN22BLELocalCharacteristicD1Ev+0xc>
  _descriptors.clear();
    2838:	0025      	movs	r5, r4
    283a:	3538      	adds	r5, #56	; 0x38
    283c:	0028      	movs	r0, r5
    283e:	f7ff ffcb 	bl	27d8 <_ZN13BLELinkedListIP18BLELocalDescriptorE5clearEv>
  if (_value) {
    2842:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    2844:	2800      	cmp	r0, #0
    2846:	d001      	beq.n	284c <_ZN22BLELocalCharacteristicD1Ev+0x50>
    free(_value);
    2848:	f006 fcd8 	bl	91fc <free>
  clear();
    284c:	0028      	movs	r0, r5
    284e:	f7ff ffc3 	bl	27d8 <_ZN13BLELinkedListIP18BLELocalDescriptorE5clearEv>
BLELocalCharacteristic::~BLELocalCharacteristic()
    2852:	0020      	movs	r0, r4
    2854:	f7ff fc5e 	bl	2114 <_ZN12BLEAttributeD1Ev>
}
    2858:	0020      	movs	r0, r4
    285a:	bd70      	pop	{r4, r5, r6, pc}
    285c:	0000b63c 	.word	0x0000b63c

00002860 <_ZN22BLELocalCharacteristicD0Ev>:
BLELocalCharacteristic::~BLELocalCharacteristic()
    2860:	b510      	push	{r4, lr}
    2862:	0004      	movs	r4, r0
}
    2864:	f7ff ffca 	bl	27fc <_ZN22BLELocalCharacteristicD1Ev>
    2868:	0020      	movs	r0, r4
    286a:	f002 fd51 	bl	5310 <_ZdlPv>
    286e:	0020      	movs	r0, r4
    2870:	bd10      	pop	{r4, pc}
	...

00002874 <_ZN22BLELocalCharacteristic9readValueE9BLEDevicetPhi>:

void BLELocalCharacteristic::readValue(BLEDevice device, uint16_t offset, uint8_t value[], int length)
{
    2874:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (_eventHandlers[BLERead]) {
    2876:	6cc6      	ldr	r6, [r0, #76]	; 0x4c
{
    2878:	b089      	sub	sp, #36	; 0x24
    287a:	0004      	movs	r4, r0
    287c:	0017      	movs	r7, r2
    287e:	9301      	str	r3, [sp, #4]
  if (_eventHandlers[BLERead]) {
    2880:	2e00      	cmp	r6, #0
    2882:	d018      	beq.n	28b6 <_ZN22BLELocalCharacteristic9readValueE9BLEDevicetPhi+0x42>

class BLEDevice;

typedef void (*BLEDeviceEventHandler)(BLEDevice device);

class BLEDevice {
    2884:	2012      	movs	r0, #18
    2886:	4b10      	ldr	r3, [pc, #64]	; (28c8 <_ZN22BLELocalCharacteristic9readValueE9BLEDevicetPhi+0x54>)
    2888:	ad05      	add	r5, sp, #20
    288a:	9305      	str	r3, [sp, #20]
    288c:	888b      	ldrh	r3, [r1, #4]
    288e:	2206      	movs	r2, #6
    2890:	80ab      	strh	r3, [r5, #4]
    2892:	ab02      	add	r3, sp, #8
    2894:	18c0      	adds	r0, r0, r3
    2896:	3106      	adds	r1, #6
    2898:	f006 fcdb 	bl	9252 <memcpy>
    _eventHandlers[BLERead](device, BLECharacteristic(this));
    289c:	0021      	movs	r1, r4
    289e:	a803      	add	r0, sp, #12
    28a0:	f7ff fc8a 	bl	21b8 <_ZN17BLECharacteristicC1EP22BLELocalCharacteristic>
    28a4:	a903      	add	r1, sp, #12
    28a6:	0028      	movs	r0, r5
    28a8:	47b0      	blx	r6
    28aa:	a803      	add	r0, sp, #12
    28ac:	f7ff fc64 	bl	2178 <_ZN17BLECharacteristicD1Ev>
    28b0:	0028      	movs	r0, r5
    28b2:	f7ff fcd7 	bl	2264 <_ZN9BLEDeviceD1Ev>
  }

  memcpy(value, _value + offset, length);
    28b6:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    28b8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    28ba:	19c9      	adds	r1, r1, r7
    28bc:	9801      	ldr	r0, [sp, #4]
    28be:	f006 fcc8 	bl	9252 <memcpy>
}
    28c2:	b009      	add	sp, #36	; 0x24
    28c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    28c6:	46c0      	nop			; (mov r8, r8)
    28c8:	0000b5c8 	.word	0x0000b5c8

000028cc <_ZN22BLELocalCharacteristic10writeValueE9BLEDevicePKhi>:

void BLELocalCharacteristic::writeValue(BLEDevice device, const uint8_t value[], int length)
{
    28cc:	b5f0      	push	{r4, r5, r6, r7, lr}
    28ce:	000d      	movs	r5, r1
    28d0:	0011      	movs	r1, r2
  _written = true;
    28d2:	0002      	movs	r2, r0
{
    28d4:	0004      	movs	r4, r0
  _written = true;
    28d6:	2001      	movs	r0, #1
    28d8:	3233      	adds	r2, #51	; 0x33
    28da:	7010      	strb	r0, [r2, #0]
{
    28dc:	b087      	sub	sp, #28

  writeValue(value, length);
    28de:	001a      	movs	r2, r3
    28e0:	0020      	movs	r0, r4
    28e2:	f7ff fe97 	bl	2614 <_ZN22BLELocalCharacteristic10writeValueEPKhi>

  if (_eventHandlers[BLEWritten]) {
    28e6:	6d27      	ldr	r7, [r4, #80]	; 0x50
    28e8:	2f00      	cmp	r7, #0
    28ea:	d017      	beq.n	291c <_ZN22BLELocalCharacteristic10writeValueE9BLEDevicePKhi+0x50>
    28ec:	2012      	movs	r0, #18
    28ee:	4b0c      	ldr	r3, [pc, #48]	; (2920 <_ZN22BLELocalCharacteristic10writeValueE9BLEDevicePKhi+0x54>)
    28f0:	2206      	movs	r2, #6
    28f2:	9303      	str	r3, [sp, #12]
    28f4:	88ab      	ldrh	r3, [r5, #4]
    28f6:	ae03      	add	r6, sp, #12
    28f8:	1da9      	adds	r1, r5, #6
    28fa:	4468      	add	r0, sp
    28fc:	80b3      	strh	r3, [r6, #4]
    28fe:	f006 fca8 	bl	9252 <memcpy>
    _eventHandlers[BLEWritten](device, BLECharacteristic(this));
    2902:	0021      	movs	r1, r4
    2904:	a801      	add	r0, sp, #4
    2906:	f7ff fc57 	bl	21b8 <_ZN17BLECharacteristicC1EP22BLELocalCharacteristic>
    290a:	a901      	add	r1, sp, #4
    290c:	0030      	movs	r0, r6
    290e:	47b8      	blx	r7
    2910:	a801      	add	r0, sp, #4
    2912:	f7ff fc31 	bl	2178 <_ZN17BLECharacteristicD1Ev>
    2916:	0030      	movs	r0, r6
    2918:	f7ff fca4 	bl	2264 <_ZN9BLEDeviceD1Ev>
  }
}
    291c:	b007      	add	sp, #28
    291e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2920:	0000b5c8 	.word	0x0000b5c8

00002924 <_ZN22BLELocalCharacteristic14writeCccdValueE9BLEDevicet>:

void BLELocalCharacteristic::writeCccdValue(BLEDevice device, uint16_t value)
{
  value &= 0x0003;
    2924:	2303      	movs	r3, #3
{
    2926:	b570      	push	{r4, r5, r6, lr}
  value &= 0x0003;
    2928:	401a      	ands	r2, r3

  if (_cccdValue != value) {
    292a:	8e83      	ldrh	r3, [r0, #52]	; 0x34
{
    292c:	b086      	sub	sp, #24
    292e:	0004      	movs	r4, r0
  if (_cccdValue != value) {
    2930:	4293      	cmp	r3, r2
    2932:	d020      	beq.n	2976 <_ZN22BLELocalCharacteristic14writeCccdValueE9BLEDevicet+0x52>
    _cccdValue = value;
    2934:	8682      	strh	r2, [r0, #52]	; 0x34

    BLECharacteristicEvent event = (_cccdValue) ? BLESubscribed : BLEUnsubscribed;
    2936:	4253      	negs	r3, r2
    2938:	415a      	adcs	r2, r3

    if (_eventHandlers[event]) {
    293a:	3210      	adds	r2, #16
    293c:	0092      	lsls	r2, r2, #2
    293e:	1882      	adds	r2, r0, r2
    2940:	6856      	ldr	r6, [r2, #4]
    2942:	2e00      	cmp	r6, #0
    2944:	d017      	beq.n	2976 <_ZN22BLELocalCharacteristic14writeCccdValueE9BLEDevicet+0x52>
    2946:	2012      	movs	r0, #18
    2948:	4b0c      	ldr	r3, [pc, #48]	; (297c <_ZN22BLELocalCharacteristic14writeCccdValueE9BLEDevicet+0x58>)
    294a:	2206      	movs	r2, #6
    294c:	9303      	str	r3, [sp, #12]
    294e:	888b      	ldrh	r3, [r1, #4]
    2950:	ad03      	add	r5, sp, #12
    2952:	3106      	adds	r1, #6
    2954:	4468      	add	r0, sp
    2956:	80ab      	strh	r3, [r5, #4]
    2958:	f006 fc7b 	bl	9252 <memcpy>
      _eventHandlers[event](device, BLECharacteristic(this));
    295c:	0021      	movs	r1, r4
    295e:	a801      	add	r0, sp, #4
    2960:	f7ff fc2a 	bl	21b8 <_ZN17BLECharacteristicC1EP22BLELocalCharacteristic>
    2964:	a901      	add	r1, sp, #4
    2966:	0028      	movs	r0, r5
    2968:	47b0      	blx	r6
    296a:	a801      	add	r0, sp, #4
    296c:	f7ff fc04 	bl	2178 <_ZN17BLECharacteristicD1Ev>
    2970:	0028      	movs	r0, r5
    2972:	f7ff fc77 	bl	2264 <_ZN9BLEDeviceD1Ev>
    }
  }
}
    2976:	b006      	add	sp, #24
    2978:	bd70      	pop	{r4, r5, r6, pc}
    297a:	46c0      	nop			; (mov r8, r8)
    297c:	0000b5c8 	.word	0x0000b5c8

00002980 <_ZNK18BLELocalDescriptor4typeEv>:
}

enum BLEAttributeType BLELocalDescriptor::type() const
{
  return BLETypeDescriptor;
}
    2980:	20a4      	movs	r0, #164	; 0xa4
    2982:	0180      	lsls	r0, r0, #6
    2984:	4770      	bx	lr
	...

00002988 <_ZN18BLELocalDescriptorD1Ev>:
BLELocalDescriptor::~BLELocalDescriptor()
    2988:	b510      	push	{r4, lr}
    298a:	0004      	movs	r4, r0
    298c:	4b03      	ldr	r3, [pc, #12]	; (299c <_ZN18BLELocalDescriptorD1Ev+0x14>)
    298e:	3308      	adds	r3, #8
    2990:	6003      	str	r3, [r0, #0]
    2992:	f7ff fbbf 	bl	2114 <_ZN12BLEAttributeD1Ev>
}
    2996:	0020      	movs	r0, r4
    2998:	bd10      	pop	{r4, pc}
    299a:	46c0      	nop			; (mov r8, r8)
    299c:	0000b650 	.word	0x0000b650

000029a0 <_ZN18BLELocalDescriptorD0Ev>:
BLELocalDescriptor::~BLELocalDescriptor()
    29a0:	b510      	push	{r4, lr}
    29a2:	0004      	movs	r4, r0
}
    29a4:	f7ff fff0 	bl	2988 <_ZN18BLELocalDescriptorD1Ev>
    29a8:	0020      	movs	r0, r4
    29aa:	f002 fcb1 	bl	5310 <_ZdlPv>
    29ae:	0020      	movs	r0, r4
    29b0:	bd10      	pop	{r4, pc}
	...

000029b4 <_ZN18BLELocalDescriptorC1EPKcPKhi>:
BLELocalDescriptor::BLELocalDescriptor(const char* uuid, const uint8_t value[], int valueSize) :
    29b4:	b570      	push	{r4, r5, r6, lr}
    29b6:	0004      	movs	r4, r0
    29b8:	0016      	movs	r6, r2
    29ba:	001d      	movs	r5, r3
  _handle(0x0000)
    29bc:	f7ff fbb4 	bl	2128 <_ZN12BLEAttributeC1EPKc>
  _valueSize(min(valueSize, 512)),
    29c0:	2280      	movs	r2, #128	; 0x80
  _handle(0x0000)
    29c2:	4b06      	ldr	r3, [pc, #24]	; (29dc <_ZN18BLELocalDescriptorC1EPKcPKhi+0x28>)
    29c4:	6226      	str	r6, [r4, #32]
    29c6:	3308      	adds	r3, #8
    29c8:	6023      	str	r3, [r4, #0]
  _valueSize(min(valueSize, 512)),
    29ca:	0092      	lsls	r2, r2, #2
    29cc:	4295      	cmp	r5, r2
    29ce:	dd00      	ble.n	29d2 <_ZN18BLELocalDescriptorC1EPKcPKhi+0x1e>
    29d0:	0015      	movs	r5, r2
  _handle(0x0000)
    29d2:	2300      	movs	r3, #0
    29d4:	6265      	str	r5, [r4, #36]	; 0x24
}
    29d6:	0020      	movs	r0, r4
  _handle(0x0000)
    29d8:	8523      	strh	r3, [r4, #40]	; 0x28
}
    29da:	bd70      	pop	{r4, r5, r6, pc}
    29dc:	0000b650 	.word	0x0000b650

000029e0 <_ZNK18BLELocalDescriptor9valueSizeEv>:

int BLELocalDescriptor::valueSize() const
{
  return _valueSize;
    29e0:	6a40      	ldr	r0, [r0, #36]	; 0x24
}
    29e2:	4770      	bx	lr

000029e4 <_ZNK18BLELocalDescriptor5valueEv>:

const uint8_t* BLELocalDescriptor::value() const
{
  return _value;
    29e4:	6a00      	ldr	r0, [r0, #32]
}
    29e6:	4770      	bx	lr

000029e8 <_ZN18BLELocalDescriptor9setHandleEt>:
  return _value[offset];
}

void BLELocalDescriptor::setHandle(uint16_t handle)
{
  _handle = handle;
    29e8:	8501      	strh	r1, [r0, #40]	; 0x28
}
    29ea:	4770      	bx	lr

000029ec <_ZNK14BLELocalDevicecvbEv>:
}

BLELocalDevice::operator bool() const
{
  return true;
}
    29ec:	2001      	movs	r0, #1
    29ee:	4770      	bx	lr

000029f0 <_ZNK14BLELocalDeviceeqERK9BLEDevice>:

bool BLELocalDevice::operator==(const BLEDevice& rhs) const
{
  return (this == &rhs);
    29f0:	1a40      	subs	r0, r0, r1
    29f2:	4241      	negs	r1, r0
    29f4:	4148      	adcs	r0, r1
    29f6:	b2c0      	uxtb	r0, r0
}
    29f8:	4770      	bx	lr

000029fa <_ZNK14BLELocalDeviceneERK9BLEDevice>:

bool BLELocalDevice::operator!=(const BLEDevice& rhs) const
{
  return (this != &rhs);
    29fa:	1a40      	subs	r0, r0, r1
    29fc:	1e41      	subs	r1, r0, #1
    29fe:	4188      	sbcs	r0, r1
    2a00:	b2c0      	uxtb	r0, r0
}
    2a02:	4770      	bx	lr

00002a04 <_ZN14BLELocalDeviceD1Ev>:
BLELocalDevice::~BLELocalDevice()
    2a04:	b510      	push	{r4, lr}
    2a06:	0004      	movs	r4, r0
    2a08:	4b03      	ldr	r3, [pc, #12]	; (2a18 <_ZN14BLELocalDeviceD1Ev+0x14>)
    2a0a:	3308      	adds	r3, #8
    2a0c:	6003      	str	r3, [r0, #0]
    2a0e:	f7ff fc29 	bl	2264 <_ZN9BLEDeviceD1Ev>
}
    2a12:	0020      	movs	r0, r4
    2a14:	bd10      	pop	{r4, pc}
    2a16:	46c0      	nop			; (mov r8, r8)
    2a18:	0000b664 	.word	0x0000b664

00002a1c <_ZN14BLELocalDeviceD0Ev>:
BLELocalDevice::~BLELocalDevice()
    2a1c:	b510      	push	{r4, lr}
    2a1e:	0004      	movs	r4, r0
}
    2a20:	f7ff fff0 	bl	2a04 <_ZN14BLELocalDeviceD1Ev>
    2a24:	0020      	movs	r0, r4
    2a26:	f002 fc73 	bl	5310 <_ZdlPv>
    2a2a:	0020      	movs	r0, r4
    2a2c:	bd10      	pop	{r4, pc}
	...

00002a30 <_ZNK14BLELocalDevice9connectedEv>:
{
    2a30:	b510      	push	{r4, lr}
  HCI.poll();
    2a32:	4803      	ldr	r0, [pc, #12]	; (2a40 <_ZNK14BLELocalDevice9connectedEv+0x10>)
    2a34:	f001 fdb0 	bl	4598 <_ZN8HCIClass4pollEv>
  return ATT.connected();
    2a38:	4802      	ldr	r0, [pc, #8]	; (2a44 <_ZNK14BLELocalDevice9connectedEv+0x14>)
    2a3a:	f000 fa85 	bl	2f48 <_ZNK8ATTClass9connectedEv>
}
    2a3e:	bd10      	pop	{r4, pc}
    2a40:	20000480 	.word	0x20000480
    2a44:	200002c8 	.word	0x200002c8

00002a48 <_ZN14BLELocalDevice10disconnectEv>:
{
    2a48:	b510      	push	{r4, lr}
  return ATT.disconnect();
    2a4a:	4802      	ldr	r0, [pc, #8]	; (2a54 <_ZN14BLELocalDevice10disconnectEv+0xc>)
    2a4c:	f000 fa96 	bl	2f7c <_ZN8ATTClass10disconnectEv>
}
    2a50:	bd10      	pop	{r4, pc}
    2a52:	46c0      	nop			; (mov r8, r8)
    2a54:	200002c8 	.word	0x200002c8

00002a58 <_ZNK14BLELocalDevice7addressEv>:
{
    2a58:	b530      	push	{r4, r5, lr}
    2a5a:	0005      	movs	r5, r0
    2a5c:	b08d      	sub	sp, #52	; 0x34
  uint8_t addr[6] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
    2a5e:	ac05      	add	r4, sp, #20
    2a60:	2206      	movs	r2, #6
    2a62:	2100      	movs	r1, #0
    2a64:	0020      	movs	r0, r4
    2a66:	f006 fc0f 	bl	9288 <memset>
  HCI.readBdAddr(addr);
    2a6a:	0021      	movs	r1, r4
    2a6c:	480b      	ldr	r0, [pc, #44]	; (2a9c <_ZNK14BLELocalDevice7addressEv+0x44>)
    2a6e:	f001 fe17 	bl	46a0 <_ZN8HCIClass10readBdAddrEPh>
  sprintf(result, "%02x:%02x:%02x:%02x:%02x:%02x", addr[5], addr[4], addr[3], addr[2], addr[1], addr[0]);
    2a72:	7821      	ldrb	r1, [r4, #0]
    2a74:	7923      	ldrb	r3, [r4, #4]
    2a76:	7962      	ldrb	r2, [r4, #5]
    2a78:	9103      	str	r1, [sp, #12]
    2a7a:	7861      	ldrb	r1, [r4, #1]
    2a7c:	a807      	add	r0, sp, #28
    2a7e:	9102      	str	r1, [sp, #8]
    2a80:	78a1      	ldrb	r1, [r4, #2]
    2a82:	9101      	str	r1, [sp, #4]
    2a84:	78e1      	ldrb	r1, [r4, #3]
    2a86:	9100      	str	r1, [sp, #0]
    2a88:	4905      	ldr	r1, [pc, #20]	; (2aa0 <_ZNK14BLELocalDevice7addressEv+0x48>)
    2a8a:	f007 f939 	bl	9d00 <siprintf>
  return result;
    2a8e:	a907      	add	r1, sp, #28
    2a90:	0028      	movs	r0, r5
    2a92:	f003 ffd7 	bl	6a44 <_ZN6StringC1EPKc>
}
    2a96:	0028      	movs	r0, r5
    2a98:	b00d      	add	sp, #52	; 0x34
    2a9a:	bd30      	pop	{r4, r5, pc}
    2a9c:	20000480 	.word	0x20000480
    2aa0:	0000b5a0 	.word	0x0000b5a0

00002aa4 <_ZN14BLELocalDeviceC1Ev>:
BLELocalDevice::BLELocalDevice()
    2aa4:	b510      	push	{r4, lr}
    2aa6:	0004      	movs	r4, r0
    2aa8:	f7ff fc7c 	bl	23a4 <_ZN9BLEDeviceC1Ev>
    2aac:	4b02      	ldr	r3, [pc, #8]	; (2ab8 <_ZN14BLELocalDeviceC1Ev+0x14>)
}
    2aae:	0020      	movs	r0, r4
BLELocalDevice::BLELocalDevice()
    2ab0:	3308      	adds	r3, #8
    2ab2:	6023      	str	r3, [r4, #0]
}
    2ab4:	bd10      	pop	{r4, pc}
    2ab6:	46c0      	nop			; (mov r8, r8)
    2ab8:	0000b664 	.word	0x0000b664

00002abc <_ZN14BLELocalDevice3endEv>:
{
    2abc:	b510      	push	{r4, lr}
  GATT.end();
    2abe:	4805      	ldr	r0, [pc, #20]	; (2ad4 <_ZN14BLELocalDevice3endEv+0x18>)
    2ac0:	f001 faf2 	bl	40a8 <_ZN9GATTClass3endEv>
  HCI.end();
    2ac4:	4804      	ldr	r0, [pc, #16]	; (2ad8 <_ZN14BLELocalDevice3endEv+0x1c>)
    2ac6:	f001 fc25 	bl	4314 <_ZN8HCIClass3endEv>
  digitalWrite(NINA_RESETN, HIGH);
    2aca:	2101      	movs	r1, #1
    2acc:	201f      	movs	r0, #31
    2ace:	f003 fecf 	bl	6870 <digitalWrite>
}
    2ad2:	bd10      	pop	{r4, pc}
    2ad4:	20000314 	.word	0x20000314
    2ad8:	20000480 	.word	0x20000480

00002adc <_ZN14BLELocalDevice5beginEv>:
{
    2adc:	b530      	push	{r4, r5, lr}
  pinMode(SPIWIFI_SS, OUTPUT);
    2ade:	2101      	movs	r1, #1
{
    2ae0:	b087      	sub	sp, #28
    2ae2:	0005      	movs	r5, r0
  pinMode(SPIWIFI_SS, OUTPUT);
    2ae4:	201c      	movs	r0, #28
    2ae6:	f003 fe77 	bl	67d8 <pinMode>
  pinMode(NINA_RESETN, OUTPUT);
    2aea:	2101      	movs	r1, #1
    2aec:	201f      	movs	r0, #31
    2aee:	f003 fe73 	bl	67d8 <pinMode>
  digitalWrite(SPIWIFI_SS, LOW);
    2af2:	2100      	movs	r1, #0
    2af4:	201c      	movs	r0, #28
    2af6:	f003 febb 	bl	6870 <digitalWrite>
  digitalWrite(NINA_RESETN, HIGH);
    2afa:	2101      	movs	r1, #1
    2afc:	201f      	movs	r0, #31
    2afe:	f003 feb7 	bl	6870 <digitalWrite>
  delay(100);
    2b02:	2064      	movs	r0, #100	; 0x64
    2b04:	f002 fbba 	bl	527c <delay>
  digitalWrite(NINA_RESETN, LOW);
    2b08:	2100      	movs	r1, #0
    2b0a:	201f      	movs	r0, #31
    2b0c:	f003 feb0 	bl	6870 <digitalWrite>
  delay(750);
    2b10:	481d      	ldr	r0, [pc, #116]	; (2b88 <_ZN14BLELocalDevice5beginEv+0xac>)
    2b12:	f002 fbb3 	bl	527c <delay>
  if (!HCI.begin()) {
    2b16:	4c1d      	ldr	r4, [pc, #116]	; (2b8c <_ZN14BLELocalDevice5beginEv+0xb0>)
    2b18:	0020      	movs	r0, r4
    2b1a:	f001 fbef 	bl	42fc <_ZN8HCIClass5beginEv>
    2b1e:	2800      	cmp	r0, #0
    2b20:	d105      	bne.n	2b2e <_ZN14BLELocalDevice5beginEv+0x52>
    end();
    2b22:	0028      	movs	r0, r5
    2b24:	f7ff ffca 	bl	2abc <_ZN14BLELocalDevice3endEv>
    return 0;
    2b28:	2000      	movs	r0, #0
}
    2b2a:	b007      	add	sp, #28
    2b2c:	bd30      	pop	{r4, r5, pc}
  delay(100);
    2b2e:	2064      	movs	r0, #100	; 0x64
    2b30:	f002 fba4 	bl	527c <delay>
  if (HCI.reset() != 0) {
    2b34:	0020      	movs	r0, r4
    2b36:	f001 fd83 	bl	4640 <_ZN8HCIClass5resetEv>
    2b3a:	2800      	cmp	r0, #0
    2b3c:	d1f1      	bne.n	2b22 <_ZN14BLELocalDevice5beginEv+0x46>
  if (HCI.readLocalVersion(hciVer, hciRev, lmpVer, manufacturer, lmpSubVer) != 0) {
    2b3e:	ab05      	add	r3, sp, #20
    2b40:	9301      	str	r3, [sp, #4]
    2b42:	2312      	movs	r3, #18
    2b44:	446b      	add	r3, sp
    2b46:	9300      	str	r3, [sp, #0]
    2b48:	210d      	movs	r1, #13
    2b4a:	230e      	movs	r3, #14
    2b4c:	aa04      	add	r2, sp, #16
    2b4e:	446b      	add	r3, sp
    2b50:	4469      	add	r1, sp
    2b52:	0020      	movs	r0, r4
    2b54:	f001 fd7e 	bl	4654 <_ZN8HCIClass16readLocalVersionERhRtS0_S1_S1_>
    2b58:	2800      	cmp	r0, #0
    2b5a:	d1e2      	bne.n	2b22 <_ZN14BLELocalDevice5beginEv+0x46>
  if (HCI.setEventMask(0x3FFFFFFFFFFFFFFF) != 0) {
    2b5c:	2201      	movs	r2, #1
    2b5e:	4b0c      	ldr	r3, [pc, #48]	; (2b90 <_ZN14BLELocalDevice5beginEv+0xb4>)
    2b60:	4252      	negs	r2, r2
    2b62:	0020      	movs	r0, r4
    2b64:	f001 fdcc 	bl	4700 <_ZN8HCIClass12setEventMaskEy>
    2b68:	2800      	cmp	r0, #0
    2b6a:	d1da      	bne.n	2b22 <_ZN14BLELocalDevice5beginEv+0x46>
  if (HCI.readLeBufferSize(pktLen, maxPkt) != 0) {
    2b6c:	220f      	movs	r2, #15
    2b6e:	2116      	movs	r1, #22
    2b70:	446a      	add	r2, sp
    2b72:	4469      	add	r1, sp
    2b74:	0020      	movs	r0, r4
    2b76:	f001 fdcf 	bl	4718 <_ZN8HCIClass16readLeBufferSizeERtRh>
    2b7a:	2800      	cmp	r0, #0
    2b7c:	d1d1      	bne.n	2b22 <_ZN14BLELocalDevice5beginEv+0x46>
  GATT.begin();
    2b7e:	4805      	ldr	r0, [pc, #20]	; (2b94 <_ZN14BLELocalDevice5beginEv+0xb8>)
    2b80:	f001 fb50 	bl	4224 <_ZN9GATTClass5beginEv>
  return 1;
    2b84:	2001      	movs	r0, #1
    2b86:	e7d0      	b.n	2b2a <_ZN14BLELocalDevice5beginEv+0x4e>
    2b88:	000002ee 	.word	0x000002ee
    2b8c:	20000480 	.word	0x20000480
    2b90:	3fffffff 	.word	0x3fffffff
    2b94:	20000314 	.word	0x20000314

00002b98 <_ZN14BLELocalDevice20setAdvertisedServiceERK10BLEService>:
{
    2b98:	b510      	push	{r4, lr}
  setAdvertisedServiceUuid(service.uuid());
    2b9a:	0008      	movs	r0, r1
    2b9c:	f7ff fc64 	bl	2468 <_ZNK10BLEService4uuidEv>
    2ba0:	0001      	movs	r1, r0
  GAP.setAdvertisedServiceUuid(advertisedServiceUuid);
    2ba2:	4802      	ldr	r0, [pc, #8]	; (2bac <_ZN14BLELocalDevice20setAdvertisedServiceERK10BLEService+0x14>)
    2ba4:	f001 f940 	bl	3e28 <_ZN8GAPClass24setAdvertisedServiceUuidEPKc>
}
    2ba8:	bd10      	pop	{r4, pc}
    2baa:	46c0      	nop			; (mov r8, r8)
    2bac:	200002ec 	.word	0x200002ec

00002bb0 <_ZN14BLELocalDevice12setLocalNameEPKc>:
{
    2bb0:	b510      	push	{r4, lr}
  GAP.setLocalName(localName);
    2bb2:	4802      	ldr	r0, [pc, #8]	; (2bbc <_ZN14BLELocalDevice12setLocalNameEPKc+0xc>)
    2bb4:	f001 f93a 	bl	3e2c <_ZN8GAPClass12setLocalNameEPKc>
}
    2bb8:	bd10      	pop	{r4, pc}
    2bba:	46c0      	nop			; (mov r8, r8)
    2bbc:	200002ec 	.word	0x200002ec

00002bc0 <_ZN14BLELocalDevice10addServiceER10BLEService>:
{
    2bc0:	b510      	push	{r4, lr}
  GATT.addService(service);
    2bc2:	4802      	ldr	r0, [pc, #8]	; (2bcc <_ZN14BLELocalDevice10addServiceER10BLEService+0xc>)
    2bc4:	f001 fb48 	bl	4258 <_ZN9GATTClass10addServiceER10BLEService>
}
    2bc8:	bd10      	pop	{r4, pc}
    2bca:	46c0      	nop			; (mov r8, r8)
    2bcc:	20000314 	.word	0x20000314

00002bd0 <_ZN14BLELocalDevice9advertiseEv>:
{
    2bd0:	b510      	push	{r4, lr}
  return GAP.advertise();
    2bd2:	4802      	ldr	r0, [pc, #8]	; (2bdc <_ZN14BLELocalDevice9advertiseEv+0xc>)
    2bd4:	f001 f92e 	bl	3e34 <_ZN8GAPClass9advertiseEv>
}
    2bd8:	bd10      	pop	{r4, pc}
    2bda:	46c0      	nop			; (mov r8, r8)
    2bdc:	200002ec 	.word	0x200002ec

00002be0 <_ZN14BLELocalDevice7centralEv>:
{
    2be0:	b510      	push	{r4, lr}
    2be2:	0004      	movs	r4, r0
  HCI.poll();
    2be4:	4804      	ldr	r0, [pc, #16]	; (2bf8 <_ZN14BLELocalDevice7centralEv+0x18>)
    2be6:	f001 fcd7 	bl	4598 <_ZN8HCIClass4pollEv>
  return ATT.central();
    2bea:	0020      	movs	r0, r4
    2bec:	4903      	ldr	r1, [pc, #12]	; (2bfc <_ZN14BLELocalDevice7centralEv+0x1c>)
    2bee:	f000 f9e1 	bl	2fb4 <_ZN8ATTClass7centralEv>
}
    2bf2:	0020      	movs	r0, r4
    2bf4:	bd10      	pop	{r4, pc}
    2bf6:	46c0      	nop			; (mov r8, r8)
    2bf8:	20000480 	.word	0x20000480
    2bfc:	200002c8 	.word	0x200002c8

00002c00 <_ZN14BLELocalDevice15setEventHandlerE14BLEDeviceEventPFv9BLEDeviceE>:
{
    2c00:	b510      	push	{r4, lr}
  ATT.setEventHandler(event, eventHandler);
    2c02:	4802      	ldr	r0, [pc, #8]	; (2c0c <_ZN14BLELocalDevice15setEventHandlerE14BLEDeviceEventPFv9BLEDeviceE+0xc>)
    2c04:	f001 f8dc 	bl	3dc0 <_ZN8ATTClass15setEventHandlerE14BLEDeviceEventPFv9BLEDeviceE>
}
    2c08:	bd10      	pop	{r4, pc}
    2c0a:	46c0      	nop			; (mov r8, r8)
    2c0c:	200002c8 	.word	0x200002c8

00002c10 <_GLOBAL__sub_I__ZN14BLELocalDeviceC2Ev>:
void BLELocalDevice::noDebug()
{
  HCI.noDebug();
}

BLELocalDevice BLE;
    2c10:	b510      	push	{r4, lr}
    2c12:	4c05      	ldr	r4, [pc, #20]	; (2c28 <_GLOBAL__sub_I__ZN14BLELocalDeviceC2Ev+0x18>)
    2c14:	0020      	movs	r0, r4
    2c16:	f7ff ff45 	bl	2aa4 <_ZN14BLELocalDeviceC1Ev>
    2c1a:	4a04      	ldr	r2, [pc, #16]	; (2c2c <_GLOBAL__sub_I__ZN14BLELocalDeviceC2Ev+0x1c>)
    2c1c:	4904      	ldr	r1, [pc, #16]	; (2c30 <_GLOBAL__sub_I__ZN14BLELocalDeviceC2Ev+0x20>)
    2c1e:	0020      	movs	r0, r4
    2c20:	f004 fb62 	bl	72e8 <__aeabi_atexit>
    2c24:	bd10      	pop	{r4, pc}
    2c26:	46c0      	nop			; (mov r8, r8)
    2c28:	200002bc 	.word	0x200002bc
    2c2c:	20000000 	.word	0x20000000
    2c30:	00002a05 	.word	0x00002a05

00002c34 <_ZN14BLELocalDevice4rssiEv>:
{
    2c34:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  BLEDevice central = ATT.central();
    2c36:	490a      	ldr	r1, [pc, #40]	; (2c60 <_ZN14BLELocalDevice4rssiEv+0x2c>)
    2c38:	a801      	add	r0, sp, #4
    2c3a:	f000 f9bb 	bl	2fb4 <_ZN8ATTClass7centralEv>
  if (central) {
    2c3e:	a801      	add	r0, sp, #4
    2c40:	f7ff fb62 	bl	2308 <_ZNK9BLEDevicecvbEv>
  return 127;
    2c44:	247f      	movs	r4, #127	; 0x7f
  if (central) {
    2c46:	2800      	cmp	r0, #0
    2c48:	d003      	beq.n	2c52 <_ZN14BLELocalDevice4rssiEv+0x1e>
    return central.rssi();
    2c4a:	a801      	add	r0, sp, #4
    2c4c:	f7ff fb4e 	bl	22ec <_ZN9BLEDevice4rssiEv>
    2c50:	0004      	movs	r4, r0
  BLEDevice central = ATT.central();
    2c52:	a801      	add	r0, sp, #4
    2c54:	f7ff fb06 	bl	2264 <_ZN9BLEDeviceD1Ev>
}
    2c58:	0020      	movs	r0, r4
    2c5a:	b004      	add	sp, #16
    2c5c:	bd10      	pop	{r4, pc}
    2c5e:	46c0      	nop			; (mov r8, r8)
    2c60:	200002c8 	.word	0x200002c8

00002c64 <_ZNK15BLELocalService4typeEv>:
}

enum BLEAttributeType BLELocalService::type() const
{
  return BLETypeService;
}
    2c64:	20a0      	movs	r0, #160	; 0xa0
    2c66:	0180      	lsls	r0, r0, #6
    2c68:	4770      	bx	lr
	...

00002c6c <_ZN15BLELocalServiceC1EPKc>:
BLELocalService::BLELocalService(const char* uuid) :
    2c6c:	b510      	push	{r4, lr}
    2c6e:	0004      	movs	r4, r0
  _endHandle(0x0000)
    2c70:	f7ff fa5a 	bl	2128 <_ZN12BLEAttributeC1EPKc>
    2c74:	4b05      	ldr	r3, [pc, #20]	; (2c8c <_ZN15BLELocalServiceC1EPKc+0x20>)
}
    2c76:	0020      	movs	r0, r4
  _endHandle(0x0000)
    2c78:	3308      	adds	r3, #8
    2c7a:	6023      	str	r3, [r4, #0]
    2c7c:	2300      	movs	r3, #0
    2c7e:	8423      	strh	r3, [r4, #32]
    2c80:	8463      	strh	r3, [r4, #34]	; 0x22
  _last(NULL)
    2c82:	6263      	str	r3, [r4, #36]	; 0x24
    2c84:	62a3      	str	r3, [r4, #40]	; 0x28
    2c86:	62e3      	str	r3, [r4, #44]	; 0x2c
}
    2c88:	bd10      	pop	{r4, pc}
    2c8a:	46c0      	nop			; (mov r8, r8)
    2c8c:	0000b698 	.word	0x0000b698

00002c90 <_ZN15BLELocalService10setHandlesEtt>:
  }
}

void BLELocalService::setHandles(uint16_t start, uint16_t end)
{
  _startHandle = start;
    2c90:	8401      	strh	r1, [r0, #32]
  _endHandle = end;
    2c92:	8442      	strh	r2, [r0, #34]	; 0x22
}
    2c94:	4770      	bx	lr

00002c96 <_ZNK15BLELocalService11startHandleEv>:

uint16_t BLELocalService::startHandle() const
{
  return _startHandle;
    2c96:	8c00      	ldrh	r0, [r0, #32]
}
    2c98:	4770      	bx	lr

00002c9a <_ZNK15BLELocalService9endHandleEv>:

uint16_t BLELocalService::endHandle() const
{
  return _endHandle;
    2c9a:	8c40      	ldrh	r0, [r0, #34]	; 0x22
}
    2c9c:	4770      	bx	lr

00002c9e <_ZNK15BLELocalService19characteristicCountEv>:

unsigned int BLELocalService::characteristicCount() const
{
  return _characteristics.size();
    2c9e:	6a40      	ldr	r0, [r0, #36]	; 0x24
}
    2ca0:	4770      	bx	lr

00002ca2 <_ZNK15BLELocalService14characteristicEj>:
  if (index >= _size) {
    2ca2:	6a42      	ldr	r2, [r0, #36]	; 0x24
    return T();
    2ca4:	2300      	movs	r3, #0
  if (index >= _size) {
    2ca6:	4291      	cmp	r1, r2
    2ca8:	d207      	bcs.n	2cba <_ZNK15BLELocalService14characteristicEj+0x18>
  for (unsigned int i = 0; i < index; i++) {
    2caa:	2200      	movs	r2, #0
  BLELinkedListNode<T>* itemNode = _root;
    2cac:	6a83      	ldr	r3, [r0, #40]	; 0x28
  for (unsigned int i = 0; i < index; i++) {
    2cae:	4291      	cmp	r1, r2
    2cb0:	d002      	beq.n	2cb8 <_ZNK15BLELocalService14characteristicEj+0x16>
    itemNode = itemNode->next;
    2cb2:	685b      	ldr	r3, [r3, #4]
  for (unsigned int i = 0; i < index; i++) {
    2cb4:	3201      	adds	r2, #1
    2cb6:	e7fa      	b.n	2cae <_ZNK15BLELocalService14characteristicEj+0xc>
  return itemNode->data;
    2cb8:	681b      	ldr	r3, [r3, #0]

BLELocalCharacteristic* BLELocalService::characteristic(unsigned int index) const
{
  return _characteristics.get(index);
}
    2cba:	0018      	movs	r0, r3
    2cbc:	4770      	bx	lr

00002cbe <_ZN15BLELocalService17addCharacteristicEP22BLELocalCharacteristic>:

void BLELocalService::addCharacteristic(BLELocalCharacteristic* characteristic)
{
    2cbe:	b570      	push	{r4, r5, r6, lr}
    2cc0:	0004      	movs	r4, r0
  characteristic->retain();
    2cc2:	0008      	movs	r0, r1
{
    2cc4:	000d      	movs	r5, r1
  characteristic->retain();
    2cc6:	f7ff fa4c 	bl	2162 <_ZN12BLEAttribute6retainEv>
  BLELinkedListNode<T>* itemNode = new BLELinkedListNode<T>();
    2cca:	2008      	movs	r0, #8
    2ccc:	f002 fb1c 	bl	5308 <_Znwj>
    2cd0:	2300      	movs	r3, #0
    2cd2:	6043      	str	r3, [r0, #4]
  if (_root == NULL) {
    2cd4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  itemNode->data = item;
    2cd6:	6005      	str	r5, [r0, #0]
  if (_root == NULL) {
    2cd8:	2b00      	cmp	r3, #0
    2cda:	d105      	bne.n	2ce8 <_ZN15BLELocalService17addCharacteristicEP22BLELocalCharacteristic+0x2a>
    _root = itemNode;
    2cdc:	62a0      	str	r0, [r4, #40]	; 0x28
  _size++;
    2cde:	6a63      	ldr	r3, [r4, #36]	; 0x24
  _last = itemNode;
    2ce0:	62e0      	str	r0, [r4, #44]	; 0x2c
  _size++;
    2ce2:	3301      	adds	r3, #1
    2ce4:	6263      	str	r3, [r4, #36]	; 0x24

  _characteristics.add(characteristic);
}
    2ce6:	bd70      	pop	{r4, r5, r6, pc}
    _last->next = itemNode;
    2ce8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    2cea:	6058      	str	r0, [r3, #4]
    2cec:	e7f7      	b.n	2cde <_ZN15BLELocalService17addCharacteristicEP22BLELocalCharacteristic+0x20>

00002cee <_ZN15BLELocalService17addCharacteristicER17BLECharacteristic>:
{
    2cee:	b510      	push	{r4, lr}
    2cf0:	0004      	movs	r4, r0
  BLELocalCharacteristic* localCharacteristic = characteristic.local();
    2cf2:	0008      	movs	r0, r1
    2cf4:	f7ff faac 	bl	2250 <_ZN17BLECharacteristic5localEv>
    2cf8:	1e01      	subs	r1, r0, #0
  if (localCharacteristic) {
    2cfa:	d002      	beq.n	2d02 <_ZN15BLELocalService17addCharacteristicER17BLECharacteristic+0x14>
    addCharacteristic(localCharacteristic);
    2cfc:	0020      	movs	r0, r4
    2cfe:	f7ff ffde 	bl	2cbe <_ZN15BLELocalService17addCharacteristicEP22BLELocalCharacteristic>
}
    2d02:	bd10      	pop	{r4, pc}

00002d04 <_ZN13BLELinkedListIP22BLELocalCharacteristicE5clearEv>:
template <typename T> void BLELinkedList<T>::clear()
    2d04:	b570      	push	{r4, r5, r6, lr}
  for (unsigned int i = 0; i < _size; i++) {
    2d06:	2500      	movs	r5, #0
template <typename T> void BLELinkedList<T>::clear()
    2d08:	0004      	movs	r4, r0
  BLELinkedListNode<T>* itemNode = _root;
    2d0a:	6840      	ldr	r0, [r0, #4]
  for (unsigned int i = 0; i < _size; i++) {
    2d0c:	6823      	ldr	r3, [r4, #0]
    2d0e:	429d      	cmp	r5, r3
    2d10:	d205      	bcs.n	2d1e <_ZN13BLELinkedListIP22BLELocalCharacteristicE5clearEv+0x1a>
    itemNode = itemNode->next;
    2d12:	6846      	ldr	r6, [r0, #4]
  for (unsigned int i = 0; i < _size; i++) {
    2d14:	3501      	adds	r5, #1
    delete n;
    2d16:	f002 fafb 	bl	5310 <_ZdlPv>
    itemNode = itemNode->next;
    2d1a:	0030      	movs	r0, r6
  for (unsigned int i = 0; i < _size; i++) {
    2d1c:	e7f6      	b.n	2d0c <_ZN13BLELinkedListIP22BLELocalCharacteristicE5clearEv+0x8>
  _size = 0;
    2d1e:	2300      	movs	r3, #0
    2d20:	6023      	str	r3, [r4, #0]
  _root = NULL;
    2d22:	6063      	str	r3, [r4, #4]
  _last = NULL;
    2d24:	60a3      	str	r3, [r4, #8]
}
    2d26:	bd70      	pop	{r4, r5, r6, pc}

00002d28 <_ZN15BLELocalServiceD1Ev>:
BLELocalService::~BLELocalService()
    2d28:	b570      	push	{r4, r5, r6, lr}
    2d2a:	0004      	movs	r4, r0
  for (unsigned int i = 0; i < characteristicCount(); i++) {
    2d2c:	2500      	movs	r5, #0
BLELocalService::~BLELocalService()
    2d2e:	4b14      	ldr	r3, [pc, #80]	; (2d80 <_ZN15BLELocalServiceD1Ev+0x58>)
    2d30:	3308      	adds	r3, #8
    2d32:	6003      	str	r3, [r0, #0]
  for (unsigned int i = 0; i < characteristicCount(); i++) {
    2d34:	6a63      	ldr	r3, [r4, #36]	; 0x24
    2d36:	429d      	cmp	r5, r3
    2d38:	d214      	bcs.n	2d64 <_ZN15BLELocalServiceD1Ev+0x3c>
  for (unsigned int i = 0; i < index; i++) {
    2d3a:	2200      	movs	r2, #0
  BLELinkedListNode<T>* itemNode = _root;
    2d3c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  for (unsigned int i = 0; i < index; i++) {
    2d3e:	4295      	cmp	r5, r2
    2d40:	d002      	beq.n	2d48 <_ZN15BLELocalServiceD1Ev+0x20>
    itemNode = itemNode->next;
    2d42:	685b      	ldr	r3, [r3, #4]
  for (unsigned int i = 0; i < index; i++) {
    2d44:	3201      	adds	r2, #1
    2d46:	e7fa      	b.n	2d3e <_ZN15BLELocalServiceD1Ev+0x16>
  return itemNode->data;
    2d48:	681e      	ldr	r6, [r3, #0]
    if (c->release() <= 0) {
    2d4a:	0030      	movs	r0, r6
    2d4c:	f7ff fa0e 	bl	216c <_ZN12BLEAttribute7releaseEv>
    2d50:	2800      	cmp	r0, #0
    2d52:	dc05      	bgt.n	2d60 <_ZN15BLELocalServiceD1Ev+0x38>
      delete c;
    2d54:	2e00      	cmp	r6, #0
    2d56:	d003      	beq.n	2d60 <_ZN15BLELocalServiceD1Ev+0x38>
    2d58:	6833      	ldr	r3, [r6, #0]
    2d5a:	0030      	movs	r0, r6
    2d5c:	685b      	ldr	r3, [r3, #4]
    2d5e:	4798      	blx	r3
  for (unsigned int i = 0; i < characteristicCount(); i++) {
    2d60:	3501      	adds	r5, #1
    2d62:	e7e7      	b.n	2d34 <_ZN15BLELocalServiceD1Ev+0xc>
  _characteristics.clear();
    2d64:	0025      	movs	r5, r4
    2d66:	3524      	adds	r5, #36	; 0x24
    2d68:	0028      	movs	r0, r5
    2d6a:	f7ff ffcb 	bl	2d04 <_ZN13BLELinkedListIP22BLELocalCharacteristicE5clearEv>
  clear();
    2d6e:	0028      	movs	r0, r5
    2d70:	f7ff ffc8 	bl	2d04 <_ZN13BLELinkedListIP22BLELocalCharacteristicE5clearEv>
BLELocalService::~BLELocalService()
    2d74:	0020      	movs	r0, r4
    2d76:	f7ff f9cd 	bl	2114 <_ZN12BLEAttributeD1Ev>
}
    2d7a:	0020      	movs	r0, r4
    2d7c:	bd70      	pop	{r4, r5, r6, pc}
    2d7e:	46c0      	nop			; (mov r8, r8)
    2d80:	0000b698 	.word	0x0000b698

00002d84 <_ZN15BLELocalServiceD0Ev>:
BLELocalService::~BLELocalService()
    2d84:	b510      	push	{r4, lr}
    2d86:	0004      	movs	r4, r0
}
    2d88:	f7ff ffce 	bl	2d28 <_ZN15BLELocalServiceD1Ev>
    2d8c:	0020      	movs	r0, r4
    2d8e:	f002 fabf 	bl	5310 <_ZdlPv>
    2d92:	0020      	movs	r0, r4
    2d94:	bd10      	pop	{r4, pc}
	...

00002d98 <_ZN8ATTClassD1Ev>:
{
  memset(_peerAddress, 0x00, sizeof(_peerAddress));
  memset(_eventHandlers, 0x00, sizeof(_eventHandlers));
}

ATTClass::~ATTClass()
    2d98:	4b05      	ldr	r3, [pc, #20]	; (2db0 <_ZN8ATTClassD1Ev+0x18>)
    2d9a:	b510      	push	{r4, lr}
    2d9c:	3308      	adds	r3, #8
    2d9e:	0004      	movs	r4, r0
    2da0:	6003      	str	r3, [r0, #0]
{
  if (_longWriteValue) {
    2da2:	6940      	ldr	r0, [r0, #20]
    2da4:	2800      	cmp	r0, #0
    2da6:	d001      	beq.n	2dac <_ZN8ATTClassD1Ev+0x14>
    free(_longWriteValue);
    2da8:	f006 fa28 	bl	91fc <free>
  }
}
    2dac:	0020      	movs	r0, r4
    2dae:	bd10      	pop	{r4, pc}
    2db0:	0000b6ac 	.word	0x0000b6ac

00002db4 <_ZN8ATTClassD0Ev>:
ATTClass::~ATTClass()
    2db4:	b510      	push	{r4, lr}
    2db6:	0004      	movs	r4, r0
}
    2db8:	f7ff ffee 	bl	2d98 <_ZN8ATTClassD1Ev>
    2dbc:	0020      	movs	r0, r4
    2dbe:	f002 faa7 	bl	5310 <_ZdlPv>
    2dc2:	0020      	movs	r0, r4
    2dc4:	bd10      	pop	{r4, pc}
	...

00002dc8 <_ZN8ATTClass9sendErrorEthth.constprop.3>:
void ATTClass::handleCnf(uint16_t /*connectionHandle*/, uint8_t /*dlen*/, uint8_t /*data*/[])
{
  _cnf = true;
}

void ATTClass::sendError(uint16_t connectionHandle, uint8_t opcode, uint16_t handle, uint8_t code)
    2dc8:	b5f0      	push	{r4, r5, r6, r7, lr}
  struct __attribute__ ((packed)) {
    uint8_t op;
    uint8_t opcode;
    uint16_t handle;
    uint8_t code;
  } attError = { ATT_OP_ERROR, opcode, handle, code };
    2dca:	2505      	movs	r5, #5
void ATTClass::sendError(uint16_t connectionHandle, uint8_t opcode, uint16_t handle, uint8_t code)
    2dcc:	b087      	sub	sp, #28
  } attError = { ATT_OP_ERROR, opcode, handle, code };
    2dce:	ac04      	add	r4, sp, #16
void ATTClass::sendError(uint16_t connectionHandle, uint8_t opcode, uint16_t handle, uint8_t code)
    2dd0:	9002      	str	r0, [sp, #8]
    2dd2:	000f      	movs	r7, r1
    2dd4:	0016      	movs	r6, r2
  } attError = { ATT_OP_ERROR, opcode, handle, code };
    2dd6:	2100      	movs	r1, #0
    2dd8:	002a      	movs	r2, r5
    2dda:	0020      	movs	r0, r4
void ATTClass::sendError(uint16_t connectionHandle, uint8_t opcode, uint16_t handle, uint8_t code)
    2ddc:	9303      	str	r3, [sp, #12]
  } attError = { ATT_OP_ERROR, opcode, handle, code };
    2dde:	f006 fa53 	bl	9288 <memset>
    2de2:	2301      	movs	r3, #1
    2de4:	7023      	strb	r3, [r4, #0]
    2de6:	466b      	mov	r3, sp
    2de8:	7b1b      	ldrb	r3, [r3, #12]
    2dea:	7067      	strb	r7, [r4, #1]
    2dec:	7123      	strb	r3, [r4, #4]
    2dee:	8066      	strh	r6, [r4, #2]

  HCI.sendAclPkt(connectionHandle, ATT_CID, sizeof(attError), &attError);
    2df0:	002b      	movs	r3, r5
    2df2:	9400      	str	r4, [sp, #0]
    2df4:	2204      	movs	r2, #4
    2df6:	9902      	ldr	r1, [sp, #8]
    2df8:	4802      	ldr	r0, [pc, #8]	; (2e04 <_ZN8ATTClass9sendErrorEthth.constprop.3+0x3c>)
    2dfa:	f001 fac7 	bl	438c <_ZN8HCIClass10sendAclPktEthhPv>
}
    2dfe:	b007      	add	sp, #28
    2e00:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2e02:	46c0      	nop			; (mov r8, r8)
    2e04:	20000480 	.word	0x20000480

00002e08 <_ZN8ATTClassC1Ev>:
  _longWriteValueLength(0)
    2e08:	4b0d      	ldr	r3, [pc, #52]	; (2e40 <_ZN8ATTClassC1Ev+0x38>)
    2e0a:	2201      	movs	r2, #1
    2e0c:	3308      	adds	r3, #8
ATTClass::ATTClass() :
    2e0e:	b570      	push	{r4, r5, r6, lr}
  _longWriteValueLength(0)
    2e10:	2500      	movs	r5, #0
    2e12:	6003      	str	r3, [r0, #0]
    2e14:	2317      	movs	r3, #23
ATTClass::ATTClass() :
    2e16:	0004      	movs	r4, r0
  _longWriteValueLength(0)
    2e18:	4252      	negs	r2, r2
    2e1a:	8083      	strh	r3, [r0, #4]
    2e1c:	81c3      	strh	r3, [r0, #14]
    2e1e:	8245      	strh	r5, [r0, #18]
    2e20:	6145      	str	r5, [r0, #20]
    2e22:	8305      	strh	r5, [r0, #24]
  memset(_peerAddress, 0x00, sizeof(_peerAddress));
    2e24:	0029      	movs	r1, r5
  _longWriteValueLength(0)
    2e26:	80c2      	strh	r2, [r0, #6]
  memset(_peerAddress, 0x00, sizeof(_peerAddress));
    2e28:	3207      	adds	r2, #7
    2e2a:	3008      	adds	r0, #8
    2e2c:	f006 fa2c 	bl	9288 <memset>
  memset(_eventHandlers, 0x00, sizeof(_eventHandlers));
    2e30:	0020      	movs	r0, r4
    2e32:	0029      	movs	r1, r5
    2e34:	2208      	movs	r2, #8
    2e36:	301c      	adds	r0, #28
    2e38:	f006 fa26 	bl	9288 <memset>
}
    2e3c:	0020      	movs	r0, r4
    2e3e:	bd70      	pop	{r4, r5, r6, pc}
    2e40:	0000b6ac 	.word	0x0000b6ac

00002e44 <_ZN8ATTClass9setMaxMtuEt>:
  _maxMtu = maxMtu;
    2e44:	8081      	strh	r1, [r0, #4]
}
    2e46:	4770      	bx	lr

00002e48 <_ZN8ATTClass13addConnectionEthhPhttth>:
{
    2e48:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    2e4a:	0004      	movs	r4, r0
    2e4c:	000d      	movs	r5, r1
  if (role == 1) {
    2e4e:	2a01      	cmp	r2, #1
    2e50:	d116      	bne.n	2e80 <_ZN8ATTClass13addConnectionEthhPhttth+0x38>
    memcpy(_peerAddress, peerBdaddr, sizeof(_peerAddress));
    2e52:	0006      	movs	r6, r0
    _mtu = 23;
    2e54:	2317      	movs	r3, #23
    memcpy(_peerAddress, peerBdaddr, sizeof(_peerAddress));
    2e56:	3608      	adds	r6, #8
    _connectionHandle = handle;
    2e58:	80e1      	strh	r1, [r4, #6]
    memcpy(_peerAddress, peerBdaddr, sizeof(_peerAddress));
    2e5a:	3205      	adds	r2, #5
    _mtu = 23;
    2e5c:	81c3      	strh	r3, [r0, #14]
    memcpy(_peerAddress, peerBdaddr, sizeof(_peerAddress));
    2e5e:	9908      	ldr	r1, [sp, #32]
    2e60:	0030      	movs	r0, r6
    2e62:	f006 f9f6 	bl	9252 <memcpy>
    if (_eventHandlers[BLEConnected]) {
    2e66:	69e4      	ldr	r4, [r4, #28]
    2e68:	2c00      	cmp	r4, #0
    2e6a:	d009      	beq.n	2e80 <_ZN8ATTClass13addConnectionEthhPhttth+0x38>
      _eventHandlers[BLEConnected](BLEDevice(_connectionHandle, _peerAddress));
    2e6c:	0032      	movs	r2, r6
    2e6e:	0029      	movs	r1, r5
    2e70:	a801      	add	r0, sp, #4
    2e72:	f7ff faa9 	bl	23c8 <_ZN9BLEDeviceC1EtPh>
    2e76:	a801      	add	r0, sp, #4
    2e78:	47a0      	blx	r4
    2e7a:	a801      	add	r0, sp, #4
    2e7c:	f7ff f9f2 	bl	2264 <_ZN9BLEDeviceD1Ev>
}
    2e80:	bd7f      	pop	{r0, r1, r2, r3, r4, r5, r6, pc}
	...

00002e84 <_ZN8ATTClass16removeConnectionEht>:
{
    2e84:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (_connectionHandle == handle) {
    2e86:	88c3      	ldrh	r3, [r0, #6]
{
    2e88:	b089      	sub	sp, #36	; 0x24
    2e8a:	0004      	movs	r4, r0
  if (_connectionHandle == handle) {
    2e8c:	428b      	cmp	r3, r1
    2e8e:	d153      	bne.n	2f38 <_ZN8ATTClass16removeConnectionEht+0xb4>
    BLEDevice bleDevice(_connectionHandle, _peerAddress);
    2e90:	0002      	movs	r2, r0
    2e92:	0019      	movs	r1, r3
    2e94:	3208      	adds	r2, #8
    2e96:	a802      	add	r0, sp, #8
    2e98:	9201      	str	r2, [sp, #4]
    for (uint16_t i = 0; i < GATT.attributeCount(); i++) {
    2e9a:	2500      	movs	r5, #0
    BLEDevice bleDevice(_connectionHandle, _peerAddress);
    2e9c:	f7ff fa94 	bl	23c8 <_ZN9BLEDeviceC1EtPh>
    for (uint16_t i = 0; i < GATT.attributeCount(); i++) {
    2ea0:	4e26      	ldr	r6, [pc, #152]	; (2f3c <_ZN8ATTClass16removeConnectionEht+0xb8>)
    2ea2:	0030      	movs	r0, r6
    2ea4:	f001 f8ec 	bl	4080 <_ZNK9GATTClass14attributeCountEv>
    2ea8:	4285      	cmp	r5, r0
    2eaa:	d222      	bcs.n	2ef2 <_ZN8ATTClass16removeConnectionEht+0x6e>
      BLEAttribute* attribute = GATT.attribute(i);
    2eac:	0029      	movs	r1, r5
    2eae:	0030      	movs	r0, r6
    2eb0:	f001 f90d 	bl	40ce <_ZNK9GATTClass9attributeEj>
      if (attribute->type() == BLETypeCharacteristic) {
    2eb4:	6803      	ldr	r3, [r0, #0]
      BLEAttribute* attribute = GATT.attribute(i);
    2eb6:	0007      	movs	r7, r0
      if (attribute->type() == BLETypeCharacteristic) {
    2eb8:	689b      	ldr	r3, [r3, #8]
    2eba:	4798      	blx	r3
    2ebc:	4b20      	ldr	r3, [pc, #128]	; (2f40 <_ZN8ATTClass16removeConnectionEht+0xbc>)
    2ebe:	4298      	cmp	r0, r3
    2ec0:	d114      	bne.n	2eec <_ZN8ATTClass16removeConnectionEht+0x68>
    2ec2:	2206      	movs	r2, #6
    2ec4:	2012      	movs	r0, #18
    2ec6:	4b1f      	ldr	r3, [pc, #124]	; (2f44 <_ZN8ATTClass16removeConnectionEht+0xc0>)
    2ec8:	ae05      	add	r6, sp, #20
    2eca:	9305      	str	r3, [sp, #20]
    2ecc:	ab02      	add	r3, sp, #8
    2ece:	889b      	ldrh	r3, [r3, #4]
    2ed0:	80b3      	strh	r3, [r6, #4]
    2ed2:	ab02      	add	r3, sp, #8
    2ed4:	1899      	adds	r1, r3, r2
    2ed6:	18c0      	adds	r0, r0, r3
    2ed8:	f006 f9bb 	bl	9252 <memcpy>
        characteristic->writeCccdValue(bleDevice, 0x0000);
    2edc:	0038      	movs	r0, r7
    2ede:	2200      	movs	r2, #0
    2ee0:	0031      	movs	r1, r6
    2ee2:	f7ff fd1f 	bl	2924 <_ZN22BLELocalCharacteristic14writeCccdValueE9BLEDevicet>
    2ee6:	0030      	movs	r0, r6
    2ee8:	f7ff f9bc 	bl	2264 <_ZN9BLEDeviceD1Ev>
    for (uint16_t i = 0; i < GATT.attributeCount(); i++) {
    2eec:	3501      	adds	r5, #1
    2eee:	b2ad      	uxth	r5, r5
    2ef0:	e7d6      	b.n	2ea0 <_ZN8ATTClass16removeConnectionEht+0x1c>
    if (_eventHandlers[BLEDisconnected]) {
    2ef2:	6a26      	ldr	r6, [r4, #32]
    2ef4:	2e00      	cmp	r6, #0
    2ef6:	d011      	beq.n	2f1c <_ZN8ATTClass16removeConnectionEht+0x98>
    2ef8:	2206      	movs	r2, #6
    2efa:	2012      	movs	r0, #18
    2efc:	4b11      	ldr	r3, [pc, #68]	; (2f44 <_ZN8ATTClass16removeConnectionEht+0xc0>)
    2efe:	ad05      	add	r5, sp, #20
    2f00:	9305      	str	r3, [sp, #20]
    2f02:	ab02      	add	r3, sp, #8
    2f04:	889b      	ldrh	r3, [r3, #4]
    2f06:	80ab      	strh	r3, [r5, #4]
    2f08:	ab02      	add	r3, sp, #8
    2f0a:	1899      	adds	r1, r3, r2
    2f0c:	18c0      	adds	r0, r0, r3
    2f0e:	f006 f9a0 	bl	9252 <memcpy>
      _eventHandlers[BLEDisconnected](bleDevice);
    2f12:	0028      	movs	r0, r5
    2f14:	47b0      	blx	r6
    2f16:	0028      	movs	r0, r5
    2f18:	f7ff f9a4 	bl	2264 <_ZN9BLEDeviceD1Ev>
    _connectionHandle = 0xffff;
    2f1c:	2301      	movs	r3, #1
    2f1e:	425b      	negs	r3, r3
    2f20:	80e3      	strh	r3, [r4, #6]
    memset(_peerAddress, 0x00, sizeof(_peerAddress));
    2f22:	2206      	movs	r2, #6
    2f24:	2100      	movs	r1, #0
    2f26:	9801      	ldr	r0, [sp, #4]
    2f28:	f006 f9ae 	bl	9288 <memset>
    _longWriteHandle = 0x0000;
    2f2c:	2300      	movs	r3, #0
    BLEDevice bleDevice(_connectionHandle, _peerAddress);
    2f2e:	a802      	add	r0, sp, #8
    _longWriteHandle = 0x0000;
    2f30:	8263      	strh	r3, [r4, #18]
    _longWriteValueLength = 0;
    2f32:	8323      	strh	r3, [r4, #24]
    BLEDevice bleDevice(_connectionHandle, _peerAddress);
    2f34:	f7ff f996 	bl	2264 <_ZN9BLEDeviceD1Ev>
}
    2f38:	b009      	add	sp, #36	; 0x24
    2f3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2f3c:	20000314 	.word	0x20000314
    2f40:	00002803 	.word	0x00002803
    2f44:	0000b5c8 	.word	0x0000b5c8

00002f48 <_ZNK8ATTClass9connectedEv>:
  return (_connectionHandle != 0xffff);
    2f48:	4b03      	ldr	r3, [pc, #12]	; (2f58 <_ZNK8ATTClass9connectedEv+0x10>)
    2f4a:	88c0      	ldrh	r0, [r0, #6]
    2f4c:	18c0      	adds	r0, r0, r3
    2f4e:	1e43      	subs	r3, r0, #1
    2f50:	4198      	sbcs	r0, r3
    2f52:	b2c0      	uxtb	r0, r0
}
    2f54:	4770      	bx	lr
    2f56:	46c0      	nop			; (mov r8, r8)
    2f58:	ffff0001 	.word	0xffff0001

00002f5c <_ZNK8ATTClass9connectedEtPKh>:
{
    2f5c:	b510      	push	{r4, lr}
    2f5e:	000c      	movs	r4, r1
    2f60:	0011      	movs	r1, r2
  return ((_connectionHandle == handle) && memcmp(_peerAddress, address, 6) == 0);
    2f62:	88c2      	ldrh	r2, [r0, #6]
    2f64:	2300      	movs	r3, #0
    2f66:	42a2      	cmp	r2, r4
    2f68:	d106      	bne.n	2f78 <_ZNK8ATTClass9connectedEtPKh+0x1c>
    2f6a:	3008      	adds	r0, #8
    2f6c:	2206      	movs	r2, #6
    2f6e:	f006 f961 	bl	9234 <memcmp>
    2f72:	4243      	negs	r3, r0
    2f74:	4143      	adcs	r3, r0
    2f76:	b2db      	uxtb	r3, r3
}
    2f78:	0018      	movs	r0, r3
    2f7a:	bd10      	pop	{r4, pc}

00002f7c <_ZN8ATTClass10disconnectEv>:
{
    2f7c:	b510      	push	{r4, lr}
  if (_connectionHandle != 0xffff) {
    2f7e:	4b0b      	ldr	r3, [pc, #44]	; (2fac <_ZN8ATTClass10disconnectEv+0x30>)
    2f80:	88c1      	ldrh	r1, [r0, #6]
{
    2f82:	0004      	movs	r4, r0
  if (_connectionHandle != 0xffff) {
    2f84:	4299      	cmp	r1, r3
    2f86:	d101      	bne.n	2f8c <_ZN8ATTClass10disconnectEv+0x10>
  return false;
    2f88:	2000      	movs	r0, #0
}
    2f8a:	bd10      	pop	{r4, pc}
    if (HCI.disconnect(_connectionHandle) != 0) {
    2f8c:	4808      	ldr	r0, [pc, #32]	; (2fb0 <_ZN8ATTClass10disconnectEv+0x34>)
    2f8e:	f001 fce9 	bl	4964 <_ZN8HCIClass10disconnectEt>
    2f92:	1e01      	subs	r1, r0, #0
    2f94:	d1f8      	bne.n	2f88 <_ZN8ATTClass10disconnectEv+0xc>
    _connectionHandle = 0xffff;
    2f96:	2301      	movs	r3, #1
    memset(_peerAddress, 0x00, sizeof(_peerAddress));
    2f98:	0020      	movs	r0, r4
    _connectionHandle = 0xffff;
    2f9a:	425b      	negs	r3, r3
    2f9c:	80e3      	strh	r3, [r4, #6]
    memset(_peerAddress, 0x00, sizeof(_peerAddress));
    2f9e:	3008      	adds	r0, #8
    2fa0:	2206      	movs	r2, #6
    2fa2:	f006 f971 	bl	9288 <memset>
    return true;
    2fa6:	2001      	movs	r0, #1
    2fa8:	e7ef      	b.n	2f8a <_ZN8ATTClass10disconnectEv+0xe>
    2faa:	46c0      	nop			; (mov r8, r8)
    2fac:	0000ffff 	.word	0x0000ffff
    2fb0:	20000480 	.word	0x20000480

00002fb4 <_ZN8ATTClass7centralEv>:
{
    2fb4:	b510      	push	{r4, lr}
    2fb6:	000a      	movs	r2, r1
  if (connected()) {
    2fb8:	4b06      	ldr	r3, [pc, #24]	; (2fd4 <_ZN8ATTClass7centralEv+0x20>)
  return (_connectionHandle != 0xffff);
    2fba:	88c9      	ldrh	r1, [r1, #6]
{
    2fbc:	0004      	movs	r4, r0
  if (connected()) {
    2fbe:	4299      	cmp	r1, r3
    2fc0:	d004      	beq.n	2fcc <_ZN8ATTClass7centralEv+0x18>
    return BLEDevice(_connectionHandle, _peerAddress);
    2fc2:	3208      	adds	r2, #8
    2fc4:	f7ff fa00 	bl	23c8 <_ZN9BLEDeviceC1EtPh>
}
    2fc8:	0020      	movs	r0, r4
    2fca:	bd10      	pop	{r4, pc}
  return BLEDevice();
    2fcc:	f7ff f9ea 	bl	23a4 <_ZN9BLEDeviceC1Ev>
    2fd0:	e7fa      	b.n	2fc8 <_ZN8ATTClass7centralEv+0x14>
    2fd2:	46c0      	nop			; (mov r8, r8)
    2fd4:	0000ffff 	.word	0x0000ffff

00002fd8 <_ZN8ATTClass12handleNotifyEtPKhi>:
{
    2fd8:	b5f0      	push	{r4, r5, r6, r7, lr}
    2fda:	b087      	sub	sp, #28
    2fdc:	af02      	add	r7, sp, #8
    2fde:	607a      	str	r2, [r7, #4]
    2fe0:	603b      	str	r3, [r7, #0]
    2fe2:	81f9      	strh	r1, [r7, #14]
  if (_connectionHandle != 0xffff) {
    2fe4:	88c6      	ldrh	r6, [r0, #6]
    2fe6:	4a18      	ldr	r2, [pc, #96]	; (3048 <_ZN8ATTClass12handleNotifyEtPKhi+0x70>)
  return false;
    2fe8:	2300      	movs	r3, #0
  if (_connectionHandle != 0xffff) {
    2fea:	4296      	cmp	r6, r2
    2fec:	d028      	beq.n	3040 <_ZN8ATTClass12handleNotifyEtPKhi+0x68>
    return true;
    2fee:	466b      	mov	r3, sp
    uint8_t notication[_mtu];
    2ff0:	466a      	mov	r2, sp
    return true;
    2ff2:	60bb      	str	r3, [r7, #8]
    uint8_t notication[_mtu];
    2ff4:	89c4      	ldrh	r4, [r0, #14]
    memcpy(&notication[1], &handle, sizeof(handle));
    2ff6:	2009      	movs	r0, #9
    uint8_t notication[_mtu];
    2ff8:	1de3      	adds	r3, r4, #7
    2ffa:	08db      	lsrs	r3, r3, #3
    2ffc:	00db      	lsls	r3, r3, #3
    2ffe:	1ad3      	subs	r3, r2, r3
    3000:	469d      	mov	sp, r3
    notication[0] = ATT_OP_HANDLE_NOTIFY;
    3002:	231b      	movs	r3, #27
    uint8_t notication[_mtu];
    3004:	ad02      	add	r5, sp, #8
    notication[0] = ATT_OP_HANDLE_NOTIFY;
    3006:	702b      	strb	r3, [r5, #0]
    memcpy(&notication[1], &handle, sizeof(handle));
    3008:	3b0d      	subs	r3, #13
    300a:	2202      	movs	r2, #2
    300c:	4468      	add	r0, sp
    300e:	18f9      	adds	r1, r7, r3
    3010:	f006 f91f 	bl	9252 <memcpy>
    length = min((uint16_t)(_mtu - noticationLength), (uint16_t)length);
    3014:	3c03      	subs	r4, #3
    3016:	883a      	ldrh	r2, [r7, #0]
    3018:	b2a4      	uxth	r4, r4
    301a:	4294      	cmp	r4, r2
    301c:	dd00      	ble.n	3020 <_ZN8ATTClass12handleNotifyEtPKhi+0x48>
    301e:	0014      	movs	r4, r2
    memcpy(&notication[noticationLength], value, length);
    3020:	0022      	movs	r2, r4
    3022:	6879      	ldr	r1, [r7, #4]
    3024:	1ce8      	adds	r0, r5, #3
    noticationLength += length;
    3026:	3403      	adds	r4, #3
    memcpy(&notication[noticationLength], value, length);
    3028:	f006 f913 	bl	9252 <memcpy>
    HCI.sendAclPkt(_connectionHandle, ATT_CID, noticationLength, notication);
    302c:	b2e3      	uxtb	r3, r4
    302e:	9500      	str	r5, [sp, #0]
    3030:	2204      	movs	r2, #4
    3032:	0031      	movs	r1, r6
    3034:	4805      	ldr	r0, [pc, #20]	; (304c <_ZN8ATTClass12handleNotifyEtPKhi+0x74>)
    3036:	f001 f9a9 	bl	438c <_ZN8HCIClass10sendAclPktEthhPv>
    303a:	68bb      	ldr	r3, [r7, #8]
    303c:	469d      	mov	sp, r3
    return true;
    303e:	2301      	movs	r3, #1
}
    3040:	0018      	movs	r0, r3
    3042:	46bd      	mov	sp, r7
    3044:	b005      	add	sp, #20
    3046:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3048:	0000ffff 	.word	0x0000ffff
    304c:	20000480 	.word	0x20000480

00003050 <_ZN8ATTClass9handleIndEtPKhi>:
{
    3050:	b5f0      	push	{r4, r5, r6, r7, lr}
    3052:	b089      	sub	sp, #36	; 0x24
    3054:	af02      	add	r7, sp, #8
    3056:	60ba      	str	r2, [r7, #8]
    3058:	607b      	str	r3, [r7, #4]
    305a:	82f9      	strh	r1, [r7, #22]
  if (_connectionHandle != 0xffff) {
    305c:	88c3      	ldrh	r3, [r0, #6]
{
    305e:	0005      	movs	r5, r0
  if (_connectionHandle != 0xffff) {
    3060:	613b      	str	r3, [r7, #16]
    3062:	001a      	movs	r2, r3
    3064:	4b1e      	ldr	r3, [pc, #120]	; (30e0 <_ZN8ATTClass9handleIndEtPKhi+0x90>)
  return false;
    3066:	2600      	movs	r6, #0
  if (_connectionHandle != 0xffff) {
    3068:	429a      	cmp	r2, r3
    306a:	d035      	beq.n	30d8 <_ZN8ATTClass9handleIndEtPKhi+0x88>
    return true;
    306c:	466b      	mov	r3, sp
    uint8_t indication[_mtu];
    306e:	466a      	mov	r2, sp
    return true;
    3070:	60fb      	str	r3, [r7, #12]
    uint8_t indication[_mtu];
    3072:	89c4      	ldrh	r4, [r0, #14]
    memcpy(&indication[1], &handle, sizeof(handle));
    3074:	2009      	movs	r0, #9
    uint8_t indication[_mtu];
    3076:	1de3      	adds	r3, r4, #7
    3078:	08db      	lsrs	r3, r3, #3
    307a:	00db      	lsls	r3, r3, #3
    307c:	1ad3      	subs	r3, r2, r3
    307e:	469d      	mov	sp, r3
    indication[0] = ATT_OP_HANDLE_IND;
    3080:	231d      	movs	r3, #29
    uint8_t indication[_mtu];
    3082:	ae02      	add	r6, sp, #8
    indication[0] = ATT_OP_HANDLE_IND;
    3084:	7033      	strb	r3, [r6, #0]
    memcpy(&indication[1], &handle, sizeof(handle));
    3086:	3b07      	subs	r3, #7
    3088:	2202      	movs	r2, #2
    308a:	4468      	add	r0, sp
    308c:	18f9      	adds	r1, r7, r3
    308e:	f006 f8e0 	bl	9252 <memcpy>
    length = min((uint16_t)(_mtu - indicationLength), (uint16_t)length);
    3092:	3c03      	subs	r4, #3
    3094:	88ba      	ldrh	r2, [r7, #4]
    3096:	b2a4      	uxth	r4, r4
    3098:	4294      	cmp	r4, r2
    309a:	dd00      	ble.n	309e <_ZN8ATTClass9handleIndEtPKhi+0x4e>
    309c:	0014      	movs	r4, r2
    memcpy(&indication[indicationLength], value, length);
    309e:	0022      	movs	r2, r4
    30a0:	68b9      	ldr	r1, [r7, #8]
    30a2:	1cf0      	adds	r0, r6, #3
    30a4:	f006 f8d5 	bl	9252 <memcpy>
    _cnf = false;
    30a8:	2300      	movs	r3, #0
    indicationLength += length;
    30aa:	3403      	adds	r4, #3
    _cnf = false;
    30ac:	742b      	strb	r3, [r5, #16]
    HCI.sendAclPkt(_connectionHandle, ATT_CID, indicationLength, indication);
    30ae:	b2e3      	uxtb	r3, r4
    30b0:	4c0c      	ldr	r4, [pc, #48]	; (30e4 <_ZN8ATTClass9handleIndEtPKhi+0x94>)
    30b2:	9600      	str	r6, [sp, #0]
    30b4:	2204      	movs	r2, #4
    30b6:	6939      	ldr	r1, [r7, #16]
    30b8:	0020      	movs	r0, r4
    30ba:	f001 f967 	bl	438c <_ZN8HCIClass10sendAclPktEthhPv>
    while (!_cnf) {
    30be:	7c2e      	ldrb	r6, [r5, #16]
    30c0:	b2f6      	uxtb	r6, r6
    30c2:	2e00      	cmp	r6, #0
    30c4:	d106      	bne.n	30d4 <_ZN8ATTClass9handleIndEtPKhi+0x84>
      HCI.poll();
    30c6:	0020      	movs	r0, r4
    30c8:	f001 fa66 	bl	4598 <_ZN8HCIClass4pollEv>
      if (!connected()) {
    30cc:	88eb      	ldrh	r3, [r5, #6]
    30ce:	4a04      	ldr	r2, [pc, #16]	; (30e0 <_ZN8ATTClass9handleIndEtPKhi+0x90>)
    30d0:	4293      	cmp	r3, r2
    30d2:	d1f4      	bne.n	30be <_ZN8ATTClass9handleIndEtPKhi+0x6e>
    30d4:	68fb      	ldr	r3, [r7, #12]
    30d6:	469d      	mov	sp, r3
}
    30d8:	0030      	movs	r0, r6
    30da:	46bd      	mov	sp, r7
    30dc:	b007      	add	sp, #28
    30de:	bdf0      	pop	{r4, r5, r6, r7, pc}
    30e0:	0000ffff 	.word	0x0000ffff
    30e4:	20000480 	.word	0x20000480

000030e8 <_ZN8ATTClass6mtuReqEthPh>:
{
    30e8:	b5f0      	push	{r4, r5, r6, r7, lr}
    30ea:	000f      	movs	r7, r1
    30ec:	b085      	sub	sp, #20
  if (dlen != 2) {
    30ee:	2a02      	cmp	r2, #2
    30f0:	d007      	beq.n	3102 <_ZN8ATTClass6mtuReqEthPh+0x1a>
    sendError(connectionHandle, ATT_OP_MTU_REQ, 0x0000, ATT_ECODE_INVALID_PDU);
    30f2:	2304      	movs	r3, #4
    30f4:	2200      	movs	r2, #0
    30f6:	2102      	movs	r1, #2
    30f8:	0038      	movs	r0, r7
    30fa:	f7ff fe65 	bl	2dc8 <_ZN8ATTClass9sendErrorEthth.constprop.3>
}
    30fe:	b005      	add	sp, #20
    3100:	bdf0      	pop	{r4, r5, r6, r7, pc}
  uint16_t mtu = *(uint16_t*)data;
    3102:	881c      	ldrh	r4, [r3, #0]
  if (mtu > _maxMtu) {
    3104:	8883      	ldrh	r3, [r0, #4]
    3106:	429c      	cmp	r4, r3
    3108:	dd00      	ble.n	310c <_ZN8ATTClass6mtuReqEthPh+0x24>
    mtu = _maxMtu;
    310a:	001c      	movs	r4, r3
  } mtuResp = { ATT_OP_MTU_RESP, mtu };
    310c:	2503      	movs	r5, #3
    310e:	ae03      	add	r6, sp, #12
  _mtu = mtu;
    3110:	81c4      	strh	r4, [r0, #14]
  } mtuResp = { ATT_OP_MTU_RESP, mtu };
    3112:	002a      	movs	r2, r5
    3114:	2100      	movs	r1, #0
    3116:	0030      	movs	r0, r6
    3118:	f006 f8b6 	bl	9288 <memset>
    311c:	230d      	movs	r3, #13
    311e:	446b      	add	r3, sp
    3120:	701c      	strb	r4, [r3, #0]
    3122:	0a24      	lsrs	r4, r4, #8
    3124:	705c      	strb	r4, [r3, #1]
    3126:	7035      	strb	r5, [r6, #0]
  HCI.sendAclPkt(connectionHandle, ATT_CID, sizeof(mtuResp), &mtuResp);
    3128:	002b      	movs	r3, r5
    312a:	9600      	str	r6, [sp, #0]
    312c:	2204      	movs	r2, #4
    312e:	0039      	movs	r1, r7
    3130:	4801      	ldr	r0, [pc, #4]	; (3138 <_ZN8ATTClass6mtuReqEthPh+0x50>)
    3132:	f001 f92b 	bl	438c <_ZN8HCIClass10sendAclPktEthhPv>
    3136:	e7e2      	b.n	30fe <_ZN8ATTClass6mtuReqEthPh+0x16>
    3138:	20000480 	.word	0x20000480

0000313c <_ZN8ATTClass11findInfoReqEthPh>:
{
    313c:	b5f0      	push	{r4, r5, r6, r7, lr}
    313e:	b08d      	sub	sp, #52	; 0x34
    3140:	af02      	add	r7, sp, #8
    3142:	61bb      	str	r3, [r7, #24]
  }
    3144:	466b      	mov	r3, sp
{
    3146:	6078      	str	r0, [r7, #4]
    3148:	60b9      	str	r1, [r7, #8]
  }
    314a:	603b      	str	r3, [r7, #0]
  if (dlen != sizeof(FindInfoReq)) {
    314c:	2a04      	cmp	r2, #4
    314e:	d00d      	beq.n	316c <_ZN8ATTClass11findInfoReqEthPh+0x30>
    sendError(connectionHandle, ATT_OP_FIND_INFO_REQ, findInfoReq->startHandle, ATT_ECODE_INVALID_PDU);
    3150:	69ba      	ldr	r2, [r7, #24]
    3152:	69bb      	ldr	r3, [r7, #24]
    3154:	7852      	ldrb	r2, [r2, #1]
    3156:	781b      	ldrb	r3, [r3, #0]
    3158:	0212      	lsls	r2, r2, #8
    315a:	431a      	orrs	r2, r3
    315c:	2304      	movs	r3, #4
    315e:	68b8      	ldr	r0, [r7, #8]
    3160:	0019      	movs	r1, r3
    3162:	f7ff fe31 	bl	2dc8 <_ZN8ATTClass9sendErrorEthth.constprop.3>
}
    3166:	46bd      	mov	sp, r7
    3168:	b00b      	add	sp, #44	; 0x2c
    316a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  uint8_t response[_mtu];
    316c:	466a      	mov	r2, sp
    316e:	687b      	ldr	r3, [r7, #4]
  responseLength = 2;
    3170:	2602      	movs	r6, #2
  uint8_t response[_mtu];
    3172:	89db      	ldrh	r3, [r3, #14]
    3174:	3307      	adds	r3, #7
    3176:	08db      	lsrs	r3, r3, #3
    3178:	00db      	lsls	r3, r3, #3
    317a:	1ad3      	subs	r3, r2, r3
    317c:	469d      	mov	sp, r3
    317e:	ab02      	add	r3, sp, #8
    3180:	61fb      	str	r3, [r7, #28]
  response[0] = ATT_OP_FIND_INFO_RESP;
    3182:	2305      	movs	r3, #5
    3184:	69fa      	ldr	r2, [r7, #28]
    3186:	7013      	strb	r3, [r2, #0]
  response[1] = 0x00;
    3188:	2300      	movs	r3, #0
    318a:	7053      	strb	r3, [r2, #1]
  for (uint16_t i = (findInfoReq->startHandle - 1); i < GATT.attributeCount() && i <= (findInfoReq->endHandle - 1); i++) {
    318c:	69bb      	ldr	r3, [r7, #24]
    318e:	781a      	ldrb	r2, [r3, #0]
    3190:	785b      	ldrb	r3, [r3, #1]
    3192:	021b      	lsls	r3, r3, #8
    3194:	4313      	orrs	r3, r2
    3196:	3b01      	subs	r3, #1
    3198:	b29b      	uxth	r3, r3
    319a:	617b      	str	r3, [r7, #20]
    319c:	4c49      	ldr	r4, [pc, #292]	; (32c4 <_ZN8ATTClass11findInfoReqEthPh+0x188>)
    319e:	0020      	movs	r0, r4
    31a0:	f000 ff6e 	bl	4080 <_ZNK9GATTClass14attributeCountEv>
    31a4:	697b      	ldr	r3, [r7, #20]
    31a6:	4283      	cmp	r3, r0
    31a8:	d207      	bcs.n	31ba <_ZN8ATTClass11findInfoReqEthPh+0x7e>
    31aa:	69bb      	ldr	r3, [r7, #24]
    31ac:	789a      	ldrb	r2, [r3, #2]
    31ae:	78db      	ldrb	r3, [r3, #3]
    31b0:	021b      	lsls	r3, r3, #8
    31b2:	4313      	orrs	r3, r2
    31b4:	697a      	ldr	r2, [r7, #20]
    31b6:	4293      	cmp	r3, r2
    31b8:	dc21      	bgt.n	31fe <_ZN8ATTClass11findInfoReqEthPh+0xc2>
  if (responseLength == 2) {
    31ba:	2e02      	cmp	r6, #2
    31bc:	d116      	bne.n	31ec <_ZN8ATTClass11findInfoReqEthPh+0xb0>
    sendError(connectionHandle, ATT_OP_FIND_INFO_REQ, findInfoReq->startHandle, ATT_ECODE_ATTR_NOT_FOUND);
    31be:	69ba      	ldr	r2, [r7, #24]
    31c0:	69bb      	ldr	r3, [r7, #24]
    31c2:	7852      	ldrb	r2, [r2, #1]
    31c4:	781b      	ldrb	r3, [r3, #0]
    31c6:	0212      	lsls	r2, r2, #8
    31c8:	431a      	orrs	r2, r3
    31ca:	2104      	movs	r1, #4
    31cc:	230a      	movs	r3, #10
    31ce:	68b8      	ldr	r0, [r7, #8]
    31d0:	f7ff fdfa 	bl	2dc8 <_ZN8ATTClass9sendErrorEthth.constprop.3>
    31d4:	683b      	ldr	r3, [r7, #0]
    31d6:	469d      	mov	sp, r3
    31d8:	e7c5      	b.n	3166 <_ZN8ATTClass11findInfoReqEthPh+0x2a>
    int uuidLen = isValueHandle ? 2 : attribute->uuidLength();
    31da:	2302      	movs	r3, #2
    31dc:	613b      	str	r3, [r7, #16]
    bool isValueHandle = (attribute->type() == BLETypeCharacteristic) && (((BLELocalCharacteristic*)attribute)->valueHandle() == handle);
    31de:	3b01      	subs	r3, #1
    31e0:	60fb      	str	r3, [r7, #12]
    31e2:	e02c      	b.n	323e <_ZN8ATTClass11findInfoReqEthPh+0x102>
    31e4:	2300      	movs	r3, #0
    31e6:	60fb      	str	r3, [r7, #12]
    int infoType = (uuidLen == 2) ? 0x01 : 0x02;
    31e8:	3301      	adds	r3, #1
    31ea:	e028      	b.n	323e <_ZN8ATTClass11findInfoReqEthPh+0x102>
    HCI.sendAclPkt(connectionHandle, ATT_CID, responseLength, response);
    31ec:	69fa      	ldr	r2, [r7, #28]
    31ee:	b2f3      	uxtb	r3, r6
    31f0:	9200      	str	r2, [sp, #0]
    31f2:	68b9      	ldr	r1, [r7, #8]
    31f4:	2204      	movs	r2, #4
    31f6:	4834      	ldr	r0, [pc, #208]	; (32c8 <_ZN8ATTClass11findInfoReqEthPh+0x18c>)
    31f8:	f001 f8c8 	bl	438c <_ZN8HCIClass10sendAclPktEthhPv>
    31fc:	e7ea      	b.n	31d4 <_ZN8ATTClass11findInfoReqEthPh+0x98>
    BLEAttribute* attribute = GATT.attribute(i);
    31fe:	6979      	ldr	r1, [r7, #20]
    3200:	0020      	movs	r0, r4
    3202:	f000 ff64 	bl	40ce <_ZNK9GATTClass9attributeEj>
    uint16_t handle = (i + 1);
    3206:	697b      	ldr	r3, [r7, #20]
    BLEAttribute* attribute = GATT.attribute(i);
    3208:	0005      	movs	r5, r0
    uint16_t handle = (i + 1);
    320a:	3301      	adds	r3, #1
    320c:	b29b      	uxth	r3, r3
    320e:	617b      	str	r3, [r7, #20]
    3210:	8abb      	ldrh	r3, [r7, #20]
    3212:	84bb      	strh	r3, [r7, #36]	; 0x24
    bool isValueHandle = (attribute->type() == BLETypeCharacteristic) && (((BLELocalCharacteristic*)attribute)->valueHandle() == handle);
    3214:	6803      	ldr	r3, [r0, #0]
    3216:	689b      	ldr	r3, [r3, #8]
    3218:	4798      	blx	r3
    321a:	4b2c      	ldr	r3, [pc, #176]	; (32cc <_ZN8ATTClass11findInfoReqEthPh+0x190>)
    321c:	4298      	cmp	r0, r3
    321e:	d105      	bne.n	322c <_ZN8ATTClass11findInfoReqEthPh+0xf0>
    3220:	0028      	movs	r0, r5
    3222:	f7ff fa6e 	bl	2702 <_ZNK22BLELocalCharacteristic11valueHandleEv>
    3226:	697b      	ldr	r3, [r7, #20]
    3228:	4283      	cmp	r3, r0
    322a:	d0d6      	beq.n	31da <_ZN8ATTClass11findInfoReqEthPh+0x9e>
    int uuidLen = isValueHandle ? 2 : attribute->uuidLength();
    322c:	0028      	movs	r0, r5
    322e:	f7fe ff93 	bl	2158 <_ZNK12BLEAttribute10uuidLengthEv>
    3232:	6138      	str	r0, [r7, #16]
    int infoType = (uuidLen == 2) ? 0x01 : 0x02;
    3234:	2802      	cmp	r0, #2
    3236:	d0d5      	beq.n	31e4 <_ZN8ATTClass11findInfoReqEthPh+0xa8>
    3238:	2300      	movs	r3, #0
    323a:	60fb      	str	r3, [r7, #12]
    323c:	3302      	adds	r3, #2
    if (response[1] == 0) {
    323e:	69fa      	ldr	r2, [r7, #28]
    3240:	7852      	ldrb	r2, [r2, #1]
    3242:	2a00      	cmp	r2, #0
    3244:	d101      	bne.n	324a <_ZN8ATTClass11findInfoReqEthPh+0x10e>
      response[1] = infoType;
    3246:	69fa      	ldr	r2, [r7, #28]
    3248:	7053      	strb	r3, [r2, #1]
    if (response[1] != infoType) {
    324a:	69fa      	ldr	r2, [r7, #28]
    324c:	7852      	ldrb	r2, [r2, #1]
    324e:	4293      	cmp	r3, r2
    3250:	d1b3      	bne.n	31ba <_ZN8ATTClass11findInfoReqEthPh+0x7e>
    memcpy(&response[responseLength], &handle, sizeof(handle));
    3252:	69fb      	ldr	r3, [r7, #28]
    3254:	2202      	movs	r2, #2
    3256:	1998      	adds	r0, r3, r6
    3258:	2324      	movs	r3, #36	; 0x24
    325a:	18f9      	adds	r1, r7, r3
    325c:	f005 fff9 	bl	9252 <memcpy>
    if (isValueHandle || attribute->type() == BLETypeDescriptor) {
    3260:	68fb      	ldr	r3, [r7, #12]
    responseLength += sizeof(handle);
    3262:	1cb4      	adds	r4, r6, #2
    3264:	b2a4      	uxth	r4, r4
    if (isValueHandle || attribute->type() == BLETypeDescriptor) {
    3266:	2b00      	cmp	r3, #0
    3268:	d107      	bne.n	327a <_ZN8ATTClass11findInfoReqEthPh+0x13e>
    326a:	682b      	ldr	r3, [r5, #0]
    326c:	0028      	movs	r0, r5
    326e:	689b      	ldr	r3, [r3, #8]
    3270:	4798      	blx	r3
    3272:	23a4      	movs	r3, #164	; 0xa4
    3274:	019b      	lsls	r3, r3, #6
    3276:	4298      	cmp	r0, r3
    3278:	d115      	bne.n	32a6 <_ZN8ATTClass11findInfoReqEthPh+0x16a>
      memcpy(&response[responseLength], attribute->uuidData(), uuidLen);
    327a:	69fb      	ldr	r3, [r7, #28]
    327c:	0028      	movs	r0, r5
    327e:	191e      	adds	r6, r3, r4
    3280:	f7fe ff65 	bl	214e <_ZNK12BLEAttribute8uuidDataEv>
    3284:	693a      	ldr	r2, [r7, #16]
    3286:	0001      	movs	r1, r0
    3288:	0030      	movs	r0, r6
    328a:	f005 ffe2 	bl	9252 <memcpy>
      responseLength += uuidLen;
    328e:	693b      	ldr	r3, [r7, #16]
    3290:	18e4      	adds	r4, r4, r3
    3292:	b2a6      	uxth	r6, r4
    if ((responseLength + (2 + uuidLen)) > _mtu) {
    3294:	693b      	ldr	r3, [r7, #16]
    3296:	687a      	ldr	r2, [r7, #4]
    3298:	3302      	adds	r3, #2
    329a:	89d2      	ldrh	r2, [r2, #14]
    329c:	199b      	adds	r3, r3, r6
    329e:	4293      	cmp	r3, r2
    32a0:	dc00      	bgt.n	32a4 <_ZN8ATTClass11findInfoReqEthPh+0x168>
    32a2:	e77b      	b.n	319c <_ZN8ATTClass11findInfoReqEthPh+0x60>
    32a4:	e789      	b.n	31ba <_ZN8ATTClass11findInfoReqEthPh+0x7e>
      uint16_t type = attribute->type();
    32a6:	682b      	ldr	r3, [r5, #0]
    32a8:	0028      	movs	r0, r5
    32aa:	689b      	ldr	r3, [r3, #8]
    32ac:	4798      	blx	r3
      memcpy(&response[responseLength], &type, sizeof(type));
    32ae:	69fb      	ldr	r3, [r7, #28]
      uint16_t type = attribute->type();
    32b0:	84f8      	strh	r0, [r7, #38]	; 0x26
      memcpy(&response[responseLength], &type, sizeof(type));
    32b2:	1918      	adds	r0, r3, r4
    32b4:	2326      	movs	r3, #38	; 0x26
    32b6:	2202      	movs	r2, #2
    32b8:	18f9      	adds	r1, r7, r3
      responseLength += sizeof(type);
    32ba:	3604      	adds	r6, #4
      memcpy(&response[responseLength], &type, sizeof(type));
    32bc:	f005 ffc9 	bl	9252 <memcpy>
      responseLength += sizeof(type);
    32c0:	b2b6      	uxth	r6, r6
    32c2:	e7e7      	b.n	3294 <_ZN8ATTClass11findInfoReqEthPh+0x158>
    32c4:	20000314 	.word	0x20000314
    32c8:	20000480 	.word	0x20000480
    32cc:	00002803 	.word	0x00002803

000032d0 <_ZN8ATTClass13findByTypeReqEthPh>:
{
    32d0:	b5f0      	push	{r4, r5, r6, r7, lr}
    32d2:	b08b      	sub	sp, #44	; 0x2c
    32d4:	001c      	movs	r4, r3
  }
    32d6:	466b      	mov	r3, sp
{
    32d8:	af02      	add	r7, sp, #8
    32da:	60f9      	str	r1, [r7, #12]
    32dc:	6078      	str	r0, [r7, #4]
  }
    32de:	603b      	str	r3, [r7, #0]
    32e0:	7821      	ldrb	r1, [r4, #0]
  if (dlen < sizeof(FindByTypeReq)) {
    32e2:	2a05      	cmp	r2, #5
    32e4:	d80a      	bhi.n	32fc <_ZN8ATTClass13findByTypeReqEthPh+0x2c>
    sendError(connectionHandle, ATT_OP_FIND_BY_TYPE_RESP, findByTypeReq->startHandle, ATT_ECODE_INVALID_PDU);
    32e6:	7862      	ldrb	r2, [r4, #1]
    32e8:	2304      	movs	r3, #4
    32ea:	0212      	lsls	r2, r2, #8
    32ec:	430a      	orrs	r2, r1
    32ee:	68f8      	ldr	r0, [r7, #12]
    32f0:	2107      	movs	r1, #7
    32f2:	f7ff fd69 	bl	2dc8 <_ZN8ATTClass9sendErrorEthth.constprop.3>
}
    32f6:	46bd      	mov	sp, r7
    32f8:	b009      	add	sp, #36	; 0x24
    32fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
  uint8_t response[_mtu];
    32fc:	4668      	mov	r0, sp
    32fe:	687b      	ldr	r3, [r7, #4]
    3300:	89db      	ldrh	r3, [r3, #14]
    3302:	3307      	adds	r3, #7
    3304:	08db      	lsrs	r3, r3, #3
    3306:	00db      	lsls	r3, r3, #3
    3308:	1ac3      	subs	r3, r0, r3
    330a:	469d      	mov	sp, r3
    330c:	ab02      	add	r3, sp, #8
    330e:	613b      	str	r3, [r7, #16]
  response[0] = ATT_OP_FIND_BY_TYPE_RESP;
    3310:	2307      	movs	r3, #7
    3312:	6938      	ldr	r0, [r7, #16]
    3314:	7003      	strb	r3, [r0, #0]
  if (findByTypeReq->type == BLETypeService) {
    3316:	20a0      	movs	r0, #160	; 0xa0
    3318:	7963      	ldrb	r3, [r4, #5]
    331a:	7925      	ldrb	r5, [r4, #4]
    331c:	021b      	lsls	r3, r3, #8
    331e:	0180      	lsls	r0, r0, #6
    3320:	432b      	orrs	r3, r5
    3322:	4283      	cmp	r3, r0
    3324:	d00b      	beq.n	333e <_ZN8ATTClass13findByTypeReqEthPh+0x6e>
    sendError(connectionHandle, ATT_OP_FIND_BY_TYPE_RESP, findByTypeReq->startHandle, ATT_ECODE_ATTR_NOT_FOUND);
    3326:	7862      	ldrb	r2, [r4, #1]
    3328:	7823      	ldrb	r3, [r4, #0]
    332a:	0212      	lsls	r2, r2, #8
    332c:	431a      	orrs	r2, r3
    332e:	2107      	movs	r1, #7
    3330:	230a      	movs	r3, #10
    3332:	68f8      	ldr	r0, [r7, #12]
    3334:	f7ff fd48 	bl	2dc8 <_ZN8ATTClass9sendErrorEthth.constprop.3>
    3338:	683b      	ldr	r3, [r7, #0]
    333a:	469d      	mov	sp, r3
    333c:	e7db      	b.n	32f6 <_ZN8ATTClass13findByTypeReqEthPh+0x26>
  responseLength = 1;
    333e:	2501      	movs	r5, #1
  uint16_t valueLength = dlen - sizeof(*findByTypeReq);
    3340:	3a06      	subs	r2, #6
    3342:	b293      	uxth	r3, r2
    for (uint16_t i = (findByTypeReq->startHandle - 1); i < GATT.attributeCount() && i <= (findByTypeReq->endHandle - 1); i++) {
    3344:	7862      	ldrb	r2, [r4, #1]
  uint16_t valueLength = dlen - sizeof(*findByTypeReq);
    3346:	60bb      	str	r3, [r7, #8]
    for (uint16_t i = (findByTypeReq->startHandle - 1); i < GATT.attributeCount() && i <= (findByTypeReq->endHandle - 1); i++) {
    3348:	0212      	lsls	r2, r2, #8
    334a:	430a      	orrs	r2, r1
    334c:	3a01      	subs	r2, #1
    334e:	b293      	uxth	r3, r2
    3350:	617b      	str	r3, [r7, #20]
    3352:	4e2d      	ldr	r6, [pc, #180]	; (3408 <_ZN8ATTClass13findByTypeReqEthPh+0x138>)
    3354:	0030      	movs	r0, r6
    3356:	f000 fe93 	bl	4080 <_ZNK9GATTClass14attributeCountEv>
    335a:	697b      	ldr	r3, [r7, #20]
    335c:	4283      	cmp	r3, r0
    335e:	d206      	bcs.n	336e <_ZN8ATTClass13findByTypeReqEthPh+0x9e>
    3360:	78e3      	ldrb	r3, [r4, #3]
    3362:	78a2      	ldrb	r2, [r4, #2]
    3364:	021b      	lsls	r3, r3, #8
    3366:	4313      	orrs	r3, r2
    3368:	697a      	ldr	r2, [r7, #20]
    336a:	4293      	cmp	r3, r2
    336c:	dc0a      	bgt.n	3384 <_ZN8ATTClass13findByTypeReqEthPh+0xb4>
  if (responseLength == 1) {
    336e:	2d01      	cmp	r5, #1
    3370:	d0d9      	beq.n	3326 <_ZN8ATTClass13findByTypeReqEthPh+0x56>
    HCI.sendAclPkt(connectionHandle, ATT_CID, responseLength, response);
    3372:	693a      	ldr	r2, [r7, #16]
    3374:	b2eb      	uxtb	r3, r5
    3376:	9200      	str	r2, [sp, #0]
    3378:	68f9      	ldr	r1, [r7, #12]
    337a:	2204      	movs	r2, #4
    337c:	4823      	ldr	r0, [pc, #140]	; (340c <_ZN8ATTClass13findByTypeReqEthPh+0x13c>)
    337e:	f001 f805 	bl	438c <_ZN8HCIClass10sendAclPktEthhPv>
    3382:	e7d9      	b.n	3338 <_ZN8ATTClass13findByTypeReqEthPh+0x68>
      BLEAttribute* attribute = GATT.attribute(i);
    3384:	6979      	ldr	r1, [r7, #20]
    3386:	0030      	movs	r0, r6
    3388:	f000 fea1 	bl	40ce <_ZNK9GATTClass9attributeEj>
      if ((attribute->type() == findByTypeReq->type) && (attribute->uuidLength() == valueLength) && memcmp(attribute->uuidData(), value, valueLength) == 0) {
    338c:	6803      	ldr	r3, [r0, #0]
      BLEAttribute* attribute = GATT.attribute(i);
    338e:	0006      	movs	r6, r0
      if ((attribute->type() == findByTypeReq->type) && (attribute->uuidLength() == valueLength) && memcmp(attribute->uuidData(), value, valueLength) == 0) {
    3390:	689b      	ldr	r3, [r3, #8]
    3392:	4798      	blx	r3
    3394:	7963      	ldrb	r3, [r4, #5]
    3396:	7922      	ldrb	r2, [r4, #4]
    3398:	021b      	lsls	r3, r3, #8
    339a:	4313      	orrs	r3, r2
    339c:	4298      	cmp	r0, r3
    339e:	d10e      	bne.n	33be <_ZN8ATTClass13findByTypeReqEthPh+0xee>
    33a0:	0030      	movs	r0, r6
    33a2:	f7fe fed9 	bl	2158 <_ZNK12BLEAttribute10uuidLengthEv>
    33a6:	68bb      	ldr	r3, [r7, #8]
    33a8:	4298      	cmp	r0, r3
    33aa:	d108      	bne.n	33be <_ZN8ATTClass13findByTypeReqEthPh+0xee>
    33ac:	0030      	movs	r0, r6
    33ae:	f7fe fece 	bl	214e <_ZNK12BLEAttribute8uuidDataEv>
  uint8_t* value = &data[sizeof(*findByTypeReq)];
    33b2:	1da1      	adds	r1, r4, #6
      if ((attribute->type() == findByTypeReq->type) && (attribute->uuidLength() == valueLength) && memcmp(attribute->uuidData(), value, valueLength) == 0) {
    33b4:	68ba      	ldr	r2, [r7, #8]
    33b6:	f005 ff3d 	bl	9234 <memcmp>
    33ba:	2800      	cmp	r0, #0
    33bc:	d009      	beq.n	33d2 <_ZN8ATTClass13findByTypeReqEthPh+0x102>
      if ((responseLength + 4) > _mtu) {
    33be:	687a      	ldr	r2, [r7, #4]
    33c0:	1ceb      	adds	r3, r5, #3
    33c2:	89d2      	ldrh	r2, [r2, #14]
    33c4:	4293      	cmp	r3, r2
    33c6:	dad2      	bge.n	336e <_ZN8ATTClass13findByTypeReqEthPh+0x9e>
    for (uint16_t i = (findByTypeReq->startHandle - 1); i < GATT.attributeCount() && i <= (findByTypeReq->endHandle - 1); i++) {
    33c8:	697a      	ldr	r2, [r7, #20]
    33ca:	3201      	adds	r2, #1
    33cc:	b293      	uxth	r3, r2
    33ce:	617b      	str	r3, [r7, #20]
    33d0:	e7bf      	b.n	3352 <_ZN8ATTClass13findByTypeReqEthPh+0x82>
        uint16_t startHandle = service->startHandle();
    33d2:	0030      	movs	r0, r6
    33d4:	f7ff fc5f 	bl	2c96 <_ZNK15BLELocalService11startHandleEv>
        memcpy(&response[responseLength], &startHandle, sizeof(startHandle));
    33d8:	693b      	ldr	r3, [r7, #16]
        uint16_t startHandle = service->startHandle();
    33da:	83b8      	strh	r0, [r7, #28]
        memcpy(&response[responseLength], &startHandle, sizeof(startHandle));
    33dc:	1958      	adds	r0, r3, r5
    33de:	231c      	movs	r3, #28
    33e0:	2202      	movs	r2, #2
    33e2:	18f9      	adds	r1, r7, r3
    33e4:	f005 ff35 	bl	9252 <memcpy>
        uint16_t endHandle = service->endHandle();
    33e8:	0030      	movs	r0, r6
    33ea:	f7ff fc56 	bl	2c9a <_ZNK15BLELocalService9endHandleEv>
        memcpy(&response[responseLength], &endHandle, sizeof(endHandle));
    33ee:	693b      	ldr	r3, [r7, #16]
        uint16_t endHandle = service->endHandle();
    33f0:	83f8      	strh	r0, [r7, #30]
        responseLength += sizeof(startHandle);
    33f2:	1ca8      	adds	r0, r5, #2
        memcpy(&response[responseLength], &endHandle, sizeof(endHandle));
    33f4:	b280      	uxth	r0, r0
    33f6:	1818      	adds	r0, r3, r0
    33f8:	231e      	movs	r3, #30
    33fa:	2202      	movs	r2, #2
    33fc:	18f9      	adds	r1, r7, r3
        responseLength += sizeof(endHandle);
    33fe:	3504      	adds	r5, #4
        memcpy(&response[responseLength], &endHandle, sizeof(endHandle));
    3400:	f005 ff27 	bl	9252 <memcpy>
        responseLength += sizeof(endHandle);
    3404:	b2ad      	uxth	r5, r5
    3406:	e7da      	b.n	33be <_ZN8ATTClass13findByTypeReqEthPh+0xee>
    3408:	20000314 	.word	0x20000314
    340c:	20000480 	.word	0x20000480

00003410 <_ZN8ATTClass14readByGroupReqEthPh>:
{
    3410:	b5f0      	push	{r4, r5, r6, r7, lr}
    3412:	b08f      	sub	sp, #60	; 0x3c
    3414:	001e      	movs	r6, r3
  }
    3416:	466b      	mov	r3, sp
{
    3418:	af02      	add	r7, sp, #8
    341a:	60b8      	str	r0, [r7, #8]
    341c:	6179      	str	r1, [r7, #20]
  }
    341e:	60fb      	str	r3, [r7, #12]
  if (dlen != sizeof(ReadByGroupReq) || (readByGroupReq->uuid != BLETypeService && readByGroupReq->uuid != 0x2801)) {
    3420:	2a06      	cmp	r2, #6
    3422:	d107      	bne.n	3434 <_ZN8ATTClass14readByGroupReqEthPh+0x24>
    3424:	7973      	ldrb	r3, [r6, #5]
    3426:	7931      	ldrb	r1, [r6, #4]
    3428:	021b      	lsls	r3, r3, #8
    342a:	430b      	orrs	r3, r1
    342c:	4955      	ldr	r1, [pc, #340]	; (3584 <_ZN8ATTClass14readByGroupReqEthPh+0x174>)
    342e:	185b      	adds	r3, r3, r1
    3430:	2b01      	cmp	r3, #1
    3432:	d90d      	bls.n	3450 <_ZN8ATTClass14readByGroupReqEthPh+0x40>
    sendError(connectionHandle, ATT_OP_READ_BY_GROUP_REQ, readByGroupReq->startHandle, ATT_ECODE_UNSUPP_GRP_TYPE);
    3434:	7872      	ldrb	r2, [r6, #1]
    3436:	7833      	ldrb	r3, [r6, #0]
    3438:	0212      	lsls	r2, r2, #8
    343a:	431a      	orrs	r2, r3
    343c:	2310      	movs	r3, #16
    343e:	0019      	movs	r1, r3
    sendError(connectionHandle, ATT_OP_READ_BY_GROUP_REQ, readByGroupReq->startHandle, ATT_ECODE_ATTR_NOT_FOUND);
    3440:	6978      	ldr	r0, [r7, #20]
    3442:	f7ff fcc1 	bl	2dc8 <_ZN8ATTClass9sendErrorEthth.constprop.3>
    3446:	68fb      	ldr	r3, [r7, #12]
    3448:	469d      	mov	sp, r3
}
    344a:	46bd      	mov	sp, r7
    344c:	b00d      	add	sp, #52	; 0x34
    344e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  uint8_t response[_mtu];
    3450:	4669      	mov	r1, sp
    3452:	68bb      	ldr	r3, [r7, #8]
    3454:	89db      	ldrh	r3, [r3, #14]
    3456:	3307      	adds	r3, #7
    3458:	08db      	lsrs	r3, r3, #3
    345a:	00db      	lsls	r3, r3, #3
    345c:	1acb      	subs	r3, r1, r3
    345e:	469d      	mov	sp, r3
    3460:	ab02      	add	r3, sp, #8
    3462:	627b      	str	r3, [r7, #36]	; 0x24
  response[0] = ATT_OP_READ_BY_GROUP_RESP;
    3464:	2311      	movs	r3, #17
    3466:	6a79      	ldr	r1, [r7, #36]	; 0x24
    3468:	700b      	strb	r3, [r1, #0]
  response[1] = 0x00;
    346a:	2300      	movs	r3, #0
    346c:	704b      	strb	r3, [r1, #1]
  for (uint16_t i = (readByGroupReq->startHandle - 1); i < GATT.attributeCount() && i <= (readByGroupReq->endHandle - 1); i++) {
    346e:	7873      	ldrb	r3, [r6, #1]
    3470:	7831      	ldrb	r1, [r6, #0]
    3472:	021b      	lsls	r3, r3, #8
    3474:	430b      	orrs	r3, r1
    3476:	3b01      	subs	r3, #1
    3478:	b29b      	uxth	r3, r3
    347a:	61fb      	str	r3, [r7, #28]
  responseLength = 2;
    347c:	2302      	movs	r3, #2
    int infoSize = (uuidLen == 2) ? 6 : 20;
    347e:	607a      	str	r2, [r7, #4]
  responseLength = 2;
    3480:	623b      	str	r3, [r7, #32]
  for (uint16_t i = (readByGroupReq->startHandle - 1); i < GATT.attributeCount() && i <= (readByGroupReq->endHandle - 1); i++) {
    3482:	4c41      	ldr	r4, [pc, #260]	; (3588 <_ZN8ATTClass14readByGroupReqEthPh+0x178>)
    3484:	0020      	movs	r0, r4
    3486:	f000 fdfb 	bl	4080 <_ZNK9GATTClass14attributeCountEv>
    348a:	69fb      	ldr	r3, [r7, #28]
    348c:	4283      	cmp	r3, r0
    348e:	d206      	bcs.n	349e <_ZN8ATTClass14readByGroupReqEthPh+0x8e>
    3490:	78f3      	ldrb	r3, [r6, #3]
    3492:	78b2      	ldrb	r2, [r6, #2]
    3494:	021b      	lsls	r3, r3, #8
    3496:	4313      	orrs	r3, r2
    3498:	69fa      	ldr	r2, [r7, #28]
    349a:	4293      	cmp	r3, r2
    349c:	dc14      	bgt.n	34c8 <_ZN8ATTClass14readByGroupReqEthPh+0xb8>
  if (responseLength == 2) {
    349e:	6a3b      	ldr	r3, [r7, #32]
    34a0:	2b02      	cmp	r3, #2
    34a2:	d106      	bne.n	34b2 <_ZN8ATTClass14readByGroupReqEthPh+0xa2>
    sendError(connectionHandle, ATT_OP_READ_BY_GROUP_REQ, readByGroupReq->startHandle, ATT_ECODE_ATTR_NOT_FOUND);
    34a4:	7872      	ldrb	r2, [r6, #1]
    34a6:	7833      	ldrb	r3, [r6, #0]
    34a8:	0212      	lsls	r2, r2, #8
    34aa:	431a      	orrs	r2, r3
    34ac:	2110      	movs	r1, #16
    34ae:	230a      	movs	r3, #10
    34b0:	e7c6      	b.n	3440 <_ZN8ATTClass14readByGroupReqEthPh+0x30>
    HCI.sendAclPkt(connectionHandle, ATT_CID, responseLength, response);
    34b2:	2320      	movs	r3, #32
    34b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    34b6:	18fb      	adds	r3, r7, r3
    34b8:	781b      	ldrb	r3, [r3, #0]
    34ba:	9200      	str	r2, [sp, #0]
    34bc:	6979      	ldr	r1, [r7, #20]
    34be:	2204      	movs	r2, #4
    34c0:	4832      	ldr	r0, [pc, #200]	; (358c <_ZN8ATTClass14readByGroupReqEthPh+0x17c>)
    34c2:	f000 ff63 	bl	438c <_ZN8HCIClass10sendAclPktEthhPv>
    34c6:	e7be      	b.n	3446 <_ZN8ATTClass14readByGroupReqEthPh+0x36>
    BLEAttribute* attribute = GATT.attribute(i);
    34c8:	0020      	movs	r0, r4
    34ca:	69f9      	ldr	r1, [r7, #28]
    34cc:	f000 fdff 	bl	40ce <_ZNK9GATTClass9attributeEj>
    if (readByGroupReq->uuid != attribute->type()) {
    34d0:	7975      	ldrb	r5, [r6, #5]
    34d2:	7933      	ldrb	r3, [r6, #4]
    34d4:	022d      	lsls	r5, r5, #8
    34d6:	431d      	orrs	r5, r3
    34d8:	6803      	ldr	r3, [r0, #0]
    BLEAttribute* attribute = GATT.attribute(i);
    34da:	0004      	movs	r4, r0
    if (readByGroupReq->uuid != attribute->type()) {
    34dc:	689b      	ldr	r3, [r3, #8]
    34de:	4798      	blx	r3
    34e0:	4285      	cmp	r5, r0
    34e2:	d149      	bne.n	3578 <_ZN8ATTClass14readByGroupReqEthPh+0x168>
    int uuidLen = attribute->uuidLength();
    34e4:	0020      	movs	r0, r4
    34e6:	f7fe fe37 	bl	2158 <_ZNK12BLEAttribute10uuidLengthEv>
    int infoSize = (uuidLen == 2) ? 6 : 20;
    34ea:	687b      	ldr	r3, [r7, #4]
    int uuidLen = attribute->uuidLength();
    34ec:	6138      	str	r0, [r7, #16]
    int infoSize = (uuidLen == 2) ? 6 : 20;
    34ee:	61bb      	str	r3, [r7, #24]
    34f0:	2802      	cmp	r0, #2
    34f2:	d001      	beq.n	34f8 <_ZN8ATTClass14readByGroupReqEthPh+0xe8>
    34f4:	2314      	movs	r3, #20
    34f6:	61bb      	str	r3, [r7, #24]
    if (response[1] == 0) {
    34f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    34fa:	785b      	ldrb	r3, [r3, #1]
    34fc:	2b00      	cmp	r3, #0
    34fe:	d102      	bne.n	3506 <_ZN8ATTClass14readByGroupReqEthPh+0xf6>
      response[1] = infoSize;
    3500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3502:	7e3a      	ldrb	r2, [r7, #24]
    3504:	705a      	strb	r2, [r3, #1]
    if (response[1] != infoSize) {
    3506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3508:	69ba      	ldr	r2, [r7, #24]
    350a:	785b      	ldrb	r3, [r3, #1]
    350c:	429a      	cmp	r2, r3
    350e:	d1c6      	bne.n	349e <_ZN8ATTClass14readByGroupReqEthPh+0x8e>
    uint16_t startHandle = service->startHandle();
    3510:	0020      	movs	r0, r4
    3512:	f7ff fbc0 	bl	2c96 <_ZNK15BLELocalService11startHandleEv>
    memcpy(&response[responseLength], &startHandle, sizeof(startHandle));
    3516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3518:	6a3a      	ldr	r2, [r7, #32]
    uint16_t startHandle = service->startHandle();
    351a:	85b8      	strh	r0, [r7, #44]	; 0x2c
    memcpy(&response[responseLength], &startHandle, sizeof(startHandle));
    351c:	1898      	adds	r0, r3, r2
    351e:	232c      	movs	r3, #44	; 0x2c
    3520:	2202      	movs	r2, #2
    3522:	18f9      	adds	r1, r7, r3
    3524:	f005 fe95 	bl	9252 <memcpy>
    uint16_t endHandle = service->endHandle();
    3528:	0020      	movs	r0, r4
    352a:	f7ff fbb6 	bl	2c9a <_ZNK15BLELocalService9endHandleEv>
    responseLength += sizeof(startHandle);
    352e:	6a3b      	ldr	r3, [r7, #32]
    uint16_t endHandle = service->endHandle();
    3530:	85f8      	strh	r0, [r7, #46]	; 0x2e
    responseLength += sizeof(startHandle);
    3532:	1c98      	adds	r0, r3, #2
    memcpy(&response[responseLength], &endHandle, sizeof(endHandle));
    3534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3536:	b280      	uxth	r0, r0
    3538:	1818      	adds	r0, r3, r0
    353a:	232e      	movs	r3, #46	; 0x2e
    353c:	2202      	movs	r2, #2
    353e:	18f9      	adds	r1, r7, r3
    3540:	f005 fe87 	bl	9252 <memcpy>
    responseLength += sizeof(endHandle);
    3544:	6a3b      	ldr	r3, [r7, #32]
    memcpy(&response[responseLength], service->uuidData(), uuidLen);
    3546:	0020      	movs	r0, r4
    responseLength += sizeof(endHandle);
    3548:	1d1d      	adds	r5, r3, #4
    memcpy(&response[responseLength], service->uuidData(), uuidLen);
    354a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    responseLength += sizeof(endHandle);
    354c:	b2ad      	uxth	r5, r5
    memcpy(&response[responseLength], service->uuidData(), uuidLen);
    354e:	195b      	adds	r3, r3, r5
    3550:	623b      	str	r3, [r7, #32]
    3552:	f7fe fdfc 	bl	214e <_ZNK12BLEAttribute8uuidDataEv>
    3556:	693a      	ldr	r2, [r7, #16]
    3558:	0001      	movs	r1, r0
    355a:	6a38      	ldr	r0, [r7, #32]
    355c:	f005 fe79 	bl	9252 <memcpy>
    responseLength += uuidLen;
    3560:	693b      	ldr	r3, [r7, #16]
    3562:	18ed      	adds	r5, r5, r3
    3564:	b2ab      	uxth	r3, r5
    3566:	623b      	str	r3, [r7, #32]
    if ((responseLength + infoSize) > _mtu) {
    3568:	6a3a      	ldr	r2, [r7, #32]
    356a:	69bb      	ldr	r3, [r7, #24]
    356c:	4694      	mov	ip, r2
    356e:	68ba      	ldr	r2, [r7, #8]
    3570:	4463      	add	r3, ip
    3572:	89d2      	ldrh	r2, [r2, #14]
    3574:	4293      	cmp	r3, r2
    3576:	dc92      	bgt.n	349e <_ZN8ATTClass14readByGroupReqEthPh+0x8e>
  for (uint16_t i = (readByGroupReq->startHandle - 1); i < GATT.attributeCount() && i <= (readByGroupReq->endHandle - 1); i++) {
    3578:	69fb      	ldr	r3, [r7, #28]
    357a:	3301      	adds	r3, #1
    357c:	b29b      	uxth	r3, r3
    357e:	61fb      	str	r3, [r7, #28]
    3580:	e77f      	b.n	3482 <_ZN8ATTClass14readByGroupReqEthPh+0x72>
    3582:	46c0      	nop			; (mov r8, r8)
    3584:	ffffd800 	.word	0xffffd800
    3588:	20000314 	.word	0x20000314
    358c:	20000480 	.word	0x20000480

00003590 <_ZN8ATTClass17readOrReadBlobReqEthhPh>:
{
    3590:	b5f0      	push	{r4, r5, r6, r7, lr}
    3592:	b08d      	sub	sp, #52	; 0x34
    3594:	000e      	movs	r6, r1
  HCI.sendAclPkt(connectionHandle, ATT_CID, responseLength, response);
    3596:	4669      	mov	r1, sp
{
    3598:	af02      	add	r7, sp, #8
    359a:	0014      	movs	r4, r2
    359c:	60b8      	str	r0, [r7, #8]
    359e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
  HCI.sendAclPkt(connectionHandle, ATT_CID, responseLength, response);
    35a0:	6079      	str	r1, [r7, #4]
  if (opcode == ATT_OP_READ_REQ) {
    35a2:	2c0a      	cmp	r4, #10
    35a4:	d105      	bne.n	35b2 <_ZN8ATTClass17readOrReadBlobReqEthhPh+0x22>
    if (dlen != sizeof(uint16_t)) {
    35a6:	2b02      	cmp	r3, #2
    35a8:	d010      	beq.n	35cc <_ZN8ATTClass17readOrReadBlobReqEthhPh+0x3c>
      sendError(connectionHandle, ATT_OP_READ_REQ, 0x0000, ATT_ECODE_INVALID_PDU);
    35aa:	2304      	movs	r3, #4
    35ac:	2200      	movs	r2, #0
      sendError(connectionHandle, opcode, handle, ATT_ECODE_INVALID_OFFSET);
    35ae:	0021      	movs	r1, r4
    35b0:	e004      	b.n	35bc <_ZN8ATTClass17readOrReadBlobReqEthhPh+0x2c>
    if (dlen != (sizeof(uint16_t) + sizeof(uint16_t))) {
    35b2:	2b04      	cmp	r3, #4
    35b4:	d00a      	beq.n	35cc <_ZN8ATTClass17readOrReadBlobReqEthhPh+0x3c>
      sendError(connectionHandle, ATT_OP_READ_BLOB_REQ, 0x0000, ATT_ECODE_INVALID_PDU);
    35b6:	2304      	movs	r3, #4
    35b8:	2200      	movs	r2, #0
    35ba:	210c      	movs	r1, #12
      sendError(connectionHandle, opcode, handle, ATT_ECODE_INVALID_OFFSET);
    35bc:	0030      	movs	r0, r6
    35be:	f7ff fc03 	bl	2dc8 <_ZN8ATTClass9sendErrorEthth.constprop.3>
    35c2:	687b      	ldr	r3, [r7, #4]
    35c4:	469d      	mov	sp, r3
}
    35c6:	46bd      	mov	sp, r7
    35c8:	b00b      	add	sp, #44	; 0x2c
    35ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
  uint16_t handle = *(uint16_t*)data;
    35cc:	8813      	ldrh	r3, [r2, #0]
    35ce:	613b      	str	r3, [r7, #16]
  uint16_t offset = (opcode == ATT_OP_READ_REQ) ? 0 : *(uint16_t*)&data[sizeof(handle)];
    35d0:	2300      	movs	r3, #0
    35d2:	617b      	str	r3, [r7, #20]
    35d4:	2c0a      	cmp	r4, #10
    35d6:	d001      	beq.n	35dc <_ZN8ATTClass17readOrReadBlobReqEthhPh+0x4c>
    35d8:	8853      	ldrh	r3, [r2, #2]
    35da:	617b      	str	r3, [r7, #20]
  if ((uint16_t)(handle - 1) > GATT.attributeCount()) {
    35dc:	4d5f      	ldr	r5, [pc, #380]	; (375c <_ZN8ATTClass17readOrReadBlobReqEthhPh+0x1cc>)
    35de:	0028      	movs	r0, r5
    35e0:	f000 fd4e 	bl	4080 <_ZNK9GATTClass14attributeCountEv>
    35e4:	693b      	ldr	r3, [r7, #16]
    35e6:	1e59      	subs	r1, r3, #1
    35e8:	b28b      	uxth	r3, r1
    35ea:	4283      	cmp	r3, r0
    35ec:	d902      	bls.n	35f4 <_ZN8ATTClass17readOrReadBlobReqEthhPh+0x64>
    sendError(connectionHandle, opcode, handle, ATT_ECODE_ATTR_NOT_FOUND);
    35ee:	230a      	movs	r3, #10
      sendError(connectionHandle, opcode, handle, ATT_ECODE_INVALID_OFFSET);
    35f0:	693a      	ldr	r2, [r7, #16]
    35f2:	e7dc      	b.n	35ae <_ZN8ATTClass17readOrReadBlobReqEthhPh+0x1e>
  uint8_t response[_mtu];
    35f4:	466a      	mov	r2, sp
    35f6:	68bb      	ldr	r3, [r7, #8]
    35f8:	89db      	ldrh	r3, [r3, #14]
    35fa:	3307      	adds	r3, #7
    35fc:	08db      	lsrs	r3, r3, #3
    35fe:	00db      	lsls	r3, r3, #3
    3600:	1ad3      	subs	r3, r2, r3
    3602:	469d      	mov	sp, r3
    3604:	ab02      	add	r3, sp, #8
    3606:	60fb      	str	r3, [r7, #12]
  response[0] = (opcode == ATT_OP_READ_REQ) ? ATT_OP_READ_RESP : ATT_OP_READ_BLOB_RESP;
    3608:	230b      	movs	r3, #11
    360a:	2c0a      	cmp	r4, #10
    360c:	d000      	beq.n	3610 <_ZN8ATTClass17readOrReadBlobReqEthhPh+0x80>
    360e:	3302      	adds	r3, #2
    3610:	68fa      	ldr	r2, [r7, #12]
  BLEAttribute* attribute = GATT.attribute(handle - 1);
    3612:	0028      	movs	r0, r5
  response[0] = (opcode == ATT_OP_READ_REQ) ? ATT_OP_READ_RESP : ATT_OP_READ_BLOB_RESP;
    3614:	7013      	strb	r3, [r2, #0]
  BLEAttribute* attribute = GATT.attribute(handle - 1);
    3616:	f000 fd5a 	bl	40ce <_ZNK9GATTClass9attributeEj>
  enum BLEAttributeType attributeType = attribute->type();
    361a:	6803      	ldr	r3, [r0, #0]
  BLEAttribute* attribute = GATT.attribute(handle - 1);
    361c:	0005      	movs	r5, r0
  enum BLEAttributeType attributeType = attribute->type();
    361e:	689b      	ldr	r3, [r3, #8]
    3620:	4798      	blx	r3
  if (attributeType == BLETypeService) {
    3622:	23a0      	movs	r3, #160	; 0xa0
    3624:	019b      	lsls	r3, r3, #6
    3626:	4298      	cmp	r0, r3
    3628:	d115      	bne.n	3656 <_ZN8ATTClass17readOrReadBlobReqEthhPh+0xc6>
    if (offset) {
    362a:	697b      	ldr	r3, [r7, #20]
    362c:	2b00      	cmp	r3, #0
    362e:	d003      	beq.n	3638 <_ZN8ATTClass17readOrReadBlobReqEthhPh+0xa8>
      sendError(connectionHandle, ATT_ECODE_ATTR_NOT_LONG, handle, ATT_ECODE_INVALID_PDU);
    3630:	2304      	movs	r3, #4
    3632:	693a      	ldr	r2, [r7, #16]
    3634:	210b      	movs	r1, #11
    3636:	e7c1      	b.n	35bc <_ZN8ATTClass17readOrReadBlobReqEthhPh+0x2c>
    uint8_t uuidLen = service->uuidLength();
    3638:	0028      	movs	r0, r5
    363a:	f7fe fd8d 	bl	2158 <_ZNK12BLEAttribute10uuidLengthEv>
    363e:	0004      	movs	r4, r0
    memcpy(&response[responseLength], service->uuidData(), uuidLen);
    3640:	0028      	movs	r0, r5
    3642:	f7fe fd84 	bl	214e <_ZNK12BLEAttribute8uuidDataEv>
    3646:	0022      	movs	r2, r4
    3648:	0001      	movs	r1, r0
    364a:	68fb      	ldr	r3, [r7, #12]
    364c:	3301      	adds	r3, #1
    memcpy(&response[responseLength], descriptor->value() + offset, valueLength);
    364e:	0018      	movs	r0, r3
    3650:	f005 fdff 	bl	9252 <memcpy>
    3654:	e062      	b.n	371c <_ZN8ATTClass17readOrReadBlobReqEthhPh+0x18c>
  } else if (attributeType == BLETypeCharacteristic) {
    3656:	4b42      	ldr	r3, [pc, #264]	; (3760 <_ZN8ATTClass17readOrReadBlobReqEthhPh+0x1d0>)
    3658:	4298      	cmp	r0, r3
    365a:	d161      	bne.n	3720 <_ZN8ATTClass17readOrReadBlobReqEthhPh+0x190>
    if (characteristic->handle() == handle) {
    365c:	0028      	movs	r0, r5
    365e:	f7ff f84e 	bl	26fe <_ZNK22BLELocalCharacteristic6handleEv>
    3662:	693b      	ldr	r3, [r7, #16]
    3664:	4283      	cmp	r3, r0
    3666:	d12d      	bne.n	36c4 <_ZN8ATTClass17readOrReadBlobReqEthhPh+0x134>
      if (offset) {
    3668:	697b      	ldr	r3, [r7, #20]
    366a:	2b00      	cmp	r3, #0
    366c:	d001      	beq.n	3672 <_ZN8ATTClass17readOrReadBlobReqEthhPh+0xe2>
        sendError(connectionHandle, opcode, handle, ATT_ECODE_ATTR_NOT_LONG);
    366e:	230b      	movs	r3, #11
    3670:	e7be      	b.n	35f0 <_ZN8ATTClass17readOrReadBlobReqEthhPh+0x60>
      response[responseLength++] = characteristic->properties();
    3672:	0028      	movs	r0, r5
    3674:	f7fe ffc4 	bl	2600 <_ZNK22BLELocalCharacteristic10propertiesEv>
    3678:	68fb      	ldr	r3, [r7, #12]
    367a:	7058      	strb	r0, [r3, #1]
      uint16_t valueHandle = characteristic->valueHandle();
    367c:	0028      	movs	r0, r5
    367e:	f7ff f840 	bl	2702 <_ZNK22BLELocalCharacteristic11valueHandleEv>
      memcpy(&response[responseLength], &valueHandle, sizeof(valueHandle));
    3682:	68fb      	ldr	r3, [r7, #12]
      uint16_t valueHandle = characteristic->valueHandle();
    3684:	83b8      	strh	r0, [r7, #28]
      memcpy(&response[responseLength], &valueHandle, sizeof(valueHandle));
    3686:	1c98      	adds	r0, r3, #2
    3688:	231c      	movs	r3, #28
    368a:	2202      	movs	r2, #2
    368c:	18f9      	adds	r1, r7, r3
    368e:	f005 fde0 	bl	9252 <memcpy>
      uint8_t uuidLen = characteristic->uuidLength();
    3692:	0028      	movs	r0, r5
    3694:	f7fe fd60 	bl	2158 <_ZNK12BLEAttribute10uuidLengthEv>
    3698:	0004      	movs	r4, r0
      memcpy(&response[responseLength], characteristic->uuidData(), uuidLen);
    369a:	0028      	movs	r0, r5
    369c:	f7fe fd57 	bl	214e <_ZNK12BLEAttribute8uuidDataEv>
    36a0:	68fb      	ldr	r3, [r7, #12]
    36a2:	0001      	movs	r1, r0
    36a4:	3304      	adds	r3, #4
    36a6:	0022      	movs	r2, r4
    36a8:	0018      	movs	r0, r3
    36aa:	f005 fdd2 	bl	9252 <memcpy>
      responseLength += uuidLen;
    36ae:	3404      	adds	r4, #4
    responseLength += valueLength;
    36b0:	b2a3      	uxth	r3, r4
  HCI.sendAclPkt(connectionHandle, ATT_CID, responseLength, response);
    36b2:	68fa      	ldr	r2, [r7, #12]
    36b4:	b2db      	uxtb	r3, r3
    36b6:	9200      	str	r2, [sp, #0]
    36b8:	0031      	movs	r1, r6
    36ba:	2204      	movs	r2, #4
    36bc:	4829      	ldr	r0, [pc, #164]	; (3764 <_ZN8ATTClass17readOrReadBlobReqEthhPh+0x1d4>)
    36be:	f000 fe65 	bl	438c <_ZN8HCIClass10sendAclPktEthhPv>
    36c2:	e77e      	b.n	35c2 <_ZN8ATTClass17readOrReadBlobReqEthhPh+0x32>
      if ((characteristic->properties() & BLERead) == 0) {
    36c4:	0028      	movs	r0, r5
    36c6:	f7fe ff9b 	bl	2600 <_ZNK22BLELocalCharacteristic10propertiesEv>
    36ca:	2302      	movs	r3, #2
    36cc:	4218      	tst	r0, r3
    36ce:	d08f      	beq.n	35f0 <_ZN8ATTClass17readOrReadBlobReqEthhPh+0x60>
      uint16_t valueLength = characteristic->valueLength();
    36d0:	0028      	movs	r0, r5
    36d2:	f7fe ff9c 	bl	260e <_ZNK22BLELocalCharacteristic11valueLengthEv>
      if (offset >= valueLength) {
    36d6:	697b      	ldr	r3, [r7, #20]
    36d8:	b280      	uxth	r0, r0
    36da:	4298      	cmp	r0, r3
    36dc:	dc01      	bgt.n	36e2 <_ZN8ATTClass17readOrReadBlobReqEthhPh+0x152>
      sendError(connectionHandle, opcode, handle, ATT_ECODE_INVALID_OFFSET);
    36de:	2307      	movs	r3, #7
    36e0:	e786      	b.n	35f0 <_ZN8ATTClass17readOrReadBlobReqEthhPh+0x60>
      valueLength = min(_mtu - responseLength, valueLength - offset);
    36e2:	68bb      	ldr	r3, [r7, #8]
    36e4:	89dc      	ldrh	r4, [r3, #14]
    36e6:	697b      	ldr	r3, [r7, #20]
    36e8:	3c01      	subs	r4, #1
    36ea:	1ac0      	subs	r0, r0, r3
    36ec:	4284      	cmp	r4, r0
    36ee:	dd00      	ble.n	36f2 <_ZN8ATTClass17readOrReadBlobReqEthhPh+0x162>
    36f0:	0004      	movs	r4, r0
      characteristic->readValue(BLEDevice(connectionHandle, _peerAddress), offset, &response[responseLength], valueLength);
    36f2:	231c      	movs	r3, #28
    36f4:	68ba      	ldr	r2, [r7, #8]
    36f6:	0031      	movs	r1, r6
    36f8:	3208      	adds	r2, #8
    36fa:	18f8      	adds	r0, r7, r3
    36fc:	f7fe fe64 	bl	23c8 <_ZN9BLEDeviceC1EtPh>
    3700:	211c      	movs	r1, #28
    3702:	68fb      	ldr	r3, [r7, #12]
    3704:	b2a2      	uxth	r2, r4
    3706:	9200      	str	r2, [sp, #0]
    3708:	3301      	adds	r3, #1
    370a:	0028      	movs	r0, r5
    370c:	697a      	ldr	r2, [r7, #20]
    370e:	1879      	adds	r1, r7, r1
    3710:	f7ff f8b0 	bl	2874 <_ZN22BLELocalCharacteristic9readValueE9BLEDevicetPhi>
    3714:	231c      	movs	r3, #28
    3716:	18f8      	adds	r0, r7, r3
    3718:	f7fe fda4 	bl	2264 <_ZN9BLEDeviceD1Ev>
    responseLength += valueLength;
    371c:	3401      	adds	r4, #1
    371e:	e7c7      	b.n	36b0 <_ZN8ATTClass17readOrReadBlobReqEthhPh+0x120>
  } else if (attributeType == BLETypeDescriptor) {
    3720:	22a4      	movs	r2, #164	; 0xa4
  responseLength = 1;
    3722:	2301      	movs	r3, #1
  } else if (attributeType == BLETypeDescriptor) {
    3724:	0192      	lsls	r2, r2, #6
    3726:	4290      	cmp	r0, r2
    3728:	d1c3      	bne.n	36b2 <_ZN8ATTClass17readOrReadBlobReqEthhPh+0x122>
    uint16_t valueLength = descriptor->valueSize();
    372a:	0028      	movs	r0, r5
    372c:	f7ff f958 	bl	29e0 <_ZNK18BLELocalDescriptor9valueSizeEv>
    if (offset >= valueLength) {
    3730:	697b      	ldr	r3, [r7, #20]
    3732:	b280      	uxth	r0, r0
    3734:	4298      	cmp	r0, r3
    3736:	ddd2      	ble.n	36de <_ZN8ATTClass17readOrReadBlobReqEthhPh+0x14e>
    valueLength = min(_mtu - responseLength, valueLength - offset);
    3738:	68bb      	ldr	r3, [r7, #8]
    373a:	89dc      	ldrh	r4, [r3, #14]
    373c:	697b      	ldr	r3, [r7, #20]
    373e:	3c01      	subs	r4, #1
    3740:	1ac0      	subs	r0, r0, r3
    3742:	4284      	cmp	r4, r0
    3744:	dd00      	ble.n	3748 <_ZN8ATTClass17readOrReadBlobReqEthhPh+0x1b8>
    3746:	0004      	movs	r4, r0
    memcpy(&response[responseLength], descriptor->value() + offset, valueLength);
    3748:	0028      	movs	r0, r5
    374a:	f7ff f94b 	bl	29e4 <_ZNK18BLELocalDescriptor5valueEv>
    374e:	68fb      	ldr	r3, [r7, #12]
    3750:	6979      	ldr	r1, [r7, #20]
    3752:	3301      	adds	r3, #1
    3754:	b2a2      	uxth	r2, r4
    3756:	1841      	adds	r1, r0, r1
    3758:	e779      	b.n	364e <_ZN8ATTClass17readOrReadBlobReqEthhPh+0xbe>
    375a:	46c0      	nop			; (mov r8, r8)
    375c:	20000314 	.word	0x20000314
    3760:	00002803 	.word	0x00002803
    3764:	20000480 	.word	0x20000480

00003768 <_ZN8ATTClass13readByTypeReqEthPh>:
{
    3768:	b5f0      	push	{r4, r5, r6, r7, lr}
    376a:	b08d      	sub	sp, #52	; 0x34
    376c:	af02      	add	r7, sp, #8
    376e:	61bb      	str	r3, [r7, #24]
  }
    3770:	466b      	mov	r3, sp
{
    3772:	6178      	str	r0, [r7, #20]
    3774:	60b9      	str	r1, [r7, #8]
  }
    3776:	603b      	str	r3, [r7, #0]
  if (dlen != sizeof(ReadByTypeReq)) {
    3778:	2a06      	cmp	r2, #6
    377a:	d00d      	beq.n	3798 <_ZN8ATTClass13readByTypeReqEthPh+0x30>
    sendError(connectionHandle, ATT_OP_READ_BY_TYPE_REQ, readByTypeReq->startHandle, ATT_ECODE_INVALID_PDU);
    377c:	69ba      	ldr	r2, [r7, #24]
    377e:	69bb      	ldr	r3, [r7, #24]
    3780:	7852      	ldrb	r2, [r2, #1]
    3782:	781b      	ldrb	r3, [r3, #0]
    3784:	0212      	lsls	r2, r2, #8
    3786:	431a      	orrs	r2, r3
    3788:	2108      	movs	r1, #8
    378a:	2304      	movs	r3, #4
    378c:	68b8      	ldr	r0, [r7, #8]
    378e:	f7ff fb1b 	bl	2dc8 <_ZN8ATTClass9sendErrorEthth.constprop.3>
}
    3792:	46bd      	mov	sp, r7
    3794:	b00b      	add	sp, #44	; 0x2c
    3796:	bdf0      	pop	{r4, r5, r6, r7, pc}
  uint8_t response[_mtu];
    3798:	466a      	mov	r2, sp
    379a:	697b      	ldr	r3, [r7, #20]
  responseLength = 2;
    379c:	2402      	movs	r4, #2
  uint8_t response[_mtu];
    379e:	89db      	ldrh	r3, [r3, #14]
    37a0:	3307      	adds	r3, #7
    37a2:	08db      	lsrs	r3, r3, #3
    37a4:	00db      	lsls	r3, r3, #3
    37a6:	1ad3      	subs	r3, r2, r3
    37a8:	469d      	mov	sp, r3
    37aa:	ab02      	add	r3, sp, #8
    37ac:	61fb      	str	r3, [r7, #28]
  response[0] = ATT_OP_READ_BY_TYPE_RESP;
    37ae:	2309      	movs	r3, #9
    37b0:	69fa      	ldr	r2, [r7, #28]
    37b2:	7013      	strb	r3, [r2, #0]
  response[1] = 0x00;
    37b4:	2300      	movs	r3, #0
    37b6:	7053      	strb	r3, [r2, #1]
  for (uint16_t i = (readByTypeReq->startHandle - 1); i < GATT.attributeCount() && i <= (readByTypeReq->endHandle - 1); i++) {
    37b8:	69ba      	ldr	r2, [r7, #24]
    37ba:	69bb      	ldr	r3, [r7, #24]
    37bc:	7855      	ldrb	r5, [r2, #1]
    37be:	781b      	ldrb	r3, [r3, #0]
    37c0:	022d      	lsls	r5, r5, #8
    37c2:	431d      	orrs	r5, r3
    37c4:	3d01      	subs	r5, #1
    37c6:	b2ad      	uxth	r5, r5
    37c8:	4e82      	ldr	r6, [pc, #520]	; (39d4 <_ZN8ATTClass13readByTypeReqEthPh+0x26c>)
    37ca:	0030      	movs	r0, r6
    37cc:	f000 fc58 	bl	4080 <_ZNK9GATTClass14attributeCountEv>
    37d0:	4285      	cmp	r5, r0
    37d2:	d207      	bcs.n	37e4 <_ZN8ATTClass13readByTypeReqEthPh+0x7c>
    37d4:	69bb      	ldr	r3, [r7, #24]
    37d6:	789a      	ldrb	r2, [r3, #2]
    37d8:	78db      	ldrb	r3, [r3, #3]
    37da:	021b      	lsls	r3, r3, #8
    37dc:	4313      	orrs	r3, r2
    37de:	42ab      	cmp	r3, r5
    37e0:	dd00      	ble.n	37e4 <_ZN8ATTClass13readByTypeReqEthPh+0x7c>
    37e2:	e08c      	b.n	38fe <_ZN8ATTClass13readByTypeReqEthPh+0x196>
  if (responseLength == 2) {
    37e4:	2c02      	cmp	r4, #2
    37e6:	d000      	beq.n	37ea <_ZN8ATTClass13readByTypeReqEthPh+0x82>
    37e8:	e080      	b.n	38ec <_ZN8ATTClass13readByTypeReqEthPh+0x184>
    sendError(connectionHandle, ATT_OP_READ_BY_TYPE_REQ, readByTypeReq->startHandle, ATT_ECODE_ATTR_NOT_FOUND);
    37ea:	69ba      	ldr	r2, [r7, #24]
    37ec:	69bb      	ldr	r3, [r7, #24]
    37ee:	7852      	ldrb	r2, [r2, #1]
    37f0:	781b      	ldrb	r3, [r3, #0]
    37f2:	0212      	lsls	r2, r2, #8
    37f4:	431a      	orrs	r2, r3
    37f6:	2108      	movs	r1, #8
    37f8:	230a      	movs	r3, #10
    37fa:	68b8      	ldr	r0, [r7, #8]
    37fc:	f7ff fae4 	bl	2dc8 <_ZN8ATTClass9sendErrorEthth.constprop.3>
    3800:	683b      	ldr	r3, [r7, #0]
    3802:	469d      	mov	sp, r3
    3804:	e7c5      	b.n	3792 <_ZN8ATTClass13readByTypeReqEthPh+0x2a>
      } else if (attribute->type() == 0x2902) {
    3806:	6833      	ldr	r3, [r6, #0]
    3808:	0030      	movs	r0, r6
    380a:	689b      	ldr	r3, [r3, #8]
    380c:	4798      	blx	r3
    380e:	4b72      	ldr	r3, [pc, #456]	; (39d8 <_ZN8ATTClass13readByTypeReqEthPh+0x270>)
    3810:	4298      	cmp	r0, r3
    3812:	d000      	beq.n	3816 <_ZN8ATTClass13readByTypeReqEthPh+0xae>
    3814:	e0db      	b.n	39ce <_ZN8ATTClass13readByTypeReqEthPh+0x266>
        memcpy(&response[responseLength], &handle, sizeof(handle));
    3816:	69fb      	ldr	r3, [r7, #28]
    3818:	2202      	movs	r2, #2
    381a:	1918      	adds	r0, r3, r4
    381c:	2324      	movs	r3, #36	; 0x24
    381e:	18f9      	adds	r1, r7, r3
    3820:	f005 fd17 	bl	9252 <memcpy>
        int valueSize = min((uint16_t)(_mtu - responseLength), (uint16_t)descriptor->valueSize());
    3824:	697b      	ldr	r3, [r7, #20]
    3826:	0030      	movs	r0, r6
    3828:	89dd      	ldrh	r5, [r3, #14]
    382a:	f7ff f8d9 	bl	29e0 <_ZNK18BLELocalDescriptor9valueSizeEv>
        responseLength += sizeof(handle);
    382e:	3402      	adds	r4, #2
    3830:	b2a4      	uxth	r4, r4
        int valueSize = min((uint16_t)(_mtu - responseLength), (uint16_t)descriptor->valueSize());
    3832:	1b2d      	subs	r5, r5, r4
    3834:	b2ad      	uxth	r5, r5
    3836:	b280      	uxth	r0, r0
    3838:	42a8      	cmp	r0, r5
    383a:	dd14      	ble.n	3866 <_ZN8ATTClass13readByTypeReqEthPh+0xfe>
    383c:	697b      	ldr	r3, [r7, #20]
    383e:	89dd      	ldrh	r5, [r3, #14]
    3840:	1b2d      	subs	r5, r5, r4
    3842:	b2ad      	uxth	r5, r5
        memcpy(&response[responseLength], descriptor->value(), valueSize);
    3844:	69fb      	ldr	r3, [r7, #28]
    3846:	0030      	movs	r0, r6
    3848:	191b      	adds	r3, r3, r4
    384a:	617b      	str	r3, [r7, #20]
    384c:	f7ff f8ca 	bl	29e4 <_ZNK18BLELocalDescriptor5valueEv>
      memcpy(&response[responseLength], characteristic->value(), valueLength);
    3850:	0001      	movs	r1, r0
    3852:	002a      	movs	r2, r5
    3854:	6978      	ldr	r0, [r7, #20]
    3856:	f005 fcfc 	bl	9252 <memcpy>
      response[1] = 2 + valueLength;
    385a:	69fb      	ldr	r3, [r7, #28]
      responseLength += valueLength;
    385c:	1964      	adds	r4, r4, r5
      response[1] = 2 + valueLength;
    385e:	3502      	adds	r5, #2
      responseLength += valueLength;
    3860:	b2a4      	uxth	r4, r4
      response[1] = 2 + valueLength;
    3862:	705d      	strb	r5, [r3, #1]
      break; // all done
    3864:	e7be      	b.n	37e4 <_ZN8ATTClass13readByTypeReqEthPh+0x7c>
        int valueSize = min((uint16_t)(_mtu - responseLength), (uint16_t)descriptor->valueSize());
    3866:	0030      	movs	r0, r6
    3868:	f7ff f8ba 	bl	29e0 <_ZNK18BLELocalDescriptor9valueSizeEv>
    386c:	b285      	uxth	r5, r0
    386e:	e7e9      	b.n	3844 <_ZN8ATTClass13readByTypeReqEthPh+0xdc>
    } else if (attribute->type() == BLETypeCharacteristic && attribute->uuidLength() == 2 && memcmp(&readByTypeReq->uuid, attribute->uuidData(), 2) == 0) {
    3870:	6893      	ldr	r3, [r2, #8]
    3872:	0030      	movs	r0, r6
    3874:	4798      	blx	r3
    3876:	4b59      	ldr	r3, [pc, #356]	; (39dc <_ZN8ATTClass13readByTypeReqEthPh+0x274>)
    3878:	4298      	cmp	r0, r3
    387a:	d000      	beq.n	387e <_ZN8ATTClass13readByTypeReqEthPh+0x116>
    387c:	e0a7      	b.n	39ce <_ZN8ATTClass13readByTypeReqEthPh+0x266>
    387e:	0030      	movs	r0, r6
    3880:	f7fe fc6a 	bl	2158 <_ZNK12BLEAttribute10uuidLengthEv>
    3884:	6138      	str	r0, [r7, #16]
    3886:	2802      	cmp	r0, #2
    3888:	d000      	beq.n	388c <_ZN8ATTClass13readByTypeReqEthPh+0x124>
    388a:	e0a0      	b.n	39ce <_ZN8ATTClass13readByTypeReqEthPh+0x266>
    388c:	0030      	movs	r0, r6
    388e:	f7fe fc5e 	bl	214e <_ZNK12BLEAttribute8uuidDataEv>
    3892:	69bb      	ldr	r3, [r7, #24]
    3894:	0001      	movs	r1, r0
    3896:	3304      	adds	r3, #4
    3898:	693a      	ldr	r2, [r7, #16]
    389a:	0018      	movs	r0, r3
    389c:	f005 fcca 	bl	9234 <memcmp>
    38a0:	2800      	cmp	r0, #0
    38a2:	d000      	beq.n	38a6 <_ZN8ATTClass13readByTypeReqEthPh+0x13e>
    38a4:	e093      	b.n	39ce <_ZN8ATTClass13readByTypeReqEthPh+0x266>
      memcpy(&response[responseLength], &handle, sizeof(handle));
    38a6:	69fb      	ldr	r3, [r7, #28]
    38a8:	693a      	ldr	r2, [r7, #16]
    38aa:	1918      	adds	r0, r3, r4
    38ac:	2324      	movs	r3, #36	; 0x24
    38ae:	18f9      	adds	r1, r7, r3
    38b0:	f005 fccf 	bl	9252 <memcpy>
      int valueLength = min((uint16_t)(_mtu - responseLength), (uint16_t)characteristic->valueLength());
    38b4:	697b      	ldr	r3, [r7, #20]
    38b6:	0030      	movs	r0, r6
    38b8:	89dd      	ldrh	r5, [r3, #14]
    38ba:	f7fe fea8 	bl	260e <_ZNK22BLELocalCharacteristic11valueLengthEv>
      responseLength += sizeof(handle);
    38be:	3402      	adds	r4, #2
    38c0:	b2a4      	uxth	r4, r4
      int valueLength = min((uint16_t)(_mtu - responseLength), (uint16_t)characteristic->valueLength());
    38c2:	1b2d      	subs	r5, r5, r4
    38c4:	b2ad      	uxth	r5, r5
    38c6:	b280      	uxth	r0, r0
    38c8:	42a8      	cmp	r0, r5
    38ca:	dc04      	bgt.n	38d6 <_ZN8ATTClass13readByTypeReqEthPh+0x16e>
    38cc:	0030      	movs	r0, r6
    38ce:	f7fe fe9e 	bl	260e <_ZNK22BLELocalCharacteristic11valueLengthEv>
    38d2:	b285      	uxth	r5, r0
    38d4:	e003      	b.n	38de <_ZN8ATTClass13readByTypeReqEthPh+0x176>
    38d6:	697b      	ldr	r3, [r7, #20]
    38d8:	89dd      	ldrh	r5, [r3, #14]
    38da:	1b2d      	subs	r5, r5, r4
    38dc:	b2ad      	uxth	r5, r5
      memcpy(&response[responseLength], characteristic->value(), valueLength);
    38de:	69fb      	ldr	r3, [r7, #28]
    38e0:	0030      	movs	r0, r6
    38e2:	191b      	adds	r3, r3, r4
    38e4:	617b      	str	r3, [r7, #20]
    38e6:	f7fe fe90 	bl	260a <_ZNK22BLELocalCharacteristic5valueEv>
    38ea:	e7b1      	b.n	3850 <_ZN8ATTClass13readByTypeReqEthPh+0xe8>
    HCI.sendAclPkt(connectionHandle, ATT_CID, responseLength, response);
    38ec:	69fa      	ldr	r2, [r7, #28]
    38ee:	b2e3      	uxtb	r3, r4
    38f0:	9200      	str	r2, [sp, #0]
    38f2:	68b9      	ldr	r1, [r7, #8]
    38f4:	2204      	movs	r2, #4
    38f6:	483a      	ldr	r0, [pc, #232]	; (39e0 <_ZN8ATTClass13readByTypeReqEthPh+0x278>)
    38f8:	f000 fd48 	bl	438c <_ZN8HCIClass10sendAclPktEthhPv>
    38fc:	e780      	b.n	3800 <_ZN8ATTClass13readByTypeReqEthPh+0x98>
    BLEAttribute* attribute = GATT.attribute(i);
    38fe:	0029      	movs	r1, r5
    3900:	0030      	movs	r0, r6
    3902:	f000 fbe4 	bl	40ce <_ZNK9GATTClass9attributeEj>
    uint16_t handle = (i + 1);
    3906:	1c6b      	adds	r3, r5, #1
    3908:	b29b      	uxth	r3, r3
    390a:	60fb      	str	r3, [r7, #12]
    390c:	89bb      	ldrh	r3, [r7, #12]
    BLEAttribute* attribute = GATT.attribute(i);
    390e:	0006      	movs	r6, r0
    uint16_t handle = (i + 1);
    3910:	84bb      	strh	r3, [r7, #36]	; 0x24
    if (attribute->type() == readByTypeReq->uuid) {
    3912:	6803      	ldr	r3, [r0, #0]
    3914:	689b      	ldr	r3, [r3, #8]
    3916:	4798      	blx	r3
    3918:	69bb      	ldr	r3, [r7, #24]
    391a:	791a      	ldrb	r2, [r3, #4]
    391c:	795b      	ldrb	r3, [r3, #5]
    391e:	021b      	lsls	r3, r3, #8
    3920:	4313      	orrs	r3, r2
    3922:	6832      	ldr	r2, [r6, #0]
    3924:	4298      	cmp	r0, r3
    3926:	d1a3      	bne.n	3870 <_ZN8ATTClass13readByTypeReqEthPh+0x108>
      if (attribute->type() == BLETypeCharacteristic) {
    3928:	6893      	ldr	r3, [r2, #8]
    392a:	0030      	movs	r0, r6
    392c:	4798      	blx	r3
    392e:	4b2b      	ldr	r3, [pc, #172]	; (39dc <_ZN8ATTClass13readByTypeReqEthPh+0x274>)
    3930:	4298      	cmp	r0, r3
    3932:	d000      	beq.n	3936 <_ZN8ATTClass13readByTypeReqEthPh+0x1ce>
    3934:	e767      	b.n	3806 <_ZN8ATTClass13readByTypeReqEthPh+0x9e>
        if (characteristic->valueHandle() == handle) {
    3936:	0030      	movs	r0, r6
    3938:	f7fe fee3 	bl	2702 <_ZNK22BLELocalCharacteristic11valueHandleEv>
    393c:	68fb      	ldr	r3, [r7, #12]
    393e:	4283      	cmp	r3, r0
    3940:	d045      	beq.n	39ce <_ZN8ATTClass13readByTypeReqEthPh+0x266>
        int uuidLen = attribute->uuidLength();
    3942:	0030      	movs	r0, r6
    3944:	f7fe fc08 	bl	2158 <_ZNK12BLEAttribute10uuidLengthEv>
        int typeSize = (uuidLen == 2) ? 7 : 21;
    3948:	2307      	movs	r3, #7
        int uuidLen = attribute->uuidLength();
    394a:	6078      	str	r0, [r7, #4]
        int typeSize = (uuidLen == 2) ? 7 : 21;
    394c:	613b      	str	r3, [r7, #16]
    394e:	2802      	cmp	r0, #2
    3950:	d001      	beq.n	3956 <_ZN8ATTClass13readByTypeReqEthPh+0x1ee>
    3952:	2315      	movs	r3, #21
    3954:	613b      	str	r3, [r7, #16]
        if (response[1] == 0) {
    3956:	69fb      	ldr	r3, [r7, #28]
    3958:	785b      	ldrb	r3, [r3, #1]
    395a:	2b00      	cmp	r3, #0
    395c:	d102      	bne.n	3964 <_ZN8ATTClass13readByTypeReqEthPh+0x1fc>
          response[1] = typeSize;
    395e:	69fb      	ldr	r3, [r7, #28]
    3960:	7c3a      	ldrb	r2, [r7, #16]
    3962:	705a      	strb	r2, [r3, #1]
        if (response[1] != typeSize) {
    3964:	69fb      	ldr	r3, [r7, #28]
    3966:	693a      	ldr	r2, [r7, #16]
    3968:	785b      	ldrb	r3, [r3, #1]
    396a:	429a      	cmp	r2, r3
    396c:	d000      	beq.n	3970 <_ZN8ATTClass13readByTypeReqEthPh+0x208>
    396e:	e739      	b.n	37e4 <_ZN8ATTClass13readByTypeReqEthPh+0x7c>
        memcpy(&response[responseLength], &handle, sizeof(handle));
    3970:	69fb      	ldr	r3, [r7, #28]
    3972:	2202      	movs	r2, #2
    3974:	1918      	adds	r0, r3, r4
    3976:	2324      	movs	r3, #36	; 0x24
    3978:	18f9      	adds	r1, r7, r3
    397a:	f005 fc6a 	bl	9252 <memcpy>
        response[responseLength++] = characteristic->properties();
    397e:	0030      	movs	r0, r6
    3980:	f7fe fe3e 	bl	2600 <_ZNK22BLELocalCharacteristic10propertiesEv>
    3984:	69fa      	ldr	r2, [r7, #28]
        responseLength += sizeof(handle);
    3986:	1ca3      	adds	r3, r4, #2
        response[responseLength++] = characteristic->properties();
    3988:	b29b      	uxth	r3, r3
    398a:	54d0      	strb	r0, [r2, r3]
        memcpy(&response[responseLength], &valueHandle, sizeof(valueHandle));
    398c:	2326      	movs	r3, #38	; 0x26
        response[responseLength++] = characteristic->properties();
    398e:	1ce0      	adds	r0, r4, #3
        memcpy(&response[responseLength], &valueHandle, sizeof(valueHandle));
    3990:	b280      	uxth	r0, r0
    3992:	18f9      	adds	r1, r7, r3
        uint16_t valueHandle = (handle + 1);
    3994:	3502      	adds	r5, #2
        memcpy(&response[responseLength], &valueHandle, sizeof(valueHandle));
    3996:	1810      	adds	r0, r2, r0
    3998:	2202      	movs	r2, #2
        uint16_t valueHandle = (handle + 1);
    399a:	84fd      	strh	r5, [r7, #38]	; 0x26
        responseLength += sizeof(valueHandle);
    399c:	3405      	adds	r4, #5
        memcpy(&response[responseLength], &valueHandle, sizeof(valueHandle));
    399e:	f005 fc58 	bl	9252 <memcpy>
        memcpy(&response[responseLength], characteristic->uuidData(), uuidLen);
    39a2:	69fb      	ldr	r3, [r7, #28]
        responseLength += sizeof(valueHandle);
    39a4:	b2a4      	uxth	r4, r4
        memcpy(&response[responseLength], characteristic->uuidData(), uuidLen);
    39a6:	0030      	movs	r0, r6
    39a8:	191d      	adds	r5, r3, r4
    39aa:	f7fe fbd0 	bl	214e <_ZNK12BLEAttribute8uuidDataEv>
    39ae:	687a      	ldr	r2, [r7, #4]
    39b0:	0001      	movs	r1, r0
    39b2:	0028      	movs	r0, r5
    39b4:	f005 fc4d 	bl	9252 <memcpy>
        responseLength += uuidLen;
    39b8:	687b      	ldr	r3, [r7, #4]
        if ((responseLength + typeSize) > _mtu) {
    39ba:	697a      	ldr	r2, [r7, #20]
        responseLength += uuidLen;
    39bc:	18e4      	adds	r4, r4, r3
        if ((responseLength + typeSize) > _mtu) {
    39be:	693b      	ldr	r3, [r7, #16]
        responseLength += uuidLen;
    39c0:	b2a4      	uxth	r4, r4
        if ((responseLength + typeSize) > _mtu) {
    39c2:	89d2      	ldrh	r2, [r2, #14]
    39c4:	18e3      	adds	r3, r4, r3
    39c6:	4293      	cmp	r3, r2
    39c8:	dd00      	ble.n	39cc <_ZN8ATTClass13readByTypeReqEthPh+0x264>
    39ca:	e70b      	b.n	37e4 <_ZN8ATTClass13readByTypeReqEthPh+0x7c>
    39cc:	68fd      	ldr	r5, [r7, #12]
  for (uint16_t i = (readByTypeReq->startHandle - 1); i < GATT.attributeCount() && i <= (readByTypeReq->endHandle - 1); i++) {
    39ce:	3501      	adds	r5, #1
    39d0:	b2ad      	uxth	r5, r5
    39d2:	e6f9      	b.n	37c8 <_ZN8ATTClass13readByTypeReqEthPh+0x60>
    39d4:	20000314 	.word	0x20000314
    39d8:	00002902 	.word	0x00002902
    39dc:	00002803 	.word	0x00002803
    39e0:	20000480 	.word	0x20000480

000039e4 <_ZN8ATTClass13writeReqOrCmdEthhPh>:
{
    39e4:	b5f0      	push	{r4, r5, r6, r7, lr}
    39e6:	b08b      	sub	sp, #44	; 0x2c
    39e8:	af02      	add	r7, sp, #8
    39ea:	60b8      	str	r0, [r7, #8]
    39ec:	000d      	movs	r5, r1
    39ee:	0014      	movs	r4, r2
    39f0:	607b      	str	r3, [r7, #4]
  if (dlen < sizeof(uint16_t)) {
    39f2:	2b01      	cmp	r3, #1
    39f4:	d808      	bhi.n	3a08 <_ZN8ATTClass13writeReqOrCmdEthhPh+0x24>
    if (withResponse) {
    39f6:	2a12      	cmp	r2, #18
    39f8:	d115      	bne.n	3a26 <_ZN8ATTClass13writeReqOrCmdEthhPh+0x42>
      sendError(connectionHandle, ATT_OP_WRITE_REQ, 0x0000, ATT_ECODE_INVALID_PDU);
    39fa:	2304      	movs	r3, #4
    39fc:	2200      	movs	r2, #0
      sendError(connectionHandle, ATT_OP_WRITE_REQ, handle, ATT_ECODE_WRITE_NOT_PERM);
    39fe:	0021      	movs	r1, r4
    3a00:	0028      	movs	r0, r5
    3a02:	f7ff f9e1 	bl	2dc8 <_ZN8ATTClass9sendErrorEthth.constprop.3>
    3a06:	e00e      	b.n	3a26 <_ZN8ATTClass13writeReqOrCmdEthhPh+0x42>
  uint16_t handle = *(uint16_t*)data;
    3a08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
  if ((uint16_t)(handle - 1) > GATT.attributeCount()) {
    3a0a:	484b      	ldr	r0, [pc, #300]	; (3b38 <_ZN8ATTClass13writeReqOrCmdEthhPh+0x154>)
  uint16_t handle = *(uint16_t*)data;
    3a0c:	881b      	ldrh	r3, [r3, #0]
    3a0e:	60fb      	str	r3, [r7, #12]
  if ((uint16_t)(handle - 1) > GATT.attributeCount()) {
    3a10:	f000 fb36 	bl	4080 <_ZNK9GATTClass14attributeCountEv>
    3a14:	68fb      	ldr	r3, [r7, #12]
    3a16:	1e59      	subs	r1, r3, #1
    3a18:	b28b      	uxth	r3, r1
    3a1a:	4283      	cmp	r3, r0
    3a1c:	d906      	bls.n	3a2c <_ZN8ATTClass13writeReqOrCmdEthhPh+0x48>
      sendError(connectionHandle, ATT_OP_WRITE_REQ, handle, ATT_ECODE_ATTR_NOT_FOUND);
    3a1e:	230a      	movs	r3, #10
    if (withResponse) {
    3a20:	2c12      	cmp	r4, #18
    3a22:	d100      	bne.n	3a26 <_ZN8ATTClass13writeReqOrCmdEthhPh+0x42>
    3a24:	e085      	b.n	3b32 <_ZN8ATTClass13writeReqOrCmdEthhPh+0x14e>
}
    3a26:	46bd      	mov	sp, r7
    3a28:	b009      	add	sp, #36	; 0x24
    3a2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  BLEAttribute* attribute = GATT.attribute(handle - 1);
    3a2c:	4842      	ldr	r0, [pc, #264]	; (3b38 <_ZN8ATTClass13writeReqOrCmdEthhPh+0x154>)
    3a2e:	f000 fb4e 	bl	40ce <_ZNK9GATTClass9attributeEj>
  if (attribute->type() == BLETypeCharacteristic) {
    3a32:	6803      	ldr	r3, [r0, #0]
  BLEAttribute* attribute = GATT.attribute(handle - 1);
    3a34:	0006      	movs	r6, r0
  if (attribute->type() == BLETypeCharacteristic) {
    3a36:	689b      	ldr	r3, [r3, #8]
    3a38:	4798      	blx	r3
    3a3a:	4b40      	ldr	r3, [pc, #256]	; (3b3c <_ZN8ATTClass13writeReqOrCmdEthhPh+0x158>)
    3a3c:	4298      	cmp	r0, r3
    3a3e:	d141      	bne.n	3ac4 <_ZN8ATTClass13writeReqOrCmdEthhPh+0xe0>
    if (handle != characteristic->valueHandle() || 
    3a40:	0030      	movs	r0, r6
    3a42:	f7fe fe5e 	bl	2702 <_ZNK22BLELocalCharacteristic11valueHandleEv>
      withResponse ? ((characteristic->properties() & BLEWrite) == 0) : 
    3a46:	68fb      	ldr	r3, [r7, #12]
    3a48:	4283      	cmp	r3, r0
    3a4a:	d101      	bne.n	3a50 <_ZN8ATTClass13writeReqOrCmdEthhPh+0x6c>
    if (handle != characteristic->valueHandle() || 
    3a4c:	2c12      	cmp	r4, #18
    3a4e:	d133      	bne.n	3ab8 <_ZN8ATTClass13writeReqOrCmdEthhPh+0xd4>
      withResponse ? ((characteristic->properties() & BLEWrite) == 0) : 
    3a50:	0030      	movs	r0, r6
    3a52:	f7fe fdd5 	bl	2600 <_ZNK22BLELocalCharacteristic10propertiesEv>
    if (handle != characteristic->valueHandle() || 
    3a56:	0703      	lsls	r3, r0, #28
    3a58:	d567      	bpl.n	3b2a <_ZN8ATTClass13writeReqOrCmdEthhPh+0x146>
    if (connectionHandle == _connectionHandle) {
    3a5a:	68bb      	ldr	r3, [r7, #8]
    3a5c:	88db      	ldrh	r3, [r3, #6]
    3a5e:	42ab      	cmp	r3, r5
    3a60:	d114      	bne.n	3a8c <_ZN8ATTClass13writeReqOrCmdEthhPh+0xa8>
      characteristic->writeValue(BLEDevice(connectionHandle, _peerAddress), value, valueLength);
    3a62:	2314      	movs	r3, #20
    3a64:	68ba      	ldr	r2, [r7, #8]
    3a66:	0029      	movs	r1, r5
    3a68:	3208      	adds	r2, #8
    3a6a:	18f8      	adds	r0, r7, r3
    3a6c:	f7fe fcac 	bl	23c8 <_ZN9BLEDeviceC1EtPh>
    3a70:	2114      	movs	r1, #20
  uint8_t valueLength = dlen - sizeof(handle);
    3a72:	687b      	ldr	r3, [r7, #4]
  uint8_t* value = &data[sizeof(handle)];
    3a74:	6bba      	ldr	r2, [r7, #56]	; 0x38
  uint8_t valueLength = dlen - sizeof(handle);
    3a76:	3b02      	subs	r3, #2
      characteristic->writeValue(BLEDevice(connectionHandle, _peerAddress), value, valueLength);
    3a78:	b2db      	uxtb	r3, r3
  uint8_t* value = &data[sizeof(handle)];
    3a7a:	3202      	adds	r2, #2
      characteristic->writeValue(BLEDevice(connectionHandle, _peerAddress), value, valueLength);
    3a7c:	1879      	adds	r1, r7, r1
    3a7e:	0030      	movs	r0, r6
    3a80:	f7fe ff24 	bl	28cc <_ZN22BLELocalCharacteristic10writeValueE9BLEDevicePKhi>
      characteristic->writeCccdValue(BLEDevice(connectionHandle, _peerAddress), *((uint16_t*)value));
    3a84:	2314      	movs	r3, #20
    3a86:	18f8      	adds	r0, r7, r3
    3a88:	f7fe fbec 	bl	2264 <_ZN9BLEDeviceD1Ev>
  if (withResponse) {
    3a8c:	2c12      	cmp	r4, #18
    3a8e:	d1ca      	bne.n	3a26 <_ZN8ATTClass13writeReqOrCmdEthhPh+0x42>
    HCI.sendAclPkt(connectionHandle, ATT_CID, responseLength, response);
    3a90:	466c      	mov	r4, sp
    uint8_t response[_mtu];
    3a92:	68bb      	ldr	r3, [r7, #8]
    response[0] = ATT_OP_WRITE_RESP;
    3a94:	2213      	movs	r2, #19
    uint8_t response[_mtu];
    3a96:	89db      	ldrh	r3, [r3, #14]
    HCI.sendAclPkt(connectionHandle, ATT_CID, responseLength, response);
    3a98:	0029      	movs	r1, r5
    uint8_t response[_mtu];
    3a9a:	3307      	adds	r3, #7
    3a9c:	08db      	lsrs	r3, r3, #3
    3a9e:	00db      	lsls	r3, r3, #3
    3aa0:	1ae3      	subs	r3, r4, r3
    3aa2:	469d      	mov	sp, r3
    3aa4:	ab02      	add	r3, sp, #8
    response[0] = ATT_OP_WRITE_RESP;
    3aa6:	701a      	strb	r2, [r3, #0]
    HCI.sendAclPkt(connectionHandle, ATT_CID, responseLength, response);
    3aa8:	4825      	ldr	r0, [pc, #148]	; (3b40 <_ZN8ATTClass13writeReqOrCmdEthhPh+0x15c>)
    3aaa:	9300      	str	r3, [sp, #0]
    3aac:	3a0f      	subs	r2, #15
    3aae:	2301      	movs	r3, #1
    3ab0:	f000 fc6c 	bl	438c <_ZN8HCIClass10sendAclPktEthhPv>
    3ab4:	46a5      	mov	sp, r4
    3ab6:	e7b6      	b.n	3a26 <_ZN8ATTClass13writeReqOrCmdEthhPh+0x42>
                     ((characteristic->properties() & BLEWriteWithoutResponse) == 0)) {
    3ab8:	0030      	movs	r0, r6
    3aba:	f7fe fda1 	bl	2600 <_ZNK22BLELocalCharacteristic10propertiesEv>
    if (handle != characteristic->valueHandle() || 
    3abe:	0743      	lsls	r3, r0, #29
    3ac0:	d4cb      	bmi.n	3a5a <_ZN8ATTClass13writeReqOrCmdEthhPh+0x76>
    3ac2:	e7b0      	b.n	3a26 <_ZN8ATTClass13writeReqOrCmdEthhPh+0x42>
  } else if (attribute->type() == BLETypeDescriptor) {
    3ac4:	6833      	ldr	r3, [r6, #0]
    3ac6:	0030      	movs	r0, r6
    3ac8:	689b      	ldr	r3, [r3, #8]
    3aca:	4798      	blx	r3
    3acc:	23a4      	movs	r3, #164	; 0xa4
    3ace:	019b      	lsls	r3, r3, #6
    3ad0:	4298      	cmp	r0, r3
    3ad2:	d12a      	bne.n	3b2a <_ZN8ATTClass13writeReqOrCmdEthhPh+0x146>
    if (descriptor->uuidLength() != 2 || *((uint16_t*)(descriptor->uuidData())) != 0x2902) {
    3ad4:	0030      	movs	r0, r6
    3ad6:	f7fe fb3f 	bl	2158 <_ZNK12BLEAttribute10uuidLengthEv>
    3ada:	2802      	cmp	r0, #2
    3adc:	d125      	bne.n	3b2a <_ZN8ATTClass13writeReqOrCmdEthhPh+0x146>
    3ade:	0030      	movs	r0, r6
    3ae0:	f7fe fb35 	bl	214e <_ZNK12BLEAttribute8uuidDataEv>
    3ae4:	4b17      	ldr	r3, [pc, #92]	; (3b44 <_ZN8ATTClass13writeReqOrCmdEthhPh+0x160>)
    3ae6:	8802      	ldrh	r2, [r0, #0]
    3ae8:	429a      	cmp	r2, r3
    3aea:	d11e      	bne.n	3b2a <_ZN8ATTClass13writeReqOrCmdEthhPh+0x146>
    attribute = GATT.attribute(handle - 2);
    3aec:	68fb      	ldr	r3, [r7, #12]
    3aee:	4812      	ldr	r0, [pc, #72]	; (3b38 <_ZN8ATTClass13writeReqOrCmdEthhPh+0x154>)
    3af0:	1e99      	subs	r1, r3, #2
    3af2:	f000 faec 	bl	40ce <_ZNK9GATTClass9attributeEj>
    if (attribute->type() != BLETypeCharacteristic) {
    3af6:	6803      	ldr	r3, [r0, #0]
    attribute = GATT.attribute(handle - 2);
    3af8:	0006      	movs	r6, r0
    if (attribute->type() != BLETypeCharacteristic) {
    3afa:	689b      	ldr	r3, [r3, #8]
    3afc:	4798      	blx	r3
    3afe:	4b0f      	ldr	r3, [pc, #60]	; (3b3c <_ZN8ATTClass13writeReqOrCmdEthhPh+0x158>)
    3b00:	4298      	cmp	r0, r3
    3b02:	d112      	bne.n	3b2a <_ZN8ATTClass13writeReqOrCmdEthhPh+0x146>
    if (connectionHandle == _connectionHandle) {
    3b04:	68bb      	ldr	r3, [r7, #8]
    3b06:	88db      	ldrh	r3, [r3, #6]
    3b08:	42ab      	cmp	r3, r5
    3b0a:	d1bf      	bne.n	3a8c <_ZN8ATTClass13writeReqOrCmdEthhPh+0xa8>
      characteristic->writeCccdValue(BLEDevice(connectionHandle, _peerAddress), *((uint16_t*)value));
    3b0c:	2314      	movs	r3, #20
    3b0e:	68ba      	ldr	r2, [r7, #8]
    3b10:	0029      	movs	r1, r5
    3b12:	18f8      	adds	r0, r7, r3
    3b14:	3208      	adds	r2, #8
    3b16:	f7fe fc57 	bl	23c8 <_ZN9BLEDeviceC1EtPh>
    3b1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    3b1c:	0030      	movs	r0, r6
    3b1e:	885a      	ldrh	r2, [r3, #2]
    3b20:	2314      	movs	r3, #20
    3b22:	18f9      	adds	r1, r7, r3
    3b24:	f7fe fefe 	bl	2924 <_ZN22BLELocalCharacteristic14writeCccdValueE9BLEDevicet>
    3b28:	e7ac      	b.n	3a84 <_ZN8ATTClass13writeReqOrCmdEthhPh+0xa0>
    if (withResponse) {
    3b2a:	2c12      	cmp	r4, #18
    3b2c:	d000      	beq.n	3b30 <_ZN8ATTClass13writeReqOrCmdEthhPh+0x14c>
    3b2e:	e77a      	b.n	3a26 <_ZN8ATTClass13writeReqOrCmdEthhPh+0x42>
      sendError(connectionHandle, ATT_OP_WRITE_REQ, handle, ATT_ECODE_WRITE_NOT_PERM);
    3b30:	2303      	movs	r3, #3
    3b32:	68fa      	ldr	r2, [r7, #12]
    3b34:	e763      	b.n	39fe <_ZN8ATTClass13writeReqOrCmdEthhPh+0x1a>
    3b36:	46c0      	nop			; (mov r8, r8)
    3b38:	20000314 	.word	0x20000314
    3b3c:	00002803 	.word	0x00002803
    3b40:	20000480 	.word	0x20000480
    3b44:	00002902 	.word	0x00002902

00003b48 <_ZN8ATTClass12prepWriteReqEthPh>:
{
    3b48:	b5f0      	push	{r4, r5, r6, r7, lr}
    3b4a:	b08b      	sub	sp, #44	; 0x2c
    3b4c:	af02      	add	r7, sp, #8
    3b4e:	617b      	str	r3, [r7, #20]
  HCI.sendAclPkt(connectionHandle, ATT_CID, responseLength, response);
    3b50:	466b      	mov	r3, sp
{
    3b52:	0005      	movs	r5, r0
    3b54:	61f9      	str	r1, [r7, #28]
    3b56:	613a      	str	r2, [r7, #16]
  HCI.sendAclPkt(connectionHandle, ATT_CID, responseLength, response);
    3b58:	60bb      	str	r3, [r7, #8]
  if (dlen < sizeof(PrepWriteReq)) {
    3b5a:	2a03      	cmp	r2, #3
    3b5c:	d806      	bhi.n	3b6c <_ZN8ATTClass12prepWriteReqEthPh+0x24>
    sendError(connectionHandle, ATT_OP_PREP_WRITE_REQ, 0x0000, ATT_ECODE_INVALID_PDU);
    3b5e:	2304      	movs	r3, #4
    3b60:	2200      	movs	r2, #0
    sendError(connectionHandle, ATT_OP_PREP_WRITE_REQ, handle, ATT_ECODE_INVALID_OFFSET);
    3b62:	2116      	movs	r1, #22
    3b64:	69f8      	ldr	r0, [r7, #28]
    3b66:	f7ff f92f 	bl	2dc8 <_ZN8ATTClass9sendErrorEthth.constprop.3>
    return;
    3b6a:	e075      	b.n	3c58 <_ZN8ATTClass12prepWriteReqEthPh+0x110>
  uint16_t handle = prepWriteReq->handle;
    3b6c:	697a      	ldr	r2, [r7, #20]
    3b6e:	697b      	ldr	r3, [r7, #20]
    3b70:	7854      	ldrb	r4, [r2, #1]
    3b72:	781b      	ldrb	r3, [r3, #0]
  uint16_t offset = prepWriteReq->offset;
    3b74:	78d0      	ldrb	r0, [r2, #3]
  uint16_t handle = prepWriteReq->handle;
    3b76:	0224      	lsls	r4, r4, #8
    3b78:	431c      	orrs	r4, r3
  uint16_t offset = prepWriteReq->offset;
    3b7a:	7893      	ldrb	r3, [r2, #2]
  if ((uint16_t)(handle - 1) > GATT.attributeCount()) {
    3b7c:	4e3c      	ldr	r6, [pc, #240]	; (3c70 <_ZN8ATTClass12prepWriteReqEthPh+0x128>)
  uint16_t offset = prepWriteReq->offset;
    3b7e:	0200      	lsls	r0, r0, #8
    3b80:	4318      	orrs	r0, r3
    3b82:	60f8      	str	r0, [r7, #12]
  if ((uint16_t)(handle - 1) > GATT.attributeCount()) {
    3b84:	0030      	movs	r0, r6
    3b86:	f000 fa7b 	bl	4080 <_ZNK9GATTClass14attributeCountEv>
    3b8a:	1e61      	subs	r1, r4, #1
    3b8c:	b28b      	uxth	r3, r1
    3b8e:	4283      	cmp	r3, r0
    3b90:	d902      	bls.n	3b98 <_ZN8ATTClass12prepWriteReqEthPh+0x50>
    sendError(connectionHandle, ATT_OP_PREP_WRITE_REQ, handle, ATT_ECODE_ATTR_NOT_FOUND);
    3b92:	230a      	movs	r3, #10
    sendError(connectionHandle, ATT_OP_PREP_WRITE_REQ, handle, ATT_ECODE_INVALID_OFFSET);
    3b94:	0022      	movs	r2, r4
    3b96:	e7e4      	b.n	3b62 <_ZN8ATTClass12prepWriteReqEthPh+0x1a>
  BLEAttribute* attribute = GATT.attribute(handle - 1);
    3b98:	0030      	movs	r0, r6
    3b9a:	f000 fa98 	bl	40ce <_ZNK9GATTClass9attributeEj>
  if (attribute->type() != BLETypeCharacteristic) {
    3b9e:	6803      	ldr	r3, [r0, #0]
  BLEAttribute* attribute = GATT.attribute(handle - 1);
    3ba0:	61b8      	str	r0, [r7, #24]
  if (attribute->type() != BLETypeCharacteristic) {
    3ba2:	689b      	ldr	r3, [r3, #8]
    3ba4:	4798      	blx	r3
    3ba6:	4b33      	ldr	r3, [pc, #204]	; (3c74 <_ZN8ATTClass12prepWriteReqEthPh+0x12c>)
    3ba8:	4298      	cmp	r0, r3
    3baa:	d001      	beq.n	3bb0 <_ZN8ATTClass12prepWriteReqEthPh+0x68>
    sendError(connectionHandle, ATT_OP_PREP_WRITE_REQ, handle, ATT_ECODE_ATTR_NOT_LONG);
    3bac:	230b      	movs	r3, #11
    3bae:	e7f1      	b.n	3b94 <_ZN8ATTClass12prepWriteReqEthPh+0x4c>
  if (handle != characteristic->valueHandle()) {
    3bb0:	69b8      	ldr	r0, [r7, #24]
    3bb2:	f7fe fda6 	bl	2702 <_ZNK22BLELocalCharacteristic11valueHandleEv>
    3bb6:	4284      	cmp	r4, r0
    3bb8:	d1f8      	bne.n	3bac <_ZN8ATTClass12prepWriteReqEthPh+0x64>
  if ((characteristic->properties() & BLEWrite) == 0) {
    3bba:	69b8      	ldr	r0, [r7, #24]
    3bbc:	f7fe fd20 	bl	2600 <_ZNK22BLELocalCharacteristic10propertiesEv>
    3bc0:	0703      	lsls	r3, r0, #28
    3bc2:	d401      	bmi.n	3bc8 <_ZN8ATTClass12prepWriteReqEthPh+0x80>
    sendError(connectionHandle, ATT_OP_PREP_WRITE_REQ, handle, ATT_ECODE_WRITE_NOT_PERM);
    3bc4:	2303      	movs	r3, #3
    3bc6:	e7e5      	b.n	3b94 <_ZN8ATTClass12prepWriteReqEthPh+0x4c>
  if (_longWriteHandle == 0) {
    3bc8:	8a6e      	ldrh	r6, [r5, #18]
    3bca:	2e00      	cmp	r6, #0
    3bcc:	d149      	bne.n	3c62 <_ZN8ATTClass12prepWriteReqEthPh+0x11a>
    int valueSize = characteristic->valueSize();
    3bce:	69b8      	ldr	r0, [r7, #24]
    3bd0:	f7fe fd19 	bl	2606 <_ZNK22BLELocalCharacteristic9valueSizeEv>
    _longWriteValue = (uint8_t*)realloc(_longWriteValue, valueSize);
    3bd4:	0001      	movs	r1, r0
    int valueSize = characteristic->valueSize();
    3bd6:	6078      	str	r0, [r7, #4]
    _longWriteValue = (uint8_t*)realloc(_longWriteValue, valueSize);
    3bd8:	6968      	ldr	r0, [r5, #20]
    3bda:	f006 f875 	bl	9cc8 <realloc>
    _longWriteValueLength = 0;
    3bde:	832e      	strh	r6, [r5, #24]
    _longWriteValue = (uint8_t*)realloc(_longWriteValue, valueSize);
    3be0:	6168      	str	r0, [r5, #20]
    _longWriteHandle = handle;
    3be2:	826c      	strh	r4, [r5, #18]
    memset(_longWriteValue, 0x00, valueSize);
    3be4:	687a      	ldr	r2, [r7, #4]
    3be6:	0031      	movs	r1, r6
    3be8:	f005 fb4e 	bl	9288 <memset>
  if ((offset != _longWriteValueLength) || ((offset + valueLength) > (uint16_t)characteristic->valueSize())) {
    3bec:	8b2b      	ldrh	r3, [r5, #24]
    3bee:	68fa      	ldr	r2, [r7, #12]
    3bf0:	4293      	cmp	r3, r2
    3bf2:	d13b      	bne.n	3c6c <_ZN8ATTClass12prepWriteReqEthPh+0x124>
  uint8_t valueLength = dlen - sizeof(PrepWriteReq);
    3bf4:	693b      	ldr	r3, [r7, #16]
  if ((offset != _longWriteValueLength) || ((offset + valueLength) > (uint16_t)characteristic->valueSize())) {
    3bf6:	69b8      	ldr	r0, [r7, #24]
  uint8_t valueLength = dlen - sizeof(PrepWriteReq);
    3bf8:	1f1e      	subs	r6, r3, #4
    3bfa:	b2f6      	uxtb	r6, r6
  if ((offset != _longWriteValueLength) || ((offset + valueLength) > (uint16_t)characteristic->valueSize())) {
    3bfc:	1993      	adds	r3, r2, r6
    3bfe:	607b      	str	r3, [r7, #4]
    3c00:	f7fe fd01 	bl	2606 <_ZNK22BLELocalCharacteristic9valueSizeEv>
    3c04:	687b      	ldr	r3, [r7, #4]
    3c06:	b280      	uxth	r0, r0
    3c08:	4298      	cmp	r0, r3
    3c0a:	db2f      	blt.n	3c6c <_ZN8ATTClass12prepWriteReqEthPh+0x124>
  memcpy(_longWriteValue + offset, value, valueLength);
    3c0c:	696a      	ldr	r2, [r5, #20]
    3c0e:	68fb      	ldr	r3, [r7, #12]
    3c10:	4694      	mov	ip, r2
    3c12:	4463      	add	r3, ip
    3c14:	0018      	movs	r0, r3
  uint8_t* value = &data[sizeof(PrepWriteReq)];
    3c16:	697b      	ldr	r3, [r7, #20]
  memcpy(_longWriteValue + offset, value, valueLength);
    3c18:	0032      	movs	r2, r6
  uint8_t* value = &data[sizeof(PrepWriteReq)];
    3c1a:	1d19      	adds	r1, r3, #4
  memcpy(_longWriteValue + offset, value, valueLength);
    3c1c:	f005 fb19 	bl	9252 <memcpy>
  uint8_t response[_mtu];
    3c20:	466a      	mov	r2, sp
  _longWriteValueLength += valueLength;
    3c22:	8b2b      	ldrh	r3, [r5, #24]
  memcpy(&response[1], data, dlen);
    3c24:	2009      	movs	r0, #9
  _longWriteValueLength += valueLength;
    3c26:	199e      	adds	r6, r3, r6
  uint8_t response[_mtu];
    3c28:	89eb      	ldrh	r3, [r5, #14]
  memcpy(&response[1], data, dlen);
    3c2a:	6979      	ldr	r1, [r7, #20]
  uint8_t response[_mtu];
    3c2c:	3307      	adds	r3, #7
    3c2e:	08db      	lsrs	r3, r3, #3
    3c30:	00db      	lsls	r3, r3, #3
    3c32:	1ad3      	subs	r3, r2, r3
    3c34:	469d      	mov	sp, r3
  response[0] = ATT_OP_PREP_WRITE_RESP;
    3c36:	2317      	movs	r3, #23
  uint8_t response[_mtu];
    3c38:	ac02      	add	r4, sp, #8
  response[0] = ATT_OP_PREP_WRITE_RESP;
    3c3a:	7023      	strb	r3, [r4, #0]
  memcpy(&response[1], data, dlen);
    3c3c:	693a      	ldr	r2, [r7, #16]
  _longWriteValueLength += valueLength;
    3c3e:	832e      	strh	r6, [r5, #24]
  memcpy(&response[1], data, dlen);
    3c40:	4468      	add	r0, sp
    3c42:	f005 fb06 	bl	9252 <memcpy>
  responseLength = dlen + 1;
    3c46:	693b      	ldr	r3, [r7, #16]
  HCI.sendAclPkt(connectionHandle, ATT_CID, responseLength, response);
    3c48:	9400      	str	r4, [sp, #0]
  responseLength = dlen + 1;
    3c4a:	3301      	adds	r3, #1
  HCI.sendAclPkt(connectionHandle, ATT_CID, responseLength, response);
    3c4c:	b2db      	uxtb	r3, r3
    3c4e:	2204      	movs	r2, #4
    3c50:	69f9      	ldr	r1, [r7, #28]
    3c52:	4809      	ldr	r0, [pc, #36]	; (3c78 <_ZN8ATTClass12prepWriteReqEthPh+0x130>)
    3c54:	f000 fb9a 	bl	438c <_ZN8HCIClass10sendAclPktEthhPv>
    3c58:	68bb      	ldr	r3, [r7, #8]
    3c5a:	469d      	mov	sp, r3
}
    3c5c:	46bd      	mov	sp, r7
    3c5e:	b009      	add	sp, #36	; 0x24
    3c60:	bdf0      	pop	{r4, r5, r6, r7, pc}
    sendError(connectionHandle, ATT_OP_PREP_WRITE_REQ, handle, ATT_ECODE_UNLIKELY);
    3c62:	230e      	movs	r3, #14
  } else if (_longWriteHandle != handle) {
    3c64:	42b4      	cmp	r4, r6
    3c66:	d000      	beq.n	3c6a <_ZN8ATTClass12prepWriteReqEthPh+0x122>
    3c68:	e794      	b.n	3b94 <_ZN8ATTClass12prepWriteReqEthPh+0x4c>
    3c6a:	e7bf      	b.n	3bec <_ZN8ATTClass12prepWriteReqEthPh+0xa4>
    sendError(connectionHandle, ATT_OP_PREP_WRITE_REQ, handle, ATT_ECODE_INVALID_OFFSET);
    3c6c:	2307      	movs	r3, #7
    3c6e:	e791      	b.n	3b94 <_ZN8ATTClass12prepWriteReqEthPh+0x4c>
    3c70:	20000314 	.word	0x20000314
    3c74:	00002803 	.word	0x00002803
    3c78:	20000480 	.word	0x20000480

00003c7c <_ZN8ATTClass12execWriteReqEthPh>:
{
    3c7c:	b5f0      	push	{r4, r5, r6, r7, lr}
    3c7e:	b089      	sub	sp, #36	; 0x24
    3c80:	000d      	movs	r5, r1
  HCI.sendAclPkt(connectionHandle, ATT_CID, responseLength, response);
    3c82:	4669      	mov	r1, sp
{
    3c84:	af02      	add	r7, sp, #8
    3c86:	0004      	movs	r4, r0
  HCI.sendAclPkt(connectionHandle, ATT_CID, responseLength, response);
    3c88:	6079      	str	r1, [r7, #4]
  if (dlen != sizeof(uint8_t)) {
    3c8a:	2a01      	cmp	r2, #1
    3c8c:	d008      	beq.n	3ca0 <_ZN8ATTClass12execWriteReqEthPh+0x24>
    sendError(connectionHandle, ATT_OP_EXEC_WRITE_REQ, 0x0000, ATT_ECODE_INVALID_PDU);
    3c8e:	2304      	movs	r3, #4
    3c90:	2200      	movs	r2, #0
    3c92:	2118      	movs	r1, #24
    3c94:	0028      	movs	r0, r5
    3c96:	f7ff f897 	bl	2dc8 <_ZN8ATTClass9sendErrorEthth.constprop.3>
}
    3c9a:	46bd      	mov	sp, r7
    3c9c:	b007      	add	sp, #28
    3c9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (_longWriteHandle && (flag & 0x01)) {
    3ca0:	8a41      	ldrh	r1, [r0, #18]
    3ca2:	2900      	cmp	r1, #0
    3ca4:	d01c      	beq.n	3ce0 <_ZN8ATTClass12execWriteReqEthPh+0x64>
    3ca6:	781b      	ldrb	r3, [r3, #0]
    3ca8:	4213      	tst	r3, r2
    3caa:	d019      	beq.n	3ce0 <_ZN8ATTClass12execWriteReqEthPh+0x64>
    BLELocalCharacteristic* characteristic = (BLELocalCharacteristic*)GATT.attribute(_longWriteHandle - 1);
    3cac:	3901      	subs	r1, #1
    3cae:	4818      	ldr	r0, [pc, #96]	; (3d10 <_ZN8ATTClass12execWriteReqEthPh+0x94>)
    3cb0:	f000 fa0d 	bl	40ce <_ZNK9GATTClass9attributeEj>
    if (connectionHandle == _connectionHandle) {
    3cb4:	88e3      	ldrh	r3, [r4, #6]
    BLELocalCharacteristic* characteristic = (BLELocalCharacteristic*)GATT.attribute(_longWriteHandle - 1);
    3cb6:	0006      	movs	r6, r0
    if (connectionHandle == _connectionHandle) {
    3cb8:	42ab      	cmp	r3, r5
    3cba:	d111      	bne.n	3ce0 <_ZN8ATTClass12execWriteReqEthPh+0x64>
      characteristic->writeValue(BLEDevice(connectionHandle, _peerAddress), _longWriteValue, _longWriteValueLength);
    3cbc:	230c      	movs	r3, #12
    3cbe:	0022      	movs	r2, r4
    3cc0:	0029      	movs	r1, r5
    3cc2:	3208      	adds	r2, #8
    3cc4:	18f8      	adds	r0, r7, r3
    3cc6:	f7fe fb7f 	bl	23c8 <_ZN9BLEDeviceC1EtPh>
    3cca:	210c      	movs	r1, #12
    3ccc:	8b23      	ldrh	r3, [r4, #24]
    3cce:	0030      	movs	r0, r6
    3cd0:	6962      	ldr	r2, [r4, #20]
    3cd2:	1879      	adds	r1, r7, r1
    3cd4:	f7fe fdfa 	bl	28cc <_ZN22BLELocalCharacteristic10writeValueE9BLEDevicePKhi>
    3cd8:	230c      	movs	r3, #12
    3cda:	18f8      	adds	r0, r7, r3
    3cdc:	f7fe fac2 	bl	2264 <_ZN9BLEDeviceD1Ev>
  _longWriteHandle = 0x0000;
    3ce0:	2300      	movs	r3, #0
  uint8_t response[_mtu];
    3ce2:	466a      	mov	r2, sp
  _longWriteHandle = 0x0000;
    3ce4:	8263      	strh	r3, [r4, #18]
  _longWriteValueLength = 0;
    3ce6:	8323      	strh	r3, [r4, #24]
  uint8_t response[_mtu];
    3ce8:	89e3      	ldrh	r3, [r4, #14]
  HCI.sendAclPkt(connectionHandle, ATT_CID, responseLength, response);
    3cea:	0029      	movs	r1, r5
  uint8_t response[_mtu];
    3cec:	3307      	adds	r3, #7
    3cee:	08db      	lsrs	r3, r3, #3
    3cf0:	00db      	lsls	r3, r3, #3
    3cf2:	1ad3      	subs	r3, r2, r3
    3cf4:	469d      	mov	sp, r3
  response[0] = ATT_OP_EXEC_WRITE_RESP;
    3cf6:	2219      	movs	r2, #25
  uint8_t response[_mtu];
    3cf8:	ab02      	add	r3, sp, #8
  response[0] = ATT_OP_EXEC_WRITE_RESP;
    3cfa:	701a      	strb	r2, [r3, #0]
  HCI.sendAclPkt(connectionHandle, ATT_CID, responseLength, response);
    3cfc:	4805      	ldr	r0, [pc, #20]	; (3d14 <_ZN8ATTClass12execWriteReqEthPh+0x98>)
    3cfe:	9300      	str	r3, [sp, #0]
    3d00:	3a15      	subs	r2, #21
    3d02:	2301      	movs	r3, #1
    3d04:	f000 fb42 	bl	438c <_ZN8HCIClass10sendAclPktEthhPv>
    3d08:	687b      	ldr	r3, [r7, #4]
    3d0a:	469d      	mov	sp, r3
    3d0c:	e7c5      	b.n	3c9a <_ZN8ATTClass12execWriteReqEthPh+0x1e>
    3d0e:	46c0      	nop			; (mov r8, r8)
    3d10:	20000314 	.word	0x20000314
    3d14:	20000480 	.word	0x20000480

00003d18 <_ZN8ATTClass10handleDataEthPh>:
{
    3d18:	b513      	push	{r0, r1, r4, lr}
    3d1a:	000c      	movs	r4, r1
  uint8_t opcode = data[0];
    3d1c:	7819      	ldrb	r1, [r3, #0]
  dlen--;
    3d1e:	3a01      	subs	r2, #1
    3d20:	b2d2      	uxtb	r2, r2
  data++;
    3d22:	3301      	adds	r3, #1
  switch (opcode) {
    3d24:	290c      	cmp	r1, #12
    3d26:	d011      	beq.n	3d4c <_ZN8ATTClass10handleDataEthPh+0x34>
    3d28:	d817      	bhi.n	3d5a <_ZN8ATTClass10handleDataEthPh+0x42>
    3d2a:	2906      	cmp	r1, #6
    3d2c:	d035      	beq.n	3d9a <_ZN8ATTClass10handleDataEthPh+0x82>
    3d2e:	d809      	bhi.n	3d44 <_ZN8ATTClass10handleDataEthPh+0x2c>
    3d30:	2902      	cmp	r1, #2
    3d32:	d02a      	beq.n	3d8a <_ZN8ATTClass10handleDataEthPh+0x72>
    3d34:	2904      	cmp	r1, #4
    3d36:	d02c      	beq.n	3d92 <_ZN8ATTClass10handleDataEthPh+0x7a>
      sendError(connectionHandle, opcode, 0x00, ATT_ECODE_REQ_NOT_SUPP);
    3d38:	2306      	movs	r3, #6
    3d3a:	2200      	movs	r2, #0
    3d3c:	0020      	movs	r0, r4
    3d3e:	f7ff f843 	bl	2dc8 <_ZN8ATTClass9sendErrorEthth.constprop.3>
}
    3d42:	e025      	b.n	3d90 <_ZN8ATTClass10handleDataEthPh+0x78>
  switch (opcode) {
    3d44:	2908      	cmp	r1, #8
    3d46:	d02c      	beq.n	3da2 <_ZN8ATTClass10handleDataEthPh+0x8a>
    3d48:	290a      	cmp	r1, #10
    3d4a:	d1f5      	bne.n	3d38 <_ZN8ATTClass10handleDataEthPh+0x20>
      readOrReadBlobReq(connectionHandle, opcode, dlen, data);
    3d4c:	9300      	str	r3, [sp, #0]
    3d4e:	0013      	movs	r3, r2
    3d50:	000a      	movs	r2, r1
    3d52:	0021      	movs	r1, r4
    3d54:	f7ff fc1c 	bl	3590 <_ZN8ATTClass17readOrReadBlobReqEthhPh>
      break;
    3d58:	e01a      	b.n	3d90 <_ZN8ATTClass10handleDataEthPh+0x78>
  switch (opcode) {
    3d5a:	2916      	cmp	r1, #22
    3d5c:	d029      	beq.n	3db2 <_ZN8ATTClass10handleDataEthPh+0x9a>
    3d5e:	d80a      	bhi.n	3d76 <_ZN8ATTClass10handleDataEthPh+0x5e>
    3d60:	2910      	cmp	r1, #16
    3d62:	d022      	beq.n	3daa <_ZN8ATTClass10handleDataEthPh+0x92>
    3d64:	2912      	cmp	r1, #18
    3d66:	d1e7      	bne.n	3d38 <_ZN8ATTClass10handleDataEthPh+0x20>
      writeReqOrCmd(connectionHandle, opcode, dlen, data);
    3d68:	9300      	str	r3, [sp, #0]
    3d6a:	0013      	movs	r3, r2
    3d6c:	000a      	movs	r2, r1
    3d6e:	0021      	movs	r1, r4
    3d70:	f7ff fe38 	bl	39e4 <_ZN8ATTClass13writeReqOrCmdEthhPh>
      break;
    3d74:	e00c      	b.n	3d90 <_ZN8ATTClass10handleDataEthPh+0x78>
  switch (opcode) {
    3d76:	291e      	cmp	r1, #30
    3d78:	d01f      	beq.n	3dba <_ZN8ATTClass10handleDataEthPh+0xa2>
    3d7a:	2952      	cmp	r1, #82	; 0x52
    3d7c:	d0f4      	beq.n	3d68 <_ZN8ATTClass10handleDataEthPh+0x50>
    3d7e:	2918      	cmp	r1, #24
    3d80:	d1da      	bne.n	3d38 <_ZN8ATTClass10handleDataEthPh+0x20>
      execWriteReq(connectionHandle, dlen, data);
    3d82:	0021      	movs	r1, r4
    3d84:	f7ff ff7a 	bl	3c7c <_ZN8ATTClass12execWriteReqEthPh>
      break;
    3d88:	e002      	b.n	3d90 <_ZN8ATTClass10handleDataEthPh+0x78>
      mtuReq(connectionHandle, dlen, data);
    3d8a:	0021      	movs	r1, r4
    3d8c:	f7ff f9ac 	bl	30e8 <_ZN8ATTClass6mtuReqEthPh>
}
    3d90:	bd13      	pop	{r0, r1, r4, pc}
      findInfoReq(connectionHandle, dlen, data);
    3d92:	0021      	movs	r1, r4
    3d94:	f7ff f9d2 	bl	313c <_ZN8ATTClass11findInfoReqEthPh>
      break;
    3d98:	e7fa      	b.n	3d90 <_ZN8ATTClass10handleDataEthPh+0x78>
      findByTypeReq(connectionHandle, dlen, data);
    3d9a:	0021      	movs	r1, r4
    3d9c:	f7ff fa98 	bl	32d0 <_ZN8ATTClass13findByTypeReqEthPh>
      break;
    3da0:	e7f6      	b.n	3d90 <_ZN8ATTClass10handleDataEthPh+0x78>
      readByTypeReq(connectionHandle, dlen, data);
    3da2:	0021      	movs	r1, r4
    3da4:	f7ff fce0 	bl	3768 <_ZN8ATTClass13readByTypeReqEthPh>
      break;
    3da8:	e7f2      	b.n	3d90 <_ZN8ATTClass10handleDataEthPh+0x78>
      readByGroupReq(connectionHandle, dlen, data);
    3daa:	0021      	movs	r1, r4
    3dac:	f7ff fb30 	bl	3410 <_ZN8ATTClass14readByGroupReqEthPh>
      break;
    3db0:	e7ee      	b.n	3d90 <_ZN8ATTClass10handleDataEthPh+0x78>
      prepWriteReq(connectionHandle, dlen, data);
    3db2:	0021      	movs	r1, r4
    3db4:	f7ff fec8 	bl	3b48 <_ZN8ATTClass12prepWriteReqEthPh>
      break;
    3db8:	e7ea      	b.n	3d90 <_ZN8ATTClass10handleDataEthPh+0x78>
  _cnf = true;
    3dba:	2301      	movs	r3, #1
    3dbc:	7403      	strb	r3, [r0, #16]
    3dbe:	e7e7      	b.n	3d90 <_ZN8ATTClass10handleDataEthPh+0x78>

00003dc0 <_ZN8ATTClass15setEventHandlerE14BLEDeviceEventPFv9BLEDeviceE>:

void ATTClass::setEventHandler(BLEDeviceEvent event, BLEDeviceEventHandler eventHandler)
{
  if (event < (sizeof(_eventHandlers) / (sizeof(_eventHandlers[0])))) {
    3dc0:	2901      	cmp	r1, #1
    3dc2:	d803      	bhi.n	3dcc <_ZN8ATTClass15setEventHandlerE14BLEDeviceEventPFv9BLEDeviceE+0xc>
    _eventHandlers[event] = eventHandler;
    3dc4:	3106      	adds	r1, #6
    3dc6:	0089      	lsls	r1, r1, #2
    3dc8:	1841      	adds	r1, r0, r1
    3dca:	604a      	str	r2, [r1, #4]
  }
}
    3dcc:	4770      	bx	lr
	...

00003dd0 <_GLOBAL__sub_I__ZN8ATTClassC2Ev>:

ATTClass ATT;
    3dd0:	b510      	push	{r4, lr}
    3dd2:	4c05      	ldr	r4, [pc, #20]	; (3de8 <_GLOBAL__sub_I__ZN8ATTClassC2Ev+0x18>)
    3dd4:	0020      	movs	r0, r4
    3dd6:	f7ff f817 	bl	2e08 <_ZN8ATTClassC1Ev>
    3dda:	4a04      	ldr	r2, [pc, #16]	; (3dec <_GLOBAL__sub_I__ZN8ATTClassC2Ev+0x1c>)
    3ddc:	4904      	ldr	r1, [pc, #16]	; (3df0 <_GLOBAL__sub_I__ZN8ATTClassC2Ev+0x20>)
    3dde:	0020      	movs	r0, r4
    3de0:	f003 fa82 	bl	72e8 <__aeabi_atexit>
    3de4:	bd10      	pop	{r4, pc}
    3de6:	46c0      	nop			; (mov r8, r8)
    3de8:	200002c8 	.word	0x200002c8
    3dec:	20000000 	.word	0x20000000
    3df0:	00002d99 	.word	0x00002d99

00003df4 <_ZN8GAPClassD1Ev>:
{
}

GAPClass::~GAPClass()
{
}
    3df4:	4770      	bx	lr

00003df6 <_ZN8GAPClassD0Ev>:
GAPClass::~GAPClass()
    3df6:	b510      	push	{r4, lr}
    3df8:	0004      	movs	r4, r0
}
    3dfa:	f001 fa89 	bl	5310 <_ZdlPv>
    3dfe:	0020      	movs	r0, r4
    3e00:	bd10      	pop	{r4, pc}
	...

00003e04 <_ZN8GAPClassC1Ev>:
  _serviceDataLength(0)
    3e04:	4b07      	ldr	r3, [pc, #28]	; (3e24 <_ZN8GAPClassC1Ev+0x20>)
    3e06:	22a0      	movs	r2, #160	; 0xa0
    3e08:	3308      	adds	r3, #8
    3e0a:	6003      	str	r3, [r0, #0]
    3e0c:	2300      	movs	r3, #0
    3e0e:	8302      	strh	r2, [r0, #24]
    3e10:	3a9f      	subs	r2, #159	; 0x9f
    3e12:	7103      	strb	r3, [r0, #4]
    3e14:	6083      	str	r3, [r0, #8]
    3e16:	60c3      	str	r3, [r0, #12]
    3e18:	6103      	str	r3, [r0, #16]
    3e1a:	6143      	str	r3, [r0, #20]
    3e1c:	7682      	strb	r2, [r0, #26]
    3e1e:	6203      	str	r3, [r0, #32]
    3e20:	6243      	str	r3, [r0, #36]	; 0x24
}
    3e22:	4770      	bx	lr
    3e24:	0000b6bc 	.word	0x0000b6bc

00003e28 <_ZN8GAPClass24setAdvertisedServiceUuidEPKc>:

void GAPClass::setAdvertisedServiceUuid(const char* advertisedServiceUuid)
{
  _advertisedServiceUuid = advertisedServiceUuid;
    3e28:	6081      	str	r1, [r0, #8]
}
    3e2a:	4770      	bx	lr

00003e2c <_ZN8GAPClass12setLocalNameEPKc>:
  _manufacturerDataLength = manufacturerDataLength;
}

void GAPClass::setLocalName(const char *localName)
{
  _localName = localName;
    3e2c:	6141      	str	r1, [r0, #20]
}
    3e2e:	4770      	bx	lr

00003e30 <_ZN8GAPClass11advertisingEv>:

bool GAPClass::advertising()
{
  return _advertising;
    3e30:	7900      	ldrb	r0, [r0, #4]
}
    3e32:	4770      	bx	lr

00003e34 <_ZN8GAPClass9advertiseEv>:

int GAPClass::advertise()
{
    3e34:	b5f0      	push	{r4, r5, r6, r7, lr}
    3e36:	b09b      	sub	sp, #108	; 0x6c
    3e38:	0004      	movs	r4, r0
  uint8_t directBdaddr[6] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
    3e3a:	ad08      	add	r5, sp, #32
    3e3c:	2206      	movs	r2, #6
    3e3e:	2100      	movs	r1, #0
    3e40:	0028      	movs	r0, r5
    3e42:	f005 fa21 	bl	9288 <memset>
    3e46:	2200      	movs	r2, #0

  uint8_t type = (_connectable) ? 0x00 : (_localName ? 0x02 : 0x03);
    3e48:	7ea1      	ldrb	r1, [r4, #26]
    3e4a:	0013      	movs	r3, r2
    3e4c:	4291      	cmp	r1, r2
    3e4e:	d103      	bne.n	3e58 <_ZN8GAPClass9advertiseEv+0x24>
    3e50:	6963      	ldr	r3, [r4, #20]
    3e52:	4259      	negs	r1, r3
    3e54:	414b      	adcs	r3, r1
    3e56:	3302      	adds	r3, #2

  _advertising = false;

  if (HCI.leSetAdvertisingParameters(_advertisingInterval, _advertisingInterval, type, 0x00, 0x00, directBdaddr, 0x07, 0) != 0) {
    3e58:	2007      	movs	r0, #7
    3e5a:	8b21      	ldrh	r1, [r4, #24]
  _advertising = false;
    3e5c:	7122      	strb	r2, [r4, #4]
  if (HCI.leSetAdvertisingParameters(_advertisingInterval, _advertisingInterval, type, 0x00, 0x00, directBdaddr, 0x07, 0) != 0) {
    3e5e:	9204      	str	r2, [sp, #16]
    3e60:	9003      	str	r0, [sp, #12]
    3e62:	9201      	str	r2, [sp, #4]
    3e64:	9200      	str	r2, [sp, #0]
    3e66:	9502      	str	r5, [sp, #8]
    3e68:	000a      	movs	r2, r1
    3e6a:	4849      	ldr	r0, [pc, #292]	; (3f90 <_ZN8GAPClass9advertiseEv+0x15c>)
    3e6c:	f000 fc78 	bl	4760 <_ZN8HCIClass26leSetAdvertisingParametersEtthhhPhhh>
    3e70:	2800      	cmp	r0, #0
    3e72:	d002      	beq.n	3e7a <_ZN8GAPClass9advertiseEv+0x46>
    return 0;
    3e74:	2000      	movs	r0, #0
  }

  _advertising = false;

  return 1;
}
    3e76:	b01b      	add	sp, #108	; 0x6c
    3e78:	bdf0      	pop	{r4, r5, r6, r7, pc}
  advertisingData[0] = 0x02;
    3e7a:	2302      	movs	r3, #2
    3e7c:	ae0a      	add	r6, sp, #40	; 0x28
    3e7e:	7033      	strb	r3, [r6, #0]
  advertisingData[2] = 0x06;
    3e80:	2706      	movs	r7, #6
  advertisingData[1] = 0x01;
    3e82:	2301      	movs	r3, #1
  if (_advertisedServiceUuid) {
    3e84:	68a1      	ldr	r1, [r4, #8]
  advertisingData[1] = 0x01;
    3e86:	7073      	strb	r3, [r6, #1]
  advertisingData[2] = 0x06;
    3e88:	70b7      	strb	r7, [r6, #2]
  if (_advertisedServiceUuid) {
    3e8a:	2900      	cmp	r1, #0
    3e8c:	d06f      	beq.n	3f6e <_ZN8GAPClass9advertiseEv+0x13a>
    BLEUuid uuid(_advertisedServiceUuid);
    3e8e:	a812      	add	r0, sp, #72	; 0x48
    3e90:	f7fe fb72 	bl	2578 <_ZN7BLEUuidC1EPKc>
    int uuidLen = uuid.length();
    3e94:	a812      	add	r0, sp, #72	; 0x48
    3e96:	f7fe fbad 	bl	25f4 <_ZNK7BLEUuid6lengthEv>
    advertisingData[3] = 1 + uuidLen;
    3e9a:	1c43      	adds	r3, r0, #1
    int uuidLen = uuid.length();
    3e9c:	0005      	movs	r5, r0
    advertisingData[3] = 1 + uuidLen;
    3e9e:	70f3      	strb	r3, [r6, #3]
    advertisingData[4] = (uuidLen > 2) ? 0x06 : 0x02;
    3ea0:	2802      	cmp	r0, #2
    3ea2:	dc00      	bgt.n	3ea6 <_ZN8GAPClass9advertiseEv+0x72>
    3ea4:	3f04      	subs	r7, #4
    memcpy(&advertisingData[5], uuid.data(), uuidLen);
    3ea6:	a812      	add	r0, sp, #72	; 0x48
    advertisingData[4] = (uuidLen > 2) ? 0x06 : 0x02;
    3ea8:	7137      	strb	r7, [r6, #4]
    memcpy(&advertisingData[5], uuid.data(), uuidLen);
    3eaa:	f7fe fba1 	bl	25f0 <_ZNK7BLEUuid4dataEv>
    3eae:	002a      	movs	r2, r5
    3eb0:	0001      	movs	r1, r0
    memcpy(&advertisingData[5], _manufacturerData, _manufacturerDataLength);
    3eb2:	2025      	movs	r0, #37	; 0x25
    3eb4:	ab02      	add	r3, sp, #8
    3eb6:	18c0      	adds	r0, r0, r3
    3eb8:	f005 f9cb 	bl	9252 <memcpy>
    advertisingDataLen += (2 + _manufacturerDataLength);
    3ebc:	3505      	adds	r5, #5
    3ebe:	b2ed      	uxtb	r5, r5
  if (_serviceData && _serviceDataLength > 0 && advertisingDataLen >= (_serviceDataLength + 4)) {
    3ec0:	6a23      	ldr	r3, [r4, #32]
    3ec2:	9306      	str	r3, [sp, #24]
    3ec4:	2b00      	cmp	r3, #0
    3ec6:	d01f      	beq.n	3f08 <_ZN8GAPClass9advertiseEv+0xd4>
    3ec8:	6a67      	ldr	r7, [r4, #36]	; 0x24
    3eca:	2f00      	cmp	r7, #0
    3ecc:	dd1c      	ble.n	3f08 <_ZN8GAPClass9advertiseEv+0xd4>
    3ece:	1cfb      	adds	r3, r7, #3
    3ed0:	42ab      	cmp	r3, r5
    3ed2:	da19      	bge.n	3f08 <_ZN8GAPClass9advertiseEv+0xd4>
    advertisingData[advertisingDataLen++] = 0x16;
    3ed4:	2216      	movs	r2, #22
    memcpy(&advertisingData[advertisingDataLen], &_serviceDataUuid, sizeof(_serviceDataUuid));
    3ed6:	0021      	movs	r1, r4
    advertisingData[advertisingDataLen++] = _serviceDataLength + 3;
    3ed8:	b2fb      	uxtb	r3, r7
    3eda:	9307      	str	r3, [sp, #28]
    3edc:	3303      	adds	r3, #3
    3ede:	5573      	strb	r3, [r6, r5]
    advertisingData[advertisingDataLen++] = 0x16;
    3ee0:	1ca8      	adds	r0, r5, #2
    advertisingData[advertisingDataLen++] = _serviceDataLength + 3;
    3ee2:	1c6b      	adds	r3, r5, #1
    advertisingData[advertisingDataLen++] = 0x16;
    3ee4:	b2db      	uxtb	r3, r3
    memcpy(&advertisingData[advertisingDataLen], &_serviceDataUuid, sizeof(_serviceDataUuid));
    3ee6:	b2c0      	uxtb	r0, r0
    advertisingDataLen += sizeof(_serviceDataUuid);
    3ee8:	3504      	adds	r5, #4
    advertisingData[advertisingDataLen++] = 0x16;
    3eea:	54f2      	strb	r2, [r6, r3]
    memcpy(&advertisingData[advertisingDataLen], &_serviceDataUuid, sizeof(_serviceDataUuid));
    3eec:	311c      	adds	r1, #28
    3eee:	3a14      	subs	r2, #20
    advertisingDataLen += sizeof(_serviceDataUuid);
    3ef0:	b2ed      	uxtb	r5, r5
    memcpy(&advertisingData[advertisingDataLen], &_serviceDataUuid, sizeof(_serviceDataUuid));
    3ef2:	1830      	adds	r0, r6, r0
    3ef4:	f005 f9ad 	bl	9252 <memcpy>
    memcpy(&advertisingData[advertisingDataLen],_serviceData, _serviceDataLength);
    3ef8:	1970      	adds	r0, r6, r5
    3efa:	003a      	movs	r2, r7
    3efc:	9906      	ldr	r1, [sp, #24]
    3efe:	f005 f9a8 	bl	9252 <memcpy>
    advertisingDataLen += _serviceDataLength;
    3f02:	9b07      	ldr	r3, [sp, #28]
    3f04:	195d      	adds	r5, r3, r5
    3f06:	b2ed      	uxtb	r5, r5
  if (HCI.leSetAdvertisingData(advertisingDataLen, advertisingData) != 0) {
    3f08:	4f21      	ldr	r7, [pc, #132]	; (3f90 <_ZN8GAPClass9advertiseEv+0x15c>)
    3f0a:	aa0a      	add	r2, sp, #40	; 0x28
    3f0c:	0029      	movs	r1, r5
    3f0e:	0038      	movs	r0, r7
    3f10:	f000 fc4a 	bl	47a8 <_ZN8HCIClass20leSetAdvertisingDataEhPh>
    3f14:	2800      	cmp	r0, #0
    3f16:	d1ad      	bne.n	3e74 <_ZN8GAPClass9advertiseEv+0x40>
  if (_localName) {
    3f18:	6965      	ldr	r5, [r4, #20]
    3f1a:	ae12      	add	r6, sp, #72	; 0x48
  uint8_t scanResponseDataLen = 0;
    3f1c:	1e29      	subs	r1, r5, #0
  if (_localName) {
    3f1e:	d015      	beq.n	3f4c <_ZN8GAPClass9advertiseEv+0x118>
    int localNameLen = strlen(_localName);
    3f20:	0028      	movs	r0, r5
    3f22:	f005 ff17 	bl	9d54 <strlen>
    3f26:	0002      	movs	r2, r0
    if (localNameLen > 29) {
    3f28:	281d      	cmp	r0, #29
    3f2a:	dd2d      	ble.n	3f88 <_ZN8GAPClass9advertiseEv+0x154>
      scanResponseData[1] = 0x08;
    3f2c:	2308      	movs	r3, #8
      localNameLen = 29;
    3f2e:	221d      	movs	r2, #29
      scanResponseData[1] = 0x08;
    3f30:	7073      	strb	r3, [r6, #1]
    memcpy(&scanResponseData[2], _localName, localNameLen);
    3f32:	2042      	movs	r0, #66	; 0x42
    scanResponseData[0] = 1 + localNameLen;
    3f34:	b2d3      	uxtb	r3, r2
    3f36:	9306      	str	r3, [sp, #24]
    3f38:	3301      	adds	r3, #1
    3f3a:	7033      	strb	r3, [r6, #0]
    memcpy(&scanResponseData[2], _localName, localNameLen);
    3f3c:	ab02      	add	r3, sp, #8
    3f3e:	0029      	movs	r1, r5
    3f40:	18c0      	adds	r0, r0, r3
    3f42:	f005 f986 	bl	9252 <memcpy>
    scanResponseDataLen += (2 + localNameLen);
    3f46:	9b06      	ldr	r3, [sp, #24]
    3f48:	1c9d      	adds	r5, r3, #2
    3f4a:	b2e9      	uxtb	r1, r5
  if (HCI.leSetScanResponseData(scanResponseDataLen, scanResponseData) != 0) {
    3f4c:	0032      	movs	r2, r6
    3f4e:	0038      	movs	r0, r7
    3f50:	f000 fc46 	bl	47e0 <_ZN8HCIClass21leSetScanResponseDataEhPh>
    3f54:	2800      	cmp	r0, #0
    3f56:	d000      	beq.n	3f5a <_ZN8GAPClass9advertiseEv+0x126>
    3f58:	e78c      	b.n	3e74 <_ZN8GAPClass9advertiseEv+0x40>
  if (HCI.leSetAdvertiseEnable(0x01) != 0) {
    3f5a:	2101      	movs	r1, #1
    3f5c:	0038      	movs	r0, r7
    3f5e:	f000 fc5b 	bl	4818 <_ZN8HCIClass20leSetAdvertiseEnableEh>
    3f62:	2800      	cmp	r0, #0
    3f64:	d000      	beq.n	3f68 <_ZN8GAPClass9advertiseEv+0x134>
    3f66:	e785      	b.n	3e74 <_ZN8GAPClass9advertiseEv+0x40>
  _advertising = false;
    3f68:	7120      	strb	r0, [r4, #4]
  return 1;
    3f6a:	3001      	adds	r0, #1
    3f6c:	e783      	b.n	3e76 <_ZN8GAPClass9advertiseEv+0x42>
  } else if (_manufacturerData && _manufacturerDataLength) {
    3f6e:	68e1      	ldr	r1, [r4, #12]
  advertisingDataLen += 3;
    3f70:	2503      	movs	r5, #3
  } else if (_manufacturerData && _manufacturerDataLength) {
    3f72:	2900      	cmp	r1, #0
    3f74:	d0a4      	beq.n	3ec0 <_ZN8GAPClass9advertiseEv+0x8c>
    3f76:	6922      	ldr	r2, [r4, #16]
    3f78:	2a00      	cmp	r2, #0
    3f7a:	d0a1      	beq.n	3ec0 <_ZN8GAPClass9advertiseEv+0x8c>
    advertisingData[3] = 1 + _manufacturerDataLength;
    3f7c:	b2d5      	uxtb	r5, r2
    3f7e:	1c6b      	adds	r3, r5, #1
    3f80:	70f3      	strb	r3, [r6, #3]
    advertisingData[4] = 0xff;
    3f82:	23ff      	movs	r3, #255	; 0xff
    3f84:	7133      	strb	r3, [r6, #4]
    3f86:	e794      	b.n	3eb2 <_ZN8GAPClass9advertiseEv+0x7e>
      scanResponseData[1] = 0x09;
    3f88:	2309      	movs	r3, #9
    3f8a:	7073      	strb	r3, [r6, #1]
    3f8c:	e7d1      	b.n	3f32 <_ZN8GAPClass9advertiseEv+0xfe>
    3f8e:	46c0      	nop			; (mov r8, r8)
    3f90:	20000480 	.word	0x20000480

00003f94 <_ZN8GAPClass24setAdvertisedServiceDataEtPKhi>:
  _connectable = connectable;
}

void GAPClass::setAdvertisedServiceData(uint16_t uuid, const uint8_t data[], int length)
{
  _serviceDataUuid = uuid;
    3f94:	8381      	strh	r1, [r0, #28]
  _serviceData = data;
    3f96:	6202      	str	r2, [r0, #32]
  _serviceDataLength = length;
    3f98:	6243      	str	r3, [r0, #36]	; 0x24
}
    3f9a:	4770      	bx	lr

00003f9c <_GLOBAL__sub_I__ZN8GAPClassC2Ev>:

GAPClass GAP;
    3f9c:	b510      	push	{r4, lr}
    3f9e:	4c05      	ldr	r4, [pc, #20]	; (3fb4 <_GLOBAL__sub_I__ZN8GAPClassC2Ev+0x18>)
    3fa0:	0020      	movs	r0, r4
    3fa2:	f7ff ff2f 	bl	3e04 <_ZN8GAPClassC1Ev>
    3fa6:	4a04      	ldr	r2, [pc, #16]	; (3fb8 <_GLOBAL__sub_I__ZN8GAPClassC2Ev+0x1c>)
    3fa8:	4904      	ldr	r1, [pc, #16]	; (3fbc <_GLOBAL__sub_I__ZN8GAPClassC2Ev+0x20>)
    3faa:	0020      	movs	r0, r4
    3fac:	f003 f99c 	bl	72e8 <__aeabi_atexit>
    3fb0:	bd10      	pop	{r4, pc}
    3fb2:	46c0      	nop			; (mov r8, r8)
    3fb4:	200002ec 	.word	0x200002ec
    3fb8:	20000000 	.word	0x20000000
    3fbc:	00003df5 	.word	0x00003df5

00003fc0 <_ZN9GATTClassC1Ev>:

#include "BLEProperty.h"

#include "GATT.h"

GATTClass::GATTClass() :
    3fc0:	b5f0      	push	{r4, r5, r6, r7, lr}
  _genericAccessService("1800"),
  _deviceNameCharacteristic("2a00", BLERead, 20),
  _appearanceCharacteristic("2a01", BLERead, 2),
  _genericAttributeService("1801"),
  _servicesChangedCharacteristic("2a05", BLEIndicate, 4)
    3fc2:	0004      	movs	r4, r0
  _last(NULL)
    3fc4:	2700      	movs	r7, #0
GATTClass::GATTClass() :
    3fc6:	0006      	movs	r6, r0
  _servicesChangedCharacteristic("2a05", BLEIndicate, 4)
    3fc8:	4b22      	ldr	r3, [pc, #136]	; (4054 <_ZN9GATTClassC1Ev+0x94>)
    3fca:	3410      	adds	r4, #16
    3fcc:	3308      	adds	r3, #8
GATTClass::GATTClass() :
    3fce:	b087      	sub	sp, #28
  _servicesChangedCharacteristic("2a05", BLEIndicate, 4)
    3fd0:	6003      	str	r3, [r0, #0]
    3fd2:	6047      	str	r7, [r0, #4]
    3fd4:	6087      	str	r7, [r0, #8]
    3fd6:	60c7      	str	r7, [r0, #12]
    3fd8:	491f      	ldr	r1, [pc, #124]	; (4058 <_ZN9GATTClassC1Ev+0x98>)
    3fda:	0020      	movs	r0, r4
    3fdc:	f7fe fe46 	bl	2c6c <_ZN15BLELocalServiceC1EPKc>
    3fe0:	0033      	movs	r3, r6
    3fe2:	3340      	adds	r3, #64	; 0x40
    3fe4:	9303      	str	r3, [sp, #12]
    3fe6:	9700      	str	r7, [sp, #0]
    3fe8:	2314      	movs	r3, #20
    3fea:	2202      	movs	r2, #2
    3fec:	491b      	ldr	r1, [pc, #108]	; (405c <_ZN9GATTClassC1Ev+0x9c>)
    3fee:	9803      	ldr	r0, [sp, #12]
    3ff0:	f7fe fbb0 	bl	2754 <_ZN22BLELocalCharacteristicC1EPKchib>
    3ff4:	0033      	movs	r3, r6
    3ff6:	3394      	adds	r3, #148	; 0x94
    3ff8:	9304      	str	r3, [sp, #16]
    3ffa:	0035      	movs	r5, r6
    3ffc:	2302      	movs	r3, #2
    3ffe:	35e8      	adds	r5, #232	; 0xe8
    4000:	001a      	movs	r2, r3
    4002:	9700      	str	r7, [sp, #0]
    4004:	4916      	ldr	r1, [pc, #88]	; (4060 <_ZN9GATTClassC1Ev+0xa0>)
    4006:	9804      	ldr	r0, [sp, #16]
    4008:	f7fe fba4 	bl	2754 <_ZN22BLELocalCharacteristicC1EPKchib>
    400c:	4915      	ldr	r1, [pc, #84]	; (4064 <_ZN9GATTClassC1Ev+0xa4>)
    400e:	0028      	movs	r0, r5
    4010:	f7fe fe2c 	bl	2c6c <_ZN15BLELocalServiceC1EPKc>
    4014:	0033      	movs	r3, r6
    4016:	3319      	adds	r3, #25
    4018:	33ff      	adds	r3, #255	; 0xff
    401a:	9305      	str	r3, [sp, #20]
    401c:	2220      	movs	r2, #32
    401e:	2304      	movs	r3, #4
    4020:	4911      	ldr	r1, [pc, #68]	; (4068 <_ZN9GATTClassC1Ev+0xa8>)
    4022:	9700      	str	r7, [sp, #0]
    4024:	9805      	ldr	r0, [sp, #20]
    4026:	f7fe fb95 	bl	2754 <_ZN22BLELocalCharacteristicC1EPKchib>
{
  _genericAccessService.retain();
    402a:	0020      	movs	r0, r4
    402c:	f7fe f899 	bl	2162 <_ZN12BLEAttribute6retainEv>
  _genericAttributeService.retain();
    4030:	0028      	movs	r0, r5
    4032:	f7fe f896 	bl	2162 <_ZN12BLEAttribute6retainEv>

  _genericAccessService.addCharacteristic(&_deviceNameCharacteristic);
    4036:	9903      	ldr	r1, [sp, #12]
    4038:	0020      	movs	r0, r4
    403a:	f7fe fe40 	bl	2cbe <_ZN15BLELocalService17addCharacteristicEP22BLELocalCharacteristic>
  _genericAccessService.addCharacteristic(&_appearanceCharacteristic);
    403e:	9904      	ldr	r1, [sp, #16]
    4040:	0020      	movs	r0, r4
    4042:	f7fe fe3c 	bl	2cbe <_ZN15BLELocalService17addCharacteristicEP22BLELocalCharacteristic>

  _genericAttributeService.addCharacteristic(&_servicesChangedCharacteristic);
    4046:	0028      	movs	r0, r5
    4048:	9905      	ldr	r1, [sp, #20]
    404a:	f7fe fe38 	bl	2cbe <_ZN15BLELocalService17addCharacteristicEP22BLELocalCharacteristic>
}
    404e:	0030      	movs	r0, r6
    4050:	b007      	add	sp, #28
    4052:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4054:	0000b6f0 	.word	0x0000b6f0
    4058:	0000b6d4 	.word	0x0000b6d4
    405c:	0000b6d9 	.word	0x0000b6d9
    4060:	0000b6de 	.word	0x0000b6de
    4064:	0000b6e3 	.word	0x0000b6e3
    4068:	0000b6e8 	.word	0x0000b6e8

0000406c <_ZN9GATTClass13setAppearanceEt>:
{
  _deviceNameCharacteristic.writeValue(deviceName);
}

void GATTClass::setAppearance(uint16_t appearance)
{
    406c:	b507      	push	{r0, r1, r2, lr}
    406e:	466b      	mov	r3, sp
    4070:	80d9      	strh	r1, [r3, #6]
    4072:	3306      	adds	r3, #6
  _appearanceCharacteristic.writeValue((uint8_t*)&appearance, sizeof(appearance));
    4074:	3094      	adds	r0, #148	; 0x94
    4076:	2202      	movs	r2, #2
    4078:	0019      	movs	r1, r3
    407a:	f7fe facb 	bl	2614 <_ZN22BLELocalCharacteristic10writeValueEPKhi>
}
    407e:	bd07      	pop	{r0, r1, r2, pc}

00004080 <_ZNK9GATTClass14attributeCountEv>:
  }
}

unsigned int GATTClass::attributeCount() const
{
  return _attributes.size();
    4080:	6840      	ldr	r0, [r0, #4]
}
    4082:	4770      	bx	lr

00004084 <_ZN13BLELinkedListIP12BLEAttributeE5clearEv>:
template <typename T> void BLELinkedList<T>::clear()
    4084:	b570      	push	{r4, r5, r6, lr}
  for (unsigned int i = 0; i < _size; i++) {
    4086:	2500      	movs	r5, #0
template <typename T> void BLELinkedList<T>::clear()
    4088:	0004      	movs	r4, r0
  BLELinkedListNode<T>* itemNode = _root;
    408a:	6840      	ldr	r0, [r0, #4]
  for (unsigned int i = 0; i < _size; i++) {
    408c:	6823      	ldr	r3, [r4, #0]
    408e:	429d      	cmp	r5, r3
    4090:	d205      	bcs.n	409e <_ZN13BLELinkedListIP12BLEAttributeE5clearEv+0x1a>
    itemNode = itemNode->next;
    4092:	6846      	ldr	r6, [r0, #4]
  for (unsigned int i = 0; i < _size; i++) {
    4094:	3501      	adds	r5, #1
    delete n;
    4096:	f001 f93b 	bl	5310 <_ZdlPv>
    itemNode = itemNode->next;
    409a:	0030      	movs	r0, r6
  for (unsigned int i = 0; i < _size; i++) {
    409c:	e7f6      	b.n	408c <_ZN13BLELinkedListIP12BLEAttributeE5clearEv+0x8>
  _size = 0;
    409e:	2300      	movs	r3, #0
    40a0:	6023      	str	r3, [r4, #0]
  _root = NULL;
    40a2:	6063      	str	r3, [r4, #4]
  _last = NULL;
    40a4:	60a3      	str	r3, [r4, #8]
}
    40a6:	bd70      	pop	{r4, r5, r6, pc}

000040a8 <_ZN9GATTClass3endEv>:
{
    40a8:	b510      	push	{r4, lr}
  _attributes.clear();
    40aa:	3004      	adds	r0, #4
    40ac:	f7ff ffea 	bl	4084 <_ZN13BLELinkedListIP12BLEAttributeE5clearEv>
}
    40b0:	bd10      	pop	{r4, pc}

000040b2 <_ZNK13BLELinkedListIP12BLEAttributeE3getEj>:
  if (index >= _size) {
    40b2:	6802      	ldr	r2, [r0, #0]
    return T();
    40b4:	2300      	movs	r3, #0
  if (index >= _size) {
    40b6:	428a      	cmp	r2, r1
    40b8:	d907      	bls.n	40ca <_ZNK13BLELinkedListIP12BLEAttributeE3getEj+0x18>
  for (unsigned int i = 0; i < index; i++) {
    40ba:	2200      	movs	r2, #0
  BLELinkedListNode<T>* itemNode = _root;
    40bc:	6843      	ldr	r3, [r0, #4]
  for (unsigned int i = 0; i < index; i++) {
    40be:	428a      	cmp	r2, r1
    40c0:	d002      	beq.n	40c8 <_ZNK13BLELinkedListIP12BLEAttributeE3getEj+0x16>
    itemNode = itemNode->next;
    40c2:	685b      	ldr	r3, [r3, #4]
  for (unsigned int i = 0; i < index; i++) {
    40c4:	3201      	adds	r2, #1
    40c6:	e7fa      	b.n	40be <_ZNK13BLELinkedListIP12BLEAttributeE3getEj+0xc>
  return itemNode->data;
    40c8:	681b      	ldr	r3, [r3, #0]
}
    40ca:	0018      	movs	r0, r3
    40cc:	4770      	bx	lr

000040ce <_ZNK9GATTClass9attributeEj>:

BLEAttribute* GATTClass::attribute(unsigned int index) const
{
    40ce:	b510      	push	{r4, lr}
  return _attributes.get(index);
    40d0:	3004      	adds	r0, #4
    40d2:	f7ff ffee 	bl	40b2 <_ZNK13BLELinkedListIP12BLEAttributeE3getEj>
}
    40d6:	bd10      	pop	{r4, pc}

000040d8 <_ZNK9GATTClass28serviceUuidForCharacteristicEP22BLELocalCharacteristic>:

uint16_t GATTClass::serviceUuidForCharacteristic(BLELocalCharacteristic* characteristic) const
{
    40d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint16_t serviceUuid = 0x0000;

  BLELocalService* lastService = NULL;

  for (unsigned int i = 0; i < attributeCount(); i++) {
    40da:	2500      	movs	r5, #0
{
    40dc:	0007      	movs	r7, r0
  BLELocalService* lastService = NULL;
    40de:	002c      	movs	r4, r5
{
    40e0:	9101      	str	r1, [sp, #4]
  for (unsigned int i = 0; i < attributeCount(); i++) {
    40e2:	687b      	ldr	r3, [r7, #4]
    40e4:	429d      	cmp	r5, r3
    40e6:	d20e      	bcs.n	4106 <_ZNK9GATTClass28serviceUuidForCharacteristicEP22BLELocalCharacteristic+0x2e>
  return _attributes.get(index);
    40e8:	0029      	movs	r1, r5
    40ea:	1d38      	adds	r0, r7, #4
    40ec:	f7ff ffe1 	bl	40b2 <_ZNK13BLELinkedListIP12BLEAttributeE3getEj>
    BLEAttribute* a = attribute(i);
    uint16_t attributeType = a->type();
    40f0:	6803      	ldr	r3, [r0, #0]
  return _attributes.get(index);
    40f2:	0006      	movs	r6, r0
    uint16_t attributeType = a->type();
    40f4:	689b      	ldr	r3, [r3, #8]
    40f6:	4798      	blx	r3

    if (attributeType == BLETypeService) {
    40f8:	23a0      	movs	r3, #160	; 0xa0
    40fa:	019b      	lsls	r3, r3, #6
    40fc:	4298      	cmp	r0, r3
    40fe:	d00d      	beq.n	411c <_ZNK9GATTClass28serviceUuidForCharacteristicEP22BLELocalCharacteristic+0x44>
      lastService = (BLELocalService*)a;
    } else if (a == characteristic) {
    4100:	9b01      	ldr	r3, [sp, #4]
    4102:	42b3      	cmp	r3, r6
    4104:	d10b      	bne.n	411e <_ZNK9GATTClass28serviceUuidForCharacteristicEP22BLELocalCharacteristic+0x46>
  uint16_t serviceUuid = 0x0000;
    4106:	1e20      	subs	r0, r4, #0
      break;
    }
  }

  if (lastService) {
    4108:	d007      	beq.n	411a <_ZNK9GATTClass28serviceUuidForCharacteristicEP22BLELocalCharacteristic+0x42>
    if (lastService->uuidLength() == 2) {
    410a:	f7fe f825 	bl	2158 <_ZNK12BLEAttribute10uuidLengthEv>
    410e:	2802      	cmp	r0, #2
    4110:	d107      	bne.n	4122 <_ZNK9GATTClass28serviceUuidForCharacteristicEP22BLELocalCharacteristic+0x4a>
      serviceUuid = *(uint16_t*)(lastService->uuidData());
    4112:	0020      	movs	r0, r4
    4114:	f7fe f81b 	bl	214e <_ZNK12BLEAttribute8uuidDataEv>
    4118:	8800      	ldrh	r0, [r0, #0]
      serviceUuid = *(uint16_t*)(lastService->uuidData() + 10);
    }
  }

  return serviceUuid;
}
    411a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    411c:	0034      	movs	r4, r6
  for (unsigned int i = 0; i < attributeCount(); i++) {
    411e:	3501      	adds	r5, #1
    4120:	e7df      	b.n	40e2 <_ZNK9GATTClass28serviceUuidForCharacteristicEP22BLELocalCharacteristic+0xa>
      serviceUuid = *(uint16_t*)(lastService->uuidData() + 10);
    4122:	0020      	movs	r0, r4
    4124:	f7fe f813 	bl	214e <_ZNK12BLEAttribute8uuidDataEv>
    4128:	8940      	ldrh	r0, [r0, #10]
    412a:	e7f6      	b.n	411a <_ZNK9GATTClass28serviceUuidForCharacteristicEP22BLELocalCharacteristic+0x42>

0000412c <_ZN9GATTClass15clearAttributesEv>:

  service->setHandles(startHandle, attributeCount());
}

void GATTClass::clearAttributes()
{
    412c:	b570      	push	{r4, r5, r6, lr}
    412e:	0006      	movs	r6, r0
  for (unsigned int i = 0; i < attributeCount(); i++) {
    4130:	2400      	movs	r4, #0
    4132:	6873      	ldr	r3, [r6, #4]
    4134:	1d30      	adds	r0, r6, #4
    4136:	429c      	cmp	r4, r3
    4138:	d20f      	bcs.n	415a <_ZN9GATTClass15clearAttributesEv+0x2e>
  return _attributes.get(index);
    413a:	0021      	movs	r1, r4
    413c:	f7ff ffb9 	bl	40b2 <_ZNK13BLELinkedListIP12BLEAttributeE3getEj>
    4140:	0005      	movs	r5, r0
    BLEAttribute* a = attribute(i);

    if (a->release() <= 0) {
    4142:	f7fe f813 	bl	216c <_ZN12BLEAttribute7releaseEv>
    4146:	2800      	cmp	r0, #0
    4148:	dc05      	bgt.n	4156 <_ZN9GATTClass15clearAttributesEv+0x2a>
      delete a;
    414a:	2d00      	cmp	r5, #0
    414c:	d003      	beq.n	4156 <_ZN9GATTClass15clearAttributesEv+0x2a>
    414e:	682b      	ldr	r3, [r5, #0]
    4150:	0028      	movs	r0, r5
    4152:	685b      	ldr	r3, [r3, #4]
    4154:	4798      	blx	r3
  for (unsigned int i = 0; i < attributeCount(); i++) {
    4156:	3401      	adds	r4, #1
    4158:	e7eb      	b.n	4132 <_ZN9GATTClass15clearAttributesEv+0x6>
    }
  }

  _attributes.clear();
    415a:	f7ff ff93 	bl	4084 <_ZN13BLELinkedListIP12BLEAttributeE5clearEv>
}
    415e:	bd70      	pop	{r4, r5, r6, pc}

00004160 <_ZN13BLELinkedListIP12BLEAttributeE3addES1_>:
template <typename T> void BLELinkedList<T>::add(T item)
    4160:	b570      	push	{r4, r5, r6, lr}
    4162:	0004      	movs	r4, r0
  BLELinkedListNode<T>* itemNode = new BLELinkedListNode<T>();
    4164:	2008      	movs	r0, #8
template <typename T> void BLELinkedList<T>::add(T item)
    4166:	000d      	movs	r5, r1
  BLELinkedListNode<T>* itemNode = new BLELinkedListNode<T>();
    4168:	f001 f8ce 	bl	5308 <_Znwj>
    416c:	2300      	movs	r3, #0
    416e:	6043      	str	r3, [r0, #4]
  if (_root == NULL) {
    4170:	6863      	ldr	r3, [r4, #4]
  itemNode->data = item;
    4172:	6005      	str	r5, [r0, #0]
  if (_root == NULL) {
    4174:	2b00      	cmp	r3, #0
    4176:	d105      	bne.n	4184 <_ZN13BLELinkedListIP12BLEAttributeE3addES1_+0x24>
    _root = itemNode;
    4178:	6060      	str	r0, [r4, #4]
  _size++;
    417a:	6823      	ldr	r3, [r4, #0]
  _last = itemNode;
    417c:	60a0      	str	r0, [r4, #8]
  _size++;
    417e:	3301      	adds	r3, #1
    4180:	6023      	str	r3, [r4, #0]
}
    4182:	bd70      	pop	{r4, r5, r6, pc}
    _last->next = itemNode;
    4184:	68a3      	ldr	r3, [r4, #8]
    4186:	6058      	str	r0, [r3, #4]
    4188:	e7f7      	b.n	417a <_ZN13BLELinkedListIP12BLEAttributeE3addES1_+0x1a>

0000418a <_ZN9GATTClass10addServiceEP15BLELocalService>:
{
    418a:	b5f0      	push	{r4, r5, r6, r7, lr}
    418c:	0006      	movs	r6, r0
    418e:	000d      	movs	r5, r1
  for (unsigned int i = 0; i < service->characteristicCount(); i++) {
    4190:	2700      	movs	r7, #0
{
    4192:	b085      	sub	sp, #20
  service->retain();
    4194:	0008      	movs	r0, r1
    4196:	f7fd ffe4 	bl	2162 <_ZN12BLEAttribute6retainEv>
  _attributes.add(service);
    419a:	1d33      	adds	r3, r6, #4
    419c:	0018      	movs	r0, r3
    419e:	0029      	movs	r1, r5
    41a0:	9301      	str	r3, [sp, #4]
    41a2:	f7ff ffdd 	bl	4160 <_ZN13BLELinkedListIP12BLEAttributeE3addES1_>
  uint16_t startHandle = attributeCount();
    41a6:	88b3      	ldrh	r3, [r6, #4]
    41a8:	9303      	str	r3, [sp, #12]
  for (unsigned int i = 0; i < service->characteristicCount(); i++) {
    41aa:	0028      	movs	r0, r5
    41ac:	f7fe fd77 	bl	2c9e <_ZNK15BLELocalService19characteristicCountEv>
    41b0:	4287      	cmp	r7, r0
    41b2:	d22e      	bcs.n	4212 <_ZN9GATTClass10addServiceEP15BLELocalService+0x88>
    BLELocalCharacteristic* characteristic = service->characteristic(i);
    41b4:	0039      	movs	r1, r7
    41b6:	0028      	movs	r0, r5
    41b8:	f7fe fd73 	bl	2ca2 <_ZNK15BLELocalService14characteristicEj>
    41bc:	0004      	movs	r4, r0
    characteristic->retain();
    41be:	f7fd ffd0 	bl	2162 <_ZN12BLEAttribute6retainEv>
    _attributes.add(characteristic);
    41c2:	0021      	movs	r1, r4
    41c4:	9801      	ldr	r0, [sp, #4]
    41c6:	f7ff ffcb 	bl	4160 <_ZN13BLELinkedListIP12BLEAttributeE3addES1_>
    characteristic->setHandle(attributeCount());
    41ca:	88b1      	ldrh	r1, [r6, #4]
    41cc:	0020      	movs	r0, r4
    41ce:	f7fe fa94 	bl	26fa <_ZN22BLELocalCharacteristic9setHandleEt>
    _attributes.add(characteristic);
    41d2:	0021      	movs	r1, r4
    41d4:	9801      	ldr	r0, [sp, #4]
    41d6:	f7ff ffc3 	bl	4160 <_ZN13BLELinkedListIP12BLEAttributeE3addES1_>
    for (unsigned int j = 0; j < characteristic->descriptorCount(); j++) {
    41da:	2300      	movs	r3, #0
    41dc:	0020      	movs	r0, r4
    41de:	9300      	str	r3, [sp, #0]
    41e0:	f7fe fa93 	bl	270a <_ZNK22BLELocalCharacteristic15descriptorCountEv>
    41e4:	9b00      	ldr	r3, [sp, #0]
    41e6:	4283      	cmp	r3, r0
    41e8:	d211      	bcs.n	420e <_ZN9GATTClass10addServiceEP15BLELocalService+0x84>
      BLELocalDescriptor* descriptor = characteristic->descriptor(j);
    41ea:	0019      	movs	r1, r3
    41ec:	0020      	movs	r0, r4
    41ee:	f7fe fa8e 	bl	270e <_ZNK22BLELocalCharacteristic10descriptorEj>
    41f2:	9002      	str	r0, [sp, #8]
      descriptor->retain();
    41f4:	f7fd ffb5 	bl	2162 <_ZN12BLEAttribute6retainEv>
      _attributes.add(descriptor);
    41f8:	9902      	ldr	r1, [sp, #8]
    41fa:	9801      	ldr	r0, [sp, #4]
    41fc:	f7ff ffb0 	bl	4160 <_ZN13BLELinkedListIP12BLEAttributeE3addES1_>
      descriptor->setHandle(attributeCount());
    4200:	88b1      	ldrh	r1, [r6, #4]
    4202:	9802      	ldr	r0, [sp, #8]
    4204:	f7fe fbf0 	bl	29e8 <_ZN18BLELocalDescriptor9setHandleEt>
    for (unsigned int j = 0; j < characteristic->descriptorCount(); j++) {
    4208:	9b00      	ldr	r3, [sp, #0]
    420a:	3301      	adds	r3, #1
    420c:	e7e6      	b.n	41dc <_ZN9GATTClass10addServiceEP15BLELocalService+0x52>
  for (unsigned int i = 0; i < service->characteristicCount(); i++) {
    420e:	3701      	adds	r7, #1
    4210:	e7cb      	b.n	41aa <_ZN9GATTClass10addServiceEP15BLELocalService+0x20>
  service->setHandles(startHandle, attributeCount());
    4212:	6872      	ldr	r2, [r6, #4]
    4214:	9903      	ldr	r1, [sp, #12]
    4216:	b292      	uxth	r2, r2
    4218:	0028      	movs	r0, r5
    421a:	f7fe fd39 	bl	2c90 <_ZN15BLELocalService10setHandlesEtt>
}
    421e:	b005      	add	sp, #20
    4220:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

00004224 <_ZN9GATTClass5beginEv>:
{
    4224:	b510      	push	{r4, lr}
    4226:	0004      	movs	r4, r0
  _deviceNameCharacteristic.writeValue(deviceName);
    4228:	490a      	ldr	r1, [pc, #40]	; (4254 <_ZN9GATTClass5beginEv+0x30>)
    422a:	3040      	adds	r0, #64	; 0x40
    422c:	f7fe fa4c 	bl	26c8 <_ZN22BLELocalCharacteristic10writeValueEPKc>
  setAppearance(0x000);
    4230:	2100      	movs	r1, #0
    4232:	0020      	movs	r0, r4
    4234:	f7ff ff1a 	bl	406c <_ZN9GATTClass13setAppearanceEt>
  clearAttributes();
    4238:	0020      	movs	r0, r4
    423a:	f7ff ff77 	bl	412c <_ZN9GATTClass15clearAttributesEv>
  addService(&_genericAccessService);
    423e:	0021      	movs	r1, r4
    4240:	0020      	movs	r0, r4
    4242:	3110      	adds	r1, #16
    4244:	f7ff ffa1 	bl	418a <_ZN9GATTClass10addServiceEP15BLELocalService>
  addService(&_genericAttributeService);
    4248:	0021      	movs	r1, r4
    424a:	0020      	movs	r0, r4
    424c:	31e8      	adds	r1, #232	; 0xe8
    424e:	f7ff ff9c 	bl	418a <_ZN9GATTClass10addServiceEP15BLELocalService>
}
    4252:	bd10      	pop	{r4, pc}
    4254:	0000b6cc 	.word	0x0000b6cc

00004258 <_ZN9GATTClass10addServiceER10BLEService>:
{
    4258:	b510      	push	{r4, lr}
    425a:	0004      	movs	r4, r0
  BLELocalService* localService = service.local();
    425c:	0008      	movs	r0, r1
    425e:	f7fe f916 	bl	248e <_ZN10BLEService5localEv>
    4262:	1e01      	subs	r1, r0, #0
  if (localService) {
    4264:	d002      	beq.n	426c <_ZN9GATTClass10addServiceER10BLEService+0x14>
    addService(localService);
    4266:	0020      	movs	r0, r4
    4268:	f7ff ff8f 	bl	418a <_ZN9GATTClass10addServiceEP15BLELocalService>
}
    426c:	bd10      	pop	{r4, pc}
	...

00004270 <_GLOBAL__sub_I__ZN9GATTClassC2Ev>:

GATTClass GATT;
    4270:	b510      	push	{r4, lr}
    4272:	4c05      	ldr	r4, [pc, #20]	; (4288 <_GLOBAL__sub_I__ZN9GATTClassC2Ev+0x18>)
    4274:	0020      	movs	r0, r4
    4276:	f7ff fea3 	bl	3fc0 <_ZN9GATTClassC1Ev>
    427a:	4a04      	ldr	r2, [pc, #16]	; (428c <_GLOBAL__sub_I__ZN9GATTClassC2Ev+0x1c>)
    427c:	4904      	ldr	r1, [pc, #16]	; (4290 <_GLOBAL__sub_I__ZN9GATTClassC2Ev+0x20>)
    427e:	0020      	movs	r0, r4
    4280:	f003 f832 	bl	72e8 <__aeabi_atexit>
    4284:	bd10      	pop	{r4, pc}
    4286:	46c0      	nop			; (mov r8, r8)
    4288:	20000314 	.word	0x20000314
    428c:	20000000 	.word	0x20000000
    4290:	00004295 	.word	0x00004295

00004294 <_ZN9GATTClassD1Ev>:
GATTClass::~GATTClass()
    4294:	b510      	push	{r4, lr}
    4296:	0004      	movs	r4, r0
    4298:	4b0f      	ldr	r3, [pc, #60]	; (42d8 <_ZN9GATTClassD1Ev+0x44>)
    429a:	3308      	adds	r3, #8
    429c:	6003      	str	r3, [r0, #0]
  clearAttributes();
    429e:	f7ff ff45 	bl	412c <_ZN9GATTClass15clearAttributesEv>
GATTClass::~GATTClass()
    42a2:	0020      	movs	r0, r4
    42a4:	3019      	adds	r0, #25
    42a6:	30ff      	adds	r0, #255	; 0xff
    42a8:	f7fe faa8 	bl	27fc <_ZN22BLELocalCharacteristicD1Ev>
    42ac:	0020      	movs	r0, r4
    42ae:	30e8      	adds	r0, #232	; 0xe8
    42b0:	f7fe fd3a 	bl	2d28 <_ZN15BLELocalServiceD1Ev>
    42b4:	0020      	movs	r0, r4
    42b6:	3094      	adds	r0, #148	; 0x94
    42b8:	f7fe faa0 	bl	27fc <_ZN22BLELocalCharacteristicD1Ev>
    42bc:	0020      	movs	r0, r4
    42be:	3040      	adds	r0, #64	; 0x40
    42c0:	f7fe fa9c 	bl	27fc <_ZN22BLELocalCharacteristicD1Ev>
    42c4:	0020      	movs	r0, r4
    42c6:	3010      	adds	r0, #16
    42c8:	f7fe fd2e 	bl	2d28 <_ZN15BLELocalServiceD1Ev>
    42cc:	1d20      	adds	r0, r4, #4
  clear();
    42ce:	f7ff fed9 	bl	4084 <_ZN13BLELinkedListIP12BLEAttributeE5clearEv>
}
    42d2:	0020      	movs	r0, r4
    42d4:	bd10      	pop	{r4, pc}
    42d6:	46c0      	nop			; (mov r8, r8)
    42d8:	0000b6f0 	.word	0x0000b6f0

000042dc <_ZN9GATTClassD0Ev>:
GATTClass::~GATTClass()
    42dc:	b510      	push	{r4, lr}
    42de:	0004      	movs	r4, r0
}
    42e0:	f7ff ffd8 	bl	4294 <_ZN9GATTClassD1Ev>
    42e4:	0020      	movs	r0, r4
    42e6:	f001 f813 	bl	5310 <_ZdlPv>
    42ea:	0020      	movs	r0, r4
    42ec:	bd10      	pop	{r4, pc}

000042ee <_ZN8HCIClassD1Ev>:
{
}

HCIClass::~HCIClass()
{
}
    42ee:	4770      	bx	lr

000042f0 <_ZN8HCIClassD0Ev>:
HCIClass::~HCIClass()
    42f0:	b510      	push	{r4, lr}
    42f2:	0004      	movs	r4, r0
}
    42f4:	f001 f80c 	bl	5310 <_ZdlPv>
    42f8:	0020      	movs	r0, r4
    42fa:	bd10      	pop	{r4, pc}

000042fc <_ZN8HCIClass5beginEv>:

int HCIClass::begin()
{
  _recvIndex = 0;
    42fc:	2300      	movs	r3, #0
{
    42fe:	b510      	push	{r4, lr}
  _recvIndex = 0;
    4300:	6083      	str	r3, [r0, #8]

  return HCITransport.begin();
    4302:	4b03      	ldr	r3, [pc, #12]	; (4310 <_ZN8HCIClass5beginEv+0x14>)
    4304:	6818      	ldr	r0, [r3, #0]
    4306:	6803      	ldr	r3, [r0, #0]
    4308:	681b      	ldr	r3, [r3, #0]
    430a:	4798      	blx	r3
}
    430c:	bd10      	pop	{r4, pc}
    430e:	46c0      	nop			; (mov r8, r8)
    4310:	0000b75c 	.word	0x0000b75c

00004314 <_ZN8HCIClass3endEv>:

void HCIClass::end()
{
  HCITransport.end();
    4314:	4b03      	ldr	r3, [pc, #12]	; (4324 <_ZN8HCIClass3endEv+0x10>)
{
    4316:	b510      	push	{r4, lr}
  HCITransport.end();
    4318:	6818      	ldr	r0, [r3, #0]
    431a:	6803      	ldr	r3, [r0, #0]
    431c:	685b      	ldr	r3, [r3, #4]
    431e:	4798      	blx	r3
}
    4320:	bd10      	pop	{r4, pc}
    4322:	46c0      	nop			; (mov r8, r8)
    4324:	0000b75c 	.word	0x0000b75c

00004328 <_ZN8HCIClass17handleNumCompPktsEtt>:
    sendAclPkt(aclHdr->handle & 0x0fff, 0x0005, sizeof(l2capRejectCid), &l2capRejectCid);
  }
}

void HCIClass::handleNumCompPkts(uint16_t /*handle*/, uint16_t numPkts)
{
    4328:	30ff      	adds	r0, #255	; 0xff
  if (numPkts && _pendingPkt > numPkts) {
    432a:	2a00      	cmp	r2, #0
    432c:	d005      	beq.n	433a <_ZN8HCIClass17handleNumCompPktsEtt+0x12>
    432e:	7f83      	ldrb	r3, [r0, #30]
    4330:	4293      	cmp	r3, r2
    4332:	dd02      	ble.n	433a <_ZN8HCIClass17handleNumCompPktsEtt+0x12>
    _pendingPkt -= numPkts;
    4334:	1a9b      	subs	r3, r3, r2
  } else {
    _pendingPkt = 0;
    4336:	7783      	strb	r3, [r0, #30]
  }
}
    4338:	4770      	bx	lr
    _pendingPkt = 0;
    433a:	2300      	movs	r3, #0
    433c:	e7fb      	b.n	4336 <_ZN8HCIClass17handleNumCompPktsEtt+0xe>
	...

00004340 <_ZN8HCIClass7dumpPktEPKchPh>:
    }
  }
}

void HCIClass::dumpPkt(const char* prefix, uint8_t plen, uint8_t pdata[])
{
    4340:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    4342:	0005      	movs	r5, r0
  if (_debug) {
    4344:	6840      	ldr	r0, [r0, #4]
{
    4346:	0017      	movs	r7, r2
    4348:	9301      	str	r3, [sp, #4]
  if (_debug) {
    434a:	2800      	cmp	r0, #0
    434c:	d01b      	beq.n	4386 <_ZN8HCIClass7dumpPktEPKchPh+0x46>
    _debug->print(prefix);
    434e:	f001 f80c 	bl	536a <_ZN5Print5printEPKc>

    for (uint8_t i = 0; i < plen; i++) {
    4352:	2400      	movs	r4, #0
    4354:	42bc      	cmp	r4, r7
    4356:	da0f      	bge.n	4378 <_ZN8HCIClass7dumpPktEPKchPh+0x38>
      byte b = pdata[i];
    4358:	9b01      	ldr	r3, [sp, #4]
    435a:	5d1e      	ldrb	r6, [r3, r4]

      if (b < 16) {
    435c:	2e0f      	cmp	r6, #15
    435e:	dc03      	bgt.n	4368 <_ZN8HCIClass7dumpPktEPKchPh+0x28>
        _debug->print("0");
    4360:	4909      	ldr	r1, [pc, #36]	; (4388 <_ZN8HCIClass7dumpPktEPKchPh+0x48>)
    4362:	6868      	ldr	r0, [r5, #4]
    4364:	f001 f801 	bl	536a <_ZN5Print5printEPKc>
      }

      _debug->print(b, HEX);
    4368:	2210      	movs	r2, #16
    436a:	0031      	movs	r1, r6
    436c:	6868      	ldr	r0, [r5, #4]
    for (uint8_t i = 0; i < plen; i++) {
    436e:	3401      	adds	r4, #1
      _debug->print(b, HEX);
    4370:	f001 f853 	bl	541a <_ZN5Print5printEhi>
    for (uint8_t i = 0; i < plen; i++) {
    4374:	b2e4      	uxtb	r4, r4
    4376:	e7ed      	b.n	4354 <_ZN8HCIClass7dumpPktEPKchPh+0x14>
    }

    _debug->println();
    4378:	6868      	ldr	r0, [r5, #4]
    437a:	f000 fffb 	bl	5374 <_ZN5Print7printlnEv>
    _debug->flush();
    437e:	6868      	ldr	r0, [r5, #4]
    4380:	6803      	ldr	r3, [r0, #0]
    4382:	68db      	ldr	r3, [r3, #12]
    4384:	4798      	blx	r3
  }
}
    4386:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    4388:	0000b6d7 	.word	0x0000b6d7

0000438c <_ZN8HCIClass10sendAclPktEthhPv>:
{
    438c:	b5f0      	push	{r4, r5, r6, r7, lr}
    438e:	0004      	movs	r4, r0
    4390:	001d      	movs	r5, r3
    4392:	b085      	sub	sp, #20
    4394:	af00      	add	r7, sp, #0
    4396:	60b9      	str	r1, [r7, #8]
    4398:	607a      	str	r2, [r7, #4]
  while (_pendingPkt >= _maxPkt) {
    439a:	0023      	movs	r3, r4
    439c:	33ff      	adds	r3, #255	; 0xff
    439e:	7f9a      	ldrb	r2, [r3, #30]
    43a0:	7f5b      	ldrb	r3, [r3, #29]
    43a2:	429a      	cmp	r2, r3
    43a4:	db03      	blt.n	43ae <_ZN8HCIClass10sendAclPktEthhPv+0x22>
    poll();
    43a6:	0020      	movs	r0, r4
    43a8:	f000 f8f6 	bl	4598 <_ZN8HCIClass4pollEv>
  while (_pendingPkt >= _maxPkt) {
    43ac:	e7f5      	b.n	439a <_ZN8HCIClass10sendAclPktEthhPv+0xe>
  uint8_t txBuffer[sizeof(aclHdr) + plen];
    43ae:	002b      	movs	r3, r5
    43b0:	466a      	mov	r2, sp
    43b2:	3310      	adds	r3, #16
    43b4:	08db      	lsrs	r3, r3, #3
    43b6:	00db      	lsls	r3, r3, #3
    43b8:	1ad3      	subs	r3, r2, r3
    43ba:	469d      	mov	sp, r3
    43bc:	60fb      	str	r3, [r7, #12]
  memcpy(txBuffer, &aclHdr, sizeof(aclHdr));
    43be:	466a      	mov	r2, sp
    43c0:	2302      	movs	r3, #2
    43c2:	7013      	strb	r3, [r2, #0]
    43c4:	7a3b      	ldrb	r3, [r7, #8]
    43c6:	3201      	adds	r2, #1
    43c8:	7013      	strb	r3, [r2, #0]
    43ca:	68bb      	ldr	r3, [r7, #8]
  memcpy(&txBuffer[sizeof(aclHdr)], data, plen);
    43cc:	2009      	movs	r0, #9
  memcpy(txBuffer, &aclHdr, sizeof(aclHdr));
    43ce:	0a1b      	lsrs	r3, r3, #8
    43d0:	7053      	strb	r3, [r2, #1]
    43d2:	466a      	mov	r2, sp
  } aclHdr = { HCI_ACLDATA_PKT, handle, uint8_t(plen + 4), plen, cid };
    43d4:	1d2b      	adds	r3, r5, #4
  memcpy(txBuffer, &aclHdr, sizeof(aclHdr));
    43d6:	b2db      	uxtb	r3, r3
    43d8:	70d3      	strb	r3, [r2, #3]
    43da:	2300      	movs	r3, #0
    43dc:	7113      	strb	r3, [r2, #4]
    43de:	466b      	mov	r3, sp
    43e0:	b2aa      	uxth	r2, r5
    43e2:	715a      	strb	r2, [r3, #5]
    43e4:	2200      	movs	r2, #0
    43e6:	719a      	strb	r2, [r3, #6]
    43e8:	466b      	mov	r3, sp
    43ea:	1dda      	adds	r2, r3, #7
    43ec:	88bb      	ldrh	r3, [r7, #4]
  uint8_t txBuffer[sizeof(aclHdr) + plen];
    43ee:	002e      	movs	r6, r5
  memcpy(txBuffer, &aclHdr, sizeof(aclHdr));
    43f0:	7013      	strb	r3, [r2, #0]
    43f2:	2300      	movs	r3, #0
  memcpy(&txBuffer[sizeof(aclHdr)], data, plen);
    43f4:	4468      	add	r0, sp
  memcpy(txBuffer, &aclHdr, sizeof(aclHdr));
    43f6:	7053      	strb	r3, [r2, #1]
  memcpy(&txBuffer[sizeof(aclHdr)], data, plen);
    43f8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    43fa:	002a      	movs	r2, r5
    43fc:	f004 ff29 	bl	9252 <memcpy>
  if (_debug) {
    4400:	6863      	ldr	r3, [r4, #4]
  uint8_t txBuffer[sizeof(aclHdr) + plen];
    4402:	3609      	adds	r6, #9
  if (_debug) {
    4404:	2b00      	cmp	r3, #0
    4406:	d005      	beq.n	4414 <_ZN8HCIClass10sendAclPktEthhPv+0x88>
    dumpPkt("HCI ACLDATA TX -> ", sizeof(aclHdr) + plen, txBuffer);
    4408:	b2f2      	uxtb	r2, r6
    440a:	466b      	mov	r3, sp
    440c:	4909      	ldr	r1, [pc, #36]	; (4434 <_ZN8HCIClass10sendAclPktEthhPv+0xa8>)
    440e:	0020      	movs	r0, r4
    4410:	f7ff ff96 	bl	4340 <_ZN8HCIClass7dumpPktEPKchPh>
  _pendingPkt++;
    4414:	34ff      	adds	r4, #255	; 0xff
    4416:	7fa3      	ldrb	r3, [r4, #30]
  HCITransport.write(txBuffer, sizeof(aclHdr) + plen);
    4418:	0032      	movs	r2, r6
  _pendingPkt++;
    441a:	3301      	adds	r3, #1
    441c:	77a3      	strb	r3, [r4, #30]
  HCITransport.write(txBuffer, sizeof(aclHdr) + plen);
    441e:	4b06      	ldr	r3, [pc, #24]	; (4438 <_ZN8HCIClass10sendAclPktEthhPv+0xac>)
    4420:	68f9      	ldr	r1, [r7, #12]
    4422:	6818      	ldr	r0, [r3, #0]
    4424:	6803      	ldr	r3, [r0, #0]
    4426:	699b      	ldr	r3, [r3, #24]
    4428:	4798      	blx	r3
}
    442a:	2000      	movs	r0, #0
    442c:	46bd      	mov	sp, r7
    442e:	b005      	add	sp, #20
    4430:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4432:	46c0      	nop			; (mov r8, r8)
    4434:	0000b700 	.word	0x0000b700
    4438:	0000b75c 	.word	0x0000b75c

0000443c <_ZN8HCIClass16handleAclDataPktEhPh>:
{
    443c:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (aclHdr->cid == ATT_CID) {
    443e:	79d7      	ldrb	r7, [r2, #7]
    4440:	7993      	ldrb	r3, [r2, #6]
    4442:	023f      	lsls	r7, r7, #8
{
    4444:	b087      	sub	sp, #28
    4446:	0005      	movs	r5, r0
    4448:	0014      	movs	r4, r2
  if (aclHdr->cid == ATT_CID) {
    444a:	431f      	orrs	r7, r3
    444c:	2f04      	cmp	r7, #4
    444e:	d10d      	bne.n	446c <_ZN8HCIClass16handleAclDataPktEhPh+0x30>
    ATT.handleData(aclHdr->handle & 0x0fff, aclHdr->len, &_recvBuffer[1 + sizeof(HCIACLHdr)]);
    4450:	0003      	movs	r3, r0
    4452:	7861      	ldrb	r1, [r4, #1]
    4454:	7820      	ldrb	r0, [r4, #0]
    4456:	0209      	lsls	r1, r1, #8
    4458:	4301      	orrs	r1, r0
    445a:	0509      	lsls	r1, r1, #20
    445c:	3315      	adds	r3, #21
    445e:	7912      	ldrb	r2, [r2, #4]
    4460:	0d09      	lsrs	r1, r1, #20
    4462:	4817      	ldr	r0, [pc, #92]	; (44c0 <_ZN8HCIClass16handleAclDataPktEhPh+0x84>)
    4464:	f7ff fc58 	bl	3d18 <_ZN8ATTClass10handleDataEthPh>
}
    4468:	b007      	add	sp, #28
    446a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  } else if (aclHdr->cid == SIGNALING_CID) {
    446c:	2f05      	cmp	r7, #5
    446e:	d10c      	bne.n	448a <_ZN8HCIClass16handleAclDataPktEhPh+0x4e>
    L2CAPSignaling.handleData(aclHdr->handle & 0x0fff, aclHdr->len, &_recvBuffer[1 + sizeof(HCIACLHdr)]);
    4470:	0003      	movs	r3, r0
    4472:	7861      	ldrb	r1, [r4, #1]
    4474:	7820      	ldrb	r0, [r4, #0]
    4476:	0209      	lsls	r1, r1, #8
    4478:	4301      	orrs	r1, r0
    447a:	0509      	lsls	r1, r1, #20
    447c:	3315      	adds	r3, #21
    447e:	7912      	ldrb	r2, [r2, #4]
    4480:	0d09      	lsrs	r1, r1, #20
    4482:	4810      	ldr	r0, [pc, #64]	; (44c4 <_ZN8HCIClass16handleAclDataPktEhPh+0x88>)
    4484:	f000 fb82 	bl	4b8c <_ZN19L2CAPSignalingClass10handleDataEthPh>
    4488:	e7ee      	b.n	4468 <_ZN8HCIClass16handleAclDataPktEhPh+0x2c>
    } l2capRejectCid= { 0x01, 0x00, 0x006, 0x0002, aclHdr->cid, 0x0000 };
    448a:	ae03      	add	r6, sp, #12
    448c:	220a      	movs	r2, #10
    448e:	2100      	movs	r1, #0
    4490:	0030      	movs	r0, r6
    4492:	f004 fef9 	bl	9288 <memset>
    4496:	2301      	movs	r3, #1
    4498:	7033      	strb	r3, [r6, #0]
    449a:	3305      	adds	r3, #5
    449c:	8073      	strh	r3, [r6, #2]
    sendAclPkt(aclHdr->handle & 0x0fff, 0x0005, sizeof(l2capRejectCid), &l2capRejectCid);
    449e:	7861      	ldrb	r1, [r4, #1]
    } l2capRejectCid= { 0x01, 0x00, 0x006, 0x0002, aclHdr->cid, 0x0000 };
    44a0:	3b04      	subs	r3, #4
    44a2:	80b3      	strh	r3, [r6, #4]
    sendAclPkt(aclHdr->handle & 0x0fff, 0x0005, sizeof(l2capRejectCid), &l2capRejectCid);
    44a4:	7823      	ldrb	r3, [r4, #0]
    44a6:	0209      	lsls	r1, r1, #8
    44a8:	4319      	orrs	r1, r3
    44aa:	0509      	lsls	r1, r1, #20
    } l2capRejectCid= { 0x01, 0x00, 0x006, 0x0002, aclHdr->cid, 0x0000 };
    44ac:	80f7      	strh	r7, [r6, #6]
    sendAclPkt(aclHdr->handle & 0x0fff, 0x0005, sizeof(l2capRejectCid), &l2capRejectCid);
    44ae:	0d09      	lsrs	r1, r1, #20
    44b0:	9600      	str	r6, [sp, #0]
    44b2:	230a      	movs	r3, #10
    44b4:	2205      	movs	r2, #5
    44b6:	0028      	movs	r0, r5
    44b8:	f7ff ff68 	bl	438c <_ZN8HCIClass10sendAclPktEthhPv>
}
    44bc:	e7d4      	b.n	4468 <_ZN8HCIClass16handleAclDataPktEhPh+0x2c>
    44be:	46c0      	nop			; (mov r8, r8)
    44c0:	200002c8 	.word	0x200002c8
    44c4:	200005ac 	.word	0x200005ac

000044c8 <_ZN8HCIClass4pollEm>:
{
    44c8:	b570      	push	{r4, r5, r6, lr}
    44ca:	0004      	movs	r4, r0
    44cc:	4d2f      	ldr	r5, [pc, #188]	; (458c <_ZN8HCIClass4pollEm+0xc4>)
  if (timeout) {
    44ce:	2900      	cmp	r1, #0
    44d0:	d003      	beq.n	44da <_ZN8HCIClass4pollEm+0x12>
    HCITransport.wait(timeout);
    44d2:	6828      	ldr	r0, [r5, #0]
    44d4:	6803      	ldr	r3, [r0, #0]
    44d6:	689b      	ldr	r3, [r3, #8]
    44d8:	4798      	blx	r3
  while (HCITransport.available()) {
    44da:	682e      	ldr	r6, [r5, #0]
    44dc:	6833      	ldr	r3, [r6, #0]
    44de:	0030      	movs	r0, r6
    44e0:	68db      	ldr	r3, [r3, #12]
    44e2:	4798      	blx	r3
    44e4:	2800      	cmp	r0, #0
    44e6:	d050      	beq.n	458a <_ZN8HCIClass4pollEm+0xc2>
    byte b = HCITransport.read();
    44e8:	6833      	ldr	r3, [r6, #0]
    44ea:	0030      	movs	r0, r6
    44ec:	695b      	ldr	r3, [r3, #20]
    44ee:	4798      	blx	r3
    _recvBuffer[_recvIndex++] = b;
    44f0:	68a3      	ldr	r3, [r4, #8]
    byte b = HCITransport.read();
    44f2:	b2c1      	uxtb	r1, r0
    _recvBuffer[_recvIndex++] = b;
    44f4:	1c5a      	adds	r2, r3, #1
    44f6:	18e3      	adds	r3, r4, r3
    44f8:	60a2      	str	r2, [r4, #8]
    44fa:	7319      	strb	r1, [r3, #12]
    if (_recvBuffer[0] == HCI_ACLDATA_PKT) {
    44fc:	7b23      	ldrb	r3, [r4, #12]
    44fe:	2b02      	cmp	r3, #2
    4500:	d11d      	bne.n	453e <_ZN8HCIClass4pollEm+0x76>
      if (_recvIndex > 5 && _recvIndex >= (5 + (_recvBuffer[3] + (_recvBuffer[4] << 8)))) {
    4502:	2a05      	cmp	r2, #5
    4504:	dde9      	ble.n	44da <_ZN8HCIClass4pollEm+0x12>
    4506:	7c23      	ldrb	r3, [r4, #16]
    4508:	7be1      	ldrb	r1, [r4, #15]
    450a:	021b      	lsls	r3, r3, #8
    450c:	185b      	adds	r3, r3, r1
    450e:	3304      	adds	r3, #4
    4510:	429a      	cmp	r2, r3
    4512:	dde2      	ble.n	44da <_ZN8HCIClass4pollEm+0x12>
        if (_debug) {
    4514:	6863      	ldr	r3, [r4, #4]
    4516:	2b00      	cmp	r3, #0
    4518:	d006      	beq.n	4528 <_ZN8HCIClass4pollEm+0x60>
          dumpPkt("HCI ACLDATA RX <- ", _recvIndex, _recvBuffer);
    451a:	0023      	movs	r3, r4
    451c:	b2d2      	uxtb	r2, r2
    451e:	330c      	adds	r3, #12
    4520:	491b      	ldr	r1, [pc, #108]	; (4590 <_ZN8HCIClass4pollEm+0xc8>)
    4522:	0020      	movs	r0, r4
    4524:	f7ff ff0c 	bl	4340 <_ZN8HCIClass7dumpPktEPKchPh>
        int pktLen = _recvIndex - 1;
    4528:	68a3      	ldr	r3, [r4, #8]
        handleAclDataPkt(pktLen, &_recvBuffer[1]);
    452a:	0022      	movs	r2, r4
        int pktLen = _recvIndex - 1;
    452c:	1e59      	subs	r1, r3, #1
        _recvIndex = 0;
    452e:	2300      	movs	r3, #0
        handleAclDataPkt(pktLen, &_recvBuffer[1]);
    4530:	b2c9      	uxtb	r1, r1
        _recvIndex = 0;
    4532:	60a3      	str	r3, [r4, #8]
        handleAclDataPkt(pktLen, &_recvBuffer[1]);
    4534:	320d      	adds	r2, #13
    4536:	0020      	movs	r0, r4
    4538:	f7ff ff80 	bl	443c <_ZN8HCIClass16handleAclDataPktEhPh>
    453c:	e7cd      	b.n	44da <_ZN8HCIClass4pollEm+0x12>
    } else if (_recvBuffer[0] == HCI_EVENT_PKT) {
    453e:	2b04      	cmp	r3, #4
    4540:	d11a      	bne.n	4578 <_ZN8HCIClass4pollEm+0xb0>
      if (_recvIndex > 3 && _recvIndex >= (3 + _recvBuffer[2])) {
    4542:	2a03      	cmp	r2, #3
    4544:	ddc9      	ble.n	44da <_ZN8HCIClass4pollEm+0x12>
    4546:	7ba3      	ldrb	r3, [r4, #14]
    4548:	3302      	adds	r3, #2
    454a:	429a      	cmp	r2, r3
    454c:	ddc5      	ble.n	44da <_ZN8HCIClass4pollEm+0x12>
        if (_debug) {
    454e:	6863      	ldr	r3, [r4, #4]
    4550:	2b00      	cmp	r3, #0
    4552:	d006      	beq.n	4562 <_ZN8HCIClass4pollEm+0x9a>
          dumpPkt("HCI EVENT RX <- ", _recvIndex, _recvBuffer);
    4554:	0023      	movs	r3, r4
    4556:	b2d2      	uxtb	r2, r2
    4558:	330c      	adds	r3, #12
    455a:	490e      	ldr	r1, [pc, #56]	; (4594 <_ZN8HCIClass4pollEm+0xcc>)
    455c:	0020      	movs	r0, r4
    455e:	f7ff feef 	bl	4340 <_ZN8HCIClass7dumpPktEPKchPh>
        int pktLen = _recvIndex - 1;
    4562:	68a3      	ldr	r3, [r4, #8]
        handleEventPkt(pktLen, &_recvBuffer[1]);
    4564:	0022      	movs	r2, r4
        int pktLen = _recvIndex - 1;
    4566:	1e59      	subs	r1, r3, #1
        _recvIndex = 0;
    4568:	2300      	movs	r3, #0
        handleEventPkt(pktLen, &_recvBuffer[1]);
    456a:	b2c9      	uxtb	r1, r1
        _recvIndex = 0;
    456c:	60a3      	str	r3, [r4, #8]
        handleEventPkt(pktLen, &_recvBuffer[1]);
    456e:	320d      	adds	r2, #13
    4570:	0020      	movs	r0, r4
    4572:	f000 f95d 	bl	4830 <_ZN8HCIClass14handleEventPktEhPh>
    4576:	e7b0      	b.n	44da <_ZN8HCIClass4pollEm+0x12>
      _recvIndex = 0;
    4578:	2300      	movs	r3, #0
      if (_debug) {
    457a:	6860      	ldr	r0, [r4, #4]
      _recvIndex = 0;
    457c:	60a3      	str	r3, [r4, #8]
      if (_debug) {
    457e:	4298      	cmp	r0, r3
    4580:	d0ab      	beq.n	44da <_ZN8HCIClass4pollEm+0x12>
        _debug->println(b, HEX);
    4582:	2210      	movs	r2, #16
    4584:	f000 ff4d 	bl	5422 <_ZN5Print7printlnEhi>
    4588:	e7a7      	b.n	44da <_ZN8HCIClass4pollEm+0x12>
}
    458a:	bd70      	pop	{r4, r5, r6, pc}
    458c:	0000b75c 	.word	0x0000b75c
    4590:	0000b726 	.word	0x0000b726
    4594:	0000b739 	.word	0x0000b739

00004598 <_ZN8HCIClass4pollEv>:
{
    4598:	b510      	push	{r4, lr}
  poll(0);
    459a:	2100      	movs	r1, #0
    459c:	f7ff ff94 	bl	44c8 <_ZN8HCIClass4pollEm>
}
    45a0:	bd10      	pop	{r4, pc}
	...

000045a4 <_ZN8HCIClass11sendCommandEthPv>:
{
    45a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    45a6:	0004      	movs	r4, r0
  uint8_t txBuffer[sizeof(pktHdr) + plen];
    45a8:	0010      	movs	r0, r2
{
    45aa:	000d      	movs	r5, r1
  uint8_t txBuffer[sizeof(pktHdr) + plen];
    45ac:	4669      	mov	r1, sp
    45ae:	300b      	adds	r0, #11
    45b0:	08c0      	lsrs	r0, r0, #3
    45b2:	00c0      	lsls	r0, r0, #3
    45b4:	1a09      	subs	r1, r1, r0
{
    45b6:	af00      	add	r7, sp, #0
  uint8_t txBuffer[sizeof(pktHdr) + plen];
    45b8:	468d      	mov	sp, r1
    45ba:	6079      	str	r1, [r7, #4]
  memcpy(txBuffer, &pktHdr, sizeof(pktHdr));
    45bc:	4668      	mov	r0, sp
    45be:	2101      	movs	r1, #1
    45c0:	7001      	strb	r1, [r0, #0]
    45c2:	4669      	mov	r1, sp
    45c4:	7045      	strb	r5, [r0, #1]
    45c6:	0a28      	lsrs	r0, r5, #8
    45c8:	7088      	strb	r0, [r1, #2]
    45ca:	4669      	mov	r1, sp
  memcpy(&txBuffer[sizeof(pktHdr)], parameters, plen);
    45cc:	a801      	add	r0, sp, #4
  memcpy(txBuffer, &pktHdr, sizeof(pktHdr));
    45ce:	70ca      	strb	r2, [r1, #3]
  memcpy(&txBuffer[sizeof(pktHdr)], parameters, plen);
    45d0:	0019      	movs	r1, r3
  uint8_t txBuffer[sizeof(pktHdr) + plen];
    45d2:	1d16      	adds	r6, r2, #4
  memcpy(&txBuffer[sizeof(pktHdr)], parameters, plen);
    45d4:	f004 fe3d 	bl	9252 <memcpy>
  if (_debug) {
    45d8:	6863      	ldr	r3, [r4, #4]
    45da:	2b00      	cmp	r3, #0
    45dc:	d005      	beq.n	45ea <_ZN8HCIClass11sendCommandEthPv+0x46>
    dumpPkt("HCI COMMAND TX -> ", sizeof(pktHdr) + plen, txBuffer);
    45de:	b2f2      	uxtb	r2, r6
    45e0:	466b      	mov	r3, sp
    45e2:	4915      	ldr	r1, [pc, #84]	; (4638 <_ZN8HCIClass11sendCommandEthPv+0x94>)
    45e4:	0020      	movs	r0, r4
    45e6:	f7ff feab 	bl	4340 <_ZN8HCIClass7dumpPktEPKchPh>
  HCITransport.write(txBuffer, sizeof(pktHdr) + plen);
    45ea:	4b14      	ldr	r3, [pc, #80]	; (463c <_ZN8HCIClass11sendCommandEthPv+0x98>)
    45ec:	0032      	movs	r2, r6
    45ee:	6818      	ldr	r0, [r3, #0]
    45f0:	6879      	ldr	r1, [r7, #4]
    45f2:	6803      	ldr	r3, [r0, #0]
  _cmdCompleteStatus = -1;
    45f4:	0026      	movs	r6, r4
  HCITransport.write(txBuffer, sizeof(pktHdr) + plen);
    45f6:	699b      	ldr	r3, [r3, #24]
    45f8:	4798      	blx	r3
  _cmdCompleteOpcode = 0xffff;
    45fa:	0023      	movs	r3, r4
    45fc:	33fe      	adds	r3, #254	; 0xfe
    45fe:	607b      	str	r3, [r7, #4]
    4600:	2301      	movs	r3, #1
    4602:	687a      	ldr	r2, [r7, #4]
    4604:	425b      	negs	r3, r3
  _cmdCompleteStatus = -1;
    4606:	36fc      	adds	r6, #252	; 0xfc
  _cmdCompleteOpcode = 0xffff;
    4608:	8213      	strh	r3, [r2, #16]
  _cmdCompleteStatus = -1;
    460a:	6173      	str	r3, [r6, #20]
  for (unsigned long start = millis(); _cmdCompleteOpcode != opcode && millis() < (start + 1000);) {
    460c:	f000 fe00 	bl	5210 <millis>
    4610:	6038      	str	r0, [r7, #0]
    4612:	687b      	ldr	r3, [r7, #4]
    4614:	8a1b      	ldrh	r3, [r3, #16]
    4616:	42ab      	cmp	r3, r5
    4618:	d00b      	beq.n	4632 <_ZN8HCIClass11sendCommandEthPv+0x8e>
    461a:	f000 fdf9 	bl	5210 <millis>
    461e:	22fa      	movs	r2, #250	; 0xfa
    4620:	683b      	ldr	r3, [r7, #0]
    4622:	0092      	lsls	r2, r2, #2
    4624:	189b      	adds	r3, r3, r2
    4626:	4298      	cmp	r0, r3
    4628:	d203      	bcs.n	4632 <_ZN8HCIClass11sendCommandEthPv+0x8e>
    poll();
    462a:	0020      	movs	r0, r4
    462c:	f7ff ffb4 	bl	4598 <_ZN8HCIClass4pollEv>
  for (unsigned long start = millis(); _cmdCompleteOpcode != opcode && millis() < (start + 1000);) {
    4630:	e7ef      	b.n	4612 <_ZN8HCIClass11sendCommandEthPv+0x6e>
}
    4632:	46bd      	mov	sp, r7
  return _cmdCompleteStatus;
    4634:	6970      	ldr	r0, [r6, #20]
}
    4636:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    4638:	0000b713 	.word	0x0000b713
    463c:	0000b75c 	.word	0x0000b75c

00004640 <_ZN8HCIClass5resetEv>:
  return sendCommand(OGF_HOST_CTL << 10 | OCF_RESET);
    4640:	2300      	movs	r3, #0
{
    4642:	b510      	push	{r4, lr}
  return sendCommand(OGF_HOST_CTL << 10 | OCF_RESET);
    4644:	001a      	movs	r2, r3
    4646:	4902      	ldr	r1, [pc, #8]	; (4650 <_ZN8HCIClass5resetEv+0x10>)
    4648:	f7ff ffac 	bl	45a4 <_ZN8HCIClass11sendCommandEthPv>
}
    464c:	bd10      	pop	{r4, pc}
    464e:	46c0      	nop			; (mov r8, r8)
    4650:	00000c03 	.word	0x00000c03

00004654 <_ZN8HCIClass16readLocalVersionERhRtS0_S1_S1_>:
{
    4654:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4656:	001c      	movs	r4, r3
  int result = sendCommand(OGF_INFO_PARAM << 10 | OCF_READ_LOCAL_VERSION);
    4658:	2300      	movs	r3, #0
{
    465a:	000e      	movs	r6, r1
    465c:	0015      	movs	r5, r2
  int result = sendCommand(OGF_INFO_PARAM << 10 | OCF_READ_LOCAL_VERSION);
    465e:	490f      	ldr	r1, [pc, #60]	; (469c <_ZN8HCIClass16readLocalVersionERhRtS0_S1_S1_+0x48>)
    4660:	001a      	movs	r2, r3
{
    4662:	0007      	movs	r7, r0
  int result = sendCommand(OGF_INFO_PARAM << 10 | OCF_READ_LOCAL_VERSION);
    4664:	f7ff ff9e 	bl	45a4 <_ZN8HCIClass11sendCommandEthPv>
  if (result == 0) {
    4668:	2800      	cmp	r0, #0
    466a:	d116      	bne.n	469a <_ZN8HCIClass16readLocalVersionERhRtS0_S1_S1_+0x46>
    } *localVersion = (HCILocalVersion*)_cmdResponse;
    466c:	37fc      	adds	r7, #252	; 0xfc
    466e:	69fb      	ldr	r3, [r7, #28]
    hciVer = localVersion->hciVer;
    4670:	781a      	ldrb	r2, [r3, #0]
    4672:	7032      	strb	r2, [r6, #0]
    hciRev = localVersion->hciRev;
    4674:	789a      	ldrb	r2, [r3, #2]
    4676:	7859      	ldrb	r1, [r3, #1]
    4678:	0212      	lsls	r2, r2, #8
    467a:	430a      	orrs	r2, r1
    467c:	802a      	strh	r2, [r5, #0]
    lmpVer = localVersion->lmpVer;
    467e:	78da      	ldrb	r2, [r3, #3]
    4680:	7022      	strb	r2, [r4, #0]
    manufacturer = localVersion->manufacturer;
    4682:	795a      	ldrb	r2, [r3, #5]
    4684:	7919      	ldrb	r1, [r3, #4]
    4686:	0212      	lsls	r2, r2, #8
    4688:	430a      	orrs	r2, r1
    468a:	9906      	ldr	r1, [sp, #24]
    468c:	800a      	strh	r2, [r1, #0]
    lmpSubVer = localVersion->lmpSubVer;
    468e:	799a      	ldrb	r2, [r3, #6]
    4690:	79db      	ldrb	r3, [r3, #7]
    4692:	021b      	lsls	r3, r3, #8
    4694:	4313      	orrs	r3, r2
    4696:	9a07      	ldr	r2, [sp, #28]
    4698:	8013      	strh	r3, [r2, #0]
}
    469a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    469c:	00001001 	.word	0x00001001

000046a0 <_ZN8HCIClass10readBdAddrEPh>:
  int result = sendCommand(OGF_INFO_PARAM << 10 | OCF_READ_BD_ADDR);
    46a0:	2300      	movs	r3, #0
{
    46a2:	b570      	push	{r4, r5, r6, lr}
  int result = sendCommand(OGF_INFO_PARAM << 10 | OCF_READ_BD_ADDR);
    46a4:	001a      	movs	r2, r3
{
    46a6:	000e      	movs	r6, r1
  int result = sendCommand(OGF_INFO_PARAM << 10 | OCF_READ_BD_ADDR);
    46a8:	4906      	ldr	r1, [pc, #24]	; (46c4 <_ZN8HCIClass10readBdAddrEPh+0x24>)
{
    46aa:	0004      	movs	r4, r0
  int result = sendCommand(OGF_INFO_PARAM << 10 | OCF_READ_BD_ADDR);
    46ac:	f7ff ff7a 	bl	45a4 <_ZN8HCIClass11sendCommandEthPv>
    46b0:	1e05      	subs	r5, r0, #0
  if (result == 0) {
    46b2:	d105      	bne.n	46c0 <_ZN8HCIClass10readBdAddrEPh+0x20>
    memcpy(addr, _cmdResponse, 6);
    46b4:	34fc      	adds	r4, #252	; 0xfc
    46b6:	69e1      	ldr	r1, [r4, #28]
    46b8:	2206      	movs	r2, #6
    46ba:	0030      	movs	r0, r6
    46bc:	f004 fdc9 	bl	9252 <memcpy>
}
    46c0:	0028      	movs	r0, r5
    46c2:	bd70      	pop	{r4, r5, r6, pc}
    46c4:	00001009 	.word	0x00001009

000046c8 <_ZN8HCIClass8readRssiEt>:
{
    46c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
    46ca:	466b      	mov	r3, sp
    46cc:	1d9d      	adds	r5, r3, #6
    46ce:	80d9      	strh	r1, [r3, #6]
  int result = sendCommand(OGF_STATUS_PARAM << 10 | OCF_READ_RSSI, sizeof(handle), &handle);
    46d0:	2202      	movs	r2, #2
    46d2:	490a      	ldr	r1, [pc, #40]	; (46fc <_ZN8HCIClass8readRssiEt+0x34>)
    46d4:	002b      	movs	r3, r5
{
    46d6:	0004      	movs	r4, r0
  int result = sendCommand(OGF_STATUS_PARAM << 10 | OCF_READ_RSSI, sizeof(handle), &handle);
    46d8:	f7ff ff64 	bl	45a4 <_ZN8HCIClass11sendCommandEthPv>
  int rssi = 127;
    46dc:	217f      	movs	r1, #127	; 0x7f
  if (result == 0) {
    46de:	2800      	cmp	r0, #0
    46e0:	d10a      	bne.n	46f8 <_ZN8HCIClass8readRssiEt+0x30>
    } *readRssi = (HCIReadRssi*)_cmdResponse;
    46e2:	34fc      	adds	r4, #252	; 0xfc
    46e4:	69e2      	ldr	r2, [r4, #28]
    if (readRssi->handle == handle) {
    46e6:	8828      	ldrh	r0, [r5, #0]
    46e8:	7853      	ldrb	r3, [r2, #1]
    46ea:	7814      	ldrb	r4, [r2, #0]
    46ec:	021b      	lsls	r3, r3, #8
    46ee:	4323      	orrs	r3, r4
    46f0:	4298      	cmp	r0, r3
    46f2:	d101      	bne.n	46f8 <_ZN8HCIClass8readRssiEt+0x30>
      rssi = readRssi->rssi;
    46f4:	2102      	movs	r1, #2
    46f6:	5651      	ldrsb	r1, [r2, r1]
}
    46f8:	0008      	movs	r0, r1
    46fa:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    46fc:	00001405 	.word	0x00001405

00004700 <_ZN8HCIClass12setEventMaskEy>:
{
    4700:	b507      	push	{r0, r1, r2, lr}
  return sendCommand(OGF_HOST_CTL << 10 | OCF_SET_EVENT_MASK, sizeof(eventMask), &eventMask);
    4702:	4904      	ldr	r1, [pc, #16]	; (4714 <_ZN8HCIClass12setEventMaskEy+0x14>)
{
    4704:	9200      	str	r2, [sp, #0]
    4706:	9301      	str	r3, [sp, #4]
  return sendCommand(OGF_HOST_CTL << 10 | OCF_SET_EVENT_MASK, sizeof(eventMask), &eventMask);
    4708:	466b      	mov	r3, sp
    470a:	2208      	movs	r2, #8
    470c:	f7ff ff4a 	bl	45a4 <_ZN8HCIClass11sendCommandEthPv>
}
    4710:	bd0e      	pop	{r1, r2, r3, pc}
    4712:	46c0      	nop			; (mov r8, r8)
    4714:	00000c01 	.word	0x00000c01

00004718 <_ZN8HCIClass16readLeBufferSizeERtRh>:
{
    4718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  int result = sendCommand(OGF_LE_CTL << 10 | OCF_LE_READ_BUFFER_SIZE);
    471a:	2300      	movs	r3, #0
{
    471c:	000e      	movs	r6, r1
    471e:	0017      	movs	r7, r2
  int result = sendCommand(OGF_LE_CTL << 10 | OCF_LE_READ_BUFFER_SIZE);
    4720:	490d      	ldr	r1, [pc, #52]	; (4758 <_ZN8HCIClass16readLeBufferSizeERtRh+0x40>)
    4722:	001a      	movs	r2, r3
{
    4724:	0005      	movs	r5, r0
  int result = sendCommand(OGF_LE_CTL << 10 | OCF_LE_READ_BUFFER_SIZE);
    4726:	f7ff ff3d 	bl	45a4 <_ZN8HCIClass11sendCommandEthPv>
    472a:	1e04      	subs	r4, r0, #0
  if (result == 0) {
    472c:	d111      	bne.n	4752 <_ZN8HCIClass16readLeBufferSizeERtRh+0x3a>
    } *leBufferSize = (HCILeBufferSize*)_cmdResponse;
    472e:	002b      	movs	r3, r5
    4730:	33fc      	adds	r3, #252	; 0xfc
    4732:	69da      	ldr	r2, [r3, #28]
    _maxPkt = maxPkt = leBufferSize->maxPkt;
    4734:	35ff      	adds	r5, #255	; 0xff
    pktLen = leBufferSize->pktLen;
    4736:	7853      	ldrb	r3, [r2, #1]
    4738:	7811      	ldrb	r1, [r2, #0]
    473a:	021b      	lsls	r3, r3, #8
    473c:	430b      	orrs	r3, r1
    473e:	8033      	strh	r3, [r6, #0]
    _maxPkt = maxPkt = leBufferSize->maxPkt;
    4740:	7893      	ldrb	r3, [r2, #2]
    ATT.setMaxMtu(pktLen - 9); // max pkt len - ACL header size
    4742:	4806      	ldr	r0, [pc, #24]	; (475c <_ZN8HCIClass16readLeBufferSizeERtRh+0x44>)
    _maxPkt = maxPkt = leBufferSize->maxPkt;
    4744:	703b      	strb	r3, [r7, #0]
    4746:	776b      	strb	r3, [r5, #29]
    ATT.setMaxMtu(pktLen - 9); // max pkt len - ACL header size
    4748:	8831      	ldrh	r1, [r6, #0]
    474a:	3909      	subs	r1, #9
    474c:	b289      	uxth	r1, r1
    474e:	f7fe fb79 	bl	2e44 <_ZN8ATTClass9setMaxMtuEt>
}
    4752:	0020      	movs	r0, r4
    4754:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4756:	46c0      	nop			; (mov r8, r8)
    4758:	00002002 	.word	0x00002002
    475c:	200002c8 	.word	0x200002c8

00004760 <_ZN8HCIClass26leSetAdvertisingParametersEtthhhPhhh>:
{
    4760:	b5f0      	push	{r4, r5, r6, r7, lr}
    4762:	b085      	sub	sp, #20
    4764:	469c      	mov	ip, r3
  leAdvertisingParamters.minInterval = minInterval;
    4766:	466b      	mov	r3, sp
  leAdvertisingParamters.maxInterval = maxInterval;
    4768:	805a      	strh	r2, [r3, #2]
  leAdvertisingParamters.advType = advType;
    476a:	4662      	mov	r2, ip
{
    476c:	0004      	movs	r4, r0
    476e:	a80a      	add	r0, sp, #40	; 0x28
    4770:	7807      	ldrb	r7, [r0, #0]
    4772:	a80b      	add	r0, sp, #44	; 0x2c
    4774:	7800      	ldrb	r0, [r0, #0]
    4776:	ad0d      	add	r5, sp, #52	; 0x34
    4778:	782e      	ldrb	r6, [r5, #0]
  leAdvertisingParamters.minInterval = minInterval;
    477a:	8019      	strh	r1, [r3, #0]
  leAdvertisingParamters.advType = advType;
    477c:	711a      	strb	r2, [r3, #4]
  leAdvertisingParamters.directBdaddrType = directBdaddrType;
    477e:	7198      	strb	r0, [r3, #6]
  memcpy(leAdvertisingParamters.directBdaddr, directBdaddr, 6);
    4780:	990c      	ldr	r1, [sp, #48]	; 0x30
{
    4782:	ad0e      	add	r5, sp, #56	; 0x38
  memcpy(leAdvertisingParamters.directBdaddr, directBdaddr, 6);
    4784:	2206      	movs	r2, #6
    4786:	1dd8      	adds	r0, r3, #7
{
    4788:	782d      	ldrb	r5, [r5, #0]
  leAdvertisingParamters.ownBdaddrType = ownBdaddrType;
    478a:	715f      	strb	r7, [r3, #5]
  memcpy(leAdvertisingParamters.directBdaddr, directBdaddr, 6);
    478c:	f004 fd61 	bl	9252 <memcpy>
  leAdvertisingParamters.chanMap = chanMap;
    4790:	466b      	mov	r3, sp
  return sendCommand(OGF_LE_CTL << 10 | OCF_LE_SET_ADVERTISING_PARAMETERS, sizeof(leAdvertisingParamters), &leAdvertisingParamters);
    4792:	220f      	movs	r2, #15
    4794:	4903      	ldr	r1, [pc, #12]	; (47a4 <_ZN8HCIClass26leSetAdvertisingParametersEtthhhPhhh+0x44>)
    4796:	0020      	movs	r0, r4
  leAdvertisingParamters.chanMap = chanMap;
    4798:	735e      	strb	r6, [r3, #13]
  leAdvertisingParamters.filter = filter;
    479a:	739d      	strb	r5, [r3, #14]
  return sendCommand(OGF_LE_CTL << 10 | OCF_LE_SET_ADVERTISING_PARAMETERS, sizeof(leAdvertisingParamters), &leAdvertisingParamters);
    479c:	f7ff ff02 	bl	45a4 <_ZN8HCIClass11sendCommandEthPv>
}
    47a0:	b005      	add	sp, #20
    47a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    47a4:	00002006 	.word	0x00002006

000047a8 <_ZN8HCIClass20leSetAdvertisingDataEhPh>:
{
    47a8:	b5f0      	push	{r4, r5, r6, r7, lr}
  memset(&leAdvertisingData, 0, sizeof(leAdvertisingData));
    47aa:	2420      	movs	r4, #32
{
    47ac:	b089      	sub	sp, #36	; 0x24
    47ae:	000d      	movs	r5, r1
    47b0:	0006      	movs	r6, r0
    47b2:	0017      	movs	r7, r2
  memset(&leAdvertisingData, 0, sizeof(leAdvertisingData));
    47b4:	2100      	movs	r1, #0
    47b6:	0022      	movs	r2, r4
    47b8:	4668      	mov	r0, sp
    47ba:	f004 fd65 	bl	9288 <memset>
  leAdvertisingData.length = length;
    47be:	466b      	mov	r3, sp
  memcpy(leAdvertisingData.data, data, length);
    47c0:	002a      	movs	r2, r5
    47c2:	0039      	movs	r1, r7
    47c4:	1c58      	adds	r0, r3, #1
  leAdvertisingData.length = length;
    47c6:	701d      	strb	r5, [r3, #0]
  memcpy(leAdvertisingData.data, data, length);
    47c8:	f004 fd43 	bl	9252 <memcpy>
  return sendCommand(OGF_LE_CTL << 10 | OCF_LE_SET_ADVERTISING_DATA, sizeof(leAdvertisingData), &leAdvertisingData);
    47cc:	466b      	mov	r3, sp
    47ce:	0022      	movs	r2, r4
    47d0:	4902      	ldr	r1, [pc, #8]	; (47dc <_ZN8HCIClass20leSetAdvertisingDataEhPh+0x34>)
    47d2:	0030      	movs	r0, r6
    47d4:	f7ff fee6 	bl	45a4 <_ZN8HCIClass11sendCommandEthPv>
}
    47d8:	b009      	add	sp, #36	; 0x24
    47da:	bdf0      	pop	{r4, r5, r6, r7, pc}
    47dc:	00002008 	.word	0x00002008

000047e0 <_ZN8HCIClass21leSetScanResponseDataEhPh>:
{
    47e0:	b5f0      	push	{r4, r5, r6, r7, lr}
  memset(&leScanResponseData, 0, sizeof(leScanResponseData));
    47e2:	2420      	movs	r4, #32
{
    47e4:	b089      	sub	sp, #36	; 0x24
    47e6:	000d      	movs	r5, r1
    47e8:	0006      	movs	r6, r0
    47ea:	0017      	movs	r7, r2
  memset(&leScanResponseData, 0, sizeof(leScanResponseData));
    47ec:	2100      	movs	r1, #0
    47ee:	0022      	movs	r2, r4
    47f0:	4668      	mov	r0, sp
    47f2:	f004 fd49 	bl	9288 <memset>
  leScanResponseData.length = length;
    47f6:	466b      	mov	r3, sp
  memcpy(leScanResponseData.data, data, length);
    47f8:	002a      	movs	r2, r5
    47fa:	0039      	movs	r1, r7
    47fc:	1c58      	adds	r0, r3, #1
  leScanResponseData.length = length;
    47fe:	701d      	strb	r5, [r3, #0]
  memcpy(leScanResponseData.data, data, length);
    4800:	f004 fd27 	bl	9252 <memcpy>
  return sendCommand(OGF_LE_CTL << 10 | OCF_LE_SET_SCAN_RESPONSE_DATA, sizeof(leScanResponseData), &leScanResponseData);
    4804:	466b      	mov	r3, sp
    4806:	0022      	movs	r2, r4
    4808:	4902      	ldr	r1, [pc, #8]	; (4814 <_ZN8HCIClass21leSetScanResponseDataEhPh+0x34>)
    480a:	0030      	movs	r0, r6
    480c:	f7ff feca 	bl	45a4 <_ZN8HCIClass11sendCommandEthPv>
}
    4810:	b009      	add	sp, #36	; 0x24
    4812:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4814:	00002009 	.word	0x00002009

00004818 <_ZN8HCIClass20leSetAdvertiseEnableEh>:
{
    4818:	b507      	push	{r0, r1, r2, lr}
    481a:	466b      	mov	r3, sp
    481c:	3307      	adds	r3, #7
    481e:	7019      	strb	r1, [r3, #0]
  return sendCommand(OGF_LE_CTL << 10 | OCF_LE_SET_ADVERTISE_ENABLE, sizeof(enable), &enable);
    4820:	2201      	movs	r2, #1
    4822:	4902      	ldr	r1, [pc, #8]	; (482c <_ZN8HCIClass20leSetAdvertiseEnableEh+0x14>)
    4824:	f7ff febe 	bl	45a4 <_ZN8HCIClass11sendCommandEthPv>
}
    4828:	bd0e      	pop	{r1, r2, r3, pc}
    482a:	46c0      	nop			; (mov r8, r8)
    482c:	0000200a 	.word	0x0000200a

00004830 <_ZN8HCIClass14handleEventPktEhPh>:
{
    4830:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (eventHdr->evt == EVT_DISCONN_COMPLETE) {
    4832:	7813      	ldrb	r3, [r2, #0]
{
    4834:	b087      	sub	sp, #28
    4836:	0004      	movs	r4, r0
  if (eventHdr->evt == EVT_DISCONN_COMPLETE) {
    4838:	2b05      	cmp	r3, #5
    483a:	d110      	bne.n	485e <_ZN8HCIClass14handleEventPktEhPh+0x2e>
    ATT.removeConnection(disconnComplete->handle, disconnComplete->reason);
    483c:	1c94      	adds	r4, r2, #2
    483e:	7861      	ldrb	r1, [r4, #1]
    4840:	7952      	ldrb	r2, [r2, #5]
    4842:	4839      	ldr	r0, [pc, #228]	; (4928 <_ZN8HCIClass14handleEventPktEhPh+0xf8>)
    4844:	f7fe fb1e 	bl	2e84 <_ZN8ATTClass16removeConnectionEht>
    L2CAPSignaling.removeConnection(disconnComplete->handle, disconnComplete->reason);
    4848:	7861      	ldrb	r1, [r4, #1]
    484a:	4838      	ldr	r0, [pc, #224]	; (492c <_ZN8HCIClass14handleEventPktEhPh+0xfc>)
    484c:	78e2      	ldrb	r2, [r4, #3]
    484e:	f000 f94d 	bl	4aec <_ZN19L2CAPSignalingClass16removeConnectionEht>
    HCI.leSetAdvertiseEnable(0x01);
    4852:	2101      	movs	r1, #1
    4854:	4836      	ldr	r0, [pc, #216]	; (4930 <_ZN8HCIClass14handleEventPktEhPh+0x100>)
    4856:	f7ff ffdf 	bl	4818 <_ZN8HCIClass20leSetAdvertiseEnableEh>
}
    485a:	b007      	add	sp, #28
    485c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  } else if (eventHdr->evt == EVT_CMD_COMPLETE) {
    485e:	2b0e      	cmp	r3, #14
    4860:	d110      	bne.n	4884 <_ZN8HCIClass14handleEventPktEhPh+0x54>
    _cmdCompleteOpcode = cmdCompleteHeader->opcode;
    4862:	7913      	ldrb	r3, [r2, #4]
    4864:	78d0      	ldrb	r0, [r2, #3]
    4866:	021b      	lsls	r3, r3, #8
    4868:	4303      	orrs	r3, r0
    486a:	0020      	movs	r0, r4
    486c:	30fe      	adds	r0, #254	; 0xfe
    486e:	8203      	strh	r3, [r0, #16]
    _cmdCompleteStatus = cmdCompleteHeader->status;
    4870:	7953      	ldrb	r3, [r2, #5]
    4872:	3802      	subs	r0, #2
    4874:	6143      	str	r3, [r0, #20]
    _cmdResponseLen = pdata[1] - sizeof(CmdComplete);
    4876:	7853      	ldrb	r3, [r2, #1]
    4878:	34ff      	adds	r4, #255	; 0xff
    487a:	3b04      	subs	r3, #4
    _cmdResponse = &pdata[sizeof(HCIEventHdr) + sizeof(CmdComplete)];
    487c:	3206      	adds	r2, #6
    _cmdResponseLen = pdata[1] - sizeof(CmdComplete);
    487e:	7563      	strb	r3, [r4, #21]
    _cmdResponse = &pdata[sizeof(HCIEventHdr) + sizeof(CmdComplete)];
    4880:	61c2      	str	r2, [r0, #28]
    4882:	e7ea      	b.n	485a <_ZN8HCIClass14handleEventPktEhPh+0x2a>
  } else if (eventHdr->evt == EVT_NUM_COMP_PKTS) {
    4884:	2b13      	cmp	r3, #19
    4886:	d10d      	bne.n	48a4 <_ZN8HCIClass14handleEventPktEhPh+0x74>
    for (uint8_t i = 0; i < numHandles; i++) {
    4888:	2500      	movs	r5, #0
    uint8_t numHandles = pdata[sizeof(HCIEventHdr)];
    488a:	7896      	ldrb	r6, [r2, #2]
    uint16_t* data = (uint16_t*)&pdata[sizeof(HCIEventHdr) + sizeof(numHandles)];
    488c:	1cd7      	adds	r7, r2, #3
    for (uint8_t i = 0; i < numHandles; i++) {
    488e:	42b5      	cmp	r5, r6
    4890:	dae3      	bge.n	485a <_ZN8HCIClass14handleEventPktEhPh+0x2a>
      handleNumCompPkts(data[0], data[1]);
    4892:	887a      	ldrh	r2, [r7, #2]
    4894:	8839      	ldrh	r1, [r7, #0]
    4896:	0020      	movs	r0, r4
    for (uint8_t i = 0; i < numHandles; i++) {
    4898:	3501      	adds	r5, #1
      handleNumCompPkts(data[0], data[1]);
    489a:	f7ff fd45 	bl	4328 <_ZN8HCIClass17handleNumCompPktsEtt>
      data += 2;
    489e:	3704      	adds	r7, #4
    for (uint8_t i = 0; i < numHandles; i++) {
    48a0:	b2ed      	uxtb	r5, r5
    48a2:	e7f4      	b.n	488e <_ZN8HCIClass14handleEventPktEhPh+0x5e>
  } else if (eventHdr->evt == EVT_LE_META_EVENT) {
    48a4:	2b3e      	cmp	r3, #62	; 0x3e
    48a6:	d1d8      	bne.n	485a <_ZN8HCIClass14handleEventPktEhPh+0x2a>
    if (leMetaHeader->subevent == EVT_LE_CONN_COMPLETE) {
    48a8:	7893      	ldrb	r3, [r2, #2]
    48aa:	2b01      	cmp	r3, #1
    48ac:	d1d5      	bne.n	485a <_ZN8HCIClass14handleEventPktEhPh+0x2a>
      if (leConnectionComplete->status == 0x00) {
    48ae:	78d3      	ldrb	r3, [r2, #3]
    48b0:	1cd5      	adds	r5, r2, #3
    48b2:	2b00      	cmp	r3, #0
    48b4:	d1d1      	bne.n	485a <_ZN8HCIClass14handleEventPktEhPh+0x2a>
        ATT.addConnection(leConnectionComplete->handle,
    48b6:	3208      	adds	r2, #8
    48b8:	0014      	movs	r4, r2
    48ba:	78a9      	ldrb	r1, [r5, #2]
    48bc:	7868      	ldrb	r0, [r5, #1]
    48be:	0209      	lsls	r1, r1, #8
                          leConnectionComplete->masterClockAccuracy);
    48c0:	4301      	orrs	r1, r0
    48c2:	7c68      	ldrb	r0, [r5, #17]
    48c4:	792b      	ldrb	r3, [r5, #4]
    48c6:	78ea      	ldrb	r2, [r5, #3]
    48c8:	9004      	str	r0, [sp, #16]
        ATT.addConnection(leConnectionComplete->handle,
    48ca:	7c28      	ldrb	r0, [r5, #16]
    48cc:	7bee      	ldrb	r6, [r5, #15]
    48ce:	0200      	lsls	r0, r0, #8
                          leConnectionComplete->masterClockAccuracy);
    48d0:	4330      	orrs	r0, r6
    48d2:	9003      	str	r0, [sp, #12]
        ATT.addConnection(leConnectionComplete->handle,
    48d4:	7ba8      	ldrb	r0, [r5, #14]
    48d6:	7b6e      	ldrb	r6, [r5, #13]
    48d8:	0200      	lsls	r0, r0, #8
                          leConnectionComplete->masterClockAccuracy);
    48da:	4330      	orrs	r0, r6
    48dc:	9002      	str	r0, [sp, #8]
        ATT.addConnection(leConnectionComplete->handle,
    48de:	7b28      	ldrb	r0, [r5, #12]
    48e0:	7aee      	ldrb	r6, [r5, #11]
    48e2:	0200      	lsls	r0, r0, #8
                          leConnectionComplete->masterClockAccuracy);
    48e4:	4330      	orrs	r0, r6
    48e6:	9001      	str	r0, [sp, #4]
    48e8:	9400      	str	r4, [sp, #0]
    48ea:	480f      	ldr	r0, [pc, #60]	; (4928 <_ZN8HCIClass14handleEventPktEhPh+0xf8>)
    48ec:	f7fe faac 	bl	2e48 <_ZN8ATTClass13addConnectionEthhPhttth>
        L2CAPSignaling.addConnection(leConnectionComplete->handle,
    48f0:	78a9      	ldrb	r1, [r5, #2]
    48f2:	7868      	ldrb	r0, [r5, #1]
    48f4:	0209      	lsls	r1, r1, #8
                              leConnectionComplete->masterClockAccuracy);
    48f6:	4301      	orrs	r1, r0
    48f8:	7c68      	ldrb	r0, [r5, #17]
    48fa:	792b      	ldrb	r3, [r5, #4]
    48fc:	78ea      	ldrb	r2, [r5, #3]
    48fe:	9004      	str	r0, [sp, #16]
        L2CAPSignaling.addConnection(leConnectionComplete->handle,
    4900:	7c28      	ldrb	r0, [r5, #16]
    4902:	7bee      	ldrb	r6, [r5, #15]
    4904:	0200      	lsls	r0, r0, #8
                              leConnectionComplete->masterClockAccuracy);
    4906:	4330      	orrs	r0, r6
    4908:	9003      	str	r0, [sp, #12]
        L2CAPSignaling.addConnection(leConnectionComplete->handle,
    490a:	7ba8      	ldrb	r0, [r5, #14]
    490c:	7b6e      	ldrb	r6, [r5, #13]
    490e:	0200      	lsls	r0, r0, #8
                              leConnectionComplete->masterClockAccuracy);
    4910:	4330      	orrs	r0, r6
    4912:	9002      	str	r0, [sp, #8]
        L2CAPSignaling.addConnection(leConnectionComplete->handle,
    4914:	7b28      	ldrb	r0, [r5, #12]
    4916:	7aee      	ldrb	r6, [r5, #11]
    4918:	0200      	lsls	r0, r0, #8
                              leConnectionComplete->masterClockAccuracy);
    491a:	4330      	orrs	r0, r6
    491c:	9001      	str	r0, [sp, #4]
    491e:	9400      	str	r4, [sp, #0]
    4920:	4802      	ldr	r0, [pc, #8]	; (492c <_ZN8HCIClass14handleEventPktEhPh+0xfc>)
    4922:	f000 f8b7 	bl	4a94 <_ZN19L2CAPSignalingClass13addConnectionEthhPhttth>
}
    4926:	e798      	b.n	485a <_ZN8HCIClass14handleEventPktEhPh+0x2a>
    4928:	200002c8 	.word	0x200002c8
    492c:	200005ac 	.word	0x200005ac
    4930:	20000480 	.word	0x20000480

00004934 <_ZN8HCIClass12leConnUpdateEttttt>:
{
    4934:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  leConnUpdateData.handle = handle;
    4936:	466e      	mov	r6, sp
  leConnUpdateData.maxInterval = maxInterval;
    4938:	80b3      	strh	r3, [r6, #4]
  leConnUpdateData.minCeLength = 0x0004;
    493a:	2304      	movs	r3, #4
{
    493c:	ac08      	add	r4, sp, #32
    493e:	8825      	ldrh	r5, [r4, #0]
    4940:	ac09      	add	r4, sp, #36	; 0x24
    4942:	8824      	ldrh	r4, [r4, #0]
  leConnUpdateData.minCeLength = 0x0004;
    4944:	8173      	strh	r3, [r6, #10]
  leConnUpdateData.maxCeLength = 0x0006;
    4946:	3302      	adds	r3, #2
  leConnUpdateData.handle = handle;
    4948:	8031      	strh	r1, [r6, #0]
  leConnUpdateData.minInterval = minInterval;
    494a:	8072      	strh	r2, [r6, #2]
  leConnUpdateData.maxCeLength = 0x0006;
    494c:	81b3      	strh	r3, [r6, #12]
  return sendCommand(OGF_LE_CTL << 10 | OCF_LE_CONN_UPDATE, sizeof(leConnUpdateData), &leConnUpdateData);
    494e:	220e      	movs	r2, #14
    4950:	466b      	mov	r3, sp
    4952:	4903      	ldr	r1, [pc, #12]	; (4960 <_ZN8HCIClass12leConnUpdateEttttt+0x2c>)
  leConnUpdateData.latency = latency;
    4954:	80f5      	strh	r5, [r6, #6]
  leConnUpdateData.supervisionTimeout = supervisionTimeout;
    4956:	8134      	strh	r4, [r6, #8]
  return sendCommand(OGF_LE_CTL << 10 | OCF_LE_CONN_UPDATE, sizeof(leConnUpdateData), &leConnUpdateData);
    4958:	f7ff fe24 	bl	45a4 <_ZN8HCIClass11sendCommandEthPv>
}
    495c:	b004      	add	sp, #16
    495e:	bd70      	pop	{r4, r5, r6, pc}
    4960:	00002013 	.word	0x00002013

00004964 <_ZN8HCIClass10disconnectEt>:
{
    4964:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  } disconnectData = { handle, HCI_OE_USER_ENDED_CONNECTION };
    4966:	2503      	movs	r5, #3
    4968:	ac01      	add	r4, sp, #4
{
    496a:	0006      	movs	r6, r0
    496c:	000f      	movs	r7, r1
  } disconnectData = { handle, HCI_OE_USER_ENDED_CONNECTION };
    496e:	002a      	movs	r2, r5
    4970:	2100      	movs	r1, #0
    4972:	0020      	movs	r0, r4
    4974:	f004 fc88 	bl	9288 <memset>
    4978:	2313      	movs	r3, #19
  return sendCommand(OGF_LINK_CTL << 10 | OCF_DISCONNECT, sizeof(disconnectData), &disconnectData);
    497a:	002a      	movs	r2, r5
  } disconnectData = { handle, HCI_OE_USER_ENDED_CONNECTION };
    497c:	70a3      	strb	r3, [r4, #2]
  return sendCommand(OGF_LINK_CTL << 10 | OCF_DISCONNECT, sizeof(disconnectData), &disconnectData);
    497e:	0030      	movs	r0, r6
    4980:	0023      	movs	r3, r4
    4982:	4902      	ldr	r1, [pc, #8]	; (498c <_ZN8HCIClass10disconnectEt+0x28>)
  } disconnectData = { handle, HCI_OE_USER_ENDED_CONNECTION };
    4984:	8027      	strh	r7, [r4, #0]
  return sendCommand(OGF_LINK_CTL << 10 | OCF_DISCONNECT, sizeof(disconnectData), &disconnectData);
    4986:	f7ff fe0d 	bl	45a4 <_ZN8HCIClass11sendCommandEthPv>
}
    498a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    498c:	00000406 	.word	0x00000406

00004990 <_GLOBAL__sub_I__ZN8HCIClassC2Ev>:
  _pendingPkt(0)
    4990:	4807      	ldr	r0, [pc, #28]	; (49b0 <_GLOBAL__sub_I__ZN8HCIClassC2Ev+0x20>)
    4992:	4b08      	ldr	r3, [pc, #32]	; (49b4 <_GLOBAL__sub_I__ZN8HCIClassC2Ev+0x24>)
    4994:	0002      	movs	r2, r0
    4996:	3308      	adds	r3, #8

HCIClass HCI;
    4998:	b510      	push	{r4, lr}
  _pendingPkt(0)
    499a:	6003      	str	r3, [r0, #0]
    499c:	2300      	movs	r3, #0
    499e:	32ff      	adds	r2, #255	; 0xff
    49a0:	7793      	strb	r3, [r2, #30]
HCIClass HCI;
    49a2:	4905      	ldr	r1, [pc, #20]	; (49b8 <_GLOBAL__sub_I__ZN8HCIClassC2Ev+0x28>)
    49a4:	4a05      	ldr	r2, [pc, #20]	; (49bc <_GLOBAL__sub_I__ZN8HCIClassC2Ev+0x2c>)
  _pendingPkt(0)
    49a6:	6043      	str	r3, [r0, #4]
    49a8:	6083      	str	r3, [r0, #8]
HCIClass HCI;
    49aa:	f002 fc9d 	bl	72e8 <__aeabi_atexit>
    49ae:	bd10      	pop	{r4, pc}
    49b0:	20000480 	.word	0x20000480
    49b4:	0000b74c 	.word	0x0000b74c
    49b8:	000042ef 	.word	0x000042ef
    49bc:	20000000 	.word	0x20000000

000049c0 <_ZN21HCIUartTransportClassD1Ev>:
{
}

HCIUartTransportClass::~HCIUartTransportClass()
{
}
    49c0:	4770      	bx	lr

000049c2 <_ZN21HCIUartTransportClass5beginEv>:

int HCIUartTransportClass::begin()
{
  _uart->begin(_baudrate);
    49c2:	6843      	ldr	r3, [r0, #4]
{
    49c4:	b510      	push	{r4, lr}
  _uart->begin(_baudrate);
    49c6:	681a      	ldr	r2, [r3, #0]
    49c8:	6881      	ldr	r1, [r0, #8]
    49ca:	69d2      	ldr	r2, [r2, #28]
    49cc:	0018      	movs	r0, r3
    49ce:	4790      	blx	r2

  return 1;
}
    49d0:	2001      	movs	r0, #1
    49d2:	bd10      	pop	{r4, pc}

000049d4 <_ZN21HCIUartTransportClass3endEv>:

void HCIUartTransportClass::end()
{
    49d4:	b510      	push	{r4, lr}
  _uart->end();
    49d6:	6840      	ldr	r0, [r0, #4]
    49d8:	6803      	ldr	r3, [r0, #0]
    49da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    49dc:	4798      	blx	r3
}
    49de:	bd10      	pop	{r4, pc}

000049e0 <_ZN21HCIUartTransportClass9availableEv>:
    }
  }
}

int HCIUartTransportClass::available()
{
    49e0:	b510      	push	{r4, lr}
  return _uart->available();
    49e2:	6840      	ldr	r0, [r0, #4]
    49e4:	6803      	ldr	r3, [r0, #0]
    49e6:	691b      	ldr	r3, [r3, #16]
    49e8:	4798      	blx	r3
}
    49ea:	bd10      	pop	{r4, pc}

000049ec <_ZN21HCIUartTransportClass4peekEv>:

int HCIUartTransportClass::peek()
{
    49ec:	b510      	push	{r4, lr}
  return _uart->peek();
    49ee:	6840      	ldr	r0, [r0, #4]
    49f0:	6803      	ldr	r3, [r0, #0]
    49f2:	699b      	ldr	r3, [r3, #24]
    49f4:	4798      	blx	r3
}
    49f6:	bd10      	pop	{r4, pc}

000049f8 <_ZN21HCIUartTransportClass4readEv>:

int HCIUartTransportClass::read()
{
    49f8:	b510      	push	{r4, lr}
  return _uart->read();
    49fa:	6840      	ldr	r0, [r0, #4]
    49fc:	6803      	ldr	r3, [r0, #0]
    49fe:	695b      	ldr	r3, [r3, #20]
    4a00:	4798      	blx	r3
}
    4a02:	bd10      	pop	{r4, pc}

00004a04 <_ZN21HCIUartTransportClass5writeEPKhj>:

size_t HCIUartTransportClass::write(const uint8_t* data, size_t length)
{
    4a04:	b570      	push	{r4, r5, r6, lr}
    4a06:	0004      	movs	r4, r0
#ifdef ARDUINO_AVR_UNO_WIFI_REV2
  // wait while the CTS pin is low
  while (digitalRead(NINA_CTS) == HIGH);
#endif

  size_t result = _uart->write(data, length);
    4a08:	6840      	ldr	r0, [r0, #4]
    4a0a:	6803      	ldr	r3, [r0, #0]
    4a0c:	685b      	ldr	r3, [r3, #4]
    4a0e:	4798      	blx	r3
    4a10:	0005      	movs	r5, r0

  _uart->flush();
    4a12:	6860      	ldr	r0, [r4, #4]
    4a14:	6803      	ldr	r3, [r0, #0]
    4a16:	68db      	ldr	r3, [r3, #12]
    4a18:	4798      	blx	r3

  return result;
}
    4a1a:	0028      	movs	r0, r5
    4a1c:	bd70      	pop	{r4, r5, r6, pc}

00004a1e <_ZN21HCIUartTransportClassD0Ev>:
HCIUartTransportClass::~HCIUartTransportClass()
    4a1e:	b510      	push	{r4, lr}
    4a20:	0004      	movs	r4, r0
}
    4a22:	f000 fc75 	bl	5310 <_ZdlPv>
    4a26:	0020      	movs	r0, r4
    4a28:	bd10      	pop	{r4, pc}

00004a2a <_ZN21HCIUartTransportClass4waitEm>:
{
    4a2a:	b570      	push	{r4, r5, r6, lr}
    4a2c:	0004      	movs	r4, r0
    4a2e:	000e      	movs	r6, r1
  for (unsigned long start = millis(); (millis() - start) < timeout;) {
    4a30:	f000 fbee 	bl	5210 <millis>
    4a34:	0005      	movs	r5, r0
    4a36:	f000 fbeb 	bl	5210 <millis>
    4a3a:	1b40      	subs	r0, r0, r5
    4a3c:	42b0      	cmp	r0, r6
    4a3e:	d205      	bcs.n	4a4c <_ZN21HCIUartTransportClass4waitEm+0x22>
    if (available()) {
    4a40:	6823      	ldr	r3, [r4, #0]
    4a42:	0020      	movs	r0, r4
    4a44:	68db      	ldr	r3, [r3, #12]
    4a46:	4798      	blx	r3
    4a48:	2800      	cmp	r0, #0
    4a4a:	d0f4      	beq.n	4a36 <_ZN21HCIUartTransportClass4waitEm+0xc>
}
    4a4c:	bd70      	pop	{r4, r5, r6, pc}
	...

00004a50 <_GLOBAL__sub_I__ZN21HCIUartTransportClassC2ER14HardwareSerialm>:
  _baudrate(baudrate)
    4a50:	4b06      	ldr	r3, [pc, #24]	; (4a6c <_GLOBAL__sub_I__ZN21HCIUartTransportClassC2ER14HardwareSerialm+0x1c>)
    4a52:	4807      	ldr	r0, [pc, #28]	; (4a70 <_GLOBAL__sub_I__ZN21HCIUartTransportClassC2ER14HardwareSerialm+0x20>)
#ifdef ARDUINO_AVR_UNO_WIFI_REV2
HCIUartTransportClass HCIUartTransport(SerialHCI, 119600);
#else
HCIUartTransportClass HCIUartTransport(SerialHCI, 912600);
#endif
HCITransportInterface& HCITransport = HCIUartTransport;
    4a54:	b510      	push	{r4, lr}
  _baudrate(baudrate)
    4a56:	3308      	adds	r3, #8
    4a58:	6003      	str	r3, [r0, #0]
    4a5a:	4b06      	ldr	r3, [pc, #24]	; (4a74 <_GLOBAL__sub_I__ZN21HCIUartTransportClassC2ER14HardwareSerialm+0x24>)
HCIUartTransportClass HCIUartTransport(SerialHCI, 912600);
    4a5c:	4a06      	ldr	r2, [pc, #24]	; (4a78 <_GLOBAL__sub_I__ZN21HCIUartTransportClassC2ER14HardwareSerialm+0x28>)
  _baudrate(baudrate)
    4a5e:	6043      	str	r3, [r0, #4]
    4a60:	4b06      	ldr	r3, [pc, #24]	; (4a7c <_GLOBAL__sub_I__ZN21HCIUartTransportClassC2ER14HardwareSerialm+0x2c>)
HCIUartTransportClass HCIUartTransport(SerialHCI, 912600);
    4a62:	4907      	ldr	r1, [pc, #28]	; (4a80 <_GLOBAL__sub_I__ZN21HCIUartTransportClassC2ER14HardwareSerialm+0x30>)
  _baudrate(baudrate)
    4a64:	6083      	str	r3, [r0, #8]
HCIUartTransportClass HCIUartTransport(SerialHCI, 912600);
    4a66:	f002 fc3f 	bl	72e8 <__aeabi_atexit>
HCITransportInterface& HCITransport = HCIUartTransport;
    4a6a:	bd10      	pop	{r4, pc}
    4a6c:	0000b760 	.word	0x0000b760
    4a70:	200005a0 	.word	0x200005a0
    4a74:	20000e04 	.word	0x20000e04
    4a78:	20000000 	.word	0x20000000
    4a7c:	000decd8 	.word	0x000decd8
    4a80:	000049c1 	.word	0x000049c1

00004a84 <_ZN19L2CAPSignalingClassD1Ev>:
{
}

L2CAPSignalingClass::~L2CAPSignalingClass()
{
}
    4a84:	4770      	bx	lr

00004a86 <_ZN19L2CAPSignalingClassD0Ev>:
L2CAPSignalingClass::~L2CAPSignalingClass()
    4a86:	b510      	push	{r4, lr}
    4a88:	0004      	movs	r4, r0
}
    4a8a:	f000 fc41 	bl	5310 <_ZdlPv>
    4a8e:	0020      	movs	r0, r4
    4a90:	bd10      	pop	{r4, pc}
	...

00004a94 <_ZN19L2CAPSignalingClass13addConnectionEthhPhttth>:

void L2CAPSignalingClass::addConnection(uint16_t handle, uint8_t role, uint8_t /*peerBdaddrType*/,
                                        uint8_t /*peerBdaddr*/[6], uint16_t interval,
                                        uint16_t /*latency*/, uint16_t /*supervisionTimeout*/,
                                        uint8_t /*masterClockAccuracy*/)
{
    4a94:	b5f0      	push	{r4, r5, r6, r7, lr}
    4a96:	b087      	sub	sp, #28
    4a98:	ab0d      	add	r3, sp, #52	; 0x34
    4a9a:	000f      	movs	r7, r1
    4a9c:	881b      	ldrh	r3, [r3, #0]
  if (role != 1) {
    4a9e:	2a01      	cmp	r2, #1
    4aa0:	d120      	bne.n	4ae4 <_ZN19L2CAPSignalingClass13addConnectionEthhPhttth+0x50>
    // ignore
    return;
  }

  if (!_minInterval || !_maxInterval) {
    4aa2:	8886      	ldrh	r6, [r0, #4]
    4aa4:	2e00      	cmp	r6, #0
    4aa6:	d01d      	beq.n	4ae4 <_ZN19L2CAPSignalingClass13addConnectionEthhPhttth+0x50>
    4aa8:	88c5      	ldrh	r5, [r0, #6]
    4aaa:	2d00      	cmp	r5, #0
    4aac:	d01a      	beq.n	4ae4 <_ZN19L2CAPSignalingClass13addConnectionEthhPhttth+0x50>
    // no connection intervale to request
    return;
  }

  if (interval >= _minInterval && interval <= _maxInterval) {
    4aae:	42b3      	cmp	r3, r6
    4ab0:	db01      	blt.n	4ab6 <_ZN19L2CAPSignalingClass13addConnectionEthhPhttth+0x22>
    4ab2:	42ab      	cmp	r3, r5
    4ab4:	dd16      	ble.n	4ae4 <_ZN19L2CAPSignalingClass13addConnectionEthhPhttth+0x50>
    uint16_t minInterval;
    uint16_t maxInterval;
    uint16_t latency;
    uint16_t supervisionTimeout;
  } request = { CONNECTION_PARAMETER_UPDATE_REQUEST, 0x01, 8,
                _minInterval, _maxInterval, 0x0000, 0x00c8 };
    4ab6:	ac03      	add	r4, sp, #12
    4ab8:	220c      	movs	r2, #12
    4aba:	2100      	movs	r1, #0
    4abc:	0020      	movs	r0, r4
    4abe:	f004 fbe3 	bl	9288 <memset>
    4ac2:	2312      	movs	r3, #18
    4ac4:	7023      	strb	r3, [r4, #0]
    4ac6:	3b11      	subs	r3, #17
    4ac8:	7063      	strb	r3, [r4, #1]
    4aca:	3307      	adds	r3, #7
    4acc:	8063      	strh	r3, [r4, #2]
    4ace:	33c0      	adds	r3, #192	; 0xc0
    4ad0:	8163      	strh	r3, [r4, #10]
    4ad2:	80a6      	strh	r6, [r4, #4]
    4ad4:	80e5      	strh	r5, [r4, #6]

  HCI.sendAclPkt(handle, SIGNALING_CID, sizeof(request), &request);
    4ad6:	3bbc      	subs	r3, #188	; 0xbc
    4ad8:	9400      	str	r4, [sp, #0]
    4ada:	2205      	movs	r2, #5
    4adc:	0039      	movs	r1, r7
    4ade:	4802      	ldr	r0, [pc, #8]	; (4ae8 <_ZN19L2CAPSignalingClass13addConnectionEthhPhttth+0x54>)
    4ae0:	f7ff fc54 	bl	438c <_ZN8HCIClass10sendAclPktEthhPv>
}
    4ae4:	b007      	add	sp, #28
    4ae6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4ae8:	20000480 	.word	0x20000480

00004aec <_ZN19L2CAPSignalingClass16removeConnectionEht>:
  }
}

void L2CAPSignalingClass::removeConnection(uint8_t /*handle*/, uint16_t /*reason*/)
{
}
    4aec:	4770      	bx	lr
	...

00004af0 <_ZN19L2CAPSignalingClass32connectionParameterUpdateRequestEthhPh>:
  _minInterval = minInterval;
  _maxInterval = maxInterval;
}

void L2CAPSignalingClass::connectionParameterUpdateRequest(uint16_t handle, uint8_t identifier, uint8_t dlen, uint8_t data[])
{
    4af0:	b5f0      	push	{r4, r5, r6, r7, lr}
    4af2:	b087      	sub	sp, #28
    4af4:	0007      	movs	r7, r0
    4af6:	000e      	movs	r6, r1
    4af8:	9203      	str	r2, [sp, #12]
    4afa:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    uint16_t maxInterval;
    uint16_t latency;
    uint16_t supervisionTimeout;
  } *request = (L2CAPConnectionParameterUpdateRequest*)data;

  if (dlen < sizeof(L2CAPConnectionParameterUpdateRequest)) {
    4afc:	2b07      	cmp	r3, #7
    4afe:	d941      	bls.n	4b84 <_ZN19L2CAPSignalingClass32connectionParameterUpdateRequestEthhPh+0x94>
  struct __attribute__ ((packed)) L2CAPConnectionParameterUpdateResponse {
    uint8_t code;
    uint8_t identifier;
    uint16_t length;
    uint16_t value;
  } response = { CONNECTION_PARAMETER_UPDATE_RESPONSE, identifier, 2, 0x0000 };
    4b00:	ad04      	add	r5, sp, #16
    4b02:	2100      	movs	r1, #0
    4b04:	2206      	movs	r2, #6
    4b06:	0028      	movs	r0, r5
    4b08:	f004 fbbe 	bl	9288 <memset>
    4b0c:	2313      	movs	r3, #19
    4b0e:	702b      	strb	r3, [r5, #0]
    4b10:	3b11      	subs	r3, #17
    4b12:	806b      	strh	r3, [r5, #2]
    4b14:	466b      	mov	r3, sp
    4b16:	7b1b      	ldrb	r3, [r3, #12]
    4b18:	706b      	strb	r3, [r5, #1]

  if (_minInterval && _maxInterval) {
    4b1a:	88b9      	ldrh	r1, [r7, #4]
    4b1c:	2900      	cmp	r1, #0
    4b1e:	d010      	beq.n	4b42 <_ZN19L2CAPSignalingClass32connectionParameterUpdateRequestEthhPh+0x52>
    4b20:	88fa      	ldrh	r2, [r7, #6]
    4b22:	2a00      	cmp	r2, #0
    4b24:	d00d      	beq.n	4b42 <_ZN19L2CAPSignalingClass32connectionParameterUpdateRequestEthhPh+0x52>
    if (request->minInterval < _minInterval || request->maxInterval > _maxInterval) {
    4b26:	7863      	ldrb	r3, [r4, #1]
    4b28:	7820      	ldrb	r0, [r4, #0]
    4b2a:	021b      	lsls	r3, r3, #8
    4b2c:	4303      	orrs	r3, r0
    4b2e:	428b      	cmp	r3, r1
    4b30:	db05      	blt.n	4b3e <_ZN19L2CAPSignalingClass32connectionParameterUpdateRequestEthhPh+0x4e>
    4b32:	78e3      	ldrb	r3, [r4, #3]
    4b34:	78a1      	ldrb	r1, [r4, #2]
    4b36:	021b      	lsls	r3, r3, #8
    4b38:	430b      	orrs	r3, r1
    4b3a:	4293      	cmp	r3, r2
    4b3c:	dd01      	ble.n	4b42 <_ZN19L2CAPSignalingClass32connectionParameterUpdateRequestEthhPh+0x52>
      response.value = 0x0001; // reject
    4b3e:	2301      	movs	r3, #1
    4b40:	80ab      	strh	r3, [r5, #4]
    }
  }

  HCI.sendAclPkt(handle, SIGNALING_CID, sizeof(response), &response);
    4b42:	4f11      	ldr	r7, [pc, #68]	; (4b88 <_ZN19L2CAPSignalingClass32connectionParameterUpdateRequestEthhPh+0x98>)
    4b44:	2306      	movs	r3, #6
    4b46:	9500      	str	r5, [sp, #0]
    4b48:	2205      	movs	r2, #5
    4b4a:	0031      	movs	r1, r6
    4b4c:	0038      	movs	r0, r7
    4b4e:	f7ff fc1d 	bl	438c <_ZN8HCIClass10sendAclPktEthhPv>

  if (response.value == 0x0000) {
    4b52:	88ab      	ldrh	r3, [r5, #4]
    4b54:	2b00      	cmp	r3, #0
    4b56:	d115      	bne.n	4b84 <_ZN19L2CAPSignalingClass32connectionParameterUpdateRequestEthhPh+0x94>
    HCI.leConnUpdate(handle, request->minInterval, request->maxInterval, request->latency, request->supervisionTimeout);
    4b58:	78e3      	ldrb	r3, [r4, #3]
    4b5a:	78a2      	ldrb	r2, [r4, #2]
    4b5c:	021b      	lsls	r3, r3, #8
    4b5e:	4313      	orrs	r3, r2
    4b60:	7862      	ldrb	r2, [r4, #1]
    4b62:	7821      	ldrb	r1, [r4, #0]
    4b64:	0212      	lsls	r2, r2, #8
    4b66:	430a      	orrs	r2, r1
    4b68:	79e1      	ldrb	r1, [r4, #7]
    4b6a:	79a0      	ldrb	r0, [r4, #6]
    4b6c:	0209      	lsls	r1, r1, #8
    4b6e:	4301      	orrs	r1, r0
    4b70:	9101      	str	r1, [sp, #4]
    4b72:	7961      	ldrb	r1, [r4, #5]
    4b74:	7920      	ldrb	r0, [r4, #4]
    4b76:	0209      	lsls	r1, r1, #8
    4b78:	4301      	orrs	r1, r0
    4b7a:	9100      	str	r1, [sp, #0]
    4b7c:	0038      	movs	r0, r7
    4b7e:	0031      	movs	r1, r6
    4b80:	f7ff fed8 	bl	4934 <_ZN8HCIClass12leConnUpdateEttttt>
  }
}
    4b84:	b007      	add	sp, #28
    4b86:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4b88:	20000480 	.word	0x20000480

00004b8c <_ZN19L2CAPSignalingClass10handleDataEthPh>:
{
    4b8c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if (dlen < sizeof(L2CAPSignalingHdr)) {
    4b8e:	2a03      	cmp	r2, #3
    4b90:	d910      	bls.n	4bb4 <_ZN19L2CAPSignalingClass10handleDataEthPh+0x28>
  if (dlen != (sizeof(L2CAPSignalingHdr) + l2capSignalingHdr->length)) {
    4b92:	78dc      	ldrb	r4, [r3, #3]
    4b94:	789d      	ldrb	r5, [r3, #2]
    4b96:	0224      	lsls	r4, r4, #8
    4b98:	432c      	orrs	r4, r5
    4b9a:	1d25      	adds	r5, r4, #4
    4b9c:	42aa      	cmp	r2, r5
    4b9e:	d109      	bne.n	4bb4 <_ZN19L2CAPSignalingClass10handleDataEthPh+0x28>
  if (code == CONNECTION_PARAMETER_UPDATE_REQUEST) {
    4ba0:	781a      	ldrb	r2, [r3, #0]
    4ba2:	2a12      	cmp	r2, #18
    4ba4:	d106      	bne.n	4bb4 <_ZN19L2CAPSignalingClass10handleDataEthPh+0x28>
    connectionParameterUpdateRequest(connectionHandle, identifier, length, data);
    4ba6:	785a      	ldrb	r2, [r3, #1]
    4ba8:	b2e4      	uxtb	r4, r4
  data = &data[sizeof(L2CAPSignalingHdr)];
    4baa:	3304      	adds	r3, #4
    connectionParameterUpdateRequest(connectionHandle, identifier, length, data);
    4bac:	9300      	str	r3, [sp, #0]
    4bae:	0023      	movs	r3, r4
    4bb0:	f7ff ff9e 	bl	4af0 <_ZN19L2CAPSignalingClass32connectionParameterUpdateRequestEthhPh>
}
    4bb4:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
	...

00004bb8 <_GLOBAL__sub_I__ZN19L2CAPSignalingClassC2Ev>:
  _maxInterval(0)
    4bb8:	4b06      	ldr	r3, [pc, #24]	; (4bd4 <_GLOBAL__sub_I__ZN19L2CAPSignalingClassC2Ev+0x1c>)
    4bba:	4807      	ldr	r0, [pc, #28]	; (4bd8 <_GLOBAL__sub_I__ZN19L2CAPSignalingClassC2Ev+0x20>)
    4bbc:	3308      	adds	r3, #8

void L2CAPSignalingClass::connectionParameterUpdateResponse(uint16_t /*handle*/, uint8_t /*identifier*/, uint8_t /*dlen*/, uint8_t /*data*/[])
{
}

L2CAPSignalingClass L2CAPSignaling;
    4bbe:	b510      	push	{r4, lr}
  _maxInterval(0)
    4bc0:	6003      	str	r3, [r0, #0]
    4bc2:	2300      	movs	r3, #0
L2CAPSignalingClass L2CAPSignaling;
    4bc4:	4a05      	ldr	r2, [pc, #20]	; (4bdc <_GLOBAL__sub_I__ZN19L2CAPSignalingClassC2Ev+0x24>)
    4bc6:	4906      	ldr	r1, [pc, #24]	; (4be0 <_GLOBAL__sub_I__ZN19L2CAPSignalingClassC2Ev+0x28>)
  _maxInterval(0)
    4bc8:	8083      	strh	r3, [r0, #4]
    4bca:	80c3      	strh	r3, [r0, #6]
L2CAPSignalingClass L2CAPSignaling;
    4bcc:	f002 fb8c 	bl	72e8 <__aeabi_atexit>
    4bd0:	bd10      	pop	{r4, pc}
    4bd2:	46c0      	nop			; (mov r8, r8)
    4bd4:	0000b78c 	.word	0x0000b78c
    4bd8:	200005ac 	.word	0x200005ac
    4bdc:	20000000 	.word	0x20000000
    4be0:	00004a85 	.word	0x00004a85

00004be4 <setup>:
#include "LedService.h"
#include "DIService.h"

void setup()
{
    Serial.begin(9600);
    4be4:	2196      	movs	r1, #150	; 0x96
{
    4be6:	b510      	push	{r4, lr}
    Serial.begin(9600);
    4be8:	4c0f      	ldr	r4, [pc, #60]	; (4c28 <setup+0x44>)
    4bea:	0189      	lsls	r1, r1, #6
    4bec:	0020      	movs	r0, r4
    4bee:	f000 fdaf 	bl	5750 <_ZN7Serial_5beginEm>
    while (!Serial);
    4bf2:	0020      	movs	r0, r4
    4bf4:	f000 fdae 	bl	5754 <_ZN7Serial_cvbEv>
    4bf8:	2800      	cmp	r0, #0
    4bfa:	d0fa      	beq.n	4bf2 <setup+0xe>

    if (!BLE.begin()) {
    4bfc:	480b      	ldr	r0, [pc, #44]	; (4c2c <setup+0x48>)
    4bfe:	f7fd ff6d 	bl	2adc <_ZN14BLELocalDevice5beginEv>
    4c02:	2800      	cmp	r0, #0
    4c04:	d104      	bne.n	4c10 <setup+0x2c>
        Serial.println("starting BLE failed!");
    4c06:	490a      	ldr	r1, [pc, #40]	; (4c30 <setup+0x4c>)
    4c08:	0020      	movs	r0, r4
    4c0a:	f000 fbc5 	bl	5398 <_ZN5Print7printlnEPKc>
    4c0e:	e7fe      	b.n	4c0e <setup+0x2a>
        while (1);
    }
    
    x_ledService.setup();
    4c10:	4808      	ldr	r0, [pc, #32]	; (4c34 <setup+0x50>)
    4c12:	f000 f94d 	bl	4eb0 <_ZN10LedService5setupEv>
    x_diService.setup();
    4c16:	4808      	ldr	r0, [pc, #32]	; (4c38 <setup+0x54>)
    4c18:	f000 f85a 	bl	4cd0 <_ZN9DIService5setupEv>
    
    Serial.println("waiting for BLE connection");
    4c1c:	4907      	ldr	r1, [pc, #28]	; (4c3c <setup+0x58>)
    4c1e:	0020      	movs	r0, r4
    4c20:	f000 fbba 	bl	5398 <_ZN5Print7printlnEPKc>
}
    4c24:	bd10      	pop	{r4, pc}
    4c26:	46c0      	nop			; (mov r8, r8)
    4c28:	200005f0 	.word	0x200005f0
    4c2c:	200002bc 	.word	0x200002bc
    4c30:	0000b7cf 	.word	0x0000b7cf
    4c34:	200005c4 	.word	0x200005c4
    4c38:	200005b4 	.word	0x200005b4
    4c3c:	0000b7e4 	.word	0x0000b7e4

00004c40 <loop>:

void loop()
{
    4c40:	b510      	push	{r4, lr}
    4c42:	b086      	sub	sp, #24
    BLEDevice central = BLE.central();
    4c44:	4668      	mov	r0, sp
    4c46:	491c      	ldr	r1, [pc, #112]	; (4cb8 <loop+0x78>)
    4c48:	f7fd ffca 	bl	2be0 <_ZN14BLELocalDevice7centralEv>
    if (central) {
    4c4c:	4668      	mov	r0, sp
    4c4e:	f7fd fb5b 	bl	2308 <_ZNK9BLEDevicecvbEv>
    4c52:	2800      	cmp	r0, #0
    4c54:	d02a      	beq.n	4cac <loop+0x6c>
        Serial.print("connected to central: ");
    4c56:	4c19      	ldr	r4, [pc, #100]	; (4cbc <loop+0x7c>)
    4c58:	4919      	ldr	r1, [pc, #100]	; (4cc0 <loop+0x80>)
    4c5a:	0020      	movs	r0, r4
    4c5c:	f000 fb85 	bl	536a <_ZN5Print5printEPKc>
        Serial.println(central.address());
    4c60:	4669      	mov	r1, sp
    4c62:	a803      	add	r0, sp, #12
    4c64:	f7fd fb28 	bl	22b8 <_ZNK9BLEDevice7addressEv>
    4c68:	a903      	add	r1, sp, #12
    4c6a:	0020      	movs	r0, r4
    4c6c:	f000 fb8a 	bl	5384 <_ZN5Print7printlnERK6String>
    4c70:	a803      	add	r0, sp, #12
    4c72:	f001 fe9f 	bl	69b4 <_ZN6StringD1Ev>
        
        while (central.connected())
    4c76:	4668      	mov	r0, sp
    4c78:	f7fd fb6e 	bl	2358 <_ZNK9BLEDevice9connectedEv>
    4c7c:	2800      	cmp	r0, #0
    4c7e:	d006      	beq.n	4c8e <loop+0x4e>
        {
            x_ledService.runService();
    4c80:	4810      	ldr	r0, [pc, #64]	; (4cc4 <loop+0x84>)
    4c82:	f000 f983 	bl	4f8c <_ZN10LedService10runServiceEv>
            x_diService.runService();
    4c86:	4810      	ldr	r0, [pc, #64]	; (4cc8 <loop+0x88>)
    4c88:	f000 f8ce 	bl	4e28 <_ZN9DIService10runServiceEv>
        while (central.connected())
    4c8c:	e7f3      	b.n	4c76 <loop+0x36>
        }
        
        Serial.print("disconnected from central: ");
    4c8e:	490f      	ldr	r1, [pc, #60]	; (4ccc <loop+0x8c>)
    4c90:	0020      	movs	r0, r4
    4c92:	f000 fb6a 	bl	536a <_ZN5Print5printEPKc>
        Serial.println(central.address());
    4c96:	4669      	mov	r1, sp
    4c98:	a803      	add	r0, sp, #12
    4c9a:	f7fd fb0d 	bl	22b8 <_ZNK9BLEDevice7addressEv>
    4c9e:	a903      	add	r1, sp, #12
    4ca0:	0020      	movs	r0, r4
    4ca2:	f000 fb6f 	bl	5384 <_ZN5Print7printlnERK6String>
    4ca6:	a803      	add	r0, sp, #12
    4ca8:	f001 fe84 	bl	69b4 <_ZN6StringD1Ev>
    BLEDevice central = BLE.central();
    4cac:	4668      	mov	r0, sp
    4cae:	f7fd fad9 	bl	2264 <_ZN9BLEDeviceD1Ev>
    }
}
    4cb2:	b006      	add	sp, #24
    4cb4:	bd10      	pop	{r4, pc}
    4cb6:	46c0      	nop			; (mov r8, r8)
    4cb8:	200002bc 	.word	0x200002bc
    4cbc:	200005f0 	.word	0x200005f0
    4cc0:	0000b79c 	.word	0x0000b79c
    4cc4:	200005c4 	.word	0x200005c4
    4cc8:	200005b4 	.word	0x200005b4
    4ccc:	0000b7b3 	.word	0x0000b7b3

00004cd0 <_ZN9DIService5setupEv>:
{
    end();
}

void DIService::setup()
{
    4cd0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    4cd2:	0004      	movs	r4, r0
    m_diService = new BLEService("180A");
    4cd4:	2008      	movs	r0, #8
    4cd6:	f000 fb17 	bl	5308 <_Znwj>
    4cda:	0005      	movs	r5, r0
    4cdc:	4931      	ldr	r1, [pc, #196]	; (4da4 <_ZN9DIService5setupEv+0xd4>)
    4cde:	f7fd fbb3 	bl	2448 <_ZN10BLEServiceC1EPKc>
    4ce2:	6025      	str	r5, [r4, #0]
    m_manufacturerNameCharateristic = new BLEStringCharacteristic("2A29", BLERead, 14);
    4ce4:	2008      	movs	r0, #8
    4ce6:	f000 fb0f 	bl	5308 <_Znwj>
    4cea:	0005      	movs	r5, r0
    4cec:	230e      	movs	r3, #14
    4cee:	2202      	movs	r2, #2
    4cf0:	492d      	ldr	r1, [pc, #180]	; (4da8 <_ZN9DIService5setupEv+0xd8>)
    4cf2:	f7fd fbe3 	bl	24bc <_ZN23BLEStringCharacteristicC1EPKchi>
    4cf6:	6065      	str	r5, [r4, #4]
    m_modelNumberCharacteristic = new BLEStringCharacteristic("2A24", BLERead, 5);
    4cf8:	2008      	movs	r0, #8
    4cfa:	f000 fb05 	bl	5308 <_Znwj>
    4cfe:	0005      	movs	r5, r0
    4d00:	2305      	movs	r3, #5
    4d02:	2202      	movs	r2, #2
    4d04:	4929      	ldr	r1, [pc, #164]	; (4dac <_ZN9DIService5setupEv+0xdc>)
    4d06:	f7fd fbd9 	bl	24bc <_ZN23BLEStringCharacteristicC1EPKchi>
    4d0a:	60a5      	str	r5, [r4, #8]
    m_SerialNumberCharacteristic = new BLEStringCharacteristic("2A25", BLERead, 9);
    4d0c:	2008      	movs	r0, #8
    4d0e:	f000 fafb 	bl	5308 <_Znwj>
    4d12:	0005      	movs	r5, r0
    4d14:	2309      	movs	r3, #9
    4d16:	2202      	movs	r2, #2
    4d18:	4925      	ldr	r1, [pc, #148]	; (4db0 <_ZN9DIService5setupEv+0xe0>)
    4d1a:	f7fd fbcf 	bl	24bc <_ZN23BLEStringCharacteristicC1EPKchi>
    4d1e:	60e5      	str	r5, [r4, #12]
    BLE.setLocalName("DeviceInformation");
    4d20:	4d24      	ldr	r5, [pc, #144]	; (4db4 <_ZN9DIService5setupEv+0xe4>)
    4d22:	4925      	ldr	r1, [pc, #148]	; (4db8 <_ZN9DIService5setupEv+0xe8>)
    4d24:	0028      	movs	r0, r5
    4d26:	f7fd ff43 	bl	2bb0 <_ZN14BLELocalDevice12setLocalNameEPKc>
    BLE.setAdvertisedService(*m_diService);
    4d2a:	0028      	movs	r0, r5
    4d2c:	6821      	ldr	r1, [r4, #0]
    4d2e:	f7fd ff33 	bl	2b98 <_ZN14BLELocalDevice20setAdvertisedServiceERK10BLEService>
    m_diService->addCharacteristic(*m_manufacturerNameCharateristic);
    4d32:	6861      	ldr	r1, [r4, #4]
    4d34:	6820      	ldr	r0, [r4, #0]
    4d36:	f7fd fba3 	bl	2480 <_ZN10BLEService17addCharacteristicER17BLECharacteristic>
    m_diService->addCharacteristic(*m_modelNumberCharacteristic);
    4d3a:	68a1      	ldr	r1, [r4, #8]
    4d3c:	6820      	ldr	r0, [r4, #0]
    4d3e:	f7fd fb9f 	bl	2480 <_ZN10BLEService17addCharacteristicER17BLECharacteristic>
    m_diService->addCharacteristic(*m_SerialNumberCharacteristic);
    4d42:	68e1      	ldr	r1, [r4, #12]
    4d44:	6820      	ldr	r0, [r4, #0]
    4d46:	f7fd fb9b 	bl	2480 <_ZN10BLEService17addCharacteristicER17BLECharacteristic>
    BLE.addService(*m_diService);
    4d4a:	0028      	movs	r0, r5
    4d4c:	6821      	ldr	r1, [r4, #0]
    4d4e:	f7fd ff37 	bl	2bc0 <_ZN14BLELocalDevice10addServiceER10BLEService>
    m_manufacturerNameCharateristic->writeValue("ReadDesignTech");
    4d52:	6866      	ldr	r6, [r4, #4]
    4d54:	4919      	ldr	r1, [pc, #100]	; (4dbc <_ZN9DIService5setupEv+0xec>)
    4d56:	a801      	add	r0, sp, #4
    4d58:	f001 fe74 	bl	6a44 <_ZN6StringC1EPKc>
    4d5c:	a901      	add	r1, sp, #4
    4d5e:	0030      	movs	r0, r6
    4d60:	f7fd fbba 	bl	24d8 <_ZN23BLEStringCharacteristic10writeValueERK6String>
    4d64:	a801      	add	r0, sp, #4
    4d66:	f001 fe25 	bl	69b4 <_ZN6StringD1Ev>
    m_modelNumberCharacteristic->writeValue("RDT-1");
    4d6a:	68a6      	ldr	r6, [r4, #8]
    4d6c:	4914      	ldr	r1, [pc, #80]	; (4dc0 <_ZN9DIService5setupEv+0xf0>)
    4d6e:	a801      	add	r0, sp, #4
    4d70:	f001 fe68 	bl	6a44 <_ZN6StringC1EPKc>
    4d74:	a901      	add	r1, sp, #4
    4d76:	0030      	movs	r0, r6
    4d78:	f7fd fbae 	bl	24d8 <_ZN23BLEStringCharacteristic10writeValueERK6String>
    4d7c:	a801      	add	r0, sp, #4
    4d7e:	f001 fe19 	bl	69b4 <_ZN6StringD1Ev>
    m_SerialNumberCharacteristic->writeValue("SN-000001");
    4d82:	68e4      	ldr	r4, [r4, #12]
    4d84:	490f      	ldr	r1, [pc, #60]	; (4dc4 <_ZN9DIService5setupEv+0xf4>)
    4d86:	a801      	add	r0, sp, #4
    4d88:	f001 fe5c 	bl	6a44 <_ZN6StringC1EPKc>
    4d8c:	a901      	add	r1, sp, #4
    4d8e:	0020      	movs	r0, r4
    4d90:	f7fd fba2 	bl	24d8 <_ZN23BLEStringCharacteristic10writeValueERK6String>
    4d94:	a801      	add	r0, sp, #4
    4d96:	f001 fe0d 	bl	69b4 <_ZN6StringD1Ev>
    BLE.advertise();
    4d9a:	0028      	movs	r0, r5
    4d9c:	f7fd ff18 	bl	2bd0 <_ZN14BLELocalDevice9advertiseEv>
}
    4da0:	bd7f      	pop	{r0, r1, r2, r3, r4, r5, r6, pc}
    4da2:	46c0      	nop			; (mov r8, r8)
    4da4:	0000b7ff 	.word	0x0000b7ff
    4da8:	0000b804 	.word	0x0000b804
    4dac:	0000b809 	.word	0x0000b809
    4db0:	0000b80e 	.word	0x0000b80e
    4db4:	200002bc 	.word	0x200002bc
    4db8:	0000b813 	.word	0x0000b813
    4dbc:	0000b825 	.word	0x0000b825
    4dc0:	0000b834 	.word	0x0000b834
    4dc4:	0000b83a 	.word	0x0000b83a

00004dc8 <_ZN9DIService3endEv>:
{
    BLE.poll();
}

void DIService::end()
{
    4dc8:	b510      	push	{r4, lr}
    4dca:	0004      	movs	r4, r0
    delete m_diService;
    4dcc:	6800      	ldr	r0, [r0, #0]
    4dce:	2800      	cmp	r0, #0
    4dd0:	d002      	beq.n	4dd8 <_ZN9DIService3endEv+0x10>
    4dd2:	6803      	ldr	r3, [r0, #0]
    4dd4:	685b      	ldr	r3, [r3, #4]
    4dd6:	4798      	blx	r3
    delete m_manufacturerNameCharateristic;
    4dd8:	6860      	ldr	r0, [r4, #4]
    4dda:	2800      	cmp	r0, #0
    4ddc:	d002      	beq.n	4de4 <_ZN9DIService3endEv+0x1c>
    4dde:	6803      	ldr	r3, [r0, #0]
    4de0:	685b      	ldr	r3, [r3, #4]
    4de2:	4798      	blx	r3
    delete m_modelNumberCharacteristic;
    4de4:	68a0      	ldr	r0, [r4, #8]
    4de6:	2800      	cmp	r0, #0
    4de8:	d002      	beq.n	4df0 <_ZN9DIService3endEv+0x28>
    4dea:	6803      	ldr	r3, [r0, #0]
    4dec:	685b      	ldr	r3, [r3, #4]
    4dee:	4798      	blx	r3
    delete m_SerialNumberCharacteristic;
    4df0:	68e0      	ldr	r0, [r4, #12]
    4df2:	2800      	cmp	r0, #0
    4df4:	d002      	beq.n	4dfc <_ZN9DIService3endEv+0x34>
    4df6:	6803      	ldr	r3, [r0, #0]
    4df8:	685b      	ldr	r3, [r3, #4]
    4dfa:	4798      	blx	r3
}
    4dfc:	bd10      	pop	{r4, pc}

00004dfe <_ZN9DIServiceD1Ev>:
DIService::~DIService()
    4dfe:	b510      	push	{r4, lr}
    4e00:	0004      	movs	r4, r0
    end();
    4e02:	f7ff ffe1 	bl	4dc8 <_ZN9DIService3endEv>
}
    4e06:	0020      	movs	r0, r4
    4e08:	bd10      	pop	{r4, pc}
	...

00004e0c <_GLOBAL__sub_I__ZN9DIServiceC2Ev>:

DIService x_diService;
    4e0c:	b510      	push	{r4, lr}
    4e0e:	4a03      	ldr	r2, [pc, #12]	; (4e1c <_GLOBAL__sub_I__ZN9DIServiceC2Ev+0x10>)
    4e10:	4903      	ldr	r1, [pc, #12]	; (4e20 <_GLOBAL__sub_I__ZN9DIServiceC2Ev+0x14>)
    4e12:	4804      	ldr	r0, [pc, #16]	; (4e24 <_GLOBAL__sub_I__ZN9DIServiceC2Ev+0x18>)
    4e14:	f002 fa68 	bl	72e8 <__aeabi_atexit>
    4e18:	bd10      	pop	{r4, pc}
    4e1a:	46c0      	nop			; (mov r8, r8)
    4e1c:	20000000 	.word	0x20000000
    4e20:	00004dff 	.word	0x00004dff
    4e24:	200005b4 	.word	0x200005b4

00004e28 <_ZN9DIService10runServiceEv>:
{
    4e28:	b510      	push	{r4, lr}
    BLE.poll();
    4e2a:	4802      	ldr	r0, [pc, #8]	; (4e34 <_ZN9DIService10runServiceEv+0xc>)
    4e2c:	f7fd fa22 	bl	2274 <_ZN9BLEDevice4pollEv>
}
    4e30:	bd10      	pop	{r4, pc}
    4e32:	46c0      	nop			; (mov r8, r8)
    4e34:	200002bc 	.word	0x200002bc

00004e38 <_ZN10LedServiceC1Ev>:
 *  Author: kong
 */

#include "LedService.h"

LedService::LedService() : m_ledPin(LED_BUILTIN), m_buttonPin(4) // pin 4
    4e38:	b510      	push	{r4, lr}
    4e3a:	2304      	movs	r3, #4
    4e3c:	0004      	movs	r4, r0
    4e3e:	2006      	movs	r0, #6
    4e40:	6063      	str	r3, [r4, #4]
    4e42:	6020      	str	r0, [r4, #0]
{
    pinMode(m_ledPin, OUTPUT);
    4e44:	2101      	movs	r1, #1
    4e46:	f001 fcc7 	bl	67d8 <pinMode>
    pinMode(m_buttonPin, INPUT);
    4e4a:	6860      	ldr	r0, [r4, #4]
    4e4c:	2100      	movs	r1, #0
    4e4e:	f001 fcc3 	bl	67d8 <pinMode>
}
    4e52:	0020      	movs	r0, r4
    4e54:	bd10      	pop	{r4, pc}

00004e56 <_ZN10LedService3endEv>:
        }
    }
}

void LedService::end()
{
    4e56:	b510      	push	{r4, lr}
    4e58:	0004      	movs	r4, r0
    delete m_ledService;
    4e5a:	6880      	ldr	r0, [r0, #8]
    4e5c:	2800      	cmp	r0, #0
    4e5e:	d002      	beq.n	4e66 <_ZN10LedService3endEv+0x10>
    4e60:	6803      	ldr	r3, [r0, #0]
    4e62:	685b      	ldr	r3, [r3, #4]
    4e64:	4798      	blx	r3
    delete m_ledControlCharacteristic;
    4e66:	68e0      	ldr	r0, [r4, #12]
    4e68:	2800      	cmp	r0, #0
    4e6a:	d002      	beq.n	4e72 <_ZN10LedService3endEv+0x1c>
    4e6c:	6803      	ldr	r3, [r0, #0]
    4e6e:	685b      	ldr	r3, [r3, #4]
    4e70:	4798      	blx	r3
    delete m_buttonStateCharacteristic;
    4e72:	6920      	ldr	r0, [r4, #16]
    4e74:	2800      	cmp	r0, #0
    4e76:	d002      	beq.n	4e7e <_ZN10LedService3endEv+0x28>
    4e78:	6803      	ldr	r3, [r0, #0]
    4e7a:	685b      	ldr	r3, [r3, #4]
    4e7c:	4798      	blx	r3
}
    4e7e:	bd10      	pop	{r4, pc}

00004e80 <_ZN10LedServiceD1Ev>:
LedService::~LedService()
    4e80:	b510      	push	{r4, lr}
    4e82:	0004      	movs	r4, r0
    end();
    4e84:	f7ff ffe7 	bl	4e56 <_ZN10LedService3endEv>
}
    4e88:	0020      	movs	r0, r4
    4e8a:	bd10      	pop	{r4, pc}

00004e8c <_ZN10LedService10controlLedEi>:

void LedService::controlLed(int signal)
{
    4e8c:	b510      	push	{r4, lr}
    if (signal == HIGH) {
    4e8e:	2901      	cmp	r1, #1
    4e90:	d103      	bne.n	4e9a <_ZN10LedService10controlLedEi+0xe>
        digitalWrite(m_ledPin, HIGH);
    } else {
        digitalWrite(m_ledPin, LOW);
    4e92:	6800      	ldr	r0, [r0, #0]
    4e94:	f001 fcec 	bl	6870 <digitalWrite>
    }
}
    4e98:	bd10      	pop	{r4, pc}
        digitalWrite(m_ledPin, LOW);
    4e9a:	2100      	movs	r1, #0
    4e9c:	e7f9      	b.n	4e92 <_ZN10LedService10controlLedEi+0x6>

00004e9e <_ZN22BLETypedCharacteristicIhE10writeValueEh>:
  memset(&value, 0x00, sizeof(value));

  writeValue(value);
}

template<typename T> int BLETypedCharacteristic<T>::writeValue(T value)
    4e9e:	b507      	push	{r0, r1, r2, lr}
    4ea0:	466b      	mov	r3, sp
    4ea2:	71d9      	strb	r1, [r3, #7]
    4ea4:	3307      	adds	r3, #7
{
  return BLECharacteristic::writeValue((uint8_t*)&value, sizeof(T));
    4ea6:	2201      	movs	r2, #1
    4ea8:	0019      	movs	r1, r3
    4eaa:	f7fd f9bc 	bl	2226 <_ZN17BLECharacteristic10writeValueEPKhi>
}
    4eae:	bd0e      	pop	{r1, r2, r3, pc}

00004eb0 <_ZN10LedService5setupEv>:
{
    4eb0:	b570      	push	{r4, r5, r6, lr}
    4eb2:	0004      	movs	r4, r0
    m_ledService = new BLEService("19B10010-E8F2-537E-4F6C-D104768A1214");
    4eb4:	2008      	movs	r0, #8
    4eb6:	f000 fa27 	bl	5308 <_Znwj>
    4eba:	0005      	movs	r5, r0
    4ebc:	4922      	ldr	r1, [pc, #136]	; (4f48 <_ZN10LedService5setupEv+0x98>)
    4ebe:	f7fd fac3 	bl	2448 <_ZN10BLEServiceC1EPKc>
    4ec2:	60a5      	str	r5, [r4, #8]
    m_ledControlCharacteristic  = new BLEByteCharacteristic("19B10011-E8F2-537E-4F6C-D104768A1214", BLERead | BLEWrite);
    4ec4:	2008      	movs	r0, #8
    4ec6:	f000 fa1f 	bl	5308 <_Znwj>
    4eca:	0005      	movs	r5, r0
    4ecc:	220a      	movs	r2, #10
    4ece:	491f      	ldr	r1, [pc, #124]	; (4f4c <_ZN10LedService5setupEv+0x9c>)
    4ed0:	f7fd fb48 	bl	2564 <_ZN21BLEByteCharacteristicC1EPKch>
    4ed4:	60e5      	str	r5, [r4, #12]
    m_buttonStateCharacteristic = new BLEByteCharacteristic("19B10012-E8F2-537E-4F6C-D104768A1214", BLERead | BLENotify);
    4ed6:	2008      	movs	r0, #8
    4ed8:	f000 fa16 	bl	5308 <_Znwj>
    4edc:	0005      	movs	r5, r0
    4ede:	2212      	movs	r2, #18
    4ee0:	491b      	ldr	r1, [pc, #108]	; (4f50 <_ZN10LedService5setupEv+0xa0>)
    4ee2:	f7fd fb3f 	bl	2564 <_ZN21BLEByteCharacteristicC1EPKch>
    4ee6:	6125      	str	r5, [r4, #16]
    BLE.setLocalName("LedController");
    4ee8:	4d1a      	ldr	r5, [pc, #104]	; (4f54 <_ZN10LedService5setupEv+0xa4>)
    4eea:	491b      	ldr	r1, [pc, #108]	; (4f58 <_ZN10LedService5setupEv+0xa8>)
    4eec:	0028      	movs	r0, r5
    4eee:	f7fd fe5f 	bl	2bb0 <_ZN14BLELocalDevice12setLocalNameEPKc>
    BLE.setAdvertisedService(*m_ledService);
    4ef2:	0028      	movs	r0, r5
    4ef4:	68a1      	ldr	r1, [r4, #8]
    4ef6:	f7fd fe4f 	bl	2b98 <_ZN14BLELocalDevice20setAdvertisedServiceERK10BLEService>
    m_ledService->addCharacteristic(*m_ledControlCharacteristic);
    4efa:	68e1      	ldr	r1, [r4, #12]
    4efc:	68a0      	ldr	r0, [r4, #8]
    4efe:	f7fd fabf 	bl	2480 <_ZN10BLEService17addCharacteristicER17BLECharacteristic>
    m_ledService->addCharacteristic(*m_buttonStateCharacteristic);
    4f02:	6921      	ldr	r1, [r4, #16]
    4f04:	68a0      	ldr	r0, [r4, #8]
    4f06:	f7fd fabb 	bl	2480 <_ZN10BLEService17addCharacteristicER17BLECharacteristic>
    BLE.addService(*m_ledService);
    4f0a:	0028      	movs	r0, r5
    4f0c:	68a1      	ldr	r1, [r4, #8]
    4f0e:	f7fd fe57 	bl	2bc0 <_ZN14BLELocalDevice10addServiceER10BLEService>
    BLE.setEventHandler(BLEConnected, handleConnectEvent);
    4f12:	0028      	movs	r0, r5
    4f14:	4a11      	ldr	r2, [pc, #68]	; (4f5c <_ZN10LedService5setupEv+0xac>)
    4f16:	2100      	movs	r1, #0
    4f18:	f7fd fe72 	bl	2c00 <_ZN14BLELocalDevice15setEventHandlerE14BLEDeviceEventPFv9BLEDeviceE>
    BLE.setEventHandler(BLEDisconnected, handleDisconnectEvent);
    4f1c:	0028      	movs	r0, r5
    4f1e:	4a10      	ldr	r2, [pc, #64]	; (4f60 <_ZN10LedService5setupEv+0xb0>)
    4f20:	2101      	movs	r1, #1
    4f22:	f7fd fe6d 	bl	2c00 <_ZN14BLELocalDevice15setEventHandlerE14BLEDeviceEventPFv9BLEDeviceE>
    m_ledControlCharacteristic->setEventHandler(BLEWritten, handleCharacteristicWrittenEvent);
    4f26:	4a0f      	ldr	r2, [pc, #60]	; (4f64 <_ZN10LedService5setupEv+0xb4>)
    4f28:	68e0      	ldr	r0, [r4, #12]
    4f2a:	2103      	movs	r1, #3
    4f2c:	f7fd f992 	bl	2254 <_ZN17BLECharacteristic15setEventHandlerEiPFv9BLEDeviceS_E>
    m_ledControlCharacteristic->writeValue(0);
    4f30:	2100      	movs	r1, #0
    4f32:	68e0      	ldr	r0, [r4, #12]
    4f34:	f7ff ffb3 	bl	4e9e <_ZN22BLETypedCharacteristicIhE10writeValueEh>
    m_buttonStateCharacteristic->writeValue(0);
    4f38:	2100      	movs	r1, #0
    4f3a:	6920      	ldr	r0, [r4, #16]
    4f3c:	f7ff ffaf 	bl	4e9e <_ZN22BLETypedCharacteristicIhE10writeValueEh>
    BLE.advertise();
    4f40:	0028      	movs	r0, r5
    4f42:	f7fd fe45 	bl	2bd0 <_ZN14BLELocalDevice9advertiseEv>
}
    4f46:	bd70      	pop	{r4, r5, r6, pc}
    4f48:	0000b8a9 	.word	0x0000b8a9
    4f4c:	0000b8ce 	.word	0x0000b8ce
    4f50:	0000b8f3 	.word	0x0000b8f3
    4f54:	200002bc 	.word	0x200002bc
    4f58:	0000b918 	.word	0x0000b918
    4f5c:	00005079 	.word	0x00005079
    4f60:	000050ad 	.word	0x000050ad
    4f64:	00005005 	.word	0x00005005

00004f68 <_ZN22BLETypedCharacteristicIhE5valueEv>:

template<typename T> T BLETypedCharacteristic<T>::value()
    4f68:	b537      	push	{r0, r1, r2, r4, r5, lr}
    4f6a:	0004      	movs	r4, r0
{
  T value;

  memcpy(&value, (unsigned char*)BLECharacteristic::value(), BLECharacteristic::valueSize());
    4f6c:	f7fd f954 	bl	2218 <_ZNK17BLECharacteristic5valueEv>
    4f70:	0005      	movs	r5, r0
    4f72:	0020      	movs	r0, r4
    4f74:	f7fd f949 	bl	220a <_ZNK17BLECharacteristic9valueSizeEv>
    4f78:	466b      	mov	r3, sp
    4f7a:	1ddc      	adds	r4, r3, #7
    4f7c:	0002      	movs	r2, r0
    4f7e:	0029      	movs	r1, r5
    4f80:	0020      	movs	r0, r4
    4f82:	f004 f966 	bl	9252 <memcpy>

  return value;
    4f86:	7820      	ldrb	r0, [r4, #0]
}
    4f88:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
	...

00004f8c <_ZN10LedService10runServiceEv>:
{
    4f8c:	b570      	push	{r4, r5, r6, lr}
    4f8e:	0004      	movs	r4, r0
    char buttonValue = digitalRead(m_buttonPin);
    4f90:	6840      	ldr	r0, [r0, #4]
    4f92:	f001 fc99 	bl	68c8 <digitalRead>
    4f96:	b2c5      	uxtb	r5, r0
    boolean buttonChanged = (m_buttonStateCharacteristic->value() != buttonValue);
    4f98:	6920      	ldr	r0, [r4, #16]
    4f9a:	f7ff ffe5 	bl	4f68 <_ZN22BLETypedCharacteristicIhE5valueEv>
    4f9e:	0006      	movs	r6, r0
    if (buttonChanged) {
    4fa0:	4285      	cmp	r5, r0
    4fa2:	d007      	beq.n	4fb4 <_ZN10LedService10runServiceEv+0x28>
        m_ledControlCharacteristic->writeValue(buttonValue);
    4fa4:	0029      	movs	r1, r5
    4fa6:	68e0      	ldr	r0, [r4, #12]
    4fa8:	f7ff ff79 	bl	4e9e <_ZN22BLETypedCharacteristicIhE10writeValueEh>
        m_buttonStateCharacteristic->writeValue(buttonValue);
    4fac:	0029      	movs	r1, r5
    4fae:	6920      	ldr	r0, [r4, #16]
    4fb0:	f7ff ff75 	bl	4e9e <_ZN22BLETypedCharacteristicIhE10writeValueEh>
    if (m_ledControlCharacteristic->written() || buttonChanged) {
    4fb4:	68e0      	ldr	r0, [r4, #12]
    4fb6:	f7fd f944 	bl	2242 <_ZN17BLECharacteristic7writtenEv>
    4fba:	2800      	cmp	r0, #0
    4fbc:	d107      	bne.n	4fce <_ZN10LedService10runServiceEv+0x42>
    4fbe:	42b5      	cmp	r5, r6
    4fc0:	d105      	bne.n	4fce <_ZN10LedService10runServiceEv+0x42>
}
    4fc2:	bd70      	pop	{r4, r5, r6, pc}
            Serial.println("LED off"); //----
    4fc4:	4909      	ldr	r1, [pc, #36]	; (4fec <_ZN10LedService10runServiceEv+0x60>)
    4fc6:	f000 f9e7 	bl	5398 <_ZN5Print7printlnEPKc>
            digitalWrite(m_ledPin, LOW);
    4fca:	0029      	movs	r1, r5
    4fcc:	e009      	b.n	4fe2 <_ZN10LedService10runServiceEv+0x56>
        if (m_ledControlCharacteristic->value()) {
    4fce:	68e0      	ldr	r0, [r4, #12]
    4fd0:	f7ff ffca 	bl	4f68 <_ZN22BLETypedCharacteristicIhE5valueEv>
    4fd4:	1e05      	subs	r5, r0, #0
    4fd6:	4806      	ldr	r0, [pc, #24]	; (4ff0 <_ZN10LedService10runServiceEv+0x64>)
    4fd8:	d0f4      	beq.n	4fc4 <_ZN10LedService10runServiceEv+0x38>
            Serial.println("LED on");  //----
    4fda:	4906      	ldr	r1, [pc, #24]	; (4ff4 <_ZN10LedService10runServiceEv+0x68>)
    4fdc:	f000 f9dc 	bl	5398 <_ZN5Print7printlnEPKc>
            digitalWrite(m_ledPin, HIGH);
    4fe0:	2101      	movs	r1, #1
            digitalWrite(m_ledPin, LOW);
    4fe2:	6820      	ldr	r0, [r4, #0]
    4fe4:	f001 fc44 	bl	6870 <digitalWrite>
}
    4fe8:	e7eb      	b.n	4fc2 <_ZN10LedService10runServiceEv+0x36>
    4fea:	46c0      	nop			; (mov r8, r8)
    4fec:	0000b8a1 	.word	0x0000b8a1
    4ff0:	200005f0 	.word	0x200005f0
    4ff4:	0000b89a 	.word	0x0000b89a

00004ff8 <_ZN10LedService8getValueEv>:

unsigned char LedService::getValue()
{
    4ff8:	b510      	push	{r4, lr}
    return m_ledControlCharacteristic->value();
    4ffa:	68c0      	ldr	r0, [r0, #12]
    4ffc:	f7ff ffb4 	bl	4f68 <_ZN22BLETypedCharacteristicIhE5valueEv>
}
    5000:	bd10      	pop	{r4, pc}
	...

00005004 <_Z32handleCharacteristicWrittenEvent9BLEDevice17BLECharacteristic>:
    Serial.print("central disconnected event: ");
    Serial.println(central.address());
}

void handleCharacteristicWrittenEvent(BLEDevice central, BLECharacteristic characteristic)
{
    5004:	b570      	push	{r4, r5, r6, lr}
    Serial.print("characteristic written event: ");
    5006:	4d0e      	ldr	r5, [pc, #56]	; (5040 <_Z32handleCharacteristicWrittenEvent9BLEDevice17BLECharacteristic+0x3c>)
    5008:	490e      	ldr	r1, [pc, #56]	; (5044 <_Z32handleCharacteristicWrittenEvent9BLEDevice17BLECharacteristic+0x40>)
    500a:	0028      	movs	r0, r5
    500c:	f000 f9ad 	bl	536a <_ZN5Print5printEPKc>
    if (x_ledService.getValue()) {
    5010:	4c0d      	ldr	r4, [pc, #52]	; (5048 <_Z32handleCharacteristicWrittenEvent9BLEDevice17BLECharacteristic+0x44>)
    5012:	0020      	movs	r0, r4
    5014:	f7ff fff0 	bl	4ff8 <_ZN10LedService8getValueEv>
    5018:	1e06      	subs	r6, r0, #0
    501a:	d008      	beq.n	502e <_Z32handleCharacteristicWrittenEvent9BLEDevice17BLECharacteristic+0x2a>
        Serial.println("LED on");
    501c:	490b      	ldr	r1, [pc, #44]	; (504c <_Z32handleCharacteristicWrittenEvent9BLEDevice17BLECharacteristic+0x48>)
    501e:	0028      	movs	r0, r5
    5020:	f000 f9ba 	bl	5398 <_ZN5Print7printlnEPKc>
        digitalWrite(m_ledPin, HIGH);
    5024:	2101      	movs	r1, #1
    5026:	6820      	ldr	r0, [r4, #0]
    5028:	f001 fc22 	bl	6870 <digitalWrite>
        x_ledService.controlLed(HIGH);
    } else {
        Serial.println("LED off");
        x_ledService.controlLed(LOW);
    }
}
    502c:	bd70      	pop	{r4, r5, r6, pc}
        Serial.println("LED off");
    502e:	4908      	ldr	r1, [pc, #32]	; (5050 <_Z32handleCharacteristicWrittenEvent9BLEDevice17BLECharacteristic+0x4c>)
    5030:	0028      	movs	r0, r5
    5032:	f000 f9b1 	bl	5398 <_ZN5Print7printlnEPKc>
        x_ledService.controlLed(LOW);
    5036:	0031      	movs	r1, r6
    5038:	0020      	movs	r0, r4
    503a:	f7ff ff27 	bl	4e8c <_ZN10LedService10controlLedEi>
}
    503e:	e7f5      	b.n	502c <_Z32handleCharacteristicWrittenEvent9BLEDevice17BLECharacteristic+0x28>
    5040:	200005f0 	.word	0x200005f0
    5044:	0000b87b 	.word	0x0000b87b
    5048:	200005c4 	.word	0x200005c4
    504c:	0000b89a 	.word	0x0000b89a
    5050:	0000b8a1 	.word	0x0000b8a1

00005054 <_GLOBAL__sub_I__ZN10LedServiceC2Ev>:
    5054:	b510      	push	{r4, lr}
LedService x_ledService;
    5056:	4c05      	ldr	r4, [pc, #20]	; (506c <_GLOBAL__sub_I__ZN10LedServiceC2Ev+0x18>)
    5058:	0020      	movs	r0, r4
    505a:	f7ff feed 	bl	4e38 <_ZN10LedServiceC1Ev>
    505e:	4a04      	ldr	r2, [pc, #16]	; (5070 <_GLOBAL__sub_I__ZN10LedServiceC2Ev+0x1c>)
    5060:	4904      	ldr	r1, [pc, #16]	; (5074 <_GLOBAL__sub_I__ZN10LedServiceC2Ev+0x20>)
    5062:	0020      	movs	r0, r4
    5064:	f002 f940 	bl	72e8 <__aeabi_atexit>
}
    5068:	bd10      	pop	{r4, pc}
    506a:	46c0      	nop			; (mov r8, r8)
    506c:	200005c4 	.word	0x200005c4
    5070:	20000000 	.word	0x20000000
    5074:	00004e81 	.word	0x00004e81

00005078 <_Z18handleConnectEvent9BLEDevice>:
{
    5078:	b530      	push	{r4, r5, lr}
    507a:	0005      	movs	r5, r0
    Serial.print("central connected event: ");
    507c:	4c09      	ldr	r4, [pc, #36]	; (50a4 <_Z18handleConnectEvent9BLEDevice+0x2c>)
{
    507e:	b085      	sub	sp, #20
    Serial.print("central connected event: ");
    5080:	4909      	ldr	r1, [pc, #36]	; (50a8 <_Z18handleConnectEvent9BLEDevice+0x30>)
    5082:	0020      	movs	r0, r4
    5084:	f000 f971 	bl	536a <_ZN5Print5printEPKc>
    Serial.println(central.address());
    5088:	0029      	movs	r1, r5
    508a:	a801      	add	r0, sp, #4
    508c:	f7fd f914 	bl	22b8 <_ZNK9BLEDevice7addressEv>
    5090:	a901      	add	r1, sp, #4
    5092:	0020      	movs	r0, r4
    5094:	f000 f976 	bl	5384 <_ZN5Print7printlnERK6String>
    5098:	a801      	add	r0, sp, #4
    509a:	f001 fc8b 	bl	69b4 <_ZN6StringD1Ev>
}
    509e:	b005      	add	sp, #20
    50a0:	bd30      	pop	{r4, r5, pc}
    50a2:	46c0      	nop			; (mov r8, r8)
    50a4:	200005f0 	.word	0x200005f0
    50a8:	0000b844 	.word	0x0000b844

000050ac <_Z21handleDisconnectEvent9BLEDevice>:
{
    50ac:	b530      	push	{r4, r5, lr}
    50ae:	0005      	movs	r5, r0
    Serial.print("central disconnected event: ");
    50b0:	4c09      	ldr	r4, [pc, #36]	; (50d8 <_Z21handleDisconnectEvent9BLEDevice+0x2c>)
{
    50b2:	b085      	sub	sp, #20
    Serial.print("central disconnected event: ");
    50b4:	4909      	ldr	r1, [pc, #36]	; (50dc <_Z21handleDisconnectEvent9BLEDevice+0x30>)
    50b6:	0020      	movs	r0, r4
    50b8:	f000 f957 	bl	536a <_ZN5Print5printEPKc>
    Serial.println(central.address());
    50bc:	0029      	movs	r1, r5
    50be:	a801      	add	r0, sp, #4
    50c0:	f7fd f8fa 	bl	22b8 <_ZNK9BLEDevice7addressEv>
    50c4:	a901      	add	r1, sp, #4
    50c6:	0020      	movs	r0, r4
    50c8:	f000 f95c 	bl	5384 <_ZN5Print7printlnERK6String>
    50cc:	a801      	add	r0, sp, #4
    50ce:	f001 fc71 	bl	69b4 <_ZN6StringD1Ev>
}
    50d2:	b005      	add	sp, #20
    50d4:	bd30      	pop	{r4, r5, pc}
    50d6:	46c0      	nop			; (mov r8, r8)
    50d8:	200005f0 	.word	0x200005f0
    50dc:	0000b85e 	.word	0x0000b85e

000050e0 <_ZN8Tc5Timer11runCallbackEv>:
{
    m_callbacks.add(callback);
}

void Tc5Timer::runCallback()
{
    50e0:	b570      	push	{r4, r5, r6, lr}
    50e2:	0005      	movs	r5, r0
    unsigned int size = m_callbacks.size();
    void (*f)();
    for (unsigned int i = 0; i < size; i++) {
    50e4:	2400      	movs	r4, #0
    50e6:	6846      	ldr	r6, [r0, #4]
    50e8:	42b4      	cmp	r4, r6
    50ea:	d00e      	beq.n	510a <_ZN8Tc5Timer11runCallbackEv+0x2a>
    m_size++;
}

template <typename T> T LinkedList<T>::get(unsigned int index)
{
    if (index >= m_size) {
    50ec:	686a      	ldr	r2, [r5, #4]
        return T();
    50ee:	2300      	movs	r3, #0
    if (index >= m_size) {
    50f0:	4294      	cmp	r4, r2
    50f2:	d207      	bcs.n	5104 <_ZN8Tc5Timer11runCallbackEv+0x24>
    }
    ListNode<T>* node = m_head;
    for (unsigned int i = 0; i < index; i++) {
    50f4:	2200      	movs	r2, #0
    ListNode<T>* node = m_head;
    50f6:	68ab      	ldr	r3, [r5, #8]
    for (unsigned int i = 0; i < index; i++) {
    50f8:	4294      	cmp	r4, r2
    50fa:	d002      	beq.n	5102 <_ZN8Tc5Timer11runCallbackEv+0x22>
        node = node->next;
    50fc:	685b      	ldr	r3, [r3, #4]
    for (unsigned int i = 0; i < index; i++) {
    50fe:	3201      	adds	r2, #1
    5100:	e7fa      	b.n	50f8 <_ZN8Tc5Timer11runCallbackEv+0x18>
    }
    return node->data;
    5102:	681b      	ldr	r3, [r3, #0]
        f = m_callbacks.get(i);
        f();
    5104:	4798      	blx	r3
    for (unsigned int i = 0; i < size; i++) {
    5106:	3401      	adds	r4, #1
    5108:	e7ee      	b.n	50e8 <_ZN8Tc5Timer11runCallbackEv+0x8>
    }
}
    510a:	bd70      	pop	{r4, r5, r6, pc}

0000510c <TC5_Handler>:
{
    510c:	b510      	push	{r4, lr}
    x_tc5_tick.runCallback();
    510e:	4804      	ldr	r0, [pc, #16]	; (5120 <TC5_Handler+0x14>)
    5110:	f7ff ffe6 	bl	50e0 <_ZN8Tc5Timer11runCallbackEv>
    TC5->COUNT16.INTFLAG.bit.MC0 = 1;
    5114:	2310      	movs	r3, #16
    5116:	4a03      	ldr	r2, [pc, #12]	; (5124 <TC5_Handler+0x18>)
    5118:	7b91      	ldrb	r1, [r2, #14]
    511a:	430b      	orrs	r3, r1
    511c:	7393      	strb	r3, [r2, #14]
}
    511e:	bd10      	pop	{r4, pc}
    5120:	200005d8 	.word	0x200005d8
    5124:	42003400 	.word	0x42003400

00005128 <_ZN8Tc5Timer4stopEv>:
    while (isSyncing());
}

void Tc5Timer::stop()
{
    TC5->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    5128:	2102      	movs	r1, #2
    512a:	4b04      	ldr	r3, [pc, #16]	; (513c <_ZN8Tc5Timer4stopEv+0x14>)
    512c:	881a      	ldrh	r2, [r3, #0]
    512e:	438a      	bics	r2, r1
    5130:	801a      	strh	r2, [r3, #0]
    return TC5->COUNT16.STATUS.reg & TC_STATUS_SYNCBUSY;
    5132:	7bda      	ldrb	r2, [r3, #15]
    while (isSyncing());
    5134:	b252      	sxtb	r2, r2
    5136:	2a00      	cmp	r2, #0
    5138:	dbfb      	blt.n	5132 <_ZN8Tc5Timer4stopEv+0xa>
}
    513a:	4770      	bx	lr
    513c:	42003400 	.word	0x42003400

00005140 <_ZN8Tc5TimerD1Ev>:
Tc5Timer::~Tc5Timer()
    5140:	b570      	push	{r4, r5, r6, lr}
    5142:	0004      	movs	r4, r0
}

template <typename T> void LinkedList<T>::clear()
{
    ListNode<T>* node = m_head;
    for (unsigned int i = 0; i < m_size; i++) {
    5144:	2500      	movs	r5, #0
    stop();
    5146:	f7ff ffef 	bl	5128 <_ZN8Tc5Timer4stopEv>
    ListNode<T>* node = m_head;
    514a:	68a0      	ldr	r0, [r4, #8]
    for (unsigned int i = 0; i < m_size; i++) {
    514c:	6863      	ldr	r3, [r4, #4]
    514e:	42ab      	cmp	r3, r5
    5150:	d905      	bls.n	515e <_ZN8Tc5TimerD1Ev+0x1e>
        ListNode<T>* x = node;
        node = node->next;
    5152:	6846      	ldr	r6, [r0, #4]
    for (unsigned int i = 0; i < m_size; i++) {
    5154:	3501      	adds	r5, #1
        delete x;
    5156:	f000 f8db 	bl	5310 <_ZdlPv>
        node = node->next;
    515a:	0030      	movs	r0, r6
    515c:	e7f6      	b.n	514c <_ZN8Tc5TimerD1Ev+0xc>
}
    515e:	0020      	movs	r0, r4
    5160:	bd70      	pop	{r4, r5, r6, pc}
	...

00005164 <_GLOBAL__sub_I_TC5_Handler>:
Tc5Timer::Tc5Timer() : m_tickInterval(0)
    5164:	2300      	movs	r3, #0

Tc5Timer x_tc5_tick;
    5166:	b510      	push	{r4, lr}
Tc5Timer::Tc5Timer() : m_tickInterval(0)
    5168:	4804      	ldr	r0, [pc, #16]	; (517c <_GLOBAL__sub_I_TC5_Handler+0x18>)
Tc5Timer x_tc5_tick;
    516a:	4a05      	ldr	r2, [pc, #20]	; (5180 <_GLOBAL__sub_I_TC5_Handler+0x1c>)
m_size(0), m_head(NULL), m_tail(NULL)
    516c:	6043      	str	r3, [r0, #4]
    516e:	6083      	str	r3, [r0, #8]
    5170:	60c3      	str	r3, [r0, #12]
    5172:	4904      	ldr	r1, [pc, #16]	; (5184 <_GLOBAL__sub_I_TC5_Handler+0x20>)
Tc5Timer::Tc5Timer() : m_tickInterval(0)
    5174:	6003      	str	r3, [r0, #0]
Tc5Timer x_tc5_tick;
    5176:	f002 f8b7 	bl	72e8 <__aeabi_atexit>
    517a:	bd10      	pop	{r4, pc}
    517c:	200005d8 	.word	0x200005d8
    5180:	20000000 	.word	0x20000000
    5184:	00005141 	.word	0x00005141

00005188 <Dummy_Handler>:

/* Default empty handler */
void Dummy_Handler(void)
{
#if defined DEBUG
  __BKPT(3);
    5188:	be03      	bkpt	0x0003
    518a:	e7fe      	b.n	518a <Dummy_Handler+0x2>

0000518c <USB_Handler>:

static void (*usb_isr)(void) = NULL;

void USB_Handler(void)
{
  if (usb_isr)
    518c:	4b03      	ldr	r3, [pc, #12]	; (519c <USB_Handler+0x10>)
{
    518e:	b510      	push	{r4, lr}
  if (usb_isr)
    5190:	681b      	ldr	r3, [r3, #0]
    5192:	2b00      	cmp	r3, #0
    5194:	d000      	beq.n	5198 <USB_Handler+0xc>
    usb_isr();
    5196:	4798      	blx	r3
}
    5198:	bd10      	pop	{r4, pc}
    519a:	46c0      	nop			; (mov r8, r8)
    519c:	200005e8 	.word	0x200005e8

000051a0 <Reset_Handler>:
{
    51a0:	b570      	push	{r4, r5, r6, lr}
  if ((&__data_start__ != &__data_end__) && (pSrc != pDest)) {
    51a2:	490f      	ldr	r1, [pc, #60]	; (51e0 <Reset_Handler+0x40>)
    51a4:	4c0f      	ldr	r4, [pc, #60]	; (51e4 <Reset_Handler+0x44>)
    51a6:	42a1      	cmp	r1, r4
    51a8:	d104      	bne.n	51b4 <Reset_Handler+0x14>
  SystemInit();
    51aa:	f000 f98f 	bl	54cc <SystemInit>
  main();
    51ae:	f000 f88b 	bl	52c8 <main>
    51b2:	e7fe      	b.n	51b2 <Reset_Handler+0x12>
  if ((&__data_start__ != &__data_end__) && (pSrc != pDest)) {
    51b4:	4d0c      	ldr	r5, [pc, #48]	; (51e8 <Reset_Handler+0x48>)
    51b6:	2300      	movs	r3, #0
    51b8:	428d      	cmp	r5, r1
    51ba:	d0f6      	beq.n	51aa <Reset_Handler+0xa>
    51bc:	18ca      	adds	r2, r1, r3
    51be:	18e8      	adds	r0, r5, r3
    for (; pDest < &__data_end__; pDest++, pSrc++)
    51c0:	42a2      	cmp	r2, r4
    51c2:	d305      	bcc.n	51d0 <Reset_Handler+0x30>
  if ((&__data_start__ != &__data_end__) && (pSrc != pDest)) {
    51c4:	4290      	cmp	r0, r2
    51c6:	d0f0      	beq.n	51aa <Reset_Handler+0xa>
    51c8:	4b08      	ldr	r3, [pc, #32]	; (51ec <Reset_Handler+0x4c>)
    for (pDest = &__bss_start__; pDest < &__bss_end__; pDest++)
    51ca:	4909      	ldr	r1, [pc, #36]	; (51f0 <Reset_Handler+0x50>)
      *pDest = 0;
    51cc:	2200      	movs	r2, #0
    51ce:	e004      	b.n	51da <Reset_Handler+0x3a>
      *pDest = *pSrc;
    51d0:	6800      	ldr	r0, [r0, #0]
    51d2:	3304      	adds	r3, #4
    51d4:	6010      	str	r0, [r2, #0]
    51d6:	e7f1      	b.n	51bc <Reset_Handler+0x1c>
      *pDest = 0;
    51d8:	c304      	stmia	r3!, {r2}
    for (pDest = &__bss_start__; pDest < &__bss_end__; pDest++)
    51da:	428b      	cmp	r3, r1
    51dc:	d3fc      	bcc.n	51d8 <Reset_Handler+0x38>
    51de:	e7e4      	b.n	51aa <Reset_Handler+0xa>
    51e0:	20000000 	.word	0x20000000
    51e4:	200002a0 	.word	0x200002a0
    51e8:	0000c01c 	.word	0x0000c01c
    51ec:	200002a0 	.word	0x200002a0
    51f0:	20001074 	.word	0x20001074

000051f4 <SysTick_Handler>:
{
    51f4:	b510      	push	{r4, lr}
  if (sysTickHook())
    51f6:	f000 f864 	bl	52c2 <sysTickHook>
    51fa:	2800      	cmp	r0, #0
    51fc:	d101      	bne.n	5202 <SysTick_Handler+0xe>
  SysTick_DefaultHandler();
    51fe:	f000 f855 	bl	52ac <SysTick_DefaultHandler>
}
    5202:	bd10      	pop	{r4, pc}

00005204 <USB_SetHandler>:

void USB_SetHandler(void (*new_usb_isr)(void))
{
  usb_isr = new_usb_isr;
    5204:	4b01      	ldr	r3, [pc, #4]	; (520c <USB_SetHandler+0x8>)
    5206:	6018      	str	r0, [r3, #0]
}
    5208:	4770      	bx	lr
    520a:	46c0      	nop			; (mov r8, r8)
    520c:	200005e8 	.word	0x200005e8

00005210 <millis>:
static volatile uint32_t _ulTickCount=0 ;

unsigned long millis( void )
{
// todo: ensure no interrupts
  return _ulTickCount ;
    5210:	4b01      	ldr	r3, [pc, #4]	; (5218 <millis+0x8>)
    5212:	6818      	ldr	r0, [r3, #0]
}
    5214:	4770      	bx	lr
    5216:	46c0      	nop			; (mov r8, r8)
    5218:	200005ec 	.word	0x200005ec

0000521c <micros>:
// Interrupt-compatible version of micros
// Theory: repeatedly take readings of SysTick counter, millis counter and SysTick interrupt pending flag.
// When it appears that millis counter and pending is stable and SysTick hasn't rolled over, use these
// values to calculate micros. If there is a pending SysTick, add one to the millis counter in the calculation.
unsigned long micros( void )
{
    521c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t pend, pend2;
  uint32_t count, count2;

  ticks2  = SysTick->VAL;
  pend2   = !!(SCB->ICSR & SCB_ICSR_PENDSTSET_Msk)  ;
  count2  = _ulTickCount ;
    521e:	4813      	ldr	r0, [pc, #76]	; (526c <micros+0x50>)
  pend2   = !!(SCB->ICSR & SCB_ICSR_PENDSTSET_Msk)  ;
    5220:	2201      	movs	r2, #1
  count2  = _ulTickCount ;
    5222:	4684      	mov	ip, r0
  ticks2  = SysTick->VAL;
    5224:	4912      	ldr	r1, [pc, #72]	; (5270 <micros+0x54>)
  pend2   = !!(SCB->ICSR & SCB_ICSR_PENDSTSET_Msk)  ;
    5226:	4c13      	ldr	r4, [pc, #76]	; (5274 <micros+0x58>)
  ticks2  = SysTick->VAL;
    5228:	688e      	ldr	r6, [r1, #8]
  pend2   = !!(SCB->ICSR & SCB_ICSR_PENDSTSET_Msk)  ;
    522a:	6863      	ldr	r3, [r4, #4]
  count2  = _ulTickCount ;
    522c:	6805      	ldr	r5, [r0, #0]
  pend2   = !!(SCB->ICSR & SCB_ICSR_PENDSTSET_Msk)  ;
    522e:	0e9b      	lsrs	r3, r3, #26
    5230:	4013      	ands	r3, r2
  {
    ticks=ticks2;
    pend=pend2;
    count=count2;
    ticks2  = SysTick->VAL;
    pend2   = !!(SCB->ICSR & SCB_ICSR_PENDSTSET_Msk)  ;
    5232:	9201      	str	r2, [sp, #4]
    ticks2  = SysTick->VAL;
    5234:	6888      	ldr	r0, [r1, #8]
    pend2   = !!(SCB->ICSR & SCB_ICSR_PENDSTSET_Msk)  ;
    5236:	6862      	ldr	r2, [r4, #4]
    5238:	9f01      	ldr	r7, [sp, #4]
    523a:	0e92      	lsrs	r2, r2, #26
    523c:	403a      	ands	r2, r7
    count2  = _ulTickCount ;
    523e:	4667      	mov	r7, ip
    5240:	683f      	ldr	r7, [r7, #0]
  } while ((pend != pend2) || (count != count2) || (ticks < ticks2));
    5242:	4293      	cmp	r3, r2
    5244:	d10e      	bne.n	5264 <micros+0x48>
    5246:	42bd      	cmp	r5, r7
    5248:	d10c      	bne.n	5264 <micros+0x48>
    524a:	4286      	cmp	r6, r0
    524c:	d30a      	bcc.n	5264 <micros+0x48>

  return ((count+pend) * 1000) + (((SysTick->LOAD  - ticks)*(1048576/(VARIANT_MCK/1000000)))>>20) ;
    524e:	195b      	adds	r3, r3, r5
    5250:	25fa      	movs	r5, #250	; 0xfa
    5252:	6848      	ldr	r0, [r1, #4]
    5254:	00ad      	lsls	r5, r5, #2
    5256:	1b86      	subs	r6, r0, r6
    5258:	4807      	ldr	r0, [pc, #28]	; (5278 <micros+0x5c>)
    525a:	436b      	muls	r3, r5
    525c:	4370      	muls	r0, r6
    525e:	0d00      	lsrs	r0, r0, #20
    5260:	18c0      	adds	r0, r0, r3
  // this is an optimization to turn a runtime division into two compile-time divisions and
  // a runtime multiplication and shift, saving a few cycles
}
    5262:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
{
    5264:	003d      	movs	r5, r7
    5266:	0013      	movs	r3, r2
    5268:	0006      	movs	r6, r0
    526a:	e7e3      	b.n	5234 <micros+0x18>
    526c:	200005ec 	.word	0x200005ec
    5270:	e000e010 	.word	0xe000e010
    5274:	e000ed00 	.word	0xe000ed00
    5278:	00005555 	.word	0x00005555

0000527c <delay>:

void delay( unsigned long ms )
{
    527c:	b570      	push	{r4, r5, r6, lr}
    527e:	1e04      	subs	r4, r0, #0
  if (ms == 0)
    5280:	d010      	beq.n	52a4 <delay+0x28>
  {
    return;
  }

  uint32_t start = micros();
    5282:	f7ff ffcb 	bl	521c <micros>
    5286:	0005      	movs	r5, r0

  while (ms > 0)
  {
    yield();
    5288:	f000 f81a 	bl	52c0 <yield>
    while (ms > 0 && (micros() - start) >= 1000)
    528c:	f7ff ffc6 	bl	521c <micros>
    5290:	4b05      	ldr	r3, [pc, #20]	; (52a8 <delay+0x2c>)
    5292:	1b40      	subs	r0, r0, r5
    5294:	4298      	cmp	r0, r3
    5296:	d9f7      	bls.n	5288 <delay+0xc>
    {
      ms--;
      start += 1000;
    5298:	23fa      	movs	r3, #250	; 0xfa
      ms--;
    529a:	3c01      	subs	r4, #1
      start += 1000;
    529c:	009b      	lsls	r3, r3, #2
    529e:	18ed      	adds	r5, r5, r3
    while (ms > 0 && (micros() - start) >= 1000)
    52a0:	2c00      	cmp	r4, #0
    52a2:	d1f3      	bne.n	528c <delay+0x10>
    }
  }
}
    52a4:	bd70      	pop	{r4, r5, r6, pc}
    52a6:	46c0      	nop			; (mov r8, r8)
    52a8:	000003e7 	.word	0x000003e7

000052ac <SysTick_DefaultHandler>:

#include "Reset.h" // for tickReset()

void SysTick_DefaultHandler(void)
{
    52ac:	b510      	push	{r4, lr}
  // Increment tick count each ms
  _ulTickCount++;
    52ae:	4a03      	ldr	r2, [pc, #12]	; (52bc <SysTick_DefaultHandler+0x10>)
    52b0:	6813      	ldr	r3, [r2, #0]
    52b2:	3301      	adds	r3, #1
    52b4:	6013      	str	r3, [r2, #0]
  tickReset();
    52b6:	f000 f8cd 	bl	5454 <tickReset>
}
    52ba:	bd10      	pop	{r4, pc}
    52bc:	200005ec 	.word	0x200005ec

000052c0 <yield>:
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
	// Empty
}
    52c0:	4770      	bx	lr

000052c2 <sysTickHook>:
 * handler provided by Arduino.
 */
static int __false() {
	// Return false
	return 0;
}
    52c2:	2000      	movs	r0, #0
    52c4:	4770      	bx	lr
	...

000052c8 <main>:

/*
 * \brief Main entry point of Arduino application
 */
int main( void )
{
    52c8:	b510      	push	{r4, lr}
  init();
    52ca:	f001 f9db 	bl	6684 <init>

  __libc_init_array();
    52ce:	f003 ff63 	bl	9198 <__libc_init_array>

  initVariant();
    52d2:	f001 fbca 	bl	6a6a <_Z11initVariantv>

  delay(1);
    52d6:	2001      	movs	r0, #1
    52d8:	f7ff ffd0 	bl	527c <delay>
#if defined(USBCON)
  USBDevice.init();
    52dc:	4c08      	ldr	r4, [pc, #32]	; (5300 <main+0x38>)
    52de:	0020      	movs	r0, r4
    52e0:	f000 fcb4 	bl	5c4c <_ZN14USBDeviceClass4initEv>
  USBDevice.attach();
    52e4:	0020      	movs	r0, r4
    52e6:	f000 fd11 	bl	5d0c <_ZN14USBDeviceClass6attachEv>
#endif

  setup();
    52ea:	f7ff fc7b 	bl	4be4 <setup>

  for (;;)
  {
    loop();
    52ee:	f7ff fca7 	bl	4c40 <loop>
    if (serialEventRun) serialEventRun();
    52f2:	4b04      	ldr	r3, [pc, #16]	; (5304 <main+0x3c>)
    52f4:	2b00      	cmp	r3, #0
    52f6:	d0fa      	beq.n	52ee <main+0x26>
    52f8:	e000      	b.n	52fc <main+0x34>
    52fa:	bf00      	nop
    52fc:	e7f7      	b.n	52ee <main+0x26>
    52fe:	46c0      	nop			; (mov r8, r8)
    5300:	2000060c 	.word	0x2000060c
    5304:	00000000 	.word	0x00000000

00005308 <_Znwj>:
    5308:	b510      	push	{r4, lr}
    530a:	f003 ff6d 	bl	91e8 <malloc>
    530e:	bd10      	pop	{r4, pc}

00005310 <_ZdlPv>:
    5310:	b510      	push	{r4, lr}
    5312:	f003 ff73 	bl	91fc <free>
    5316:	bd10      	pop	{r4, pc}

00005318 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
    5318:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    531a:	0006      	movs	r6, r0
    531c:	000d      	movs	r5, r1
    531e:	000c      	movs	r4, r1
    5320:	188b      	adds	r3, r1, r2
    5322:	9301      	str	r3, [sp, #4]
  size_t n = 0;
  while (size--) {
    5324:	9b01      	ldr	r3, [sp, #4]
    5326:	1b67      	subs	r7, r4, r5
    5328:	429c      	cmp	r4, r3
    532a:	d007      	beq.n	533c <_ZN5Print5writeEPKhj+0x24>
    if (write(*buffer++)) n++;
    532c:	6833      	ldr	r3, [r6, #0]
    532e:	7821      	ldrb	r1, [r4, #0]
    5330:	681b      	ldr	r3, [r3, #0]
    5332:	0030      	movs	r0, r6
    5334:	4798      	blx	r3
    5336:	3401      	adds	r4, #1
    5338:	2800      	cmp	r0, #0
    533a:	d1f3      	bne.n	5324 <_ZN5Print5writeEPKhj+0xc>
    else break;
  }
  return n;
}
    533c:	0038      	movs	r0, r7
    533e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

00005340 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
    5340:	b570      	push	{r4, r5, r6, lr}
    5342:	0005      	movs	r5, r0
    5344:	000c      	movs	r4, r1
      if (str == NULL) return 0;
    5346:	1e08      	subs	r0, r1, #0
    5348:	d007      	beq.n	535a <_ZN5Print5writeEPKc+0x1a>
      return write((const uint8_t *)str, strlen(str));
    534a:	f004 fd03 	bl	9d54 <strlen>
    534e:	682b      	ldr	r3, [r5, #0]
    5350:	0002      	movs	r2, r0
    5352:	685b      	ldr	r3, [r3, #4]
    5354:	0021      	movs	r1, r4
    5356:	0028      	movs	r0, r5
    5358:	4798      	blx	r3
    }
    535a:	bd70      	pop	{r4, r5, r6, pc}

0000535c <_ZN5Print5printERK6String>:
{
  return print(reinterpret_cast<const char *>(ifsh));
}

size_t Print::print(const String &s)
{
    535c:	b510      	push	{r4, lr}
    virtual size_t write(const uint8_t *buffer, size_t size);
    size_t write(const char *buffer, size_t size) {
      return write((const uint8_t *)buffer, size);
    535e:	6803      	ldr	r3, [r0, #0]
    5360:	688a      	ldr	r2, [r1, #8]
    5362:	685b      	ldr	r3, [r3, #4]
    5364:	6809      	ldr	r1, [r1, #0]
    5366:	4798      	blx	r3
  return write(s.c_str(), s.length());
}
    5368:	bd10      	pop	{r4, pc}

0000536a <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
    536a:	b510      	push	{r4, lr}
  return write(str);
    536c:	f7ff ffe8 	bl	5340 <_ZN5Print5writeEPKc>
}
    5370:	bd10      	pop	{r4, pc}
	...

00005374 <_ZN5Print7printlnEv>:
{
  return x.printTo(*this);
}

size_t Print::println(void)
{
    5374:	b510      	push	{r4, lr}
  return write("\r\n");
    5376:	4902      	ldr	r1, [pc, #8]	; (5380 <_ZN5Print7printlnEv+0xc>)
    5378:	f7ff ffe2 	bl	5340 <_ZN5Print5writeEPKc>
}
    537c:	bd10      	pop	{r4, pc}
    537e:	46c0      	nop			; (mov r8, r8)
    5380:	0000b926 	.word	0x0000b926

00005384 <_ZN5Print7printlnERK6String>:

size_t Print::println(const String &s)
{
    5384:	b570      	push	{r4, r5, r6, lr}
    5386:	0005      	movs	r5, r0
  size_t n = print(s);
    5388:	f7ff ffe8 	bl	535c <_ZN5Print5printERK6String>
    538c:	0004      	movs	r4, r0
  n += println();
    538e:	0028      	movs	r0, r5
    5390:	f7ff fff0 	bl	5374 <_ZN5Print7printlnEv>
    5394:	1820      	adds	r0, r4, r0
  return n;
}
    5396:	bd70      	pop	{r4, r5, r6, pc}

00005398 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
    5398:	b570      	push	{r4, r5, r6, lr}
    539a:	0004      	movs	r4, r0
  return write(str);
    539c:	f7ff ffd0 	bl	5340 <_ZN5Print5writeEPKc>
    53a0:	0005      	movs	r5, r0
  size_t n = print(c);
  n += println();
    53a2:	0020      	movs	r0, r4
    53a4:	f7ff ffe6 	bl	5374 <_ZN5Print7printlnEv>
    53a8:	1940      	adds	r0, r0, r5
  return n;
}
    53aa:	bd70      	pop	{r4, r5, r6, pc}

000053ac <_ZN5Print11printNumberEmh>:
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base)
{
    53ac:	b5f0      	push	{r4, r5, r6, r7, lr}
    53ae:	0016      	movs	r6, r2
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
    53b0:	2200      	movs	r2, #0
{
    53b2:	b08d      	sub	sp, #52	; 0x34
  *str = '\0';
    53b4:	ab02      	add	r3, sp, #8
    53b6:	3305      	adds	r3, #5
{
    53b8:	9001      	str	r0, [sp, #4]
    53ba:	000d      	movs	r5, r1
  *str = '\0';
    53bc:	77da      	strb	r2, [r3, #31]

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
    53be:	2e01      	cmp	r6, #1
    53c0:	dc00      	bgt.n	53c4 <_ZN5Print11printNumberEmh+0x18>
    53c2:	260a      	movs	r6, #10
    53c4:	ac0b      	add	r4, sp, #44	; 0x2c

  do {
    char c = n % base;
    53c6:	0028      	movs	r0, r5
    53c8:	0031      	movs	r1, r6
    53ca:	f002 f825 	bl	7418 <__aeabi_uidivmod>
    53ce:	000f      	movs	r7, r1
    53d0:	b2cb      	uxtb	r3, r1
    n /= base;
    53d2:	0028      	movs	r0, r5
    53d4:	0031      	movs	r1, r6
    char c = n % base;
    53d6:	9300      	str	r3, [sp, #0]
    n /= base;
    53d8:	f001 ff98 	bl	730c <__udivsi3>

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
    53dc:	b2fb      	uxtb	r3, r7
    53de:	3337      	adds	r3, #55	; 0x37
    n /= base;
    53e0:	0005      	movs	r5, r0
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
    53e2:	3c01      	subs	r4, #1
    53e4:	b2db      	uxtb	r3, r3
    53e6:	2f09      	cmp	r7, #9
    53e8:	d802      	bhi.n	53f0 <_ZN5Print11printNumberEmh+0x44>
    53ea:	9b00      	ldr	r3, [sp, #0]
    53ec:	3330      	adds	r3, #48	; 0x30
    53ee:	b2db      	uxtb	r3, r3
    53f0:	7023      	strb	r3, [r4, #0]
  } while(n);
    53f2:	2d00      	cmp	r5, #0
    53f4:	d1e7      	bne.n	53c6 <_ZN5Print11printNumberEmh+0x1a>

  return write(str);
    53f6:	0021      	movs	r1, r4
    53f8:	9801      	ldr	r0, [sp, #4]
    53fa:	f7ff ffa1 	bl	5340 <_ZN5Print5writeEPKc>
}
    53fe:	b00d      	add	sp, #52	; 0x34
    5400:	bdf0      	pop	{r4, r5, r6, r7, pc}

00005402 <_ZN5Print5printEmi>:
{
    5402:	b510      	push	{r4, lr}
  if (base == 0) return write(n);
    5404:	2a00      	cmp	r2, #0
    5406:	d104      	bne.n	5412 <_ZN5Print5printEmi+0x10>
    5408:	6803      	ldr	r3, [r0, #0]
    540a:	b2c9      	uxtb	r1, r1
    540c:	681b      	ldr	r3, [r3, #0]
    540e:	4798      	blx	r3
}
    5410:	bd10      	pop	{r4, pc}
  else return printNumber(n, base);
    5412:	b2d2      	uxtb	r2, r2
    5414:	f7ff ffca 	bl	53ac <_ZN5Print11printNumberEmh>
    5418:	e7fa      	b.n	5410 <_ZN5Print5printEmi+0xe>

0000541a <_ZN5Print5printEhi>:
{
    541a:	b510      	push	{r4, lr}
  return print((unsigned long) b, base);
    541c:	f7ff fff1 	bl	5402 <_ZN5Print5printEmi>
}
    5420:	bd10      	pop	{r4, pc}

00005422 <_ZN5Print7printlnEhi>:
{
    5422:	b570      	push	{r4, r5, r6, lr}
    5424:	0004      	movs	r4, r0
  return print((unsigned long) b, base);
    5426:	f7ff ffec 	bl	5402 <_ZN5Print5printEmi>
    542a:	0005      	movs	r5, r0
  n += println();
    542c:	0020      	movs	r0, r4
    542e:	f7ff ffa1 	bl	5374 <_ZN5Print7printlnEv>
    5432:	1940      	adds	r0, r0, r5
}
    5434:	bd70      	pop	{r4, r5, r6, pc}
	...

00005438 <initiateReset>:
}

static int ticks = -1;

void initiateReset(int _ticks) {
	ticks = _ticks;
    5438:	4b01      	ldr	r3, [pc, #4]	; (5440 <initiateReset+0x8>)
    543a:	6018      	str	r0, [r3, #0]
}
    543c:	4770      	bx	lr
    543e:	46c0      	nop			; (mov r8, r8)
    5440:	20000004 	.word	0x20000004

00005444 <cancelReset>:

void cancelReset() {
	ticks = -1;
    5444:	2201      	movs	r2, #1
    5446:	4b02      	ldr	r3, [pc, #8]	; (5450 <cancelReset+0xc>)
    5448:	4252      	negs	r2, r2
    544a:	601a      	str	r2, [r3, #0]
}
    544c:	4770      	bx	lr
    544e:	46c0      	nop			; (mov r8, r8)
    5450:	20000004 	.word	0x20000004

00005454 <tickReset>:

void tickReset() {
	if (ticks == -1)
    5454:	4a16      	ldr	r2, [pc, #88]	; (54b0 <tickReset+0x5c>)
void tickReset() {
    5456:	b510      	push	{r4, lr}
	if (ticks == -1)
    5458:	6813      	ldr	r3, [r2, #0]
    545a:	1c59      	adds	r1, r3, #1
    545c:	d027      	beq.n	54ae <tickReset+0x5a>
		return;
	ticks--;
    545e:	3b01      	subs	r3, #1
    5460:	6013      	str	r3, [r2, #0]
	if (ticks == 0)
    5462:	2b00      	cmp	r3, #0
    5464:	d123      	bne.n	54ae <tickReset+0x5a>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    5466:	b672      	cpsid	i
	if (APP_START < (0x200 + 4)) {
    5468:	4b12      	ldr	r3, [pc, #72]	; (54b4 <tickReset+0x60>)
    546a:	4a13      	ldr	r2, [pc, #76]	; (54b8 <tickReset+0x64>)
    546c:	3304      	adds	r3, #4
    546e:	4293      	cmp	r3, r2
    5470:	d808      	bhi.n	5484 <tickReset+0x30>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    5472:	f3bf 8f4f 	dsb	sy
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
    5476:	4a11      	ldr	r2, [pc, #68]	; (54bc <tickReset+0x68>)
    5478:	4b11      	ldr	r3, [pc, #68]	; (54c0 <tickReset+0x6c>)
    547a:	60da      	str	r2, [r3, #12]
    547c:	f3bf 8f4f 	dsb	sy
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    5480:	46c0      	nop			; (mov r8, r8)
    5482:	e7fd      	b.n	5480 <tickReset+0x2c>
        return NVMCTRL->INTFLAG.reg & NVMCTRL_INTFLAG_READY;
    5484:	4a0f      	ldr	r2, [pc, #60]	; (54c4 <tickReset+0x70>)
	while (!nvmReady())
    5486:	2101      	movs	r1, #1
    5488:	0010      	movs	r0, r2
        return NVMCTRL->INTFLAG.reg & NVMCTRL_INTFLAG_READY;
    548a:	7d14      	ldrb	r4, [r2, #20]
	while (!nvmReady())
    548c:	420c      	tst	r4, r1
    548e:	d0fc      	beq.n	548a <tickReset+0x36>
	NVMCTRL->STATUS.reg |= NVMCTRL_STATUS_MASK;
    5490:	2120      	movs	r1, #32
    5492:	8b14      	ldrh	r4, [r2, #24]
    5494:	31ff      	adds	r1, #255	; 0xff
	NVMCTRL->ADDR.reg  = (uintptr_t)&NVM_MEMORY[APP_START / 4];
    5496:	089b      	lsrs	r3, r3, #2
    5498:	005b      	lsls	r3, r3, #1
	NVMCTRL->STATUS.reg |= NVMCTRL_STATUS_MASK;
    549a:	4321      	orrs	r1, r4
    549c:	8311      	strh	r1, [r2, #24]
	NVMCTRL->ADDR.reg  = (uintptr_t)&NVM_MEMORY[APP_START / 4];
    549e:	61d3      	str	r3, [r2, #28]
	NVMCTRL->CTRLA.reg = NVMCTRL_CTRLA_CMD_ER | NVMCTRL_CTRLA_CMDEX_KEY;
    54a0:	4b09      	ldr	r3, [pc, #36]	; (54c8 <tickReset+0x74>)
    54a2:	8013      	strh	r3, [r2, #0]
	while (!nvmReady())
    54a4:	2301      	movs	r3, #1
        return NVMCTRL->INTFLAG.reg & NVMCTRL_INTFLAG_READY;
    54a6:	7d02      	ldrb	r2, [r0, #20]
	while (!nvmReady())
    54a8:	421a      	tst	r2, r3
    54aa:	d0fc      	beq.n	54a6 <tickReset+0x52>
    54ac:	e7e1      	b.n	5472 <tickReset+0x1e>
		banzai();
}
    54ae:	bd10      	pop	{r4, pc}
    54b0:	20000004 	.word	0x20000004
    54b4:	00002000 	.word	0x00002000
    54b8:	00000203 	.word	0x00000203
    54bc:	05fa0004 	.word	0x05fa0004
    54c0:	e000ed00 	.word	0xe000ed00
    54c4:	41004000 	.word	0x41004000
    54c8:	ffffa502 	.word	0xffffa502

000054cc <SystemInit>:
#define GENERIC_CLOCK_MULTIPLEXER_DFLL48M (0u)

void SystemInit( void )
{
  /* Set 1 Flash Wait State for 48MHz, cf tables 20.9 and 35.27 in SAMD21 Datasheet */
  NVMCTRL->CTRLB.bit.RWS = NVMCTRL_CTRLB_RWS_HALF_Val ;
    54cc:	221e      	movs	r2, #30
{
    54ce:	b570      	push	{r4, r5, r6, lr}
  NVMCTRL->CTRLB.bit.RWS = NVMCTRL_CTRLB_RWS_HALF_Val ;
    54d0:	4846      	ldr	r0, [pc, #280]	; (55ec <SystemInit+0x120>)

  /* Turn on the digital interface clock */
  PM->APBAMASK.reg |= PM_APBAMASK_GCLK ;
    54d2:	4947      	ldr	r1, [pc, #284]	; (55f0 <SystemInit+0x124>)
  NVMCTRL->CTRLB.bit.RWS = NVMCTRL_CTRLB_RWS_HALF_Val ;
    54d4:	6843      	ldr	r3, [r0, #4]
    54d6:	4393      	bics	r3, r2
    54d8:	3a1c      	subs	r2, #28
    54da:	4313      	orrs	r3, r2
    54dc:	6043      	str	r3, [r0, #4]
  PM->APBAMASK.reg |= PM_APBAMASK_GCLK ;
    54de:	2308      	movs	r3, #8
    54e0:	698c      	ldr	r4, [r1, #24]
    54e2:	4323      	orrs	r3, r4
    54e4:	618b      	str	r3, [r1, #24]
#else // has crystal

  /* ----------------------------------------------------------------------------------------------
   * 1) Enable XOSC32K clock (External on-board 32.768Hz oscillator)
   */
  SYSCTRL->XOSC32K.reg = SYSCTRL_XOSC32K_STARTUP( 0x6u ) | /* cf table 15.10 of product datasheet in chapter 15.8.6 */
    54e6:	4c43      	ldr	r4, [pc, #268]	; (55f4 <SystemInit+0x128>)
    54e8:	4b43      	ldr	r3, [pc, #268]	; (55f8 <SystemInit+0x12c>)
    54ea:	829c      	strh	r4, [r3, #20]
                         SYSCTRL_XOSC32K_XTALEN | SYSCTRL_XOSC32K_EN32K ;
  SYSCTRL->XOSC32K.bit.ENABLE = 1 ; /* separate call, as described in chapter 15.6.3 */
    54ec:	8a9c      	ldrh	r4, [r3, #20]
    54ee:	4314      	orrs	r4, r2
    54f0:	829c      	strh	r4, [r3, #20]

  while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_XOSC32KRDY) == 0 )
    54f2:	68dc      	ldr	r4, [r3, #12]
    54f4:	4214      	tst	r4, r2
    54f6:	d0fc      	beq.n	54f2 <SystemInit+0x26>

  /* Software reset the module to ensure it is re-initialized correctly */
  /* Note: Due to synchronization, there is a delay from writing CTRL.SWRST until the reset is complete.
   * CTRL.SWRST and STATUS.SYNCBUSY will both be cleared when the reset is complete, as described in chapter 13.8.1
   */
  GCLK->CTRL.reg = GCLK_CTRL_SWRST ;
    54f8:	2401      	movs	r4, #1
    54fa:	4a40      	ldr	r2, [pc, #256]	; (55fc <SystemInit+0x130>)
    54fc:	7014      	strb	r4, [r2, #0]

  while ( (GCLK->CTRL.reg & GCLK_CTRL_SWRST) && (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY) )
    54fe:	7815      	ldrb	r5, [r2, #0]
    5500:	4225      	tst	r5, r4
    5502:	d003      	beq.n	550c <SystemInit+0x40>
    5504:	7855      	ldrb	r5, [r2, #1]
    5506:	b26d      	sxtb	r5, r5
    5508:	2d00      	cmp	r5, #0
    550a:	dbf8      	blt.n	54fe <SystemInit+0x32>
  }

  /* ----------------------------------------------------------------------------------------------
   * 2) Put XOSC32K as source of Generic Clock Generator 1
   */
  GCLK->GENDIV.reg = GCLK_GENDIV_ID( GENERIC_CLOCK_GENERATOR_XOSC32K ) ; // Generic Clock Generator 1
    550c:	2401      	movs	r4, #1
    550e:	6094      	str	r4, [r2, #8]

  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY )
    5510:	7854      	ldrb	r4, [r2, #1]
    5512:	b264      	sxtb	r4, r4
    5514:	2c00      	cmp	r4, #0
    5516:	dbfb      	blt.n	5510 <SystemInit+0x44>
  {
    /* Wait for synchronization */
  }

  /* Write Generic Clock Generator 1 configuration */
  GCLK->GENCTRL.reg = GCLK_GENCTRL_ID( GENERIC_CLOCK_GENERATOR_OSC32K ) | // Generic Clock Generator 1
    5518:	4c39      	ldr	r4, [pc, #228]	; (5600 <SystemInit+0x134>)
    551a:	6054      	str	r4, [r2, #4]
                      GCLK_GENCTRL_SRC_XOSC32K | // Selected source is External 32KHz Oscillator
#endif
//                      GCLK_GENCTRL_OE | // Output clock to a pin for tests
                      GCLK_GENCTRL_GENEN ;

  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY )
    551c:	7854      	ldrb	r4, [r2, #1]
    551e:	b264      	sxtb	r4, r4
    5520:	2c00      	cmp	r4, #0
    5522:	dbfb      	blt.n	551c <SystemInit+0x50>
  }

  /* ----------------------------------------------------------------------------------------------
   * 3) Put Generic Clock Generator 1 as source for Generic Clock Multiplexer 0 (DFLL48M reference)
   */
  GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID( GENERIC_CLOCK_MULTIPLEXER_DFLL48M ) | // Generic Clock Multiplexer 0
    5524:	2482      	movs	r4, #130	; 0x82
    5526:	01e4      	lsls	r4, r4, #7
    5528:	8054      	strh	r4, [r2, #2]
                      GCLK_CLKCTRL_GEN_GCLK1 | // Generic Clock Generator 1 is source
                      GCLK_CLKCTRL_CLKEN ;

  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY )
    552a:	7854      	ldrb	r4, [r2, #1]
    552c:	b264      	sxtb	r4, r4
    552e:	2c00      	cmp	r4, #0
    5530:	dbfb      	blt.n	552a <SystemInit+0x5e>
   */

  /* DFLL Configuration in Closed Loop mode, cf product datasheet chapter 15.6.7.1 - Closed-Loop Operation */

  /* Remove the OnDemand mode, Bug http://avr32.icgroup.norway.atmel.com/bugzilla/show_bug.cgi?id=9905 */
  SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    5532:	2402      	movs	r4, #2
    5534:	849c      	strh	r4, [r3, #36]	; 0x24

  while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) == 0 )
    5536:	340e      	adds	r4, #14
    5538:	68dd      	ldr	r5, [r3, #12]
    553a:	4225      	tst	r5, r4
    553c:	d0fc      	beq.n	5538 <SystemInit+0x6c>
  {
    /* Wait for synchronization */
  }

  SYSCTRL->DFLLMUL.reg = SYSCTRL_DFLLMUL_CSTEP( 31 ) | // Coarse step is 31, half of the max value
    553e:	4c31      	ldr	r4, [pc, #196]	; (5604 <SystemInit+0x138>)
    5540:	62dc      	str	r4, [r3, #44]	; 0x2c
                         SYSCTRL_DFLLMUL_FSTEP( 511 ) | // Fine step is 511, half of the max value
                         SYSCTRL_DFLLMUL_MUL( (VARIANT_MCK + VARIANT_MAINOSC/2) / VARIANT_MAINOSC ) ; // External 32KHz is the reference

  while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) == 0 )
    5542:	2410      	movs	r4, #16
    5544:	68dd      	ldr	r5, [r3, #12]
    5546:	4225      	tst	r5, r4
    5548:	d0fc      	beq.n	5544 <SystemInit+0x78>
  SYSCTRL->DFLLCTRL.reg |= SYSCTRL_DFLLCTRL_ENABLE ;

#else   // has crystal

  /* Write full configuration to DFLL control register */
  SYSCTRL->DFLLCTRL.reg |= SYSCTRL_DFLLCTRL_MODE | /* Enable the closed loop mode */
    554a:	8c9d      	ldrh	r5, [r3, #36]	; 0x24
    554c:	4c2e      	ldr	r4, [pc, #184]	; (5608 <SystemInit+0x13c>)
    554e:	432c      	orrs	r4, r5
    5550:	849c      	strh	r4, [r3, #36]	; 0x24
                           SYSCTRL_DFLLCTRL_WAITLOCK |
                           SYSCTRL_DFLLCTRL_QLDIS ; /* Disable Quick lock */

  while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) == 0 )
    5552:	2410      	movs	r4, #16
    5554:	68dd      	ldr	r5, [r3, #12]
    5556:	4225      	tst	r5, r4
    5558:	d0fc      	beq.n	5554 <SystemInit+0x88>
  {
    /* Wait for synchronization */
  }

  /* Enable the DFLL */
  SYSCTRL->DFLLCTRL.reg |= SYSCTRL_DFLLCTRL_ENABLE ;
    555a:	2402      	movs	r4, #2
    555c:	8c9d      	ldrh	r5, [r3, #36]	; 0x24

  while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLLCKC) == 0 ||
    555e:	2680      	movs	r6, #128	; 0x80
  SYSCTRL->DFLLCTRL.reg |= SYSCTRL_DFLLCTRL_ENABLE ;
    5560:	432c      	orrs	r4, r5
    5562:	849c      	strh	r4, [r3, #36]	; 0x24
          (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLLCKF) == 0 )
    5564:	2440      	movs	r4, #64	; 0x40
  while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLLCKC) == 0 ||
    5566:	68dd      	ldr	r5, [r3, #12]
    5568:	4235      	tst	r5, r6
    556a:	d0fc      	beq.n	5566 <SystemInit+0x9a>
          (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLLCKF) == 0 )
    556c:	68dd      	ldr	r5, [r3, #12]
  while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLLCKC) == 0 ||
    556e:	4225      	tst	r5, r4
    5570:	d0f9      	beq.n	5566 <SystemInit+0x9a>
    /* Wait for locks flags */
  }

#endif

  while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) == 0 )
    5572:	2410      	movs	r4, #16
    5574:	68dd      	ldr	r5, [r3, #12]
    5576:	4225      	tst	r5, r4
    5578:	d0fc      	beq.n	5574 <SystemInit+0xa8>
  }

  /* ----------------------------------------------------------------------------------------------
   * 5) Switch Generic Clock Generator 0 to DFLL48M. CPU will run at 48MHz.
   */
  GCLK->GENDIV.reg = GCLK_GENDIV_ID( GENERIC_CLOCK_GENERATOR_MAIN ) ; // Generic Clock Generator 0
    557a:	2400      	movs	r4, #0
    557c:	6094      	str	r4, [r2, #8]

  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY )
    557e:	7854      	ldrb	r4, [r2, #1]
    5580:	b264      	sxtb	r4, r4
    5582:	2c00      	cmp	r4, #0
    5584:	dbfb      	blt.n	557e <SystemInit+0xb2>
  {
    /* Wait for synchronization */
  }

  /* Write Generic Clock Generator 0 configuration */
  GCLK->GENCTRL.reg = GCLK_GENCTRL_ID( GENERIC_CLOCK_GENERATOR_MAIN ) | // Generic Clock Generator 0
    5586:	4c21      	ldr	r4, [pc, #132]	; (560c <SystemInit+0x140>)
    5588:	6054      	str	r4, [r2, #4]
                      GCLK_GENCTRL_SRC_DFLL48M | // Selected source is DFLL 48MHz
//                      GCLK_GENCTRL_OE | // Output clock to a pin for tests
                      GCLK_GENCTRL_IDC | // Set 50/50 duty cycle
                      GCLK_GENCTRL_GENEN ;

  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY )
    558a:	7854      	ldrb	r4, [r2, #1]
    558c:	b264      	sxtb	r4, r4
    558e:	2c00      	cmp	r4, #0
    5590:	dbfb      	blt.n	558a <SystemInit+0xbe>
  }

  /* ----------------------------------------------------------------------------------------------
   * 6) Modify PRESCaler value of OSC8M to have 8MHz
   */
  SYSCTRL->OSC8M.bit.PRESC = SYSCTRL_OSC8M_PRESC_0_Val ;  //CMSIS 4.5 changed the prescaler defines
    5592:	6a1c      	ldr	r4, [r3, #32]
    5594:	4d1e      	ldr	r5, [pc, #120]	; (5610 <SystemInit+0x144>)
    5596:	402c      	ands	r4, r5
  SYSCTRL->OSC8M.bit.ONDEMAND = 0 ;
    5598:	2580      	movs	r5, #128	; 0x80
  SYSCTRL->OSC8M.bit.PRESC = SYSCTRL_OSC8M_PRESC_0_Val ;  //CMSIS 4.5 changed the prescaler defines
    559a:	621c      	str	r4, [r3, #32]
  SYSCTRL->OSC8M.bit.ONDEMAND = 0 ;
    559c:	6a1c      	ldr	r4, [r3, #32]
    559e:	43ac      	bics	r4, r5
    55a0:	621c      	str	r4, [r3, #32]

  /* ----------------------------------------------------------------------------------------------
   * 7) Put OSC8M as source for Generic Clock Generator 3
   */
  GCLK->GENDIV.reg = GCLK_GENDIV_ID( GENERIC_CLOCK_GENERATOR_OSC8M ) ; // Generic Clock Generator 3
    55a2:	2303      	movs	r3, #3
    55a4:	6093      	str	r3, [r2, #8]

  /* Write Generic Clock Generator 3 configuration */
  GCLK->GENCTRL.reg = GCLK_GENCTRL_ID( GENERIC_CLOCK_GENERATOR_OSC8M ) | // Generic Clock Generator 3
    55a6:	4b1b      	ldr	r3, [pc, #108]	; (5614 <SystemInit+0x148>)
    55a8:	6053      	str	r3, [r2, #4]
                      GCLK_GENCTRL_SRC_OSC8M | // Selected source is RC OSC 8MHz (already enabled at reset)
//                      GCLK_GENCTRL_OE | // Output clock to a pin for tests
                      GCLK_GENCTRL_GENEN ;

  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY )
    55aa:	7853      	ldrb	r3, [r2, #1]
    55ac:	b25b      	sxtb	r3, r3
    55ae:	2b00      	cmp	r3, #0
    55b0:	dbfb      	blt.n	55aa <SystemInit+0xde>

  /*
   * Now that all system clocks are configured, we can set CPU and APBx BUS clocks.
   * There values are normally the one present after Reset.
   */
  PM->CPUSEL.reg  = PM_CPUSEL_CPUDIV_DIV1 ;
    55b2:	2300      	movs	r3, #0

  // ADC Linearity bits 4:0
  uint32_t linearity = (*((uint32_t *) ADC_FUSES_LINEARITY_0_ADDR) & ADC_FUSES_LINEARITY_0_Msk) >> ADC_FUSES_LINEARITY_0_Pos;

  // ADC Linearity bits 7:5
  linearity |= ((*((uint32_t *) ADC_FUSES_LINEARITY_1_ADDR) & ADC_FUSES_LINEARITY_1_Msk) >> ADC_FUSES_LINEARITY_1_Pos) << 5;
    55b4:	24ff      	movs	r4, #255	; 0xff
  PM->CPUSEL.reg  = PM_CPUSEL_CPUDIV_DIV1 ;
    55b6:	720b      	strb	r3, [r1, #8]
  SystemCoreClock=VARIANT_MCK ;
    55b8:	4a17      	ldr	r2, [pc, #92]	; (5618 <SystemInit+0x14c>)
  PM->APBASEL.reg = PM_APBASEL_APBADIV_DIV1_Val ;
    55ba:	724b      	strb	r3, [r1, #9]
  PM->APBBSEL.reg = PM_APBBSEL_APBBDIV_DIV1_Val ;
    55bc:	728b      	strb	r3, [r1, #10]
  PM->APBCSEL.reg = PM_APBCSEL_APBCDIV_DIV1_Val ;
    55be:	72cb      	strb	r3, [r1, #11]
  SystemCoreClock=VARIANT_MCK ;
    55c0:	4b16      	ldr	r3, [pc, #88]	; (561c <SystemInit+0x150>)
    55c2:	601a      	str	r2, [r3, #0]
  uint32_t bias = (*((uint32_t *) ADC_FUSES_BIASCAL_ADDR) & ADC_FUSES_BIASCAL_Msk) >> ADC_FUSES_BIASCAL_Pos;
    55c4:	4b16      	ldr	r3, [pc, #88]	; (5620 <SystemInit+0x154>)
  uint32_t linearity = (*((uint32_t *) ADC_FUSES_LINEARITY_0_ADDR) & ADC_FUSES_LINEARITY_0_Msk) >> ADC_FUSES_LINEARITY_0_Pos;
    55c6:	4a17      	ldr	r2, [pc, #92]	; (5624 <SystemInit+0x158>)
  uint32_t bias = (*((uint32_t *) ADC_FUSES_BIASCAL_ADDR) & ADC_FUSES_BIASCAL_Msk) >> ADC_FUSES_BIASCAL_Pos;
    55c8:	681b      	ldr	r3, [r3, #0]
  uint32_t linearity = (*((uint32_t *) ADC_FUSES_LINEARITY_0_ADDR) & ADC_FUSES_LINEARITY_0_Msk) >> ADC_FUSES_LINEARITY_0_Pos;
    55ca:	6811      	ldr	r1, [r2, #0]
  uint32_t bias = (*((uint32_t *) ADC_FUSES_BIASCAL_ADDR) & ADC_FUSES_BIASCAL_Msk) >> ADC_FUSES_BIASCAL_Pos;
    55cc:	069a      	lsls	r2, r3, #26
  linearity |= ((*((uint32_t *) ADC_FUSES_LINEARITY_1_ADDR) & ADC_FUSES_LINEARITY_1_Msk) >> ADC_FUSES_LINEARITY_1_Pos) << 5;
    55ce:	015b      	lsls	r3, r3, #5
  uint32_t linearity = (*((uint32_t *) ADC_FUSES_LINEARITY_0_ADDR) & ADC_FUSES_LINEARITY_0_Msk) >> ADC_FUSES_LINEARITY_0_Pos;
    55d0:	0ec9      	lsrs	r1, r1, #27
  linearity |= ((*((uint32_t *) ADC_FUSES_LINEARITY_1_ADDR) & ADC_FUSES_LINEARITY_1_Msk) >> ADC_FUSES_LINEARITY_1_Pos) << 5;
    55d2:	4023      	ands	r3, r4
  uint32_t bias = (*((uint32_t *) ADC_FUSES_BIASCAL_ADDR) & ADC_FUSES_BIASCAL_Msk) >> ADC_FUSES_BIASCAL_Pos;
    55d4:	0f52      	lsrs	r2, r2, #29

  ADC->CALIB.reg = ADC_CALIB_BIAS_CAL(bias) | ADC_CALIB_LINEARITY_CAL(linearity);
    55d6:	0212      	lsls	r2, r2, #8
  linearity |= ((*((uint32_t *) ADC_FUSES_LINEARITY_1_ADDR) & ADC_FUSES_LINEARITY_1_Msk) >> ADC_FUSES_LINEARITY_1_Pos) << 5;
    55d8:	430b      	orrs	r3, r1
  ADC->CALIB.reg = ADC_CALIB_BIAS_CAL(bias) | ADC_CALIB_LINEARITY_CAL(linearity);
    55da:	4313      	orrs	r3, r2
    55dc:	4a12      	ldr	r2, [pc, #72]	; (5628 <SystemInit+0x15c>)
    55de:	8513      	strh	r3, [r2, #40]	; 0x28

  /*
   * 9) Disable automatic NVM write operations
   */
  NVMCTRL->CTRLB.bit.MANW = 1;
    55e0:	2380      	movs	r3, #128	; 0x80
    55e2:	6842      	ldr	r2, [r0, #4]
    55e4:	4313      	orrs	r3, r2
    55e6:	6043      	str	r3, [r0, #4]
}
    55e8:	bd70      	pop	{r4, r5, r6, pc}
    55ea:	46c0      	nop			; (mov r8, r8)
    55ec:	41004000 	.word	0x41004000
    55f0:	40000400 	.word	0x40000400
    55f4:	0000060c 	.word	0x0000060c
    55f8:	40000800 	.word	0x40000800
    55fc:	40000c00 	.word	0x40000c00
    5600:	00010501 	.word	0x00010501
    5604:	7dff05b9 	.word	0x7dff05b9
    5608:	00000a04 	.word	0x00000a04
    560c:	00030700 	.word	0x00030700
    5610:	fffffcff 	.word	0xfffffcff
    5614:	00010603 	.word	0x00010603
    5618:	02dc6c00 	.word	0x02dc6c00
    561c:	20000084 	.word	0x20000084
    5620:	00806024 	.word	0x00806024
    5624:	00806020 	.word	0x00806020
    5628:	42004000 	.word	0x42004000

0000562c <_ZN7Serial_17availableForWriteEv>:
int Serial_::availableForWrite(void)
{
	// return the number of bytes left in the current bank,
	// always EP size - 1, because bank is flushed on every write
	return (EPX_SIZE - 1);
}
    562c:	203f      	movs	r0, #63	; 0x3f
    562e:	4770      	bx	lr

00005630 <_ZN7Serial_5writeEh>:
		setWriteError();
		return 0;
	}
}

size_t Serial_::write(uint8_t c) {
    5630:	b513      	push	{r0, r1, r4, lr}
    5632:	466b      	mov	r3, sp
	return write(&c, 1);
    5634:	6802      	ldr	r2, [r0, #0]
size_t Serial_::write(uint8_t c) {
    5636:	71d9      	strb	r1, [r3, #7]
    5638:	3307      	adds	r3, #7
	return write(&c, 1);
    563a:	6854      	ldr	r4, [r2, #4]
    563c:	0019      	movs	r1, r3
    563e:	2201      	movs	r2, #1
    5640:	47a0      	blx	r4
}
    5642:	bd16      	pop	{r1, r2, r4, pc}

00005644 <_ZN7Serial_9availableEv>:
{
    5644:	b510      	push	{r4, lr}
	return usb.available(CDC_ENDPOINT_OUT);
    5646:	2102      	movs	r1, #2
    5648:	6900      	ldr	r0, [r0, #16]
    564a:	f000 fc47 	bl	5edc <_ZN14USBDeviceClass9availableEm>
}
    564e:	bd10      	pop	{r4, pc}

00005650 <_ZN7Serial_5flushEv>:
{
    5650:	b510      	push	{r4, lr}
	usb.flush(CDC_ENDPOINT_IN);
    5652:	2103      	movs	r1, #3
    5654:	6900      	ldr	r0, [r0, #16]
    5656:	f000 fc57 	bl	5f08 <_ZN14USBDeviceClass5flushEm>
}
    565a:	bd10      	pop	{r4, pc}

0000565c <_ZN7Serial_5writeEPKhj>:
{
    565c:	b510      	push	{r4, lr}
    565e:	0013      	movs	r3, r2
    5660:	0004      	movs	r4, r0
	uint32_t r = usb.send(CDC_ENDPOINT_IN, buffer, size);
    5662:	000a      	movs	r2, r1
    5664:	6900      	ldr	r0, [r0, #16]
    5666:	2103      	movs	r1, #3
    5668:	f000 fd3a 	bl	60e0 <_ZN14USBDeviceClass4sendEmPKvm>
	if (r > 0) {
    566c:	2800      	cmp	r0, #0
    566e:	d101      	bne.n	5674 <_ZN7Serial_5writeEPKhj+0x18>
    void setWriteError(int err = 1) { write_error = err; }
    5670:	2301      	movs	r3, #1
    5672:	6063      	str	r3, [r4, #4]
}
    5674:	bd10      	pop	{r4, pc}
	...

00005678 <_ZN7Serial_4peekEv>:
{
    5678:	b510      	push	{r4, lr}
	if (_serialPeek != -1)
    567a:	4c05      	ldr	r4, [pc, #20]	; (5690 <_ZN7Serial_4peekEv+0x18>)
    567c:	6823      	ldr	r3, [r4, #0]
    567e:	1c5a      	adds	r2, r3, #1
    5680:	d104      	bne.n	568c <_ZN7Serial_4peekEv+0x14>
	_serialPeek = read();
    5682:	6803      	ldr	r3, [r0, #0]
    5684:	695b      	ldr	r3, [r3, #20]
    5686:	4798      	blx	r3
    5688:	0003      	movs	r3, r0
    568a:	6020      	str	r0, [r4, #0]
}
    568c:	0018      	movs	r0, r3
    568e:	bd10      	pop	{r4, pc}
    5690:	20000058 	.word	0x20000058

00005694 <_ZN7Serial_4readEv>:
	if (_serialPeek != -1) {
    5694:	4b07      	ldr	r3, [pc, #28]	; (56b4 <_ZN7Serial_4readEv+0x20>)
{
    5696:	0002      	movs	r2, r0
	if (_serialPeek != -1) {
    5698:	6818      	ldr	r0, [r3, #0]
{
    569a:	b510      	push	{r4, lr}
	if (_serialPeek != -1) {
    569c:	1c41      	adds	r1, r0, #1
    569e:	d003      	beq.n	56a8 <_ZN7Serial_4readEv+0x14>
		_serialPeek = -1;
    56a0:	2201      	movs	r2, #1
    56a2:	4252      	negs	r2, r2
    56a4:	601a      	str	r2, [r3, #0]
}
    56a6:	bd10      	pop	{r4, pc}
	return usb.recv(CDC_ENDPOINT_OUT);
    56a8:	2102      	movs	r1, #2
    56aa:	6910      	ldr	r0, [r2, #16]
    56ac:	f000 fd0a 	bl	60c4 <_ZN14USBDeviceClass4recvEm>
    56b0:	e7f9      	b.n	56a6 <_ZN7Serial_4readEv+0x12>
    56b2:	46c0      	nop			; (mov r8, r8)
    56b4:	20000058 	.word	0x20000058

000056b8 <_Z16CDC_GetInterfacePh>:
{
    56b8:	b510      	push	{r4, lr}
	interfaceNum[0] += 2;	// uses 2
    56ba:	7803      	ldrb	r3, [r0, #0]
	return USBDevice.sendControl(&_cdcInterface,sizeof(_cdcInterface));
    56bc:	2242      	movs	r2, #66	; 0x42
	interfaceNum[0] += 2;	// uses 2
    56be:	3302      	adds	r3, #2
    56c0:	7003      	strb	r3, [r0, #0]
	return USBDevice.sendControl(&_cdcInterface,sizeof(_cdcInterface));
    56c2:	4902      	ldr	r1, [pc, #8]	; (56cc <_Z16CDC_GetInterfacePh+0x14>)
    56c4:	4802      	ldr	r0, [pc, #8]	; (56d0 <_Z16CDC_GetInterfacePh+0x18>)
    56c6:	f000 fdab 	bl	6220 <_ZN14USBDeviceClass11sendControlEPKvm>
}
    56ca:	bd10      	pop	{r4, pc}
    56cc:	20000014 	.word	0x20000014
    56d0:	2000060c 	.word	0x2000060c

000056d4 <_Z9CDC_SetupR8USBSetup>:
{
    56d4:	b510      	push	{r4, lr}
	uint8_t requestType = setup.bmRequestType;
    56d6:	7801      	ldrb	r1, [r0, #0]
{
    56d8:	0003      	movs	r3, r0
	uint8_t r = setup.bRequest;
    56da:	7842      	ldrb	r2, [r0, #1]
	return false;
    56dc:	2000      	movs	r0, #0
	if (requestType == REQUEST_DEVICETOHOST_CLASS_INTERFACE)
    56de:	29a1      	cmp	r1, #161	; 0xa1
    56e0:	d108      	bne.n	56f4 <_Z9CDC_SetupR8USBSetup+0x20>
		if (r == CDC_GET_LINE_CODING)
    56e2:	2a21      	cmp	r2, #33	; 0x21
    56e4:	d105      	bne.n	56f2 <_Z9CDC_SetupR8USBSetup+0x1e>
			USBDevice.sendControl((void*)&_usbLineInfo, 7);
    56e6:	3a1a      	subs	r2, #26
    56e8:	4916      	ldr	r1, [pc, #88]	; (5744 <_Z9CDC_SetupR8USBSetup+0x70>)
    56ea:	4817      	ldr	r0, [pc, #92]	; (5748 <_Z9CDC_SetupR8USBSetup+0x74>)
    56ec:	f000 fd98 	bl	6220 <_ZN14USBDeviceClass11sendControlEPKvm>
			return true;
    56f0:	2001      	movs	r0, #1
}
    56f2:	bd10      	pop	{r4, pc}
	if (requestType == REQUEST_HOSTTODEVICE_CLASS_INTERFACE)
    56f4:	2921      	cmp	r1, #33	; 0x21
    56f6:	d1fc      	bne.n	56f2 <_Z9CDC_SetupR8USBSetup+0x1e>
		if (r == CDC_SET_LINE_CODING)
    56f8:	2a20      	cmp	r2, #32
    56fa:	d111      	bne.n	5720 <_Z9CDC_SetupR8USBSetup+0x4c>
			USBDevice.recvControl((void*)&_usbLineInfo, 7);
    56fc:	3a19      	subs	r2, #25
    56fe:	4911      	ldr	r1, [pc, #68]	; (5744 <_Z9CDC_SetupR8USBSetup+0x70>)
    5700:	4811      	ldr	r0, [pc, #68]	; (5748 <_Z9CDC_SetupR8USBSetup+0x74>)
    5702:	f000 fc45 	bl	5f90 <_ZN14USBDeviceClass11recvControlEPvm>
			if (_usbLineInfo.dwDTERate == 1200 && (_usbLineInfo.lineState & 0x01) == 0)
    5706:	2296      	movs	r2, #150	; 0x96
    5708:	4b0e      	ldr	r3, [pc, #56]	; (5744 <_Z9CDC_SetupR8USBSetup+0x70>)
    570a:	00d2      	lsls	r2, r2, #3
    570c:	6819      	ldr	r1, [r3, #0]
    570e:	4291      	cmp	r1, r2
    5710:	d103      	bne.n	571a <_Z9CDC_SetupR8USBSetup+0x46>
    5712:	2401      	movs	r4, #1
    5714:	79d8      	ldrb	r0, [r3, #7]
    5716:	4004      	ands	r4, r0
    5718:	d00e      	beq.n	5738 <_Z9CDC_SetupR8USBSetup+0x64>
				cancelReset();
    571a:	f7ff fe93 	bl	5444 <cancelReset>
    571e:	e00e      	b.n	573e <_Z9CDC_SetupR8USBSetup+0x6a>
		if (r == CDC_SET_CONTROL_LINE_STATE)
    5720:	2a22      	cmp	r2, #34	; 0x22
    5722:	d103      	bne.n	572c <_Z9CDC_SetupR8USBSetup+0x58>
			_usbLineInfo.lineState = setup.wValueL;
    5724:	789a      	ldrb	r2, [r3, #2]
    5726:	4b07      	ldr	r3, [pc, #28]	; (5744 <_Z9CDC_SetupR8USBSetup+0x70>)
    5728:	71da      	strb	r2, [r3, #7]
    572a:	e7ec      	b.n	5706 <_Z9CDC_SetupR8USBSetup+0x32>
		if (CDC_SEND_BREAK == r)
    572c:	2a23      	cmp	r2, #35	; 0x23
    572e:	d1e0      	bne.n	56f2 <_Z9CDC_SetupR8USBSetup+0x1e>
			breakValue = ((uint16_t)setup.wValueH << 8) | setup.wValueL;
    5730:	885a      	ldrh	r2, [r3, #2]
    5732:	4b06      	ldr	r3, [pc, #24]	; (574c <_Z9CDC_SetupR8USBSetup+0x78>)
    5734:	601a      	str	r2, [r3, #0]
			return false;
    5736:	e7dc      	b.n	56f2 <_Z9CDC_SetupR8USBSetup+0x1e>
				initiateReset(250);
    5738:	20fa      	movs	r0, #250	; 0xfa
    573a:	f7ff fe7d 	bl	5438 <initiateReset>
			return false;
    573e:	2000      	movs	r0, #0
    5740:	e7d7      	b.n	56f2 <_Z9CDC_SetupR8USBSetup+0x1e>
    5742:	46c0      	nop			; (mov r8, r8)
    5744:	2000000c 	.word	0x2000000c
    5748:	2000060c 	.word	0x2000060c
    574c:	20000008 	.word	0x20000008

00005750 <_ZN7Serial_5beginEm>:
}
    5750:	4770      	bx	lr
	...

00005754 <_ZN7Serial_cvbEv>:
// setup() before printing to ensure that an application on the host is
// actually ready to receive and display the data.
// We add a short delay before returning to fix a bug observed by Federico
// where the port is configured (lineState != 0) but not quite opened.
Serial_::operator bool()
{
    5754:	b510      	push	{r4, lr}
	// this is here to avoid spurious opening after upload
	if (millis() < 500)
    5756:	f7ff fd5b 	bl	5210 <millis>
    575a:	23f4      	movs	r3, #244	; 0xf4
    575c:	33ff      	adds	r3, #255	; 0xff
		return false;
    575e:	2400      	movs	r4, #0
	if (millis() < 500)
    5760:	4298      	cmp	r0, r3
    5762:	d907      	bls.n	5774 <_ZN7Serial_cvbEv+0x20>

	bool result = false;

	if (_usbLineInfo.lineState > 0)
    5764:	4b04      	ldr	r3, [pc, #16]	; (5778 <_ZN7Serial_cvbEv+0x24>)
	{
		result = true;
	}

	delay(10);
    5766:	200a      	movs	r0, #10
	if (_usbLineInfo.lineState > 0)
    5768:	79dc      	ldrb	r4, [r3, #7]
    576a:	1e63      	subs	r3, r4, #1
    576c:	419c      	sbcs	r4, r3
    576e:	b2e4      	uxtb	r4, r4
	delay(10);
    5770:	f7ff fd84 	bl	527c <delay>
	return result;
}
    5774:	0020      	movs	r0, r4
    5776:	bd10      	pop	{r4, pc}
    5778:	2000000c 	.word	0x2000000c

0000577c <_GLOBAL__sub_I__Z17_CDC_GetInterfacev>:
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
    577c:	22fa      	movs	r2, #250	; 0xfa
    Print() : write_error(0) {}
    577e:	2100      	movs	r1, #0
    5780:	4b05      	ldr	r3, [pc, #20]	; (5798 <_GLOBAL__sub_I__Z17_CDC_GetInterfacev+0x1c>)
    5782:	0092      	lsls	r2, r2, #2
    5784:	609a      	str	r2, [r3, #8]
//	Serial over CDC (Serial1 is the physical port)

class Serial_ : public Stream
{
public:
	Serial_(USBDeviceClass &_usb) : usb(_usb), stalled(false) { }
    5786:	4a05      	ldr	r2, [pc, #20]	; (579c <_GLOBAL__sub_I__Z17_CDC_GetInterfacev+0x20>)
    5788:	6059      	str	r1, [r3, #4]
    578a:	3208      	adds	r2, #8
    578c:	601a      	str	r2, [r3, #0]
    578e:	4a04      	ldr	r2, [pc, #16]	; (57a0 <_GLOBAL__sub_I__Z17_CDC_GetInterfacev+0x24>)
    5790:	7619      	strb	r1, [r3, #24]
    5792:	611a      	str	r2, [r3, #16]

bool Serial_::rts() {
	return _usbLineInfo.lineState & 0x2;
}

Serial_ SerialUSB(USBDevice);
    5794:	4770      	bx	lr
    5796:	46c0      	nop			; (mov r8, r8)
    5798:	200005f0 	.word	0x200005f0
    579c:	0000b92c 	.word	0x0000b92c
    57a0:	2000060c 	.word	0x2000060c

000057a4 <_ZL5utox8mPc>:
	packMessages(false);

	return true;
}

static void utox8(uint32_t val, char* s) {
    57a4:	b530      	push	{r4, r5, lr}
	for (int i = 0; i < 8; i++) {
		int d = val & 0XF;
    57a6:	250f      	movs	r5, #15
    57a8:	1dcb      	adds	r3, r1, #7
    57aa:	3901      	subs	r1, #1
    57ac:	0002      	movs	r2, r0
    57ae:	402a      	ands	r2, r5
		val = (val >> 4);

		s[7 - i] = d > 9 ? 'A' + d - 10 : '0' + d;
    57b0:	0014      	movs	r4, r2
		val = (val >> 4);
    57b2:	0900      	lsrs	r0, r0, #4
		s[7 - i] = d > 9 ? 'A' + d - 10 : '0' + d;
    57b4:	3430      	adds	r4, #48	; 0x30
    57b6:	2a09      	cmp	r2, #9
    57b8:	dd01      	ble.n	57be <_ZL5utox8mPc+0x1a>
    57ba:	3237      	adds	r2, #55	; 0x37
    57bc:	0014      	movs	r4, r2
    57be:	701c      	strb	r4, [r3, #0]
    57c0:	3b01      	subs	r3, #1
	for (int i = 0; i < 8; i++) {
    57c2:	428b      	cmp	r3, r1
    57c4:	d1f2      	bne.n	57ac <_ZL5utox8mPc+0x8>
	}
}
    57c6:	bd30      	pop	{r4, r5, pc}

000057c8 <_ZN26DoubleBufferedEPOutHandlerD1Ev>:
		usbd.epBank0SetAddress(ep, const_cast<uint8_t *>(data0));

		release();
	}

	virtual ~DoubleBufferedEPOutHandler() {
    57c8:	b510      	push	{r4, lr}
    57ca:	0004      	movs	r4, r0
		free((void*)data0);
    57cc:	6980      	ldr	r0, [r0, #24]
    57ce:	f003 fd15 	bl	91fc <free>
		free((void*)data1);
    57d2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    57d4:	f003 fd12 	bl	91fc <free>
	}
    57d8:	0020      	movs	r0, r4
    57da:	bd10      	pop	{r4, pc}

000057dc <_ZN26DoubleBufferedEPOutHandlerD0Ev>:
	virtual ~DoubleBufferedEPOutHandler() {
    57dc:	b510      	push	{r4, lr}
    57de:	0004      	movs	r4, r0
	}
    57e0:	f7ff fff2 	bl	57c8 <_ZN26DoubleBufferedEPOutHandlerD1Ev>
    57e4:	0020      	movs	r0, r4
    57e6:	f7ff fd93 	bl	5310 <_ZdlPv>
    57ea:	0020      	movs	r0, r4
    57ec:	bd10      	pop	{r4, pc}
	...

000057f0 <_ZN14USBDeviceClass6initEPEmm.part.5>:
	for (uint8_t i = 1; i < sizeof(EndPoints) && EndPoints[i] != 0; i++) {
		initEP(i, EndPoints[i]);
	}
}

void USBDeviceClass::initEP(uint32_t ep, uint32_t config)
    57f0:	b570      	push	{r4, r5, r6, lr}
		if (epHandlers[ep] != NULL) {
			delete (DoubleBufferedEPOutHandler*)epHandlers[ep];
		}
		epHandlers[ep] = new DoubleBufferedEPOutHandler(usbd, ep, 256);
	}
	else if (config == (USB_ENDPOINT_TYPE_BULK | USB_ENDPOINT_IN(0)))
    57f2:	2982      	cmp	r1, #130	; 0x82
    57f4:	d11f      	bne.n	5836 <_ZN14USBDeviceClass6initEPEmm.part.5+0x46>
	inline void epBank1SetSize(ep_t ep, uint16_t size) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.SIZE = EP_PCKSIZE_SIZE(size); }
    57f6:	b2c3      	uxtb	r3, r0
    57f8:	4d2c      	ldr	r5, [pc, #176]	; (58ac <_ZN14USBDeviceClass6initEPEmm.part.5+0xbc>)
    57fa:	015a      	lsls	r2, r3, #5
    57fc:	18aa      	adds	r2, r5, r2
    57fe:	6991      	ldr	r1, [r2, #24]
    5800:	4c2b      	ldr	r4, [pc, #172]	; (58b0 <_ZN14USBDeviceClass6initEPEmm.part.5+0xc0>)
	{
		usbd.epBank1SetSize(ep, 64);
		usbd.epBank1SetAddress(ep, &udd_ep_in_cache_buffer[ep]);
    5802:	0180      	lsls	r0, r0, #6
    5804:	400c      	ands	r4, r1
    5806:	21c0      	movs	r1, #192	; 0xc0
    5808:	0589      	lsls	r1, r1, #22
    580a:	4321      	orrs	r1, r4
    580c:	6191      	str	r1, [r2, #24]
    580e:	4929      	ldr	r1, [pc, #164]	; (58b4 <_ZN14USBDeviceClass6initEPEmm.part.5+0xc4>)
	inline void epBank1ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK1RDY = 1; }
    5810:	3308      	adds	r3, #8
    5812:	1808      	adds	r0, r1, r0
    5814:	2180      	movs	r1, #128	; 0x80
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
    5816:	6150      	str	r0, [r2, #20]
	inline void epBank1ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK1RDY = 1; }
    5818:	682a      	ldr	r2, [r5, #0]
    581a:	015b      	lsls	r3, r3, #5
    581c:	18d0      	adds	r0, r2, r3
    581e:	7904      	ldrb	r4, [r0, #4]
    5820:	4249      	negs	r1, r1
    5822:	4321      	orrs	r1, r4
    5824:	7101      	strb	r1, [r0, #4]
	inline void epBank1SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE1 = type; }
    5826:	2070      	movs	r0, #112	; 0x70
    5828:	5c99      	ldrb	r1, [r3, r2]
    582a:	4381      	bics	r1, r0
    582c:	0008      	movs	r0, r1
    582e:	2130      	movs	r1, #48	; 0x30
    5830:	4301      	orrs	r1, r0
    5832:	5499      	strb	r1, [r3, r2]
		usbd.epBank0SetByteCount(ep, 0);

		// NAK on endpoint OUT, the bank is full.
		usbd.epBank0SetReady(ep);
	}
}
    5834:	bd70      	pop	{r4, r5, r6, pc}
	else if (config == USB_ENDPOINT_TYPE_CONTROL)
    5836:	2900      	cmp	r1, #0
    5838:	d1fc      	bne.n	5834 <_ZN14USBDeviceClass6initEPEmm.part.5+0x44>
	inline void epBank0SetSize(ep_t ep, uint16_t size) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.SIZE = EP_PCKSIZE_SIZE(size); }
    583a:	24c0      	movs	r4, #192	; 0xc0
    583c:	b2c1      	uxtb	r1, r0
    583e:	4e1b      	ldr	r6, [pc, #108]	; (58ac <_ZN14USBDeviceClass6initEPEmm.part.5+0xbc>)
    5840:	014b      	lsls	r3, r1, #5
    5842:	18f3      	adds	r3, r6, r3
    5844:	689a      	ldr	r2, [r3, #8]
    5846:	4d1a      	ldr	r5, [pc, #104]	; (58b0 <_ZN14USBDeviceClass6initEPEmm.part.5+0xc0>)
    5848:	05a4      	lsls	r4, r4, #22
    584a:	402a      	ands	r2, r5
    584c:	4322      	orrs	r2, r4
    584e:	609a      	str	r2, [r3, #8]
		usbd.epBank0SetAddress(ep, &udd_ep_out_cache_buffer[ep]);
    5850:	4a19      	ldr	r2, [pc, #100]	; (58b8 <_ZN14USBDeviceClass6initEPEmm.part.5+0xc8>)
    5852:	0180      	lsls	r0, r0, #6
    5854:	1810      	adds	r0, r2, r0
	inline void epBank0SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE0 = type; }
    5856:	000a      	movs	r2, r1
	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
    5858:	6058      	str	r0, [r3, #4]
	inline void epBank0SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE0 = type; }
    585a:	6830      	ldr	r0, [r6, #0]
    585c:	2607      	movs	r6, #7
    585e:	3208      	adds	r2, #8
    5860:	0152      	lsls	r2, r2, #5
    5862:	5c11      	ldrb	r1, [r2, r0]
    5864:	43b1      	bics	r1, r6
    5866:	000e      	movs	r6, r1
    5868:	2101      	movs	r1, #1
    586a:	4331      	orrs	r1, r6
    586c:	5411      	strb	r1, [r2, r0]
	inline void epBank1SetSize(ep_t ep, uint16_t size) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.SIZE = EP_PCKSIZE_SIZE(size); }
    586e:	6999      	ldr	r1, [r3, #24]
    5870:	400d      	ands	r5, r1
    5872:	432c      	orrs	r4, r5
    5874:	619c      	str	r4, [r3, #24]
	inline void epBank1SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE1 = type; }
    5876:	2470      	movs	r4, #112	; 0x70
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
    5878:	490e      	ldr	r1, [pc, #56]	; (58b4 <_ZN14USBDeviceClass6initEPEmm.part.5+0xc4>)
    587a:	6159      	str	r1, [r3, #20]
	inline void epBank1SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE1 = type; }
    587c:	5c11      	ldrb	r1, [r2, r0]
    587e:	43a1      	bics	r1, r4
    5880:	000c      	movs	r4, r1
    5882:	2110      	movs	r1, #16
    5884:	4321      	orrs	r1, r4
    5886:	5411      	strb	r1, [r2, r0]
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
    5888:	6899      	ldr	r1, [r3, #8]
    588a:	4c0c      	ldr	r4, [pc, #48]	; (58bc <_ZN14USBDeviceClass6initEPEmm.part.5+0xcc>)
	inline void epBank0SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK0RDY = 1; }
    588c:	1882      	adds	r2, r0, r2
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
    588e:	400c      	ands	r4, r1
    5890:	2180      	movs	r1, #128	; 0x80
    5892:	0349      	lsls	r1, r1, #13
    5894:	4321      	orrs	r1, r4
    5896:	6099      	str	r1, [r3, #8]
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
    5898:	6899      	ldr	r1, [r3, #8]
    589a:	0b89      	lsrs	r1, r1, #14
    589c:	0389      	lsls	r1, r1, #14
    589e:	6099      	str	r1, [r3, #8]
	inline void epBank0SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK0RDY = 1; }
    58a0:	2340      	movs	r3, #64	; 0x40
    58a2:	7951      	ldrb	r1, [r2, #5]
    58a4:	430b      	orrs	r3, r1
    58a6:	7153      	strb	r3, [r2, #5]
    58a8:	e7c4      	b.n	5834 <_ZN14USBDeviceClass6initEPEmm.part.5+0x44>
    58aa:	46c0      	nop			; (mov r8, r8)
    58ac:	20000ac4 	.word	0x20000ac4
    58b0:	8fffffff 	.word	0x8fffffff
    58b4:	20000638 	.word	0x20000638
    58b8:	200007f8 	.word	0x200007f8
    58bc:	f0003fff 	.word	0xf0003fff

000058c0 <_ZN20USBDevice_SAMD21G18x5resetEv>:
void USBDevice_SAMD21G18x::reset() {
    58c0:	b570      	push	{r4, r5, r6, lr}
	usb.CTRLA.bit.SWRST = 1;
    58c2:	0004      	movs	r4, r0
    58c4:	2301      	movs	r3, #1
    58c6:	cc20      	ldmia	r4!, {r5}
	memset(EP, 0, sizeof(EP));
    58c8:	2100      	movs	r1, #0
	usb.CTRLA.bit.SWRST = 1;
    58ca:	782a      	ldrb	r2, [r5, #0]
	memset(EP, 0, sizeof(EP));
    58cc:	0020      	movs	r0, r4
	usb.CTRLA.bit.SWRST = 1;
    58ce:	4313      	orrs	r3, r2
	memset(EP, 0, sizeof(EP));
    58d0:	2280      	movs	r2, #128	; 0x80
	usb.CTRLA.bit.SWRST = 1;
    58d2:	702b      	strb	r3, [r5, #0]
	memset(EP, 0, sizeof(EP));
    58d4:	0052      	lsls	r2, r2, #1
    58d6:	f003 fcd7 	bl	9288 <memset>
	while (usb.SYNCBUSY.bit.SWRST) {}
    58da:	78ab      	ldrb	r3, [r5, #2]
    58dc:	07db      	lsls	r3, r3, #31
    58de:	d4fc      	bmi.n	58da <_ZN20USBDevice_SAMD21G18x5resetEv+0x1a>
	usb.DESCADD.reg = (uint32_t)(&EP);
    58e0:	626c      	str	r4, [r5, #36]	; 0x24
}
    58e2:	bd70      	pop	{r4, r5, r6, pc}

000058e4 <_ZN20USBDevice_SAMD21G18x9calibrateEv>:
	uint32_t pad_transn = (*pad_transn_p & USB_FUSES_TRANSN_Msk) >> USB_FUSES_TRANSN_Pos;
    58e4:	221f      	movs	r2, #31
    58e6:	4b14      	ldr	r3, [pc, #80]	; (5938 <_ZN20USBDevice_SAMD21G18x9calibrateEv+0x54>)
void USBDevice_SAMD21G18x::calibrate() {
    58e8:	b570      	push	{r4, r5, r6, lr}
	uint32_t pad_transn = (*pad_transn_p & USB_FUSES_TRANSN_Msk) >> USB_FUSES_TRANSN_Pos;
    58ea:	681b      	ldr	r3, [r3, #0]
    58ec:	0b59      	lsrs	r1, r3, #13
	uint32_t pad_transp = (*pad_transp_p & USB_FUSES_TRANSP_Msk) >> USB_FUSES_TRANSP_Pos;
    58ee:	0c9c      	lsrs	r4, r3, #18
	uint32_t pad_trim   = (*pad_trim_p   & USB_FUSES_TRIM_Msk  ) >> USB_FUSES_TRIM_Pos;
    58f0:	019b      	lsls	r3, r3, #6
	uint32_t pad_transn = (*pad_transn_p & USB_FUSES_TRANSN_Msk) >> USB_FUSES_TRANSN_Pos;
    58f2:	4011      	ands	r1, r2
	uint32_t pad_trim   = (*pad_trim_p   & USB_FUSES_TRIM_Msk  ) >> USB_FUSES_TRIM_Pos;
    58f4:	0f5b      	lsrs	r3, r3, #29
	uint32_t pad_transp = (*pad_transp_p & USB_FUSES_TRANSP_Msk) >> USB_FUSES_TRANSP_Pos;
    58f6:	4022      	ands	r2, r4
	if (pad_transn == 0x1F)  // maximum value (31)
    58f8:	291f      	cmp	r1, #31
    58fa:	d100      	bne.n	58fe <_ZN20USBDevice_SAMD21G18x9calibrateEv+0x1a>
		pad_transn = 5;
    58fc:	391a      	subs	r1, #26
	if (pad_transp == 0x1F)  // maximum value (31)
    58fe:	2a1f      	cmp	r2, #31
    5900:	d100      	bne.n	5904 <_ZN20USBDevice_SAMD21G18x9calibrateEv+0x20>
		pad_transp = 29;
    5902:	3a02      	subs	r2, #2
	if (pad_trim == 0x7)     // maximum value (7)
    5904:	2b07      	cmp	r3, #7
    5906:	d100      	bne.n	590a <_ZN20USBDevice_SAMD21G18x9calibrateEv+0x26>
		pad_trim = 3;
    5908:	3b04      	subs	r3, #4
	usb.PADCAL.bit.TRANSN = pad_transn;
    590a:	251f      	movs	r5, #31
    590c:	6800      	ldr	r0, [r0, #0]
    590e:	018e      	lsls	r6, r1, #6
    5910:	8d04      	ldrh	r4, [r0, #40]	; 0x28
    5912:	490a      	ldr	r1, [pc, #40]	; (593c <_ZN20USBDevice_SAMD21G18x9calibrateEv+0x58>)
	usb.PADCAL.bit.TRANSP = pad_transp;
    5914:	402a      	ands	r2, r5
	usb.PADCAL.bit.TRANSN = pad_transn;
    5916:	4021      	ands	r1, r4
    5918:	4331      	orrs	r1, r6
    591a:	8501      	strh	r1, [r0, #40]	; 0x28
	usb.PADCAL.bit.TRANSP = pad_transp;
    591c:	8d01      	ldrh	r1, [r0, #40]	; 0x28
    591e:	0014      	movs	r4, r2
    5920:	000a      	movs	r2, r1
    5922:	43aa      	bics	r2, r5
    5924:	4322      	orrs	r2, r4
    5926:	8502      	strh	r2, [r0, #40]	; 0x28
	usb.PADCAL.bit.TRIM   = pad_trim;
    5928:	8d02      	ldrh	r2, [r0, #40]	; 0x28
    592a:	0319      	lsls	r1, r3, #12
    592c:	4b04      	ldr	r3, [pc, #16]	; (5940 <_ZN20USBDevice_SAMD21G18x9calibrateEv+0x5c>)
    592e:	4013      	ands	r3, r2
    5930:	430b      	orrs	r3, r1
    5932:	8503      	strh	r3, [r0, #40]	; 0x28
}
    5934:	bd70      	pop	{r4, r5, r6, pc}
    5936:	46c0      	nop			; (mov r8, r8)
    5938:	00806024 	.word	0x00806024
    593c:	fffff83f 	.word	0xfffff83f
    5940:	ffff8fff 	.word	0xffff8fff

00005944 <_ZN7__GuardC1Ev>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    5944:	f3ef 8310 	mrs	r3, PRIMASK
	__Guard() : primask(__get_PRIMASK()), loops(1) {
    5948:	6003      	str	r3, [r0, #0]
    594a:	2301      	movs	r3, #1
    594c:	6043      	str	r3, [r0, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    594e:	b672      	cpsid	i
	}
    5950:	4770      	bx	lr

00005952 <_ZN7__GuardD1Ev>:
		if (primask == 0) {
    5952:	6803      	ldr	r3, [r0, #0]
    5954:	2b00      	cmp	r3, #0
    5956:	d102      	bne.n	595e <_ZN7__GuardD1Ev+0xc>
  __ASM volatile ("cpsie i" : : : "memory");
    5958:	b662      	cpsie	i
  __ASM volatile ("isb 0xF":::"memory");
    595a:	f3bf 8f6f 	isb	sy
	}
    595e:	4770      	bx	lr

00005960 <_ZNK26DoubleBufferedEPOutHandler9availableEv>:
			release();
		}
	}

	// Returns how many bytes are stored in the buffers
	virtual uint32_t available() const {
    5960:	b537      	push	{r0, r1, r2, r4, r5, lr}
		if (current == 0) {
    5962:	6905      	ldr	r5, [r0, #16]
	virtual uint32_t available() const {
    5964:	0004      	movs	r4, r0
			bool ready = false;
			synchronized {
    5966:	4668      	mov	r0, sp
		if (current == 0) {
    5968:	2d00      	cmp	r5, #0
    596a:	d114      	bne.n	5996 <_ZNK26DoubleBufferedEPOutHandler9availableEv+0x36>
			synchronized {
    596c:	f7ff ffea 	bl	5944 <_ZN7__GuardC1Ev>
    5970:	9b01      	ldr	r3, [sp, #4]
				ready = ready0;
    5972:	1d62      	adds	r2, r4, #5
			synchronized {
    5974:	3b01      	subs	r3, #1
    5976:	d302      	bcc.n	597e <_ZNK26DoubleBufferedEPOutHandler9availableEv+0x1e>
				ready = ready0;
    5978:	7fd5      	ldrb	r5, [r2, #31]
    597a:	b2ed      	uxtb	r5, r5
    597c:	e7fa      	b.n	5974 <_ZNK26DoubleBufferedEPOutHandler9availableEv+0x14>
			synchronized {
    597e:	4668      	mov	r0, sp
    5980:	9301      	str	r3, [sp, #4]
    5982:	f7ff ffe6 	bl	5952 <_ZN7__GuardD1Ev>
			}
			return ready ? (last0 - first0) : 0;
    5986:	2d00      	cmp	r5, #0
    5988:	d101      	bne.n	598e <_ZNK26DoubleBufferedEPOutHandler9availableEv+0x2e>
    598a:	2000      	movs	r0, #0
			synchronized {
				ready = ready1;
			}
			return ready ? (last1 - first1) : 0;
		}
	}
    598c:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
			return ready ? (last0 - first0) : 0;
    598e:	6a20      	ldr	r0, [r4, #32]
    5990:	69e3      	ldr	r3, [r4, #28]
			return ready ? (last1 - first1) : 0;
    5992:	1ac0      	subs	r0, r0, r3
    5994:	e7fa      	b.n	598c <_ZNK26DoubleBufferedEPOutHandler9availableEv+0x2c>
			synchronized {
    5996:	f7ff ffd5 	bl	5944 <_ZN7__GuardC1Ev>
				ready = ready1;
    599a:	0022      	movs	r2, r4
			bool ready = false;
    599c:	2500      	movs	r5, #0
    599e:	9b01      	ldr	r3, [sp, #4]
				ready = ready1;
    59a0:	3234      	adds	r2, #52	; 0x34
			synchronized {
    59a2:	3b01      	subs	r3, #1
    59a4:	d302      	bcc.n	59ac <_ZNK26DoubleBufferedEPOutHandler9availableEv+0x4c>
				ready = ready1;
    59a6:	7815      	ldrb	r5, [r2, #0]
    59a8:	b2ed      	uxtb	r5, r5
			synchronized {
    59aa:	e7fa      	b.n	59a2 <_ZNK26DoubleBufferedEPOutHandler9availableEv+0x42>
    59ac:	4668      	mov	r0, sp
    59ae:	9301      	str	r3, [sp, #4]
    59b0:	f7ff ffcf 	bl	5952 <_ZN7__GuardD1Ev>
			return ready ? (last1 - first1) : 0;
    59b4:	2d00      	cmp	r5, #0
    59b6:	d0e8      	beq.n	598a <_ZNK26DoubleBufferedEPOutHandler9availableEv+0x2a>
    59b8:	6b20      	ldr	r0, [r4, #48]	; 0x30
    59ba:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    59bc:	e7e9      	b.n	5992 <_ZNK26DoubleBufferedEPOutHandler9availableEv+0x32>
	...

000059c0 <_ZN26DoubleBufferedEPOutHandler7releaseEv>:

	void release() {
    59c0:	b5f0      	push	{r4, r5, r6, r7, lr}
	inline void epBank0EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT0 = 1; }
    59c2:	2501      	movs	r5, #1
		// Release OUT EP
		usbd.epBank0EnableTransferComplete(ep);
    59c4:	6846      	ldr	r6, [r0, #4]
	inline void epBank0EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT0 = 1; }
    59c6:	7a03      	ldrb	r3, [r0, #8]
    59c8:	6831      	ldr	r1, [r6, #0]
    59ca:	015a      	lsls	r2, r3, #5
    59cc:	188c      	adds	r4, r1, r2
    59ce:	34ff      	adds	r4, #255	; 0xff
    59d0:	7aa7      	ldrb	r7, [r4, #10]
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
    59d2:	18b2      	adds	r2, r6, r2
	inline void epBank0EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT0 = 1; }
    59d4:	433d      	orrs	r5, r7
    59d6:	72a5      	strb	r5, [r4, #10]
		usbd.epBank0SetMultiPacketSize(ep, size);
    59d8:	68c4      	ldr	r4, [r0, #12]
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
    59da:	4d09      	ldr	r5, [pc, #36]	; (5a00 <_ZN26DoubleBufferedEPOutHandler7releaseEv+0x40>)
    59dc:	6890      	ldr	r0, [r2, #8]
    59de:	04a4      	lsls	r4, r4, #18
    59e0:	4028      	ands	r0, r5
    59e2:	0924      	lsrs	r4, r4, #4
    59e4:	4320      	orrs	r0, r4
    59e6:	6090      	str	r0, [r2, #8]
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
    59e8:	6890      	ldr	r0, [r2, #8]
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
    59ea:	3308      	adds	r3, #8
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
    59ec:	0b80      	lsrs	r0, r0, #14
    59ee:	0380      	lsls	r0, r0, #14
    59f0:	6090      	str	r0, [r2, #8]
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
    59f2:	2240      	movs	r2, #64	; 0x40
    59f4:	015b      	lsls	r3, r3, #5
    59f6:	18cb      	adds	r3, r1, r3
    59f8:	7919      	ldrb	r1, [r3, #4]
    59fa:	430a      	orrs	r2, r1
    59fc:	711a      	strb	r2, [r3, #4]
		usbd.epBank0SetByteCount(ep, 0);
		usbd.epBank0ResetReady(ep);
	}
    59fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5a00:	f0003fff 	.word	0xf0003fff

00005a04 <_ZN26DoubleBufferedEPOutHandler4recvEPvm>:
	virtual uint32_t recv(void *_data, uint32_t len)
    5a04:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
		if (current == 0) {
    5a06:	6903      	ldr	r3, [r0, #16]
	virtual uint32_t recv(void *_data, uint32_t len)
    5a08:	0004      	movs	r4, r0
    5a0a:	000e      	movs	r6, r1
    5a0c:	0017      	movs	r7, r2
			synchronized {
    5a0e:	4668      	mov	r0, sp
		if (current == 0) {
    5a10:	2b00      	cmp	r3, #0
    5a12:	d13d      	bne.n	5a90 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x8c>
			synchronized {
    5a14:	f7ff ff96 	bl	5944 <_ZN7__GuardC1Ev>
    5a18:	9b01      	ldr	r3, [sp, #4]
				if (!ready0) {
    5a1a:	1d61      	adds	r1, r4, #5
    5a1c:	3b01      	subs	r3, #1
			synchronized {
    5a1e:	1c5a      	adds	r2, r3, #1
    5a20:	d00c      	beq.n	5a3c <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x38>
				if (!ready0) {
    5a22:	7fcd      	ldrb	r5, [r1, #31]
    5a24:	1e5a      	subs	r2, r3, #1
    5a26:	b2ed      	uxtb	r5, r5
    5a28:	2d00      	cmp	r5, #0
    5a2a:	d105      	bne.n	5a38 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x34>
				synchronized {
    5a2c:	4668      	mov	r0, sp
    5a2e:	9301      	str	r3, [sp, #4]
    5a30:	f7ff ff8f 	bl	5952 <_ZN7__GuardD1Ev>
	}
    5a34:	0028      	movs	r0, r5
    5a36:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    5a38:	0013      	movs	r3, r2
    5a3a:	e7f0      	b.n	5a1e <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x1a>
			synchronized {
    5a3c:	4668      	mov	r0, sp
    5a3e:	9301      	str	r3, [sp, #4]
			for (i=0; i<len && first0 < last0; i++) {
    5a40:	2500      	movs	r5, #0
			synchronized {
    5a42:	f7ff ff86 	bl	5952 <_ZN7__GuardD1Ev>
    5a46:	69e3      	ldr	r3, [r4, #28]
			for (i=0; i<len && first0 < last0; i++) {
    5a48:	42af      	cmp	r7, r5
    5a4a:	d002      	beq.n	5a52 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x4e>
    5a4c:	6a22      	ldr	r2, [r4, #32]
    5a4e:	4293      	cmp	r3, r2
    5a50:	d357      	bcc.n	5b02 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0xfe>
			if (first0 == last0) {
    5a52:	6a22      	ldr	r2, [r4, #32]
    5a54:	4293      	cmp	r3, r2
    5a56:	d1ed      	bne.n	5a34 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x30>
				first0 = 0;
    5a58:	2300      	movs	r3, #0
    5a5a:	61e3      	str	r3, [r4, #28]
				current = 1;
    5a5c:	3301      	adds	r3, #1
    5a5e:	6123      	str	r3, [r4, #16]
				synchronized {
    5a60:	4668      	mov	r0, sp
    5a62:	f7ff ff6f 	bl	5944 <_ZN7__GuardC1Ev>
					if (notify) {
    5a66:	0022      	movs	r2, r4
					ready0 = false;
    5a68:	2100      	movs	r1, #0
    5a6a:	9b01      	ldr	r3, [sp, #4]
    5a6c:	1d67      	adds	r7, r4, #5
    5a6e:	3b01      	subs	r3, #1
					if (notify) {
    5a70:	3235      	adds	r2, #53	; 0x35
				synchronized {
    5a72:	1c58      	adds	r0, r3, #1
    5a74:	d0da      	beq.n	5a2c <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x28>
					ready0 = false;
    5a76:	77f9      	strb	r1, [r7, #31]
					if (notify) {
    5a78:	7810      	ldrb	r0, [r2, #0]
    5a7a:	1e5e      	subs	r6, r3, #1
    5a7c:	2800      	cmp	r0, #0
    5a7e:	d005      	beq.n	5a8c <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x88>
						notify = false;
    5a80:	7011      	strb	r1, [r2, #0]
						release();
    5a82:	0020      	movs	r0, r4
    5a84:	9301      	str	r3, [sp, #4]
    5a86:	f7ff ff9b 	bl	59c0 <_ZN26DoubleBufferedEPOutHandler7releaseEv>
    5a8a:	e7ec      	b.n	5a66 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x62>
					if (notify) {
    5a8c:	0033      	movs	r3, r6
    5a8e:	e7f0      	b.n	5a72 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x6e>
			synchronized {
    5a90:	f7ff ff58 	bl	5944 <_ZN7__GuardC1Ev>
				if (!ready1) {
    5a94:	0021      	movs	r1, r4
    5a96:	9b01      	ldr	r3, [sp, #4]
    5a98:	3134      	adds	r1, #52	; 0x34
    5a9a:	3b01      	subs	r3, #1
			synchronized {
    5a9c:	1c5a      	adds	r2, r3, #1
    5a9e:	d006      	beq.n	5aae <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0xaa>
				if (!ready1) {
    5aa0:	780d      	ldrb	r5, [r1, #0]
    5aa2:	1e5a      	subs	r2, r3, #1
    5aa4:	b2ed      	uxtb	r5, r5
    5aa6:	2d00      	cmp	r5, #0
    5aa8:	d0c0      	beq.n	5a2c <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x28>
    5aaa:	0013      	movs	r3, r2
    5aac:	e7f6      	b.n	5a9c <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x98>
			synchronized {
    5aae:	4668      	mov	r0, sp
    5ab0:	9301      	str	r3, [sp, #4]
			for (i=0; i<len && first1 < last1; i++) {
    5ab2:	2500      	movs	r5, #0
			synchronized {
    5ab4:	f7ff ff4d 	bl	5952 <_ZN7__GuardD1Ev>
    5ab8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
			for (i=0; i<len && first1 < last1; i++) {
    5aba:	42bd      	cmp	r5, r7
    5abc:	d002      	beq.n	5ac4 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0xc0>
    5abe:	6b22      	ldr	r2, [r4, #48]	; 0x30
    5ac0:	4293      	cmp	r3, r2
    5ac2:	d326      	bcc.n	5b12 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x10e>
			if (first1 == last1) {
    5ac4:	6b22      	ldr	r2, [r4, #48]	; 0x30
    5ac6:	4293      	cmp	r3, r2
    5ac8:	d1b4      	bne.n	5a34 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x30>
				first1 = 0;
    5aca:	2300      	movs	r3, #0
				synchronized {
    5acc:	4668      	mov	r0, sp
				first1 = 0;
    5ace:	62e3      	str	r3, [r4, #44]	; 0x2c
				current = 0;
    5ad0:	6123      	str	r3, [r4, #16]
				synchronized {
    5ad2:	f7ff ff37 	bl	5944 <_ZN7__GuardC1Ev>
					ready1 = false;
    5ad6:	0027      	movs	r7, r4
					if (notify) {
    5ad8:	0022      	movs	r2, r4
					ready1 = false;
    5ada:	2100      	movs	r1, #0
    5adc:	9b01      	ldr	r3, [sp, #4]
    5ade:	3734      	adds	r7, #52	; 0x34
    5ae0:	3b01      	subs	r3, #1
					if (notify) {
    5ae2:	3235      	adds	r2, #53	; 0x35
				synchronized {
    5ae4:	1c58      	adds	r0, r3, #1
    5ae6:	d0a1      	beq.n	5a2c <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x28>
					ready1 = false;
    5ae8:	7039      	strb	r1, [r7, #0]
					if (notify) {
    5aea:	7810      	ldrb	r0, [r2, #0]
    5aec:	1e5e      	subs	r6, r3, #1
    5aee:	2800      	cmp	r0, #0
    5af0:	d005      	beq.n	5afe <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0xfa>
						notify = false;
    5af2:	7011      	strb	r1, [r2, #0]
						release();
    5af4:	0020      	movs	r0, r4
    5af6:	9301      	str	r3, [sp, #4]
    5af8:	f7ff ff62 	bl	59c0 <_ZN26DoubleBufferedEPOutHandler7releaseEv>
    5afc:	e7eb      	b.n	5ad6 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0xd2>
    5afe:	0033      	movs	r3, r6
    5b00:	e7f0      	b.n	5ae4 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0xe0>
				data[i] = data0[first0++];
    5b02:	1c5a      	adds	r2, r3, #1
    5b04:	61e2      	str	r2, [r4, #28]
    5b06:	69a2      	ldr	r2, [r4, #24]
    5b08:	18d3      	adds	r3, r2, r3
    5b0a:	781b      	ldrb	r3, [r3, #0]
    5b0c:	5573      	strb	r3, [r6, r5]
			for (i=0; i<len && first0 < last0; i++) {
    5b0e:	3501      	adds	r5, #1
    5b10:	e799      	b.n	5a46 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x42>
				data[i] = data1[first1++];
    5b12:	1c5a      	adds	r2, r3, #1
    5b14:	62e2      	str	r2, [r4, #44]	; 0x2c
    5b16:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    5b18:	18d3      	adds	r3, r2, r3
    5b1a:	781b      	ldrb	r3, [r3, #0]
    5b1c:	5573      	strb	r3, [r6, r5]
			for (i=0; i<len && first1 < last1; i++) {
    5b1e:	3501      	adds	r5, #1
    5b20:	e7ca      	b.n	5ab8 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0xb4>

00005b22 <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv>:
	virtual void handleEndpoint()
    5b22:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	inline bool epBank0IsTransferComplete(ep_t ep)  { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.TRCPT0; }
    5b24:	7a02      	ldrb	r2, [r0, #8]
		if (usbd.epBank0IsTransferComplete(ep))
    5b26:	6843      	ldr	r3, [r0, #4]
	inline bool epBank0IsTransferComplete(ep_t ep)  { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.TRCPT0; }
    5b28:	0011      	movs	r1, r2
	virtual void handleEndpoint()
    5b2a:	0004      	movs	r4, r0
	inline bool epBank0IsTransferComplete(ep_t ep)  { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.TRCPT0; }
    5b2c:	3108      	adds	r1, #8
    5b2e:	6818      	ldr	r0, [r3, #0]
    5b30:	0149      	lsls	r1, r1, #5
    5b32:	1841      	adds	r1, r0, r1
    5b34:	79c8      	ldrb	r0, [r1, #7]
		if (usbd.epBank0IsTransferComplete(ep))
    5b36:	07c0      	lsls	r0, r0, #31
    5b38:	d527      	bpl.n	5b8a <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0x68>
	inline void epBank0AckTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT(1); }
    5b3a:	2501      	movs	r5, #1
    5b3c:	0152      	lsls	r2, r2, #5
    5b3e:	71cd      	strb	r5, [r1, #7]
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
    5b40:	189b      	adds	r3, r3, r2
    5b42:	689a      	ldr	r2, [r3, #8]
			if (incoming == 0) {
    5b44:	6961      	ldr	r1, [r4, #20]
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
    5b46:	0492      	lsls	r2, r2, #18
    5b48:	0c92      	lsrs	r2, r2, #18
			if (incoming == 0) {
    5b4a:	2900      	cmp	r1, #0
    5b4c:	d121      	bne.n	5b92 <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0x70>
				last0 = usbd.epBank0ByteCount(ep);
    5b4e:	6222      	str	r2, [r4, #32]
				if (last0 != 0) {
    5b50:	6a22      	ldr	r2, [r4, #32]
    5b52:	2a00      	cmp	r2, #0
    5b54:	d03e      	beq.n	5bd4 <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0xb2>
	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
    5b56:	6aa2      	ldr	r2, [r4, #40]	; 0x28
					incoming = 1;
    5b58:	6165      	str	r5, [r4, #20]
					synchronized {
    5b5a:	4668      	mov	r0, sp
	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
    5b5c:	605a      	str	r2, [r3, #4]
					synchronized {
    5b5e:	f7ff fef1 	bl	5944 <_ZN7__GuardC1Ev>
						if (ready1) {
    5b62:	0027      	movs	r7, r4
    5b64:	0021      	movs	r1, r4
    5b66:	9b01      	ldr	r3, [sp, #4]
						ready0 = true;
    5b68:	1d66      	adds	r6, r4, #5
    5b6a:	3b01      	subs	r3, #1
						if (ready1) {
    5b6c:	3734      	adds	r7, #52	; 0x34
    5b6e:	3135      	adds	r1, #53	; 0x35
					synchronized {
    5b70:	1c5a      	adds	r2, r3, #1
    5b72:	d02b      	beq.n	5bcc <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0xaa>
						ready0 = true;
    5b74:	77f5      	strb	r5, [r6, #31]
						if (ready1) {
    5b76:	783a      	ldrb	r2, [r7, #0]
    5b78:	1e58      	subs	r0, r3, #1
    5b7a:	b2d2      	uxtb	r2, r2
    5b7c:	2a00      	cmp	r2, #0
    5b7e:	d005      	beq.n	5b8c <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0x6a>
    5b80:	9301      	str	r3, [sp, #4]
							return;
    5b82:	4668      	mov	r0, sp
							notify = true;
    5b84:	700d      	strb	r5, [r1, #0]
							return;
    5b86:	f7ff fee4 	bl	5952 <_ZN7__GuardD1Ev>
	}
    5b8a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
						notify = false;
    5b8c:	700a      	strb	r2, [r1, #0]
					synchronized {
    5b8e:	0003      	movs	r3, r0
    5b90:	e7ee      	b.n	5b70 <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0x4e>
				last1 = usbd.epBank0ByteCount(ep);
    5b92:	6322      	str	r2, [r4, #48]	; 0x30
				if (last1 != 0) {
    5b94:	6b22      	ldr	r2, [r4, #48]	; 0x30
    5b96:	2a00      	cmp	r2, #0
    5b98:	d01c      	beq.n	5bd4 <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0xb2>
					incoming = 0;
    5b9a:	2200      	movs	r2, #0
    5b9c:	6162      	str	r2, [r4, #20]
	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
    5b9e:	69a2      	ldr	r2, [r4, #24]
					synchronized {
    5ba0:	4668      	mov	r0, sp
	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
    5ba2:	605a      	str	r2, [r3, #4]
					synchronized {
    5ba4:	f7ff fece 	bl	5944 <_ZN7__GuardC1Ev>
						ready1 = true;
    5ba8:	0026      	movs	r6, r4
    5baa:	0021      	movs	r1, r4
    5bac:	9b01      	ldr	r3, [sp, #4]
    5bae:	3634      	adds	r6, #52	; 0x34
    5bb0:	3b01      	subs	r3, #1
						if (ready0) {
    5bb2:	1d67      	adds	r7, r4, #5
    5bb4:	3135      	adds	r1, #53	; 0x35
					synchronized {
    5bb6:	1c5a      	adds	r2, r3, #1
    5bb8:	d008      	beq.n	5bcc <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0xaa>
						ready1 = true;
    5bba:	7035      	strb	r5, [r6, #0]
						if (ready0) {
    5bbc:	7ffa      	ldrb	r2, [r7, #31]
    5bbe:	1e58      	subs	r0, r3, #1
    5bc0:	b2d2      	uxtb	r2, r2
    5bc2:	2a00      	cmp	r2, #0
    5bc4:	d1dc      	bne.n	5b80 <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0x5e>
						notify = false;
    5bc6:	700a      	strb	r2, [r1, #0]
					synchronized {
    5bc8:	0003      	movs	r3, r0
    5bca:	e7f4      	b.n	5bb6 <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0x94>
    5bcc:	4668      	mov	r0, sp
    5bce:	9301      	str	r3, [sp, #4]
    5bd0:	f7ff febf 	bl	5952 <_ZN7__GuardD1Ev>
			release();
    5bd4:	0020      	movs	r0, r4
    5bd6:	f7ff fef3 	bl	59c0 <_ZN26DoubleBufferedEPOutHandler7releaseEv>
    5bda:	e7d6      	b.n	5b8a <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0x68>

00005bdc <_ZN14USBDeviceClass14SendInterfacesEPm>:
{
    5bdc:	b537      	push	{r0, r1, r2, r4, r5, lr}
	uint8_t interfaces = 0;
    5bde:	466b      	mov	r3, sp
    5be0:	1ddc      	adds	r4, r3, #7
    5be2:	2300      	movs	r3, #0
{
    5be4:	000d      	movs	r5, r1
	total[0] += CDC_GetInterface(&interfaces);
    5be6:	0020      	movs	r0, r4
	uint8_t interfaces = 0;
    5be8:	7023      	strb	r3, [r4, #0]
	total[0] += CDC_GetInterface(&interfaces);
    5bea:	f7ff fd65 	bl	56b8 <_Z16CDC_GetInterfacePh>
    5bee:	682b      	ldr	r3, [r5, #0]
    5bf0:	1818      	adds	r0, r3, r0
    5bf2:	6028      	str	r0, [r5, #0]
	total[0] += PluggableUSB().getInterface(&interfaces);
    5bf4:	f001 fb66 	bl	72c4 <_Z12PluggableUSBv>
    5bf8:	0021      	movs	r1, r4
    5bfa:	f001 fb1f 	bl	723c <_ZN13PluggableUSB_12getInterfaceEPh>
    5bfe:	682b      	ldr	r3, [r5, #0]
    5c00:	1818      	adds	r0, r3, r0
    5c02:	6028      	str	r0, [r5, #0]
	return interfaces;
    5c04:	7820      	ldrb	r0, [r4, #0]
}
    5c06:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

00005c08 <_ZN14USBDeviceClass14handleEndpointEh>:
	if (ep == CDC_ENDPOINT_IN)
    5c08:	2903      	cmp	r1, #3
    5c0a:	d10e      	bne.n	5c2a <_ZN14USBDeviceClass14handleEndpointEh+0x22>
	inline void epBank1ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK1RDY = 1; }
    5c0c:	2280      	movs	r2, #128	; 0x80
    5c0e:	4b0e      	ldr	r3, [pc, #56]	; (5c48 <_ZN14USBDeviceClass14handleEndpointEh+0x40>)
    5c10:	3162      	adds	r1, #98	; 0x62
    5c12:	681b      	ldr	r3, [r3, #0]
    5c14:	31ff      	adds	r1, #255	; 0xff
    5c16:	5c58      	ldrb	r0, [r3, r1]
    5c18:	4252      	negs	r2, r2
    5c1a:	4302      	orrs	r2, r0
    5c1c:	545a      	strb	r2, [r3, r1]
	inline void epBank1AckTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT(2); }
    5c1e:	2268      	movs	r2, #104	; 0x68
    5c20:	3963      	subs	r1, #99	; 0x63
    5c22:	39ff      	subs	r1, #255	; 0xff
    5c24:	32ff      	adds	r2, #255	; 0xff
    5c26:	5499      	strb	r1, [r3, r2]
}
    5c28:	4770      	bx	lr
	if (ep == CDC_ENDPOINT_ACM)
    5c2a:	2901      	cmp	r1, #1
    5c2c:	d1fc      	bne.n	5c28 <_ZN14USBDeviceClass14handleEndpointEh+0x20>
	inline void epBank1ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK1RDY = 1; }
    5c2e:	2280      	movs	r2, #128	; 0x80
    5c30:	4b05      	ldr	r3, [pc, #20]	; (5c48 <_ZN14USBDeviceClass14handleEndpointEh+0x40>)
    5c32:	3124      	adds	r1, #36	; 0x24
    5c34:	681b      	ldr	r3, [r3, #0]
    5c36:	31ff      	adds	r1, #255	; 0xff
    5c38:	5c58      	ldrb	r0, [r3, r1]
    5c3a:	4252      	negs	r2, r2
    5c3c:	4302      	orrs	r2, r0
    5c3e:	545a      	strb	r2, [r3, r1]
	inline void epBank1AckTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT(2); }
    5c40:	3923      	subs	r1, #35	; 0x23
    5c42:	39ff      	subs	r1, #255	; 0xff
    5c44:	2228      	movs	r2, #40	; 0x28
    5c46:	e7ed      	b.n	5c24 <_ZN14USBDeviceClass14handleEndpointEh+0x1c>
    5c48:	20000ac4 	.word	0x20000ac4

00005c4c <_ZN14USBDeviceClass4initEv>:
	PM->APBBMASK.reg |= PM_APBBMASK_USB;
    5c4c:	2320      	movs	r3, #32
{
    5c4e:	b570      	push	{r4, r5, r6, lr}
	PM->APBBMASK.reg |= PM_APBBMASK_USB;
    5c50:	4a25      	ldr	r2, [pc, #148]	; (5ce8 <_ZN14USBDeviceClass4initEv+0x9c>)
{
    5c52:	0004      	movs	r4, r0
	PM->APBBMASK.reg |= PM_APBBMASK_USB;
    5c54:	69d1      	ldr	r1, [r2, #28]
	PORT->Group[0].PMUX[PIN_PA24G_USB_DM/2].reg &= ~(0xF << (4 * (PIN_PA24G_USB_DM & 0x01u)));
    5c56:	200f      	movs	r0, #15
	PM->APBBMASK.reg |= PM_APBBMASK_USB;
    5c58:	430b      	orrs	r3, r1
    5c5a:	61d3      	str	r3, [r2, #28]
	PORT->Group[0].PINCFG[PIN_PA24G_USB_DM].bit.PMUXEN = 1;
    5c5c:	2201      	movs	r2, #1
    5c5e:	4923      	ldr	r1, [pc, #140]	; (5cec <_ZN14USBDeviceClass4initEv+0xa0>)
    5c60:	780b      	ldrb	r3, [r1, #0]
    5c62:	4313      	orrs	r3, r2
    5c64:	700b      	strb	r3, [r1, #0]
	PORT->Group[0].PMUX[PIN_PA24G_USB_DM/2].reg &= ~(0xF << (4 * (PIN_PA24G_USB_DM & 0x01u)));
    5c66:	4b22      	ldr	r3, [pc, #136]	; (5cf0 <_ZN14USBDeviceClass4initEv+0xa4>)
    5c68:	7819      	ldrb	r1, [r3, #0]
    5c6a:	4381      	bics	r1, r0
    5c6c:	7019      	strb	r1, [r3, #0]
	PORT->Group[0].PMUX[PIN_PA24G_USB_DM/2].reg |= MUX_PA24G_USB_DM << (4 * (PIN_PA24G_USB_DM & 0x01u));
    5c6e:	2106      	movs	r1, #6
    5c70:	781d      	ldrb	r5, [r3, #0]
    5c72:	4329      	orrs	r1, r5
    5c74:	7019      	strb	r1, [r3, #0]
	PORT->Group[0].PINCFG[PIN_PA25G_USB_DP].bit.PMUXEN = 1;
    5c76:	491f      	ldr	r1, [pc, #124]	; (5cf4 <_ZN14USBDeviceClass4initEv+0xa8>)
    5c78:	780d      	ldrb	r5, [r1, #0]
    5c7a:	432a      	orrs	r2, r5
    5c7c:	700a      	strb	r2, [r1, #0]
	PORT->Group[0].PMUX[PIN_PA25G_USB_DP/2].reg &= ~(0xF << (4 * (PIN_PA25G_USB_DP & 0x01u)));
    5c7e:	781a      	ldrb	r2, [r3, #0]
    5c80:	4002      	ands	r2, r0
    5c82:	701a      	strb	r2, [r3, #0]
	PORT->Group[0].PMUX[PIN_PA25G_USB_DP/2].reg |= MUX_PA25G_USB_DP << (4 * (PIN_PA25G_USB_DP & 0x01u));
    5c84:	2260      	movs	r2, #96	; 0x60
    5c86:	7819      	ldrb	r1, [r3, #0]
    5c88:	430a      	orrs	r2, r1
    5c8a:	701a      	strb	r2, [r3, #0]
	GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(6)     | // Generic Clock Multiplexer 6
    5c8c:	4b1a      	ldr	r3, [pc, #104]	; (5cf8 <_ZN14USBDeviceClass4initEv+0xac>)
    5c8e:	4a1b      	ldr	r2, [pc, #108]	; (5cfc <_ZN14USBDeviceClass4initEv+0xb0>)
    5c90:	805a      	strh	r2, [r3, #2]
	while (GCLK->STATUS.bit.SYNCBUSY)
    5c92:	785a      	ldrb	r2, [r3, #1]
    5c94:	09d2      	lsrs	r2, r2, #7
    5c96:	d1fc      	bne.n	5c92 <_ZN14USBDeviceClass4initEv+0x46>
	USB_SetHandler(&UDD_Handler);
    5c98:	4819      	ldr	r0, [pc, #100]	; (5d00 <_ZN14USBDeviceClass4initEv+0xb4>)
    5c9a:	f7ff fab3 	bl	5204 <USB_SetHandler>
	usbd.reset();
    5c9e:	4d19      	ldr	r5, [pc, #100]	; (5d04 <_ZN14USBDeviceClass4initEv+0xb8>)
    5ca0:	0028      	movs	r0, r5
    5ca2:	f7ff fe0d 	bl	58c0 <_ZN20USBDevice_SAMD21G18x5resetEv>
	usbd.calibrate();
    5ca6:	0028      	movs	r0, r5
    5ca8:	f7ff fe1c 	bl	58e4 <_ZN20USBDevice_SAMD21G18x9calibrateEv>
	inline void setUSBDeviceMode() { usb.CTRLA.bit.MODE = USB_CTRLA_MODE_DEVICE_Val; }
    5cac:	217f      	movs	r1, #127	; 0x7f
    5cae:	682b      	ldr	r3, [r5, #0]
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    5cb0:	20c1      	movs	r0, #193	; 0xc1
    5cb2:	781a      	ldrb	r2, [r3, #0]
    5cb4:	0080      	lsls	r0, r0, #2
    5cb6:	400a      	ands	r2, r1
    5cb8:	701a      	strb	r2, [r3, #0]
	inline void runInStandby()   { usb.CTRLA.bit.RUNSTDBY = 1; }
    5cba:	2204      	movs	r2, #4
    5cbc:	7819      	ldrb	r1, [r3, #0]
    5cbe:	430a      	orrs	r2, r1
	inline void setFullSpeed()       { usb.CTRLB.bit.SPDCONF = USB_DEVICE_CTRLB_SPDCONF_FS_Val;   }
    5cc0:	210c      	movs	r1, #12
	inline void runInStandby()   { usb.CTRLA.bit.RUNSTDBY = 1; }
    5cc2:	701a      	strb	r2, [r3, #0]
	inline void setFullSpeed()       { usb.CTRLB.bit.SPDCONF = USB_DEVICE_CTRLB_SPDCONF_FS_Val;   }
    5cc4:	891a      	ldrh	r2, [r3, #8]
    5cc6:	438a      	bics	r2, r1
    5cc8:	490f      	ldr	r1, [pc, #60]	; (5d08 <_ZN14USBDeviceClass4initEv+0xbc>)
    5cca:	811a      	strh	r2, [r3, #8]
    5ccc:	580a      	ldr	r2, [r1, r0]
    5cce:	0212      	lsls	r2, r2, #8
    5cd0:	0a12      	lsrs	r2, r2, #8
    5cd2:	500a      	str	r2, [r1, r0]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    5cd4:	2280      	movs	r2, #128	; 0x80
    5cd6:	600a      	str	r2, [r1, #0]
	inline void enable()  { usb.CTRLA.bit.ENABLE = 1; }
    5cd8:	7819      	ldrb	r1, [r3, #0]
    5cda:	3a7e      	subs	r2, #126	; 0x7e
    5cdc:	430a      	orrs	r2, r1
    5cde:	701a      	strb	r2, [r3, #0]
	initialized = true;
    5ce0:	2301      	movs	r3, #1
    5ce2:	7023      	strb	r3, [r4, #0]
}
    5ce4:	bd70      	pop	{r4, r5, r6, pc}
    5ce6:	46c0      	nop			; (mov r8, r8)
    5ce8:	40000400 	.word	0x40000400
    5cec:	41004458 	.word	0x41004458
    5cf0:	4100443c 	.word	0x4100443c
    5cf4:	41004459 	.word	0x41004459
    5cf8:	40000c00 	.word	0x40000c00
    5cfc:	00004006 	.word	0x00004006
    5d00:	00006665 	.word	0x00006665
    5d04:	20000ac4 	.word	0x20000ac4
    5d08:	e000e100 	.word	0xe000e100

00005d0c <_ZN14USBDeviceClass6attachEv>:
	if (!initialized)
    5d0c:	7800      	ldrb	r0, [r0, #0]
    5d0e:	2800      	cmp	r0, #0
    5d10:	d010      	beq.n	5d34 <_ZN14USBDeviceClass6attachEv+0x28>
	inline void attach() { usb.CTRLB.bit.DETACH = 0; }
    5d12:	2101      	movs	r1, #1
    5d14:	4b08      	ldr	r3, [pc, #32]	; (5d38 <_ZN14USBDeviceClass6attachEv+0x2c>)
    5d16:	681b      	ldr	r3, [r3, #0]
    5d18:	891a      	ldrh	r2, [r3, #8]
    5d1a:	438a      	bics	r2, r1
    5d1c:	811a      	strh	r2, [r3, #8]
	inline void enableEndOfResetInterrupt()    { usb.INTENSET.bit.EORST = 1; }
    5d1e:	2208      	movs	r2, #8
    5d20:	8b19      	ldrh	r1, [r3, #24]
    5d22:	430a      	orrs	r2, r1
    5d24:	831a      	strh	r2, [r3, #24]
	inline void enableStartOfFrameInterrupt()  { usb.INTENSET.bit.SOF = 1; }
    5d26:	2204      	movs	r2, #4
    5d28:	8b19      	ldrh	r1, [r3, #24]
    5d2a:	430a      	orrs	r2, r1
    5d2c:	831a      	strh	r2, [r3, #24]
	_usbConfiguration = 0;
    5d2e:	2200      	movs	r2, #0
    5d30:	4b02      	ldr	r3, [pc, #8]	; (5d3c <_ZN14USBDeviceClass6attachEv+0x30>)
    5d32:	601a      	str	r2, [r3, #0]
}
    5d34:	4770      	bx	lr
    5d36:	46c0      	nop			; (mov r8, r8)
    5d38:	20000ac4 	.word	0x20000ac4
    5d3c:	20000abc 	.word	0x20000abc

00005d40 <_ZN14USBDeviceClass10setAddressEm>:
{
    5d40:	b510      	push	{r4, lr}
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
    5d42:	4a0f      	ldr	r2, [pc, #60]	; (5d80 <_ZN14USBDeviceClass10setAddressEm+0x40>)
    5d44:	6993      	ldr	r3, [r2, #24]
    5d46:	0b9b      	lsrs	r3, r3, #14
    5d48:	039b      	lsls	r3, r3, #14
    5d4a:	6193      	str	r3, [r2, #24]
	inline void epBank1AckTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT(2); }
    5d4c:	6813      	ldr	r3, [r2, #0]
    5d4e:	2202      	movs	r2, #2
    5d50:	33ff      	adds	r3, #255	; 0xff
    5d52:	721a      	strb	r2, [r3, #8]
	inline void epBank1SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK1RDY = 1; }
    5d54:	7998      	ldrb	r0, [r3, #6]
    5d56:	3a82      	subs	r2, #130	; 0x82
    5d58:	4302      	orrs	r2, r0
    5d5a:	719a      	strb	r2, [r3, #6]
	inline bool epBank1IsTransferComplete(ep_t ep)  { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.TRCPT1; }
    5d5c:	7a1a      	ldrb	r2, [r3, #8]
	while (!usbd.epBank1IsTransferComplete(0)) {}
    5d5e:	0792      	lsls	r2, r2, #30
    5d60:	d5fc      	bpl.n	5d5c <_ZN14USBDeviceClass10setAddressEm+0x1c>
	USB->DEVICE.DADD.bit.DADD = addr; // Address
    5d62:	247f      	movs	r4, #127	; 0x7f
    5d64:	4a07      	ldr	r2, [pc, #28]	; (5d84 <_ZN14USBDeviceClass10setAddressEm+0x44>)
    5d66:	4021      	ands	r1, r4
    5d68:	7a93      	ldrb	r3, [r2, #10]
    5d6a:	0008      	movs	r0, r1
    5d6c:	43a3      	bics	r3, r4
    5d6e:	0019      	movs	r1, r3
	USB->DEVICE.DADD.bit.ADDEN = 1; // Enable
    5d70:	2380      	movs	r3, #128	; 0x80
	USB->DEVICE.DADD.bit.DADD = addr; // Address
    5d72:	4301      	orrs	r1, r0
    5d74:	7291      	strb	r1, [r2, #10]
	USB->DEVICE.DADD.bit.ADDEN = 1; // Enable
    5d76:	7a91      	ldrb	r1, [r2, #10]
    5d78:	425b      	negs	r3, r3
    5d7a:	430b      	orrs	r3, r1
    5d7c:	7293      	strb	r3, [r2, #10]
}
    5d7e:	bd10      	pop	{r4, pc}
    5d80:	20000ac4 	.word	0x20000ac4
    5d84:	41005000 	.word	0x41005000

00005d88 <_ZN14USBDeviceClass25handleClassInterfaceSetupER8USBSetup>:
{
    5d88:	b510      	push	{r4, lr}
	if (CDC_ACM_INTERFACE == i)
    5d8a:	790b      	ldrb	r3, [r1, #4]
{
    5d8c:	000c      	movs	r4, r1
	if (CDC_ACM_INTERFACE == i)
    5d8e:	2b00      	cmp	r3, #0
    5d90:	d10c      	bne.n	5dac <_ZN14USBDeviceClass25handleClassInterfaceSetupER8USBSetup+0x24>
		if (CDC_Setup(setup) == false) {
    5d92:	0008      	movs	r0, r1
    5d94:	f7ff fc9e 	bl	56d4 <_Z9CDC_SetupR8USBSetup>
    5d98:	2800      	cmp	r0, #0
    5d9a:	d001      	beq.n	5da0 <_ZN14USBDeviceClass25handleClassInterfaceSetupER8USBSetup+0x18>
		return true;
    5d9c:	2001      	movs	r0, #1
}
    5d9e:	bd10      	pop	{r4, pc}
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
    5da0:	4a09      	ldr	r2, [pc, #36]	; (5dc8 <_ZN14USBDeviceClass25handleClassInterfaceSetupER8USBSetup+0x40>)
    5da2:	6993      	ldr	r3, [r2, #24]
    5da4:	0b9b      	lsrs	r3, r3, #14
    5da6:	039b      	lsls	r3, r3, #14
    5da8:	6193      	str	r3, [r2, #24]
    5daa:	e7f7      	b.n	5d9c <_ZN14USBDeviceClass25handleClassInterfaceSetupER8USBSetup+0x14>
	bool ret = PluggableUSB().setup(setup);
    5dac:	f001 fa8a 	bl	72c4 <_Z12PluggableUSBv>
    5db0:	0021      	movs	r1, r4
    5db2:	f001 fa76 	bl	72a2 <_ZN13PluggableUSB_5setupER8USBSetup>
	if ( ret == false) {
    5db6:	2800      	cmp	r0, #0
    5db8:	d1f0      	bne.n	5d9c <_ZN14USBDeviceClass25handleClassInterfaceSetupER8USBSetup+0x14>
    5dba:	4a03      	ldr	r2, [pc, #12]	; (5dc8 <_ZN14USBDeviceClass25handleClassInterfaceSetupER8USBSetup+0x40>)
    5dbc:	6993      	ldr	r3, [r2, #24]
    5dbe:	0b9b      	lsrs	r3, r3, #14
    5dc0:	039b      	lsls	r3, r3, #14
    5dc2:	6193      	str	r3, [r2, #24]
    5dc4:	e7eb      	b.n	5d9e <_ZN14USBDeviceClass25handleClassInterfaceSetupER8USBSetup+0x16>
    5dc6:	46c0      	nop			; (mov r8, r8)
    5dc8:	20000ac4 	.word	0x20000ac4

00005dcc <_ZN14USBDeviceClass6initEPEmm>:
{
    5dcc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    5dce:	000d      	movs	r5, r1
	if (config == (USB_ENDPOINT_TYPE_INTERRUPT | USB_ENDPOINT_IN(0)))
    5dd0:	2a83      	cmp	r2, #131	; 0x83
    5dd2:	d119      	bne.n	5e08 <_ZN14USBDeviceClass6initEPEmm+0x3c>
	inline void epBank1SetSize(ep_t ep, uint16_t size) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.SIZE = EP_PCKSIZE_SIZE(size); }
    5dd4:	b2cb      	uxtb	r3, r1
    5dd6:	4c33      	ldr	r4, [pc, #204]	; (5ea4 <_ZN14USBDeviceClass6initEPEmm+0xd8>)
    5dd8:	015a      	lsls	r2, r3, #5
    5dda:	18a2      	adds	r2, r4, r2
    5ddc:	6991      	ldr	r1, [r2, #24]
    5dde:	4832      	ldr	r0, [pc, #200]	; (5ea8 <_ZN14USBDeviceClass6initEPEmm+0xdc>)
		usbd.epBank1SetAddress(ep, &udd_ep_in_cache_buffer[ep]);
    5de0:	01ad      	lsls	r5, r5, #6
    5de2:	4008      	ands	r0, r1
    5de4:	21c0      	movs	r1, #192	; 0xc0
    5de6:	0589      	lsls	r1, r1, #22
    5de8:	4301      	orrs	r1, r0
    5dea:	6191      	str	r1, [r2, #24]
    5dec:	492f      	ldr	r1, [pc, #188]	; (5eac <_ZN14USBDeviceClass6initEPEmm+0xe0>)
	inline void epBank1SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE1 = type; }
    5dee:	6820      	ldr	r0, [r4, #0]
    5df0:	194d      	adds	r5, r1, r5
    5df2:	2170      	movs	r1, #112	; 0x70
    5df4:	3308      	adds	r3, #8
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
    5df6:	6155      	str	r5, [r2, #20]
	inline void epBank1SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE1 = type; }
    5df8:	015b      	lsls	r3, r3, #5
    5dfa:	5c1a      	ldrb	r2, [r3, r0]
    5dfc:	438a      	bics	r2, r1
    5dfe:	0011      	movs	r1, r2
    5e00:	2240      	movs	r2, #64	; 0x40
    5e02:	430a      	orrs	r2, r1
    5e04:	541a      	strb	r2, [r3, r0]
}
    5e06:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
	else if (config == (USB_ENDPOINT_TYPE_BULK | USB_ENDPOINT_OUT(0)))
    5e08:	2a02      	cmp	r2, #2
    5e0a:	d145      	bne.n	5e98 <_ZN14USBDeviceClass6initEPEmm+0xcc>
		if (epHandlers[ep] != NULL) {
    5e0c:	4a28      	ldr	r2, [pc, #160]	; (5eb0 <_ZN14USBDeviceClass6initEPEmm+0xe4>)
    5e0e:	008b      	lsls	r3, r1, #2
    5e10:	5898      	ldr	r0, [r3, r2]
    5e12:	2800      	cmp	r0, #0
    5e14:	d002      	beq.n	5e1c <_ZN14USBDeviceClass6initEPEmm+0x50>
			delete (DoubleBufferedEPOutHandler*)epHandlers[ep];
    5e16:	6803      	ldr	r3, [r0, #0]
    5e18:	691b      	ldr	r3, [r3, #16]
    5e1a:	4798      	blx	r3
		epHandlers[ep] = new DoubleBufferedEPOutHandler(usbd, ep, 256);
    5e1c:	2038      	movs	r0, #56	; 0x38
    5e1e:	f7ff fa73 	bl	5308 <_Znwj>
		notify(false)
    5e22:	4b24      	ldr	r3, [pc, #144]	; (5eb4 <_ZN14USBDeviceClass6initEPEmm+0xe8>)
    5e24:	2780      	movs	r7, #128	; 0x80
    5e26:	6003      	str	r3, [r0, #0]
    5e28:	2300      	movs	r3, #0
    5e2a:	4e1e      	ldr	r6, [pc, #120]	; (5ea4 <_ZN14USBDeviceClass6initEPEmm+0xd8>)
    5e2c:	007f      	lsls	r7, r7, #1
    5e2e:	1d42      	adds	r2, r0, #5
    5e30:	6203      	str	r3, [r0, #32]
    5e32:	6103      	str	r3, [r0, #16]
    5e34:	6143      	str	r3, [r0, #20]
    5e36:	61c3      	str	r3, [r0, #28]
    5e38:	6046      	str	r6, [r0, #4]
    5e3a:	6085      	str	r5, [r0, #8]
    5e3c:	60c7      	str	r7, [r0, #12]
    5e3e:	77d3      	strb	r3, [r2, #31]
    5e40:	322f      	adds	r2, #47	; 0x2f
    5e42:	62c3      	str	r3, [r0, #44]	; 0x2c
    5e44:	6303      	str	r3, [r0, #48]	; 0x30
    5e46:	0004      	movs	r4, r0
    5e48:	7013      	strb	r3, [r2, #0]
		data0 = reinterpret_cast<uint8_t *>(malloc(size));
    5e4a:	0038      	movs	r0, r7
		notify(false)
    5e4c:	7053      	strb	r3, [r2, #1]
		data0 = reinterpret_cast<uint8_t *>(malloc(size));
    5e4e:	f003 f9cb 	bl	91e8 <malloc>
    5e52:	9001      	str	r0, [sp, #4]
    5e54:	61a0      	str	r0, [r4, #24]
		data1 = reinterpret_cast<uint8_t *>(malloc(size));
    5e56:	0038      	movs	r0, r7
    5e58:	f003 f9c6 	bl	91e8 <malloc>
	inline void epBank0SetSize(ep_t ep, uint16_t size) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.SIZE = EP_PCKSIZE_SIZE(size); }
    5e5c:	b2eb      	uxtb	r3, r5
    5e5e:	015a      	lsls	r2, r3, #5
		data1 = reinterpret_cast<uint8_t *>(malloc(size));
    5e60:	62a0      	str	r0, [r4, #40]	; 0x28
	inline void epBank0SetSize(ep_t ep, uint16_t size) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.SIZE = EP_PCKSIZE_SIZE(size); }
    5e62:	18b2      	adds	r2, r6, r2
    5e64:	6891      	ldr	r1, [r2, #8]
    5e66:	4810      	ldr	r0, [pc, #64]	; (5ea8 <_ZN14USBDeviceClass6initEPEmm+0xdc>)
	inline void epBank0SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE0 = type; }
    5e68:	3308      	adds	r3, #8
	inline void epBank0SetSize(ep_t ep, uint16_t size) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.SIZE = EP_PCKSIZE_SIZE(size); }
    5e6a:	4008      	ands	r0, r1
    5e6c:	21c0      	movs	r1, #192	; 0xc0
    5e6e:	0589      	lsls	r1, r1, #22
    5e70:	4301      	orrs	r1, r0
    5e72:	6091      	str	r1, [r2, #8]
	inline void epBank0SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE0 = type; }
    5e74:	6831      	ldr	r1, [r6, #0]
    5e76:	2607      	movs	r6, #7
    5e78:	015b      	lsls	r3, r3, #5
    5e7a:	5c58      	ldrb	r0, [r3, r1]
    5e7c:	00ad      	lsls	r5, r5, #2
    5e7e:	43b0      	bics	r0, r6
    5e80:	0006      	movs	r6, r0
    5e82:	2003      	movs	r0, #3
    5e84:	4330      	orrs	r0, r6
    5e86:	5458      	strb	r0, [r3, r1]
	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
    5e88:	9b01      	ldr	r3, [sp, #4]
		release();
    5e8a:	0020      	movs	r0, r4
	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
    5e8c:	6053      	str	r3, [r2, #4]
		release();
    5e8e:	f7ff fd97 	bl	59c0 <_ZN26DoubleBufferedEPOutHandler7releaseEv>
    5e92:	4b07      	ldr	r3, [pc, #28]	; (5eb0 <_ZN14USBDeviceClass6initEPEmm+0xe4>)
    5e94:	515c      	str	r4, [r3, r5]
    5e96:	e7b6      	b.n	5e06 <_ZN14USBDeviceClass6initEPEmm+0x3a>
    5e98:	0011      	movs	r1, r2
    5e9a:	0028      	movs	r0, r5
    5e9c:	f7ff fca8 	bl	57f0 <_ZN14USBDeviceClass6initEPEmm.part.5>
}
    5ea0:	e7b1      	b.n	5e06 <_ZN14USBDeviceClass6initEPEmm+0x3a>
    5ea2:	46c0      	nop			; (mov r8, r8)
    5ea4:	20000ac4 	.word	0x20000ac4
    5ea8:	8fffffff 	.word	0x8fffffff
    5eac:	20000638 	.word	0x20000638
    5eb0:	20000610 	.word	0x20000610
    5eb4:	0000b958 	.word	0x0000b958

00005eb8 <_ZN14USBDeviceClass13initEndpointsEv>:
void USBDeviceClass::initEndpoints() {
    5eb8:	b570      	push	{r4, r5, r6, lr}
    5eba:	0005      	movs	r5, r0
    5ebc:	2401      	movs	r4, #1
	for (uint8_t i = 1; i < sizeof(EndPoints) && EndPoints[i] != 0; i++) {
    5ebe:	4b06      	ldr	r3, [pc, #24]	; (5ed8 <_ZN14USBDeviceClass13initEndpointsEv+0x20>)
    5ec0:	00a2      	lsls	r2, r4, #2
    5ec2:	58d2      	ldr	r2, [r2, r3]
    5ec4:	2a00      	cmp	r2, #0
    5ec6:	d005      	beq.n	5ed4 <_ZN14USBDeviceClass13initEndpointsEv+0x1c>
		initEP(i, EndPoints[i]);
    5ec8:	0021      	movs	r1, r4
    5eca:	0028      	movs	r0, r5
    5ecc:	f7ff ff7e 	bl	5dcc <_ZN14USBDeviceClass6initEPEmm>
    5ed0:	3401      	adds	r4, #1
	for (uint8_t i = 1; i < sizeof(EndPoints) && EndPoints[i] != 0; i++) {
    5ed2:	e7f4      	b.n	5ebe <_ZN14USBDeviceClass13initEndpointsEv+0x6>
}
    5ed4:	bd70      	pop	{r4, r5, r6, pc}
    5ed6:	46c0      	nop			; (mov r8, r8)
    5ed8:	2000005c 	.word	0x2000005c

00005edc <_ZN14USBDeviceClass9availableEm>:
}

// Number of bytes, assumes a rx endpoint
uint32_t USBDeviceClass::available(uint32_t ep)
{
	if (epHandlers[ep]) {
    5edc:	4b08      	ldr	r3, [pc, #32]	; (5f00 <_ZN14USBDeviceClass9availableEm+0x24>)
    5ede:	008a      	lsls	r2, r1, #2
    5ee0:	58d0      	ldr	r0, [r2, r3]
{
    5ee2:	b510      	push	{r4, lr}
	if (epHandlers[ep]) {
    5ee4:	2800      	cmp	r0, #0
    5ee6:	d003      	beq.n	5ef0 <_ZN14USBDeviceClass9availableEm+0x14>
		return epHandlers[ep]->available();
    5ee8:	6803      	ldr	r3, [r0, #0]
    5eea:	689b      	ldr	r3, [r3, #8]
    5eec:	4798      	blx	r3
	} else {
		return usbd.epBank0ByteCount(ep);
	}
}
    5eee:	bd10      	pop	{r4, pc}
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
    5ef0:	b2c9      	uxtb	r1, r1
    5ef2:	4b04      	ldr	r3, [pc, #16]	; (5f04 <_ZN14USBDeviceClass9availableEm+0x28>)
    5ef4:	0149      	lsls	r1, r1, #5
    5ef6:	1859      	adds	r1, r3, r1
    5ef8:	6888      	ldr	r0, [r1, #8]
    5efa:	0480      	lsls	r0, r0, #18
    5efc:	0c80      	lsrs	r0, r0, #18
		return usbd.epBank0ByteCount(ep);
    5efe:	e7f6      	b.n	5eee <_ZN14USBDeviceClass9availableEm+0x12>
    5f00:	20000610 	.word	0x20000610
    5f04:	20000ac4 	.word	0x20000ac4

00005f08 <_ZN14USBDeviceClass5flushEm>:
{
    5f08:	b510      	push	{r4, lr}
    5f0a:	000c      	movs	r4, r1
	if (available(ep)) {
    5f0c:	f7ff ffe6 	bl	5edc <_ZN14USBDeviceClass9availableEm>
    5f10:	2800      	cmp	r0, #0
    5f12:	d00c      	beq.n	5f2e <_ZN14USBDeviceClass5flushEm+0x26>
	inline void epBank1SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK1RDY = 1; }
    5f14:	4b06      	ldr	r3, [pc, #24]	; (5f30 <_ZN14USBDeviceClass5flushEm+0x28>)
    5f16:	b2e4      	uxtb	r4, r4
    5f18:	681b      	ldr	r3, [r3, #0]
    5f1a:	3408      	adds	r4, #8
    5f1c:	0164      	lsls	r4, r4, #5
    5f1e:	191c      	adds	r4, r3, r4
    5f20:	2380      	movs	r3, #128	; 0x80
    5f22:	7962      	ldrb	r2, [r4, #5]
    5f24:	425b      	negs	r3, r3
    5f26:	4313      	orrs	r3, r2
    5f28:	7163      	strb	r3, [r4, #5]
	inline void epBank1AckTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT(2); }
    5f2a:	2302      	movs	r3, #2
    5f2c:	71e3      	strb	r3, [r4, #7]
}
    5f2e:	bd10      	pop	{r4, pc}
    5f30:	20000ac4 	.word	0x20000ac4

00005f34 <_ZN14USBDeviceClass14armRecvCtrlOUTEm>:
		return c;
	}
}

uint8_t USBDeviceClass::armRecvCtrlOUT(uint32_t ep)
{
    5f34:	b570      	push	{r4, r5, r6, lr}
	// Get endpoint configuration from setting register
	usbd.epBank0SetAddress(ep, &udd_ep_out_cache_buffer[ep]);
    5f36:	4b13      	ldr	r3, [pc, #76]	; (5f84 <_ZN14USBDeviceClass14armRecvCtrlOUTEm+0x50>)
	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
    5f38:	b2cc      	uxtb	r4, r1
    5f3a:	4a13      	ldr	r2, [pc, #76]	; (5f88 <_ZN14USBDeviceClass14armRecvCtrlOUTEm+0x54>)
    5f3c:	0160      	lsls	r0, r4, #5
    5f3e:	0189      	lsls	r1, r1, #6
    5f40:	1859      	adds	r1, r3, r1
    5f42:	1813      	adds	r3, r2, r0
    5f44:	6059      	str	r1, [r3, #4]
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
    5f46:	6899      	ldr	r1, [r3, #8]
    5f48:	4d10      	ldr	r5, [pc, #64]	; (5f8c <_ZN14USBDeviceClass14armRecvCtrlOUTEm+0x58>)
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
    5f4a:	3408      	adds	r4, #8
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
    5f4c:	400d      	ands	r5, r1
    5f4e:	2180      	movs	r1, #128	; 0x80
    5f50:	0289      	lsls	r1, r1, #10
    5f52:	4329      	orrs	r1, r5
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
    5f54:	2540      	movs	r5, #64	; 0x40
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
    5f56:	6099      	str	r1, [r3, #8]
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
    5f58:	6899      	ldr	r1, [r3, #8]
    5f5a:	0b89      	lsrs	r1, r1, #14
    5f5c:	0389      	lsls	r1, r1, #14
    5f5e:	6099      	str	r1, [r3, #8]
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
    5f60:	6811      	ldr	r1, [r2, #0]
    5f62:	0163      	lsls	r3, r4, #5
    5f64:	18cb      	adds	r3, r1, r3
    5f66:	791e      	ldrb	r6, [r3, #4]
    5f68:	4335      	orrs	r5, r6
    5f6a:	711d      	strb	r5, [r3, #4]
	inline bool epBank0IsReady(ep_t ep)    { return usb.DeviceEndpoint[ep].EPSTATUS.bit.BK0RDY; }
    5f6c:	799d      	ldrb	r5, [r3, #6]
	usbd.epBank0SetByteCount(ep, 0);

	usbd.epBank0ResetReady(ep);

	// Wait OUT
	while (!usbd.epBank0IsReady(ep)) {}
    5f6e:	066d      	lsls	r5, r5, #25
    5f70:	d5fc      	bpl.n	5f6c <_ZN14USBDeviceClass14armRecvCtrlOUTEm+0x38>
	inline bool epBank0IsTransferComplete(ep_t ep)  { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.TRCPT0; }
    5f72:	0164      	lsls	r4, r4, #5
    5f74:	1909      	adds	r1, r1, r4
    5f76:	79cb      	ldrb	r3, [r1, #7]
	while (!usbd.epBank0IsTransferComplete(ep)) {}
    5f78:	07db      	lsls	r3, r3, #31
    5f7a:	d5fc      	bpl.n	5f76 <_ZN14USBDeviceClass14armRecvCtrlOUTEm+0x42>
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
    5f7c:	1812      	adds	r2, r2, r0
    5f7e:	6890      	ldr	r0, [r2, #8]
	return usbd.epBank0ByteCount(ep);
    5f80:	b2c0      	uxtb	r0, r0
}
    5f82:	bd70      	pop	{r4, r5, r6, pc}
    5f84:	200007f8 	.word	0x200007f8
    5f88:	20000ac4 	.word	0x20000ac4
    5f8c:	f0003fff 	.word	0xf0003fff

00005f90 <_ZN14USBDeviceClass11recvControlEPvm>:
{
    5f90:	b570      	push	{r4, r5, r6, lr}
    5f92:	0014      	movs	r4, r2
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
    5f94:	2240      	movs	r2, #64	; 0x40
    5f96:	4b0b      	ldr	r3, [pc, #44]	; (5fc4 <_ZN14USBDeviceClass11recvControlEPvm+0x34>)
    5f98:	000d      	movs	r5, r1
    5f9a:	681b      	ldr	r3, [r3, #0]
    5f9c:	33ff      	adds	r3, #255	; 0xff
    5f9e:	7959      	ldrb	r1, [r3, #5]
    5fa0:	430a      	orrs	r2, r1
    5fa2:	715a      	strb	r2, [r3, #5]
	uint32_t read = armRecvCtrlOUT(0);
    5fa4:	2100      	movs	r1, #0
    5fa6:	f7ff ffc5 	bl	5f34 <_ZN14USBDeviceClass14armRecvCtrlOUTEm>
    5faa:	42a0      	cmp	r0, r4
    5fac:	d900      	bls.n	5fb0 <_ZN14USBDeviceClass11recvControlEPvm+0x20>
    5fae:	0020      	movs	r0, r4
	for (uint32_t i=0; i<len; i++) {
    5fb0:	2300      	movs	r3, #0
		data[i] = buffer[i];
    5fb2:	4905      	ldr	r1, [pc, #20]	; (5fc8 <_ZN14USBDeviceClass11recvControlEPvm+0x38>)
	for (uint32_t i=0; i<len; i++) {
    5fb4:	42a3      	cmp	r3, r4
    5fb6:	d003      	beq.n	5fc0 <_ZN14USBDeviceClass11recvControlEPvm+0x30>
		data[i] = buffer[i];
    5fb8:	5c5a      	ldrb	r2, [r3, r1]
    5fba:	54ea      	strb	r2, [r5, r3]
	for (uint32_t i=0; i<len; i++) {
    5fbc:	3301      	adds	r3, #1
    5fbe:	e7f9      	b.n	5fb4 <_ZN14USBDeviceClass11recvControlEPvm+0x24>
}
    5fc0:	bd70      	pop	{r4, r5, r6, pc}
    5fc2:	46c0      	nop			; (mov r8, r8)
    5fc4:	20000ac4 	.word	0x20000ac4
    5fc8:	200007f8 	.word	0x200007f8

00005fcc <_ZN14USBDeviceClass7armRecvEm>:

uint8_t USBDeviceClass::armRecv(uint32_t ep)
{
    5fcc:	b510      	push	{r4, lr}
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
    5fce:	b2c9      	uxtb	r1, r1
    5fd0:	480b      	ldr	r0, [pc, #44]	; (6000 <_ZN14USBDeviceClass7armRecvEm+0x34>)
    5fd2:	0149      	lsls	r1, r1, #5
    5fd4:	1842      	adds	r2, r0, r1
    5fd6:	6893      	ldr	r3, [r2, #8]
    5fd8:	049b      	lsls	r3, r3, #18
    5fda:	0c9b      	lsrs	r3, r3, #18
	uint16_t count = usbd.epBank0ByteCount(ep);
	if (count >= 64) {
    5fdc:	2b3f      	cmp	r3, #63	; 0x3f
    5fde:	dd0b      	ble.n	5ff8 <_ZN14USBDeviceClass7armRecvEm+0x2c>
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
    5fe0:	6894      	ldr	r4, [r2, #8]
		usbd.epBank0SetByteCount(ep, count - 64);
    5fe2:	3b40      	subs	r3, #64	; 0x40
    5fe4:	049b      	lsls	r3, r3, #18
    5fe6:	0ba4      	lsrs	r4, r4, #14
    5fe8:	0c9b      	lsrs	r3, r3, #18
    5fea:	03a4      	lsls	r4, r4, #14
    5fec:	4323      	orrs	r3, r4
    5fee:	6093      	str	r3, [r2, #8]
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
    5ff0:	1841      	adds	r1, r0, r1
    5ff2:	6888      	ldr	r0, [r1, #8]
	} else {
		usbd.epBank0SetByteCount(ep, 0);
	}
	return usbd.epBank0ByteCount(ep);
    5ff4:	b2c0      	uxtb	r0, r0
}
    5ff6:	bd10      	pop	{r4, pc}
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
    5ff8:	6893      	ldr	r3, [r2, #8]
    5ffa:	0b9b      	lsrs	r3, r3, #14
    5ffc:	039b      	lsls	r3, r3, #14
    5ffe:	e7f6      	b.n	5fee <_ZN14USBDeviceClass7armRecvEm+0x22>
    6000:	20000ac4 	.word	0x20000ac4

00006004 <_ZN14USBDeviceClass4recvEmPvm>:
{
    6004:	b5f0      	push	{r4, r5, r6, r7, lr}
    6006:	001c      	movs	r4, r3
	if (!_usbConfiguration)
    6008:	4b2a      	ldr	r3, [pc, #168]	; (60b4 <_ZN14USBDeviceClass4recvEmPvm+0xb0>)
{
    600a:	b085      	sub	sp, #20
	if (!_usbConfiguration)
    600c:	681b      	ldr	r3, [r3, #0]
{
    600e:	0006      	movs	r6, r0
    6010:	000d      	movs	r5, r1
    6012:	9201      	str	r2, [sp, #4]
	if (!_usbConfiguration)
    6014:	2b00      	cmp	r3, #0
    6016:	d04a      	beq.n	60ae <_ZN14USBDeviceClass4recvEmPvm+0xaa>
	if (epHandlers[ep]) {
    6018:	4b27      	ldr	r3, [pc, #156]	; (60b8 <_ZN14USBDeviceClass4recvEmPvm+0xb4>)
    601a:	008a      	lsls	r2, r1, #2
    601c:	58d0      	ldr	r0, [r2, r3]
    601e:	2800      	cmp	r0, #0
    6020:	d008      	beq.n	6034 <_ZN14USBDeviceClass4recvEmPvm+0x30>
		return epHandlers[ep]->recv(_data, len);
    6022:	6803      	ldr	r3, [r0, #0]
    6024:	0022      	movs	r2, r4
    6026:	685b      	ldr	r3, [r3, #4]
    6028:	9901      	ldr	r1, [sp, #4]
    602a:	4798      	blx	r3
    602c:	0004      	movs	r4, r0
}
    602e:	0020      	movs	r0, r4
    6030:	b005      	add	sp, #20
    6032:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (available(ep) < len)
    6034:	0030      	movs	r0, r6
    6036:	f7ff ff51 	bl	5edc <_ZN14USBDeviceClass9availableEm>
    603a:	4284      	cmp	r4, r0
    603c:	d904      	bls.n	6048 <_ZN14USBDeviceClass4recvEmPvm+0x44>
		len = available(ep);
    603e:	0029      	movs	r1, r5
    6040:	0030      	movs	r0, r6
    6042:	f7ff ff4b 	bl	5edc <_ZN14USBDeviceClass9availableEm>
    6046:	0004      	movs	r4, r0
	armRecv(ep);
    6048:	0029      	movs	r1, r5
    604a:	0030      	movs	r0, r6
    604c:	f7ff ffbe 	bl	5fcc <_ZN14USBDeviceClass7armRecvEm>
	inline void epBank0DisableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENCLR.bit.TRCPT0 = 1; }
    6050:	2101      	movs	r1, #1
    6052:	b2eb      	uxtb	r3, r5
    6054:	4f19      	ldr	r7, [pc, #100]	; (60bc <_ZN14USBDeviceClass4recvEmPvm+0xb8>)
    6056:	9303      	str	r3, [sp, #12]
    6058:	015b      	lsls	r3, r3, #5
    605a:	9302      	str	r3, [sp, #8]
    605c:	9a02      	ldr	r2, [sp, #8]
    605e:	683b      	ldr	r3, [r7, #0]
	memcpy(_data, udd_ep_out_cache_buffer[ep], len);
    6060:	9801      	ldr	r0, [sp, #4]
    6062:	189b      	adds	r3, r3, r2
    6064:	33ff      	adds	r3, #255	; 0xff
    6066:	7a5a      	ldrb	r2, [r3, #9]
    6068:	430a      	orrs	r2, r1
    606a:	4915      	ldr	r1, [pc, #84]	; (60c0 <_ZN14USBDeviceClass4recvEmPvm+0xbc>)
    606c:	725a      	strb	r2, [r3, #9]
    606e:	01ab      	lsls	r3, r5, #6
    6070:	18c9      	adds	r1, r1, r3
    6072:	0022      	movs	r2, r4
    6074:	f003 f8ed 	bl	9252 <memcpy>
	if (len && !available(ep)) {
    6078:	2c00      	cmp	r4, #0
    607a:	d0d8      	beq.n	602e <_ZN14USBDeviceClass4recvEmPvm+0x2a>
    607c:	0029      	movs	r1, r5
    607e:	0030      	movs	r0, r6
    6080:	f7ff ff2c 	bl	5edc <_ZN14USBDeviceClass9availableEm>
    6084:	2800      	cmp	r0, #0
    6086:	d1d2      	bne.n	602e <_ZN14USBDeviceClass4recvEmPvm+0x2a>
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
    6088:	2140      	movs	r1, #64	; 0x40
    608a:	9b03      	ldr	r3, [sp, #12]
    608c:	683a      	ldr	r2, [r7, #0]
    608e:	3308      	adds	r3, #8
    6090:	015b      	lsls	r3, r3, #5
    6092:	18d3      	adds	r3, r2, r3
    6094:	7918      	ldrb	r0, [r3, #4]
    6096:	4301      	orrs	r1, r0
    6098:	7119      	strb	r1, [r3, #4]
	inline void epBank0AckTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT(1); }
    609a:	2101      	movs	r1, #1
    609c:	71d9      	strb	r1, [r3, #7]
	inline void epBank0EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT0 = 1; }
    609e:	2101      	movs	r1, #1
    60a0:	9b02      	ldr	r3, [sp, #8]
    60a2:	18d3      	adds	r3, r2, r3
    60a4:	33ff      	adds	r3, #255	; 0xff
    60a6:	7a9a      	ldrb	r2, [r3, #10]
    60a8:	430a      	orrs	r2, r1
    60aa:	729a      	strb	r2, [r3, #10]
    60ac:	e7bf      	b.n	602e <_ZN14USBDeviceClass4recvEmPvm+0x2a>
		return -1;
    60ae:	2401      	movs	r4, #1
    60b0:	4264      	negs	r4, r4
    60b2:	e7bc      	b.n	602e <_ZN14USBDeviceClass4recvEmPvm+0x2a>
    60b4:	20000abc 	.word	0x20000abc
    60b8:	20000610 	.word	0x20000610
    60bc:	20000ac4 	.word	0x20000ac4
    60c0:	200007f8 	.word	0x200007f8

000060c4 <_ZN14USBDeviceClass4recvEm>:
{
    60c4:	b513      	push	{r0, r1, r4, lr}
	if (recv(ep, &c, 1) != 1) {
    60c6:	466b      	mov	r3, sp
    60c8:	1ddc      	adds	r4, r3, #7
    60ca:	0022      	movs	r2, r4
    60cc:	2301      	movs	r3, #1
    60ce:	f7ff ff99 	bl	6004 <_ZN14USBDeviceClass4recvEmPvm>
    60d2:	2801      	cmp	r0, #1
    60d4:	d101      	bne.n	60da <_ZN14USBDeviceClass4recvEm+0x16>
		return c;
    60d6:	7820      	ldrb	r0, [r4, #0]
}
    60d8:	bd16      	pop	{r1, r2, r4, pc}
		return -1;
    60da:	2001      	movs	r0, #1
    60dc:	4240      	negs	r0, r0
    60de:	e7fb      	b.n	60d8 <_ZN14USBDeviceClass4recvEm+0x14>

000060e0 <_ZN14USBDeviceClass4sendEmPKvm>:
	0
};

// Blocking Send of data to an endpoint
uint32_t USBDeviceClass::send(uint32_t ep, const void *data, uint32_t len)
{
    60e0:	b5f0      	push	{r4, r5, r6, r7, lr}
    60e2:	001e      	movs	r6, r3
	uint32_t written = 0;
	uint32_t length = 0;

	if (!_usbConfiguration)
    60e4:	4b35      	ldr	r3, [pc, #212]	; (61bc <_ZN14USBDeviceClass4sendEmPKvm+0xdc>)
{
    60e6:	b085      	sub	sp, #20
	if (!_usbConfiguration)
    60e8:	681b      	ldr	r3, [r3, #0]
{
    60ea:	000f      	movs	r7, r1
    60ec:	9201      	str	r2, [sp, #4]
	if (!_usbConfiguration)
    60ee:	2b00      	cmp	r3, #0
    60f0:	d035      	beq.n	615e <_ZN14USBDeviceClass4sendEmPKvm+0x7e>
		return -1;
	if (len > 16384)
    60f2:	2380      	movs	r3, #128	; 0x80
    60f4:	01db      	lsls	r3, r3, #7
    60f6:	429e      	cmp	r6, r3
    60f8:	d831      	bhi.n	615e <_ZN14USBDeviceClass4sendEmPKvm+0x7e>
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
    60fa:	2500      	movs	r5, #0
		} else {
			length = len;
		}

		/* memcopy could be safer in multi threaded environment */
		memcpy(&udd_ep_in_cache_buffer[ep], data, length);
    60fc:	4a30      	ldr	r2, [pc, #192]	; (61c0 <_ZN14USBDeviceClass4sendEmPKvm+0xe0>)
    60fe:	018b      	lsls	r3, r1, #6
    6100:	18d3      	adds	r3, r2, r3
    6102:	9302      	str	r3, [sp, #8]
	while (len != 0)
    6104:	2e00      	cmp	r6, #0
    6106:	d02c      	beq.n	6162 <_ZN14USBDeviceClass4sendEmPKvm+0x82>
	inline bool epBank1IsReady(ep_t ep)    { return usb.DeviceEndpoint[ep].EPSTATUS.bit.BK1RDY; }
    6108:	4b2e      	ldr	r3, [pc, #184]	; (61c4 <_ZN14USBDeviceClass4sendEmPKvm+0xe4>)
    610a:	681b      	ldr	r3, [r3, #0]
    610c:	9303      	str	r3, [sp, #12]
    610e:	23ff      	movs	r3, #255	; 0xff
    6110:	403b      	ands	r3, r7
    6112:	001c      	movs	r4, r3
    6114:	9300      	str	r3, [sp, #0]
    6116:	3408      	adds	r4, #8
    6118:	9b03      	ldr	r3, [sp, #12]
    611a:	0164      	lsls	r4, r4, #5
    611c:	191c      	adds	r4, r3, r4
    611e:	79a3      	ldrb	r3, [r4, #6]
    6120:	09db      	lsrs	r3, r3, #7
		if (usbd.epBank1IsReady(ep)) {
    6122:	d021      	beq.n	6168 <_ZN14USBDeviceClass4sendEmPKvm+0x88>
			uint32_t timeout = microsecondsToClockCycles(TX_TIMEOUT_MS * 1000) / 23;
    6124:	4b28      	ldr	r3, [pc, #160]	; (61c8 <_ZN14USBDeviceClass4sendEmPKvm+0xe8>)
    6126:	4929      	ldr	r1, [pc, #164]	; (61cc <_ZN14USBDeviceClass4sendEmPKvm+0xec>)
    6128:	6818      	ldr	r0, [r3, #0]
    612a:	f001 f8ef 	bl	730c <__udivsi3>
    612e:	4b28      	ldr	r3, [pc, #160]	; (61d0 <_ZN14USBDeviceClass4sendEmPKvm+0xf0>)
    6130:	2117      	movs	r1, #23
    6132:	4358      	muls	r0, r3
    6134:	f001 f8ea 	bl	730c <__udivsi3>
				if (LastTransmitTimedOut[ep] || timeout-- == 0) {
    6138:	4b26      	ldr	r3, [pc, #152]	; (61d4 <_ZN14USBDeviceClass4sendEmPKvm+0xf4>)
	inline bool epBank1IsTransferComplete(ep_t ep)  { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.TRCPT1; }
    613a:	79e2      	ldrb	r2, [r4, #7]
			while (!usbd.epBank1IsTransferComplete(ep)) {
    613c:	0792      	lsls	r2, r2, #30
    613e:	d413      	bmi.n	6168 <_ZN14USBDeviceClass4sendEmPKvm+0x88>
				if (LastTransmitTimedOut[ep] || timeout-- == 0) {
    6140:	5dda      	ldrb	r2, [r3, r7]
    6142:	2a00      	cmp	r2, #0
    6144:	d101      	bne.n	614a <_ZN14USBDeviceClass4sendEmPKvm+0x6a>
    6146:	3801      	subs	r0, #1
    6148:	d2f7      	bcs.n	613a <_ZN14USBDeviceClass4sendEmPKvm+0x5a>
					LastTransmitTimedOut[ep] = 1;
    614a:	2201      	movs	r2, #1
    614c:	55da      	strb	r2, [r3, r7]
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
    614e:	9b00      	ldr	r3, [sp, #0]
    6150:	015a      	lsls	r2, r3, #5
    6152:	4b1c      	ldr	r3, [pc, #112]	; (61c4 <_ZN14USBDeviceClass4sendEmPKvm+0xe4>)
    6154:	189b      	adds	r3, r3, r2
    6156:	699a      	ldr	r2, [r3, #24]
    6158:	0b92      	lsrs	r2, r2, #14
    615a:	0392      	lsls	r2, r2, #14
    615c:	619a      	str	r2, [r3, #24]
					return -1;
    615e:	2501      	movs	r5, #1
    6160:	426d      	negs	r5, r5
		written += length;
		len -= length;
		data = (char *)data + length;
	}
	return written;
}
    6162:	0028      	movs	r0, r5
    6164:	b005      	add	sp, #20
    6166:	bdf0      	pop	{r4, r5, r6, r7, pc}
		LastTransmitTimedOut[ep] = 0;
    6168:	2200      	movs	r2, #0
    616a:	4b1a      	ldr	r3, [pc, #104]	; (61d4 <_ZN14USBDeviceClass4sendEmPKvm+0xf4>)
    616c:	0034      	movs	r4, r6
    616e:	55da      	strb	r2, [r3, r7]
    6170:	2e3f      	cmp	r6, #63	; 0x3f
    6172:	d900      	bls.n	6176 <_ZN14USBDeviceClass4sendEmPKvm+0x96>
    6174:	243f      	movs	r4, #63	; 0x3f
		memcpy(&udd_ep_in_cache_buffer[ep], data, length);
    6176:	0022      	movs	r2, r4
    6178:	9901      	ldr	r1, [sp, #4]
    617a:	9802      	ldr	r0, [sp, #8]
    617c:	f003 f869 	bl	9252 <memcpy>
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
    6180:	9b00      	ldr	r3, [sp, #0]
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
    6182:	04a1      	lsls	r1, r4, #18
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
    6184:	015a      	lsls	r2, r3, #5
    6186:	4b0f      	ldr	r3, [pc, #60]	; (61c4 <_ZN14USBDeviceClass4sendEmPKvm+0xe4>)
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
    6188:	0c89      	lsrs	r1, r1, #18
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
    618a:	189b      	adds	r3, r3, r2
    618c:	9a02      	ldr	r2, [sp, #8]
		written += length;
    618e:	192d      	adds	r5, r5, r4
    6190:	615a      	str	r2, [r3, #20]
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
    6192:	699a      	ldr	r2, [r3, #24]
		len -= length;
    6194:	1b36      	subs	r6, r6, r4
    6196:	0b92      	lsrs	r2, r2, #14
    6198:	0392      	lsls	r2, r2, #14
    619a:	430a      	orrs	r2, r1
    619c:	619a      	str	r2, [r3, #24]
	inline void epBank1AckTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT(2); }
    619e:	9b00      	ldr	r3, [sp, #0]
    61a0:	9a03      	ldr	r2, [sp, #12]
    61a2:	3308      	adds	r3, #8
    61a4:	015b      	lsls	r3, r3, #5
    61a6:	18d3      	adds	r3, r2, r3
    61a8:	2202      	movs	r2, #2
    61aa:	71da      	strb	r2, [r3, #7]
	inline void epBank1SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK1RDY = 1; }
    61ac:	7959      	ldrb	r1, [r3, #5]
    61ae:	3a82      	subs	r2, #130	; 0x82
    61b0:	430a      	orrs	r2, r1
    61b2:	715a      	strb	r2, [r3, #5]
		data = (char *)data + length;
    61b4:	9b01      	ldr	r3, [sp, #4]
    61b6:	191b      	adds	r3, r3, r4
    61b8:	9301      	str	r3, [sp, #4]
	while (len != 0)
    61ba:	e7a3      	b.n	6104 <_ZN14USBDeviceClass4sendEmPKvm+0x24>
    61bc:	20000abc 	.word	0x20000abc
    61c0:	20000638 	.word	0x20000638
    61c4:	20000ac4 	.word	0x20000ac4
    61c8:	20000084 	.word	0x20000084
    61cc:	000f4240 	.word	0x000f4240
    61d0:	00011170 	.word	0x00011170
    61d4:	2000062d 	.word	0x2000062d

000061d8 <_ZN14USBDeviceClass7armSendEmPKvm>:

uint32_t USBDeviceClass::armSend(uint32_t ep, const void* data, uint32_t len)
{
    61d8:	b570      	push	{r4, r5, r6, lr}
    61da:	000d      	movs	r5, r1
    61dc:	001c      	movs	r4, r3
	memcpy(&udd_ep_in_cache_buffer[ep], data, len);
    61de:	4e0d      	ldr	r6, [pc, #52]	; (6214 <_ZN14USBDeviceClass7armSendEmPKvm+0x3c>)
    61e0:	01ab      	lsls	r3, r5, #6
    61e2:	18f6      	adds	r6, r6, r3
{
    61e4:	0011      	movs	r1, r2
	memcpy(&udd_ep_in_cache_buffer[ep], data, len);
    61e6:	0030      	movs	r0, r6
    61e8:	0022      	movs	r2, r4
    61ea:	f003 f832 	bl	9252 <memcpy>
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
    61ee:	b2ed      	uxtb	r5, r5
    61f0:	4909      	ldr	r1, [pc, #36]	; (6218 <_ZN14USBDeviceClass7armSendEmPKvm+0x40>)
    61f2:	016d      	lsls	r5, r5, #5
    61f4:	194d      	adds	r5, r1, r5
    61f6:	616e      	str	r6, [r5, #20]
	inline void epBank1SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
    61f8:	69ab      	ldr	r3, [r5, #24]
    61fa:	4a08      	ldr	r2, [pc, #32]	; (621c <_ZN14USBDeviceClass7armSendEmPKvm+0x44>)
	usbd.epBank1SetAddress(ep, &udd_ep_in_cache_buffer[ep]);
	usbd.epBank1SetMultiPacketSize(ep, 0);
	usbd.epBank1SetByteCount(ep, len);

	return len;
}
    61fc:	0020      	movs	r0, r4
    61fe:	4013      	ands	r3, r2
    6200:	61ab      	str	r3, [r5, #24]
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
    6202:	69ab      	ldr	r3, [r5, #24]
    6204:	04a2      	lsls	r2, r4, #18
    6206:	0b9b      	lsrs	r3, r3, #14
    6208:	0c92      	lsrs	r2, r2, #18
    620a:	039b      	lsls	r3, r3, #14
    620c:	4313      	orrs	r3, r2
    620e:	61ab      	str	r3, [r5, #24]
    6210:	bd70      	pop	{r4, r5, r6, pc}
    6212:	46c0      	nop			; (mov r8, r8)
    6214:	20000638 	.word	0x20000638
    6218:	20000ac4 	.word	0x20000ac4
    621c:	f0003fff 	.word	0xf0003fff

00006220 <_ZN14USBDeviceClass11sendControlEPKvm>:

uint32_t USBDeviceClass::sendControl(const void* _data, uint32_t len)
{
    6220:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	const uint8_t *data = reinterpret_cast<const uint8_t *>(_data);
	uint32_t length = len;
	uint32_t sent = 0;
	uint32_t pos = 0;

	if (_dry_run == true)
    6222:	4b10      	ldr	r3, [pc, #64]	; (6264 <_ZN14USBDeviceClass11sendControlEPKvm+0x44>)
{
    6224:	9001      	str	r0, [sp, #4]
	if (_dry_run == true)
    6226:	781b      	ldrb	r3, [r3, #0]
{
    6228:	000f      	movs	r7, r1
    622a:	0015      	movs	r5, r2
	if (_dry_run == true)
    622c:	2b00      	cmp	r3, #0
    622e:	d10c      	bne.n	624a <_ZN14USBDeviceClass11sendControlEPKvm+0x2a>
		return length;

	if (_pack_message == true) {
    6230:	4b0d      	ldr	r3, [pc, #52]	; (6268 <_ZN14USBDeviceClass11sendControlEPKvm+0x48>)
    6232:	0016      	movs	r6, r2
    6234:	781c      	ldrb	r4, [r3, #0]
    6236:	2c00      	cmp	r4, #0
    6238:	d009      	beq.n	624e <_ZN14USBDeviceClass11sendControlEPKvm+0x2e>
		memcpy(&_pack_buffer[_pack_size], data, len);
    623a:	4e0c      	ldr	r6, [pc, #48]	; (626c <_ZN14USBDeviceClass11sendControlEPKvm+0x4c>)
    623c:	480c      	ldr	r0, [pc, #48]	; (6270 <_ZN14USBDeviceClass11sendControlEPKvm+0x50>)
    623e:	8834      	ldrh	r4, [r6, #0]
    6240:	1900      	adds	r0, r0, r4
		_pack_size += len;
    6242:	1964      	adds	r4, r4, r5
		memcpy(&_pack_buffer[_pack_size], data, len);
    6244:	f003 f805 	bl	9252 <memcpy>
		_pack_size += len;
    6248:	8034      	strh	r4, [r6, #0]
		pos += sent;
		len -= sent;
 	}

	return length;
}
    624a:	0028      	movs	r0, r5
    624c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 	while (len > 0)
    624e:	2e00      	cmp	r6, #0
    6250:	d0fb      	beq.n	624a <_ZN14USBDeviceClass11sendControlEPKvm+0x2a>
		sent = armSend(EP0, data + pos, len);
    6252:	193a      	adds	r2, r7, r4
    6254:	0033      	movs	r3, r6
    6256:	2100      	movs	r1, #0
    6258:	9801      	ldr	r0, [sp, #4]
    625a:	f7ff ffbd 	bl	61d8 <_ZN14USBDeviceClass7armSendEmPKvm>
		pos += sent;
    625e:	1824      	adds	r4, r4, r0
		len -= sent;
    6260:	1a36      	subs	r6, r6, r0
 	while (len > 0)
    6262:	e7f4      	b.n	624e <_ZN14USBDeviceClass11sendControlEPKvm+0x2e>
    6264:	200009b8 	.word	0x200009b8
    6268:	20000ab9 	.word	0x20000ab9
    626c:	20000aba 	.word	0x20000aba
    6270:	200009b9 	.word	0x200009b9

00006274 <_ZN14USBDeviceClass20sendStringDescriptorEPKhh>:
{
    6274:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		return false;
    6276:	2000      	movs	r0, #0
{
    6278:	af00      	add	r7, sp, #0
    627a:	000e      	movs	r6, r1
    627c:	0015      	movs	r5, r2
	if (maxlen < 2)
    627e:	2a01      	cmp	r2, #1
    6280:	dd26      	ble.n	62d0 <_ZN14USBDeviceClass20sendStringDescriptorEPKhh+0x5c>
	uint8_t buffer[maxlen];
    6282:	1dd3      	adds	r3, r2, #7
    6284:	466a      	mov	r2, sp
    6286:	08db      	lsrs	r3, r3, #3
    6288:	00db      	lsls	r3, r3, #3
    628a:	1ad3      	subs	r3, r2, r3
    628c:	469d      	mov	sp, r3
	buffer[0] = strlen((const char*)string) * 2 + 2;
    628e:	0008      	movs	r0, r1
    6290:	f003 fd60 	bl	9d54 <strlen>
	uint8_t buffer[maxlen];
    6294:	466c      	mov	r4, sp
	buffer[1] = 0x03;
    6296:	2303      	movs	r3, #3
		buffer[i] = 0;
    6298:	2100      	movs	r1, #0
	buffer[0] = strlen((const char*)string) * 2 + 2;
    629a:	3001      	adds	r0, #1
    629c:	0040      	lsls	r0, r0, #1
    629e:	7020      	strb	r0, [r4, #0]
	buffer[1] = 0x03;
    62a0:	7063      	strb	r3, [r4, #1]
    62a2:	1e5a      	subs	r2, r3, #1
    62a4:	b2d2      	uxtb	r2, r2
	for (i = 2; i < maxlen && *string; i++) {
    62a6:	4295      	cmp	r5, r2
    62a8:	dd0b      	ble.n	62c2 <_ZN14USBDeviceClass20sendStringDescriptorEPKhh+0x4e>
    62aa:	7830      	ldrb	r0, [r6, #0]
    62ac:	2800      	cmp	r0, #0
    62ae:	d008      	beq.n	62c2 <_ZN14USBDeviceClass20sendStringDescriptorEPKhh+0x4e>
		buffer[i++] = *string++;
    62b0:	3601      	adds	r6, #1
    62b2:	54a0      	strb	r0, [r4, r2]
		if (i == maxlen) break;
    62b4:	429d      	cmp	r5, r3
    62b6:	d003      	beq.n	62c0 <_ZN14USBDeviceClass20sendStringDescriptorEPKhh+0x4c>
		buffer[i] = 0;
    62b8:	54e1      	strb	r1, [r4, r3]
    62ba:	3302      	adds	r3, #2
    62bc:	b2db      	uxtb	r3, r3
	for (i = 2; i < maxlen && *string; i++) {
    62be:	e7f0      	b.n	62a2 <_ZN14USBDeviceClass20sendStringDescriptorEPKhh+0x2e>
    62c0:	002a      	movs	r2, r5
	return USBDevice.sendControl(buffer, i);
    62c2:	0021      	movs	r1, r4
    62c4:	4803      	ldr	r0, [pc, #12]	; (62d4 <_ZN14USBDeviceClass20sendStringDescriptorEPKhh+0x60>)
    62c6:	f7ff ffab 	bl	6220 <_ZN14USBDeviceClass11sendControlEPKvm>
    62ca:	1e43      	subs	r3, r0, #1
    62cc:	4198      	sbcs	r0, r3
    62ce:	b2c0      	uxtb	r0, r0
}
    62d0:	46bd      	mov	sp, r7
    62d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    62d4:	2000060c 	.word	0x2000060c

000062d8 <_ZN14USBDeviceClass17sendConfigurationEm>:
{
    62d8:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint32_t total = 0;
    62da:	2700      	movs	r7, #0
	_dry_run = true;
    62dc:	2601      	movs	r6, #1
{
    62de:	b087      	sub	sp, #28
	_dry_run = true;
    62e0:	4b1e      	ldr	r3, [pc, #120]	; (635c <_ZN14USBDeviceClass17sendConfigurationEm+0x84>)
{
    62e2:	9100      	str	r1, [sp, #0]
	uint8_t interfaces = SendInterfaces(&total);
    62e4:	a902      	add	r1, sp, #8
	_dry_run = true;
    62e6:	701e      	strb	r6, [r3, #0]
{
    62e8:	0005      	movs	r5, r0
	uint32_t total = 0;
    62ea:	9702      	str	r7, [sp, #8]
	uint8_t interfaces = SendInterfaces(&total);
    62ec:	f7ff fc76 	bl	5bdc <_ZN14USBDeviceClass14SendInterfacesEPm>
	ConfigDescriptor config = D_CONFIG((uint16_t)(total + sizeof(ConfigDescriptor)), interfaces);
    62f0:	ac03      	add	r4, sp, #12
	uint8_t interfaces = SendInterfaces(&total);
    62f2:	9001      	str	r0, [sp, #4]
	ConfigDescriptor config = D_CONFIG((uint16_t)(total + sizeof(ConfigDescriptor)), interfaces);
    62f4:	2209      	movs	r2, #9
    62f6:	0039      	movs	r1, r7
    62f8:	0020      	movs	r0, r4
    62fa:	f002 ffc5 	bl	9288 <memset>
    62fe:	2309      	movs	r3, #9
    6300:	7023      	strb	r3, [r4, #0]
    6302:	2302      	movs	r3, #2
    6304:	7063      	strb	r3, [r4, #1]
    6306:	339e      	adds	r3, #158	; 0x9e
    6308:	71e3      	strb	r3, [r4, #7]
    630a:	335a      	adds	r3, #90	; 0x5a
    630c:	7223      	strb	r3, [r4, #8]
    630e:	9b02      	ldr	r3, [sp, #8]
    6310:	7166      	strb	r6, [r4, #5]
    6312:	3309      	adds	r3, #9
    6314:	8063      	strh	r3, [r4, #2]
    6316:	466b      	mov	r3, sp
    6318:	791b      	ldrb	r3, [r3, #4]
    631a:	7123      	strb	r3, [r4, #4]
	_dry_run = false;
    631c:	4b0f      	ldr	r3, [pc, #60]	; (635c <_ZN14USBDeviceClass17sendConfigurationEm+0x84>)
    631e:	701f      	strb	r7, [r3, #0]
	if (maxlen == sizeof(ConfigDescriptor)) {
    6320:	9b00      	ldr	r3, [sp, #0]
    6322:	2b09      	cmp	r3, #9
    6324:	d107      	bne.n	6336 <_ZN14USBDeviceClass17sendConfigurationEm+0x5e>
		sendControl(&config, sizeof(ConfigDescriptor));
    6326:	001a      	movs	r2, r3
    6328:	0021      	movs	r1, r4
		sendControl(_pack_buffer, _pack_size);
    632a:	0028      	movs	r0, r5
    632c:	f7ff ff78 	bl	6220 <_ZN14USBDeviceClass11sendControlEPKvm>
}
    6330:	2001      	movs	r0, #1
    6332:	b007      	add	sp, #28
    6334:	bdf0      	pop	{r4, r5, r6, r7, pc}
		_pack_message = true;
    6336:	4b0a      	ldr	r3, [pc, #40]	; (6360 <_ZN14USBDeviceClass17sendConfigurationEm+0x88>)
	sendControl(&config, sizeof(ConfigDescriptor));
    6338:	2209      	movs	r2, #9
		_pack_message = true;
    633a:	701e      	strb	r6, [r3, #0]
		_pack_size = 0;
    633c:	4e09      	ldr	r6, [pc, #36]	; (6364 <_ZN14USBDeviceClass17sendConfigurationEm+0x8c>)
	sendControl(&config, sizeof(ConfigDescriptor));
    633e:	0021      	movs	r1, r4
    6340:	0028      	movs	r0, r5
	total = 0;
    6342:	9702      	str	r7, [sp, #8]
		_pack_size = 0;
    6344:	8037      	strh	r7, [r6, #0]
	sendControl(&config, sizeof(ConfigDescriptor));
    6346:	f7ff ff6b 	bl	6220 <_ZN14USBDeviceClass11sendControlEPKvm>
	SendInterfaces(&total);
    634a:	a902      	add	r1, sp, #8
    634c:	0028      	movs	r0, r5
    634e:	f7ff fc45 	bl	5bdc <_ZN14USBDeviceClass14SendInterfacesEPm>
		_pack_message = false;
    6352:	4b03      	ldr	r3, [pc, #12]	; (6360 <_ZN14USBDeviceClass17sendConfigurationEm+0x88>)
		sendControl(_pack_buffer, _pack_size);
    6354:	8832      	ldrh	r2, [r6, #0]
		_pack_message = false;
    6356:	701f      	strb	r7, [r3, #0]
		sendControl(_pack_buffer, _pack_size);
    6358:	4903      	ldr	r1, [pc, #12]	; (6368 <_ZN14USBDeviceClass17sendConfigurationEm+0x90>)
    635a:	e7e6      	b.n	632a <_ZN14USBDeviceClass17sendConfigurationEm+0x52>
    635c:	200009b8 	.word	0x200009b8
    6360:	20000ab9 	.word	0x20000ab9
    6364:	20000aba 	.word	0x20000aba
    6368:	200009b9 	.word	0x200009b9

0000636c <_ZN14USBDeviceClass14sendDescriptorER8USBSetup>:
{
    636c:	b570      	push	{r4, r5, r6, lr}
	uint8_t t = setup.wValueH;
    636e:	78ce      	ldrb	r6, [r1, #3]
{
    6370:	b092      	sub	sp, #72	; 0x48
    6372:	0005      	movs	r5, r0
    6374:	000c      	movs	r4, r1
	if (t == USB_CONFIGURATION_DESCRIPTOR_TYPE)
    6376:	2e02      	cmp	r6, #2
    6378:	d108      	bne.n	638c <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x20>
		return USBDevice.sendConfiguration(setup.wLength);
    637a:	88c9      	ldrh	r1, [r1, #6]
    637c:	482b      	ldr	r0, [pc, #172]	; (642c <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0xc0>)
    637e:	f7ff ffab 	bl	62d8 <_ZN14USBDeviceClass17sendConfigurationEm>
    6382:	1e43      	subs	r3, r0, #1
    6384:	4198      	sbcs	r0, r3
    6386:	b2c0      	uxtb	r0, r0
}
    6388:	b012      	add	sp, #72	; 0x48
    638a:	bd70      	pop	{r4, r5, r6, pc}
	ret = PluggableUSB().getDescriptor(setup);
    638c:	f000 ff9a 	bl	72c4 <_Z12PluggableUSBv>
    6390:	0021      	movs	r1, r4
    6392:	f000 ff67 	bl	7264 <_ZN13PluggableUSB_13getDescriptorER8USBSetup>
	if (ret != 0) {
    6396:	2800      	cmp	r0, #0
    6398:	d003      	beq.n	63a2 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x36>
		return (ret > 0 ? true : false);
    639a:	17c3      	asrs	r3, r0, #31
    639c:	1a18      	subs	r0, r3, r0
    639e:	0fc0      	lsrs	r0, r0, #31
    63a0:	e7f2      	b.n	6388 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x1c>
	if (t == USB_DEVICE_DESCRIPTOR_TYPE)
    63a2:	2e01      	cmp	r6, #1
    63a4:	d10b      	bne.n	63be <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x52>
		if (setup.wLength == 8)
    63a6:	88e2      	ldrh	r2, [r4, #6]
    63a8:	4921      	ldr	r1, [pc, #132]	; (6430 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0xc4>)
		if (*desc_addr > setup.wLength) {
    63aa:	2a11      	cmp	r2, #17
    63ac:	dc10      	bgt.n	63d0 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x64>
			desc_length = setup.wLength;
    63ae:	b2d2      	uxtb	r2, r2
	if (desc_length == 0) {
    63b0:	2a00      	cmp	r2, #0
    63b2:	d00d      	beq.n	63d0 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x64>
	sendControl(desc_addr, desc_length);
    63b4:	0028      	movs	r0, r5
    63b6:	f7ff ff33 	bl	6220 <_ZN14USBDeviceClass11sendControlEPKvm>
	return true;
    63ba:	2001      	movs	r0, #1
    63bc:	e7e4      	b.n	6388 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x1c>
	else if (USB_STRING_DESCRIPTOR_TYPE == t)
    63be:	2e03      	cmp	r6, #3
    63c0:	d1e2      	bne.n	6388 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x1c>
		if (setup.wValueL == 0) {
    63c2:	78a3      	ldrb	r3, [r4, #2]
    63c4:	2b00      	cmp	r3, #0
    63c6:	d105      	bne.n	63d4 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x68>
		if (*desc_addr > setup.wLength) {
    63c8:	88e2      	ldrh	r2, [r4, #6]
    63ca:	491a      	ldr	r1, [pc, #104]	; (6434 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0xc8>)
    63cc:	2a03      	cmp	r2, #3
    63ce:	ddee      	ble.n	63ae <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x42>
		desc_length = *desc_addr;
    63d0:	780a      	ldrb	r2, [r1, #0]
    63d2:	e7ef      	b.n	63b4 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x48>
		else if (setup.wValueL == IPRODUCT) {
    63d4:	2b02      	cmp	r3, #2
    63d6:	d105      	bne.n	63e4 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x78>
			return sendStringDescriptor(STRING_PRODUCT, setup.wLength);
    63d8:	79a2      	ldrb	r2, [r4, #6]
    63da:	4917      	ldr	r1, [pc, #92]	; (6438 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0xcc>)
			return sendStringDescriptor(STRING_MANUFACTURER, setup.wLength);
    63dc:	0028      	movs	r0, r5
    63de:	f7ff ff49 	bl	6274 <_ZN14USBDeviceClass20sendStringDescriptorEPKhh>
    63e2:	e7d1      	b.n	6388 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x1c>
		else if (setup.wValueL == IMANUFACTURER) {
    63e4:	2b01      	cmp	r3, #1
    63e6:	d102      	bne.n	63ee <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x82>
			return sendStringDescriptor(STRING_MANUFACTURER, setup.wLength);
    63e8:	79a2      	ldrb	r2, [r4, #6]
    63ea:	4914      	ldr	r1, [pc, #80]	; (643c <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0xd0>)
    63ec:	e7f6      	b.n	63dc <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x70>
		else if (setup.wValueL == ISERIAL) {
    63ee:	2b03      	cmp	r3, #3
    63f0:	d1ca      	bne.n	6388 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x1c>
			utox8(SERIAL_NUMBER_WORD_0, &name[0]);
    63f2:	4b13      	ldr	r3, [pc, #76]	; (6440 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0xd4>)
    63f4:	a901      	add	r1, sp, #4
    63f6:	6818      	ldr	r0, [r3, #0]
    63f8:	f7ff f9d4 	bl	57a4 <_ZL5utox8mPc>
			utox8(SERIAL_NUMBER_WORD_1, &name[8]);
    63fc:	4b11      	ldr	r3, [pc, #68]	; (6444 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0xd8>)
    63fe:	a903      	add	r1, sp, #12
    6400:	6818      	ldr	r0, [r3, #0]
    6402:	f7ff f9cf 	bl	57a4 <_ZL5utox8mPc>
			utox8(SERIAL_NUMBER_WORD_2, &name[16]);
    6406:	4b10      	ldr	r3, [pc, #64]	; (6448 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0xdc>)
    6408:	a905      	add	r1, sp, #20
    640a:	6818      	ldr	r0, [r3, #0]
    640c:	f7ff f9ca 	bl	57a4 <_ZL5utox8mPc>
			utox8(SERIAL_NUMBER_WORD_3, &name[24]);
    6410:	4b0e      	ldr	r3, [pc, #56]	; (644c <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0xe0>)
    6412:	a907      	add	r1, sp, #28
    6414:	6818      	ldr	r0, [r3, #0]
    6416:	f7ff f9c5 	bl	57a4 <_ZL5utox8mPc>
			PluggableUSB().getShortName(&name[32]);
    641a:	f000 ff53 	bl	72c4 <_Z12PluggableUSBv>
    641e:	a909      	add	r1, sp, #36	; 0x24
    6420:	f000 ff30 	bl	7284 <_ZN13PluggableUSB_12getShortNameEPc>
			return sendStringDescriptor((uint8_t*)name, setup.wLength);
    6424:	79a2      	ldrb	r2, [r4, #6]
    6426:	a901      	add	r1, sp, #4
    6428:	e7d8      	b.n	63dc <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x70>
    642a:	46c0      	nop			; (mov r8, r8)
    642c:	2000060c 	.word	0x2000060c
    6430:	0000b992 	.word	0x0000b992
    6434:	0000b982 	.word	0x0000b982
    6438:	0000b96c 	.word	0x0000b96c
    643c:	0000b986 	.word	0x0000b986
    6440:	0080a00c 	.word	0x0080a00c
    6444:	0080a040 	.word	0x0080a040
    6448:	0080a044 	.word	0x0080a044
    644c:	0080a048 	.word	0x0080a048

00006450 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup>:
	// Set the byte count as zero
	usbd.epBank1SetByteCount(ep, 0);
}

bool USBDeviceClass::handleStandardSetup(USBSetup &setup)
{
    6450:	b573      	push	{r0, r1, r4, r5, r6, lr}
    6452:	0006      	movs	r6, r0
	switch (setup.bRequest) {
    6454:	7848      	ldrb	r0, [r1, #1]
{
    6456:	000d      	movs	r5, r1
	switch (setup.bRequest) {
    6458:	280b      	cmp	r0, #11
    645a:	d811      	bhi.n	6480 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x30>
    645c:	f000 ff4c 	bl	72f8 <__gnu_thumb1_case_uqi>
    6460:	2e101d06 	.word	0x2e101d06
    6464:	70484310 	.word	0x70484310
    6468:	6c694f4c 	.word	0x6c694f4c
	case GET_STATUS:
		if (setup.bmRequestType == 0)  // device
    646c:	7809      	ldrb	r1, [r1, #0]
    646e:	aa01      	add	r2, sp, #4
    6470:	2900      	cmp	r1, #0
    6472:	d107      	bne.n	6484 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x34>
		{
			// Send the device status
			// TODO: Check current configuration for power mode (if device is configured)
			// TODO: Check if remote wake-up is enabled
			uint8_t buff[] = { 0, 0 };
			armSend(0, buff, 2);
    6474:	2302      	movs	r3, #2
			uint8_t buff[] = { 0, 0 };
    6476:	7011      	strb	r1, [r2, #0]
    6478:	7051      	strb	r1, [r2, #1]
			armSend(0, buff, 2);
    647a:	0030      	movs	r0, r6
    647c:	f7ff feac 	bl	61d8 <_ZN14USBDeviceClass7armSendEmPKvm>
			return true;
    6480:	2001      	movs	r0, #1
		return true;

	default:
		return true;
	}
}
    6482:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
			uint8_t buff[] = { 0, 0 };
    6484:	2300      	movs	r3, #0
    6486:	7013      	strb	r3, [r2, #0]
    6488:	7053      	strb	r3, [r2, #1]
			if (isEndpointHalt == 1)
    648a:	4b2e      	ldr	r3, [pc, #184]	; (6544 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xf4>)
			if (isRemoteWakeUpEnabled == 1)
    648c:	781b      	ldrb	r3, [r3, #0]
    648e:	2b01      	cmp	r3, #1
    6490:	d100      	bne.n	6494 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x44>
				buff[0] = 1;
    6492:	7013      	strb	r3, [r2, #0]
			armSend(0, buff, 2);
    6494:	2302      	movs	r3, #2
		armSend(0, (void*)&_usbSetInterface, 1);
    6496:	2100      	movs	r1, #0
    6498:	e7ef      	b.n	647a <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x2a>
		if (setup.wValueL == 1) // DEVICEREMOTEWAKEUP
    649a:	788a      	ldrb	r2, [r1, #2]
    649c:	2300      	movs	r3, #0
    649e:	2a01      	cmp	r2, #1
    64a0:	d104      	bne.n	64ac <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x5c>
			uint8_t buff[] = { 0, 0 };
    64a2:	aa01      	add	r2, sp, #4
    64a4:	7013      	strb	r3, [r2, #0]
    64a6:	7053      	strb	r3, [r2, #1]
			if (isRemoteWakeUpEnabled == 1)
    64a8:	4b27      	ldr	r3, [pc, #156]	; (6548 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xf8>)
    64aa:	e7ef      	b.n	648c <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x3c>
			isEndpointHalt = 0;
    64ac:	4a25      	ldr	r2, [pc, #148]	; (6544 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xf4>)
    64ae:	7013      	strb	r3, [r2, #0]
    64b0:	4a26      	ldr	r2, [pc, #152]	; (654c <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xfc>)
    64b2:	6993      	ldr	r3, [r2, #24]
    64b4:	0b9b      	lsrs	r3, r3, #14
    64b6:	039b      	lsls	r3, r3, #14
    64b8:	6193      	str	r3, [r2, #24]
    64ba:	e7e1      	b.n	6480 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x30>
		if (setup.wValueL == 1) // DEVICEREMOTEWAKEUP
    64bc:	788c      	ldrb	r4, [r1, #2]
    64be:	2c01      	cmp	r4, #1
    64c0:	d106      	bne.n	64d0 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x80>
			uint8_t buff[] = { 0 };
    64c2:	2100      	movs	r1, #0
			isRemoteWakeUpEnabled = 1;
    64c4:	4b20      	ldr	r3, [pc, #128]	; (6548 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xf8>)
			uint8_t buff[] = { 0 };
    64c6:	aa01      	add	r2, sp, #4
			isRemoteWakeUpEnabled = 1;
    64c8:	701c      	strb	r4, [r3, #0]
			uint8_t buff[] = { 0 };
    64ca:	7011      	strb	r1, [r2, #0]
			armSend(0, buff, 1);
    64cc:	0023      	movs	r3, r4
    64ce:	e7d4      	b.n	647a <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x2a>
		if (setup.wValueL == 0) // ENDPOINTHALT
    64d0:	2c00      	cmp	r4, #0
    64d2:	d108      	bne.n	64e6 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x96>
			isEndpointHalt = 1;
    64d4:	2001      	movs	r0, #1
    64d6:	4b1b      	ldr	r3, [pc, #108]	; (6544 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xf4>)
    64d8:	4a1c      	ldr	r2, [pc, #112]	; (654c <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xfc>)
    64da:	7018      	strb	r0, [r3, #0]
    64dc:	6993      	ldr	r3, [r2, #24]
    64de:	0b9b      	lsrs	r3, r3, #14
    64e0:	039b      	lsls	r3, r3, #14
    64e2:	6193      	str	r3, [r2, #24]
			return true;
    64e4:	e7cd      	b.n	6482 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x32>
		setAddress(setup.wValueL);
    64e6:	78a9      	ldrb	r1, [r5, #2]
    64e8:	0030      	movs	r0, r6
    64ea:	f7ff fc29 	bl	5d40 <_ZN14USBDeviceClass10setAddressEm>
    64ee:	e7c7      	b.n	6480 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x30>
		return sendDescriptor(setup);
    64f0:	0030      	movs	r0, r6
    64f2:	f7ff ff3b 	bl	636c <_ZN14USBDeviceClass14sendDescriptorER8USBSetup>
    64f6:	e7c4      	b.n	6482 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x32>
		armSend(0, (void*)&_usbConfiguration, 1);
    64f8:	2301      	movs	r3, #1
    64fa:	4a15      	ldr	r2, [pc, #84]	; (6550 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x100>)
    64fc:	e7cb      	b.n	6496 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x46>
		if (REQUEST_DEVICE == (setup.bmRequestType & REQUEST_RECIPIENT)) {
    64fe:	780b      	ldrb	r3, [r1, #0]
			return false;
    6500:	2000      	movs	r0, #0
		if (REQUEST_DEVICE == (setup.bmRequestType & REQUEST_RECIPIENT)) {
    6502:	06db      	lsls	r3, r3, #27
    6504:	d1bd      	bne.n	6482 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x32>
			initEndpoints();
    6506:	0030      	movs	r0, r6
    6508:	f7ff fcd6 	bl	5eb8 <_ZN14USBDeviceClass13initEndpointsEv>
	inline void epBank1EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT1 = 1; }
    650c:	202a      	movs	r0, #42	; 0x2a
    650e:	2102      	movs	r1, #2
			_usbConfiguration = setup.wValueL;
    6510:	78aa      	ldrb	r2, [r5, #2]
    6512:	4b0f      	ldr	r3, [pc, #60]	; (6550 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x100>)
    6514:	30ff      	adds	r0, #255	; 0xff
    6516:	601a      	str	r2, [r3, #0]
    6518:	4a0c      	ldr	r2, [pc, #48]	; (654c <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xfc>)
    651a:	6813      	ldr	r3, [r2, #0]
    651c:	5c1c      	ldrb	r4, [r3, r0]
    651e:	4321      	orrs	r1, r4
	inline void epBank0EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT0 = 1; }
    6520:	244a      	movs	r4, #74	; 0x4a
	inline void epBank1EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT1 = 1; }
    6522:	5419      	strb	r1, [r3, r0]
	inline void epBank0EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT0 = 1; }
    6524:	34ff      	adds	r4, #255	; 0xff
    6526:	5d19      	ldrb	r1, [r3, r4]
    6528:	3829      	subs	r0, #41	; 0x29
    652a:	38ff      	subs	r0, #255	; 0xff
    652c:	4301      	orrs	r1, r0
    652e:	5519      	strb	r1, [r3, r4]
    6530:	e7d4      	b.n	64dc <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x8c>
		armSend(0, (void*)&_usbSetInterface, 1);
    6532:	2301      	movs	r3, #1
    6534:	4a07      	ldr	r2, [pc, #28]	; (6554 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x104>)
    6536:	e7ae      	b.n	6496 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x46>
		_usbSetInterface = setup.wValueL;
    6538:	788a      	ldrb	r2, [r1, #2]
    653a:	4b06      	ldr	r3, [pc, #24]	; (6554 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x104>)
    653c:	601a      	str	r2, [r3, #0]
    653e:	e7b7      	b.n	64b0 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x60>
		return false;
    6540:	2000      	movs	r0, #0
    6542:	e79e      	b.n	6482 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x32>
    6544:	2000062c 	.word	0x2000062c
    6548:	20000634 	.word	0x20000634
    654c:	20000ac4 	.word	0x20000ac4
    6550:	20000abc 	.word	0x20000abc
    6554:	20000ac0 	.word	0x20000ac0

00006558 <_ZN14USBDeviceClass10ISRHandlerEv>:

void USBDeviceClass::ISRHandler()
{

	if (_pack_message == true) {
    6558:	4b3c      	ldr	r3, [pc, #240]	; (664c <_ZN14USBDeviceClass10ISRHandlerEv+0xf4>)
{
    655a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (_pack_message == true) {
    655c:	781c      	ldrb	r4, [r3, #0]
{
    655e:	0007      	movs	r7, r0
	if (_pack_message == true) {
    6560:	2c00      	cmp	r4, #0
    6562:	d15e      	bne.n	6622 <_ZN14USBDeviceClass10ISRHandlerEv+0xca>
	inline bool isEndOfResetInterrupt()        { return usb.INTFLAG.bit.EORST; }
    6564:	4e3a      	ldr	r6, [pc, #232]	; (6650 <_ZN14USBDeviceClass10ISRHandlerEv+0xf8>)
    6566:	6833      	ldr	r3, [r6, #0]
    6568:	8b9b      	ldrh	r3, [r3, #28]
		return;
	}
	// End-Of-Reset
	if (usbd.isEndOfResetInterrupt())
    656a:	071b      	lsls	r3, r3, #28
    656c:	d50e      	bpl.n	658c <_ZN14USBDeviceClass10ISRHandlerEv+0x34>
    656e:	0021      	movs	r1, r4
    6570:	0020      	movs	r0, r4
    6572:	f7ff f93d 	bl	57f0 <_ZN14USBDeviceClass6initEPEmm.part.5>
	inline void epBank0EnableSetupReceived(ep_t ep)    { usb.DeviceEndpoint[ep].EPINTENSET.bit.RXSTP = 1; }
    6576:	6832      	ldr	r2, [r6, #0]
    6578:	2310      	movs	r3, #16
    657a:	0011      	movs	r1, r2
    657c:	31ff      	adds	r1, #255	; 0xff
    657e:	7a88      	ldrb	r0, [r1, #10]
    6580:	4303      	orrs	r3, r0
    6582:	728b      	strb	r3, [r1, #10]
		initEP(0, USB_ENDPOINT_TYPE_CONTROL);

		// Enable Setup-Received interrupt
		usbd.epBank0EnableSetupReceived(0);

		_usbConfiguration = 0;
    6584:	4b33      	ldr	r3, [pc, #204]	; (6654 <_ZN14USBDeviceClass10ISRHandlerEv+0xfc>)
    6586:	601c      	str	r4, [r3, #0]
	inline void ackEndOfResetInterrupt()       { usb.INTFLAG.reg = USB_DEVICE_INTFLAG_EORST; }
    6588:	2308      	movs	r3, #8
    658a:	8393      	strh	r3, [r2, #28]
	inline bool isStartOfFrameInterrupt()      { return usb.INTFLAG.bit.SOF; }
    658c:	6833      	ldr	r3, [r6, #0]
    658e:	8b9a      	ldrh	r2, [r3, #28]

		usbd.ackEndOfResetInterrupt();
	}

	// Start-Of-Frame
	if (usbd.isStartOfFrameInterrupt())
    6590:	0752      	lsls	r2, r2, #29
    6592:	d501      	bpl.n	6598 <_ZN14USBDeviceClass10ISRHandlerEv+0x40>
	inline void ackStartOfFrameInterrupt()     { usb.INTFLAG.reg = USB_DEVICE_INTFLAG_SOF; }
    6594:	2204      	movs	r2, #4
    6596:	839a      	strh	r2, [r3, #28]
	inline bool epBank0IsSetupReceived(ep_t ep)     { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.RXSTP; }
    6598:	33ff      	adds	r3, #255	; 0xff
    659a:	7a1a      	ldrb	r2, [r3, #8]
		}
#endif
	}

	// Endpoint 0 Received Setup interrupt
	if (usbd.epBank0IsSetupReceived(0))
    659c:	06d2      	lsls	r2, r2, #27
    659e:	d520      	bpl.n	65e2 <_ZN14USBDeviceClass10ISRHandlerEv+0x8a>
	inline void epBank0AckSetupReceived(ep_t ep)    { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_RXSTP; }
    65a0:	2210      	movs	r2, #16
    65a2:	721a      	strb	r2, [r3, #8]
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
    65a4:	7959      	ldrb	r1, [r3, #5]
    65a6:	3230      	adds	r2, #48	; 0x30
    65a8:	430a      	orrs	r2, r1
    65aa:	715a      	strb	r2, [r3, #5]
		/* Clear the Bank 0 ready flag on Control OUT */
		// The RAM Buffer is empty: we can receive data
		usbd.epBank0ResetReady(0);

		bool ok;
		if (REQUEST_STANDARD == (setup->bmRequestType & REQUEST_TYPE)) {
    65ac:	2360      	movs	r3, #96	; 0x60
    65ae:	492a      	ldr	r1, [pc, #168]	; (6658 <_ZN14USBDeviceClass10ISRHandlerEv+0x100>)
			// Standard Requests
			ok = handleStandardSetup(*setup);
    65b0:	0038      	movs	r0, r7
		if (REQUEST_STANDARD == (setup->bmRequestType & REQUEST_TYPE)) {
    65b2:	780a      	ldrb	r2, [r1, #0]
    65b4:	421a      	tst	r2, r3
    65b6:	d135      	bne.n	6624 <_ZN14USBDeviceClass10ISRHandlerEv+0xcc>
			ok = handleStandardSetup(*setup);
    65b8:	f7ff ff4a 	bl	6450 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup>
		} else {
			// Class Interface Requests
			ok = handleClassInterfaceSetup(*setup);
		}

		if (ok) {
    65bc:	2800      	cmp	r0, #0
    65be:	d034      	beq.n	662a <_ZN14USBDeviceClass10ISRHandlerEv+0xd2>
	inline void epBank1SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK1RDY = 1; }
    65c0:	2280      	movs	r2, #128	; 0x80
    65c2:	6833      	ldr	r3, [r6, #0]
    65c4:	4252      	negs	r2, r2
    65c6:	33ff      	adds	r3, #255	; 0xff
    65c8:	7999      	ldrb	r1, [r3, #6]
    65ca:	430a      	orrs	r2, r1
	USB->DEVICE.DeviceEndpoint[ep].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_STALLRQ(2);
    65cc:	719a      	strb	r2, [r3, #6]
	inline bool epBank1IsStalled(ep_t ep)           { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.STALL1; }
    65ce:	6833      	ldr	r3, [r6, #0]
    65d0:	33ff      	adds	r3, #255	; 0xff
    65d2:	7a1a      	ldrb	r2, [r3, #8]
			usbd.epBank1SetReady(0);
		} else {
			stall(0);
		}

		if (usbd.epBank1IsStalled(0))
    65d4:	0652      	lsls	r2, r2, #25
    65d6:	d504      	bpl.n	65e2 <_ZN14USBDeviceClass10ISRHandlerEv+0x8a>
	inline void epBank1AckStalled(ep_t ep)          { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL(2); }
    65d8:	2240      	movs	r2, #64	; 0x40
    65da:	721a      	strb	r2, [r3, #8]
	inline void epBank1DisableStalled(ep_t ep)          { usb.DeviceEndpoint[ep].EPINTENCLR.bit.STALL1 = 1; }
    65dc:	7a59      	ldrb	r1, [r3, #9]
    65de:	430a      	orrs	r2, r1
    65e0:	725a      	strb	r2, [r3, #9]
	inline uint16_t epInterruptSummary() { return usb.EPINTSMRY.reg; }
    65e2:	6833      	ldr	r3, [r6, #0]
		}

	} // end Received Setup handler

	uint8_t i=0;
	uint8_t ept_int = usbd.epInterruptSummary() & 0xFE; // Remove endpoint number 0 (setup)
    65e4:	2500      	movs	r5, #0
    65e6:	8c1c      	ldrh	r4, [r3, #32]
    65e8:	2301      	movs	r3, #1
    65ea:	439c      	bics	r4, r3
    65ec:	b2e4      	uxtb	r4, r4
	while (ept_int != 0)
	{
		// Check if endpoint has a pending interrupt
		if ((ept_int & (1 << i)) != 0)
    65ee:	9301      	str	r3, [sp, #4]
    65f0:	b2e9      	uxtb	r1, r5
	while (ept_int != 0)
    65f2:	2c00      	cmp	r4, #0
    65f4:	d015      	beq.n	6622 <_ZN14USBDeviceClass10ISRHandlerEv+0xca>
		if ((ept_int & (1 << i)) != 0)
    65f6:	0023      	movs	r3, r4
    65f8:	412b      	asrs	r3, r5
    65fa:	9a01      	ldr	r2, [sp, #4]
    65fc:	4213      	tst	r3, r2
    65fe:	d00d      	beq.n	661c <_ZN14USBDeviceClass10ISRHandlerEv+0xc4>
	inline bool epBank0IsTransferComplete(ep_t ep)  { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.TRCPT0; }
    6600:	002b      	movs	r3, r5
    6602:	6832      	ldr	r2, [r6, #0]
    6604:	3308      	adds	r3, #8
    6606:	015b      	lsls	r3, r3, #5
    6608:	18d3      	adds	r3, r2, r3
    660a:	79da      	ldrb	r2, [r3, #7]
		{
			// Endpoint Transfer Complete (0/1) Interrupt
			if (usbd.epBank0IsTransferComplete(i) ||
    660c:	07d2      	lsls	r2, r2, #31
    660e:	d413      	bmi.n	6638 <_ZN14USBDeviceClass10ISRHandlerEv+0xe0>
	inline bool epBank1IsTransferComplete(ep_t ep)  { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.TRCPT1; }
    6610:	79db      	ldrb	r3, [r3, #7]
    6612:	079b      	lsls	r3, r3, #30
    6614:	d410      	bmi.n	6638 <_ZN14USBDeviceClass10ISRHandlerEv+0xe0>
					epHandlers[i]->handleEndpoint();
				} else {
					handleEndpoint(i);
				}
			}
			ept_int &= ~(1 << i);
    6616:	9b01      	ldr	r3, [sp, #4]
    6618:	40ab      	lsls	r3, r5
    661a:	439c      	bics	r4, r3
    661c:	3501      	adds	r5, #1
		}
		i++;
		if (i > USB_EPT_NUM)
    661e:	2d09      	cmp	r5, #9
    6620:	d1e6      	bne.n	65f0 <_ZN14USBDeviceClass10ISRHandlerEv+0x98>
			break;  // fire exit
	}
}
    6622:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
			ok = handleClassInterfaceSetup(*setup);
    6624:	f7ff fbb0 	bl	5d88 <_ZN14USBDeviceClass25handleClassInterfaceSetupER8USBSetup>
    6628:	e7c8      	b.n	65bc <_ZN14USBDeviceClass10ISRHandlerEv+0x64>
	USB->DEVICE.DeviceEndpoint[ep].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_STALLRQ(2);
    662a:	2220      	movs	r2, #32
    662c:	4b0b      	ldr	r3, [pc, #44]	; (665c <_ZN14USBDeviceClass10ISRHandlerEv+0x104>)
    662e:	e7cd      	b.n	65cc <_ZN14USBDeviceClass10ISRHandlerEv+0x74>
					epHandlers[i]->handleEndpoint();
    6630:	6803      	ldr	r3, [r0, #0]
    6632:	681b      	ldr	r3, [r3, #0]
    6634:	4798      	blx	r3
    6636:	e7ee      	b.n	6616 <_ZN14USBDeviceClass10ISRHandlerEv+0xbe>
				if (epHandlers[i]) {
    6638:	4b09      	ldr	r3, [pc, #36]	; (6660 <_ZN14USBDeviceClass10ISRHandlerEv+0x108>)
    663a:	00aa      	lsls	r2, r5, #2
    663c:	58d0      	ldr	r0, [r2, r3]
    663e:	2800      	cmp	r0, #0
    6640:	d1f6      	bne.n	6630 <_ZN14USBDeviceClass10ISRHandlerEv+0xd8>
					handleEndpoint(i);
    6642:	0038      	movs	r0, r7
    6644:	f7ff fae0 	bl	5c08 <_ZN14USBDeviceClass14handleEndpointEh>
    6648:	e7e5      	b.n	6616 <_ZN14USBDeviceClass10ISRHandlerEv+0xbe>
    664a:	46c0      	nop			; (mov r8, r8)
    664c:	20000ab9 	.word	0x20000ab9
    6650:	20000ac4 	.word	0x20000ac4
    6654:	20000abc 	.word	0x20000abc
    6658:	200007f8 	.word	0x200007f8
    665c:	410050ff 	.word	0x410050ff
    6660:	20000610 	.word	0x20000610

00006664 <UDD_Handler>:
extern "C" void UDD_Handler(void) {
    6664:	b510      	push	{r4, lr}
	USBDevice.ISRHandler();
    6666:	4802      	ldr	r0, [pc, #8]	; (6670 <UDD_Handler+0xc>)
    6668:	f7ff ff76 	bl	6558 <_ZN14USBDeviceClass10ISRHandlerEv>
}
    666c:	bd10      	pop	{r4, pc}
    666e:	46c0      	nop			; (mov r8, r8)
    6670:	2000060c 	.word	0x2000060c

00006674 <_GLOBAL__sub_I__ZN20USBDevice_SAMD21G18x5resetEv>:
	USBDevice_SAMD21G18x() : usb(USB->DEVICE) {
    6674:	4a01      	ldr	r2, [pc, #4]	; (667c <_GLOBAL__sub_I__ZN20USBDevice_SAMD21G18x5resetEv+0x8>)
    6676:	4b02      	ldr	r3, [pc, #8]	; (6680 <_GLOBAL__sub_I__ZN20USBDevice_SAMD21G18x5resetEv+0xc>)
    6678:	601a      	str	r2, [r3, #0]
 * USB Device instance
 * -------------------
 */

// USBDevice class instance
USBDeviceClass USBDevice;
    667a:	4770      	bx	lr
    667c:	41005000 	.word	0x41005000
    6680:	20000ac4 	.word	0x20000ac4

00006684 <init>:
 *   - During reset, all PORT lines are configured as inputs with input buffers, output buffers and pull disabled.
 */
void init( void )
{
  // Set Systick to 1ms interval, common to all Cortex-M variants
  if ( SysTick_Config( SystemCoreClock / 1000 ) )
    6684:	21fa      	movs	r1, #250	; 0xfa
    6686:	4b31      	ldr	r3, [pc, #196]	; (674c <init+0xc8>)
{
    6688:	b510      	push	{r4, lr}
  if ( SysTick_Config( SystemCoreClock / 1000 ) )
    668a:	6818      	ldr	r0, [r3, #0]
    668c:	0089      	lsls	r1, r1, #2
    668e:	f000 fe3d 	bl	730c <__udivsi3>
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
    6692:	4b2f      	ldr	r3, [pc, #188]	; (6750 <init+0xcc>)
    6694:	3801      	subs	r0, #1
    6696:	4298      	cmp	r0, r3
    6698:	d856      	bhi.n	6748 <init+0xc4>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
    669a:	492e      	ldr	r1, [pc, #184]	; (6754 <init+0xd0>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    669c:	4a2e      	ldr	r2, [pc, #184]	; (6758 <init+0xd4>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
    669e:	6048      	str	r0, [r1, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    66a0:	20c0      	movs	r0, #192	; 0xc0
    66a2:	6a13      	ldr	r3, [r2, #32]
    66a4:	0600      	lsls	r0, r0, #24
    66a6:	021b      	lsls	r3, r3, #8
    66a8:	0a1b      	lsrs	r3, r3, #8
    66aa:	4303      	orrs	r3, r0
    66ac:	6213      	str	r3, [r2, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
    66ae:	2400      	movs	r4, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
    66b0:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
    66b2:	608c      	str	r4, [r1, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
    66b4:	600b      	str	r3, [r1, #0]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    66b6:	2180      	movs	r1, #128	; 0x80
    66b8:	6a13      	ldr	r3, [r2, #32]
    66ba:	0609      	lsls	r1, r1, #24
    66bc:	021b      	lsls	r3, r3, #8
    66be:	0a1b      	lsrs	r3, r3, #8
    66c0:	430b      	orrs	r3, r1
    66c2:	6213      	str	r3, [r2, #32]
//
//  // Clock EIC for I/O interrupts
//  PM->APBAMASK.reg |= PM_APBAMASK_EIC ;

  // Clock SERCOM for Serial
  PM->APBCMASK.reg |= PM_APBCMASK_SERCOM0 | PM_APBCMASK_SERCOM1 | PM_APBCMASK_SERCOM2 | PM_APBCMASK_SERCOM3 | PM_APBCMASK_SERCOM4 | PM_APBCMASK_SERCOM5 ;
    66c4:	22fc      	movs	r2, #252	; 0xfc
    66c6:	4b25      	ldr	r3, [pc, #148]	; (675c <init+0xd8>)
    66c8:	6a19      	ldr	r1, [r3, #32]
    66ca:	430a      	orrs	r2, r1
    66cc:	621a      	str	r2, [r3, #32]

  // Clock TC/TCC for Pulse and Analog
  PM->APBCMASK.reg |= PM_APBCMASK_TCC0 | PM_APBCMASK_TCC1 | PM_APBCMASK_TCC2 | PM_APBCMASK_TC3 | PM_APBCMASK_TC4 | PM_APBCMASK_TC5 ;
    66ce:	22fc      	movs	r2, #252	; 0xfc
    66d0:	6a19      	ldr	r1, [r3, #32]
    66d2:	0192      	lsls	r2, r2, #6
    66d4:	430a      	orrs	r2, r1
    66d6:	621a      	str	r2, [r3, #32]

  // Clock ADC/DAC for Analog
  PM->APBCMASK.reg |= PM_APBCMASK_ADC | PM_APBCMASK_DAC ;
    66d8:	22a0      	movs	r2, #160	; 0xa0
    66da:	6a19      	ldr	r1, [r3, #32]
    66dc:	02d2      	lsls	r2, r2, #11
    66de:	430a      	orrs	r2, r1
    66e0:	621a      	str	r2, [r3, #32]

  // Setup all pins (digital and analog) in INPUT mode (default is nothing)
  for (uint32_t ul = 0 ; ul < NUM_DIGITAL_PINS ; ul++ )
  {
    pinMode( ul, INPUT ) ;
    66e2:	0020      	movs	r0, r4
    66e4:	2100      	movs	r1, #0
  for (uint32_t ul = 0 ; ul < NUM_DIGITAL_PINS ; ul++ )
    66e6:	3401      	adds	r4, #1
    pinMode( ul, INPUT ) ;
    66e8:	f000 f876 	bl	67d8 <pinMode>
  for (uint32_t ul = 0 ; ul < NUM_DIGITAL_PINS ; ul++ )
    66ec:	2c0f      	cmp	r4, #15
    66ee:	d1f8      	bne.n	66e2 <init+0x5e>
  }

  // Initialize Analog Controller
  // Setting clock
  while(GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY);
    66f0:	4b1b      	ldr	r3, [pc, #108]	; (6760 <init+0xdc>)
    66f2:	001c      	movs	r4, r3
    66f4:	785a      	ldrb	r2, [r3, #1]
    66f6:	b252      	sxtb	r2, r2
    66f8:	2a00      	cmp	r2, #0
    66fa:	dbfb      	blt.n	66f4 <init+0x70>

  GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID( GCM_ADC ) | // Generic Clock ADC
    66fc:	4a19      	ldr	r2, [pc, #100]	; (6764 <init+0xe0>)
    66fe:	805a      	strh	r2, [r3, #2]
                      GCLK_CLKCTRL_GEN_GCLK0     | // Generic Clock Generator 0 is source
                      GCLK_CLKCTRL_CLKEN ;

  while( ADC->STATUS.bit.SYNCBUSY == 1 );          // Wait for synchronization of registers between the clock domains
    6700:	4b19      	ldr	r3, [pc, #100]	; (6768 <init+0xe4>)
    6702:	001a      	movs	r2, r3
    6704:	7e59      	ldrb	r1, [r3, #25]
    6706:	09c9      	lsrs	r1, r1, #7
    6708:	2901      	cmp	r1, #1
    670a:	d0fb      	beq.n	6704 <init+0x80>

  ADC->CTRLB.reg = ADC_CTRLB_PRESCALER_DIV512 |    // Divide Clock by 512.
    670c:	21e4      	movs	r1, #228	; 0xe4
    670e:	00c9      	lsls	r1, r1, #3
    6710:	8099      	strh	r1, [r3, #4]
                   ADC_CTRLB_RESSEL_10BIT;         // 10 bits resolution as default

  ADC->SAMPCTRL.reg = 0x3f;                        // Set max Sampling Time Length
    6712:	213f      	movs	r1, #63	; 0x3f
    6714:	70d9      	strb	r1, [r3, #3]

  while( ADC->STATUS.bit.SYNCBUSY == 1 );          // Wait for synchronization of registers between the clock domains
    6716:	7e53      	ldrb	r3, [r2, #25]
    6718:	09db      	lsrs	r3, r3, #7
    671a:	2b01      	cmp	r3, #1
    671c:	d0fb      	beq.n	6716 <init+0x92>

  ADC->INPUTCTRL.reg = ADC_INPUTCTRL_MUXNEG_GND;   // No Negative input (Internal Ground)
    671e:	23c0      	movs	r3, #192	; 0xc0

  // Averaging (see datasheet table in AVGCTRL register description)
  ADC->AVGCTRL.reg = ADC_AVGCTRL_SAMPLENUM_1 |    // 1 sample only (no oversampling nor averaging)
    6720:	2000      	movs	r0, #0
  ADC->INPUTCTRL.reg = ADC_INPUTCTRL_MUXNEG_GND;   // No Negative input (Internal Ground)
    6722:	015b      	lsls	r3, r3, #5
    6724:	6113      	str	r3, [r2, #16]
  ADC->AVGCTRL.reg = ADC_AVGCTRL_SAMPLENUM_1 |    // 1 sample only (no oversampling nor averaging)
    6726:	7090      	strb	r0, [r2, #2]
                     ADC_AVGCTRL_ADJRES(0x0ul);   // Adjusting result by 0

  analogReference( AR_DEFAULT ) ; // Analog Reference is AREF pin (3.3v)
    6728:	f000 f824 	bl	6774 <analogReference>

  // Initialize DAC
  // Setting clock
  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY );
    672c:	7863      	ldrb	r3, [r4, #1]
    672e:	b25b      	sxtb	r3, r3
    6730:	2b00      	cmp	r3, #0
    6732:	dbfb      	blt.n	672c <init+0xa8>
  GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID( GCM_DAC ) | // Generic Clock ADC
    6734:	4b0d      	ldr	r3, [pc, #52]	; (676c <init+0xe8>)
                      GCLK_CLKCTRL_GEN_GCLK0     | // Generic Clock Generator 0 is source
                      GCLK_CLKCTRL_CLKEN ;

  while ( DAC->STATUS.bit.SYNCBUSY == 1 ); // Wait for synchronization of registers between the clock domains
    6736:	4a0e      	ldr	r2, [pc, #56]	; (6770 <init+0xec>)
  GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID( GCM_DAC ) | // Generic Clock ADC
    6738:	8063      	strh	r3, [r4, #2]
  while ( DAC->STATUS.bit.SYNCBUSY == 1 ); // Wait for synchronization of registers between the clock domains
    673a:	79d3      	ldrb	r3, [r2, #7]
    673c:	09db      	lsrs	r3, r3, #7
    673e:	2b01      	cmp	r3, #1
    6740:	d0fb      	beq.n	673a <init+0xb6>
  DAC->CTRLB.reg = DAC_CTRLB_REFSEL_AVCC | // Using the 3.3V reference
    6742:	2341      	movs	r3, #65	; 0x41
    6744:	7053      	strb	r3, [r2, #1]
                   DAC_CTRLB_EOEN ;        // External Output Enable (Vout)
}
    6746:	bd10      	pop	{r4, pc}
    6748:	e7fe      	b.n	6748 <init+0xc4>
    674a:	46c0      	nop			; (mov r8, r8)
    674c:	20000084 	.word	0x20000084
    6750:	00ffffff 	.word	0x00ffffff
    6754:	e000e010 	.word	0xe000e010
    6758:	e000ed00 	.word	0xe000ed00
    675c:	40000400 	.word	0x40000400
    6760:	40000c00 	.word	0x40000c00
    6764:	0000401e 	.word	0x0000401e
    6768:	42004000 	.word	0x42004000
    676c:	00004021 	.word	0x00004021
    6770:	42004800 	.word	0x42004800

00006774 <analogReference>:
static int _writeResolution = 8;

// Wait for synchronization of registers between the clock domains
static __inline__ void syncADC() __attribute__((always_inline, unused));
static void syncADC() {
  while (ADC->STATUS.bit.SYNCBUSY == 1)
    6774:	4a16      	ldr	r2, [pc, #88]	; (67d0 <analogReference+0x5c>)
 * External Reference should be between 1v and VDDANA-0.6v=2.7v
 *
 * Warning : On Arduino Zero board the input/output voltage for SAMD21G18 is 3.3 volts maximum
 */
void analogReference(eAnalogReference mode)
{
    6776:	b500      	push	{lr}
    6778:	0013      	movs	r3, r2
  while (ADC->STATUS.bit.SYNCBUSY == 1)
    677a:	7e51      	ldrb	r1, [r2, #25]
    677c:	09c9      	lsrs	r1, r1, #7
    677e:	2901      	cmp	r1, #1
    6780:	d0fb      	beq.n	677a <analogReference+0x6>
  syncADC();
  switch (mode)
    6782:	3801      	subs	r0, #1
    6784:	2804      	cmp	r0, #4
    6786:	d816      	bhi.n	67b6 <analogReference+0x42>
      ADC->INPUTCTRL.bit.GAIN = ADC_INPUTCTRL_GAIN_1X_Val;      // Gain Factor Selection
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_INT1V_Val;   // 1.0V voltage reference
      break;

    case AR_INTERNAL1V65:
      ADC->INPUTCTRL.bit.GAIN = ADC_INPUTCTRL_GAIN_1X_Val;      // Gain Factor Selection
    6788:	6919      	ldr	r1, [r3, #16]
    678a:	4a12      	ldr	r2, [pc, #72]	; (67d4 <analogReference+0x60>)
    678c:	400a      	ands	r2, r1
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_INTVCC1_Val; // 1/2 VDDANA = 0.5* 3V3 = 1.65V
    678e:	210f      	movs	r1, #15
      ADC->INPUTCTRL.bit.GAIN = ADC_INPUTCTRL_GAIN_1X_Val;      // Gain Factor Selection
    6790:	611a      	str	r2, [r3, #16]
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_INTVCC1_Val; // 1/2 VDDANA = 0.5* 3V3 = 1.65V
    6792:	785a      	ldrb	r2, [r3, #1]
    6794:	438a      	bics	r2, r1
  switch (mode)
    6796:	f000 fdaf 	bl	72f8 <__gnu_thumb1_case_uqi>
    679a:	0803      	.short	0x0803
    679c:	0b06      	.short	0x0b06
    679e:	03          	.byte	0x03
    679f:	00          	.byte	0x00
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_INTVCC0_Val; // 1/1.48 VDDANA = 1/1.48* 3V3 = 2.2297
    67a0:	0011      	movs	r1, r2
    67a2:	2201      	movs	r2, #1
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_INTVCC1_Val; // 1/2 VDDANA = 0.5* 3V3 = 1.65V
    67a4:	430a      	orrs	r2, r1
    67a6:	705a      	strb	r2, [r3, #1]
    default:
      ADC->INPUTCTRL.bit.GAIN = ADC_INPUTCTRL_GAIN_DIV2_Val;
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_INTVCC1_Val; // 1/2 VDDANA = 0.5* 3V3 = 1.65V
      break;
  }
}
    67a8:	bd00      	pop	{pc}
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_AREFA_Val;
    67aa:	0011      	movs	r1, r2
    67ac:	2203      	movs	r2, #3
    67ae:	e7f9      	b.n	67a4 <analogReference+0x30>
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_INTVCC1_Val; // 1/2 VDDANA = 0.5* 3V3 = 1.65V
    67b0:	0011      	movs	r1, r2
    67b2:	2202      	movs	r2, #2
    67b4:	e7f6      	b.n	67a4 <analogReference+0x30>
      ADC->INPUTCTRL.bit.GAIN = ADC_INPUTCTRL_GAIN_DIV2_Val;
    67b6:	23f0      	movs	r3, #240	; 0xf0
    67b8:	6911      	ldr	r1, [r2, #16]
    67ba:	051b      	lsls	r3, r3, #20
    67bc:	430b      	orrs	r3, r1
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_INTVCC1_Val; // 1/2 VDDANA = 0.5* 3V3 = 1.65V
    67be:	210f      	movs	r1, #15
      ADC->INPUTCTRL.bit.GAIN = ADC_INPUTCTRL_GAIN_DIV2_Val;
    67c0:	6113      	str	r3, [r2, #16]
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_INTVCC1_Val; // 1/2 VDDANA = 0.5* 3V3 = 1.65V
    67c2:	7853      	ldrb	r3, [r2, #1]
    67c4:	438b      	bics	r3, r1
    67c6:	0019      	movs	r1, r3
    67c8:	2302      	movs	r3, #2
    67ca:	430b      	orrs	r3, r1
    67cc:	7053      	strb	r3, [r2, #1]
}
    67ce:	e7eb      	b.n	67a8 <analogReference+0x34>
    67d0:	42004000 	.word	0x42004000
    67d4:	f0ffffff 	.word	0xf0ffffff

000067d8 <pinMode>:
#endif

void pinMode( uint32_t ulPin, uint32_t ulMode )
{
  // Handle the case the pin isn't usable as PIO
  if ( g_APinDescription[ulPin].ulPinType == PIO_NOT_A_PIN )
    67d8:	2318      	movs	r3, #24
{
    67da:	b530      	push	{r4, r5, lr}
  if ( g_APinDescription[ulPin].ulPinType == PIO_NOT_A_PIN )
    67dc:	001d      	movs	r5, r3
{
    67de:	0004      	movs	r4, r0
  if ( g_APinDescription[ulPin].ulPinType == PIO_NOT_A_PIN )
    67e0:	4345      	muls	r5, r0
    67e2:	2008      	movs	r0, #8
    67e4:	4a20      	ldr	r2, [pc, #128]	; (6868 <pinMode+0x90>)
    67e6:	1955      	adds	r5, r2, r5
    67e8:	5628      	ldrsb	r0, [r5, r0]
    67ea:	3001      	adds	r0, #1
    67ec:	d014      	beq.n	6818 <pinMode+0x40>
  {
    return ;
  }

  // Set pin mode according to chapter '22.6.3 I/O Pin Configuration'
  switch ( ulMode )
    67ee:	2903      	cmp	r1, #3
    67f0:	d812      	bhi.n	6818 <pinMode+0x40>
    67f2:	0008      	movs	r0, r1
      PORT->Group[g_APinDescription[ulPin].ulPort].OUTSET.reg = (uint32_t)(1<<g_APinDescription[ulPin].ulPin) ;
    break ;

    case INPUT_PULLDOWN:
      // Set pin to input mode with pull-down resistor enabled
      PORT->Group[g_APinDescription[ulPin].ulPort].PINCFG[g_APinDescription[ulPin].ulPin].reg=(uint8_t)(PORT_PINCFG_INEN|PORT_PINCFG_PULLEN) ;
    67f4:	4363      	muls	r3, r4
    67f6:	56d1      	ldrsb	r1, [r2, r3]
    67f8:	18d3      	adds	r3, r2, r3
  switch ( ulMode )
    67fa:	f000 fd7d 	bl	72f8 <__gnu_thumb1_case_uqi>
    67fe:	2802      	.short	0x2802
    6800:	1b0e      	.short	0x1b0e
      PORT->Group[g_APinDescription[ulPin].ulPort].PINCFG[g_APinDescription[ulPin].ulPin].reg=(uint8_t)(PORT_PINCFG_INEN) ;
    6802:	6858      	ldr	r0, [r3, #4]
    6804:	01cb      	lsls	r3, r1, #7
    6806:	2102      	movs	r1, #2
    6808:	4a18      	ldr	r2, [pc, #96]	; (686c <pinMode+0x94>)
    680a:	189b      	adds	r3, r3, r2
    680c:	181a      	adds	r2, r3, r0
    680e:	3240      	adds	r2, #64	; 0x40
    6810:	7011      	strb	r1, [r2, #0]
      PORT->Group[g_APinDescription[ulPin].ulPort].DIRCLR.reg = (uint32_t)(1<<g_APinDescription[ulPin].ulPin) ;
    6812:	2201      	movs	r2, #1
    6814:	4082      	lsls	r2, r0
    6816:	605a      	str	r2, [r3, #4]

    default:
      // do nothing
    break ;
  }
}
    6818:	bd30      	pop	{r4, r5, pc}
      PORT->Group[g_APinDescription[ulPin].ulPort].PINCFG[g_APinDescription[ulPin].ulPin].reg=(uint8_t)(PORT_PINCFG_INEN|PORT_PINCFG_PULLEN) ;
    681a:	6858      	ldr	r0, [r3, #4]
    681c:	01cb      	lsls	r3, r1, #7
    681e:	2106      	movs	r1, #6
    6820:	4a12      	ldr	r2, [pc, #72]	; (686c <pinMode+0x94>)
    6822:	189b      	adds	r3, r3, r2
    6824:	181a      	adds	r2, r3, r0
    6826:	3240      	adds	r2, #64	; 0x40
    6828:	7011      	strb	r1, [r2, #0]
      PORT->Group[g_APinDescription[ulPin].ulPort].DIRCLR.reg = (uint32_t)(1<<g_APinDescription[ulPin].ulPin) ;
    682a:	2201      	movs	r2, #1
    682c:	4082      	lsls	r2, r0
    682e:	605a      	str	r2, [r3, #4]
      PORT->Group[g_APinDescription[ulPin].ulPort].OUTSET.reg = (uint32_t)(1<<g_APinDescription[ulPin].ulPin) ;
    6830:	619a      	str	r2, [r3, #24]
    break ;
    6832:	e7f1      	b.n	6818 <pinMode+0x40>
      PORT->Group[g_APinDescription[ulPin].ulPort].PINCFG[g_APinDescription[ulPin].ulPin].reg=(uint8_t)(PORT_PINCFG_INEN|PORT_PINCFG_PULLEN) ;
    6834:	6858      	ldr	r0, [r3, #4]
    6836:	01cb      	lsls	r3, r1, #7
    6838:	2106      	movs	r1, #6
    683a:	4a0c      	ldr	r2, [pc, #48]	; (686c <pinMode+0x94>)
    683c:	189b      	adds	r3, r3, r2
    683e:	181a      	adds	r2, r3, r0
    6840:	3240      	adds	r2, #64	; 0x40
    6842:	7011      	strb	r1, [r2, #0]
      PORT->Group[g_APinDescription[ulPin].ulPort].DIRCLR.reg = (uint32_t)(1<<g_APinDescription[ulPin].ulPin) ;
    6844:	2201      	movs	r2, #1
    6846:	4082      	lsls	r2, r0
    6848:	605a      	str	r2, [r3, #4]
      PORT->Group[g_APinDescription[ulPin].ulPort].OUTCLR.reg = (uint32_t)(1<<g_APinDescription[ulPin].ulPin) ;
    684a:	615a      	str	r2, [r3, #20]
    break ;
    684c:	e7e4      	b.n	6818 <pinMode+0x40>
      PORT->Group[g_APinDescription[ulPin].ulPort].PINCFG[g_APinDescription[ulPin].ulPin].reg=(uint8_t)(PORT_PINCFG_INEN) ;
    684e:	6858      	ldr	r0, [r3, #4]
    6850:	01cb      	lsls	r3, r1, #7
    6852:	2102      	movs	r1, #2
    6854:	4a05      	ldr	r2, [pc, #20]	; (686c <pinMode+0x94>)
    6856:	189b      	adds	r3, r3, r2
    6858:	181a      	adds	r2, r3, r0
    685a:	3240      	adds	r2, #64	; 0x40
    685c:	7011      	strb	r1, [r2, #0]
      PORT->Group[g_APinDescription[ulPin].ulPort].DIRSET.reg = (uint32_t)(1<<g_APinDescription[ulPin].ulPin) ;
    685e:	2201      	movs	r2, #1
    6860:	4082      	lsls	r2, r0
    6862:	609a      	str	r2, [r3, #8]
    break ;
    6864:	e7d8      	b.n	6818 <pinMode+0x40>
    6866:	46c0      	nop			; (mov r8, r8)
    6868:	0000b9a4 	.word	0x0000b9a4
    686c:	41004400 	.word	0x41004400

00006870 <digitalWrite>:

void digitalWrite( uint32_t ulPin, uint32_t ulVal )
{
  // Handle the case the pin isn't usable as PIO
  if ( g_APinDescription[ulPin].ulPinType == PIO_NOT_A_PIN )
    6870:	2318      	movs	r3, #24
{
    6872:	b5f0      	push	{r4, r5, r6, r7, lr}
  if ( g_APinDescription[ulPin].ulPinType == PIO_NOT_A_PIN )
    6874:	2408      	movs	r4, #8
    6876:	4358      	muls	r0, r3
    6878:	4a11      	ldr	r2, [pc, #68]	; (68c0 <digitalWrite+0x50>)
    687a:	1813      	adds	r3, r2, r0
    687c:	571c      	ldrsb	r4, [r3, r4]
    687e:	3401      	adds	r4, #1
    6880:	d01b      	beq.n	68ba <digitalWrite+0x4a>
    return ;
  }

  EPortType port = g_APinDescription[ulPin].ulPort;
  uint32_t pin = g_APinDescription[ulPin].ulPin;
  uint32_t pinMask = (1ul << pin);
    6882:	2601      	movs	r6, #1
    6884:	0035      	movs	r5, r6
  uint32_t pin = g_APinDescription[ulPin].ulPin;
    6886:	685f      	ldr	r7, [r3, #4]

  if ( (PORT->Group[port].DIRSET.reg & pinMask) == 0 ) {
    6888:	5683      	ldrsb	r3, [r0, r2]
  uint32_t pinMask = (1ul << pin);
    688a:	40bd      	lsls	r5, r7
  if ( (PORT->Group[port].DIRSET.reg & pinMask) == 0 ) {
    688c:	4a0d      	ldr	r2, [pc, #52]	; (68c4 <digitalWrite+0x54>)
    688e:	01db      	lsls	r3, r3, #7
    6890:	189a      	adds	r2, r3, r2
    6892:	6890      	ldr	r0, [r2, #8]
    6894:	4228      	tst	r0, r5
    6896:	d10b      	bne.n	68b0 <digitalWrite+0x40>
    // the pin is not an output, disable pull-up if val is LOW, otherwise enable pull-up
    PORT->Group[port].PINCFG[pin].bit.PULLEN = ((ulVal == LOW) ? 0 : 1) ;
    6898:	000c      	movs	r4, r1
    689a:	1e60      	subs	r0, r4, #1
    689c:	4184      	sbcs	r4, r0
    689e:	19d2      	adds	r2, r2, r7
    68a0:	3240      	adds	r2, #64	; 0x40
    68a2:	7810      	ldrb	r0, [r2, #0]
    68a4:	4034      	ands	r4, r6
    68a6:	3603      	adds	r6, #3
    68a8:	00a4      	lsls	r4, r4, #2
    68aa:	43b0      	bics	r0, r6
    68ac:	4320      	orrs	r0, r4
    68ae:	7010      	strb	r0, [r2, #0]
  }

  switch ( ulVal )
  {
    case LOW:
      PORT->Group[port].OUTCLR.reg = pinMask;
    68b0:	4a04      	ldr	r2, [pc, #16]	; (68c4 <digitalWrite+0x54>)
    68b2:	189b      	adds	r3, r3, r2
  switch ( ulVal )
    68b4:	2900      	cmp	r1, #0
    68b6:	d101      	bne.n	68bc <digitalWrite+0x4c>
      PORT->Group[port].OUTCLR.reg = pinMask;
    68b8:	615d      	str	r5, [r3, #20]
      PORT->Group[port].OUTSET.reg = pinMask;
    break ;
  }

  return ;
}
    68ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
      PORT->Group[port].OUTSET.reg = pinMask;
    68bc:	619d      	str	r5, [r3, #24]
    break ;
    68be:	e7fc      	b.n	68ba <digitalWrite+0x4a>
    68c0:	0000b9a4 	.word	0x0000b9a4
    68c4:	41004400 	.word	0x41004400

000068c8 <digitalRead>:

int digitalRead( uint32_t ulPin )
{
  // Handle the case the pin isn't usable as PIO
  if ( g_APinDescription[ulPin].ulPinType == PIO_NOT_A_PIN )
    68c8:	2318      	movs	r3, #24
{
    68ca:	b510      	push	{r4, lr}
  if ( g_APinDescription[ulPin].ulPinType == PIO_NOT_A_PIN )
    68cc:	2408      	movs	r4, #8
    68ce:	4358      	muls	r0, r3
    68d0:	4907      	ldr	r1, [pc, #28]	; (68f0 <digitalRead+0x28>)
    68d2:	2300      	movs	r3, #0
    68d4:	180a      	adds	r2, r1, r0
    68d6:	5714      	ldrsb	r4, [r2, r4]
    68d8:	3401      	adds	r4, #1
    68da:	d006      	beq.n	68ea <digitalRead+0x22>
  {
    return LOW ;
  }

  if ( (PORT->Group[g_APinDescription[ulPin].ulPort].IN.reg & (1ul << g_APinDescription[ulPin].ulPin)) != 0 )
    68dc:	5643      	ldrsb	r3, [r0, r1]
    68de:	4905      	ldr	r1, [pc, #20]	; (68f4 <digitalRead+0x2c>)
    68e0:	01db      	lsls	r3, r3, #7
    68e2:	185b      	adds	r3, r3, r1
    68e4:	6a1b      	ldr	r3, [r3, #32]
    68e6:	6852      	ldr	r2, [r2, #4]
    68e8:	40d3      	lsrs	r3, r2
    68ea:	2001      	movs	r0, #1
  {
    return HIGH ;
  }

  return LOW ;
}
    68ec:	4018      	ands	r0, r3
    68ee:	bd10      	pop	{r4, pc}
    68f0:	0000b9a4 	.word	0x0000b9a4
    68f4:	41004400 	.word	0x41004400

000068f8 <pinPeripheral>:

#include "Arduino.h"
#include "wiring_private.h"

int pinPeripheral( uint32_t ulPin, EPioType ulPeripheral )
{
    68f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    68fa:	0003      	movs	r3, r0
  // Handle the case the pin isn't usable as PIO
  if ( g_APinDescription[ulPin].ulPinType == PIO_NOT_A_PIN )
    68fc:	2018      	movs	r0, #24
    68fe:	4358      	muls	r0, r3
    6900:	4a2a      	ldr	r2, [pc, #168]	; (69ac <pinPeripheral+0xb4>)
    6902:	1810      	adds	r0, r2, r0
    6904:	7a00      	ldrb	r0, [r0, #8]
    6906:	b240      	sxtb	r0, r0
  {
    return -1 ;
    6908:	0004      	movs	r4, r0
  if ( g_APinDescription[ulPin].ulPinType == PIO_NOT_A_PIN )
    690a:	3001      	adds	r0, #1
    690c:	d013      	beq.n	6936 <pinPeripheral+0x3e>
  }

  switch ( ulPeripheral )
    690e:	1c48      	adds	r0, r1, #1
    case PIO_NOT_A_PIN:
      return -1l ;
    break ;
  }

  return 0l ;
    6910:	2400      	movs	r4, #0
  switch ( ulPeripheral )
    6912:	280c      	cmp	r0, #12
    6914:	d80f      	bhi.n	6936 <pinPeripheral+0x3e>
    6916:	f000 fcef 	bl	72f8 <__gnu_thumb1_case_uqi>
    691a:	1c45      	.short	0x1c45
    691c:	1c1c1c1c 	.word	0x1c1c1c1c
    6920:	071c1c1c 	.word	0x071c1c1c
    6924:	0707      	.short	0x0707
    6926:	07          	.byte	0x07
    6927:	00          	.byte	0x00
      if ( ulPeripheral == PIO_INPUT )
    6928:	2909      	cmp	r1, #9
    692a:	d106      	bne.n	693a <pinPeripheral+0x42>
        pinMode( ulPin, INPUT ) ;
    692c:	2100      	movs	r1, #0
          pinMode( ulPin, INPUT_PULLUP ) ;
    692e:	0018      	movs	r0, r3
    6930:	f7ff ff52 	bl	67d8 <pinMode>
  return 0l ;
    6934:	2400      	movs	r4, #0
}
    6936:	0020      	movs	r0, r4
    6938:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if ( ulPeripheral == PIO_INPUT_PULLUP )
    693a:	290a      	cmp	r1, #10
    693c:	d101      	bne.n	6942 <pinPeripheral+0x4a>
          pinMode( ulPin, INPUT_PULLUP ) ;
    693e:	3908      	subs	r1, #8
    6940:	e7f5      	b.n	692e <pinPeripheral+0x36>
  return 0l ;
    6942:	2400      	movs	r4, #0
          if ( ulPeripheral == PIO_OUTPUT )
    6944:	290b      	cmp	r1, #11
    6946:	d1f6      	bne.n	6936 <pinPeripheral+0x3e>
            pinMode( ulPin, OUTPUT ) ;
    6948:	390a      	subs	r1, #10
    694a:	0018      	movs	r0, r3
    694c:	f7ff ff44 	bl	67d8 <pinMode>
    6950:	e7f1      	b.n	6936 <pinPeripheral+0x3e>
      if ( g_APinDescription[ulPin].ulPin & 1 ) // is pin odd?
    6952:	2018      	movs	r0, #24
    6954:	4343      	muls	r3, r0
    6956:	18d0      	adds	r0, r2, r3
    6958:	6846      	ldr	r6, [r0, #4]
    695a:	2501      	movs	r5, #1
    695c:	0034      	movs	r4, r6
    695e:	56d2      	ldrsb	r2, [r2, r3]
        temp = (PORT->Group[g_APinDescription[ulPin].ulPort].PMUX[g_APinDescription[ulPin].ulPin >> 1].reg) & PORT_PMUX_PMUXE( 0xF ) ;
    6960:	4813      	ldr	r0, [pc, #76]	; (69b0 <pinPeripheral+0xb8>)
    6962:	01d2      	lsls	r2, r2, #7
    6964:	1812      	adds	r2, r2, r0
    6966:	0873      	lsrs	r3, r6, #1
    6968:	18d3      	adds	r3, r2, r3
    696a:	3330      	adds	r3, #48	; 0x30
      if ( g_APinDescription[ulPin].ulPin & 1 ) // is pin odd?
    696c:	402c      	ands	r4, r5
        temp = (PORT->Group[g_APinDescription[ulPin].ulPort].PMUX[g_APinDescription[ulPin].ulPin >> 1].reg) & PORT_PMUX_PMUXE( 0xF ) ;
    696e:	7818      	ldrb	r0, [r3, #0]
      if ( g_APinDescription[ulPin].ulPin & 1 ) // is pin odd?
    6970:	2c00      	cmp	r4, #0
    6972:	d00b      	beq.n	698c <pinPeripheral+0x94>
        PORT->Group[g_APinDescription[ulPin].ulPort].PMUX[g_APinDescription[ulPin].ulPin >> 1].reg = temp|PORT_PMUX_PMUXO( ulPeripheral ) ;
    6974:	240f      	movs	r4, #15
    6976:	0109      	lsls	r1, r1, #4
    6978:	4020      	ands	r0, r4
    697a:	4301      	orrs	r1, r0
    697c:	b2c9      	uxtb	r1, r1
        PORT->Group[g_APinDescription[ulPin].ulPort].PINCFG[g_APinDescription[ulPin].ulPin].reg |= PORT_PINCFG_PMUXEN ;
    697e:	1992      	adds	r2, r2, r6
        PORT->Group[g_APinDescription[ulPin].ulPort].PMUX[g_APinDescription[ulPin].ulPin >> 1].reg = temp|PORT_PMUX_PMUXO( ulPeripheral ) ;
    6980:	7019      	strb	r1, [r3, #0]
        PORT->Group[g_APinDescription[ulPin].ulPort].PINCFG[g_APinDescription[ulPin].ulPin].reg |= PORT_PINCFG_PMUXEN ;
    6982:	3240      	adds	r2, #64	; 0x40
    6984:	7813      	ldrb	r3, [r2, #0]
    6986:	431d      	orrs	r5, r3
    6988:	7015      	strb	r5, [r2, #0]
    698a:	e7d3      	b.n	6934 <pinPeripheral+0x3c>
        PORT->Group[g_APinDescription[ulPin].ulPort].PMUX[g_APinDescription[ulPin].ulPin >> 1].reg = temp|PORT_PMUX_PMUXE( ulPeripheral ) ;
    698c:	270f      	movs	r7, #15
    698e:	43b8      	bics	r0, r7
    6990:	4301      	orrs	r1, r0
        PORT->Group[g_APinDescription[ulPin].ulPort].PINCFG[g_APinDescription[ulPin].ulPin].reg |= PORT_PINCFG_PMUXEN ; // Enable port mux
    6992:	1992      	adds	r2, r2, r6
        PORT->Group[g_APinDescription[ulPin].ulPort].PMUX[g_APinDescription[ulPin].ulPin >> 1].reg = temp|PORT_PMUX_PMUXE( ulPeripheral ) ;
    6994:	b2c9      	uxtb	r1, r1
    6996:	7019      	strb	r1, [r3, #0]
        PORT->Group[g_APinDescription[ulPin].ulPort].PINCFG[g_APinDescription[ulPin].ulPin].reg |= PORT_PINCFG_PMUXEN ; // Enable port mux
    6998:	0013      	movs	r3, r2
    699a:	3340      	adds	r3, #64	; 0x40
    699c:	781a      	ldrb	r2, [r3, #0]
    699e:	4315      	orrs	r5, r2
    69a0:	701d      	strb	r5, [r3, #0]
    69a2:	e7c8      	b.n	6936 <pinPeripheral+0x3e>
      return -1l ;
    69a4:	2401      	movs	r4, #1
    69a6:	4264      	negs	r4, r4
    69a8:	e7c5      	b.n	6936 <pinPeripheral+0x3e>
    69aa:	46c0      	nop			; (mov r8, r8)
    69ac:	0000b9a4 	.word	0x0000b9a4
    69b0:	41004400 	.word	0x41004400

000069b4 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	*this = dtostrf(value, (decimalPlaces + 2), decimalPlaces, buf);
}

String::~String()
    69b4:	b510      	push	{r4, lr}
    69b6:	0004      	movs	r4, r0
{
	free(buffer);
    69b8:	6800      	ldr	r0, [r0, #0]
    69ba:	f002 fc1f 	bl	91fc <free>
}
    69be:	0020      	movs	r0, r4
    69c0:	bd10      	pop	{r4, pc}

000069c2 <_ZN6String10invalidateEv>:
	capacity = 0;
	len = 0;
}

void String::invalidate(void)
{
    69c2:	b510      	push	{r4, lr}
    69c4:	0004      	movs	r4, r0
	if (buffer) free(buffer);
    69c6:	6800      	ldr	r0, [r0, #0]
    69c8:	2800      	cmp	r0, #0
    69ca:	d001      	beq.n	69d0 <_ZN6String10invalidateEv+0xe>
    69cc:	f002 fc16 	bl	91fc <free>
	buffer = NULL;
    69d0:	2300      	movs	r3, #0
    69d2:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
    69d4:	60a3      	str	r3, [r4, #8]
    69d6:	6063      	str	r3, [r4, #4]
}
    69d8:	bd10      	pop	{r4, pc}

000069da <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
    69da:	b570      	push	{r4, r5, r6, lr}
    69dc:	0004      	movs	r4, r0
    69de:	000d      	movs	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
    69e0:	6800      	ldr	r0, [r0, #0]
    69e2:	3101      	adds	r1, #1
    69e4:	f003 f970 	bl	9cc8 <realloc>
    69e8:	1e03      	subs	r3, r0, #0
	if (newbuffer) {
    69ea:	d001      	beq.n	69f0 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
		return 1;
    69ec:	2001      	movs	r0, #1
		capacity = maxStrLen;
    69ee:	c428      	stmia	r4!, {r3, r5}
	}
	return 0;
}
    69f0:	bd70      	pop	{r4, r5, r6, pc}

000069f2 <_ZN6String7reserveEj>:
	if (buffer && capacity >= size) return 1;
    69f2:	6803      	ldr	r3, [r0, #0]
{
    69f4:	b510      	push	{r4, lr}
    69f6:	0004      	movs	r4, r0
	if (buffer && capacity >= size) return 1;
    69f8:	2b00      	cmp	r3, #0
    69fa:	d004      	beq.n	6a06 <_ZN6String7reserveEj+0x14>
    69fc:	6843      	ldr	r3, [r0, #4]
    69fe:	428b      	cmp	r3, r1
    6a00:	d301      	bcc.n	6a06 <_ZN6String7reserveEj+0x14>
		if (len == 0) buffer[0] = 0;
    6a02:	2001      	movs	r0, #1
}
    6a04:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
    6a06:	0020      	movs	r0, r4
    6a08:	f7ff ffe7 	bl	69da <_ZN6String12changeBufferEj>
    6a0c:	2800      	cmp	r0, #0
    6a0e:	d0f9      	beq.n	6a04 <_ZN6String7reserveEj+0x12>
		if (len == 0) buffer[0] = 0;
    6a10:	68a3      	ldr	r3, [r4, #8]
    6a12:	2b00      	cmp	r3, #0
    6a14:	d1f5      	bne.n	6a02 <_ZN6String7reserveEj+0x10>
    6a16:	6822      	ldr	r2, [r4, #0]
    6a18:	7013      	strb	r3, [r2, #0]
    6a1a:	e7f2      	b.n	6a02 <_ZN6String7reserveEj+0x10>

00006a1c <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
    6a1c:	b570      	push	{r4, r5, r6, lr}
    6a1e:	000e      	movs	r6, r1
	if (!reserve(length)) {
    6a20:	0011      	movs	r1, r2
{
    6a22:	0004      	movs	r4, r0
    6a24:	0015      	movs	r5, r2
	if (!reserve(length)) {
    6a26:	f7ff ffe4 	bl	69f2 <_ZN6String7reserveEj>
    6a2a:	2800      	cmp	r0, #0
    6a2c:	d104      	bne.n	6a38 <_ZN6String4copyEPKcj+0x1c>
		invalidate();
    6a2e:	0020      	movs	r0, r4
    6a30:	f7ff ffc7 	bl	69c2 <_ZN6String10invalidateEv>
		return *this;
	}
	len = length;
	strcpy(buffer, cstr);
	return *this;
}
    6a34:	0020      	movs	r0, r4
    6a36:	bd70      	pop	{r4, r5, r6, pc}
	len = length;
    6a38:	60a5      	str	r5, [r4, #8]
	strcpy(buffer, cstr);
    6a3a:	0031      	movs	r1, r6
    6a3c:	6820      	ldr	r0, [r4, #0]
    6a3e:	f003 f981 	bl	9d44 <strcpy>
	return *this;
    6a42:	e7f7      	b.n	6a34 <_ZN6String4copyEPKcj+0x18>

00006a44 <_ZN6StringC1EPKc>:
	buffer = NULL;
    6a44:	2300      	movs	r3, #0
String::String(const char *cstr)
    6a46:	b570      	push	{r4, r5, r6, lr}
    6a48:	0004      	movs	r4, r0
    6a4a:	000d      	movs	r5, r1
	buffer = NULL;
    6a4c:	6003      	str	r3, [r0, #0]
	capacity = 0;
    6a4e:	6043      	str	r3, [r0, #4]
	len = 0;
    6a50:	6083      	str	r3, [r0, #8]
	if (cstr) copy(cstr, strlen(cstr));
    6a52:	4299      	cmp	r1, r3
    6a54:	d007      	beq.n	6a66 <_ZN6StringC1EPKc+0x22>
    6a56:	0008      	movs	r0, r1
    6a58:	f003 f97c 	bl	9d54 <strlen>
    6a5c:	0029      	movs	r1, r5
    6a5e:	0002      	movs	r2, r0
    6a60:	0020      	movs	r0, r4
    6a62:	f7ff ffdb 	bl	6a1c <_ZN6String4copyEPKcj>
}
    6a66:	0020      	movs	r0, r4
    6a68:	bd70      	pop	{r4, r5, r6, pc}

00006a6a <_Z11initVariantv>:
  PERIPH_WIRE.disableWIRE();
}

#endif

void initVariant() {
    6a6a:	b510      	push	{r4, lr}
  }
  disable_battery_fet(!batteryPresent);
#endif

  // NINA - SPI boot
  pinMode(NINA_GPIO0, OUTPUT);
    6a6c:	2101      	movs	r1, #1
    6a6e:	201e      	movs	r0, #30
    6a70:	f7ff feb2 	bl	67d8 <pinMode>
  digitalWrite(NINA_GPIO0, HIGH);
    6a74:	2101      	movs	r1, #1
    6a76:	201e      	movs	r0, #30
    6a78:	f7ff fefa 	bl	6870 <digitalWrite>

  // disable NINA
  pinMode(NINA_RESETN, OUTPUT);
    6a7c:	2101      	movs	r1, #1
    6a7e:	201f      	movs	r0, #31
    6a80:	f7ff feaa 	bl	67d8 <pinMode>
  digitalWrite(NINA_RESETN, HIGH);
    6a84:	2101      	movs	r1, #1
    6a86:	201f      	movs	r0, #31
    6a88:	f7ff fef2 	bl	6870 <digitalWrite>
}
    6a8c:	bd10      	pop	{r4, pc}
	...

00006a90 <SERCOM5_Handler>:

// Serial1
Uart Serial1(&sercom5, PIN_SERIAL1_RX, PIN_SERIAL1_TX, PAD_SERIAL1_RX, PAD_SERIAL1_TX);

void SERCOM5_Handler()
{
    6a90:	b510      	push	{r4, lr}
  Serial1.IrqHandler();
    6a92:	4802      	ldr	r0, [pc, #8]	; (6a9c <SERCOM5_Handler+0xc>)
    6a94:	f000 faeb 	bl	706e <_ZN4Uart10IrqHandlerEv>
}
    6a98:	bd10      	pop	{r4, pc}
    6a9a:	46c0      	nop			; (mov r8, r8)
    6a9c:	20000bc8 	.word	0x20000bc8

00006aa0 <SERCOM4_Handler>:

// Serial2
Uart Serial2(&sercom4, PIN_SERIAL2_RX, PIN_SERIAL2_TX, PAD_SERIAL2_RX, PAD_SERIAL2_TX, PIN_SERIAL2_RTS, PIN_SERIAL2_CTS);

void SERCOM4_Handler()
{
    6aa0:	b510      	push	{r4, lr}
  Serial2.IrqHandler();
    6aa2:	4802      	ldr	r0, [pc, #8]	; (6aac <SERCOM4_Handler+0xc>)
    6aa4:	f000 fae3 	bl	706e <_ZN4Uart10IrqHandlerEv>
}
    6aa8:	bd10      	pop	{r4, pc}
    6aaa:	46c0      	nop			; (mov r8, r8)
    6aac:	20000e04 	.word	0x20000e04

00006ab0 <_GLOBAL__sub_I_g_APinDescription>:
    6ab0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
SERCOM sercom0(SERCOM0);
    6ab2:	4919      	ldr	r1, [pc, #100]	; (6b18 <_GLOBAL__sub_I_g_APinDescription+0x68>)
    6ab4:	4819      	ldr	r0, [pc, #100]	; (6b1c <_GLOBAL__sub_I_g_APinDescription+0x6c>)
    6ab6:	f000 f84b 	bl	6b50 <_ZN6SERCOMC1EP6Sercom>
SERCOM sercom1(SERCOM1);
    6aba:	4919      	ldr	r1, [pc, #100]	; (6b20 <_GLOBAL__sub_I_g_APinDescription+0x70>)
    6abc:	4819      	ldr	r0, [pc, #100]	; (6b24 <_GLOBAL__sub_I_g_APinDescription+0x74>)
    6abe:	f000 f847 	bl	6b50 <_ZN6SERCOMC1EP6Sercom>
SERCOM sercom2(SERCOM2);
    6ac2:	4919      	ldr	r1, [pc, #100]	; (6b28 <_GLOBAL__sub_I_g_APinDescription+0x78>)
    6ac4:	4819      	ldr	r0, [pc, #100]	; (6b2c <_GLOBAL__sub_I_g_APinDescription+0x7c>)
    6ac6:	f000 f843 	bl	6b50 <_ZN6SERCOMC1EP6Sercom>
SERCOM sercom3(SERCOM3);
    6aca:	4919      	ldr	r1, [pc, #100]	; (6b30 <_GLOBAL__sub_I_g_APinDescription+0x80>)
    6acc:	4819      	ldr	r0, [pc, #100]	; (6b34 <_GLOBAL__sub_I_g_APinDescription+0x84>)
    6ace:	f000 f83f 	bl	6b50 <_ZN6SERCOMC1EP6Sercom>
SERCOM sercom4(SERCOM4);
    6ad2:	4c19      	ldr	r4, [pc, #100]	; (6b38 <_GLOBAL__sub_I_g_APinDescription+0x88>)
    6ad4:	4919      	ldr	r1, [pc, #100]	; (6b3c <_GLOBAL__sub_I_g_APinDescription+0x8c>)
    6ad6:	0020      	movs	r0, r4
    6ad8:	f000 f83a 	bl	6b50 <_ZN6SERCOMC1EP6Sercom>
SERCOM sercom5(SERCOM5);
    6adc:	4e18      	ldr	r6, [pc, #96]	; (6b40 <_GLOBAL__sub_I_g_APinDescription+0x90>)
    6ade:	4919      	ldr	r1, [pc, #100]	; (6b44 <_GLOBAL__sub_I_g_APinDescription+0x94>)
    6ae0:	0030      	movs	r0, r6
    6ae2:	f000 f835 	bl	6b50 <_ZN6SERCOMC1EP6Sercom>
Uart Serial1(&sercom5, PIN_SERIAL1_RX, PIN_SERIAL1_TX, PAD_SERIAL1_RX, PAD_SERIAL1_TX);
    6ae6:	2501      	movs	r5, #1
    6ae8:	2303      	movs	r3, #3
    6aea:	0031      	movs	r1, r6
    6aec:	9501      	str	r5, [sp, #4]
    6aee:	9300      	str	r3, [sp, #0]
    6af0:	220d      	movs	r2, #13
    6af2:	330b      	adds	r3, #11
    6af4:	4814      	ldr	r0, [pc, #80]	; (6b48 <_GLOBAL__sub_I_g_APinDescription+0x98>)
    6af6:	f000 fa4f 	bl	6f98 <_ZN4UartC1EP6SERCOMhh11SercomRXPad15SercomUartTXPad>
Uart Serial2(&sercom4, PIN_SERIAL2_RX, PIN_SERIAL2_TX, PAD_SERIAL2_RX, PAD_SERIAL2_TX, PIN_SERIAL2_RTS, PIN_SERIAL2_CTS);
    6afa:	231d      	movs	r3, #29
    6afc:	9303      	str	r3, [sp, #12]
    6afe:	3b01      	subs	r3, #1
    6b00:	9302      	str	r3, [sp, #8]
    6b02:	3b1a      	subs	r3, #26
    6b04:	9301      	str	r3, [sp, #4]
    6b06:	9500      	str	r5, [sp, #0]
    6b08:	3318      	adds	r3, #24
    6b0a:	221b      	movs	r2, #27
    6b0c:	0021      	movs	r1, r4
    6b0e:	480f      	ldr	r0, [pc, #60]	; (6b4c <_GLOBAL__sub_I_g_APinDescription+0x9c>)
    6b10:	f000 f9fe 	bl	6f10 <_ZN4UartC1EP6SERCOMhh11SercomRXPad15SercomUartTXPadhh>
}
    6b14:	bd7f      	pop	{r0, r1, r2, r3, r4, r5, r6, pc}
    6b16:	46c0      	nop			; (mov r8, r8)
    6b18:	42000800 	.word	0x42000800
    6b1c:	20001040 	.word	0x20001040
    6b20:	42000c00 	.word	0x42000c00
    6b24:	20001044 	.word	0x20001044
    6b28:	42001000 	.word	0x42001000
    6b2c:	20001048 	.word	0x20001048
    6b30:	42001400 	.word	0x42001400
    6b34:	2000104c 	.word	0x2000104c
    6b38:	20001050 	.word	0x20001050
    6b3c:	42001800 	.word	0x42001800
    6b40:	20001054 	.word	0x20001054
    6b44:	42001c00 	.word	0x42001c00
    6b48:	20000bc8 	.word	0x20000bc8
    6b4c:	20000e04 	.word	0x20000e04

00006b50 <_ZN6SERCOMC1EP6Sercom>:
#define WIRE_RISE_TIME_NANOSECONDS 125
#endif

SERCOM::SERCOM(Sercom* s)
{
  sercom = s;
    6b50:	6001      	str	r1, [r0, #0]
}
    6b52:	4770      	bx	lr

00006b54 <_ZN6SERCOM9initFrameE18SercomUartCharSize15SercomDataOrder16SercomParityMode19SercomNumberStopBit>:
    sercom->USART.BAUD.FRAC.FP   = (baudTimes8 % 8);
    sercom->USART.BAUD.FRAC.BAUD = (baudTimes8 / 8);
  }
}
void SERCOM::initFrame(SercomUartCharSize charSize, SercomDataOrder dataOrder, SercomParityMode parityMode, SercomNumberStopBit nbStopBits)
{
    6b54:	b5f0      	push	{r4, r5, r6, r7, lr}
    6b56:	ac05      	add	r4, sp, #20
    6b58:	7825      	ldrb	r5, [r4, #0]
  //Setting the CTRLA register
  sercom->USART.CTRLA.reg |=	SERCOM_USART_CTRLA_FORM( (parityMode == SERCOM_NO_PARITY ? 0 : 1) ) |
    6b5a:	6804      	ldr	r4, [r0, #0]
    6b5c:	1e98      	subs	r0, r3, #2
    6b5e:	1e47      	subs	r7, r0, #1
    6b60:	41b8      	sbcs	r0, r7
                dataOrder << SERCOM_USART_CTRLA_DORD_Pos;
    6b62:	6826      	ldr	r6, [r4, #0]
    6b64:	0792      	lsls	r2, r2, #30
  sercom->USART.CTRLA.reg |=	SERCOM_USART_CTRLA_FORM( (parityMode == SERCOM_NO_PARITY ? 0 : 1) ) |
    6b66:	0600      	lsls	r0, r0, #24
                dataOrder << SERCOM_USART_CTRLA_DORD_Pos;
    6b68:	4332      	orrs	r2, r6
    6b6a:	4302      	orrs	r2, r0

  //Setting the CTRLB register
  sercom->USART.CTRLB.reg |=	SERCOM_USART_CTRLB_CHSIZE(charSize) |
    6b6c:	2007      	movs	r0, #7
  sercom->USART.CTRLA.reg |=	SERCOM_USART_CTRLA_FORM( (parityMode == SERCOM_NO_PARITY ? 0 : 1) ) |
    6b6e:	6022      	str	r2, [r4, #0]
  sercom->USART.CTRLB.reg |=	SERCOM_USART_CTRLB_CHSIZE(charSize) |
    6b70:	4001      	ands	r1, r0
                nbStopBits << SERCOM_USART_CTRLB_SBMODE_Pos |
    6b72:	01ad      	lsls	r5, r5, #6
                (parityMode == SERCOM_NO_PARITY ? 0 : parityMode) << SERCOM_USART_CTRLB_PMODE_Pos; //If no parity use default value
    6b74:	6862      	ldr	r2, [r4, #4]
    6b76:	4329      	orrs	r1, r5
    6b78:	2000      	movs	r0, #0
    6b7a:	2b02      	cmp	r3, #2
    6b7c:	d000      	beq.n	6b80 <_ZN6SERCOM9initFrameE18SercomUartCharSize15SercomDataOrder16SercomParityMode19SercomNumberStopBit+0x2c>
    6b7e:	0358      	lsls	r0, r3, #13
    6b80:	4311      	orrs	r1, r2
    6b82:	4301      	orrs	r1, r0
  sercom->USART.CTRLB.reg |=	SERCOM_USART_CTRLB_CHSIZE(charSize) |
    6b84:	6061      	str	r1, [r4, #4]
}
    6b86:	bdf0      	pop	{r4, r5, r6, r7, pc}

00006b88 <_ZN6SERCOM8initPadsE15SercomUartTXPad11SercomRXPad>:

void SERCOM::initPads(SercomUartTXPad txPad, SercomRXPad rxPad)
{
    6b88:	b510      	push	{r4, lr}
  //Setting the CTRLA register
  sercom->USART.CTRLA.reg |=	SERCOM_USART_CTRLA_TXPO(txPad) |
                SERCOM_USART_CTRLA_RXPO(rxPad);
    6b8a:	24c0      	movs	r4, #192	; 0xc0
  sercom->USART.CTRLA.reg |=	SERCOM_USART_CTRLA_TXPO(txPad) |
    6b8c:	6803      	ldr	r3, [r0, #0]
                SERCOM_USART_CTRLA_RXPO(rxPad);
    6b8e:	03a4      	lsls	r4, r4, #14
    6b90:	6818      	ldr	r0, [r3, #0]
    6b92:	0512      	lsls	r2, r2, #20
    6b94:	4022      	ands	r2, r4
    6b96:	4302      	orrs	r2, r0
  sercom->USART.CTRLA.reg |=	SERCOM_USART_CTRLA_TXPO(txPad) |
    6b98:	20c0      	movs	r0, #192	; 0xc0
    6b9a:	0409      	lsls	r1, r1, #16
    6b9c:	0280      	lsls	r0, r0, #10
    6b9e:	4001      	ands	r1, r0
                SERCOM_USART_CTRLA_RXPO(rxPad);
    6ba0:	4311      	orrs	r1, r2
  sercom->USART.CTRLA.reg |=	SERCOM_USART_CTRLA_TXPO(txPad) |
    6ba2:	6019      	str	r1, [r3, #0]

  // Enable Transceiver and Receiver
  sercom->USART.CTRLB.reg |= SERCOM_USART_CTRLB_TXEN | SERCOM_USART_CTRLB_RXEN ;
    6ba4:	685a      	ldr	r2, [r3, #4]
    6ba6:	4310      	orrs	r0, r2
    6ba8:	6058      	str	r0, [r3, #4]
}
    6baa:	bd10      	pop	{r4, pc}

00006bac <_ZN6SERCOM9resetUARTEv>:

void SERCOM::resetUART()
{
  // Start the Software Reset
  sercom->USART.CTRLA.bit.SWRST = 1 ;
    6bac:	2201      	movs	r2, #1
    6bae:	6803      	ldr	r3, [r0, #0]
    6bb0:	6819      	ldr	r1, [r3, #0]
    6bb2:	430a      	orrs	r2, r1
    6bb4:	601a      	str	r2, [r3, #0]

  while ( sercom->USART.CTRLA.bit.SWRST || sercom->USART.SYNCBUSY.bit.SWRST )
    6bb6:	681a      	ldr	r2, [r3, #0]
    6bb8:	07d2      	lsls	r2, r2, #31
    6bba:	d4fc      	bmi.n	6bb6 <_ZN6SERCOM9resetUARTEv+0xa>
    6bbc:	69da      	ldr	r2, [r3, #28]
    6bbe:	07d2      	lsls	r2, r2, #31
    6bc0:	d4f9      	bmi.n	6bb6 <_ZN6SERCOM9resetUARTEv+0xa>
  {
    // Wait for both bits Software Reset from CTRLA and SYNCBUSY coming back to 0
  }
}
    6bc2:	4770      	bx	lr

00006bc4 <_ZN6SERCOM10enableUARTEv>:

void SERCOM::enableUART()
{
  //Setting  the enable bit to 1
  sercom->USART.CTRLA.bit.ENABLE = 0x1u;
    6bc4:	2202      	movs	r2, #2
    6bc6:	6803      	ldr	r3, [r0, #0]
    6bc8:	6819      	ldr	r1, [r3, #0]
    6bca:	430a      	orrs	r2, r1
    6bcc:	601a      	str	r2, [r3, #0]

  //Wait for then enable bit from SYNCBUSY is equal to 0;
  while(sercom->USART.SYNCBUSY.bit.ENABLE);
    6bce:	69da      	ldr	r2, [r3, #28]
    6bd0:	0792      	lsls	r2, r2, #30
    6bd2:	d4fc      	bmi.n	6bce <_ZN6SERCOM10enableUARTEv+0xa>
}
    6bd4:	4770      	bx	lr

00006bd6 <_ZN6SERCOM9flushUARTEv>:
}

bool SERCOM::isDataRegisterEmptyUART()
{
  //DRE : Data Register Empty
  return sercom->USART.INTFLAG.bit.DRE;
    6bd6:	6803      	ldr	r3, [r0, #0]
    6bd8:	7e1a      	ldrb	r2, [r3, #24]
  if(isDataRegisterEmptyUART())
    6bda:	07d2      	lsls	r2, r2, #31
    6bdc:	d402      	bmi.n	6be4 <_ZN6SERCOM9flushUARTEv+0xe>
  while(!sercom->USART.INTFLAG.bit.TXC);
    6bde:	7e1a      	ldrb	r2, [r3, #24]
    6be0:	0792      	lsls	r2, r2, #30
    6be2:	d5fc      	bpl.n	6bde <_ZN6SERCOM9flushUARTEv+0x8>
}
    6be4:	4770      	bx	lr

00006be6 <_ZN6SERCOM15clearStatusUARTEv>:
  sercom->USART.STATUS.reg = SERCOM_USART_STATUS_RESETVALUE;
    6be6:	2200      	movs	r2, #0
    6be8:	6803      	ldr	r3, [r0, #0]
    6bea:	835a      	strh	r2, [r3, #26]
}
    6bec:	4770      	bx	lr

00006bee <_ZN6SERCOM17availableDataUARTEv>:
  return sercom->USART.INTFLAG.bit.RXC;
    6bee:	6803      	ldr	r3, [r0, #0]
    6bf0:	7e18      	ldrb	r0, [r3, #24]
    6bf2:	0740      	lsls	r0, r0, #29
    6bf4:	0fc0      	lsrs	r0, r0, #31
}
    6bf6:	4770      	bx	lr

00006bf8 <_ZN6SERCOM11isUARTErrorEv>:
  return sercom->USART.INTFLAG.bit.ERROR;
    6bf8:	6803      	ldr	r3, [r0, #0]
    6bfa:	7e18      	ldrb	r0, [r3, #24]
    6bfc:	09c0      	lsrs	r0, r0, #7
}
    6bfe:	4770      	bx	lr

00006c00 <_ZN6SERCOM20acknowledgeUARTErrorEv>:
  sercom->USART.INTFLAG.bit.ERROR = 1;
    6c00:	2380      	movs	r3, #128	; 0x80
    6c02:	6802      	ldr	r2, [r0, #0]
    6c04:	425b      	negs	r3, r3
    6c06:	7e11      	ldrb	r1, [r2, #24]
    6c08:	430b      	orrs	r3, r1
    6c0a:	7613      	strb	r3, [r2, #24]
}
    6c0c:	4770      	bx	lr

00006c0e <_ZN6SERCOM16isFrameErrorUARTEv>:
  return sercom->USART.STATUS.bit.FERR;
    6c0e:	6803      	ldr	r3, [r0, #0]
    6c10:	8b58      	ldrh	r0, [r3, #26]
    6c12:	0780      	lsls	r0, r0, #30
    6c14:	0fc0      	lsrs	r0, r0, #31
}
    6c16:	4770      	bx	lr

00006c18 <_ZN6SERCOM19clearFrameErrorUARTEv>:
  sercom->USART.STATUS.bit.FERR = 1;
    6c18:	2302      	movs	r3, #2
    6c1a:	6802      	ldr	r2, [r0, #0]
    6c1c:	8b51      	ldrh	r1, [r2, #26]
    6c1e:	430b      	orrs	r3, r1
    6c20:	8353      	strh	r3, [r2, #26]
}
    6c22:	4770      	bx	lr

00006c24 <_ZN6SERCOM23isDataRegisterEmptyUARTEv>:
  return sercom->USART.INTFLAG.bit.DRE;
    6c24:	6803      	ldr	r3, [r0, #0]
    6c26:	7e18      	ldrb	r0, [r3, #24]
    6c28:	07c0      	lsls	r0, r0, #31
    6c2a:	0fc0      	lsrs	r0, r0, #31
}
    6c2c:	4770      	bx	lr

00006c2e <_ZN6SERCOM12readDataUARTEv>:

uint8_t SERCOM::readDataUART()
{
  return sercom->USART.DATA.bit.DATA;
    6c2e:	6803      	ldr	r3, [r0, #0]
    6c30:	8d18      	ldrh	r0, [r3, #40]	; 0x28
    6c32:	b2c0      	uxtb	r0, r0
}
    6c34:	4770      	bx	lr

00006c36 <_ZN6SERCOM13writeDataUARTEh>:
  return sercom->USART.INTFLAG.bit.DRE;
    6c36:	6803      	ldr	r3, [r0, #0]
    6c38:	7e1a      	ldrb	r2, [r3, #24]

int SERCOM::writeDataUART(uint8_t data)
{
  // Wait for data register to be empty
  while(!isDataRegisterEmptyUART());
    6c3a:	07d2      	lsls	r2, r2, #31
    6c3c:	d5fc      	bpl.n	6c38 <_ZN6SERCOM13writeDataUARTEh+0x2>

  //Put data into DATA register
  sercom->USART.DATA.reg = (uint16_t)data;
    6c3e:	b289      	uxth	r1, r1
  return 1;
}
    6c40:	2001      	movs	r0, #1
  sercom->USART.DATA.reg = (uint16_t)data;
    6c42:	8519      	strh	r1, [r3, #40]	; 0x28
}
    6c44:	4770      	bx	lr

00006c46 <_ZN6SERCOM36enableDataRegisterEmptyInterruptUARTEv>:

void SERCOM::enableDataRegisterEmptyInterruptUART()
{
  sercom->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
    6c46:	2201      	movs	r2, #1
    6c48:	6803      	ldr	r3, [r0, #0]
    6c4a:	759a      	strb	r2, [r3, #22]
}
    6c4c:	4770      	bx	lr

00006c4e <_ZN6SERCOM37disableDataRegisterEmptyInterruptUARTEv>:

void SERCOM::disableDataRegisterEmptyInterruptUART()
{
  sercom->USART.INTENCLR.reg = SERCOM_USART_INTENCLR_DRE;
    6c4e:	2201      	movs	r2, #1
    6c50:	6803      	ldr	r3, [r0, #0]
    6c52:	751a      	strb	r2, [r3, #20]
}
    6c54:	4770      	bx	lr
	...

00006c58 <_ZN6SERCOM13initClockNVICEv>:
void SERCOM::initClockNVIC( void )
{
  uint8_t clockId = 0;
  IRQn_Type IdNvic=PendSV_IRQn ; // Dummy init to intercept potential error later

  if(sercom == SERCOM0)
    6c58:	6803      	ldr	r3, [r0, #0]
    6c5a:	4a21      	ldr	r2, [pc, #132]	; (6ce0 <_ZN6SERCOM13initClockNVICEv+0x88>)
{
    6c5c:	b530      	push	{r4, r5, lr}
  if(sercom == SERCOM0)
    6c5e:	4293      	cmp	r3, r2
    6c60:	d011      	beq.n	6c86 <_ZN6SERCOM13initClockNVICEv+0x2e>
  {
    clockId = GCM_SERCOM0_CORE;
    IdNvic = SERCOM0_IRQn;
  }
  else if(sercom == SERCOM1)
    6c62:	4a20      	ldr	r2, [pc, #128]	; (6ce4 <_ZN6SERCOM13initClockNVICEv+0x8c>)
    6c64:	4293      	cmp	r3, r2
    6c66:	d02f      	beq.n	6cc8 <_ZN6SERCOM13initClockNVICEv+0x70>
  {
    clockId = GCM_SERCOM1_CORE;
    IdNvic = SERCOM1_IRQn;
  }
  else if(sercom == SERCOM2)
    6c68:	4a1f      	ldr	r2, [pc, #124]	; (6ce8 <_ZN6SERCOM13initClockNVICEv+0x90>)
    6c6a:	4293      	cmp	r3, r2
    6c6c:	d02f      	beq.n	6cce <_ZN6SERCOM13initClockNVICEv+0x76>
  {
    clockId = GCM_SERCOM2_CORE;
    IdNvic = SERCOM2_IRQn;
  }
  else if(sercom == SERCOM3)
    6c6e:	4a1f      	ldr	r2, [pc, #124]	; (6cec <_ZN6SERCOM13initClockNVICEv+0x94>)
    6c70:	4293      	cmp	r3, r2
    6c72:	d02f      	beq.n	6cd4 <_ZN6SERCOM13initClockNVICEv+0x7c>
  {
    clockId = GCM_SERCOM3_CORE;
    IdNvic = SERCOM3_IRQn;
  }
  #if defined(SERCOM4)
  else if(sercom == SERCOM4)
    6c74:	4a1e      	ldr	r2, [pc, #120]	; (6cf0 <_ZN6SERCOM13initClockNVICEv+0x98>)
    6c76:	4293      	cmp	r3, r2
    6c78:	d02f      	beq.n	6cda <_ZN6SERCOM13initClockNVICEv+0x82>
    clockId = GCM_SERCOM4_CORE;
    IdNvic = SERCOM4_IRQn;
  }
  #endif // SERCOM4
  #if defined(SERCOM5)
  else if(sercom == SERCOM5)
    6c7a:	4a1e      	ldr	r2, [pc, #120]	; (6cf4 <_ZN6SERCOM13initClockNVICEv+0x9c>)
    6c7c:	4293      	cmp	r3, r2
    6c7e:	d122      	bne.n	6cc6 <_ZN6SERCOM13initClockNVICEv+0x6e>
  {
    clockId = GCM_SERCOM5_CORE;
    IdNvic = SERCOM5_IRQn;
    6c80:	230e      	movs	r3, #14
    clockId = GCM_SERCOM5_CORE;
    6c82:	2219      	movs	r2, #25
    6c84:	e001      	b.n	6c8a <_ZN6SERCOM13initClockNVICEv+0x32>
    IdNvic = SERCOM0_IRQn;
    6c86:	2309      	movs	r3, #9
    clockId = GCM_SERCOM0_CORE;
    6c88:	2214      	movs	r2, #20
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    6c8a:	2101      	movs	r1, #1
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    6c8c:	2503      	movs	r5, #3
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    6c8e:	4099      	lsls	r1, r3
    6c90:	4819      	ldr	r0, [pc, #100]	; (6cf8 <_ZN6SERCOM13initClockNVICEv+0xa0>)
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    6c92:	24c0      	movs	r4, #192	; 0xc0
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    6c94:	6001      	str	r1, [r0, #0]
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    6c96:	0899      	lsrs	r1, r3, #2
    6c98:	402b      	ands	r3, r5
    6c9a:	40ab      	lsls	r3, r5
    6c9c:	35fc      	adds	r5, #252	; 0xfc
    6c9e:	409d      	lsls	r5, r3
    6ca0:	0089      	lsls	r1, r1, #2
    6ca2:	1809      	adds	r1, r1, r0
    6ca4:	00a4      	lsls	r4, r4, #2
    6ca6:	5908      	ldr	r0, [r1, r4]
    6ca8:	43a8      	bics	r0, r5
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
    6caa:	25c0      	movs	r5, #192	; 0xc0
    6cac:	409d      	lsls	r5, r3
    6cae:	002b      	movs	r3, r5
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    6cb0:	4303      	orrs	r3, r0
    6cb2:	510b      	str	r3, [r1, r4]
  NVIC_EnableIRQ(IdNvic);
  NVIC_SetPriority (IdNvic, SERCOM_NVIC_PRIORITY);  /* set Priority */

  //Setting clock
  GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID( clockId ) | // Generic Clock 0 (SERCOMx)
                      GCLK_CLKCTRL_GEN_GCLK0 | // Generic Clock Generator 0 is source
    6cb4:	2380      	movs	r3, #128	; 0x80
    6cb6:	01db      	lsls	r3, r3, #7
    6cb8:	431a      	orrs	r2, r3
  GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID( clockId ) | // Generic Clock 0 (SERCOMx)
    6cba:	4b10      	ldr	r3, [pc, #64]	; (6cfc <_ZN6SERCOM13initClockNVICEv+0xa4>)
    6cbc:	805a      	strh	r2, [r3, #2]
                      GCLK_CLKCTRL_CLKEN ;

  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY )
    6cbe:	785a      	ldrb	r2, [r3, #1]
    6cc0:	b252      	sxtb	r2, r2
    6cc2:	2a00      	cmp	r2, #0
    6cc4:	dbfb      	blt.n	6cbe <_ZN6SERCOM13initClockNVICEv+0x66>
  {
    /* Wait for synchronization */
  }
}
    6cc6:	bd30      	pop	{r4, r5, pc}
    IdNvic = SERCOM1_IRQn;
    6cc8:	230a      	movs	r3, #10
    clockId = GCM_SERCOM1_CORE;
    6cca:	2215      	movs	r2, #21
    6ccc:	e7dd      	b.n	6c8a <_ZN6SERCOM13initClockNVICEv+0x32>
    IdNvic = SERCOM2_IRQn;
    6cce:	230b      	movs	r3, #11
    clockId = GCM_SERCOM2_CORE;
    6cd0:	2216      	movs	r2, #22
    6cd2:	e7da      	b.n	6c8a <_ZN6SERCOM13initClockNVICEv+0x32>
    IdNvic = SERCOM3_IRQn;
    6cd4:	230c      	movs	r3, #12
    clockId = GCM_SERCOM3_CORE;
    6cd6:	2217      	movs	r2, #23
    6cd8:	e7d7      	b.n	6c8a <_ZN6SERCOM13initClockNVICEv+0x32>
    IdNvic = SERCOM4_IRQn;
    6cda:	230d      	movs	r3, #13
    clockId = GCM_SERCOM4_CORE;
    6cdc:	2218      	movs	r2, #24
    6cde:	e7d4      	b.n	6c8a <_ZN6SERCOM13initClockNVICEv+0x32>
    6ce0:	42000800 	.word	0x42000800
    6ce4:	42000c00 	.word	0x42000c00
    6ce8:	42001000 	.word	0x42001000
    6cec:	42001400 	.word	0x42001400
    6cf0:	42001800 	.word	0x42001800
    6cf4:	42001c00 	.word	0x42001c00
    6cf8:	e000e100 	.word	0xe000e100
    6cfc:	40000c00 	.word	0x40000c00

00006d00 <_ZN6SERCOM8initUARTE14SercomUartMode20SercomUartSampleRatem>:
{
    6d00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6d02:	0004      	movs	r4, r0
    6d04:	0016      	movs	r6, r2
    6d06:	000f      	movs	r7, r1
    6d08:	001d      	movs	r5, r3
  initClockNVIC();
    6d0a:	f7ff ffa5 	bl	6c58 <_ZN6SERCOM13initClockNVICEv>
  resetUART();
    6d0e:	0020      	movs	r0, r4
    6d10:	f7ff ff4c 	bl	6bac <_ZN6SERCOM9resetUARTEv>
  sercom->USART.CTRLA.reg =	SERCOM_USART_CTRLA_MODE(mode) |
    6d14:	221c      	movs	r2, #28
    6d16:	00bb      	lsls	r3, r7, #2
    6d18:	4013      	ands	r3, r2
                SERCOM_USART_CTRLA_SAMPR(sampleRate);
    6d1a:	0772      	lsls	r2, r6, #29
  sercom->USART.CTRLA.reg =	SERCOM_USART_CTRLA_MODE(mode) |
    6d1c:	6824      	ldr	r4, [r4, #0]
                SERCOM_USART_CTRLA_SAMPR(sampleRate);
    6d1e:	0c12      	lsrs	r2, r2, #16
  sercom->USART.CTRLA.reg =	SERCOM_USART_CTRLA_MODE(mode) |
    6d20:	4313      	orrs	r3, r2
    6d22:	6023      	str	r3, [r4, #0]
  sercom->USART.INTENSET.reg =	SERCOM_USART_INTENSET_RXC |  //Received complete
    6d24:	2384      	movs	r3, #132	; 0x84
    6d26:	75a3      	strb	r3, [r4, #22]
  if ( mode == UART_INT_CLOCK )
    6d28:	2f01      	cmp	r7, #1
    6d2a:	d118      	bne.n	6d5e <_ZN6SERCOM8initUARTE14SercomUartMode20SercomUartSampleRatem+0x5e>
      sampleRateValue = 16;
    6d2c:	2110      	movs	r1, #16
    if (sampleRate == SAMPLE_RATE_x16) {
    6d2e:	2e01      	cmp	r6, #1
    6d30:	d000      	beq.n	6d34 <_ZN6SERCOM8initUARTE14SercomUartMode20SercomUartSampleRatem+0x34>
      sampleRateValue = 8;
    6d32:	3908      	subs	r1, #8
    uint32_t baudTimes8 = (SystemCoreClock * 8) / (sampleRateValue * baudrate);
    6d34:	4b0a      	ldr	r3, [pc, #40]	; (6d60 <_ZN6SERCOM8initUARTE14SercomUartMode20SercomUartSampleRatem+0x60>)
    6d36:	4369      	muls	r1, r5
    6d38:	6818      	ldr	r0, [r3, #0]
    6d3a:	00c0      	lsls	r0, r0, #3
    6d3c:	f000 fae6 	bl	730c <__udivsi3>
    sercom->USART.BAUD.FRAC.FP   = (baudTimes8 % 8);
    6d40:	2207      	movs	r2, #7
    6d42:	89a3      	ldrh	r3, [r4, #12]
    6d44:	4002      	ands	r2, r0
    6d46:	04db      	lsls	r3, r3, #19
    6d48:	0352      	lsls	r2, r2, #13
    6d4a:	0cdb      	lsrs	r3, r3, #19
    6d4c:	4313      	orrs	r3, r2
    6d4e:	81a3      	strh	r3, [r4, #12]
    sercom->USART.BAUD.FRAC.BAUD = (baudTimes8 / 8);
    6d50:	0403      	lsls	r3, r0, #16
    6d52:	89a0      	ldrh	r0, [r4, #12]
    6d54:	0cdb      	lsrs	r3, r3, #19
    6d56:	0b40      	lsrs	r0, r0, #13
    6d58:	0340      	lsls	r0, r0, #13
    6d5a:	4318      	orrs	r0, r3
    6d5c:	81a0      	strh	r0, [r4, #12]
}
    6d5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6d60:	20000084 	.word	0x20000084

00006d64 <_ZN4UartcvbEv>:
    size_t write(const uint8_t data);
    using Print::write; // pull in write(str) and write(buf, size) from Print

    void IrqHandler();

    operator bool() { return true; }
    6d64:	2001      	movs	r0, #1
    6d66:	4770      	bx	lr

00006d68 <_ZN4Uart5beginEm>:
  uc_pinRTS = _pinRTS;
  uc_pinCTS = _pinCTS;
}

void Uart::begin(unsigned long baudrate)
{
    6d68:	b510      	push	{r4, lr}
  begin(baudrate, SERIAL_8N1);
    6d6a:	6803      	ldr	r3, [r0, #0]
    6d6c:	4a01      	ldr	r2, [pc, #4]	; (6d74 <_ZN4Uart5beginEm+0xc>)
    6d6e:	6a1b      	ldr	r3, [r3, #32]
    6d70:	4798      	blx	r3
}
    6d72:	bd10      	pop	{r4, pc}
    6d74:	00000413 	.word	0x00000413

00006d78 <_ZN4Uart4peekEv>:
}

template <int N>
int RingBufferN<N>::peek()
{
  if(_iTail == _iHead)
    6d78:	0003      	movs	r3, r0
    6d7a:	33fc      	adds	r3, #252	; 0xfc
    6d7c:	69d9      	ldr	r1, [r3, #28]
    6d7e:	699a      	ldr	r2, [r3, #24]
    6d80:	4291      	cmp	r1, r2
    6d82:	d003      	beq.n	6d8c <_ZN4Uart4peekEv+0x14>
    return -1;

  return _aucBuffer[_iTail];
    6d84:	69db      	ldr	r3, [r3, #28]
    6d86:	18c0      	adds	r0, r0, r3
    6d88:	7d00      	ldrb	r0, [r0, #20]
}

int Uart::peek()
{
  return rxBuffer.peek();
}
    6d8a:	4770      	bx	lr
    return -1;
    6d8c:	2001      	movs	r0, #1
    6d8e:	4240      	negs	r0, r0
  return rxBuffer.peek();
    6d90:	e7fb      	b.n	6d8a <_ZN4Uart4peekEv+0x12>

00006d92 <_ZN4Uart3endEv>:
{
    6d92:	b510      	push	{r4, lr}
    6d94:	0004      	movs	r4, r0
  sercom->resetUART();
    6d96:	6900      	ldr	r0, [r0, #16]
    6d98:	f7ff ff08 	bl	6bac <_ZN6SERCOM9resetUARTEv>
  _iHead = 0;
    6d9c:	0022      	movs	r2, r4
    6d9e:	2300      	movs	r3, #0
    6da0:	32fc      	adds	r2, #252	; 0xfc
    6da2:	6193      	str	r3, [r2, #24]
  _iTail = 0;
    6da4:	61d3      	str	r3, [r2, #28]
  _iHead = 0;
    6da6:	2286      	movs	r2, #134	; 0x86
    6da8:	0092      	lsls	r2, r2, #2
    6daa:	18a4      	adds	r4, r4, r2
    6dac:	6063      	str	r3, [r4, #4]
  _iTail = 0;
    6dae:	60a3      	str	r3, [r4, #8]
}
    6db0:	bd10      	pop	{r4, pc}

00006db2 <_ZN4Uart16extractNbStopBitEt>:
  return 1;
}

SercomNumberStopBit Uart::extractNbStopBit(uint16_t config)
{
  switch(config & HARDSER_STOP_BIT_MASK)
    6db2:	20f0      	movs	r0, #240	; 0xf0
    6db4:	4001      	ands	r1, r0
  {
    case HARDSER_STOP_BIT_1:
    default:
      return SERCOM_STOP_BIT_1;
    6db6:	3930      	subs	r1, #48	; 0x30
    6db8:	4248      	negs	r0, r1
    6dba:	4148      	adcs	r0, r1

    case HARDSER_STOP_BIT_2:
      return SERCOM_STOP_BITS_2;
  }
}
    6dbc:	4770      	bx	lr

00006dbe <_ZN4Uart15extractCharSizeEt>:

SercomUartCharSize Uart::extractCharSize(uint16_t config)
{
  switch(config & HARDSER_DATA_MASK)
    6dbe:	23f0      	movs	r3, #240	; 0xf0
    6dc0:	011b      	lsls	r3, r3, #4
    6dc2:	4019      	ands	r1, r3
    6dc4:	2380      	movs	r3, #128	; 0x80
  {
    case HARDSER_DATA_5:
      return UART_CHAR_SIZE_5_BITS;

    case HARDSER_DATA_6:
      return UART_CHAR_SIZE_6_BITS;
    6dc6:	2006      	movs	r0, #6
  switch(config & HARDSER_DATA_MASK)
    6dc8:	009b      	lsls	r3, r3, #2
    6dca:	4299      	cmp	r1, r3
    6dcc:	d00a      	beq.n	6de4 <_ZN4Uart15extractCharSizeEt+0x26>
    6dce:	3301      	adds	r3, #1
    6dd0:	33ff      	adds	r3, #255	; 0xff

    case HARDSER_DATA_7:
      return UART_CHAR_SIZE_7_BITS;
    6dd2:	3001      	adds	r0, #1
  switch(config & HARDSER_DATA_MASK)
    6dd4:	4299      	cmp	r1, r3
    6dd6:	d005      	beq.n	6de4 <_ZN4Uart15extractCharSizeEt+0x26>
    6dd8:	2380      	movs	r3, #128	; 0x80
      return UART_CHAR_SIZE_5_BITS;
    6dda:	3802      	subs	r0, #2
  switch(config & HARDSER_DATA_MASK)
    6ddc:	005b      	lsls	r3, r3, #1
    6dde:	4299      	cmp	r1, r3
    6de0:	d000      	beq.n	6de4 <_ZN4Uart15extractCharSizeEt+0x26>

    case HARDSER_DATA_8:
    default:
      return UART_CHAR_SIZE_8_BITS;
    6de2:	2000      	movs	r0, #0

  }
}
    6de4:	4770      	bx	lr

00006de6 <_ZN4Uart13extractParityEt>:

SercomParityMode Uart::extractParity(uint16_t config)
{
  switch(config & HARDSER_PARITY_MASK)
    6de6:	200f      	movs	r0, #15
    6de8:	4001      	ands	r1, r0
    case HARDSER_PARITY_NONE:
    default:
      return SERCOM_NO_PARITY;

    case HARDSER_PARITY_EVEN:
      return SERCOM_EVEN_PARITY;
    6dea:	2000      	movs	r0, #0
  switch(config & HARDSER_PARITY_MASK)
    6dec:	2901      	cmp	r1, #1
    6dee:	d003      	beq.n	6df8 <_ZN4Uart13extractParityEt+0x12>
      return SERCOM_NO_PARITY;
    6df0:	3902      	subs	r1, #2
    6df2:	1e48      	subs	r0, r1, #1
    6df4:	4181      	sbcs	r1, r0
    6df6:	1c48      	adds	r0, r1, #1

    case HARDSER_PARITY_ODD:
      return SERCOM_ODD_PARITY;
  }
}
    6df8:	4770      	bx	lr
	...

00006dfc <_ZN4Uart5beginEmt>:
  pinPeripheral(uc_pinRX, g_APinDescription[uc_pinRX].ulPinType);
    6dfc:	2389      	movs	r3, #137	; 0x89
{
    6dfe:	b5f0      	push	{r4, r5, r6, r7, lr}
  pinPeripheral(uc_pinRX, g_APinDescription[uc_pinRX].ulPinType);
    6e00:	2618      	movs	r6, #24
{
    6e02:	b085      	sub	sp, #20
    6e04:	9102      	str	r1, [sp, #8]
  pinPeripheral(uc_pinRX, g_APinDescription[uc_pinRX].ulPinType);
    6e06:	009b      	lsls	r3, r3, #2
{
    6e08:	0004      	movs	r4, r0
  pinPeripheral(uc_pinRX, g_APinDescription[uc_pinRX].ulPinType);
    6e0a:	5cc0      	ldrb	r0, [r0, r3]
    6e0c:	0033      	movs	r3, r6
    6e0e:	2108      	movs	r1, #8
    6e10:	4343      	muls	r3, r0
    6e12:	4d32      	ldr	r5, [pc, #200]	; (6edc <_ZN4Uart5beginEmt+0xe0>)
{
    6e14:	0017      	movs	r7, r2
  pinPeripheral(uc_pinRX, g_APinDescription[uc_pinRX].ulPinType);
    6e16:	18eb      	adds	r3, r5, r3
    6e18:	5659      	ldrsb	r1, [r3, r1]
    6e1a:	f7ff fd6d 	bl	68f8 <pinPeripheral>
  pinPeripheral(uc_pinTX, g_APinDescription[uc_pinTX].ulPinType);
    6e1e:	4b30      	ldr	r3, [pc, #192]	; (6ee0 <_ZN4Uart5beginEmt+0xe4>)
    6e20:	2108      	movs	r1, #8
    6e22:	5ce0      	ldrb	r0, [r4, r3]
    6e24:	0033      	movs	r3, r6
    6e26:	4343      	muls	r3, r0
    6e28:	18eb      	adds	r3, r5, r3
    6e2a:	5659      	ldrsb	r1, [r3, r1]
    6e2c:	f7ff fd64 	bl	68f8 <pinPeripheral>
  if (uc_padTX == UART_TX_RTS_CTS_PAD_0_2_3) { 
    6e30:	4b2c      	ldr	r3, [pc, #176]	; (6ee4 <_ZN4Uart5beginEmt+0xe8>)
    6e32:	5ce2      	ldrb	r2, [r4, r3]
    6e34:	9303      	str	r3, [sp, #12]
    6e36:	2a02      	cmp	r2, #2
    6e38:	d109      	bne.n	6e4e <_ZN4Uart5beginEmt+0x52>
    if (uc_pinCTS != NO_CTS_PIN) {
    6e3a:	3311      	adds	r3, #17
    6e3c:	5ce0      	ldrb	r0, [r4, r3]
    6e3e:	28ff      	cmp	r0, #255	; 0xff
    6e40:	d005      	beq.n	6e4e <_ZN4Uart5beginEmt+0x52>
      pinPeripheral(uc_pinCTS, g_APinDescription[uc_pinCTS].ulPinType);
    6e42:	2108      	movs	r1, #8
    6e44:	4346      	muls	r6, r0
    6e46:	19ae      	adds	r6, r5, r6
    6e48:	5671      	ldrsb	r1, [r6, r1]
    6e4a:	f7ff fd55 	bl	68f8 <pinPeripheral>
  if (uc_pinRTS != NO_RTS_PIN) {
    6e4e:	268a      	movs	r6, #138	; 0x8a
    6e50:	00b6      	lsls	r6, r6, #2
    6e52:	5da0      	ldrb	r0, [r4, r6]
    6e54:	28ff      	cmp	r0, #255	; 0xff
    6e56:	d019      	beq.n	6e8c <_ZN4Uart5beginEmt+0x90>
    pinMode(uc_pinRTS, OUTPUT);
    6e58:	2101      	movs	r1, #1
    6e5a:	f7ff fcbd 	bl	67d8 <pinMode>
    EPortType rtsPort = g_APinDescription[uc_pinRTS].ulPort;
    6e5e:	2218      	movs	r2, #24
    6e60:	5da3      	ldrb	r3, [r4, r6]
    pul_outsetRTS = &PORT->Group[rtsPort].OUTSET.reg;
    6e62:	4921      	ldr	r1, [pc, #132]	; (6ee8 <_ZN4Uart5beginEmt+0xec>)
    EPortType rtsPort = g_APinDescription[uc_pinRTS].ulPort;
    6e64:	435a      	muls	r2, r3
    pul_outsetRTS = &PORT->Group[rtsPort].OUTSET.reg;
    6e66:	56ab      	ldrsb	r3, [r5, r2]
    ul_pinMaskRTS = (1ul << g_APinDescription[uc_pinRTS].ulPin);
    6e68:	18ad      	adds	r5, r5, r2
    pul_outsetRTS = &PORT->Group[rtsPort].OUTSET.reg;
    6e6a:	01db      	lsls	r3, r3, #7
    6e6c:	1858      	adds	r0, r3, r1
    6e6e:	218b      	movs	r1, #139	; 0x8b
    6e70:	0089      	lsls	r1, r1, #2
    6e72:	5060      	str	r0, [r4, r1]
    pul_outclrRTS = &PORT->Group[rtsPort].OUTCLR.reg;
    6e74:	491d      	ldr	r1, [pc, #116]	; (6eec <_ZN4Uart5beginEmt+0xf0>)
    ul_pinMaskRTS = (1ul << g_APinDescription[uc_pinRTS].ulPin);
    6e76:	2201      	movs	r2, #1
    pul_outclrRTS = &PORT->Group[rtsPort].OUTCLR.reg;
    6e78:	185b      	adds	r3, r3, r1
    6e7a:	218c      	movs	r1, #140	; 0x8c
    6e7c:	0089      	lsls	r1, r1, #2
    6e7e:	5063      	str	r3, [r4, r1]
    ul_pinMaskRTS = (1ul << g_APinDescription[uc_pinRTS].ulPin);
    6e80:	6869      	ldr	r1, [r5, #4]
    6e82:	408a      	lsls	r2, r1
    6e84:	218d      	movs	r1, #141	; 0x8d
    6e86:	0089      	lsls	r1, r1, #2
    6e88:	5062      	str	r2, [r4, r1]
    *pul_outclrRTS = ul_pinMaskRTS;
    6e8a:	601a      	str	r2, [r3, #0]
  sercom->initUART(UART_INT_CLOCK, SAMPLE_RATE_x16, baudrate);
    6e8c:	2201      	movs	r2, #1
    6e8e:	9b02      	ldr	r3, [sp, #8]
    6e90:	0011      	movs	r1, r2
    6e92:	6920      	ldr	r0, [r4, #16]
    6e94:	f7ff ff34 	bl	6d00 <_ZN6SERCOM8initUARTE14SercomUartMode20SercomUartSampleRatem>
  sercom->initFrame(extractCharSize(config), LSB_FIRST, extractParity(config), extractNbStopBit(config));
    6e98:	0039      	movs	r1, r7
    6e9a:	0020      	movs	r0, r4
    6e9c:	f7ff ff8f 	bl	6dbe <_ZN4Uart15extractCharSizeEt>
    6ea0:	0039      	movs	r1, r7
    6ea2:	0005      	movs	r5, r0
    6ea4:	0020      	movs	r0, r4
    6ea6:	f7ff ff9e 	bl	6de6 <_ZN4Uart13extractParityEt>
    6eaa:	0039      	movs	r1, r7
    6eac:	0006      	movs	r6, r0
    6eae:	0020      	movs	r0, r4
    6eb0:	f7ff ff7f 	bl	6db2 <_ZN4Uart16extractNbStopBitEt>
    6eb4:	0033      	movs	r3, r6
    6eb6:	9000      	str	r0, [sp, #0]
    6eb8:	0029      	movs	r1, r5
    6eba:	6920      	ldr	r0, [r4, #16]
    6ebc:	2201      	movs	r2, #1
    6ebe:	f7ff fe49 	bl	6b54 <_ZN6SERCOM9initFrameE18SercomUartCharSize15SercomDataOrder16SercomParityMode19SercomNumberStopBit>
  sercom->initPads(uc_padTX, uc_padRX);
    6ec2:	4b0b      	ldr	r3, [pc, #44]	; (6ef0 <_ZN4Uart5beginEmt+0xf4>)
    6ec4:	6920      	ldr	r0, [r4, #16]
    6ec6:	5ce2      	ldrb	r2, [r4, r3]
    6ec8:	9b03      	ldr	r3, [sp, #12]
    6eca:	5ce1      	ldrb	r1, [r4, r3]
    6ecc:	f7ff fe5c 	bl	6b88 <_ZN6SERCOM8initPadsE15SercomUartTXPad11SercomRXPad>
  sercom->enableUART();
    6ed0:	6920      	ldr	r0, [r4, #16]
    6ed2:	f7ff fe77 	bl	6bc4 <_ZN6SERCOM10enableUARTEv>
}
    6ed6:	b005      	add	sp, #20
    6ed8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6eda:	46c0      	nop			; (mov r8, r8)
    6edc:	0000b9a4 	.word	0x0000b9a4
    6ee0:	00000225 	.word	0x00000225
    6ee4:	00000227 	.word	0x00000227
    6ee8:	41004418 	.word	0x41004418
    6eec:	41004414 	.word	0x41004414
    6ef0:	00000226 	.word	0x00000226

00006ef4 <_ZN11RingBufferNILi256EEC1Ev>:
    memset( _aucBuffer, 0, N ) ;
    6ef4:	2280      	movs	r2, #128	; 0x80
RingBufferN<N>::RingBufferN( void )
    6ef6:	b510      	push	{r4, lr}
    6ef8:	0004      	movs	r4, r0
    memset( _aucBuffer, 0, N ) ;
    6efa:	0052      	lsls	r2, r2, #1
    6efc:	2100      	movs	r1, #0
    6efe:	f002 f9c3 	bl	9288 <memset>
  _iHead = 0;
    6f02:	0023      	movs	r3, r4
    6f04:	2200      	movs	r2, #0
    6f06:	33fc      	adds	r3, #252	; 0xfc
    6f08:	605a      	str	r2, [r3, #4]
}
    6f0a:	0020      	movs	r0, r4
  _iTail = 0;
    6f0c:	609a      	str	r2, [r3, #8]
}
    6f0e:	bd10      	pop	{r4, pc}

00006f10 <_ZN4UartC1EP6SERCOMhh11SercomRXPad15SercomUartTXPadhh>:
Uart::Uart(SERCOM *_s, uint8_t _pinRX, uint8_t _pinTX, SercomRXPad _padRX, SercomUartTXPad _padTX, uint8_t _pinRTS, uint8_t _pinCTS)
    6f10:	b5f0      	push	{r4, r5, r6, r7, lr}
    6f12:	b085      	sub	sp, #20
    6f14:	001d      	movs	r5, r3
    6f16:	ab0a      	add	r3, sp, #40	; 0x28
    6f18:	781b      	ldrb	r3, [r3, #0]
    6f1a:	0004      	movs	r4, r0
    6f1c:	9300      	str	r3, [sp, #0]
    6f1e:	ab0b      	add	r3, sp, #44	; 0x2c
    6f20:	781b      	ldrb	r3, [r3, #0]
    6f22:	0016      	movs	r6, r2
    6f24:	9301      	str	r3, [sp, #4]
    6f26:	ab0c      	add	r3, sp, #48	; 0x30
    6f28:	781b      	ldrb	r3, [r3, #0]
    6f2a:	000f      	movs	r7, r1
    6f2c:	9302      	str	r3, [sp, #8]
    6f2e:	ab0d      	add	r3, sp, #52	; 0x34
    6f30:	781b      	ldrb	r3, [r3, #0]
    6f32:	9303      	str	r3, [sp, #12]
    6f34:	2300      	movs	r3, #0
    6f36:	6043      	str	r3, [r0, #4]
    6f38:	23fa      	movs	r3, #250	; 0xfa
    6f3a:	009b      	lsls	r3, r3, #2
    6f3c:	6083      	str	r3, [r0, #8]
    6f3e:	4b12      	ldr	r3, [pc, #72]	; (6f88 <_ZN4UartC1EP6SERCOMhh11SercomRXPad15SercomUartTXPadhh+0x78>)
    6f40:	3308      	adds	r3, #8
    6f42:	6003      	str	r3, [r0, #0]
    6f44:	3014      	adds	r0, #20
    6f46:	f7ff ffd5 	bl	6ef4 <_ZN11RingBufferNILi256EEC1Ev>
    6f4a:	0020      	movs	r0, r4
    6f4c:	301d      	adds	r0, #29
    6f4e:	30ff      	adds	r0, #255	; 0xff
    6f50:	f7ff ffd0 	bl	6ef4 <_ZN11RingBufferNILi256EEC1Ev>
  uc_pinRX = _pinRX;
    6f54:	2389      	movs	r3, #137	; 0x89
  uc_padRX = _padRX ;
    6f56:	466a      	mov	r2, sp
  uc_pinRX = _pinRX;
    6f58:	009b      	lsls	r3, r3, #2
  sercom = _s;
    6f5a:	6127      	str	r7, [r4, #16]
  uc_pinRX = _pinRX;
    6f5c:	54e6      	strb	r6, [r4, r3]
  uc_pinTX = _pinTX;
    6f5e:	4b0b      	ldr	r3, [pc, #44]	; (6f8c <_ZN4UartC1EP6SERCOMhh11SercomRXPad15SercomUartTXPadhh+0x7c>)
  uc_padRX = _padRX ;
    6f60:	7812      	ldrb	r2, [r2, #0]
  uc_pinTX = _pinTX;
    6f62:	54e5      	strb	r5, [r4, r3]
  uc_padRX = _padRX ;
    6f64:	4b0a      	ldr	r3, [pc, #40]	; (6f90 <_ZN4UartC1EP6SERCOMhh11SercomRXPad15SercomUartTXPadhh+0x80>)
}
    6f66:	0020      	movs	r0, r4
  uc_padRX = _padRX ;
    6f68:	54e2      	strb	r2, [r4, r3]
  uc_padTX = _padTX;
    6f6a:	466a      	mov	r2, sp
    6f6c:	4b09      	ldr	r3, [pc, #36]	; (6f94 <_ZN4UartC1EP6SERCOMhh11SercomRXPad15SercomUartTXPadhh+0x84>)
    6f6e:	7912      	ldrb	r2, [r2, #4]
    6f70:	54e2      	strb	r2, [r4, r3]
  uc_pinRTS = _pinRTS;
    6f72:	466a      	mov	r2, sp
    6f74:	7a12      	ldrb	r2, [r2, #8]
    6f76:	3301      	adds	r3, #1
    6f78:	54e2      	strb	r2, [r4, r3]
  uc_pinCTS = _pinCTS;
    6f7a:	466a      	mov	r2, sp
    6f7c:	7b12      	ldrb	r2, [r2, #12]
    6f7e:	3310      	adds	r3, #16
    6f80:	54e2      	strb	r2, [r4, r3]
}
    6f82:	b005      	add	sp, #20
    6f84:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6f86:	46c0      	nop			; (mov r8, r8)
    6f88:	0000bd04 	.word	0x0000bd04
    6f8c:	00000225 	.word	0x00000225
    6f90:	00000226 	.word	0x00000226
    6f94:	00000227 	.word	0x00000227

00006f98 <_ZN4UartC1EP6SERCOMhh11SercomRXPad15SercomUartTXPad>:
Uart::Uart(SERCOM *_s, uint8_t _pinRX, uint8_t _pinTX, SercomRXPad _padRX, SercomUartTXPad _padTX) :
    6f98:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    6f9a:	001d      	movs	r5, r3
    6f9c:	ab08      	add	r3, sp, #32
    6f9e:	781b      	ldrb	r3, [r3, #0]
    6fa0:	0004      	movs	r4, r0
    6fa2:	9300      	str	r3, [sp, #0]
    6fa4:	ab09      	add	r3, sp, #36	; 0x24
    6fa6:	781b      	ldrb	r3, [r3, #0]
    6fa8:	0016      	movs	r6, r2
    6faa:	9301      	str	r3, [sp, #4]
    6fac:	2300      	movs	r3, #0
    6fae:	6043      	str	r3, [r0, #4]
    6fb0:	23fa      	movs	r3, #250	; 0xfa
    6fb2:	009b      	lsls	r3, r3, #2
    6fb4:	6083      	str	r3, [r0, #8]
Uart::Uart(SERCOM *_s, uint8_t _pinRX, uint8_t _pinTX, SercomRXPad _padRX, SercomUartTXPad _padTX, uint8_t _pinRTS, uint8_t _pinCTS)
    6fb6:	4b11      	ldr	r3, [pc, #68]	; (6ffc <_ZN4UartC1EP6SERCOMhh11SercomRXPad15SercomUartTXPad+0x64>)
Uart::Uart(SERCOM *_s, uint8_t _pinRX, uint8_t _pinTX, SercomRXPad _padRX, SercomUartTXPad _padTX) :
    6fb8:	000f      	movs	r7, r1
Uart::Uart(SERCOM *_s, uint8_t _pinRX, uint8_t _pinTX, SercomRXPad _padRX, SercomUartTXPad _padTX, uint8_t _pinRTS, uint8_t _pinCTS)
    6fba:	3308      	adds	r3, #8
    6fbc:	6003      	str	r3, [r0, #0]
    6fbe:	3014      	adds	r0, #20
    6fc0:	f7ff ff98 	bl	6ef4 <_ZN11RingBufferNILi256EEC1Ev>
    6fc4:	0020      	movs	r0, r4
    6fc6:	301d      	adds	r0, #29
    6fc8:	30ff      	adds	r0, #255	; 0xff
    6fca:	f7ff ff93 	bl	6ef4 <_ZN11RingBufferNILi256EEC1Ev>
  uc_pinRX = _pinRX;
    6fce:	2389      	movs	r3, #137	; 0x89
  uc_padRX = _padRX ;
    6fd0:	466a      	mov	r2, sp
  uc_pinRX = _pinRX;
    6fd2:	009b      	lsls	r3, r3, #2
  sercom = _s;
    6fd4:	6127      	str	r7, [r4, #16]
  uc_pinRX = _pinRX;
    6fd6:	54e6      	strb	r6, [r4, r3]
  uc_pinTX = _pinTX;
    6fd8:	4b09      	ldr	r3, [pc, #36]	; (7000 <_ZN4UartC1EP6SERCOMhh11SercomRXPad15SercomUartTXPad+0x68>)
  uc_padRX = _padRX ;
    6fda:	7812      	ldrb	r2, [r2, #0]
  uc_pinTX = _pinTX;
    6fdc:	54e5      	strb	r5, [r4, r3]
  uc_padRX = _padRX ;
    6fde:	4b09      	ldr	r3, [pc, #36]	; (7004 <_ZN4UartC1EP6SERCOMhh11SercomRXPad15SercomUartTXPad+0x6c>)
}
    6fe0:	0020      	movs	r0, r4
  uc_padRX = _padRX ;
    6fe2:	54e2      	strb	r2, [r4, r3]
  uc_padTX = _padTX;
    6fe4:	466a      	mov	r2, sp
    6fe6:	4b08      	ldr	r3, [pc, #32]	; (7008 <_ZN4UartC1EP6SERCOMhh11SercomRXPad15SercomUartTXPad+0x70>)
    6fe8:	7912      	ldrb	r2, [r2, #4]
    6fea:	54e2      	strb	r2, [r4, r3]
  uc_pinRTS = _pinRTS;
    6fec:	228a      	movs	r2, #138	; 0x8a
    6fee:	3b29      	subs	r3, #41	; 0x29
    6ff0:	3bff      	subs	r3, #255	; 0xff
    6ff2:	0092      	lsls	r2, r2, #2
    6ff4:	54a3      	strb	r3, [r4, r2]
  uc_pinCTS = _pinCTS;
    6ff6:	3210      	adds	r2, #16
    6ff8:	54a3      	strb	r3, [r4, r2]
}
    6ffa:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    6ffc:	0000bd04 	.word	0x0000bd04
    7000:	00000225 	.word	0x00000225
    7004:	00000226 	.word	0x00000226
    7008:	00000227 	.word	0x00000227

0000700c <_ZN11RingBufferNILi256EE9availableEv>:
  int delta = _iHead - _iTail;
    700c:	0003      	movs	r3, r0
    700e:	33fc      	adds	r3, #252	; 0xfc
    7010:	6858      	ldr	r0, [r3, #4]
    7012:	689b      	ldr	r3, [r3, #8]
    7014:	1ac0      	subs	r0, r0, r3
  if(delta < 0)
    7016:	d501      	bpl.n	701c <_ZN11RingBufferNILi256EE9availableEv+0x10>
    return N + delta;
    7018:	3001      	adds	r0, #1
    701a:	30ff      	adds	r0, #255	; 0xff
}
    701c:	4770      	bx	lr

0000701e <_ZN4Uart5flushEv>:
{
    701e:	b510      	push	{r4, lr}
    7020:	0004      	movs	r4, r0
  while(txBuffer.available()); // wait until TX buffer is empty
    7022:	0020      	movs	r0, r4
    7024:	301d      	adds	r0, #29
    7026:	30ff      	adds	r0, #255	; 0xff
    7028:	f7ff fff0 	bl	700c <_ZN11RingBufferNILi256EE9availableEv>
    702c:	2800      	cmp	r0, #0
    702e:	d1f8      	bne.n	7022 <_ZN4Uart5flushEv+0x4>
  sercom->flushUART();
    7030:	6920      	ldr	r0, [r4, #16]
    7032:	f7ff fdd0 	bl	6bd6 <_ZN6SERCOM9flushUARTEv>
}
    7036:	bd10      	pop	{r4, pc}

00007038 <_ZN4Uart9availableEv>:
{
    7038:	b510      	push	{r4, lr}
  return rxBuffer.available();
    703a:	3014      	adds	r0, #20
    703c:	f7ff ffe6 	bl	700c <_ZN11RingBufferNILi256EE9availableEv>
}
    7040:	bd10      	pop	{r4, pc}

00007042 <_ZN11RingBufferNILi256EE17availableForStoreEv>:
  if (_iHead >= _iTail)
    7042:	0003      	movs	r3, r0
    7044:	33fc      	adds	r3, #252	; 0xfc
    7046:	6859      	ldr	r1, [r3, #4]
    7048:	689a      	ldr	r2, [r3, #8]
    704a:	4291      	cmp	r1, r2
    704c:	db04      	blt.n	7058 <_ZN11RingBufferNILi256EE17availableForStoreEv+0x16>
    return N - 1 - _iHead + _iTail;
    704e:	685a      	ldr	r2, [r3, #4]
    7050:	6898      	ldr	r0, [r3, #8]
    7052:	1a80      	subs	r0, r0, r2
    7054:	30ff      	adds	r0, #255	; 0xff
}
    7056:	4770      	bx	lr
    return _iTail - _iHead - 1;
    7058:	6898      	ldr	r0, [r3, #8]
    705a:	685b      	ldr	r3, [r3, #4]
    705c:	1ac0      	subs	r0, r0, r3
    705e:	3801      	subs	r0, #1
    7060:	e7f9      	b.n	7056 <_ZN11RingBufferNILi256EE17availableForStoreEv+0x14>

00007062 <_ZN4Uart17availableForWriteEv>:
{
    7062:	b510      	push	{r4, lr}
  return txBuffer.availableForStore();
    7064:	301d      	adds	r0, #29
    7066:	30ff      	adds	r0, #255	; 0xff
    7068:	f7ff ffeb 	bl	7042 <_ZN11RingBufferNILi256EE17availableForStoreEv>
}
    706c:	bd10      	pop	{r4, pc}

0000706e <_ZN4Uart10IrqHandlerEv>:
{
    706e:	b510      	push	{r4, lr}
    7070:	0004      	movs	r4, r0
  if (sercom->isFrameErrorUART()) {
    7072:	6900      	ldr	r0, [r0, #16]
    7074:	f7ff fdcb 	bl	6c0e <_ZN6SERCOM16isFrameErrorUARTEv>
    7078:	2800      	cmp	r0, #0
    707a:	d005      	beq.n	7088 <_ZN4Uart10IrqHandlerEv+0x1a>
    sercom->readDataUART();
    707c:	6920      	ldr	r0, [r4, #16]
    707e:	f7ff fdd6 	bl	6c2e <_ZN6SERCOM12readDataUARTEv>
    sercom->clearFrameErrorUART();
    7082:	6920      	ldr	r0, [r4, #16]
    7084:	f7ff fdc8 	bl	6c18 <_ZN6SERCOM19clearFrameErrorUARTEv>
  if (sercom->availableDataUART()) {
    7088:	6920      	ldr	r0, [r4, #16]
    708a:	f7ff fdb0 	bl	6bee <_ZN6SERCOM17availableDataUARTEv>
    708e:	2800      	cmp	r0, #0
    7090:	d020      	beq.n	70d4 <_ZN4Uart10IrqHandlerEv+0x66>
    rxBuffer.store_char(sercom->readDataUART());
    7092:	6920      	ldr	r0, [r4, #16]
    7094:	f7ff fdcb 	bl	6c2e <_ZN6SERCOM12readDataUARTEv>
  int i = nextIndex(_iHead);
    7098:	0022      	movs	r2, r4
    709a:	32fc      	adds	r2, #252	; 0xfc
    709c:	6993      	ldr	r3, [r2, #24]
  if ( i != _iTail )
    709e:	69d1      	ldr	r1, [r2, #28]
}

template <int N>
int RingBufferN<N>::nextIndex(int index)
{
  return (uint32_t)(index + 1) % N;
    70a0:	3301      	adds	r3, #1
    70a2:	b2db      	uxtb	r3, r3
  if ( i != _iTail )
    70a4:	428b      	cmp	r3, r1
    70a6:	d003      	beq.n	70b0 <_ZN4Uart10IrqHandlerEv+0x42>
    _aucBuffer[_iHead] = c ;
    70a8:	6991      	ldr	r1, [r2, #24]
    70aa:	1861      	adds	r1, r4, r1
    70ac:	7508      	strb	r0, [r1, #20]
    _iHead = i ;
    70ae:	6193      	str	r3, [r2, #24]
    if (uc_pinRTS != NO_RTS_PIN) {
    70b0:	238a      	movs	r3, #138	; 0x8a
    70b2:	009b      	lsls	r3, r3, #2
    70b4:	5ce3      	ldrb	r3, [r4, r3]
    70b6:	2bff      	cmp	r3, #255	; 0xff
    70b8:	d00c      	beq.n	70d4 <_ZN4Uart10IrqHandlerEv+0x66>
    rxBuffer.store_char(sercom->readDataUART());
    70ba:	0020      	movs	r0, r4
    70bc:	3014      	adds	r0, #20
      if (rxBuffer.availableForStore() < RTS_RX_THRESHOLD) {
    70be:	f7ff ffc0 	bl	7042 <_ZN11RingBufferNILi256EE17availableForStoreEv>
    70c2:	2809      	cmp	r0, #9
    70c4:	dc06      	bgt.n	70d4 <_ZN4Uart10IrqHandlerEv+0x66>
        *pul_outsetRTS = ul_pinMaskRTS;
    70c6:	238b      	movs	r3, #139	; 0x8b
    70c8:	228d      	movs	r2, #141	; 0x8d
    70ca:	009b      	lsls	r3, r3, #2
    70cc:	0092      	lsls	r2, r2, #2
    70ce:	58e3      	ldr	r3, [r4, r3]
    70d0:	58a2      	ldr	r2, [r4, r2]
    70d2:	601a      	str	r2, [r3, #0]
  if (sercom->isDataRegisterEmptyUART()) {
    70d4:	6920      	ldr	r0, [r4, #16]
    70d6:	f7ff fda5 	bl	6c24 <_ZN6SERCOM23isDataRegisterEmptyUARTEv>
    70da:	2800      	cmp	r0, #0
    70dc:	d01a      	beq.n	7114 <_ZN4Uart10IrqHandlerEv+0xa6>
    if (txBuffer.available()) {
    70de:	0020      	movs	r0, r4
    70e0:	301d      	adds	r0, #29
    70e2:	30ff      	adds	r0, #255	; 0xff
    70e4:	f7ff ff92 	bl	700c <_ZN11RingBufferNILi256EE9availableEv>
    70e8:	2800      	cmp	r0, #0
    70ea:	d022      	beq.n	7132 <_ZN4Uart10IrqHandlerEv+0xc4>
  if(_iTail == _iHead)
    70ec:	2386      	movs	r3, #134	; 0x86
    70ee:	009b      	lsls	r3, r3, #2
    70f0:	18e3      	adds	r3, r4, r3
    70f2:	6899      	ldr	r1, [r3, #8]
    70f4:	685a      	ldr	r2, [r3, #4]
    70f6:	4291      	cmp	r1, r2
    70f8:	d018      	beq.n	712c <_ZN4Uart10IrqHandlerEv+0xbe>
  uint8_t value = _aucBuffer[_iTail];
    70fa:	218e      	movs	r1, #142	; 0x8e
    70fc:	689a      	ldr	r2, [r3, #8]
    70fe:	0049      	lsls	r1, r1, #1
    7100:	18a2      	adds	r2, r4, r2
    7102:	5c51      	ldrb	r1, [r2, r1]
  _iTail = nextIndex(_iTail);
    7104:	689a      	ldr	r2, [r3, #8]
  return (uint32_t)(index + 1) % N;
    7106:	3201      	adds	r2, #1
    7108:	b2d2      	uxtb	r2, r2
  _iTail = nextIndex(_iTail);
    710a:	609a      	str	r2, [r3, #8]
      sercom->writeDataUART(data);
    710c:	b2c9      	uxtb	r1, r1
    710e:	6920      	ldr	r0, [r4, #16]
    7110:	f7ff fd91 	bl	6c36 <_ZN6SERCOM13writeDataUARTEh>
  if (sercom->isUARTError()) {
    7114:	6920      	ldr	r0, [r4, #16]
    7116:	f7ff fd6f 	bl	6bf8 <_ZN6SERCOM11isUARTErrorEv>
    711a:	2800      	cmp	r0, #0
    711c:	d005      	beq.n	712a <_ZN4Uart10IrqHandlerEv+0xbc>
    sercom->acknowledgeUARTError();
    711e:	6920      	ldr	r0, [r4, #16]
    7120:	f7ff fd6e 	bl	6c00 <_ZN6SERCOM20acknowledgeUARTErrorEv>
    sercom->clearStatusUART();
    7124:	6920      	ldr	r0, [r4, #16]
    7126:	f7ff fd5e 	bl	6be6 <_ZN6SERCOM15clearStatusUARTEv>
}
    712a:	bd10      	pop	{r4, pc}
    return -1;
    712c:	2101      	movs	r1, #1
    712e:	4249      	negs	r1, r1
    7130:	e7ec      	b.n	710c <_ZN4Uart10IrqHandlerEv+0x9e>
      sercom->disableDataRegisterEmptyInterruptUART();
    7132:	6920      	ldr	r0, [r4, #16]
    7134:	f7ff fd8b 	bl	6c4e <_ZN6SERCOM37disableDataRegisterEmptyInterruptUARTEv>
    7138:	e7ec      	b.n	7114 <_ZN4Uart10IrqHandlerEv+0xa6>
	...

0000713c <_ZN4Uart5writeEh>:
{
    713c:	b570      	push	{r4, r5, r6, lr}
    713e:	0004      	movs	r4, r0
  if (sercom->isDataRegisterEmptyUART() && txBuffer.available() == 0) {
    7140:	6900      	ldr	r0, [r0, #16]
{
    7142:	000d      	movs	r5, r1
  if (sercom->isDataRegisterEmptyUART() && txBuffer.available() == 0) {
    7144:	f7ff fd6e 	bl	6c24 <_ZN6SERCOM23isDataRegisterEmptyUARTEv>
    7148:	2800      	cmp	r0, #0
    714a:	d124      	bne.n	7196 <_ZN4Uart5writeEh+0x5a>
  return (uint32_t)(index + 1) % N;
    714c:	26ff      	movs	r6, #255	; 0xff
}

template <int N>
bool RingBufferN<N>::isFull()
{
  return (nextIndex(_iHead) == _iTail);
    714e:	2386      	movs	r3, #134	; 0x86
    7150:	009b      	lsls	r3, r3, #2
    7152:	18e3      	adds	r3, r4, r3
    7154:	685a      	ldr	r2, [r3, #4]
    7156:	6899      	ldr	r1, [r3, #8]
  return (uint32_t)(index + 1) % N;
    7158:	3201      	adds	r2, #1
    715a:	4032      	ands	r2, r6
    while(txBuffer.isFull()) {
    715c:	428a      	cmp	r2, r1
    715e:	d12f      	bne.n	71c0 <_ZN4Uart5writeEh+0x84>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    7160:	f3ef 8310 	mrs	r3, PRIMASK
      if (interruptsEnabled) {
    7164:	07db      	lsls	r3, r3, #31
    7166:	d40d      	bmi.n	7184 <_ZN4Uart5writeEh+0x48>
        uint32_t exceptionNumber = (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk);
    7168:	4b1e      	ldr	r3, [pc, #120]	; (71e4 <_ZN4Uart5writeEh+0xa8>)
    716a:	685b      	ldr	r3, [r3, #4]
    716c:	05db      	lsls	r3, r3, #23
    716e:	0ddb      	lsrs	r3, r3, #23
        if (exceptionNumber == 0 ||
    7170:	d0ed      	beq.n	714e <_ZN4Uart5writeEh+0x12>
              NVIC_GetPriority((IRQn_Type)(exceptionNumber - 16)) > SERCOM_NVIC_PRIORITY) {
    7172:	3b10      	subs	r3, #16
    7174:	b25b      	sxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
    7176:	2b00      	cmp	r3, #0
    7178:	db19      	blt.n	71ae <_ZN4Uart5writeEh+0x72>
    return((uint32_t)(((NVIC->IP[ _IP_IDX(IRQn)] >> _BIT_SHIFT(IRQn) ) & (uint32_t)0xFFUL) >> (8U - __NVIC_PRIO_BITS)));
    717a:	089b      	lsrs	r3, r3, #2
    717c:	33c0      	adds	r3, #192	; 0xc0
    717e:	4a1a      	ldr	r2, [pc, #104]	; (71e8 <_ZN4Uart5writeEh+0xac>)
    7180:	009b      	lsls	r3, r3, #2
    7182:	589b      	ldr	r3, [r3, r2]
      if (sercom->isDataRegisterEmptyUART()) {
    7184:	6920      	ldr	r0, [r4, #16]
    7186:	f7ff fd4d 	bl	6c24 <_ZN6SERCOM23isDataRegisterEmptyUARTEv>
    718a:	2800      	cmp	r0, #0
    718c:	d0df      	beq.n	714e <_ZN4Uart5writeEh+0x12>
        IrqHandler();
    718e:	0020      	movs	r0, r4
    7190:	f7ff ff6d 	bl	706e <_ZN4Uart10IrqHandlerEv>
    7194:	e7db      	b.n	714e <_ZN4Uart5writeEh+0x12>
  if (sercom->isDataRegisterEmptyUART() && txBuffer.available() == 0) {
    7196:	0020      	movs	r0, r4
    7198:	301d      	adds	r0, #29
    719a:	30ff      	adds	r0, #255	; 0xff
    719c:	f7ff ff36 	bl	700c <_ZN11RingBufferNILi256EE9availableEv>
    71a0:	2800      	cmp	r0, #0
    71a2:	d1d3      	bne.n	714c <_ZN4Uart5writeEh+0x10>
    sercom->writeDataUART(data);
    71a4:	0029      	movs	r1, r5
    71a6:	6920      	ldr	r0, [r4, #16]
    71a8:	f7ff fd45 	bl	6c36 <_ZN6SERCOM13writeDataUARTEh>
  return 1;
    71ac:	e017      	b.n	71de <_ZN4Uart5writeEh+0xa2>
    return((uint32_t)(((SCB->SHP[_SHP_IDX(IRQn)] >> _BIT_SHIFT(IRQn) ) & (uint32_t)0xFFUL) >> (8U - __NVIC_PRIO_BITS)));
    71ae:	220f      	movs	r2, #15
    71b0:	4013      	ands	r3, r2
    71b2:	3b08      	subs	r3, #8
    71b4:	089b      	lsrs	r3, r3, #2
    71b6:	4a0d      	ldr	r2, [pc, #52]	; (71ec <_ZN4Uart5writeEh+0xb0>)
    71b8:	009b      	lsls	r3, r3, #2
    71ba:	189b      	adds	r3, r3, r2
    71bc:	681b      	ldr	r3, [r3, #0]
    71be:	e7e1      	b.n	7184 <_ZN4Uart5writeEh+0x48>
  int i = nextIndex(_iHead);
    71c0:	685a      	ldr	r2, [r3, #4]
  return (uint32_t)(index + 1) % N;
    71c2:	3201      	adds	r2, #1
    71c4:	4016      	ands	r6, r2
  if ( i != _iTail )
    71c6:	689a      	ldr	r2, [r3, #8]
    71c8:	4296      	cmp	r6, r2
    71ca:	d005      	beq.n	71d8 <_ZN4Uart5writeEh+0x9c>
    _aucBuffer[_iHead] = c ;
    71cc:	218e      	movs	r1, #142	; 0x8e
    71ce:	685a      	ldr	r2, [r3, #4]
    71d0:	0049      	lsls	r1, r1, #1
    71d2:	18a2      	adds	r2, r4, r2
    71d4:	5455      	strb	r5, [r2, r1]
    _iHead = i ;
    71d6:	605e      	str	r6, [r3, #4]
    sercom->enableDataRegisterEmptyInterruptUART();
    71d8:	6920      	ldr	r0, [r4, #16]
    71da:	f7ff fd34 	bl	6c46 <_ZN6SERCOM36enableDataRegisterEmptyInterruptUARTEv>
}
    71de:	2001      	movs	r0, #1
    71e0:	bd70      	pop	{r4, r5, r6, pc}
    71e2:	46c0      	nop			; (mov r8, r8)
    71e4:	e000ed00 	.word	0xe000ed00
    71e8:	e000e100 	.word	0xe000e100
    71ec:	e000ed1c 	.word	0xe000ed1c

000071f0 <_ZN4Uart4readEv>:
  if(_iTail == _iHead)
    71f0:	0003      	movs	r3, r0
    71f2:	33fc      	adds	r3, #252	; 0xfc
    71f4:	69d9      	ldr	r1, [r3, #28]
    71f6:	699a      	ldr	r2, [r3, #24]
{
    71f8:	b570      	push	{r4, r5, r6, lr}
    71fa:	0004      	movs	r4, r0
    71fc:	4291      	cmp	r1, r2
    71fe:	d01a      	beq.n	7236 <_ZN4Uart4readEv+0x46>
  uint8_t value = _aucBuffer[_iTail];
    7200:	69da      	ldr	r2, [r3, #28]
    7202:	1882      	adds	r2, r0, r2
    7204:	7d15      	ldrb	r5, [r2, #20]
  _iTail = nextIndex(_iTail);
    7206:	69da      	ldr	r2, [r3, #28]
  return (uint32_t)(index + 1) % N;
    7208:	3201      	adds	r2, #1
    720a:	b2d2      	uxtb	r2, r2
  _iTail = nextIndex(_iTail);
    720c:	61da      	str	r2, [r3, #28]
  if (uc_pinRTS != NO_RTS_PIN) {
    720e:	238a      	movs	r3, #138	; 0x8a
    7210:	009b      	lsls	r3, r3, #2
    7212:	5ce3      	ldrb	r3, [r4, r3]
    7214:	2bff      	cmp	r3, #255	; 0xff
    7216:	d00c      	beq.n	7232 <_ZN4Uart4readEv+0x42>
  int c = rxBuffer.read_char();
    7218:	0020      	movs	r0, r4
    721a:	3014      	adds	r0, #20
    if (rxBuffer.availableForStore() > RTS_RX_THRESHOLD) {
    721c:	f7ff ff11 	bl	7042 <_ZN11RingBufferNILi256EE17availableForStoreEv>
    7220:	280a      	cmp	r0, #10
    7222:	dd06      	ble.n	7232 <_ZN4Uart4readEv+0x42>
      *pul_outclrRTS = ul_pinMaskRTS;
    7224:	238c      	movs	r3, #140	; 0x8c
    7226:	228d      	movs	r2, #141	; 0x8d
    7228:	009b      	lsls	r3, r3, #2
    722a:	0092      	lsls	r2, r2, #2
    722c:	58e3      	ldr	r3, [r4, r3]
    722e:	58a2      	ldr	r2, [r4, r2]
    7230:	601a      	str	r2, [r3, #0]
}
    7232:	0028      	movs	r0, r5
    7234:	bd70      	pop	{r4, r5, r6, pc}
    return -1;
    7236:	2501      	movs	r5, #1
    7238:	426d      	negs	r5, r5
    723a:	e7e8      	b.n	720e <_ZN4Uart4readEv+0x1e>

0000723c <_ZN13PluggableUSB_12getInterfaceEPh>:
#ifdef PLUGGABLE_USB_ENABLED

extern uint32_t EndPoints[];

int PluggableUSB_::getInterface(uint8_t* interfaceCount)
{
    723c:	b570      	push	{r4, r5, r6, lr}
    723e:	000e      	movs	r6, r1
	int sent = 0;
    7240:	2500      	movs	r5, #0
	PluggableUSBModule* node;
	for (node = rootNode; node; node = node->next) {
    7242:	6844      	ldr	r4, [r0, #4]
    7244:	2c00      	cmp	r4, #0
    7246:	d00b      	beq.n	7260 <_ZN13PluggableUSB_12getInterfaceEPh+0x24>
		int res = node->getInterface(interfaceCount);
    7248:	6823      	ldr	r3, [r4, #0]
    724a:	0031      	movs	r1, r6
    724c:	685b      	ldr	r3, [r3, #4]
    724e:	0020      	movs	r0, r4
    7250:	4798      	blx	r3
		if (res < 0)
    7252:	2800      	cmp	r0, #0
    7254:	db02      	blt.n	725c <_ZN13PluggableUSB_12getInterfaceEPh+0x20>
			return -1;
		sent += res;
    7256:	182d      	adds	r5, r5, r0
	for (node = rootNode; node; node = node->next) {
    7258:	68e4      	ldr	r4, [r4, #12]
    725a:	e7f3      	b.n	7244 <_ZN13PluggableUSB_12getInterfaceEPh+0x8>
			return -1;
    725c:	2501      	movs	r5, #1
    725e:	426d      	negs	r5, r5
	}
	return sent;
}
    7260:	0028      	movs	r0, r5
    7262:	bd70      	pop	{r4, r5, r6, pc}

00007264 <_ZN13PluggableUSB_13getDescriptorER8USBSetup>:

int PluggableUSB_::getDescriptor(USBSetup& setup)
{
    7264:	b570      	push	{r4, r5, r6, lr}
    7266:	000d      	movs	r5, r1
	PluggableUSBModule* node;
	for (node = rootNode; node; node = node->next) {
    7268:	6844      	ldr	r4, [r0, #4]
    726a:	2c00      	cmp	r4, #0
    726c:	d008      	beq.n	7280 <_ZN13PluggableUSB_13getDescriptorER8USBSetup+0x1c>
		int ret = node->getDescriptor(setup);
    726e:	6823      	ldr	r3, [r4, #0]
    7270:	0029      	movs	r1, r5
    7272:	689b      	ldr	r3, [r3, #8]
    7274:	0020      	movs	r0, r4
    7276:	4798      	blx	r3
		// ret!=0 -> request has been processed
		if (ret)
    7278:	2800      	cmp	r0, #0
    727a:	d102      	bne.n	7282 <_ZN13PluggableUSB_13getDescriptorER8USBSetup+0x1e>
	for (node = rootNode; node; node = node->next) {
    727c:	68e4      	ldr	r4, [r4, #12]
    727e:	e7f4      	b.n	726a <_ZN13PluggableUSB_13getDescriptorER8USBSetup+0x6>
			return ret;
	}
	return 0;
    7280:	0020      	movs	r0, r4
}
    7282:	bd70      	pop	{r4, r5, r6, pc}

00007284 <_ZN13PluggableUSB_12getShortNameEPc>:

void PluggableUSB_::getShortName(char *iSerialNum)
{
    7284:	b570      	push	{r4, r5, r6, lr}
    7286:	000d      	movs	r5, r1
       PluggableUSBModule* node;
       for (node = rootNode; node; node = node->next) {
    7288:	6844      	ldr	r4, [r0, #4]
    728a:	2c00      	cmp	r4, #0
    728c:	d007      	beq.n	729e <_ZN13PluggableUSB_12getShortNameEPc+0x1a>
               iSerialNum += node->getShortName(iSerialNum);
    728e:	6823      	ldr	r3, [r4, #0]
    7290:	0029      	movs	r1, r5
    7292:	0020      	movs	r0, r4
    7294:	68db      	ldr	r3, [r3, #12]
    7296:	4798      	blx	r3
       for (node = rootNode; node; node = node->next) {
    7298:	68e4      	ldr	r4, [r4, #12]
               iSerialNum += node->getShortName(iSerialNum);
    729a:	182d      	adds	r5, r5, r0
       for (node = rootNode; node; node = node->next) {
    729c:	e7f5      	b.n	728a <_ZN13PluggableUSB_12getShortNameEPc+0x6>
       }
       *iSerialNum = 0;
    729e:	702c      	strb	r4, [r5, #0]
}
    72a0:	bd70      	pop	{r4, r5, r6, pc}

000072a2 <_ZN13PluggableUSB_5setupER8USBSetup>:

bool PluggableUSB_::setup(USBSetup& setup)
{
    72a2:	b570      	push	{r4, r5, r6, lr}
    72a4:	000d      	movs	r5, r1
	PluggableUSBModule* node;
	for (node = rootNode; node; node = node->next) {
    72a6:	6844      	ldr	r4, [r0, #4]
    72a8:	2c00      	cmp	r4, #0
    72aa:	d008      	beq.n	72be <_ZN13PluggableUSB_5setupER8USBSetup+0x1c>
		if (node->setup(setup)) {
    72ac:	6823      	ldr	r3, [r4, #0]
    72ae:	0029      	movs	r1, r5
    72b0:	681b      	ldr	r3, [r3, #0]
    72b2:	0020      	movs	r0, r4
    72b4:	4798      	blx	r3
    72b6:	2800      	cmp	r0, #0
    72b8:	d102      	bne.n	72c0 <_ZN13PluggableUSB_5setupER8USBSetup+0x1e>
	for (node = rootNode; node; node = node->next) {
    72ba:	68e4      	ldr	r4, [r4, #12]
    72bc:	e7f4      	b.n	72a8 <_ZN13PluggableUSB_5setupER8USBSetup+0x6>
			return true;
		}
	}
	return false;
    72be:	0020      	movs	r0, r4
}
    72c0:	bd70      	pop	{r4, r5, r6, pc}
	...

000072c4 <_Z12PluggableUSBv>:
	// restart USB layer???
}

PluggableUSB_& PluggableUSB()
{
	static PluggableUSB_ obj;
    72c4:	2101      	movs	r1, #1
    72c6:	4a06      	ldr	r2, [pc, #24]	; (72e0 <_Z12PluggableUSBv+0x1c>)
{
    72c8:	b510      	push	{r4, lr}
	static PluggableUSB_ obj;
    72ca:	6813      	ldr	r3, [r2, #0]
    72cc:	4805      	ldr	r0, [pc, #20]	; (72e4 <_Z12PluggableUSBv+0x20>)
    72ce:	400b      	ands	r3, r1
    72d0:	d105      	bne.n	72de <_Z12PluggableUSBv+0x1a>
	return obj;
}

PluggableUSB_::PluggableUSB_() : lastIf(CDC_ACM_INTERFACE + CDC_INTERFACE_COUNT),
                                 lastEp(CDC_FIRST_ENDPOINT + CDC_ENPOINT_COUNT),
                                 rootNode(NULL)
    72d2:	2402      	movs	r4, #2
    72d4:	7004      	strb	r4, [r0, #0]
    72d6:	1924      	adds	r4, r4, r4
    72d8:	7044      	strb	r4, [r0, #1]
    72da:	6043      	str	r3, [r0, #4]
	static PluggableUSB_ obj;
    72dc:	6011      	str	r1, [r2, #0]
}
    72de:	bd10      	pop	{r4, pc}
    72e0:	20001058 	.word	0x20001058
    72e4:	2000105c 	.word	0x2000105c

000072e8 <__aeabi_atexit>:
    72e8:	000b      	movs	r3, r1
    72ea:	b510      	push	{r4, lr}
    72ec:	0001      	movs	r1, r0
    72ee:	0018      	movs	r0, r3
    72f0:	f001 ff44 	bl	917c <__cxa_atexit>
    72f4:	bd10      	pop	{r4, pc}
	...

000072f8 <__gnu_thumb1_case_uqi>:
    72f8:	b402      	push	{r1}
    72fa:	4671      	mov	r1, lr
    72fc:	0849      	lsrs	r1, r1, #1
    72fe:	0049      	lsls	r1, r1, #1
    7300:	5c09      	ldrb	r1, [r1, r0]
    7302:	0049      	lsls	r1, r1, #1
    7304:	448e      	add	lr, r1
    7306:	bc02      	pop	{r1}
    7308:	4770      	bx	lr
    730a:	46c0      	nop			; (mov r8, r8)

0000730c <__udivsi3>:
    730c:	2200      	movs	r2, #0
    730e:	0843      	lsrs	r3, r0, #1
    7310:	428b      	cmp	r3, r1
    7312:	d374      	bcc.n	73fe <__udivsi3+0xf2>
    7314:	0903      	lsrs	r3, r0, #4
    7316:	428b      	cmp	r3, r1
    7318:	d35f      	bcc.n	73da <__udivsi3+0xce>
    731a:	0a03      	lsrs	r3, r0, #8
    731c:	428b      	cmp	r3, r1
    731e:	d344      	bcc.n	73aa <__udivsi3+0x9e>
    7320:	0b03      	lsrs	r3, r0, #12
    7322:	428b      	cmp	r3, r1
    7324:	d328      	bcc.n	7378 <__udivsi3+0x6c>
    7326:	0c03      	lsrs	r3, r0, #16
    7328:	428b      	cmp	r3, r1
    732a:	d30d      	bcc.n	7348 <__udivsi3+0x3c>
    732c:	22ff      	movs	r2, #255	; 0xff
    732e:	0209      	lsls	r1, r1, #8
    7330:	ba12      	rev	r2, r2
    7332:	0c03      	lsrs	r3, r0, #16
    7334:	428b      	cmp	r3, r1
    7336:	d302      	bcc.n	733e <__udivsi3+0x32>
    7338:	1212      	asrs	r2, r2, #8
    733a:	0209      	lsls	r1, r1, #8
    733c:	d065      	beq.n	740a <__udivsi3+0xfe>
    733e:	0b03      	lsrs	r3, r0, #12
    7340:	428b      	cmp	r3, r1
    7342:	d319      	bcc.n	7378 <__udivsi3+0x6c>
    7344:	e000      	b.n	7348 <__udivsi3+0x3c>
    7346:	0a09      	lsrs	r1, r1, #8
    7348:	0bc3      	lsrs	r3, r0, #15
    734a:	428b      	cmp	r3, r1
    734c:	d301      	bcc.n	7352 <__udivsi3+0x46>
    734e:	03cb      	lsls	r3, r1, #15
    7350:	1ac0      	subs	r0, r0, r3
    7352:	4152      	adcs	r2, r2
    7354:	0b83      	lsrs	r3, r0, #14
    7356:	428b      	cmp	r3, r1
    7358:	d301      	bcc.n	735e <__udivsi3+0x52>
    735a:	038b      	lsls	r3, r1, #14
    735c:	1ac0      	subs	r0, r0, r3
    735e:	4152      	adcs	r2, r2
    7360:	0b43      	lsrs	r3, r0, #13
    7362:	428b      	cmp	r3, r1
    7364:	d301      	bcc.n	736a <__udivsi3+0x5e>
    7366:	034b      	lsls	r3, r1, #13
    7368:	1ac0      	subs	r0, r0, r3
    736a:	4152      	adcs	r2, r2
    736c:	0b03      	lsrs	r3, r0, #12
    736e:	428b      	cmp	r3, r1
    7370:	d301      	bcc.n	7376 <__udivsi3+0x6a>
    7372:	030b      	lsls	r3, r1, #12
    7374:	1ac0      	subs	r0, r0, r3
    7376:	4152      	adcs	r2, r2
    7378:	0ac3      	lsrs	r3, r0, #11
    737a:	428b      	cmp	r3, r1
    737c:	d301      	bcc.n	7382 <__udivsi3+0x76>
    737e:	02cb      	lsls	r3, r1, #11
    7380:	1ac0      	subs	r0, r0, r3
    7382:	4152      	adcs	r2, r2
    7384:	0a83      	lsrs	r3, r0, #10
    7386:	428b      	cmp	r3, r1
    7388:	d301      	bcc.n	738e <__udivsi3+0x82>
    738a:	028b      	lsls	r3, r1, #10
    738c:	1ac0      	subs	r0, r0, r3
    738e:	4152      	adcs	r2, r2
    7390:	0a43      	lsrs	r3, r0, #9
    7392:	428b      	cmp	r3, r1
    7394:	d301      	bcc.n	739a <__udivsi3+0x8e>
    7396:	024b      	lsls	r3, r1, #9
    7398:	1ac0      	subs	r0, r0, r3
    739a:	4152      	adcs	r2, r2
    739c:	0a03      	lsrs	r3, r0, #8
    739e:	428b      	cmp	r3, r1
    73a0:	d301      	bcc.n	73a6 <__udivsi3+0x9a>
    73a2:	020b      	lsls	r3, r1, #8
    73a4:	1ac0      	subs	r0, r0, r3
    73a6:	4152      	adcs	r2, r2
    73a8:	d2cd      	bcs.n	7346 <__udivsi3+0x3a>
    73aa:	09c3      	lsrs	r3, r0, #7
    73ac:	428b      	cmp	r3, r1
    73ae:	d301      	bcc.n	73b4 <__udivsi3+0xa8>
    73b0:	01cb      	lsls	r3, r1, #7
    73b2:	1ac0      	subs	r0, r0, r3
    73b4:	4152      	adcs	r2, r2
    73b6:	0983      	lsrs	r3, r0, #6
    73b8:	428b      	cmp	r3, r1
    73ba:	d301      	bcc.n	73c0 <__udivsi3+0xb4>
    73bc:	018b      	lsls	r3, r1, #6
    73be:	1ac0      	subs	r0, r0, r3
    73c0:	4152      	adcs	r2, r2
    73c2:	0943      	lsrs	r3, r0, #5
    73c4:	428b      	cmp	r3, r1
    73c6:	d301      	bcc.n	73cc <__udivsi3+0xc0>
    73c8:	014b      	lsls	r3, r1, #5
    73ca:	1ac0      	subs	r0, r0, r3
    73cc:	4152      	adcs	r2, r2
    73ce:	0903      	lsrs	r3, r0, #4
    73d0:	428b      	cmp	r3, r1
    73d2:	d301      	bcc.n	73d8 <__udivsi3+0xcc>
    73d4:	010b      	lsls	r3, r1, #4
    73d6:	1ac0      	subs	r0, r0, r3
    73d8:	4152      	adcs	r2, r2
    73da:	08c3      	lsrs	r3, r0, #3
    73dc:	428b      	cmp	r3, r1
    73de:	d301      	bcc.n	73e4 <__udivsi3+0xd8>
    73e0:	00cb      	lsls	r3, r1, #3
    73e2:	1ac0      	subs	r0, r0, r3
    73e4:	4152      	adcs	r2, r2
    73e6:	0883      	lsrs	r3, r0, #2
    73e8:	428b      	cmp	r3, r1
    73ea:	d301      	bcc.n	73f0 <__udivsi3+0xe4>
    73ec:	008b      	lsls	r3, r1, #2
    73ee:	1ac0      	subs	r0, r0, r3
    73f0:	4152      	adcs	r2, r2
    73f2:	0843      	lsrs	r3, r0, #1
    73f4:	428b      	cmp	r3, r1
    73f6:	d301      	bcc.n	73fc <__udivsi3+0xf0>
    73f8:	004b      	lsls	r3, r1, #1
    73fa:	1ac0      	subs	r0, r0, r3
    73fc:	4152      	adcs	r2, r2
    73fe:	1a41      	subs	r1, r0, r1
    7400:	d200      	bcs.n	7404 <__udivsi3+0xf8>
    7402:	4601      	mov	r1, r0
    7404:	4152      	adcs	r2, r2
    7406:	4610      	mov	r0, r2
    7408:	4770      	bx	lr
    740a:	e7ff      	b.n	740c <__udivsi3+0x100>
    740c:	b501      	push	{r0, lr}
    740e:	2000      	movs	r0, #0
    7410:	f000 f8f0 	bl	75f4 <__aeabi_idiv0>
    7414:	bd02      	pop	{r1, pc}
    7416:	46c0      	nop			; (mov r8, r8)

00007418 <__aeabi_uidivmod>:
    7418:	2900      	cmp	r1, #0
    741a:	d0f7      	beq.n	740c <__udivsi3+0x100>
    741c:	e776      	b.n	730c <__udivsi3>
    741e:	4770      	bx	lr

00007420 <__divsi3>:
    7420:	4603      	mov	r3, r0
    7422:	430b      	orrs	r3, r1
    7424:	d47f      	bmi.n	7526 <__divsi3+0x106>
    7426:	2200      	movs	r2, #0
    7428:	0843      	lsrs	r3, r0, #1
    742a:	428b      	cmp	r3, r1
    742c:	d374      	bcc.n	7518 <__divsi3+0xf8>
    742e:	0903      	lsrs	r3, r0, #4
    7430:	428b      	cmp	r3, r1
    7432:	d35f      	bcc.n	74f4 <__divsi3+0xd4>
    7434:	0a03      	lsrs	r3, r0, #8
    7436:	428b      	cmp	r3, r1
    7438:	d344      	bcc.n	74c4 <__divsi3+0xa4>
    743a:	0b03      	lsrs	r3, r0, #12
    743c:	428b      	cmp	r3, r1
    743e:	d328      	bcc.n	7492 <__divsi3+0x72>
    7440:	0c03      	lsrs	r3, r0, #16
    7442:	428b      	cmp	r3, r1
    7444:	d30d      	bcc.n	7462 <__divsi3+0x42>
    7446:	22ff      	movs	r2, #255	; 0xff
    7448:	0209      	lsls	r1, r1, #8
    744a:	ba12      	rev	r2, r2
    744c:	0c03      	lsrs	r3, r0, #16
    744e:	428b      	cmp	r3, r1
    7450:	d302      	bcc.n	7458 <__divsi3+0x38>
    7452:	1212      	asrs	r2, r2, #8
    7454:	0209      	lsls	r1, r1, #8
    7456:	d065      	beq.n	7524 <__divsi3+0x104>
    7458:	0b03      	lsrs	r3, r0, #12
    745a:	428b      	cmp	r3, r1
    745c:	d319      	bcc.n	7492 <__divsi3+0x72>
    745e:	e000      	b.n	7462 <__divsi3+0x42>
    7460:	0a09      	lsrs	r1, r1, #8
    7462:	0bc3      	lsrs	r3, r0, #15
    7464:	428b      	cmp	r3, r1
    7466:	d301      	bcc.n	746c <__divsi3+0x4c>
    7468:	03cb      	lsls	r3, r1, #15
    746a:	1ac0      	subs	r0, r0, r3
    746c:	4152      	adcs	r2, r2
    746e:	0b83      	lsrs	r3, r0, #14
    7470:	428b      	cmp	r3, r1
    7472:	d301      	bcc.n	7478 <__divsi3+0x58>
    7474:	038b      	lsls	r3, r1, #14
    7476:	1ac0      	subs	r0, r0, r3
    7478:	4152      	adcs	r2, r2
    747a:	0b43      	lsrs	r3, r0, #13
    747c:	428b      	cmp	r3, r1
    747e:	d301      	bcc.n	7484 <__divsi3+0x64>
    7480:	034b      	lsls	r3, r1, #13
    7482:	1ac0      	subs	r0, r0, r3
    7484:	4152      	adcs	r2, r2
    7486:	0b03      	lsrs	r3, r0, #12
    7488:	428b      	cmp	r3, r1
    748a:	d301      	bcc.n	7490 <__divsi3+0x70>
    748c:	030b      	lsls	r3, r1, #12
    748e:	1ac0      	subs	r0, r0, r3
    7490:	4152      	adcs	r2, r2
    7492:	0ac3      	lsrs	r3, r0, #11
    7494:	428b      	cmp	r3, r1
    7496:	d301      	bcc.n	749c <__divsi3+0x7c>
    7498:	02cb      	lsls	r3, r1, #11
    749a:	1ac0      	subs	r0, r0, r3
    749c:	4152      	adcs	r2, r2
    749e:	0a83      	lsrs	r3, r0, #10
    74a0:	428b      	cmp	r3, r1
    74a2:	d301      	bcc.n	74a8 <__divsi3+0x88>
    74a4:	028b      	lsls	r3, r1, #10
    74a6:	1ac0      	subs	r0, r0, r3
    74a8:	4152      	adcs	r2, r2
    74aa:	0a43      	lsrs	r3, r0, #9
    74ac:	428b      	cmp	r3, r1
    74ae:	d301      	bcc.n	74b4 <__divsi3+0x94>
    74b0:	024b      	lsls	r3, r1, #9
    74b2:	1ac0      	subs	r0, r0, r3
    74b4:	4152      	adcs	r2, r2
    74b6:	0a03      	lsrs	r3, r0, #8
    74b8:	428b      	cmp	r3, r1
    74ba:	d301      	bcc.n	74c0 <__divsi3+0xa0>
    74bc:	020b      	lsls	r3, r1, #8
    74be:	1ac0      	subs	r0, r0, r3
    74c0:	4152      	adcs	r2, r2
    74c2:	d2cd      	bcs.n	7460 <__divsi3+0x40>
    74c4:	09c3      	lsrs	r3, r0, #7
    74c6:	428b      	cmp	r3, r1
    74c8:	d301      	bcc.n	74ce <__divsi3+0xae>
    74ca:	01cb      	lsls	r3, r1, #7
    74cc:	1ac0      	subs	r0, r0, r3
    74ce:	4152      	adcs	r2, r2
    74d0:	0983      	lsrs	r3, r0, #6
    74d2:	428b      	cmp	r3, r1
    74d4:	d301      	bcc.n	74da <__divsi3+0xba>
    74d6:	018b      	lsls	r3, r1, #6
    74d8:	1ac0      	subs	r0, r0, r3
    74da:	4152      	adcs	r2, r2
    74dc:	0943      	lsrs	r3, r0, #5
    74de:	428b      	cmp	r3, r1
    74e0:	d301      	bcc.n	74e6 <__divsi3+0xc6>
    74e2:	014b      	lsls	r3, r1, #5
    74e4:	1ac0      	subs	r0, r0, r3
    74e6:	4152      	adcs	r2, r2
    74e8:	0903      	lsrs	r3, r0, #4
    74ea:	428b      	cmp	r3, r1
    74ec:	d301      	bcc.n	74f2 <__divsi3+0xd2>
    74ee:	010b      	lsls	r3, r1, #4
    74f0:	1ac0      	subs	r0, r0, r3
    74f2:	4152      	adcs	r2, r2
    74f4:	08c3      	lsrs	r3, r0, #3
    74f6:	428b      	cmp	r3, r1
    74f8:	d301      	bcc.n	74fe <__divsi3+0xde>
    74fa:	00cb      	lsls	r3, r1, #3
    74fc:	1ac0      	subs	r0, r0, r3
    74fe:	4152      	adcs	r2, r2
    7500:	0883      	lsrs	r3, r0, #2
    7502:	428b      	cmp	r3, r1
    7504:	d301      	bcc.n	750a <__divsi3+0xea>
    7506:	008b      	lsls	r3, r1, #2
    7508:	1ac0      	subs	r0, r0, r3
    750a:	4152      	adcs	r2, r2
    750c:	0843      	lsrs	r3, r0, #1
    750e:	428b      	cmp	r3, r1
    7510:	d301      	bcc.n	7516 <__divsi3+0xf6>
    7512:	004b      	lsls	r3, r1, #1
    7514:	1ac0      	subs	r0, r0, r3
    7516:	4152      	adcs	r2, r2
    7518:	1a41      	subs	r1, r0, r1
    751a:	d200      	bcs.n	751e <__divsi3+0xfe>
    751c:	4601      	mov	r1, r0
    751e:	4152      	adcs	r2, r2
    7520:	4610      	mov	r0, r2
    7522:	4770      	bx	lr
    7524:	e05d      	b.n	75e2 <__divsi3+0x1c2>
    7526:	0fca      	lsrs	r2, r1, #31
    7528:	d000      	beq.n	752c <__divsi3+0x10c>
    752a:	4249      	negs	r1, r1
    752c:	1003      	asrs	r3, r0, #32
    752e:	d300      	bcc.n	7532 <__divsi3+0x112>
    7530:	4240      	negs	r0, r0
    7532:	4053      	eors	r3, r2
    7534:	2200      	movs	r2, #0
    7536:	469c      	mov	ip, r3
    7538:	0903      	lsrs	r3, r0, #4
    753a:	428b      	cmp	r3, r1
    753c:	d32d      	bcc.n	759a <__divsi3+0x17a>
    753e:	0a03      	lsrs	r3, r0, #8
    7540:	428b      	cmp	r3, r1
    7542:	d312      	bcc.n	756a <__divsi3+0x14a>
    7544:	22fc      	movs	r2, #252	; 0xfc
    7546:	0189      	lsls	r1, r1, #6
    7548:	ba12      	rev	r2, r2
    754a:	0a03      	lsrs	r3, r0, #8
    754c:	428b      	cmp	r3, r1
    754e:	d30c      	bcc.n	756a <__divsi3+0x14a>
    7550:	0189      	lsls	r1, r1, #6
    7552:	1192      	asrs	r2, r2, #6
    7554:	428b      	cmp	r3, r1
    7556:	d308      	bcc.n	756a <__divsi3+0x14a>
    7558:	0189      	lsls	r1, r1, #6
    755a:	1192      	asrs	r2, r2, #6
    755c:	428b      	cmp	r3, r1
    755e:	d304      	bcc.n	756a <__divsi3+0x14a>
    7560:	0189      	lsls	r1, r1, #6
    7562:	d03a      	beq.n	75da <__divsi3+0x1ba>
    7564:	1192      	asrs	r2, r2, #6
    7566:	e000      	b.n	756a <__divsi3+0x14a>
    7568:	0989      	lsrs	r1, r1, #6
    756a:	09c3      	lsrs	r3, r0, #7
    756c:	428b      	cmp	r3, r1
    756e:	d301      	bcc.n	7574 <__divsi3+0x154>
    7570:	01cb      	lsls	r3, r1, #7
    7572:	1ac0      	subs	r0, r0, r3
    7574:	4152      	adcs	r2, r2
    7576:	0983      	lsrs	r3, r0, #6
    7578:	428b      	cmp	r3, r1
    757a:	d301      	bcc.n	7580 <__divsi3+0x160>
    757c:	018b      	lsls	r3, r1, #6
    757e:	1ac0      	subs	r0, r0, r3
    7580:	4152      	adcs	r2, r2
    7582:	0943      	lsrs	r3, r0, #5
    7584:	428b      	cmp	r3, r1
    7586:	d301      	bcc.n	758c <__divsi3+0x16c>
    7588:	014b      	lsls	r3, r1, #5
    758a:	1ac0      	subs	r0, r0, r3
    758c:	4152      	adcs	r2, r2
    758e:	0903      	lsrs	r3, r0, #4
    7590:	428b      	cmp	r3, r1
    7592:	d301      	bcc.n	7598 <__divsi3+0x178>
    7594:	010b      	lsls	r3, r1, #4
    7596:	1ac0      	subs	r0, r0, r3
    7598:	4152      	adcs	r2, r2
    759a:	08c3      	lsrs	r3, r0, #3
    759c:	428b      	cmp	r3, r1
    759e:	d301      	bcc.n	75a4 <__divsi3+0x184>
    75a0:	00cb      	lsls	r3, r1, #3
    75a2:	1ac0      	subs	r0, r0, r3
    75a4:	4152      	adcs	r2, r2
    75a6:	0883      	lsrs	r3, r0, #2
    75a8:	428b      	cmp	r3, r1
    75aa:	d301      	bcc.n	75b0 <__divsi3+0x190>
    75ac:	008b      	lsls	r3, r1, #2
    75ae:	1ac0      	subs	r0, r0, r3
    75b0:	4152      	adcs	r2, r2
    75b2:	d2d9      	bcs.n	7568 <__divsi3+0x148>
    75b4:	0843      	lsrs	r3, r0, #1
    75b6:	428b      	cmp	r3, r1
    75b8:	d301      	bcc.n	75be <__divsi3+0x19e>
    75ba:	004b      	lsls	r3, r1, #1
    75bc:	1ac0      	subs	r0, r0, r3
    75be:	4152      	adcs	r2, r2
    75c0:	1a41      	subs	r1, r0, r1
    75c2:	d200      	bcs.n	75c6 <__divsi3+0x1a6>
    75c4:	4601      	mov	r1, r0
    75c6:	4663      	mov	r3, ip
    75c8:	4152      	adcs	r2, r2
    75ca:	105b      	asrs	r3, r3, #1
    75cc:	4610      	mov	r0, r2
    75ce:	d301      	bcc.n	75d4 <__divsi3+0x1b4>
    75d0:	4240      	negs	r0, r0
    75d2:	2b00      	cmp	r3, #0
    75d4:	d500      	bpl.n	75d8 <__divsi3+0x1b8>
    75d6:	4249      	negs	r1, r1
    75d8:	4770      	bx	lr
    75da:	4663      	mov	r3, ip
    75dc:	105b      	asrs	r3, r3, #1
    75de:	d300      	bcc.n	75e2 <__divsi3+0x1c2>
    75e0:	4240      	negs	r0, r0
    75e2:	b501      	push	{r0, lr}
    75e4:	2000      	movs	r0, #0
    75e6:	f000 f805 	bl	75f4 <__aeabi_idiv0>
    75ea:	bd02      	pop	{r1, pc}

000075ec <__aeabi_idivmod>:
    75ec:	2900      	cmp	r1, #0
    75ee:	d0f8      	beq.n	75e2 <__divsi3+0x1c2>
    75f0:	e716      	b.n	7420 <__divsi3>
    75f2:	4770      	bx	lr

000075f4 <__aeabi_idiv0>:
    75f4:	4770      	bx	lr
    75f6:	46c0      	nop			; (mov r8, r8)

000075f8 <__aeabi_cdrcmple>:
    75f8:	4684      	mov	ip, r0
    75fa:	1c10      	adds	r0, r2, #0
    75fc:	4662      	mov	r2, ip
    75fe:	468c      	mov	ip, r1
    7600:	1c19      	adds	r1, r3, #0
    7602:	4663      	mov	r3, ip
    7604:	e000      	b.n	7608 <__aeabi_cdcmpeq>
    7606:	46c0      	nop			; (mov r8, r8)

00007608 <__aeabi_cdcmpeq>:
    7608:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    760a:	f000 ff15 	bl	8438 <__ledf2>
    760e:	2800      	cmp	r0, #0
    7610:	d401      	bmi.n	7616 <__aeabi_cdcmpeq+0xe>
    7612:	2100      	movs	r1, #0
    7614:	42c8      	cmn	r0, r1
    7616:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

00007618 <__aeabi_dcmpeq>:
    7618:	b510      	push	{r4, lr}
    761a:	f000 fe6f 	bl	82fc <__eqdf2>
    761e:	4240      	negs	r0, r0
    7620:	3001      	adds	r0, #1
    7622:	bd10      	pop	{r4, pc}

00007624 <__aeabi_dcmplt>:
    7624:	b510      	push	{r4, lr}
    7626:	f000 ff07 	bl	8438 <__ledf2>
    762a:	2800      	cmp	r0, #0
    762c:	db01      	blt.n	7632 <__aeabi_dcmplt+0xe>
    762e:	2000      	movs	r0, #0
    7630:	bd10      	pop	{r4, pc}
    7632:	2001      	movs	r0, #1
    7634:	bd10      	pop	{r4, pc}
    7636:	46c0      	nop			; (mov r8, r8)

00007638 <__aeabi_dcmple>:
    7638:	b510      	push	{r4, lr}
    763a:	f000 fefd 	bl	8438 <__ledf2>
    763e:	2800      	cmp	r0, #0
    7640:	dd01      	ble.n	7646 <__aeabi_dcmple+0xe>
    7642:	2000      	movs	r0, #0
    7644:	bd10      	pop	{r4, pc}
    7646:	2001      	movs	r0, #1
    7648:	bd10      	pop	{r4, pc}
    764a:	46c0      	nop			; (mov r8, r8)

0000764c <__aeabi_dcmpgt>:
    764c:	b510      	push	{r4, lr}
    764e:	f000 fe8f 	bl	8370 <__gedf2>
    7652:	2800      	cmp	r0, #0
    7654:	dc01      	bgt.n	765a <__aeabi_dcmpgt+0xe>
    7656:	2000      	movs	r0, #0
    7658:	bd10      	pop	{r4, pc}
    765a:	2001      	movs	r0, #1
    765c:	bd10      	pop	{r4, pc}
    765e:	46c0      	nop			; (mov r8, r8)

00007660 <__aeabi_dcmpge>:
    7660:	b510      	push	{r4, lr}
    7662:	f000 fe85 	bl	8370 <__gedf2>
    7666:	2800      	cmp	r0, #0
    7668:	da01      	bge.n	766e <__aeabi_dcmpge+0xe>
    766a:	2000      	movs	r0, #0
    766c:	bd10      	pop	{r4, pc}
    766e:	2001      	movs	r0, #1
    7670:	bd10      	pop	{r4, pc}
    7672:	46c0      	nop			; (mov r8, r8)

00007674 <__aeabi_dadd>:
    7674:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7676:	4645      	mov	r5, r8
    7678:	46de      	mov	lr, fp
    767a:	4657      	mov	r7, sl
    767c:	464e      	mov	r6, r9
    767e:	030c      	lsls	r4, r1, #12
    7680:	b5e0      	push	{r5, r6, r7, lr}
    7682:	004e      	lsls	r6, r1, #1
    7684:	0fc9      	lsrs	r1, r1, #31
    7686:	4688      	mov	r8, r1
    7688:	000d      	movs	r5, r1
    768a:	0a61      	lsrs	r1, r4, #9
    768c:	0f44      	lsrs	r4, r0, #29
    768e:	430c      	orrs	r4, r1
    7690:	00c7      	lsls	r7, r0, #3
    7692:	0319      	lsls	r1, r3, #12
    7694:	0058      	lsls	r0, r3, #1
    7696:	0fdb      	lsrs	r3, r3, #31
    7698:	469b      	mov	fp, r3
    769a:	0a4b      	lsrs	r3, r1, #9
    769c:	0f51      	lsrs	r1, r2, #29
    769e:	430b      	orrs	r3, r1
    76a0:	0d76      	lsrs	r6, r6, #21
    76a2:	0d40      	lsrs	r0, r0, #21
    76a4:	0019      	movs	r1, r3
    76a6:	00d2      	lsls	r2, r2, #3
    76a8:	45d8      	cmp	r8, fp
    76aa:	d100      	bne.n	76ae <__aeabi_dadd+0x3a>
    76ac:	e0ae      	b.n	780c <__aeabi_dadd+0x198>
    76ae:	1a35      	subs	r5, r6, r0
    76b0:	2d00      	cmp	r5, #0
    76b2:	dc00      	bgt.n	76b6 <__aeabi_dadd+0x42>
    76b4:	e0f6      	b.n	78a4 <__aeabi_dadd+0x230>
    76b6:	2800      	cmp	r0, #0
    76b8:	d10f      	bne.n	76da <__aeabi_dadd+0x66>
    76ba:	4313      	orrs	r3, r2
    76bc:	d100      	bne.n	76c0 <__aeabi_dadd+0x4c>
    76be:	e0db      	b.n	7878 <__aeabi_dadd+0x204>
    76c0:	1e6b      	subs	r3, r5, #1
    76c2:	2b00      	cmp	r3, #0
    76c4:	d000      	beq.n	76c8 <__aeabi_dadd+0x54>
    76c6:	e137      	b.n	7938 <__aeabi_dadd+0x2c4>
    76c8:	1aba      	subs	r2, r7, r2
    76ca:	4297      	cmp	r7, r2
    76cc:	41bf      	sbcs	r7, r7
    76ce:	1a64      	subs	r4, r4, r1
    76d0:	427f      	negs	r7, r7
    76d2:	1be4      	subs	r4, r4, r7
    76d4:	2601      	movs	r6, #1
    76d6:	0017      	movs	r7, r2
    76d8:	e024      	b.n	7724 <__aeabi_dadd+0xb0>
    76da:	4bc6      	ldr	r3, [pc, #792]	; (79f4 <__aeabi_dadd+0x380>)
    76dc:	429e      	cmp	r6, r3
    76de:	d04d      	beq.n	777c <__aeabi_dadd+0x108>
    76e0:	2380      	movs	r3, #128	; 0x80
    76e2:	041b      	lsls	r3, r3, #16
    76e4:	4319      	orrs	r1, r3
    76e6:	2d38      	cmp	r5, #56	; 0x38
    76e8:	dd00      	ble.n	76ec <__aeabi_dadd+0x78>
    76ea:	e107      	b.n	78fc <__aeabi_dadd+0x288>
    76ec:	2d1f      	cmp	r5, #31
    76ee:	dd00      	ble.n	76f2 <__aeabi_dadd+0x7e>
    76f0:	e138      	b.n	7964 <__aeabi_dadd+0x2f0>
    76f2:	2020      	movs	r0, #32
    76f4:	1b43      	subs	r3, r0, r5
    76f6:	469a      	mov	sl, r3
    76f8:	000b      	movs	r3, r1
    76fa:	4650      	mov	r0, sl
    76fc:	4083      	lsls	r3, r0
    76fe:	4699      	mov	r9, r3
    7700:	0013      	movs	r3, r2
    7702:	4648      	mov	r0, r9
    7704:	40eb      	lsrs	r3, r5
    7706:	4318      	orrs	r0, r3
    7708:	0003      	movs	r3, r0
    770a:	4650      	mov	r0, sl
    770c:	4082      	lsls	r2, r0
    770e:	1e50      	subs	r0, r2, #1
    7710:	4182      	sbcs	r2, r0
    7712:	40e9      	lsrs	r1, r5
    7714:	431a      	orrs	r2, r3
    7716:	1aba      	subs	r2, r7, r2
    7718:	1a61      	subs	r1, r4, r1
    771a:	4297      	cmp	r7, r2
    771c:	41a4      	sbcs	r4, r4
    771e:	0017      	movs	r7, r2
    7720:	4264      	negs	r4, r4
    7722:	1b0c      	subs	r4, r1, r4
    7724:	0223      	lsls	r3, r4, #8
    7726:	d562      	bpl.n	77ee <__aeabi_dadd+0x17a>
    7728:	0264      	lsls	r4, r4, #9
    772a:	0a65      	lsrs	r5, r4, #9
    772c:	2d00      	cmp	r5, #0
    772e:	d100      	bne.n	7732 <__aeabi_dadd+0xbe>
    7730:	e0df      	b.n	78f2 <__aeabi_dadd+0x27e>
    7732:	0028      	movs	r0, r5
    7734:	f001 fd04 	bl	9140 <__clzsi2>
    7738:	0003      	movs	r3, r0
    773a:	3b08      	subs	r3, #8
    773c:	2b1f      	cmp	r3, #31
    773e:	dd00      	ble.n	7742 <__aeabi_dadd+0xce>
    7740:	e0d2      	b.n	78e8 <__aeabi_dadd+0x274>
    7742:	2220      	movs	r2, #32
    7744:	003c      	movs	r4, r7
    7746:	1ad2      	subs	r2, r2, r3
    7748:	409d      	lsls	r5, r3
    774a:	40d4      	lsrs	r4, r2
    774c:	409f      	lsls	r7, r3
    774e:	4325      	orrs	r5, r4
    7750:	429e      	cmp	r6, r3
    7752:	dd00      	ble.n	7756 <__aeabi_dadd+0xe2>
    7754:	e0c4      	b.n	78e0 <__aeabi_dadd+0x26c>
    7756:	1b9e      	subs	r6, r3, r6
    7758:	1c73      	adds	r3, r6, #1
    775a:	2b1f      	cmp	r3, #31
    775c:	dd00      	ble.n	7760 <__aeabi_dadd+0xec>
    775e:	e0f1      	b.n	7944 <__aeabi_dadd+0x2d0>
    7760:	2220      	movs	r2, #32
    7762:	0038      	movs	r0, r7
    7764:	0029      	movs	r1, r5
    7766:	1ad2      	subs	r2, r2, r3
    7768:	40d8      	lsrs	r0, r3
    776a:	4091      	lsls	r1, r2
    776c:	4097      	lsls	r7, r2
    776e:	002c      	movs	r4, r5
    7770:	4301      	orrs	r1, r0
    7772:	1e78      	subs	r0, r7, #1
    7774:	4187      	sbcs	r7, r0
    7776:	40dc      	lsrs	r4, r3
    7778:	2600      	movs	r6, #0
    777a:	430f      	orrs	r7, r1
    777c:	077b      	lsls	r3, r7, #29
    777e:	d009      	beq.n	7794 <__aeabi_dadd+0x120>
    7780:	230f      	movs	r3, #15
    7782:	403b      	ands	r3, r7
    7784:	2b04      	cmp	r3, #4
    7786:	d005      	beq.n	7794 <__aeabi_dadd+0x120>
    7788:	1d3b      	adds	r3, r7, #4
    778a:	42bb      	cmp	r3, r7
    778c:	41bf      	sbcs	r7, r7
    778e:	427f      	negs	r7, r7
    7790:	19e4      	adds	r4, r4, r7
    7792:	001f      	movs	r7, r3
    7794:	0223      	lsls	r3, r4, #8
    7796:	d52c      	bpl.n	77f2 <__aeabi_dadd+0x17e>
    7798:	4b96      	ldr	r3, [pc, #600]	; (79f4 <__aeabi_dadd+0x380>)
    779a:	3601      	adds	r6, #1
    779c:	429e      	cmp	r6, r3
    779e:	d100      	bne.n	77a2 <__aeabi_dadd+0x12e>
    77a0:	e09a      	b.n	78d8 <__aeabi_dadd+0x264>
    77a2:	4645      	mov	r5, r8
    77a4:	4b94      	ldr	r3, [pc, #592]	; (79f8 <__aeabi_dadd+0x384>)
    77a6:	08ff      	lsrs	r7, r7, #3
    77a8:	401c      	ands	r4, r3
    77aa:	0760      	lsls	r0, r4, #29
    77ac:	0576      	lsls	r6, r6, #21
    77ae:	0264      	lsls	r4, r4, #9
    77b0:	4307      	orrs	r7, r0
    77b2:	0b24      	lsrs	r4, r4, #12
    77b4:	0d76      	lsrs	r6, r6, #21
    77b6:	2100      	movs	r1, #0
    77b8:	0324      	lsls	r4, r4, #12
    77ba:	0b23      	lsrs	r3, r4, #12
    77bc:	0d0c      	lsrs	r4, r1, #20
    77be:	4a8f      	ldr	r2, [pc, #572]	; (79fc <__aeabi_dadd+0x388>)
    77c0:	0524      	lsls	r4, r4, #20
    77c2:	431c      	orrs	r4, r3
    77c4:	4014      	ands	r4, r2
    77c6:	0533      	lsls	r3, r6, #20
    77c8:	4323      	orrs	r3, r4
    77ca:	005b      	lsls	r3, r3, #1
    77cc:	07ed      	lsls	r5, r5, #31
    77ce:	085b      	lsrs	r3, r3, #1
    77d0:	432b      	orrs	r3, r5
    77d2:	0038      	movs	r0, r7
    77d4:	0019      	movs	r1, r3
    77d6:	bc3c      	pop	{r2, r3, r4, r5}
    77d8:	4690      	mov	r8, r2
    77da:	4699      	mov	r9, r3
    77dc:	46a2      	mov	sl, r4
    77de:	46ab      	mov	fp, r5
    77e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    77e2:	4664      	mov	r4, ip
    77e4:	4304      	orrs	r4, r0
    77e6:	d100      	bne.n	77ea <__aeabi_dadd+0x176>
    77e8:	e211      	b.n	7c0e <__aeabi_dadd+0x59a>
    77ea:	0004      	movs	r4, r0
    77ec:	4667      	mov	r7, ip
    77ee:	077b      	lsls	r3, r7, #29
    77f0:	d1c6      	bne.n	7780 <__aeabi_dadd+0x10c>
    77f2:	4645      	mov	r5, r8
    77f4:	0760      	lsls	r0, r4, #29
    77f6:	08ff      	lsrs	r7, r7, #3
    77f8:	4307      	orrs	r7, r0
    77fa:	08e4      	lsrs	r4, r4, #3
    77fc:	4b7d      	ldr	r3, [pc, #500]	; (79f4 <__aeabi_dadd+0x380>)
    77fe:	429e      	cmp	r6, r3
    7800:	d030      	beq.n	7864 <__aeabi_dadd+0x1f0>
    7802:	0324      	lsls	r4, r4, #12
    7804:	0576      	lsls	r6, r6, #21
    7806:	0b24      	lsrs	r4, r4, #12
    7808:	0d76      	lsrs	r6, r6, #21
    780a:	e7d4      	b.n	77b6 <__aeabi_dadd+0x142>
    780c:	1a33      	subs	r3, r6, r0
    780e:	469a      	mov	sl, r3
    7810:	2b00      	cmp	r3, #0
    7812:	dd78      	ble.n	7906 <__aeabi_dadd+0x292>
    7814:	2800      	cmp	r0, #0
    7816:	d031      	beq.n	787c <__aeabi_dadd+0x208>
    7818:	4876      	ldr	r0, [pc, #472]	; (79f4 <__aeabi_dadd+0x380>)
    781a:	4286      	cmp	r6, r0
    781c:	d0ae      	beq.n	777c <__aeabi_dadd+0x108>
    781e:	2080      	movs	r0, #128	; 0x80
    7820:	0400      	lsls	r0, r0, #16
    7822:	4301      	orrs	r1, r0
    7824:	4653      	mov	r3, sl
    7826:	2b38      	cmp	r3, #56	; 0x38
    7828:	dc00      	bgt.n	782c <__aeabi_dadd+0x1b8>
    782a:	e0e9      	b.n	7a00 <__aeabi_dadd+0x38c>
    782c:	430a      	orrs	r2, r1
    782e:	1e51      	subs	r1, r2, #1
    7830:	418a      	sbcs	r2, r1
    7832:	2100      	movs	r1, #0
    7834:	19d2      	adds	r2, r2, r7
    7836:	42ba      	cmp	r2, r7
    7838:	41bf      	sbcs	r7, r7
    783a:	1909      	adds	r1, r1, r4
    783c:	427c      	negs	r4, r7
    783e:	0017      	movs	r7, r2
    7840:	190c      	adds	r4, r1, r4
    7842:	0223      	lsls	r3, r4, #8
    7844:	d5d3      	bpl.n	77ee <__aeabi_dadd+0x17a>
    7846:	4b6b      	ldr	r3, [pc, #428]	; (79f4 <__aeabi_dadd+0x380>)
    7848:	3601      	adds	r6, #1
    784a:	429e      	cmp	r6, r3
    784c:	d100      	bne.n	7850 <__aeabi_dadd+0x1dc>
    784e:	e13a      	b.n	7ac6 <__aeabi_dadd+0x452>
    7850:	2001      	movs	r0, #1
    7852:	4b69      	ldr	r3, [pc, #420]	; (79f8 <__aeabi_dadd+0x384>)
    7854:	401c      	ands	r4, r3
    7856:	087b      	lsrs	r3, r7, #1
    7858:	4007      	ands	r7, r0
    785a:	431f      	orrs	r7, r3
    785c:	07e0      	lsls	r0, r4, #31
    785e:	4307      	orrs	r7, r0
    7860:	0864      	lsrs	r4, r4, #1
    7862:	e78b      	b.n	777c <__aeabi_dadd+0x108>
    7864:	0023      	movs	r3, r4
    7866:	433b      	orrs	r3, r7
    7868:	d100      	bne.n	786c <__aeabi_dadd+0x1f8>
    786a:	e1cb      	b.n	7c04 <__aeabi_dadd+0x590>
    786c:	2280      	movs	r2, #128	; 0x80
    786e:	0312      	lsls	r2, r2, #12
    7870:	4314      	orrs	r4, r2
    7872:	0324      	lsls	r4, r4, #12
    7874:	0b24      	lsrs	r4, r4, #12
    7876:	e79e      	b.n	77b6 <__aeabi_dadd+0x142>
    7878:	002e      	movs	r6, r5
    787a:	e77f      	b.n	777c <__aeabi_dadd+0x108>
    787c:	0008      	movs	r0, r1
    787e:	4310      	orrs	r0, r2
    7880:	d100      	bne.n	7884 <__aeabi_dadd+0x210>
    7882:	e0b4      	b.n	79ee <__aeabi_dadd+0x37a>
    7884:	1e58      	subs	r0, r3, #1
    7886:	2800      	cmp	r0, #0
    7888:	d000      	beq.n	788c <__aeabi_dadd+0x218>
    788a:	e0de      	b.n	7a4a <__aeabi_dadd+0x3d6>
    788c:	18ba      	adds	r2, r7, r2
    788e:	42ba      	cmp	r2, r7
    7890:	419b      	sbcs	r3, r3
    7892:	1864      	adds	r4, r4, r1
    7894:	425b      	negs	r3, r3
    7896:	18e4      	adds	r4, r4, r3
    7898:	0017      	movs	r7, r2
    789a:	2601      	movs	r6, #1
    789c:	0223      	lsls	r3, r4, #8
    789e:	d5a6      	bpl.n	77ee <__aeabi_dadd+0x17a>
    78a0:	2602      	movs	r6, #2
    78a2:	e7d5      	b.n	7850 <__aeabi_dadd+0x1dc>
    78a4:	2d00      	cmp	r5, #0
    78a6:	d16e      	bne.n	7986 <__aeabi_dadd+0x312>
    78a8:	1c70      	adds	r0, r6, #1
    78aa:	0540      	lsls	r0, r0, #21
    78ac:	0d40      	lsrs	r0, r0, #21
    78ae:	2801      	cmp	r0, #1
    78b0:	dc00      	bgt.n	78b4 <__aeabi_dadd+0x240>
    78b2:	e0f9      	b.n	7aa8 <__aeabi_dadd+0x434>
    78b4:	1ab8      	subs	r0, r7, r2
    78b6:	4684      	mov	ip, r0
    78b8:	4287      	cmp	r7, r0
    78ba:	4180      	sbcs	r0, r0
    78bc:	1ae5      	subs	r5, r4, r3
    78be:	4240      	negs	r0, r0
    78c0:	1a2d      	subs	r5, r5, r0
    78c2:	0228      	lsls	r0, r5, #8
    78c4:	d400      	bmi.n	78c8 <__aeabi_dadd+0x254>
    78c6:	e089      	b.n	79dc <__aeabi_dadd+0x368>
    78c8:	1bd7      	subs	r7, r2, r7
    78ca:	42ba      	cmp	r2, r7
    78cc:	4192      	sbcs	r2, r2
    78ce:	1b1c      	subs	r4, r3, r4
    78d0:	4252      	negs	r2, r2
    78d2:	1aa5      	subs	r5, r4, r2
    78d4:	46d8      	mov	r8, fp
    78d6:	e729      	b.n	772c <__aeabi_dadd+0xb8>
    78d8:	4645      	mov	r5, r8
    78da:	2400      	movs	r4, #0
    78dc:	2700      	movs	r7, #0
    78de:	e76a      	b.n	77b6 <__aeabi_dadd+0x142>
    78e0:	4c45      	ldr	r4, [pc, #276]	; (79f8 <__aeabi_dadd+0x384>)
    78e2:	1af6      	subs	r6, r6, r3
    78e4:	402c      	ands	r4, r5
    78e6:	e749      	b.n	777c <__aeabi_dadd+0x108>
    78e8:	003d      	movs	r5, r7
    78ea:	3828      	subs	r0, #40	; 0x28
    78ec:	4085      	lsls	r5, r0
    78ee:	2700      	movs	r7, #0
    78f0:	e72e      	b.n	7750 <__aeabi_dadd+0xdc>
    78f2:	0038      	movs	r0, r7
    78f4:	f001 fc24 	bl	9140 <__clzsi2>
    78f8:	3020      	adds	r0, #32
    78fa:	e71d      	b.n	7738 <__aeabi_dadd+0xc4>
    78fc:	430a      	orrs	r2, r1
    78fe:	1e51      	subs	r1, r2, #1
    7900:	418a      	sbcs	r2, r1
    7902:	2100      	movs	r1, #0
    7904:	e707      	b.n	7716 <__aeabi_dadd+0xa2>
    7906:	2b00      	cmp	r3, #0
    7908:	d000      	beq.n	790c <__aeabi_dadd+0x298>
    790a:	e0f3      	b.n	7af4 <__aeabi_dadd+0x480>
    790c:	1c70      	adds	r0, r6, #1
    790e:	0543      	lsls	r3, r0, #21
    7910:	0d5b      	lsrs	r3, r3, #21
    7912:	2b01      	cmp	r3, #1
    7914:	dc00      	bgt.n	7918 <__aeabi_dadd+0x2a4>
    7916:	e0ad      	b.n	7a74 <__aeabi_dadd+0x400>
    7918:	4b36      	ldr	r3, [pc, #216]	; (79f4 <__aeabi_dadd+0x380>)
    791a:	4298      	cmp	r0, r3
    791c:	d100      	bne.n	7920 <__aeabi_dadd+0x2ac>
    791e:	e0d1      	b.n	7ac4 <__aeabi_dadd+0x450>
    7920:	18ba      	adds	r2, r7, r2
    7922:	42ba      	cmp	r2, r7
    7924:	41bf      	sbcs	r7, r7
    7926:	1864      	adds	r4, r4, r1
    7928:	427f      	negs	r7, r7
    792a:	19e4      	adds	r4, r4, r7
    792c:	07e7      	lsls	r7, r4, #31
    792e:	0852      	lsrs	r2, r2, #1
    7930:	4317      	orrs	r7, r2
    7932:	0864      	lsrs	r4, r4, #1
    7934:	0006      	movs	r6, r0
    7936:	e721      	b.n	777c <__aeabi_dadd+0x108>
    7938:	482e      	ldr	r0, [pc, #184]	; (79f4 <__aeabi_dadd+0x380>)
    793a:	4285      	cmp	r5, r0
    793c:	d100      	bne.n	7940 <__aeabi_dadd+0x2cc>
    793e:	e093      	b.n	7a68 <__aeabi_dadd+0x3f4>
    7940:	001d      	movs	r5, r3
    7942:	e6d0      	b.n	76e6 <__aeabi_dadd+0x72>
    7944:	0029      	movs	r1, r5
    7946:	3e1f      	subs	r6, #31
    7948:	40f1      	lsrs	r1, r6
    794a:	2b20      	cmp	r3, #32
    794c:	d100      	bne.n	7950 <__aeabi_dadd+0x2dc>
    794e:	e08d      	b.n	7a6c <__aeabi_dadd+0x3f8>
    7950:	2240      	movs	r2, #64	; 0x40
    7952:	1ad3      	subs	r3, r2, r3
    7954:	409d      	lsls	r5, r3
    7956:	432f      	orrs	r7, r5
    7958:	1e7d      	subs	r5, r7, #1
    795a:	41af      	sbcs	r7, r5
    795c:	2400      	movs	r4, #0
    795e:	430f      	orrs	r7, r1
    7960:	2600      	movs	r6, #0
    7962:	e744      	b.n	77ee <__aeabi_dadd+0x17a>
    7964:	002b      	movs	r3, r5
    7966:	0008      	movs	r0, r1
    7968:	3b20      	subs	r3, #32
    796a:	40d8      	lsrs	r0, r3
    796c:	0003      	movs	r3, r0
    796e:	2d20      	cmp	r5, #32
    7970:	d100      	bne.n	7974 <__aeabi_dadd+0x300>
    7972:	e07d      	b.n	7a70 <__aeabi_dadd+0x3fc>
    7974:	2040      	movs	r0, #64	; 0x40
    7976:	1b45      	subs	r5, r0, r5
    7978:	40a9      	lsls	r1, r5
    797a:	430a      	orrs	r2, r1
    797c:	1e51      	subs	r1, r2, #1
    797e:	418a      	sbcs	r2, r1
    7980:	2100      	movs	r1, #0
    7982:	431a      	orrs	r2, r3
    7984:	e6c7      	b.n	7716 <__aeabi_dadd+0xa2>
    7986:	2e00      	cmp	r6, #0
    7988:	d050      	beq.n	7a2c <__aeabi_dadd+0x3b8>
    798a:	4e1a      	ldr	r6, [pc, #104]	; (79f4 <__aeabi_dadd+0x380>)
    798c:	42b0      	cmp	r0, r6
    798e:	d057      	beq.n	7a40 <__aeabi_dadd+0x3cc>
    7990:	2680      	movs	r6, #128	; 0x80
    7992:	426b      	negs	r3, r5
    7994:	4699      	mov	r9, r3
    7996:	0436      	lsls	r6, r6, #16
    7998:	4334      	orrs	r4, r6
    799a:	464b      	mov	r3, r9
    799c:	2b38      	cmp	r3, #56	; 0x38
    799e:	dd00      	ble.n	79a2 <__aeabi_dadd+0x32e>
    79a0:	e0d6      	b.n	7b50 <__aeabi_dadd+0x4dc>
    79a2:	2b1f      	cmp	r3, #31
    79a4:	dd00      	ble.n	79a8 <__aeabi_dadd+0x334>
    79a6:	e135      	b.n	7c14 <__aeabi_dadd+0x5a0>
    79a8:	2620      	movs	r6, #32
    79aa:	1af5      	subs	r5, r6, r3
    79ac:	0026      	movs	r6, r4
    79ae:	40ae      	lsls	r6, r5
    79b0:	46b2      	mov	sl, r6
    79b2:	003e      	movs	r6, r7
    79b4:	40de      	lsrs	r6, r3
    79b6:	46ac      	mov	ip, r5
    79b8:	0035      	movs	r5, r6
    79ba:	4656      	mov	r6, sl
    79bc:	432e      	orrs	r6, r5
    79be:	4665      	mov	r5, ip
    79c0:	40af      	lsls	r7, r5
    79c2:	1e7d      	subs	r5, r7, #1
    79c4:	41af      	sbcs	r7, r5
    79c6:	40dc      	lsrs	r4, r3
    79c8:	4337      	orrs	r7, r6
    79ca:	1bd7      	subs	r7, r2, r7
    79cc:	42ba      	cmp	r2, r7
    79ce:	4192      	sbcs	r2, r2
    79d0:	1b0c      	subs	r4, r1, r4
    79d2:	4252      	negs	r2, r2
    79d4:	1aa4      	subs	r4, r4, r2
    79d6:	0006      	movs	r6, r0
    79d8:	46d8      	mov	r8, fp
    79da:	e6a3      	b.n	7724 <__aeabi_dadd+0xb0>
    79dc:	4664      	mov	r4, ip
    79de:	4667      	mov	r7, ip
    79e0:	432c      	orrs	r4, r5
    79e2:	d000      	beq.n	79e6 <__aeabi_dadd+0x372>
    79e4:	e6a2      	b.n	772c <__aeabi_dadd+0xb8>
    79e6:	2500      	movs	r5, #0
    79e8:	2600      	movs	r6, #0
    79ea:	2700      	movs	r7, #0
    79ec:	e706      	b.n	77fc <__aeabi_dadd+0x188>
    79ee:	001e      	movs	r6, r3
    79f0:	e6c4      	b.n	777c <__aeabi_dadd+0x108>
    79f2:	46c0      	nop			; (mov r8, r8)
    79f4:	000007ff 	.word	0x000007ff
    79f8:	ff7fffff 	.word	0xff7fffff
    79fc:	800fffff 	.word	0x800fffff
    7a00:	2b1f      	cmp	r3, #31
    7a02:	dc63      	bgt.n	7acc <__aeabi_dadd+0x458>
    7a04:	2020      	movs	r0, #32
    7a06:	1ac3      	subs	r3, r0, r3
    7a08:	0008      	movs	r0, r1
    7a0a:	4098      	lsls	r0, r3
    7a0c:	469c      	mov	ip, r3
    7a0e:	4683      	mov	fp, r0
    7a10:	4653      	mov	r3, sl
    7a12:	0010      	movs	r0, r2
    7a14:	40d8      	lsrs	r0, r3
    7a16:	0003      	movs	r3, r0
    7a18:	4658      	mov	r0, fp
    7a1a:	4318      	orrs	r0, r3
    7a1c:	4663      	mov	r3, ip
    7a1e:	409a      	lsls	r2, r3
    7a20:	1e53      	subs	r3, r2, #1
    7a22:	419a      	sbcs	r2, r3
    7a24:	4653      	mov	r3, sl
    7a26:	4302      	orrs	r2, r0
    7a28:	40d9      	lsrs	r1, r3
    7a2a:	e703      	b.n	7834 <__aeabi_dadd+0x1c0>
    7a2c:	0026      	movs	r6, r4
    7a2e:	433e      	orrs	r6, r7
    7a30:	d006      	beq.n	7a40 <__aeabi_dadd+0x3cc>
    7a32:	43eb      	mvns	r3, r5
    7a34:	4699      	mov	r9, r3
    7a36:	2b00      	cmp	r3, #0
    7a38:	d0c7      	beq.n	79ca <__aeabi_dadd+0x356>
    7a3a:	4e94      	ldr	r6, [pc, #592]	; (7c8c <__aeabi_dadd+0x618>)
    7a3c:	42b0      	cmp	r0, r6
    7a3e:	d1ac      	bne.n	799a <__aeabi_dadd+0x326>
    7a40:	000c      	movs	r4, r1
    7a42:	0017      	movs	r7, r2
    7a44:	0006      	movs	r6, r0
    7a46:	46d8      	mov	r8, fp
    7a48:	e698      	b.n	777c <__aeabi_dadd+0x108>
    7a4a:	4b90      	ldr	r3, [pc, #576]	; (7c8c <__aeabi_dadd+0x618>)
    7a4c:	459a      	cmp	sl, r3
    7a4e:	d00b      	beq.n	7a68 <__aeabi_dadd+0x3f4>
    7a50:	4682      	mov	sl, r0
    7a52:	e6e7      	b.n	7824 <__aeabi_dadd+0x1b0>
    7a54:	2800      	cmp	r0, #0
    7a56:	d000      	beq.n	7a5a <__aeabi_dadd+0x3e6>
    7a58:	e09e      	b.n	7b98 <__aeabi_dadd+0x524>
    7a5a:	0018      	movs	r0, r3
    7a5c:	4310      	orrs	r0, r2
    7a5e:	d100      	bne.n	7a62 <__aeabi_dadd+0x3ee>
    7a60:	e0e9      	b.n	7c36 <__aeabi_dadd+0x5c2>
    7a62:	001c      	movs	r4, r3
    7a64:	0017      	movs	r7, r2
    7a66:	46d8      	mov	r8, fp
    7a68:	4e88      	ldr	r6, [pc, #544]	; (7c8c <__aeabi_dadd+0x618>)
    7a6a:	e687      	b.n	777c <__aeabi_dadd+0x108>
    7a6c:	2500      	movs	r5, #0
    7a6e:	e772      	b.n	7956 <__aeabi_dadd+0x2e2>
    7a70:	2100      	movs	r1, #0
    7a72:	e782      	b.n	797a <__aeabi_dadd+0x306>
    7a74:	0023      	movs	r3, r4
    7a76:	433b      	orrs	r3, r7
    7a78:	2e00      	cmp	r6, #0
    7a7a:	d000      	beq.n	7a7e <__aeabi_dadd+0x40a>
    7a7c:	e0ab      	b.n	7bd6 <__aeabi_dadd+0x562>
    7a7e:	2b00      	cmp	r3, #0
    7a80:	d100      	bne.n	7a84 <__aeabi_dadd+0x410>
    7a82:	e0e7      	b.n	7c54 <__aeabi_dadd+0x5e0>
    7a84:	000b      	movs	r3, r1
    7a86:	4313      	orrs	r3, r2
    7a88:	d100      	bne.n	7a8c <__aeabi_dadd+0x418>
    7a8a:	e677      	b.n	777c <__aeabi_dadd+0x108>
    7a8c:	18ba      	adds	r2, r7, r2
    7a8e:	42ba      	cmp	r2, r7
    7a90:	41bf      	sbcs	r7, r7
    7a92:	1864      	adds	r4, r4, r1
    7a94:	427f      	negs	r7, r7
    7a96:	19e4      	adds	r4, r4, r7
    7a98:	0223      	lsls	r3, r4, #8
    7a9a:	d400      	bmi.n	7a9e <__aeabi_dadd+0x42a>
    7a9c:	e0f2      	b.n	7c84 <__aeabi_dadd+0x610>
    7a9e:	4b7c      	ldr	r3, [pc, #496]	; (7c90 <__aeabi_dadd+0x61c>)
    7aa0:	0017      	movs	r7, r2
    7aa2:	401c      	ands	r4, r3
    7aa4:	0006      	movs	r6, r0
    7aa6:	e669      	b.n	777c <__aeabi_dadd+0x108>
    7aa8:	0020      	movs	r0, r4
    7aaa:	4338      	orrs	r0, r7
    7aac:	2e00      	cmp	r6, #0
    7aae:	d1d1      	bne.n	7a54 <__aeabi_dadd+0x3e0>
    7ab0:	2800      	cmp	r0, #0
    7ab2:	d15b      	bne.n	7b6c <__aeabi_dadd+0x4f8>
    7ab4:	001c      	movs	r4, r3
    7ab6:	4314      	orrs	r4, r2
    7ab8:	d100      	bne.n	7abc <__aeabi_dadd+0x448>
    7aba:	e0a8      	b.n	7c0e <__aeabi_dadd+0x59a>
    7abc:	001c      	movs	r4, r3
    7abe:	0017      	movs	r7, r2
    7ac0:	46d8      	mov	r8, fp
    7ac2:	e65b      	b.n	777c <__aeabi_dadd+0x108>
    7ac4:	0006      	movs	r6, r0
    7ac6:	2400      	movs	r4, #0
    7ac8:	2700      	movs	r7, #0
    7aca:	e697      	b.n	77fc <__aeabi_dadd+0x188>
    7acc:	4650      	mov	r0, sl
    7ace:	000b      	movs	r3, r1
    7ad0:	3820      	subs	r0, #32
    7ad2:	40c3      	lsrs	r3, r0
    7ad4:	4699      	mov	r9, r3
    7ad6:	4653      	mov	r3, sl
    7ad8:	2b20      	cmp	r3, #32
    7ada:	d100      	bne.n	7ade <__aeabi_dadd+0x46a>
    7adc:	e095      	b.n	7c0a <__aeabi_dadd+0x596>
    7ade:	2340      	movs	r3, #64	; 0x40
    7ae0:	4650      	mov	r0, sl
    7ae2:	1a1b      	subs	r3, r3, r0
    7ae4:	4099      	lsls	r1, r3
    7ae6:	430a      	orrs	r2, r1
    7ae8:	1e51      	subs	r1, r2, #1
    7aea:	418a      	sbcs	r2, r1
    7aec:	464b      	mov	r3, r9
    7aee:	2100      	movs	r1, #0
    7af0:	431a      	orrs	r2, r3
    7af2:	e69f      	b.n	7834 <__aeabi_dadd+0x1c0>
    7af4:	2e00      	cmp	r6, #0
    7af6:	d130      	bne.n	7b5a <__aeabi_dadd+0x4e6>
    7af8:	0026      	movs	r6, r4
    7afa:	433e      	orrs	r6, r7
    7afc:	d067      	beq.n	7bce <__aeabi_dadd+0x55a>
    7afe:	43db      	mvns	r3, r3
    7b00:	469a      	mov	sl, r3
    7b02:	2b00      	cmp	r3, #0
    7b04:	d01c      	beq.n	7b40 <__aeabi_dadd+0x4cc>
    7b06:	4e61      	ldr	r6, [pc, #388]	; (7c8c <__aeabi_dadd+0x618>)
    7b08:	42b0      	cmp	r0, r6
    7b0a:	d060      	beq.n	7bce <__aeabi_dadd+0x55a>
    7b0c:	4653      	mov	r3, sl
    7b0e:	2b38      	cmp	r3, #56	; 0x38
    7b10:	dd00      	ble.n	7b14 <__aeabi_dadd+0x4a0>
    7b12:	e096      	b.n	7c42 <__aeabi_dadd+0x5ce>
    7b14:	2b1f      	cmp	r3, #31
    7b16:	dd00      	ble.n	7b1a <__aeabi_dadd+0x4a6>
    7b18:	e09f      	b.n	7c5a <__aeabi_dadd+0x5e6>
    7b1a:	2620      	movs	r6, #32
    7b1c:	1af3      	subs	r3, r6, r3
    7b1e:	0026      	movs	r6, r4
    7b20:	409e      	lsls	r6, r3
    7b22:	469c      	mov	ip, r3
    7b24:	46b3      	mov	fp, r6
    7b26:	4653      	mov	r3, sl
    7b28:	003e      	movs	r6, r7
    7b2a:	40de      	lsrs	r6, r3
    7b2c:	0033      	movs	r3, r6
    7b2e:	465e      	mov	r6, fp
    7b30:	431e      	orrs	r6, r3
    7b32:	4663      	mov	r3, ip
    7b34:	409f      	lsls	r7, r3
    7b36:	1e7b      	subs	r3, r7, #1
    7b38:	419f      	sbcs	r7, r3
    7b3a:	4653      	mov	r3, sl
    7b3c:	40dc      	lsrs	r4, r3
    7b3e:	4337      	orrs	r7, r6
    7b40:	18bf      	adds	r7, r7, r2
    7b42:	4297      	cmp	r7, r2
    7b44:	4192      	sbcs	r2, r2
    7b46:	1864      	adds	r4, r4, r1
    7b48:	4252      	negs	r2, r2
    7b4a:	18a4      	adds	r4, r4, r2
    7b4c:	0006      	movs	r6, r0
    7b4e:	e678      	b.n	7842 <__aeabi_dadd+0x1ce>
    7b50:	4327      	orrs	r7, r4
    7b52:	1e7c      	subs	r4, r7, #1
    7b54:	41a7      	sbcs	r7, r4
    7b56:	2400      	movs	r4, #0
    7b58:	e737      	b.n	79ca <__aeabi_dadd+0x356>
    7b5a:	4e4c      	ldr	r6, [pc, #304]	; (7c8c <__aeabi_dadd+0x618>)
    7b5c:	42b0      	cmp	r0, r6
    7b5e:	d036      	beq.n	7bce <__aeabi_dadd+0x55a>
    7b60:	2680      	movs	r6, #128	; 0x80
    7b62:	425b      	negs	r3, r3
    7b64:	0436      	lsls	r6, r6, #16
    7b66:	469a      	mov	sl, r3
    7b68:	4334      	orrs	r4, r6
    7b6a:	e7cf      	b.n	7b0c <__aeabi_dadd+0x498>
    7b6c:	0018      	movs	r0, r3
    7b6e:	4310      	orrs	r0, r2
    7b70:	d100      	bne.n	7b74 <__aeabi_dadd+0x500>
    7b72:	e603      	b.n	777c <__aeabi_dadd+0x108>
    7b74:	1ab8      	subs	r0, r7, r2
    7b76:	4684      	mov	ip, r0
    7b78:	4567      	cmp	r7, ip
    7b7a:	41ad      	sbcs	r5, r5
    7b7c:	1ae0      	subs	r0, r4, r3
    7b7e:	426d      	negs	r5, r5
    7b80:	1b40      	subs	r0, r0, r5
    7b82:	0205      	lsls	r5, r0, #8
    7b84:	d400      	bmi.n	7b88 <__aeabi_dadd+0x514>
    7b86:	e62c      	b.n	77e2 <__aeabi_dadd+0x16e>
    7b88:	1bd7      	subs	r7, r2, r7
    7b8a:	42ba      	cmp	r2, r7
    7b8c:	4192      	sbcs	r2, r2
    7b8e:	1b1c      	subs	r4, r3, r4
    7b90:	4252      	negs	r2, r2
    7b92:	1aa4      	subs	r4, r4, r2
    7b94:	46d8      	mov	r8, fp
    7b96:	e5f1      	b.n	777c <__aeabi_dadd+0x108>
    7b98:	0018      	movs	r0, r3
    7b9a:	4310      	orrs	r0, r2
    7b9c:	d100      	bne.n	7ba0 <__aeabi_dadd+0x52c>
    7b9e:	e763      	b.n	7a68 <__aeabi_dadd+0x3f4>
    7ba0:	08f8      	lsrs	r0, r7, #3
    7ba2:	0767      	lsls	r7, r4, #29
    7ba4:	4307      	orrs	r7, r0
    7ba6:	2080      	movs	r0, #128	; 0x80
    7ba8:	08e4      	lsrs	r4, r4, #3
    7baa:	0300      	lsls	r0, r0, #12
    7bac:	4204      	tst	r4, r0
    7bae:	d008      	beq.n	7bc2 <__aeabi_dadd+0x54e>
    7bb0:	08dd      	lsrs	r5, r3, #3
    7bb2:	4205      	tst	r5, r0
    7bb4:	d105      	bne.n	7bc2 <__aeabi_dadd+0x54e>
    7bb6:	08d2      	lsrs	r2, r2, #3
    7bb8:	0759      	lsls	r1, r3, #29
    7bba:	4311      	orrs	r1, r2
    7bbc:	000f      	movs	r7, r1
    7bbe:	002c      	movs	r4, r5
    7bc0:	46d8      	mov	r8, fp
    7bc2:	0f7b      	lsrs	r3, r7, #29
    7bc4:	00e4      	lsls	r4, r4, #3
    7bc6:	431c      	orrs	r4, r3
    7bc8:	00ff      	lsls	r7, r7, #3
    7bca:	4e30      	ldr	r6, [pc, #192]	; (7c8c <__aeabi_dadd+0x618>)
    7bcc:	e5d6      	b.n	777c <__aeabi_dadd+0x108>
    7bce:	000c      	movs	r4, r1
    7bd0:	0017      	movs	r7, r2
    7bd2:	0006      	movs	r6, r0
    7bd4:	e5d2      	b.n	777c <__aeabi_dadd+0x108>
    7bd6:	2b00      	cmp	r3, #0
    7bd8:	d038      	beq.n	7c4c <__aeabi_dadd+0x5d8>
    7bda:	000b      	movs	r3, r1
    7bdc:	4313      	orrs	r3, r2
    7bde:	d100      	bne.n	7be2 <__aeabi_dadd+0x56e>
    7be0:	e742      	b.n	7a68 <__aeabi_dadd+0x3f4>
    7be2:	08f8      	lsrs	r0, r7, #3
    7be4:	0767      	lsls	r7, r4, #29
    7be6:	4307      	orrs	r7, r0
    7be8:	2080      	movs	r0, #128	; 0x80
    7bea:	08e4      	lsrs	r4, r4, #3
    7bec:	0300      	lsls	r0, r0, #12
    7bee:	4204      	tst	r4, r0
    7bf0:	d0e7      	beq.n	7bc2 <__aeabi_dadd+0x54e>
    7bf2:	08cb      	lsrs	r3, r1, #3
    7bf4:	4203      	tst	r3, r0
    7bf6:	d1e4      	bne.n	7bc2 <__aeabi_dadd+0x54e>
    7bf8:	08d2      	lsrs	r2, r2, #3
    7bfa:	0749      	lsls	r1, r1, #29
    7bfc:	4311      	orrs	r1, r2
    7bfe:	000f      	movs	r7, r1
    7c00:	001c      	movs	r4, r3
    7c02:	e7de      	b.n	7bc2 <__aeabi_dadd+0x54e>
    7c04:	2700      	movs	r7, #0
    7c06:	2400      	movs	r4, #0
    7c08:	e5d5      	b.n	77b6 <__aeabi_dadd+0x142>
    7c0a:	2100      	movs	r1, #0
    7c0c:	e76b      	b.n	7ae6 <__aeabi_dadd+0x472>
    7c0e:	2500      	movs	r5, #0
    7c10:	2700      	movs	r7, #0
    7c12:	e5f3      	b.n	77fc <__aeabi_dadd+0x188>
    7c14:	464e      	mov	r6, r9
    7c16:	0025      	movs	r5, r4
    7c18:	3e20      	subs	r6, #32
    7c1a:	40f5      	lsrs	r5, r6
    7c1c:	464b      	mov	r3, r9
    7c1e:	002e      	movs	r6, r5
    7c20:	2b20      	cmp	r3, #32
    7c22:	d02d      	beq.n	7c80 <__aeabi_dadd+0x60c>
    7c24:	2540      	movs	r5, #64	; 0x40
    7c26:	1aed      	subs	r5, r5, r3
    7c28:	40ac      	lsls	r4, r5
    7c2a:	4327      	orrs	r7, r4
    7c2c:	1e7c      	subs	r4, r7, #1
    7c2e:	41a7      	sbcs	r7, r4
    7c30:	2400      	movs	r4, #0
    7c32:	4337      	orrs	r7, r6
    7c34:	e6c9      	b.n	79ca <__aeabi_dadd+0x356>
    7c36:	2480      	movs	r4, #128	; 0x80
    7c38:	2500      	movs	r5, #0
    7c3a:	0324      	lsls	r4, r4, #12
    7c3c:	4e13      	ldr	r6, [pc, #76]	; (7c8c <__aeabi_dadd+0x618>)
    7c3e:	2700      	movs	r7, #0
    7c40:	e5dc      	b.n	77fc <__aeabi_dadd+0x188>
    7c42:	4327      	orrs	r7, r4
    7c44:	1e7c      	subs	r4, r7, #1
    7c46:	41a7      	sbcs	r7, r4
    7c48:	2400      	movs	r4, #0
    7c4a:	e779      	b.n	7b40 <__aeabi_dadd+0x4cc>
    7c4c:	000c      	movs	r4, r1
    7c4e:	0017      	movs	r7, r2
    7c50:	4e0e      	ldr	r6, [pc, #56]	; (7c8c <__aeabi_dadd+0x618>)
    7c52:	e593      	b.n	777c <__aeabi_dadd+0x108>
    7c54:	000c      	movs	r4, r1
    7c56:	0017      	movs	r7, r2
    7c58:	e590      	b.n	777c <__aeabi_dadd+0x108>
    7c5a:	4656      	mov	r6, sl
    7c5c:	0023      	movs	r3, r4
    7c5e:	3e20      	subs	r6, #32
    7c60:	40f3      	lsrs	r3, r6
    7c62:	4699      	mov	r9, r3
    7c64:	4653      	mov	r3, sl
    7c66:	2b20      	cmp	r3, #32
    7c68:	d00e      	beq.n	7c88 <__aeabi_dadd+0x614>
    7c6a:	2340      	movs	r3, #64	; 0x40
    7c6c:	4656      	mov	r6, sl
    7c6e:	1b9b      	subs	r3, r3, r6
    7c70:	409c      	lsls	r4, r3
    7c72:	4327      	orrs	r7, r4
    7c74:	1e7c      	subs	r4, r7, #1
    7c76:	41a7      	sbcs	r7, r4
    7c78:	464b      	mov	r3, r9
    7c7a:	2400      	movs	r4, #0
    7c7c:	431f      	orrs	r7, r3
    7c7e:	e75f      	b.n	7b40 <__aeabi_dadd+0x4cc>
    7c80:	2400      	movs	r4, #0
    7c82:	e7d2      	b.n	7c2a <__aeabi_dadd+0x5b6>
    7c84:	0017      	movs	r7, r2
    7c86:	e5b2      	b.n	77ee <__aeabi_dadd+0x17a>
    7c88:	2400      	movs	r4, #0
    7c8a:	e7f2      	b.n	7c72 <__aeabi_dadd+0x5fe>
    7c8c:	000007ff 	.word	0x000007ff
    7c90:	ff7fffff 	.word	0xff7fffff

00007c94 <__aeabi_ddiv>:
    7c94:	b5f0      	push	{r4, r5, r6, r7, lr}
    7c96:	4657      	mov	r7, sl
    7c98:	4645      	mov	r5, r8
    7c9a:	46de      	mov	lr, fp
    7c9c:	464e      	mov	r6, r9
    7c9e:	b5e0      	push	{r5, r6, r7, lr}
    7ca0:	004c      	lsls	r4, r1, #1
    7ca2:	030e      	lsls	r6, r1, #12
    7ca4:	b087      	sub	sp, #28
    7ca6:	4683      	mov	fp, r0
    7ca8:	4692      	mov	sl, r2
    7caa:	001d      	movs	r5, r3
    7cac:	4680      	mov	r8, r0
    7cae:	0b36      	lsrs	r6, r6, #12
    7cb0:	0d64      	lsrs	r4, r4, #21
    7cb2:	0fcf      	lsrs	r7, r1, #31
    7cb4:	2c00      	cmp	r4, #0
    7cb6:	d04f      	beq.n	7d58 <__aeabi_ddiv+0xc4>
    7cb8:	4b6f      	ldr	r3, [pc, #444]	; (7e78 <__aeabi_ddiv+0x1e4>)
    7cba:	429c      	cmp	r4, r3
    7cbc:	d035      	beq.n	7d2a <__aeabi_ddiv+0x96>
    7cbe:	2380      	movs	r3, #128	; 0x80
    7cc0:	0f42      	lsrs	r2, r0, #29
    7cc2:	041b      	lsls	r3, r3, #16
    7cc4:	00f6      	lsls	r6, r6, #3
    7cc6:	4313      	orrs	r3, r2
    7cc8:	4333      	orrs	r3, r6
    7cca:	4699      	mov	r9, r3
    7ccc:	00c3      	lsls	r3, r0, #3
    7cce:	4698      	mov	r8, r3
    7cd0:	4b6a      	ldr	r3, [pc, #424]	; (7e7c <__aeabi_ddiv+0x1e8>)
    7cd2:	2600      	movs	r6, #0
    7cd4:	469c      	mov	ip, r3
    7cd6:	2300      	movs	r3, #0
    7cd8:	4464      	add	r4, ip
    7cda:	9303      	str	r3, [sp, #12]
    7cdc:	032b      	lsls	r3, r5, #12
    7cde:	0b1b      	lsrs	r3, r3, #12
    7ce0:	469b      	mov	fp, r3
    7ce2:	006b      	lsls	r3, r5, #1
    7ce4:	0fed      	lsrs	r5, r5, #31
    7ce6:	4650      	mov	r0, sl
    7ce8:	0d5b      	lsrs	r3, r3, #21
    7cea:	9501      	str	r5, [sp, #4]
    7cec:	d05e      	beq.n	7dac <__aeabi_ddiv+0x118>
    7cee:	4a62      	ldr	r2, [pc, #392]	; (7e78 <__aeabi_ddiv+0x1e4>)
    7cf0:	4293      	cmp	r3, r2
    7cf2:	d053      	beq.n	7d9c <__aeabi_ddiv+0x108>
    7cf4:	465a      	mov	r2, fp
    7cf6:	00d1      	lsls	r1, r2, #3
    7cf8:	2280      	movs	r2, #128	; 0x80
    7cfa:	0f40      	lsrs	r0, r0, #29
    7cfc:	0412      	lsls	r2, r2, #16
    7cfe:	4302      	orrs	r2, r0
    7d00:	430a      	orrs	r2, r1
    7d02:	4693      	mov	fp, r2
    7d04:	4652      	mov	r2, sl
    7d06:	00d1      	lsls	r1, r2, #3
    7d08:	4a5c      	ldr	r2, [pc, #368]	; (7e7c <__aeabi_ddiv+0x1e8>)
    7d0a:	4694      	mov	ip, r2
    7d0c:	2200      	movs	r2, #0
    7d0e:	4463      	add	r3, ip
    7d10:	0038      	movs	r0, r7
    7d12:	4068      	eors	r0, r5
    7d14:	4684      	mov	ip, r0
    7d16:	9002      	str	r0, [sp, #8]
    7d18:	1ae4      	subs	r4, r4, r3
    7d1a:	4316      	orrs	r6, r2
    7d1c:	2e0f      	cmp	r6, #15
    7d1e:	d900      	bls.n	7d22 <__aeabi_ddiv+0x8e>
    7d20:	e0b4      	b.n	7e8c <__aeabi_ddiv+0x1f8>
    7d22:	4b57      	ldr	r3, [pc, #348]	; (7e80 <__aeabi_ddiv+0x1ec>)
    7d24:	00b6      	lsls	r6, r6, #2
    7d26:	599b      	ldr	r3, [r3, r6]
    7d28:	469f      	mov	pc, r3
    7d2a:	0003      	movs	r3, r0
    7d2c:	4333      	orrs	r3, r6
    7d2e:	4699      	mov	r9, r3
    7d30:	d16c      	bne.n	7e0c <__aeabi_ddiv+0x178>
    7d32:	2300      	movs	r3, #0
    7d34:	4698      	mov	r8, r3
    7d36:	3302      	adds	r3, #2
    7d38:	2608      	movs	r6, #8
    7d3a:	9303      	str	r3, [sp, #12]
    7d3c:	e7ce      	b.n	7cdc <__aeabi_ddiv+0x48>
    7d3e:	46cb      	mov	fp, r9
    7d40:	4641      	mov	r1, r8
    7d42:	9a03      	ldr	r2, [sp, #12]
    7d44:	9701      	str	r7, [sp, #4]
    7d46:	2a02      	cmp	r2, #2
    7d48:	d165      	bne.n	7e16 <__aeabi_ddiv+0x182>
    7d4a:	9b01      	ldr	r3, [sp, #4]
    7d4c:	4c4a      	ldr	r4, [pc, #296]	; (7e78 <__aeabi_ddiv+0x1e4>)
    7d4e:	469c      	mov	ip, r3
    7d50:	2300      	movs	r3, #0
    7d52:	2200      	movs	r2, #0
    7d54:	4698      	mov	r8, r3
    7d56:	e06b      	b.n	7e30 <__aeabi_ddiv+0x19c>
    7d58:	0003      	movs	r3, r0
    7d5a:	4333      	orrs	r3, r6
    7d5c:	4699      	mov	r9, r3
    7d5e:	d04e      	beq.n	7dfe <__aeabi_ddiv+0x16a>
    7d60:	2e00      	cmp	r6, #0
    7d62:	d100      	bne.n	7d66 <__aeabi_ddiv+0xd2>
    7d64:	e1bc      	b.n	80e0 <__aeabi_ddiv+0x44c>
    7d66:	0030      	movs	r0, r6
    7d68:	f001 f9ea 	bl	9140 <__clzsi2>
    7d6c:	0003      	movs	r3, r0
    7d6e:	3b0b      	subs	r3, #11
    7d70:	2b1c      	cmp	r3, #28
    7d72:	dd00      	ble.n	7d76 <__aeabi_ddiv+0xe2>
    7d74:	e1ac      	b.n	80d0 <__aeabi_ddiv+0x43c>
    7d76:	221d      	movs	r2, #29
    7d78:	1ad3      	subs	r3, r2, r3
    7d7a:	465a      	mov	r2, fp
    7d7c:	0001      	movs	r1, r0
    7d7e:	40da      	lsrs	r2, r3
    7d80:	3908      	subs	r1, #8
    7d82:	408e      	lsls	r6, r1
    7d84:	0013      	movs	r3, r2
    7d86:	4333      	orrs	r3, r6
    7d88:	4699      	mov	r9, r3
    7d8a:	465b      	mov	r3, fp
    7d8c:	408b      	lsls	r3, r1
    7d8e:	4698      	mov	r8, r3
    7d90:	2300      	movs	r3, #0
    7d92:	4c3c      	ldr	r4, [pc, #240]	; (7e84 <__aeabi_ddiv+0x1f0>)
    7d94:	2600      	movs	r6, #0
    7d96:	1a24      	subs	r4, r4, r0
    7d98:	9303      	str	r3, [sp, #12]
    7d9a:	e79f      	b.n	7cdc <__aeabi_ddiv+0x48>
    7d9c:	4651      	mov	r1, sl
    7d9e:	465a      	mov	r2, fp
    7da0:	4311      	orrs	r1, r2
    7da2:	d129      	bne.n	7df8 <__aeabi_ddiv+0x164>
    7da4:	2200      	movs	r2, #0
    7da6:	4693      	mov	fp, r2
    7da8:	3202      	adds	r2, #2
    7daa:	e7b1      	b.n	7d10 <__aeabi_ddiv+0x7c>
    7dac:	4659      	mov	r1, fp
    7dae:	4301      	orrs	r1, r0
    7db0:	d01e      	beq.n	7df0 <__aeabi_ddiv+0x15c>
    7db2:	465b      	mov	r3, fp
    7db4:	2b00      	cmp	r3, #0
    7db6:	d100      	bne.n	7dba <__aeabi_ddiv+0x126>
    7db8:	e19e      	b.n	80f8 <__aeabi_ddiv+0x464>
    7dba:	4658      	mov	r0, fp
    7dbc:	f001 f9c0 	bl	9140 <__clzsi2>
    7dc0:	0003      	movs	r3, r0
    7dc2:	3b0b      	subs	r3, #11
    7dc4:	2b1c      	cmp	r3, #28
    7dc6:	dd00      	ble.n	7dca <__aeabi_ddiv+0x136>
    7dc8:	e18f      	b.n	80ea <__aeabi_ddiv+0x456>
    7dca:	0002      	movs	r2, r0
    7dcc:	4659      	mov	r1, fp
    7dce:	3a08      	subs	r2, #8
    7dd0:	4091      	lsls	r1, r2
    7dd2:	468b      	mov	fp, r1
    7dd4:	211d      	movs	r1, #29
    7dd6:	1acb      	subs	r3, r1, r3
    7dd8:	4651      	mov	r1, sl
    7dda:	40d9      	lsrs	r1, r3
    7ddc:	000b      	movs	r3, r1
    7dde:	4659      	mov	r1, fp
    7de0:	430b      	orrs	r3, r1
    7de2:	4651      	mov	r1, sl
    7de4:	469b      	mov	fp, r3
    7de6:	4091      	lsls	r1, r2
    7de8:	4b26      	ldr	r3, [pc, #152]	; (7e84 <__aeabi_ddiv+0x1f0>)
    7dea:	2200      	movs	r2, #0
    7dec:	1a1b      	subs	r3, r3, r0
    7dee:	e78f      	b.n	7d10 <__aeabi_ddiv+0x7c>
    7df0:	2300      	movs	r3, #0
    7df2:	2201      	movs	r2, #1
    7df4:	469b      	mov	fp, r3
    7df6:	e78b      	b.n	7d10 <__aeabi_ddiv+0x7c>
    7df8:	4651      	mov	r1, sl
    7dfa:	2203      	movs	r2, #3
    7dfc:	e788      	b.n	7d10 <__aeabi_ddiv+0x7c>
    7dfe:	2300      	movs	r3, #0
    7e00:	4698      	mov	r8, r3
    7e02:	3301      	adds	r3, #1
    7e04:	2604      	movs	r6, #4
    7e06:	2400      	movs	r4, #0
    7e08:	9303      	str	r3, [sp, #12]
    7e0a:	e767      	b.n	7cdc <__aeabi_ddiv+0x48>
    7e0c:	2303      	movs	r3, #3
    7e0e:	46b1      	mov	r9, r6
    7e10:	9303      	str	r3, [sp, #12]
    7e12:	260c      	movs	r6, #12
    7e14:	e762      	b.n	7cdc <__aeabi_ddiv+0x48>
    7e16:	2a03      	cmp	r2, #3
    7e18:	d100      	bne.n	7e1c <__aeabi_ddiv+0x188>
    7e1a:	e25c      	b.n	82d6 <__aeabi_ddiv+0x642>
    7e1c:	9b01      	ldr	r3, [sp, #4]
    7e1e:	2a01      	cmp	r2, #1
    7e20:	d000      	beq.n	7e24 <__aeabi_ddiv+0x190>
    7e22:	e1e4      	b.n	81ee <__aeabi_ddiv+0x55a>
    7e24:	4013      	ands	r3, r2
    7e26:	469c      	mov	ip, r3
    7e28:	2300      	movs	r3, #0
    7e2a:	2400      	movs	r4, #0
    7e2c:	2200      	movs	r2, #0
    7e2e:	4698      	mov	r8, r3
    7e30:	2100      	movs	r1, #0
    7e32:	0312      	lsls	r2, r2, #12
    7e34:	0b13      	lsrs	r3, r2, #12
    7e36:	0d0a      	lsrs	r2, r1, #20
    7e38:	0512      	lsls	r2, r2, #20
    7e3a:	431a      	orrs	r2, r3
    7e3c:	0523      	lsls	r3, r4, #20
    7e3e:	4c12      	ldr	r4, [pc, #72]	; (7e88 <__aeabi_ddiv+0x1f4>)
    7e40:	4640      	mov	r0, r8
    7e42:	4022      	ands	r2, r4
    7e44:	4313      	orrs	r3, r2
    7e46:	4662      	mov	r2, ip
    7e48:	005b      	lsls	r3, r3, #1
    7e4a:	07d2      	lsls	r2, r2, #31
    7e4c:	085b      	lsrs	r3, r3, #1
    7e4e:	4313      	orrs	r3, r2
    7e50:	0019      	movs	r1, r3
    7e52:	b007      	add	sp, #28
    7e54:	bc3c      	pop	{r2, r3, r4, r5}
    7e56:	4690      	mov	r8, r2
    7e58:	4699      	mov	r9, r3
    7e5a:	46a2      	mov	sl, r4
    7e5c:	46ab      	mov	fp, r5
    7e5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7e60:	2300      	movs	r3, #0
    7e62:	2280      	movs	r2, #128	; 0x80
    7e64:	469c      	mov	ip, r3
    7e66:	0312      	lsls	r2, r2, #12
    7e68:	4698      	mov	r8, r3
    7e6a:	4c03      	ldr	r4, [pc, #12]	; (7e78 <__aeabi_ddiv+0x1e4>)
    7e6c:	e7e0      	b.n	7e30 <__aeabi_ddiv+0x19c>
    7e6e:	2300      	movs	r3, #0
    7e70:	4c01      	ldr	r4, [pc, #4]	; (7e78 <__aeabi_ddiv+0x1e4>)
    7e72:	2200      	movs	r2, #0
    7e74:	4698      	mov	r8, r3
    7e76:	e7db      	b.n	7e30 <__aeabi_ddiv+0x19c>
    7e78:	000007ff 	.word	0x000007ff
    7e7c:	fffffc01 	.word	0xfffffc01
    7e80:	0000bd38 	.word	0x0000bd38
    7e84:	fffffc0d 	.word	0xfffffc0d
    7e88:	800fffff 	.word	0x800fffff
    7e8c:	45d9      	cmp	r9, fp
    7e8e:	d900      	bls.n	7e92 <__aeabi_ddiv+0x1fe>
    7e90:	e139      	b.n	8106 <__aeabi_ddiv+0x472>
    7e92:	d100      	bne.n	7e96 <__aeabi_ddiv+0x202>
    7e94:	e134      	b.n	8100 <__aeabi_ddiv+0x46c>
    7e96:	2300      	movs	r3, #0
    7e98:	4646      	mov	r6, r8
    7e9a:	464d      	mov	r5, r9
    7e9c:	469a      	mov	sl, r3
    7e9e:	3c01      	subs	r4, #1
    7ea0:	465b      	mov	r3, fp
    7ea2:	0e0a      	lsrs	r2, r1, #24
    7ea4:	021b      	lsls	r3, r3, #8
    7ea6:	431a      	orrs	r2, r3
    7ea8:	020b      	lsls	r3, r1, #8
    7eaa:	0c17      	lsrs	r7, r2, #16
    7eac:	9303      	str	r3, [sp, #12]
    7eae:	0413      	lsls	r3, r2, #16
    7eb0:	0c1b      	lsrs	r3, r3, #16
    7eb2:	0039      	movs	r1, r7
    7eb4:	0028      	movs	r0, r5
    7eb6:	4690      	mov	r8, r2
    7eb8:	9301      	str	r3, [sp, #4]
    7eba:	f7ff fa27 	bl	730c <__udivsi3>
    7ebe:	0002      	movs	r2, r0
    7ec0:	9b01      	ldr	r3, [sp, #4]
    7ec2:	4683      	mov	fp, r0
    7ec4:	435a      	muls	r2, r3
    7ec6:	0028      	movs	r0, r5
    7ec8:	0039      	movs	r1, r7
    7eca:	4691      	mov	r9, r2
    7ecc:	f7ff faa4 	bl	7418 <__aeabi_uidivmod>
    7ed0:	0c35      	lsrs	r5, r6, #16
    7ed2:	0409      	lsls	r1, r1, #16
    7ed4:	430d      	orrs	r5, r1
    7ed6:	45a9      	cmp	r9, r5
    7ed8:	d90d      	bls.n	7ef6 <__aeabi_ddiv+0x262>
    7eda:	465b      	mov	r3, fp
    7edc:	4445      	add	r5, r8
    7ede:	3b01      	subs	r3, #1
    7ee0:	45a8      	cmp	r8, r5
    7ee2:	d900      	bls.n	7ee6 <__aeabi_ddiv+0x252>
    7ee4:	e13a      	b.n	815c <__aeabi_ddiv+0x4c8>
    7ee6:	45a9      	cmp	r9, r5
    7ee8:	d800      	bhi.n	7eec <__aeabi_ddiv+0x258>
    7eea:	e137      	b.n	815c <__aeabi_ddiv+0x4c8>
    7eec:	2302      	movs	r3, #2
    7eee:	425b      	negs	r3, r3
    7ef0:	469c      	mov	ip, r3
    7ef2:	4445      	add	r5, r8
    7ef4:	44e3      	add	fp, ip
    7ef6:	464b      	mov	r3, r9
    7ef8:	1aeb      	subs	r3, r5, r3
    7efa:	0039      	movs	r1, r7
    7efc:	0018      	movs	r0, r3
    7efe:	9304      	str	r3, [sp, #16]
    7f00:	f7ff fa04 	bl	730c <__udivsi3>
    7f04:	9b01      	ldr	r3, [sp, #4]
    7f06:	0005      	movs	r5, r0
    7f08:	4343      	muls	r3, r0
    7f0a:	0039      	movs	r1, r7
    7f0c:	9804      	ldr	r0, [sp, #16]
    7f0e:	4699      	mov	r9, r3
    7f10:	f7ff fa82 	bl	7418 <__aeabi_uidivmod>
    7f14:	0433      	lsls	r3, r6, #16
    7f16:	0409      	lsls	r1, r1, #16
    7f18:	0c1b      	lsrs	r3, r3, #16
    7f1a:	430b      	orrs	r3, r1
    7f1c:	4599      	cmp	r9, r3
    7f1e:	d909      	bls.n	7f34 <__aeabi_ddiv+0x2a0>
    7f20:	4443      	add	r3, r8
    7f22:	1e6a      	subs	r2, r5, #1
    7f24:	4598      	cmp	r8, r3
    7f26:	d900      	bls.n	7f2a <__aeabi_ddiv+0x296>
    7f28:	e11a      	b.n	8160 <__aeabi_ddiv+0x4cc>
    7f2a:	4599      	cmp	r9, r3
    7f2c:	d800      	bhi.n	7f30 <__aeabi_ddiv+0x29c>
    7f2e:	e117      	b.n	8160 <__aeabi_ddiv+0x4cc>
    7f30:	3d02      	subs	r5, #2
    7f32:	4443      	add	r3, r8
    7f34:	464a      	mov	r2, r9
    7f36:	1a9b      	subs	r3, r3, r2
    7f38:	465a      	mov	r2, fp
    7f3a:	0412      	lsls	r2, r2, #16
    7f3c:	432a      	orrs	r2, r5
    7f3e:	9903      	ldr	r1, [sp, #12]
    7f40:	4693      	mov	fp, r2
    7f42:	0c10      	lsrs	r0, r2, #16
    7f44:	0c0a      	lsrs	r2, r1, #16
    7f46:	4691      	mov	r9, r2
    7f48:	0409      	lsls	r1, r1, #16
    7f4a:	465a      	mov	r2, fp
    7f4c:	0c09      	lsrs	r1, r1, #16
    7f4e:	464e      	mov	r6, r9
    7f50:	000d      	movs	r5, r1
    7f52:	0412      	lsls	r2, r2, #16
    7f54:	0c12      	lsrs	r2, r2, #16
    7f56:	4345      	muls	r5, r0
    7f58:	9105      	str	r1, [sp, #20]
    7f5a:	4351      	muls	r1, r2
    7f5c:	4372      	muls	r2, r6
    7f5e:	4370      	muls	r0, r6
    7f60:	1952      	adds	r2, r2, r5
    7f62:	0c0e      	lsrs	r6, r1, #16
    7f64:	18b2      	adds	r2, r6, r2
    7f66:	4295      	cmp	r5, r2
    7f68:	d903      	bls.n	7f72 <__aeabi_ddiv+0x2de>
    7f6a:	2580      	movs	r5, #128	; 0x80
    7f6c:	026d      	lsls	r5, r5, #9
    7f6e:	46ac      	mov	ip, r5
    7f70:	4460      	add	r0, ip
    7f72:	0c15      	lsrs	r5, r2, #16
    7f74:	0409      	lsls	r1, r1, #16
    7f76:	0412      	lsls	r2, r2, #16
    7f78:	0c09      	lsrs	r1, r1, #16
    7f7a:	1828      	adds	r0, r5, r0
    7f7c:	1852      	adds	r2, r2, r1
    7f7e:	4283      	cmp	r3, r0
    7f80:	d200      	bcs.n	7f84 <__aeabi_ddiv+0x2f0>
    7f82:	e0ce      	b.n	8122 <__aeabi_ddiv+0x48e>
    7f84:	d100      	bne.n	7f88 <__aeabi_ddiv+0x2f4>
    7f86:	e0c8      	b.n	811a <__aeabi_ddiv+0x486>
    7f88:	1a1d      	subs	r5, r3, r0
    7f8a:	4653      	mov	r3, sl
    7f8c:	1a9e      	subs	r6, r3, r2
    7f8e:	45b2      	cmp	sl, r6
    7f90:	4192      	sbcs	r2, r2
    7f92:	4252      	negs	r2, r2
    7f94:	1aab      	subs	r3, r5, r2
    7f96:	469a      	mov	sl, r3
    7f98:	4598      	cmp	r8, r3
    7f9a:	d100      	bne.n	7f9e <__aeabi_ddiv+0x30a>
    7f9c:	e117      	b.n	81ce <__aeabi_ddiv+0x53a>
    7f9e:	0039      	movs	r1, r7
    7fa0:	0018      	movs	r0, r3
    7fa2:	f7ff f9b3 	bl	730c <__udivsi3>
    7fa6:	9b01      	ldr	r3, [sp, #4]
    7fa8:	0005      	movs	r5, r0
    7faa:	4343      	muls	r3, r0
    7fac:	0039      	movs	r1, r7
    7fae:	4650      	mov	r0, sl
    7fb0:	9304      	str	r3, [sp, #16]
    7fb2:	f7ff fa31 	bl	7418 <__aeabi_uidivmod>
    7fb6:	9804      	ldr	r0, [sp, #16]
    7fb8:	040b      	lsls	r3, r1, #16
    7fba:	0c31      	lsrs	r1, r6, #16
    7fbc:	4319      	orrs	r1, r3
    7fbe:	4288      	cmp	r0, r1
    7fc0:	d909      	bls.n	7fd6 <__aeabi_ddiv+0x342>
    7fc2:	4441      	add	r1, r8
    7fc4:	1e6b      	subs	r3, r5, #1
    7fc6:	4588      	cmp	r8, r1
    7fc8:	d900      	bls.n	7fcc <__aeabi_ddiv+0x338>
    7fca:	e107      	b.n	81dc <__aeabi_ddiv+0x548>
    7fcc:	4288      	cmp	r0, r1
    7fce:	d800      	bhi.n	7fd2 <__aeabi_ddiv+0x33e>
    7fd0:	e104      	b.n	81dc <__aeabi_ddiv+0x548>
    7fd2:	3d02      	subs	r5, #2
    7fd4:	4441      	add	r1, r8
    7fd6:	9b04      	ldr	r3, [sp, #16]
    7fd8:	1acb      	subs	r3, r1, r3
    7fda:	0018      	movs	r0, r3
    7fdc:	0039      	movs	r1, r7
    7fde:	9304      	str	r3, [sp, #16]
    7fe0:	f7ff f994 	bl	730c <__udivsi3>
    7fe4:	9b01      	ldr	r3, [sp, #4]
    7fe6:	4682      	mov	sl, r0
    7fe8:	4343      	muls	r3, r0
    7fea:	0039      	movs	r1, r7
    7fec:	9804      	ldr	r0, [sp, #16]
    7fee:	9301      	str	r3, [sp, #4]
    7ff0:	f7ff fa12 	bl	7418 <__aeabi_uidivmod>
    7ff4:	9801      	ldr	r0, [sp, #4]
    7ff6:	040b      	lsls	r3, r1, #16
    7ff8:	0431      	lsls	r1, r6, #16
    7ffa:	0c09      	lsrs	r1, r1, #16
    7ffc:	4319      	orrs	r1, r3
    7ffe:	4288      	cmp	r0, r1
    8000:	d90d      	bls.n	801e <__aeabi_ddiv+0x38a>
    8002:	4653      	mov	r3, sl
    8004:	4441      	add	r1, r8
    8006:	3b01      	subs	r3, #1
    8008:	4588      	cmp	r8, r1
    800a:	d900      	bls.n	800e <__aeabi_ddiv+0x37a>
    800c:	e0e8      	b.n	81e0 <__aeabi_ddiv+0x54c>
    800e:	4288      	cmp	r0, r1
    8010:	d800      	bhi.n	8014 <__aeabi_ddiv+0x380>
    8012:	e0e5      	b.n	81e0 <__aeabi_ddiv+0x54c>
    8014:	2302      	movs	r3, #2
    8016:	425b      	negs	r3, r3
    8018:	469c      	mov	ip, r3
    801a:	4441      	add	r1, r8
    801c:	44e2      	add	sl, ip
    801e:	9b01      	ldr	r3, [sp, #4]
    8020:	042d      	lsls	r5, r5, #16
    8022:	1ace      	subs	r6, r1, r3
    8024:	4651      	mov	r1, sl
    8026:	4329      	orrs	r1, r5
    8028:	9d05      	ldr	r5, [sp, #20]
    802a:	464f      	mov	r7, r9
    802c:	002a      	movs	r2, r5
    802e:	040b      	lsls	r3, r1, #16
    8030:	0c08      	lsrs	r0, r1, #16
    8032:	0c1b      	lsrs	r3, r3, #16
    8034:	435a      	muls	r2, r3
    8036:	4345      	muls	r5, r0
    8038:	437b      	muls	r3, r7
    803a:	4378      	muls	r0, r7
    803c:	195b      	adds	r3, r3, r5
    803e:	0c17      	lsrs	r7, r2, #16
    8040:	18fb      	adds	r3, r7, r3
    8042:	429d      	cmp	r5, r3
    8044:	d903      	bls.n	804e <__aeabi_ddiv+0x3ba>
    8046:	2580      	movs	r5, #128	; 0x80
    8048:	026d      	lsls	r5, r5, #9
    804a:	46ac      	mov	ip, r5
    804c:	4460      	add	r0, ip
    804e:	0c1d      	lsrs	r5, r3, #16
    8050:	0412      	lsls	r2, r2, #16
    8052:	041b      	lsls	r3, r3, #16
    8054:	0c12      	lsrs	r2, r2, #16
    8056:	1828      	adds	r0, r5, r0
    8058:	189b      	adds	r3, r3, r2
    805a:	4286      	cmp	r6, r0
    805c:	d200      	bcs.n	8060 <__aeabi_ddiv+0x3cc>
    805e:	e093      	b.n	8188 <__aeabi_ddiv+0x4f4>
    8060:	d100      	bne.n	8064 <__aeabi_ddiv+0x3d0>
    8062:	e08e      	b.n	8182 <__aeabi_ddiv+0x4ee>
    8064:	2301      	movs	r3, #1
    8066:	4319      	orrs	r1, r3
    8068:	4ba0      	ldr	r3, [pc, #640]	; (82ec <__aeabi_ddiv+0x658>)
    806a:	18e3      	adds	r3, r4, r3
    806c:	2b00      	cmp	r3, #0
    806e:	dc00      	bgt.n	8072 <__aeabi_ddiv+0x3de>
    8070:	e099      	b.n	81a6 <__aeabi_ddiv+0x512>
    8072:	074a      	lsls	r2, r1, #29
    8074:	d000      	beq.n	8078 <__aeabi_ddiv+0x3e4>
    8076:	e09e      	b.n	81b6 <__aeabi_ddiv+0x522>
    8078:	465a      	mov	r2, fp
    807a:	01d2      	lsls	r2, r2, #7
    807c:	d506      	bpl.n	808c <__aeabi_ddiv+0x3f8>
    807e:	465a      	mov	r2, fp
    8080:	4b9b      	ldr	r3, [pc, #620]	; (82f0 <__aeabi_ddiv+0x65c>)
    8082:	401a      	ands	r2, r3
    8084:	2380      	movs	r3, #128	; 0x80
    8086:	4693      	mov	fp, r2
    8088:	00db      	lsls	r3, r3, #3
    808a:	18e3      	adds	r3, r4, r3
    808c:	4a99      	ldr	r2, [pc, #612]	; (82f4 <__aeabi_ddiv+0x660>)
    808e:	4293      	cmp	r3, r2
    8090:	dd68      	ble.n	8164 <__aeabi_ddiv+0x4d0>
    8092:	2301      	movs	r3, #1
    8094:	9a02      	ldr	r2, [sp, #8]
    8096:	4c98      	ldr	r4, [pc, #608]	; (82f8 <__aeabi_ddiv+0x664>)
    8098:	401a      	ands	r2, r3
    809a:	2300      	movs	r3, #0
    809c:	4694      	mov	ip, r2
    809e:	4698      	mov	r8, r3
    80a0:	2200      	movs	r2, #0
    80a2:	e6c5      	b.n	7e30 <__aeabi_ddiv+0x19c>
    80a4:	2280      	movs	r2, #128	; 0x80
    80a6:	464b      	mov	r3, r9
    80a8:	0312      	lsls	r2, r2, #12
    80aa:	4213      	tst	r3, r2
    80ac:	d00a      	beq.n	80c4 <__aeabi_ddiv+0x430>
    80ae:	465b      	mov	r3, fp
    80b0:	4213      	tst	r3, r2
    80b2:	d106      	bne.n	80c2 <__aeabi_ddiv+0x42e>
    80b4:	431a      	orrs	r2, r3
    80b6:	0312      	lsls	r2, r2, #12
    80b8:	0b12      	lsrs	r2, r2, #12
    80ba:	46ac      	mov	ip, r5
    80bc:	4688      	mov	r8, r1
    80be:	4c8e      	ldr	r4, [pc, #568]	; (82f8 <__aeabi_ddiv+0x664>)
    80c0:	e6b6      	b.n	7e30 <__aeabi_ddiv+0x19c>
    80c2:	464b      	mov	r3, r9
    80c4:	431a      	orrs	r2, r3
    80c6:	0312      	lsls	r2, r2, #12
    80c8:	0b12      	lsrs	r2, r2, #12
    80ca:	46bc      	mov	ip, r7
    80cc:	4c8a      	ldr	r4, [pc, #552]	; (82f8 <__aeabi_ddiv+0x664>)
    80ce:	e6af      	b.n	7e30 <__aeabi_ddiv+0x19c>
    80d0:	0003      	movs	r3, r0
    80d2:	465a      	mov	r2, fp
    80d4:	3b28      	subs	r3, #40	; 0x28
    80d6:	409a      	lsls	r2, r3
    80d8:	2300      	movs	r3, #0
    80da:	4691      	mov	r9, r2
    80dc:	4698      	mov	r8, r3
    80de:	e657      	b.n	7d90 <__aeabi_ddiv+0xfc>
    80e0:	4658      	mov	r0, fp
    80e2:	f001 f82d 	bl	9140 <__clzsi2>
    80e6:	3020      	adds	r0, #32
    80e8:	e640      	b.n	7d6c <__aeabi_ddiv+0xd8>
    80ea:	0003      	movs	r3, r0
    80ec:	4652      	mov	r2, sl
    80ee:	3b28      	subs	r3, #40	; 0x28
    80f0:	409a      	lsls	r2, r3
    80f2:	2100      	movs	r1, #0
    80f4:	4693      	mov	fp, r2
    80f6:	e677      	b.n	7de8 <__aeabi_ddiv+0x154>
    80f8:	f001 f822 	bl	9140 <__clzsi2>
    80fc:	3020      	adds	r0, #32
    80fe:	e65f      	b.n	7dc0 <__aeabi_ddiv+0x12c>
    8100:	4588      	cmp	r8, r1
    8102:	d200      	bcs.n	8106 <__aeabi_ddiv+0x472>
    8104:	e6c7      	b.n	7e96 <__aeabi_ddiv+0x202>
    8106:	464b      	mov	r3, r9
    8108:	07de      	lsls	r6, r3, #31
    810a:	085d      	lsrs	r5, r3, #1
    810c:	4643      	mov	r3, r8
    810e:	085b      	lsrs	r3, r3, #1
    8110:	431e      	orrs	r6, r3
    8112:	4643      	mov	r3, r8
    8114:	07db      	lsls	r3, r3, #31
    8116:	469a      	mov	sl, r3
    8118:	e6c2      	b.n	7ea0 <__aeabi_ddiv+0x20c>
    811a:	2500      	movs	r5, #0
    811c:	4592      	cmp	sl, r2
    811e:	d300      	bcc.n	8122 <__aeabi_ddiv+0x48e>
    8120:	e733      	b.n	7f8a <__aeabi_ddiv+0x2f6>
    8122:	9e03      	ldr	r6, [sp, #12]
    8124:	4659      	mov	r1, fp
    8126:	46b4      	mov	ip, r6
    8128:	44e2      	add	sl, ip
    812a:	45b2      	cmp	sl, r6
    812c:	41ad      	sbcs	r5, r5
    812e:	426d      	negs	r5, r5
    8130:	4445      	add	r5, r8
    8132:	18eb      	adds	r3, r5, r3
    8134:	3901      	subs	r1, #1
    8136:	4598      	cmp	r8, r3
    8138:	d207      	bcs.n	814a <__aeabi_ddiv+0x4b6>
    813a:	4298      	cmp	r0, r3
    813c:	d900      	bls.n	8140 <__aeabi_ddiv+0x4ac>
    813e:	e07f      	b.n	8240 <__aeabi_ddiv+0x5ac>
    8140:	d100      	bne.n	8144 <__aeabi_ddiv+0x4b0>
    8142:	e0bc      	b.n	82be <__aeabi_ddiv+0x62a>
    8144:	1a1d      	subs	r5, r3, r0
    8146:	468b      	mov	fp, r1
    8148:	e71f      	b.n	7f8a <__aeabi_ddiv+0x2f6>
    814a:	4598      	cmp	r8, r3
    814c:	d1fa      	bne.n	8144 <__aeabi_ddiv+0x4b0>
    814e:	9d03      	ldr	r5, [sp, #12]
    8150:	4555      	cmp	r5, sl
    8152:	d9f2      	bls.n	813a <__aeabi_ddiv+0x4a6>
    8154:	4643      	mov	r3, r8
    8156:	468b      	mov	fp, r1
    8158:	1a1d      	subs	r5, r3, r0
    815a:	e716      	b.n	7f8a <__aeabi_ddiv+0x2f6>
    815c:	469b      	mov	fp, r3
    815e:	e6ca      	b.n	7ef6 <__aeabi_ddiv+0x262>
    8160:	0015      	movs	r5, r2
    8162:	e6e7      	b.n	7f34 <__aeabi_ddiv+0x2a0>
    8164:	465a      	mov	r2, fp
    8166:	08c9      	lsrs	r1, r1, #3
    8168:	0752      	lsls	r2, r2, #29
    816a:	430a      	orrs	r2, r1
    816c:	055b      	lsls	r3, r3, #21
    816e:	4690      	mov	r8, r2
    8170:	0d5c      	lsrs	r4, r3, #21
    8172:	465a      	mov	r2, fp
    8174:	2301      	movs	r3, #1
    8176:	9902      	ldr	r1, [sp, #8]
    8178:	0252      	lsls	r2, r2, #9
    817a:	4019      	ands	r1, r3
    817c:	0b12      	lsrs	r2, r2, #12
    817e:	468c      	mov	ip, r1
    8180:	e656      	b.n	7e30 <__aeabi_ddiv+0x19c>
    8182:	2b00      	cmp	r3, #0
    8184:	d100      	bne.n	8188 <__aeabi_ddiv+0x4f4>
    8186:	e76f      	b.n	8068 <__aeabi_ddiv+0x3d4>
    8188:	4446      	add	r6, r8
    818a:	1e4a      	subs	r2, r1, #1
    818c:	45b0      	cmp	r8, r6
    818e:	d929      	bls.n	81e4 <__aeabi_ddiv+0x550>
    8190:	0011      	movs	r1, r2
    8192:	4286      	cmp	r6, r0
    8194:	d000      	beq.n	8198 <__aeabi_ddiv+0x504>
    8196:	e765      	b.n	8064 <__aeabi_ddiv+0x3d0>
    8198:	9a03      	ldr	r2, [sp, #12]
    819a:	4293      	cmp	r3, r2
    819c:	d000      	beq.n	81a0 <__aeabi_ddiv+0x50c>
    819e:	e761      	b.n	8064 <__aeabi_ddiv+0x3d0>
    81a0:	e762      	b.n	8068 <__aeabi_ddiv+0x3d4>
    81a2:	2101      	movs	r1, #1
    81a4:	4249      	negs	r1, r1
    81a6:	2001      	movs	r0, #1
    81a8:	1ac2      	subs	r2, r0, r3
    81aa:	2a38      	cmp	r2, #56	; 0x38
    81ac:	dd21      	ble.n	81f2 <__aeabi_ddiv+0x55e>
    81ae:	9b02      	ldr	r3, [sp, #8]
    81b0:	4003      	ands	r3, r0
    81b2:	469c      	mov	ip, r3
    81b4:	e638      	b.n	7e28 <__aeabi_ddiv+0x194>
    81b6:	220f      	movs	r2, #15
    81b8:	400a      	ands	r2, r1
    81ba:	2a04      	cmp	r2, #4
    81bc:	d100      	bne.n	81c0 <__aeabi_ddiv+0x52c>
    81be:	e75b      	b.n	8078 <__aeabi_ddiv+0x3e4>
    81c0:	000a      	movs	r2, r1
    81c2:	1d11      	adds	r1, r2, #4
    81c4:	4291      	cmp	r1, r2
    81c6:	4192      	sbcs	r2, r2
    81c8:	4252      	negs	r2, r2
    81ca:	4493      	add	fp, r2
    81cc:	e754      	b.n	8078 <__aeabi_ddiv+0x3e4>
    81ce:	4b47      	ldr	r3, [pc, #284]	; (82ec <__aeabi_ddiv+0x658>)
    81d0:	18e3      	adds	r3, r4, r3
    81d2:	2b00      	cmp	r3, #0
    81d4:	dde5      	ble.n	81a2 <__aeabi_ddiv+0x50e>
    81d6:	2201      	movs	r2, #1
    81d8:	4252      	negs	r2, r2
    81da:	e7f2      	b.n	81c2 <__aeabi_ddiv+0x52e>
    81dc:	001d      	movs	r5, r3
    81de:	e6fa      	b.n	7fd6 <__aeabi_ddiv+0x342>
    81e0:	469a      	mov	sl, r3
    81e2:	e71c      	b.n	801e <__aeabi_ddiv+0x38a>
    81e4:	42b0      	cmp	r0, r6
    81e6:	d839      	bhi.n	825c <__aeabi_ddiv+0x5c8>
    81e8:	d06e      	beq.n	82c8 <__aeabi_ddiv+0x634>
    81ea:	0011      	movs	r1, r2
    81ec:	e73a      	b.n	8064 <__aeabi_ddiv+0x3d0>
    81ee:	9302      	str	r3, [sp, #8]
    81f0:	e73a      	b.n	8068 <__aeabi_ddiv+0x3d4>
    81f2:	2a1f      	cmp	r2, #31
    81f4:	dc3c      	bgt.n	8270 <__aeabi_ddiv+0x5dc>
    81f6:	2320      	movs	r3, #32
    81f8:	1a9b      	subs	r3, r3, r2
    81fa:	000c      	movs	r4, r1
    81fc:	4658      	mov	r0, fp
    81fe:	4099      	lsls	r1, r3
    8200:	4098      	lsls	r0, r3
    8202:	1e4b      	subs	r3, r1, #1
    8204:	4199      	sbcs	r1, r3
    8206:	465b      	mov	r3, fp
    8208:	40d4      	lsrs	r4, r2
    820a:	40d3      	lsrs	r3, r2
    820c:	4320      	orrs	r0, r4
    820e:	4308      	orrs	r0, r1
    8210:	001a      	movs	r2, r3
    8212:	0743      	lsls	r3, r0, #29
    8214:	d009      	beq.n	822a <__aeabi_ddiv+0x596>
    8216:	230f      	movs	r3, #15
    8218:	4003      	ands	r3, r0
    821a:	2b04      	cmp	r3, #4
    821c:	d005      	beq.n	822a <__aeabi_ddiv+0x596>
    821e:	0001      	movs	r1, r0
    8220:	1d08      	adds	r0, r1, #4
    8222:	4288      	cmp	r0, r1
    8224:	419b      	sbcs	r3, r3
    8226:	425b      	negs	r3, r3
    8228:	18d2      	adds	r2, r2, r3
    822a:	0213      	lsls	r3, r2, #8
    822c:	d53a      	bpl.n	82a4 <__aeabi_ddiv+0x610>
    822e:	2301      	movs	r3, #1
    8230:	9a02      	ldr	r2, [sp, #8]
    8232:	2401      	movs	r4, #1
    8234:	401a      	ands	r2, r3
    8236:	2300      	movs	r3, #0
    8238:	4694      	mov	ip, r2
    823a:	4698      	mov	r8, r3
    823c:	2200      	movs	r2, #0
    823e:	e5f7      	b.n	7e30 <__aeabi_ddiv+0x19c>
    8240:	2102      	movs	r1, #2
    8242:	4249      	negs	r1, r1
    8244:	468c      	mov	ip, r1
    8246:	9d03      	ldr	r5, [sp, #12]
    8248:	44e3      	add	fp, ip
    824a:	46ac      	mov	ip, r5
    824c:	44e2      	add	sl, ip
    824e:	45aa      	cmp	sl, r5
    8250:	41ad      	sbcs	r5, r5
    8252:	426d      	negs	r5, r5
    8254:	4445      	add	r5, r8
    8256:	18ed      	adds	r5, r5, r3
    8258:	1a2d      	subs	r5, r5, r0
    825a:	e696      	b.n	7f8a <__aeabi_ddiv+0x2f6>
    825c:	1e8a      	subs	r2, r1, #2
    825e:	9903      	ldr	r1, [sp, #12]
    8260:	004d      	lsls	r5, r1, #1
    8262:	428d      	cmp	r5, r1
    8264:	4189      	sbcs	r1, r1
    8266:	4249      	negs	r1, r1
    8268:	4441      	add	r1, r8
    826a:	1876      	adds	r6, r6, r1
    826c:	9503      	str	r5, [sp, #12]
    826e:	e78f      	b.n	8190 <__aeabi_ddiv+0x4fc>
    8270:	201f      	movs	r0, #31
    8272:	4240      	negs	r0, r0
    8274:	1ac3      	subs	r3, r0, r3
    8276:	4658      	mov	r0, fp
    8278:	40d8      	lsrs	r0, r3
    827a:	0003      	movs	r3, r0
    827c:	2a20      	cmp	r2, #32
    827e:	d028      	beq.n	82d2 <__aeabi_ddiv+0x63e>
    8280:	2040      	movs	r0, #64	; 0x40
    8282:	465d      	mov	r5, fp
    8284:	1a82      	subs	r2, r0, r2
    8286:	4095      	lsls	r5, r2
    8288:	4329      	orrs	r1, r5
    828a:	1e4a      	subs	r2, r1, #1
    828c:	4191      	sbcs	r1, r2
    828e:	4319      	orrs	r1, r3
    8290:	2307      	movs	r3, #7
    8292:	2200      	movs	r2, #0
    8294:	400b      	ands	r3, r1
    8296:	d009      	beq.n	82ac <__aeabi_ddiv+0x618>
    8298:	230f      	movs	r3, #15
    829a:	2200      	movs	r2, #0
    829c:	400b      	ands	r3, r1
    829e:	0008      	movs	r0, r1
    82a0:	2b04      	cmp	r3, #4
    82a2:	d1bd      	bne.n	8220 <__aeabi_ddiv+0x58c>
    82a4:	0001      	movs	r1, r0
    82a6:	0753      	lsls	r3, r2, #29
    82a8:	0252      	lsls	r2, r2, #9
    82aa:	0b12      	lsrs	r2, r2, #12
    82ac:	08c9      	lsrs	r1, r1, #3
    82ae:	4319      	orrs	r1, r3
    82b0:	2301      	movs	r3, #1
    82b2:	4688      	mov	r8, r1
    82b4:	9902      	ldr	r1, [sp, #8]
    82b6:	2400      	movs	r4, #0
    82b8:	4019      	ands	r1, r3
    82ba:	468c      	mov	ip, r1
    82bc:	e5b8      	b.n	7e30 <__aeabi_ddiv+0x19c>
    82be:	4552      	cmp	r2, sl
    82c0:	d8be      	bhi.n	8240 <__aeabi_ddiv+0x5ac>
    82c2:	468b      	mov	fp, r1
    82c4:	2500      	movs	r5, #0
    82c6:	e660      	b.n	7f8a <__aeabi_ddiv+0x2f6>
    82c8:	9d03      	ldr	r5, [sp, #12]
    82ca:	429d      	cmp	r5, r3
    82cc:	d3c6      	bcc.n	825c <__aeabi_ddiv+0x5c8>
    82ce:	0011      	movs	r1, r2
    82d0:	e762      	b.n	8198 <__aeabi_ddiv+0x504>
    82d2:	2500      	movs	r5, #0
    82d4:	e7d8      	b.n	8288 <__aeabi_ddiv+0x5f4>
    82d6:	2280      	movs	r2, #128	; 0x80
    82d8:	465b      	mov	r3, fp
    82da:	0312      	lsls	r2, r2, #12
    82dc:	431a      	orrs	r2, r3
    82de:	9b01      	ldr	r3, [sp, #4]
    82e0:	0312      	lsls	r2, r2, #12
    82e2:	0b12      	lsrs	r2, r2, #12
    82e4:	469c      	mov	ip, r3
    82e6:	4688      	mov	r8, r1
    82e8:	4c03      	ldr	r4, [pc, #12]	; (82f8 <__aeabi_ddiv+0x664>)
    82ea:	e5a1      	b.n	7e30 <__aeabi_ddiv+0x19c>
    82ec:	000003ff 	.word	0x000003ff
    82f0:	feffffff 	.word	0xfeffffff
    82f4:	000007fe 	.word	0x000007fe
    82f8:	000007ff 	.word	0x000007ff

000082fc <__eqdf2>:
    82fc:	b5f0      	push	{r4, r5, r6, r7, lr}
    82fe:	464f      	mov	r7, r9
    8300:	4646      	mov	r6, r8
    8302:	46d6      	mov	lr, sl
    8304:	005c      	lsls	r4, r3, #1
    8306:	b5c0      	push	{r6, r7, lr}
    8308:	031f      	lsls	r7, r3, #12
    830a:	0fdb      	lsrs	r3, r3, #31
    830c:	469a      	mov	sl, r3
    830e:	4b17      	ldr	r3, [pc, #92]	; (836c <__eqdf2+0x70>)
    8310:	030e      	lsls	r6, r1, #12
    8312:	004d      	lsls	r5, r1, #1
    8314:	4684      	mov	ip, r0
    8316:	4680      	mov	r8, r0
    8318:	0b36      	lsrs	r6, r6, #12
    831a:	0d6d      	lsrs	r5, r5, #21
    831c:	0fc9      	lsrs	r1, r1, #31
    831e:	4691      	mov	r9, r2
    8320:	0b3f      	lsrs	r7, r7, #12
    8322:	0d64      	lsrs	r4, r4, #21
    8324:	2001      	movs	r0, #1
    8326:	429d      	cmp	r5, r3
    8328:	d008      	beq.n	833c <__eqdf2+0x40>
    832a:	429c      	cmp	r4, r3
    832c:	d001      	beq.n	8332 <__eqdf2+0x36>
    832e:	42a5      	cmp	r5, r4
    8330:	d00b      	beq.n	834a <__eqdf2+0x4e>
    8332:	bc1c      	pop	{r2, r3, r4}
    8334:	4690      	mov	r8, r2
    8336:	4699      	mov	r9, r3
    8338:	46a2      	mov	sl, r4
    833a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    833c:	4663      	mov	r3, ip
    833e:	4333      	orrs	r3, r6
    8340:	d1f7      	bne.n	8332 <__eqdf2+0x36>
    8342:	42ac      	cmp	r4, r5
    8344:	d1f5      	bne.n	8332 <__eqdf2+0x36>
    8346:	433a      	orrs	r2, r7
    8348:	d1f3      	bne.n	8332 <__eqdf2+0x36>
    834a:	2001      	movs	r0, #1
    834c:	42be      	cmp	r6, r7
    834e:	d1f0      	bne.n	8332 <__eqdf2+0x36>
    8350:	45c8      	cmp	r8, r9
    8352:	d1ee      	bne.n	8332 <__eqdf2+0x36>
    8354:	4551      	cmp	r1, sl
    8356:	d007      	beq.n	8368 <__eqdf2+0x6c>
    8358:	2d00      	cmp	r5, #0
    835a:	d1ea      	bne.n	8332 <__eqdf2+0x36>
    835c:	4663      	mov	r3, ip
    835e:	431e      	orrs	r6, r3
    8360:	0030      	movs	r0, r6
    8362:	1e46      	subs	r6, r0, #1
    8364:	41b0      	sbcs	r0, r6
    8366:	e7e4      	b.n	8332 <__eqdf2+0x36>
    8368:	2000      	movs	r0, #0
    836a:	e7e2      	b.n	8332 <__eqdf2+0x36>
    836c:	000007ff 	.word	0x000007ff

00008370 <__gedf2>:
    8370:	b5f0      	push	{r4, r5, r6, r7, lr}
    8372:	4645      	mov	r5, r8
    8374:	46de      	mov	lr, fp
    8376:	4657      	mov	r7, sl
    8378:	464e      	mov	r6, r9
    837a:	b5e0      	push	{r5, r6, r7, lr}
    837c:	031f      	lsls	r7, r3, #12
    837e:	0b3d      	lsrs	r5, r7, #12
    8380:	4f2c      	ldr	r7, [pc, #176]	; (8434 <__gedf2+0xc4>)
    8382:	030e      	lsls	r6, r1, #12
    8384:	004c      	lsls	r4, r1, #1
    8386:	46ab      	mov	fp, r5
    8388:	005d      	lsls	r5, r3, #1
    838a:	4684      	mov	ip, r0
    838c:	0b36      	lsrs	r6, r6, #12
    838e:	0d64      	lsrs	r4, r4, #21
    8390:	0fc9      	lsrs	r1, r1, #31
    8392:	4690      	mov	r8, r2
    8394:	0d6d      	lsrs	r5, r5, #21
    8396:	0fdb      	lsrs	r3, r3, #31
    8398:	42bc      	cmp	r4, r7
    839a:	d02a      	beq.n	83f2 <__gedf2+0x82>
    839c:	4f25      	ldr	r7, [pc, #148]	; (8434 <__gedf2+0xc4>)
    839e:	42bd      	cmp	r5, r7
    83a0:	d02d      	beq.n	83fe <__gedf2+0x8e>
    83a2:	2c00      	cmp	r4, #0
    83a4:	d10f      	bne.n	83c6 <__gedf2+0x56>
    83a6:	4330      	orrs	r0, r6
    83a8:	0007      	movs	r7, r0
    83aa:	4681      	mov	r9, r0
    83ac:	4278      	negs	r0, r7
    83ae:	4178      	adcs	r0, r7
    83b0:	b2c0      	uxtb	r0, r0
    83b2:	2d00      	cmp	r5, #0
    83b4:	d117      	bne.n	83e6 <__gedf2+0x76>
    83b6:	465f      	mov	r7, fp
    83b8:	433a      	orrs	r2, r7
    83ba:	d114      	bne.n	83e6 <__gedf2+0x76>
    83bc:	464b      	mov	r3, r9
    83be:	2000      	movs	r0, #0
    83c0:	2b00      	cmp	r3, #0
    83c2:	d00a      	beq.n	83da <__gedf2+0x6a>
    83c4:	e006      	b.n	83d4 <__gedf2+0x64>
    83c6:	2d00      	cmp	r5, #0
    83c8:	d102      	bne.n	83d0 <__gedf2+0x60>
    83ca:	4658      	mov	r0, fp
    83cc:	4302      	orrs	r2, r0
    83ce:	d001      	beq.n	83d4 <__gedf2+0x64>
    83d0:	4299      	cmp	r1, r3
    83d2:	d018      	beq.n	8406 <__gedf2+0x96>
    83d4:	4248      	negs	r0, r1
    83d6:	2101      	movs	r1, #1
    83d8:	4308      	orrs	r0, r1
    83da:	bc3c      	pop	{r2, r3, r4, r5}
    83dc:	4690      	mov	r8, r2
    83de:	4699      	mov	r9, r3
    83e0:	46a2      	mov	sl, r4
    83e2:	46ab      	mov	fp, r5
    83e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    83e6:	2800      	cmp	r0, #0
    83e8:	d0f2      	beq.n	83d0 <__gedf2+0x60>
    83ea:	2001      	movs	r0, #1
    83ec:	3b01      	subs	r3, #1
    83ee:	4318      	orrs	r0, r3
    83f0:	e7f3      	b.n	83da <__gedf2+0x6a>
    83f2:	0037      	movs	r7, r6
    83f4:	4307      	orrs	r7, r0
    83f6:	d0d1      	beq.n	839c <__gedf2+0x2c>
    83f8:	2002      	movs	r0, #2
    83fa:	4240      	negs	r0, r0
    83fc:	e7ed      	b.n	83da <__gedf2+0x6a>
    83fe:	465f      	mov	r7, fp
    8400:	4317      	orrs	r7, r2
    8402:	d0ce      	beq.n	83a2 <__gedf2+0x32>
    8404:	e7f8      	b.n	83f8 <__gedf2+0x88>
    8406:	42ac      	cmp	r4, r5
    8408:	dce4      	bgt.n	83d4 <__gedf2+0x64>
    840a:	da03      	bge.n	8414 <__gedf2+0xa4>
    840c:	1e48      	subs	r0, r1, #1
    840e:	2101      	movs	r1, #1
    8410:	4308      	orrs	r0, r1
    8412:	e7e2      	b.n	83da <__gedf2+0x6a>
    8414:	455e      	cmp	r6, fp
    8416:	d8dd      	bhi.n	83d4 <__gedf2+0x64>
    8418:	d006      	beq.n	8428 <__gedf2+0xb8>
    841a:	2000      	movs	r0, #0
    841c:	455e      	cmp	r6, fp
    841e:	d2dc      	bcs.n	83da <__gedf2+0x6a>
    8420:	2301      	movs	r3, #1
    8422:	1e48      	subs	r0, r1, #1
    8424:	4318      	orrs	r0, r3
    8426:	e7d8      	b.n	83da <__gedf2+0x6a>
    8428:	45c4      	cmp	ip, r8
    842a:	d8d3      	bhi.n	83d4 <__gedf2+0x64>
    842c:	2000      	movs	r0, #0
    842e:	45c4      	cmp	ip, r8
    8430:	d3f6      	bcc.n	8420 <__gedf2+0xb0>
    8432:	e7d2      	b.n	83da <__gedf2+0x6a>
    8434:	000007ff 	.word	0x000007ff

00008438 <__ledf2>:
    8438:	b5f0      	push	{r4, r5, r6, r7, lr}
    843a:	464e      	mov	r6, r9
    843c:	4645      	mov	r5, r8
    843e:	46de      	mov	lr, fp
    8440:	4657      	mov	r7, sl
    8442:	005c      	lsls	r4, r3, #1
    8444:	b5e0      	push	{r5, r6, r7, lr}
    8446:	031f      	lsls	r7, r3, #12
    8448:	0fdb      	lsrs	r3, r3, #31
    844a:	4699      	mov	r9, r3
    844c:	4b2a      	ldr	r3, [pc, #168]	; (84f8 <__ledf2+0xc0>)
    844e:	030e      	lsls	r6, r1, #12
    8450:	004d      	lsls	r5, r1, #1
    8452:	0fc9      	lsrs	r1, r1, #31
    8454:	4684      	mov	ip, r0
    8456:	0b36      	lsrs	r6, r6, #12
    8458:	0d6d      	lsrs	r5, r5, #21
    845a:	468b      	mov	fp, r1
    845c:	4690      	mov	r8, r2
    845e:	0b3f      	lsrs	r7, r7, #12
    8460:	0d64      	lsrs	r4, r4, #21
    8462:	429d      	cmp	r5, r3
    8464:	d020      	beq.n	84a8 <__ledf2+0x70>
    8466:	4b24      	ldr	r3, [pc, #144]	; (84f8 <__ledf2+0xc0>)
    8468:	429c      	cmp	r4, r3
    846a:	d022      	beq.n	84b2 <__ledf2+0x7a>
    846c:	2d00      	cmp	r5, #0
    846e:	d112      	bne.n	8496 <__ledf2+0x5e>
    8470:	4330      	orrs	r0, r6
    8472:	4243      	negs	r3, r0
    8474:	4143      	adcs	r3, r0
    8476:	b2db      	uxtb	r3, r3
    8478:	2c00      	cmp	r4, #0
    847a:	d01f      	beq.n	84bc <__ledf2+0x84>
    847c:	2b00      	cmp	r3, #0
    847e:	d00c      	beq.n	849a <__ledf2+0x62>
    8480:	464b      	mov	r3, r9
    8482:	2001      	movs	r0, #1
    8484:	3b01      	subs	r3, #1
    8486:	4303      	orrs	r3, r0
    8488:	0018      	movs	r0, r3
    848a:	bc3c      	pop	{r2, r3, r4, r5}
    848c:	4690      	mov	r8, r2
    848e:	4699      	mov	r9, r3
    8490:	46a2      	mov	sl, r4
    8492:	46ab      	mov	fp, r5
    8494:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8496:	2c00      	cmp	r4, #0
    8498:	d016      	beq.n	84c8 <__ledf2+0x90>
    849a:	45cb      	cmp	fp, r9
    849c:	d017      	beq.n	84ce <__ledf2+0x96>
    849e:	465b      	mov	r3, fp
    84a0:	4259      	negs	r1, r3
    84a2:	2301      	movs	r3, #1
    84a4:	430b      	orrs	r3, r1
    84a6:	e7ef      	b.n	8488 <__ledf2+0x50>
    84a8:	0031      	movs	r1, r6
    84aa:	2302      	movs	r3, #2
    84ac:	4301      	orrs	r1, r0
    84ae:	d1eb      	bne.n	8488 <__ledf2+0x50>
    84b0:	e7d9      	b.n	8466 <__ledf2+0x2e>
    84b2:	0039      	movs	r1, r7
    84b4:	2302      	movs	r3, #2
    84b6:	4311      	orrs	r1, r2
    84b8:	d1e6      	bne.n	8488 <__ledf2+0x50>
    84ba:	e7d7      	b.n	846c <__ledf2+0x34>
    84bc:	433a      	orrs	r2, r7
    84be:	d1dd      	bne.n	847c <__ledf2+0x44>
    84c0:	2300      	movs	r3, #0
    84c2:	2800      	cmp	r0, #0
    84c4:	d0e0      	beq.n	8488 <__ledf2+0x50>
    84c6:	e7ea      	b.n	849e <__ledf2+0x66>
    84c8:	433a      	orrs	r2, r7
    84ca:	d1e6      	bne.n	849a <__ledf2+0x62>
    84cc:	e7e7      	b.n	849e <__ledf2+0x66>
    84ce:	42a5      	cmp	r5, r4
    84d0:	dce5      	bgt.n	849e <__ledf2+0x66>
    84d2:	db05      	blt.n	84e0 <__ledf2+0xa8>
    84d4:	42be      	cmp	r6, r7
    84d6:	d8e2      	bhi.n	849e <__ledf2+0x66>
    84d8:	d007      	beq.n	84ea <__ledf2+0xb2>
    84da:	2300      	movs	r3, #0
    84dc:	42be      	cmp	r6, r7
    84de:	d2d3      	bcs.n	8488 <__ledf2+0x50>
    84e0:	4659      	mov	r1, fp
    84e2:	2301      	movs	r3, #1
    84e4:	3901      	subs	r1, #1
    84e6:	430b      	orrs	r3, r1
    84e8:	e7ce      	b.n	8488 <__ledf2+0x50>
    84ea:	45c4      	cmp	ip, r8
    84ec:	d8d7      	bhi.n	849e <__ledf2+0x66>
    84ee:	2300      	movs	r3, #0
    84f0:	45c4      	cmp	ip, r8
    84f2:	d3f5      	bcc.n	84e0 <__ledf2+0xa8>
    84f4:	e7c8      	b.n	8488 <__ledf2+0x50>
    84f6:	46c0      	nop			; (mov r8, r8)
    84f8:	000007ff 	.word	0x000007ff

000084fc <__aeabi_dmul>:
    84fc:	b5f0      	push	{r4, r5, r6, r7, lr}
    84fe:	4657      	mov	r7, sl
    8500:	4645      	mov	r5, r8
    8502:	46de      	mov	lr, fp
    8504:	464e      	mov	r6, r9
    8506:	b5e0      	push	{r5, r6, r7, lr}
    8508:	030c      	lsls	r4, r1, #12
    850a:	4698      	mov	r8, r3
    850c:	004e      	lsls	r6, r1, #1
    850e:	0b23      	lsrs	r3, r4, #12
    8510:	b087      	sub	sp, #28
    8512:	0007      	movs	r7, r0
    8514:	4692      	mov	sl, r2
    8516:	469b      	mov	fp, r3
    8518:	0d76      	lsrs	r6, r6, #21
    851a:	0fcd      	lsrs	r5, r1, #31
    851c:	2e00      	cmp	r6, #0
    851e:	d06b      	beq.n	85f8 <__aeabi_dmul+0xfc>
    8520:	4b6d      	ldr	r3, [pc, #436]	; (86d8 <__aeabi_dmul+0x1dc>)
    8522:	429e      	cmp	r6, r3
    8524:	d035      	beq.n	8592 <__aeabi_dmul+0x96>
    8526:	2480      	movs	r4, #128	; 0x80
    8528:	465b      	mov	r3, fp
    852a:	0f42      	lsrs	r2, r0, #29
    852c:	0424      	lsls	r4, r4, #16
    852e:	00db      	lsls	r3, r3, #3
    8530:	4314      	orrs	r4, r2
    8532:	431c      	orrs	r4, r3
    8534:	00c3      	lsls	r3, r0, #3
    8536:	4699      	mov	r9, r3
    8538:	4b68      	ldr	r3, [pc, #416]	; (86dc <__aeabi_dmul+0x1e0>)
    853a:	46a3      	mov	fp, r4
    853c:	469c      	mov	ip, r3
    853e:	2300      	movs	r3, #0
    8540:	2700      	movs	r7, #0
    8542:	4466      	add	r6, ip
    8544:	9302      	str	r3, [sp, #8]
    8546:	4643      	mov	r3, r8
    8548:	031c      	lsls	r4, r3, #12
    854a:	005a      	lsls	r2, r3, #1
    854c:	0fdb      	lsrs	r3, r3, #31
    854e:	4650      	mov	r0, sl
    8550:	0b24      	lsrs	r4, r4, #12
    8552:	0d52      	lsrs	r2, r2, #21
    8554:	4698      	mov	r8, r3
    8556:	d100      	bne.n	855a <__aeabi_dmul+0x5e>
    8558:	e076      	b.n	8648 <__aeabi_dmul+0x14c>
    855a:	4b5f      	ldr	r3, [pc, #380]	; (86d8 <__aeabi_dmul+0x1dc>)
    855c:	429a      	cmp	r2, r3
    855e:	d06d      	beq.n	863c <__aeabi_dmul+0x140>
    8560:	2380      	movs	r3, #128	; 0x80
    8562:	0f41      	lsrs	r1, r0, #29
    8564:	041b      	lsls	r3, r3, #16
    8566:	430b      	orrs	r3, r1
    8568:	495c      	ldr	r1, [pc, #368]	; (86dc <__aeabi_dmul+0x1e0>)
    856a:	00e4      	lsls	r4, r4, #3
    856c:	468c      	mov	ip, r1
    856e:	431c      	orrs	r4, r3
    8570:	00c3      	lsls	r3, r0, #3
    8572:	2000      	movs	r0, #0
    8574:	4462      	add	r2, ip
    8576:	4641      	mov	r1, r8
    8578:	18b6      	adds	r6, r6, r2
    857a:	4069      	eors	r1, r5
    857c:	1c72      	adds	r2, r6, #1
    857e:	9101      	str	r1, [sp, #4]
    8580:	4694      	mov	ip, r2
    8582:	4307      	orrs	r7, r0
    8584:	2f0f      	cmp	r7, #15
    8586:	d900      	bls.n	858a <__aeabi_dmul+0x8e>
    8588:	e0b0      	b.n	86ec <__aeabi_dmul+0x1f0>
    858a:	4a55      	ldr	r2, [pc, #340]	; (86e0 <__aeabi_dmul+0x1e4>)
    858c:	00bf      	lsls	r7, r7, #2
    858e:	59d2      	ldr	r2, [r2, r7]
    8590:	4697      	mov	pc, r2
    8592:	465b      	mov	r3, fp
    8594:	4303      	orrs	r3, r0
    8596:	4699      	mov	r9, r3
    8598:	d000      	beq.n	859c <__aeabi_dmul+0xa0>
    859a:	e087      	b.n	86ac <__aeabi_dmul+0x1b0>
    859c:	2300      	movs	r3, #0
    859e:	469b      	mov	fp, r3
    85a0:	3302      	adds	r3, #2
    85a2:	2708      	movs	r7, #8
    85a4:	9302      	str	r3, [sp, #8]
    85a6:	e7ce      	b.n	8546 <__aeabi_dmul+0x4a>
    85a8:	4642      	mov	r2, r8
    85aa:	9201      	str	r2, [sp, #4]
    85ac:	2802      	cmp	r0, #2
    85ae:	d067      	beq.n	8680 <__aeabi_dmul+0x184>
    85b0:	2803      	cmp	r0, #3
    85b2:	d100      	bne.n	85b6 <__aeabi_dmul+0xba>
    85b4:	e20e      	b.n	89d4 <__aeabi_dmul+0x4d8>
    85b6:	2801      	cmp	r0, #1
    85b8:	d000      	beq.n	85bc <__aeabi_dmul+0xc0>
    85ba:	e162      	b.n	8882 <__aeabi_dmul+0x386>
    85bc:	2300      	movs	r3, #0
    85be:	2400      	movs	r4, #0
    85c0:	2200      	movs	r2, #0
    85c2:	4699      	mov	r9, r3
    85c4:	9901      	ldr	r1, [sp, #4]
    85c6:	4001      	ands	r1, r0
    85c8:	b2cd      	uxtb	r5, r1
    85ca:	2100      	movs	r1, #0
    85cc:	0312      	lsls	r2, r2, #12
    85ce:	0d0b      	lsrs	r3, r1, #20
    85d0:	0b12      	lsrs	r2, r2, #12
    85d2:	051b      	lsls	r3, r3, #20
    85d4:	4313      	orrs	r3, r2
    85d6:	4a43      	ldr	r2, [pc, #268]	; (86e4 <__aeabi_dmul+0x1e8>)
    85d8:	0524      	lsls	r4, r4, #20
    85da:	4013      	ands	r3, r2
    85dc:	431c      	orrs	r4, r3
    85de:	0064      	lsls	r4, r4, #1
    85e0:	07ed      	lsls	r5, r5, #31
    85e2:	0864      	lsrs	r4, r4, #1
    85e4:	432c      	orrs	r4, r5
    85e6:	4648      	mov	r0, r9
    85e8:	0021      	movs	r1, r4
    85ea:	b007      	add	sp, #28
    85ec:	bc3c      	pop	{r2, r3, r4, r5}
    85ee:	4690      	mov	r8, r2
    85f0:	4699      	mov	r9, r3
    85f2:	46a2      	mov	sl, r4
    85f4:	46ab      	mov	fp, r5
    85f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    85f8:	4303      	orrs	r3, r0
    85fa:	4699      	mov	r9, r3
    85fc:	d04f      	beq.n	869e <__aeabi_dmul+0x1a2>
    85fe:	465b      	mov	r3, fp
    8600:	2b00      	cmp	r3, #0
    8602:	d100      	bne.n	8606 <__aeabi_dmul+0x10a>
    8604:	e189      	b.n	891a <__aeabi_dmul+0x41e>
    8606:	4658      	mov	r0, fp
    8608:	f000 fd9a 	bl	9140 <__clzsi2>
    860c:	0003      	movs	r3, r0
    860e:	3b0b      	subs	r3, #11
    8610:	2b1c      	cmp	r3, #28
    8612:	dd00      	ble.n	8616 <__aeabi_dmul+0x11a>
    8614:	e17a      	b.n	890c <__aeabi_dmul+0x410>
    8616:	221d      	movs	r2, #29
    8618:	1ad3      	subs	r3, r2, r3
    861a:	003a      	movs	r2, r7
    861c:	0001      	movs	r1, r0
    861e:	465c      	mov	r4, fp
    8620:	40da      	lsrs	r2, r3
    8622:	3908      	subs	r1, #8
    8624:	408c      	lsls	r4, r1
    8626:	0013      	movs	r3, r2
    8628:	408f      	lsls	r7, r1
    862a:	4323      	orrs	r3, r4
    862c:	469b      	mov	fp, r3
    862e:	46b9      	mov	r9, r7
    8630:	2300      	movs	r3, #0
    8632:	4e2d      	ldr	r6, [pc, #180]	; (86e8 <__aeabi_dmul+0x1ec>)
    8634:	2700      	movs	r7, #0
    8636:	1a36      	subs	r6, r6, r0
    8638:	9302      	str	r3, [sp, #8]
    863a:	e784      	b.n	8546 <__aeabi_dmul+0x4a>
    863c:	4653      	mov	r3, sl
    863e:	4323      	orrs	r3, r4
    8640:	d12a      	bne.n	8698 <__aeabi_dmul+0x19c>
    8642:	2400      	movs	r4, #0
    8644:	2002      	movs	r0, #2
    8646:	e796      	b.n	8576 <__aeabi_dmul+0x7a>
    8648:	4653      	mov	r3, sl
    864a:	4323      	orrs	r3, r4
    864c:	d020      	beq.n	8690 <__aeabi_dmul+0x194>
    864e:	2c00      	cmp	r4, #0
    8650:	d100      	bne.n	8654 <__aeabi_dmul+0x158>
    8652:	e157      	b.n	8904 <__aeabi_dmul+0x408>
    8654:	0020      	movs	r0, r4
    8656:	f000 fd73 	bl	9140 <__clzsi2>
    865a:	0003      	movs	r3, r0
    865c:	3b0b      	subs	r3, #11
    865e:	2b1c      	cmp	r3, #28
    8660:	dd00      	ble.n	8664 <__aeabi_dmul+0x168>
    8662:	e149      	b.n	88f8 <__aeabi_dmul+0x3fc>
    8664:	211d      	movs	r1, #29
    8666:	1acb      	subs	r3, r1, r3
    8668:	4651      	mov	r1, sl
    866a:	0002      	movs	r2, r0
    866c:	40d9      	lsrs	r1, r3
    866e:	4653      	mov	r3, sl
    8670:	3a08      	subs	r2, #8
    8672:	4094      	lsls	r4, r2
    8674:	4093      	lsls	r3, r2
    8676:	430c      	orrs	r4, r1
    8678:	4a1b      	ldr	r2, [pc, #108]	; (86e8 <__aeabi_dmul+0x1ec>)
    867a:	1a12      	subs	r2, r2, r0
    867c:	2000      	movs	r0, #0
    867e:	e77a      	b.n	8576 <__aeabi_dmul+0x7a>
    8680:	2501      	movs	r5, #1
    8682:	9b01      	ldr	r3, [sp, #4]
    8684:	4c14      	ldr	r4, [pc, #80]	; (86d8 <__aeabi_dmul+0x1dc>)
    8686:	401d      	ands	r5, r3
    8688:	2300      	movs	r3, #0
    868a:	2200      	movs	r2, #0
    868c:	4699      	mov	r9, r3
    868e:	e79c      	b.n	85ca <__aeabi_dmul+0xce>
    8690:	2400      	movs	r4, #0
    8692:	2200      	movs	r2, #0
    8694:	2001      	movs	r0, #1
    8696:	e76e      	b.n	8576 <__aeabi_dmul+0x7a>
    8698:	4653      	mov	r3, sl
    869a:	2003      	movs	r0, #3
    869c:	e76b      	b.n	8576 <__aeabi_dmul+0x7a>
    869e:	2300      	movs	r3, #0
    86a0:	469b      	mov	fp, r3
    86a2:	3301      	adds	r3, #1
    86a4:	2704      	movs	r7, #4
    86a6:	2600      	movs	r6, #0
    86a8:	9302      	str	r3, [sp, #8]
    86aa:	e74c      	b.n	8546 <__aeabi_dmul+0x4a>
    86ac:	2303      	movs	r3, #3
    86ae:	4681      	mov	r9, r0
    86b0:	270c      	movs	r7, #12
    86b2:	9302      	str	r3, [sp, #8]
    86b4:	e747      	b.n	8546 <__aeabi_dmul+0x4a>
    86b6:	2280      	movs	r2, #128	; 0x80
    86b8:	2300      	movs	r3, #0
    86ba:	2500      	movs	r5, #0
    86bc:	0312      	lsls	r2, r2, #12
    86be:	4699      	mov	r9, r3
    86c0:	4c05      	ldr	r4, [pc, #20]	; (86d8 <__aeabi_dmul+0x1dc>)
    86c2:	e782      	b.n	85ca <__aeabi_dmul+0xce>
    86c4:	465c      	mov	r4, fp
    86c6:	464b      	mov	r3, r9
    86c8:	9802      	ldr	r0, [sp, #8]
    86ca:	e76f      	b.n	85ac <__aeabi_dmul+0xb0>
    86cc:	465c      	mov	r4, fp
    86ce:	464b      	mov	r3, r9
    86d0:	9501      	str	r5, [sp, #4]
    86d2:	9802      	ldr	r0, [sp, #8]
    86d4:	e76a      	b.n	85ac <__aeabi_dmul+0xb0>
    86d6:	46c0      	nop			; (mov r8, r8)
    86d8:	000007ff 	.word	0x000007ff
    86dc:	fffffc01 	.word	0xfffffc01
    86e0:	0000bd78 	.word	0x0000bd78
    86e4:	800fffff 	.word	0x800fffff
    86e8:	fffffc0d 	.word	0xfffffc0d
    86ec:	464a      	mov	r2, r9
    86ee:	4649      	mov	r1, r9
    86f0:	0c17      	lsrs	r7, r2, #16
    86f2:	0c1a      	lsrs	r2, r3, #16
    86f4:	041b      	lsls	r3, r3, #16
    86f6:	0c1b      	lsrs	r3, r3, #16
    86f8:	0408      	lsls	r0, r1, #16
    86fa:	0019      	movs	r1, r3
    86fc:	0c00      	lsrs	r0, r0, #16
    86fe:	4341      	muls	r1, r0
    8700:	0015      	movs	r5, r2
    8702:	4688      	mov	r8, r1
    8704:	0019      	movs	r1, r3
    8706:	437d      	muls	r5, r7
    8708:	4379      	muls	r1, r7
    870a:	9503      	str	r5, [sp, #12]
    870c:	4689      	mov	r9, r1
    870e:	0029      	movs	r1, r5
    8710:	0015      	movs	r5, r2
    8712:	4345      	muls	r5, r0
    8714:	444d      	add	r5, r9
    8716:	9502      	str	r5, [sp, #8]
    8718:	4645      	mov	r5, r8
    871a:	0c2d      	lsrs	r5, r5, #16
    871c:	46aa      	mov	sl, r5
    871e:	9d02      	ldr	r5, [sp, #8]
    8720:	4455      	add	r5, sl
    8722:	45a9      	cmp	r9, r5
    8724:	d906      	bls.n	8734 <__aeabi_dmul+0x238>
    8726:	468a      	mov	sl, r1
    8728:	2180      	movs	r1, #128	; 0x80
    872a:	0249      	lsls	r1, r1, #9
    872c:	4689      	mov	r9, r1
    872e:	44ca      	add	sl, r9
    8730:	4651      	mov	r1, sl
    8732:	9103      	str	r1, [sp, #12]
    8734:	0c29      	lsrs	r1, r5, #16
    8736:	9104      	str	r1, [sp, #16]
    8738:	4641      	mov	r1, r8
    873a:	0409      	lsls	r1, r1, #16
    873c:	042d      	lsls	r5, r5, #16
    873e:	0c09      	lsrs	r1, r1, #16
    8740:	4688      	mov	r8, r1
    8742:	0029      	movs	r1, r5
    8744:	0c25      	lsrs	r5, r4, #16
    8746:	0424      	lsls	r4, r4, #16
    8748:	4441      	add	r1, r8
    874a:	0c24      	lsrs	r4, r4, #16
    874c:	9105      	str	r1, [sp, #20]
    874e:	0021      	movs	r1, r4
    8750:	4341      	muls	r1, r0
    8752:	4688      	mov	r8, r1
    8754:	0021      	movs	r1, r4
    8756:	4379      	muls	r1, r7
    8758:	468a      	mov	sl, r1
    875a:	4368      	muls	r0, r5
    875c:	4641      	mov	r1, r8
    875e:	4450      	add	r0, sl
    8760:	4681      	mov	r9, r0
    8762:	0c08      	lsrs	r0, r1, #16
    8764:	4448      	add	r0, r9
    8766:	436f      	muls	r7, r5
    8768:	4582      	cmp	sl, r0
    876a:	d903      	bls.n	8774 <__aeabi_dmul+0x278>
    876c:	2180      	movs	r1, #128	; 0x80
    876e:	0249      	lsls	r1, r1, #9
    8770:	4689      	mov	r9, r1
    8772:	444f      	add	r7, r9
    8774:	0c01      	lsrs	r1, r0, #16
    8776:	4689      	mov	r9, r1
    8778:	0039      	movs	r1, r7
    877a:	4449      	add	r1, r9
    877c:	9102      	str	r1, [sp, #8]
    877e:	4641      	mov	r1, r8
    8780:	040f      	lsls	r7, r1, #16
    8782:	9904      	ldr	r1, [sp, #16]
    8784:	0c3f      	lsrs	r7, r7, #16
    8786:	4688      	mov	r8, r1
    8788:	0400      	lsls	r0, r0, #16
    878a:	19c0      	adds	r0, r0, r7
    878c:	4480      	add	r8, r0
    878e:	4641      	mov	r1, r8
    8790:	9104      	str	r1, [sp, #16]
    8792:	4659      	mov	r1, fp
    8794:	0c0f      	lsrs	r7, r1, #16
    8796:	0409      	lsls	r1, r1, #16
    8798:	0c09      	lsrs	r1, r1, #16
    879a:	4688      	mov	r8, r1
    879c:	4359      	muls	r1, r3
    879e:	468a      	mov	sl, r1
    87a0:	0039      	movs	r1, r7
    87a2:	4351      	muls	r1, r2
    87a4:	4689      	mov	r9, r1
    87a6:	4641      	mov	r1, r8
    87a8:	434a      	muls	r2, r1
    87aa:	4651      	mov	r1, sl
    87ac:	0c09      	lsrs	r1, r1, #16
    87ae:	468b      	mov	fp, r1
    87b0:	437b      	muls	r3, r7
    87b2:	18d2      	adds	r2, r2, r3
    87b4:	445a      	add	r2, fp
    87b6:	4293      	cmp	r3, r2
    87b8:	d903      	bls.n	87c2 <__aeabi_dmul+0x2c6>
    87ba:	2380      	movs	r3, #128	; 0x80
    87bc:	025b      	lsls	r3, r3, #9
    87be:	469b      	mov	fp, r3
    87c0:	44d9      	add	r9, fp
    87c2:	4651      	mov	r1, sl
    87c4:	0409      	lsls	r1, r1, #16
    87c6:	0c09      	lsrs	r1, r1, #16
    87c8:	468a      	mov	sl, r1
    87ca:	4641      	mov	r1, r8
    87cc:	4361      	muls	r1, r4
    87ce:	437c      	muls	r4, r7
    87d0:	0c13      	lsrs	r3, r2, #16
    87d2:	0412      	lsls	r2, r2, #16
    87d4:	444b      	add	r3, r9
    87d6:	4452      	add	r2, sl
    87d8:	46a1      	mov	r9, r4
    87da:	468a      	mov	sl, r1
    87dc:	003c      	movs	r4, r7
    87de:	4641      	mov	r1, r8
    87e0:	436c      	muls	r4, r5
    87e2:	434d      	muls	r5, r1
    87e4:	4651      	mov	r1, sl
    87e6:	444d      	add	r5, r9
    87e8:	0c0f      	lsrs	r7, r1, #16
    87ea:	197d      	adds	r5, r7, r5
    87ec:	45a9      	cmp	r9, r5
    87ee:	d903      	bls.n	87f8 <__aeabi_dmul+0x2fc>
    87f0:	2180      	movs	r1, #128	; 0x80
    87f2:	0249      	lsls	r1, r1, #9
    87f4:	4688      	mov	r8, r1
    87f6:	4444      	add	r4, r8
    87f8:	9f04      	ldr	r7, [sp, #16]
    87fa:	9903      	ldr	r1, [sp, #12]
    87fc:	46b8      	mov	r8, r7
    87fe:	4441      	add	r1, r8
    8800:	468b      	mov	fp, r1
    8802:	4583      	cmp	fp, r0
    8804:	4180      	sbcs	r0, r0
    8806:	4241      	negs	r1, r0
    8808:	4688      	mov	r8, r1
    880a:	4651      	mov	r1, sl
    880c:	0408      	lsls	r0, r1, #16
    880e:	042f      	lsls	r7, r5, #16
    8810:	0c00      	lsrs	r0, r0, #16
    8812:	183f      	adds	r7, r7, r0
    8814:	4658      	mov	r0, fp
    8816:	9902      	ldr	r1, [sp, #8]
    8818:	1810      	adds	r0, r2, r0
    881a:	4689      	mov	r9, r1
    881c:	4290      	cmp	r0, r2
    881e:	4192      	sbcs	r2, r2
    8820:	444f      	add	r7, r9
    8822:	46ba      	mov	sl, r7
    8824:	4252      	negs	r2, r2
    8826:	4699      	mov	r9, r3
    8828:	4693      	mov	fp, r2
    882a:	44c2      	add	sl, r8
    882c:	44d1      	add	r9, sl
    882e:	44cb      	add	fp, r9
    8830:	428f      	cmp	r7, r1
    8832:	41bf      	sbcs	r7, r7
    8834:	45c2      	cmp	sl, r8
    8836:	4189      	sbcs	r1, r1
    8838:	4599      	cmp	r9, r3
    883a:	419b      	sbcs	r3, r3
    883c:	4593      	cmp	fp, r2
    883e:	4192      	sbcs	r2, r2
    8840:	427f      	negs	r7, r7
    8842:	4249      	negs	r1, r1
    8844:	0c2d      	lsrs	r5, r5, #16
    8846:	4252      	negs	r2, r2
    8848:	430f      	orrs	r7, r1
    884a:	425b      	negs	r3, r3
    884c:	4313      	orrs	r3, r2
    884e:	197f      	adds	r7, r7, r5
    8850:	18ff      	adds	r7, r7, r3
    8852:	465b      	mov	r3, fp
    8854:	193c      	adds	r4, r7, r4
    8856:	0ddb      	lsrs	r3, r3, #23
    8858:	9a05      	ldr	r2, [sp, #20]
    885a:	0264      	lsls	r4, r4, #9
    885c:	431c      	orrs	r4, r3
    885e:	0243      	lsls	r3, r0, #9
    8860:	4313      	orrs	r3, r2
    8862:	1e5d      	subs	r5, r3, #1
    8864:	41ab      	sbcs	r3, r5
    8866:	465a      	mov	r2, fp
    8868:	0dc0      	lsrs	r0, r0, #23
    886a:	4303      	orrs	r3, r0
    886c:	0252      	lsls	r2, r2, #9
    886e:	4313      	orrs	r3, r2
    8870:	01e2      	lsls	r2, r4, #7
    8872:	d556      	bpl.n	8922 <__aeabi_dmul+0x426>
    8874:	2001      	movs	r0, #1
    8876:	085a      	lsrs	r2, r3, #1
    8878:	4003      	ands	r3, r0
    887a:	4313      	orrs	r3, r2
    887c:	07e2      	lsls	r2, r4, #31
    887e:	4313      	orrs	r3, r2
    8880:	0864      	lsrs	r4, r4, #1
    8882:	485a      	ldr	r0, [pc, #360]	; (89ec <__aeabi_dmul+0x4f0>)
    8884:	4460      	add	r0, ip
    8886:	2800      	cmp	r0, #0
    8888:	dd4d      	ble.n	8926 <__aeabi_dmul+0x42a>
    888a:	075a      	lsls	r2, r3, #29
    888c:	d009      	beq.n	88a2 <__aeabi_dmul+0x3a6>
    888e:	220f      	movs	r2, #15
    8890:	401a      	ands	r2, r3
    8892:	2a04      	cmp	r2, #4
    8894:	d005      	beq.n	88a2 <__aeabi_dmul+0x3a6>
    8896:	1d1a      	adds	r2, r3, #4
    8898:	429a      	cmp	r2, r3
    889a:	419b      	sbcs	r3, r3
    889c:	425b      	negs	r3, r3
    889e:	18e4      	adds	r4, r4, r3
    88a0:	0013      	movs	r3, r2
    88a2:	01e2      	lsls	r2, r4, #7
    88a4:	d504      	bpl.n	88b0 <__aeabi_dmul+0x3b4>
    88a6:	2080      	movs	r0, #128	; 0x80
    88a8:	4a51      	ldr	r2, [pc, #324]	; (89f0 <__aeabi_dmul+0x4f4>)
    88aa:	00c0      	lsls	r0, r0, #3
    88ac:	4014      	ands	r4, r2
    88ae:	4460      	add	r0, ip
    88b0:	4a50      	ldr	r2, [pc, #320]	; (89f4 <__aeabi_dmul+0x4f8>)
    88b2:	4290      	cmp	r0, r2
    88b4:	dd00      	ble.n	88b8 <__aeabi_dmul+0x3bc>
    88b6:	e6e3      	b.n	8680 <__aeabi_dmul+0x184>
    88b8:	2501      	movs	r5, #1
    88ba:	08db      	lsrs	r3, r3, #3
    88bc:	0762      	lsls	r2, r4, #29
    88be:	431a      	orrs	r2, r3
    88c0:	0264      	lsls	r4, r4, #9
    88c2:	9b01      	ldr	r3, [sp, #4]
    88c4:	4691      	mov	r9, r2
    88c6:	0b22      	lsrs	r2, r4, #12
    88c8:	0544      	lsls	r4, r0, #21
    88ca:	0d64      	lsrs	r4, r4, #21
    88cc:	401d      	ands	r5, r3
    88ce:	e67c      	b.n	85ca <__aeabi_dmul+0xce>
    88d0:	2280      	movs	r2, #128	; 0x80
    88d2:	4659      	mov	r1, fp
    88d4:	0312      	lsls	r2, r2, #12
    88d6:	4211      	tst	r1, r2
    88d8:	d008      	beq.n	88ec <__aeabi_dmul+0x3f0>
    88da:	4214      	tst	r4, r2
    88dc:	d106      	bne.n	88ec <__aeabi_dmul+0x3f0>
    88de:	4322      	orrs	r2, r4
    88e0:	0312      	lsls	r2, r2, #12
    88e2:	0b12      	lsrs	r2, r2, #12
    88e4:	4645      	mov	r5, r8
    88e6:	4699      	mov	r9, r3
    88e8:	4c43      	ldr	r4, [pc, #268]	; (89f8 <__aeabi_dmul+0x4fc>)
    88ea:	e66e      	b.n	85ca <__aeabi_dmul+0xce>
    88ec:	465b      	mov	r3, fp
    88ee:	431a      	orrs	r2, r3
    88f0:	0312      	lsls	r2, r2, #12
    88f2:	0b12      	lsrs	r2, r2, #12
    88f4:	4c40      	ldr	r4, [pc, #256]	; (89f8 <__aeabi_dmul+0x4fc>)
    88f6:	e668      	b.n	85ca <__aeabi_dmul+0xce>
    88f8:	0003      	movs	r3, r0
    88fa:	4654      	mov	r4, sl
    88fc:	3b28      	subs	r3, #40	; 0x28
    88fe:	409c      	lsls	r4, r3
    8900:	2300      	movs	r3, #0
    8902:	e6b9      	b.n	8678 <__aeabi_dmul+0x17c>
    8904:	f000 fc1c 	bl	9140 <__clzsi2>
    8908:	3020      	adds	r0, #32
    890a:	e6a6      	b.n	865a <__aeabi_dmul+0x15e>
    890c:	0003      	movs	r3, r0
    890e:	3b28      	subs	r3, #40	; 0x28
    8910:	409f      	lsls	r7, r3
    8912:	2300      	movs	r3, #0
    8914:	46bb      	mov	fp, r7
    8916:	4699      	mov	r9, r3
    8918:	e68a      	b.n	8630 <__aeabi_dmul+0x134>
    891a:	f000 fc11 	bl	9140 <__clzsi2>
    891e:	3020      	adds	r0, #32
    8920:	e674      	b.n	860c <__aeabi_dmul+0x110>
    8922:	46b4      	mov	ip, r6
    8924:	e7ad      	b.n	8882 <__aeabi_dmul+0x386>
    8926:	2501      	movs	r5, #1
    8928:	1a2a      	subs	r2, r5, r0
    892a:	2a38      	cmp	r2, #56	; 0x38
    892c:	dd06      	ble.n	893c <__aeabi_dmul+0x440>
    892e:	9b01      	ldr	r3, [sp, #4]
    8930:	2400      	movs	r4, #0
    8932:	401d      	ands	r5, r3
    8934:	2300      	movs	r3, #0
    8936:	2200      	movs	r2, #0
    8938:	4699      	mov	r9, r3
    893a:	e646      	b.n	85ca <__aeabi_dmul+0xce>
    893c:	2a1f      	cmp	r2, #31
    893e:	dc21      	bgt.n	8984 <__aeabi_dmul+0x488>
    8940:	2520      	movs	r5, #32
    8942:	0020      	movs	r0, r4
    8944:	1aad      	subs	r5, r5, r2
    8946:	001e      	movs	r6, r3
    8948:	40ab      	lsls	r3, r5
    894a:	40a8      	lsls	r0, r5
    894c:	40d6      	lsrs	r6, r2
    894e:	1e5d      	subs	r5, r3, #1
    8950:	41ab      	sbcs	r3, r5
    8952:	4330      	orrs	r0, r6
    8954:	4318      	orrs	r0, r3
    8956:	40d4      	lsrs	r4, r2
    8958:	0743      	lsls	r3, r0, #29
    895a:	d009      	beq.n	8970 <__aeabi_dmul+0x474>
    895c:	230f      	movs	r3, #15
    895e:	4003      	ands	r3, r0
    8960:	2b04      	cmp	r3, #4
    8962:	d005      	beq.n	8970 <__aeabi_dmul+0x474>
    8964:	0003      	movs	r3, r0
    8966:	1d18      	adds	r0, r3, #4
    8968:	4298      	cmp	r0, r3
    896a:	419b      	sbcs	r3, r3
    896c:	425b      	negs	r3, r3
    896e:	18e4      	adds	r4, r4, r3
    8970:	0223      	lsls	r3, r4, #8
    8972:	d521      	bpl.n	89b8 <__aeabi_dmul+0x4bc>
    8974:	2501      	movs	r5, #1
    8976:	9b01      	ldr	r3, [sp, #4]
    8978:	2401      	movs	r4, #1
    897a:	401d      	ands	r5, r3
    897c:	2300      	movs	r3, #0
    897e:	2200      	movs	r2, #0
    8980:	4699      	mov	r9, r3
    8982:	e622      	b.n	85ca <__aeabi_dmul+0xce>
    8984:	251f      	movs	r5, #31
    8986:	0021      	movs	r1, r4
    8988:	426d      	negs	r5, r5
    898a:	1a28      	subs	r0, r5, r0
    898c:	40c1      	lsrs	r1, r0
    898e:	0008      	movs	r0, r1
    8990:	2a20      	cmp	r2, #32
    8992:	d01d      	beq.n	89d0 <__aeabi_dmul+0x4d4>
    8994:	355f      	adds	r5, #95	; 0x5f
    8996:	1aaa      	subs	r2, r5, r2
    8998:	4094      	lsls	r4, r2
    899a:	4323      	orrs	r3, r4
    899c:	1e5c      	subs	r4, r3, #1
    899e:	41a3      	sbcs	r3, r4
    89a0:	2507      	movs	r5, #7
    89a2:	4303      	orrs	r3, r0
    89a4:	401d      	ands	r5, r3
    89a6:	2200      	movs	r2, #0
    89a8:	2d00      	cmp	r5, #0
    89aa:	d009      	beq.n	89c0 <__aeabi_dmul+0x4c4>
    89ac:	220f      	movs	r2, #15
    89ae:	2400      	movs	r4, #0
    89b0:	401a      	ands	r2, r3
    89b2:	0018      	movs	r0, r3
    89b4:	2a04      	cmp	r2, #4
    89b6:	d1d6      	bne.n	8966 <__aeabi_dmul+0x46a>
    89b8:	0003      	movs	r3, r0
    89ba:	0765      	lsls	r5, r4, #29
    89bc:	0264      	lsls	r4, r4, #9
    89be:	0b22      	lsrs	r2, r4, #12
    89c0:	08db      	lsrs	r3, r3, #3
    89c2:	432b      	orrs	r3, r5
    89c4:	2501      	movs	r5, #1
    89c6:	4699      	mov	r9, r3
    89c8:	9b01      	ldr	r3, [sp, #4]
    89ca:	2400      	movs	r4, #0
    89cc:	401d      	ands	r5, r3
    89ce:	e5fc      	b.n	85ca <__aeabi_dmul+0xce>
    89d0:	2400      	movs	r4, #0
    89d2:	e7e2      	b.n	899a <__aeabi_dmul+0x49e>
    89d4:	2280      	movs	r2, #128	; 0x80
    89d6:	2501      	movs	r5, #1
    89d8:	0312      	lsls	r2, r2, #12
    89da:	4322      	orrs	r2, r4
    89dc:	9901      	ldr	r1, [sp, #4]
    89de:	0312      	lsls	r2, r2, #12
    89e0:	0b12      	lsrs	r2, r2, #12
    89e2:	400d      	ands	r5, r1
    89e4:	4699      	mov	r9, r3
    89e6:	4c04      	ldr	r4, [pc, #16]	; (89f8 <__aeabi_dmul+0x4fc>)
    89e8:	e5ef      	b.n	85ca <__aeabi_dmul+0xce>
    89ea:	46c0      	nop			; (mov r8, r8)
    89ec:	000003ff 	.word	0x000003ff
    89f0:	feffffff 	.word	0xfeffffff
    89f4:	000007fe 	.word	0x000007fe
    89f8:	000007ff 	.word	0x000007ff

000089fc <__aeabi_dsub>:
    89fc:	b5f0      	push	{r4, r5, r6, r7, lr}
    89fe:	4646      	mov	r6, r8
    8a00:	46d6      	mov	lr, sl
    8a02:	464f      	mov	r7, r9
    8a04:	030c      	lsls	r4, r1, #12
    8a06:	b5c0      	push	{r6, r7, lr}
    8a08:	0fcd      	lsrs	r5, r1, #31
    8a0a:	004e      	lsls	r6, r1, #1
    8a0c:	0a61      	lsrs	r1, r4, #9
    8a0e:	0f44      	lsrs	r4, r0, #29
    8a10:	430c      	orrs	r4, r1
    8a12:	00c1      	lsls	r1, r0, #3
    8a14:	0058      	lsls	r0, r3, #1
    8a16:	0d40      	lsrs	r0, r0, #21
    8a18:	4684      	mov	ip, r0
    8a1a:	468a      	mov	sl, r1
    8a1c:	000f      	movs	r7, r1
    8a1e:	0319      	lsls	r1, r3, #12
    8a20:	0f50      	lsrs	r0, r2, #29
    8a22:	0a49      	lsrs	r1, r1, #9
    8a24:	4301      	orrs	r1, r0
    8a26:	48c6      	ldr	r0, [pc, #792]	; (8d40 <__aeabi_dsub+0x344>)
    8a28:	0d76      	lsrs	r6, r6, #21
    8a2a:	46a8      	mov	r8, r5
    8a2c:	0fdb      	lsrs	r3, r3, #31
    8a2e:	00d2      	lsls	r2, r2, #3
    8a30:	4584      	cmp	ip, r0
    8a32:	d100      	bne.n	8a36 <__aeabi_dsub+0x3a>
    8a34:	e0d8      	b.n	8be8 <__aeabi_dsub+0x1ec>
    8a36:	2001      	movs	r0, #1
    8a38:	4043      	eors	r3, r0
    8a3a:	42ab      	cmp	r3, r5
    8a3c:	d100      	bne.n	8a40 <__aeabi_dsub+0x44>
    8a3e:	e0a6      	b.n	8b8e <__aeabi_dsub+0x192>
    8a40:	4660      	mov	r0, ip
    8a42:	1a35      	subs	r5, r6, r0
    8a44:	2d00      	cmp	r5, #0
    8a46:	dc00      	bgt.n	8a4a <__aeabi_dsub+0x4e>
    8a48:	e105      	b.n	8c56 <__aeabi_dsub+0x25a>
    8a4a:	2800      	cmp	r0, #0
    8a4c:	d110      	bne.n	8a70 <__aeabi_dsub+0x74>
    8a4e:	000b      	movs	r3, r1
    8a50:	4313      	orrs	r3, r2
    8a52:	d100      	bne.n	8a56 <__aeabi_dsub+0x5a>
    8a54:	e0d7      	b.n	8c06 <__aeabi_dsub+0x20a>
    8a56:	1e6b      	subs	r3, r5, #1
    8a58:	2b00      	cmp	r3, #0
    8a5a:	d000      	beq.n	8a5e <__aeabi_dsub+0x62>
    8a5c:	e14b      	b.n	8cf6 <__aeabi_dsub+0x2fa>
    8a5e:	4653      	mov	r3, sl
    8a60:	1a9f      	subs	r7, r3, r2
    8a62:	45ba      	cmp	sl, r7
    8a64:	4180      	sbcs	r0, r0
    8a66:	1a64      	subs	r4, r4, r1
    8a68:	4240      	negs	r0, r0
    8a6a:	1a24      	subs	r4, r4, r0
    8a6c:	2601      	movs	r6, #1
    8a6e:	e01e      	b.n	8aae <__aeabi_dsub+0xb2>
    8a70:	4bb3      	ldr	r3, [pc, #716]	; (8d40 <__aeabi_dsub+0x344>)
    8a72:	429e      	cmp	r6, r3
    8a74:	d048      	beq.n	8b08 <__aeabi_dsub+0x10c>
    8a76:	2380      	movs	r3, #128	; 0x80
    8a78:	041b      	lsls	r3, r3, #16
    8a7a:	4319      	orrs	r1, r3
    8a7c:	2d38      	cmp	r5, #56	; 0x38
    8a7e:	dd00      	ble.n	8a82 <__aeabi_dsub+0x86>
    8a80:	e119      	b.n	8cb6 <__aeabi_dsub+0x2ba>
    8a82:	2d1f      	cmp	r5, #31
    8a84:	dd00      	ble.n	8a88 <__aeabi_dsub+0x8c>
    8a86:	e14c      	b.n	8d22 <__aeabi_dsub+0x326>
    8a88:	2320      	movs	r3, #32
    8a8a:	000f      	movs	r7, r1
    8a8c:	1b5b      	subs	r3, r3, r5
    8a8e:	0010      	movs	r0, r2
    8a90:	409a      	lsls	r2, r3
    8a92:	409f      	lsls	r7, r3
    8a94:	40e8      	lsrs	r0, r5
    8a96:	1e53      	subs	r3, r2, #1
    8a98:	419a      	sbcs	r2, r3
    8a9a:	40e9      	lsrs	r1, r5
    8a9c:	4307      	orrs	r7, r0
    8a9e:	4317      	orrs	r7, r2
    8aa0:	4653      	mov	r3, sl
    8aa2:	1bdf      	subs	r7, r3, r7
    8aa4:	1a61      	subs	r1, r4, r1
    8aa6:	45ba      	cmp	sl, r7
    8aa8:	41a4      	sbcs	r4, r4
    8aaa:	4264      	negs	r4, r4
    8aac:	1b0c      	subs	r4, r1, r4
    8aae:	0223      	lsls	r3, r4, #8
    8ab0:	d400      	bmi.n	8ab4 <__aeabi_dsub+0xb8>
    8ab2:	e0c5      	b.n	8c40 <__aeabi_dsub+0x244>
    8ab4:	0264      	lsls	r4, r4, #9
    8ab6:	0a65      	lsrs	r5, r4, #9
    8ab8:	2d00      	cmp	r5, #0
    8aba:	d100      	bne.n	8abe <__aeabi_dsub+0xc2>
    8abc:	e0f6      	b.n	8cac <__aeabi_dsub+0x2b0>
    8abe:	0028      	movs	r0, r5
    8ac0:	f000 fb3e 	bl	9140 <__clzsi2>
    8ac4:	0003      	movs	r3, r0
    8ac6:	3b08      	subs	r3, #8
    8ac8:	2b1f      	cmp	r3, #31
    8aca:	dd00      	ble.n	8ace <__aeabi_dsub+0xd2>
    8acc:	e0e9      	b.n	8ca2 <__aeabi_dsub+0x2a6>
    8ace:	2220      	movs	r2, #32
    8ad0:	003c      	movs	r4, r7
    8ad2:	1ad2      	subs	r2, r2, r3
    8ad4:	409d      	lsls	r5, r3
    8ad6:	40d4      	lsrs	r4, r2
    8ad8:	409f      	lsls	r7, r3
    8ada:	4325      	orrs	r5, r4
    8adc:	429e      	cmp	r6, r3
    8ade:	dd00      	ble.n	8ae2 <__aeabi_dsub+0xe6>
    8ae0:	e0db      	b.n	8c9a <__aeabi_dsub+0x29e>
    8ae2:	1b9e      	subs	r6, r3, r6
    8ae4:	1c73      	adds	r3, r6, #1
    8ae6:	2b1f      	cmp	r3, #31
    8ae8:	dd00      	ble.n	8aec <__aeabi_dsub+0xf0>
    8aea:	e10a      	b.n	8d02 <__aeabi_dsub+0x306>
    8aec:	2220      	movs	r2, #32
    8aee:	0038      	movs	r0, r7
    8af0:	1ad2      	subs	r2, r2, r3
    8af2:	0029      	movs	r1, r5
    8af4:	4097      	lsls	r7, r2
    8af6:	002c      	movs	r4, r5
    8af8:	4091      	lsls	r1, r2
    8afa:	40d8      	lsrs	r0, r3
    8afc:	1e7a      	subs	r2, r7, #1
    8afe:	4197      	sbcs	r7, r2
    8b00:	40dc      	lsrs	r4, r3
    8b02:	2600      	movs	r6, #0
    8b04:	4301      	orrs	r1, r0
    8b06:	430f      	orrs	r7, r1
    8b08:	077b      	lsls	r3, r7, #29
    8b0a:	d009      	beq.n	8b20 <__aeabi_dsub+0x124>
    8b0c:	230f      	movs	r3, #15
    8b0e:	403b      	ands	r3, r7
    8b10:	2b04      	cmp	r3, #4
    8b12:	d005      	beq.n	8b20 <__aeabi_dsub+0x124>
    8b14:	1d3b      	adds	r3, r7, #4
    8b16:	42bb      	cmp	r3, r7
    8b18:	41bf      	sbcs	r7, r7
    8b1a:	427f      	negs	r7, r7
    8b1c:	19e4      	adds	r4, r4, r7
    8b1e:	001f      	movs	r7, r3
    8b20:	0223      	lsls	r3, r4, #8
    8b22:	d525      	bpl.n	8b70 <__aeabi_dsub+0x174>
    8b24:	4b86      	ldr	r3, [pc, #536]	; (8d40 <__aeabi_dsub+0x344>)
    8b26:	3601      	adds	r6, #1
    8b28:	429e      	cmp	r6, r3
    8b2a:	d100      	bne.n	8b2e <__aeabi_dsub+0x132>
    8b2c:	e0af      	b.n	8c8e <__aeabi_dsub+0x292>
    8b2e:	4b85      	ldr	r3, [pc, #532]	; (8d44 <__aeabi_dsub+0x348>)
    8b30:	2501      	movs	r5, #1
    8b32:	401c      	ands	r4, r3
    8b34:	4643      	mov	r3, r8
    8b36:	0762      	lsls	r2, r4, #29
    8b38:	08ff      	lsrs	r7, r7, #3
    8b3a:	0264      	lsls	r4, r4, #9
    8b3c:	0576      	lsls	r6, r6, #21
    8b3e:	4317      	orrs	r7, r2
    8b40:	0b24      	lsrs	r4, r4, #12
    8b42:	0d76      	lsrs	r6, r6, #21
    8b44:	401d      	ands	r5, r3
    8b46:	2100      	movs	r1, #0
    8b48:	0324      	lsls	r4, r4, #12
    8b4a:	0b23      	lsrs	r3, r4, #12
    8b4c:	0d0c      	lsrs	r4, r1, #20
    8b4e:	4a7e      	ldr	r2, [pc, #504]	; (8d48 <__aeabi_dsub+0x34c>)
    8b50:	0524      	lsls	r4, r4, #20
    8b52:	431c      	orrs	r4, r3
    8b54:	4014      	ands	r4, r2
    8b56:	0533      	lsls	r3, r6, #20
    8b58:	4323      	orrs	r3, r4
    8b5a:	005b      	lsls	r3, r3, #1
    8b5c:	07ed      	lsls	r5, r5, #31
    8b5e:	085b      	lsrs	r3, r3, #1
    8b60:	432b      	orrs	r3, r5
    8b62:	0038      	movs	r0, r7
    8b64:	0019      	movs	r1, r3
    8b66:	bc1c      	pop	{r2, r3, r4}
    8b68:	4690      	mov	r8, r2
    8b6a:	4699      	mov	r9, r3
    8b6c:	46a2      	mov	sl, r4
    8b6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8b70:	2501      	movs	r5, #1
    8b72:	4643      	mov	r3, r8
    8b74:	0762      	lsls	r2, r4, #29
    8b76:	08ff      	lsrs	r7, r7, #3
    8b78:	4317      	orrs	r7, r2
    8b7a:	08e4      	lsrs	r4, r4, #3
    8b7c:	401d      	ands	r5, r3
    8b7e:	4b70      	ldr	r3, [pc, #448]	; (8d40 <__aeabi_dsub+0x344>)
    8b80:	429e      	cmp	r6, r3
    8b82:	d036      	beq.n	8bf2 <__aeabi_dsub+0x1f6>
    8b84:	0324      	lsls	r4, r4, #12
    8b86:	0576      	lsls	r6, r6, #21
    8b88:	0b24      	lsrs	r4, r4, #12
    8b8a:	0d76      	lsrs	r6, r6, #21
    8b8c:	e7db      	b.n	8b46 <__aeabi_dsub+0x14a>
    8b8e:	4663      	mov	r3, ip
    8b90:	1af3      	subs	r3, r6, r3
    8b92:	2b00      	cmp	r3, #0
    8b94:	dc00      	bgt.n	8b98 <__aeabi_dsub+0x19c>
    8b96:	e094      	b.n	8cc2 <__aeabi_dsub+0x2c6>
    8b98:	4660      	mov	r0, ip
    8b9a:	2800      	cmp	r0, #0
    8b9c:	d035      	beq.n	8c0a <__aeabi_dsub+0x20e>
    8b9e:	4868      	ldr	r0, [pc, #416]	; (8d40 <__aeabi_dsub+0x344>)
    8ba0:	4286      	cmp	r6, r0
    8ba2:	d0b1      	beq.n	8b08 <__aeabi_dsub+0x10c>
    8ba4:	2780      	movs	r7, #128	; 0x80
    8ba6:	043f      	lsls	r7, r7, #16
    8ba8:	4339      	orrs	r1, r7
    8baa:	2b38      	cmp	r3, #56	; 0x38
    8bac:	dc00      	bgt.n	8bb0 <__aeabi_dsub+0x1b4>
    8bae:	e0fd      	b.n	8dac <__aeabi_dsub+0x3b0>
    8bb0:	430a      	orrs	r2, r1
    8bb2:	0017      	movs	r7, r2
    8bb4:	2100      	movs	r1, #0
    8bb6:	1e7a      	subs	r2, r7, #1
    8bb8:	4197      	sbcs	r7, r2
    8bba:	4457      	add	r7, sl
    8bbc:	4557      	cmp	r7, sl
    8bbe:	4180      	sbcs	r0, r0
    8bc0:	1909      	adds	r1, r1, r4
    8bc2:	4244      	negs	r4, r0
    8bc4:	190c      	adds	r4, r1, r4
    8bc6:	0223      	lsls	r3, r4, #8
    8bc8:	d53a      	bpl.n	8c40 <__aeabi_dsub+0x244>
    8bca:	4b5d      	ldr	r3, [pc, #372]	; (8d40 <__aeabi_dsub+0x344>)
    8bcc:	3601      	adds	r6, #1
    8bce:	429e      	cmp	r6, r3
    8bd0:	d100      	bne.n	8bd4 <__aeabi_dsub+0x1d8>
    8bd2:	e14b      	b.n	8e6c <__aeabi_dsub+0x470>
    8bd4:	2201      	movs	r2, #1
    8bd6:	4b5b      	ldr	r3, [pc, #364]	; (8d44 <__aeabi_dsub+0x348>)
    8bd8:	401c      	ands	r4, r3
    8bda:	087b      	lsrs	r3, r7, #1
    8bdc:	4017      	ands	r7, r2
    8bde:	431f      	orrs	r7, r3
    8be0:	07e2      	lsls	r2, r4, #31
    8be2:	4317      	orrs	r7, r2
    8be4:	0864      	lsrs	r4, r4, #1
    8be6:	e78f      	b.n	8b08 <__aeabi_dsub+0x10c>
    8be8:	0008      	movs	r0, r1
    8bea:	4310      	orrs	r0, r2
    8bec:	d000      	beq.n	8bf0 <__aeabi_dsub+0x1f4>
    8bee:	e724      	b.n	8a3a <__aeabi_dsub+0x3e>
    8bf0:	e721      	b.n	8a36 <__aeabi_dsub+0x3a>
    8bf2:	0023      	movs	r3, r4
    8bf4:	433b      	orrs	r3, r7
    8bf6:	d100      	bne.n	8bfa <__aeabi_dsub+0x1fe>
    8bf8:	e1b9      	b.n	8f6e <__aeabi_dsub+0x572>
    8bfa:	2280      	movs	r2, #128	; 0x80
    8bfc:	0312      	lsls	r2, r2, #12
    8bfe:	4314      	orrs	r4, r2
    8c00:	0324      	lsls	r4, r4, #12
    8c02:	0b24      	lsrs	r4, r4, #12
    8c04:	e79f      	b.n	8b46 <__aeabi_dsub+0x14a>
    8c06:	002e      	movs	r6, r5
    8c08:	e77e      	b.n	8b08 <__aeabi_dsub+0x10c>
    8c0a:	0008      	movs	r0, r1
    8c0c:	4310      	orrs	r0, r2
    8c0e:	d100      	bne.n	8c12 <__aeabi_dsub+0x216>
    8c10:	e0ca      	b.n	8da8 <__aeabi_dsub+0x3ac>
    8c12:	1e58      	subs	r0, r3, #1
    8c14:	4684      	mov	ip, r0
    8c16:	2800      	cmp	r0, #0
    8c18:	d000      	beq.n	8c1c <__aeabi_dsub+0x220>
    8c1a:	e0e7      	b.n	8dec <__aeabi_dsub+0x3f0>
    8c1c:	4452      	add	r2, sl
    8c1e:	4552      	cmp	r2, sl
    8c20:	4180      	sbcs	r0, r0
    8c22:	1864      	adds	r4, r4, r1
    8c24:	4240      	negs	r0, r0
    8c26:	1824      	adds	r4, r4, r0
    8c28:	0017      	movs	r7, r2
    8c2a:	2601      	movs	r6, #1
    8c2c:	0223      	lsls	r3, r4, #8
    8c2e:	d507      	bpl.n	8c40 <__aeabi_dsub+0x244>
    8c30:	2602      	movs	r6, #2
    8c32:	e7cf      	b.n	8bd4 <__aeabi_dsub+0x1d8>
    8c34:	4664      	mov	r4, ip
    8c36:	432c      	orrs	r4, r5
    8c38:	d100      	bne.n	8c3c <__aeabi_dsub+0x240>
    8c3a:	e1b3      	b.n	8fa4 <__aeabi_dsub+0x5a8>
    8c3c:	002c      	movs	r4, r5
    8c3e:	4667      	mov	r7, ip
    8c40:	077b      	lsls	r3, r7, #29
    8c42:	d000      	beq.n	8c46 <__aeabi_dsub+0x24a>
    8c44:	e762      	b.n	8b0c <__aeabi_dsub+0x110>
    8c46:	0763      	lsls	r3, r4, #29
    8c48:	08ff      	lsrs	r7, r7, #3
    8c4a:	431f      	orrs	r7, r3
    8c4c:	2501      	movs	r5, #1
    8c4e:	4643      	mov	r3, r8
    8c50:	08e4      	lsrs	r4, r4, #3
    8c52:	401d      	ands	r5, r3
    8c54:	e793      	b.n	8b7e <__aeabi_dsub+0x182>
    8c56:	2d00      	cmp	r5, #0
    8c58:	d178      	bne.n	8d4c <__aeabi_dsub+0x350>
    8c5a:	1c75      	adds	r5, r6, #1
    8c5c:	056d      	lsls	r5, r5, #21
    8c5e:	0d6d      	lsrs	r5, r5, #21
    8c60:	2d01      	cmp	r5, #1
    8c62:	dc00      	bgt.n	8c66 <__aeabi_dsub+0x26a>
    8c64:	e0f2      	b.n	8e4c <__aeabi_dsub+0x450>
    8c66:	4650      	mov	r0, sl
    8c68:	1a80      	subs	r0, r0, r2
    8c6a:	4582      	cmp	sl, r0
    8c6c:	41bf      	sbcs	r7, r7
    8c6e:	1a65      	subs	r5, r4, r1
    8c70:	427f      	negs	r7, r7
    8c72:	1bed      	subs	r5, r5, r7
    8c74:	4684      	mov	ip, r0
    8c76:	0228      	lsls	r0, r5, #8
    8c78:	d400      	bmi.n	8c7c <__aeabi_dsub+0x280>
    8c7a:	e08c      	b.n	8d96 <__aeabi_dsub+0x39a>
    8c7c:	4650      	mov	r0, sl
    8c7e:	1a17      	subs	r7, r2, r0
    8c80:	42ba      	cmp	r2, r7
    8c82:	4192      	sbcs	r2, r2
    8c84:	1b0c      	subs	r4, r1, r4
    8c86:	4255      	negs	r5, r2
    8c88:	1b65      	subs	r5, r4, r5
    8c8a:	4698      	mov	r8, r3
    8c8c:	e714      	b.n	8ab8 <__aeabi_dsub+0xbc>
    8c8e:	2501      	movs	r5, #1
    8c90:	4643      	mov	r3, r8
    8c92:	2400      	movs	r4, #0
    8c94:	401d      	ands	r5, r3
    8c96:	2700      	movs	r7, #0
    8c98:	e755      	b.n	8b46 <__aeabi_dsub+0x14a>
    8c9a:	4c2a      	ldr	r4, [pc, #168]	; (8d44 <__aeabi_dsub+0x348>)
    8c9c:	1af6      	subs	r6, r6, r3
    8c9e:	402c      	ands	r4, r5
    8ca0:	e732      	b.n	8b08 <__aeabi_dsub+0x10c>
    8ca2:	003d      	movs	r5, r7
    8ca4:	3828      	subs	r0, #40	; 0x28
    8ca6:	4085      	lsls	r5, r0
    8ca8:	2700      	movs	r7, #0
    8caa:	e717      	b.n	8adc <__aeabi_dsub+0xe0>
    8cac:	0038      	movs	r0, r7
    8cae:	f000 fa47 	bl	9140 <__clzsi2>
    8cb2:	3020      	adds	r0, #32
    8cb4:	e706      	b.n	8ac4 <__aeabi_dsub+0xc8>
    8cb6:	430a      	orrs	r2, r1
    8cb8:	0017      	movs	r7, r2
    8cba:	2100      	movs	r1, #0
    8cbc:	1e7a      	subs	r2, r7, #1
    8cbe:	4197      	sbcs	r7, r2
    8cc0:	e6ee      	b.n	8aa0 <__aeabi_dsub+0xa4>
    8cc2:	2b00      	cmp	r3, #0
    8cc4:	d000      	beq.n	8cc8 <__aeabi_dsub+0x2cc>
    8cc6:	e0e5      	b.n	8e94 <__aeabi_dsub+0x498>
    8cc8:	1c73      	adds	r3, r6, #1
    8cca:	469c      	mov	ip, r3
    8ccc:	055b      	lsls	r3, r3, #21
    8cce:	0d5b      	lsrs	r3, r3, #21
    8cd0:	2b01      	cmp	r3, #1
    8cd2:	dc00      	bgt.n	8cd6 <__aeabi_dsub+0x2da>
    8cd4:	e09f      	b.n	8e16 <__aeabi_dsub+0x41a>
    8cd6:	4b1a      	ldr	r3, [pc, #104]	; (8d40 <__aeabi_dsub+0x344>)
    8cd8:	459c      	cmp	ip, r3
    8cda:	d100      	bne.n	8cde <__aeabi_dsub+0x2e2>
    8cdc:	e0c5      	b.n	8e6a <__aeabi_dsub+0x46e>
    8cde:	4452      	add	r2, sl
    8ce0:	4552      	cmp	r2, sl
    8ce2:	4180      	sbcs	r0, r0
    8ce4:	1864      	adds	r4, r4, r1
    8ce6:	4240      	negs	r0, r0
    8ce8:	1824      	adds	r4, r4, r0
    8cea:	07e7      	lsls	r7, r4, #31
    8cec:	0852      	lsrs	r2, r2, #1
    8cee:	4317      	orrs	r7, r2
    8cf0:	0864      	lsrs	r4, r4, #1
    8cf2:	4666      	mov	r6, ip
    8cf4:	e708      	b.n	8b08 <__aeabi_dsub+0x10c>
    8cf6:	4812      	ldr	r0, [pc, #72]	; (8d40 <__aeabi_dsub+0x344>)
    8cf8:	4285      	cmp	r5, r0
    8cfa:	d100      	bne.n	8cfe <__aeabi_dsub+0x302>
    8cfc:	e085      	b.n	8e0a <__aeabi_dsub+0x40e>
    8cfe:	001d      	movs	r5, r3
    8d00:	e6bc      	b.n	8a7c <__aeabi_dsub+0x80>
    8d02:	0029      	movs	r1, r5
    8d04:	3e1f      	subs	r6, #31
    8d06:	40f1      	lsrs	r1, r6
    8d08:	2b20      	cmp	r3, #32
    8d0a:	d100      	bne.n	8d0e <__aeabi_dsub+0x312>
    8d0c:	e07f      	b.n	8e0e <__aeabi_dsub+0x412>
    8d0e:	2240      	movs	r2, #64	; 0x40
    8d10:	1ad3      	subs	r3, r2, r3
    8d12:	409d      	lsls	r5, r3
    8d14:	432f      	orrs	r7, r5
    8d16:	1e7d      	subs	r5, r7, #1
    8d18:	41af      	sbcs	r7, r5
    8d1a:	2400      	movs	r4, #0
    8d1c:	430f      	orrs	r7, r1
    8d1e:	2600      	movs	r6, #0
    8d20:	e78e      	b.n	8c40 <__aeabi_dsub+0x244>
    8d22:	002b      	movs	r3, r5
    8d24:	000f      	movs	r7, r1
    8d26:	3b20      	subs	r3, #32
    8d28:	40df      	lsrs	r7, r3
    8d2a:	2d20      	cmp	r5, #32
    8d2c:	d071      	beq.n	8e12 <__aeabi_dsub+0x416>
    8d2e:	2340      	movs	r3, #64	; 0x40
    8d30:	1b5d      	subs	r5, r3, r5
    8d32:	40a9      	lsls	r1, r5
    8d34:	430a      	orrs	r2, r1
    8d36:	1e51      	subs	r1, r2, #1
    8d38:	418a      	sbcs	r2, r1
    8d3a:	2100      	movs	r1, #0
    8d3c:	4317      	orrs	r7, r2
    8d3e:	e6af      	b.n	8aa0 <__aeabi_dsub+0xa4>
    8d40:	000007ff 	.word	0x000007ff
    8d44:	ff7fffff 	.word	0xff7fffff
    8d48:	800fffff 	.word	0x800fffff
    8d4c:	2e00      	cmp	r6, #0
    8d4e:	d03e      	beq.n	8dce <__aeabi_dsub+0x3d2>
    8d50:	4eb3      	ldr	r6, [pc, #716]	; (9020 <__aeabi_dsub+0x624>)
    8d52:	45b4      	cmp	ip, r6
    8d54:	d045      	beq.n	8de2 <__aeabi_dsub+0x3e6>
    8d56:	2680      	movs	r6, #128	; 0x80
    8d58:	0436      	lsls	r6, r6, #16
    8d5a:	426d      	negs	r5, r5
    8d5c:	4334      	orrs	r4, r6
    8d5e:	2d38      	cmp	r5, #56	; 0x38
    8d60:	dd00      	ble.n	8d64 <__aeabi_dsub+0x368>
    8d62:	e0a8      	b.n	8eb6 <__aeabi_dsub+0x4ba>
    8d64:	2d1f      	cmp	r5, #31
    8d66:	dd00      	ble.n	8d6a <__aeabi_dsub+0x36e>
    8d68:	e11f      	b.n	8faa <__aeabi_dsub+0x5ae>
    8d6a:	2620      	movs	r6, #32
    8d6c:	0027      	movs	r7, r4
    8d6e:	4650      	mov	r0, sl
    8d70:	1b76      	subs	r6, r6, r5
    8d72:	40b7      	lsls	r7, r6
    8d74:	40e8      	lsrs	r0, r5
    8d76:	4307      	orrs	r7, r0
    8d78:	4650      	mov	r0, sl
    8d7a:	40b0      	lsls	r0, r6
    8d7c:	1e46      	subs	r6, r0, #1
    8d7e:	41b0      	sbcs	r0, r6
    8d80:	40ec      	lsrs	r4, r5
    8d82:	4338      	orrs	r0, r7
    8d84:	1a17      	subs	r7, r2, r0
    8d86:	42ba      	cmp	r2, r7
    8d88:	4192      	sbcs	r2, r2
    8d8a:	1b0c      	subs	r4, r1, r4
    8d8c:	4252      	negs	r2, r2
    8d8e:	1aa4      	subs	r4, r4, r2
    8d90:	4666      	mov	r6, ip
    8d92:	4698      	mov	r8, r3
    8d94:	e68b      	b.n	8aae <__aeabi_dsub+0xb2>
    8d96:	4664      	mov	r4, ip
    8d98:	4667      	mov	r7, ip
    8d9a:	432c      	orrs	r4, r5
    8d9c:	d000      	beq.n	8da0 <__aeabi_dsub+0x3a4>
    8d9e:	e68b      	b.n	8ab8 <__aeabi_dsub+0xbc>
    8da0:	2500      	movs	r5, #0
    8da2:	2600      	movs	r6, #0
    8da4:	2700      	movs	r7, #0
    8da6:	e6ea      	b.n	8b7e <__aeabi_dsub+0x182>
    8da8:	001e      	movs	r6, r3
    8daa:	e6ad      	b.n	8b08 <__aeabi_dsub+0x10c>
    8dac:	2b1f      	cmp	r3, #31
    8dae:	dc60      	bgt.n	8e72 <__aeabi_dsub+0x476>
    8db0:	2720      	movs	r7, #32
    8db2:	1af8      	subs	r0, r7, r3
    8db4:	000f      	movs	r7, r1
    8db6:	4684      	mov	ip, r0
    8db8:	4087      	lsls	r7, r0
    8dba:	0010      	movs	r0, r2
    8dbc:	40d8      	lsrs	r0, r3
    8dbe:	4307      	orrs	r7, r0
    8dc0:	4660      	mov	r0, ip
    8dc2:	4082      	lsls	r2, r0
    8dc4:	1e50      	subs	r0, r2, #1
    8dc6:	4182      	sbcs	r2, r0
    8dc8:	40d9      	lsrs	r1, r3
    8dca:	4317      	orrs	r7, r2
    8dcc:	e6f5      	b.n	8bba <__aeabi_dsub+0x1be>
    8dce:	0026      	movs	r6, r4
    8dd0:	4650      	mov	r0, sl
    8dd2:	4306      	orrs	r6, r0
    8dd4:	d005      	beq.n	8de2 <__aeabi_dsub+0x3e6>
    8dd6:	43ed      	mvns	r5, r5
    8dd8:	2d00      	cmp	r5, #0
    8dda:	d0d3      	beq.n	8d84 <__aeabi_dsub+0x388>
    8ddc:	4e90      	ldr	r6, [pc, #576]	; (9020 <__aeabi_dsub+0x624>)
    8dde:	45b4      	cmp	ip, r6
    8de0:	d1bd      	bne.n	8d5e <__aeabi_dsub+0x362>
    8de2:	000c      	movs	r4, r1
    8de4:	0017      	movs	r7, r2
    8de6:	4666      	mov	r6, ip
    8de8:	4698      	mov	r8, r3
    8dea:	e68d      	b.n	8b08 <__aeabi_dsub+0x10c>
    8dec:	488c      	ldr	r0, [pc, #560]	; (9020 <__aeabi_dsub+0x624>)
    8dee:	4283      	cmp	r3, r0
    8df0:	d00b      	beq.n	8e0a <__aeabi_dsub+0x40e>
    8df2:	4663      	mov	r3, ip
    8df4:	e6d9      	b.n	8baa <__aeabi_dsub+0x1ae>
    8df6:	2d00      	cmp	r5, #0
    8df8:	d000      	beq.n	8dfc <__aeabi_dsub+0x400>
    8dfa:	e096      	b.n	8f2a <__aeabi_dsub+0x52e>
    8dfc:	0008      	movs	r0, r1
    8dfe:	4310      	orrs	r0, r2
    8e00:	d100      	bne.n	8e04 <__aeabi_dsub+0x408>
    8e02:	e0e2      	b.n	8fca <__aeabi_dsub+0x5ce>
    8e04:	000c      	movs	r4, r1
    8e06:	0017      	movs	r7, r2
    8e08:	4698      	mov	r8, r3
    8e0a:	4e85      	ldr	r6, [pc, #532]	; (9020 <__aeabi_dsub+0x624>)
    8e0c:	e67c      	b.n	8b08 <__aeabi_dsub+0x10c>
    8e0e:	2500      	movs	r5, #0
    8e10:	e780      	b.n	8d14 <__aeabi_dsub+0x318>
    8e12:	2100      	movs	r1, #0
    8e14:	e78e      	b.n	8d34 <__aeabi_dsub+0x338>
    8e16:	0023      	movs	r3, r4
    8e18:	4650      	mov	r0, sl
    8e1a:	4303      	orrs	r3, r0
    8e1c:	2e00      	cmp	r6, #0
    8e1e:	d000      	beq.n	8e22 <__aeabi_dsub+0x426>
    8e20:	e0a8      	b.n	8f74 <__aeabi_dsub+0x578>
    8e22:	2b00      	cmp	r3, #0
    8e24:	d100      	bne.n	8e28 <__aeabi_dsub+0x42c>
    8e26:	e0de      	b.n	8fe6 <__aeabi_dsub+0x5ea>
    8e28:	000b      	movs	r3, r1
    8e2a:	4313      	orrs	r3, r2
    8e2c:	d100      	bne.n	8e30 <__aeabi_dsub+0x434>
    8e2e:	e66b      	b.n	8b08 <__aeabi_dsub+0x10c>
    8e30:	4452      	add	r2, sl
    8e32:	4552      	cmp	r2, sl
    8e34:	4180      	sbcs	r0, r0
    8e36:	1864      	adds	r4, r4, r1
    8e38:	4240      	negs	r0, r0
    8e3a:	1824      	adds	r4, r4, r0
    8e3c:	0017      	movs	r7, r2
    8e3e:	0223      	lsls	r3, r4, #8
    8e40:	d400      	bmi.n	8e44 <__aeabi_dsub+0x448>
    8e42:	e6fd      	b.n	8c40 <__aeabi_dsub+0x244>
    8e44:	4b77      	ldr	r3, [pc, #476]	; (9024 <__aeabi_dsub+0x628>)
    8e46:	4666      	mov	r6, ip
    8e48:	401c      	ands	r4, r3
    8e4a:	e65d      	b.n	8b08 <__aeabi_dsub+0x10c>
    8e4c:	0025      	movs	r5, r4
    8e4e:	4650      	mov	r0, sl
    8e50:	4305      	orrs	r5, r0
    8e52:	2e00      	cmp	r6, #0
    8e54:	d1cf      	bne.n	8df6 <__aeabi_dsub+0x3fa>
    8e56:	2d00      	cmp	r5, #0
    8e58:	d14f      	bne.n	8efa <__aeabi_dsub+0x4fe>
    8e5a:	000c      	movs	r4, r1
    8e5c:	4314      	orrs	r4, r2
    8e5e:	d100      	bne.n	8e62 <__aeabi_dsub+0x466>
    8e60:	e0a0      	b.n	8fa4 <__aeabi_dsub+0x5a8>
    8e62:	000c      	movs	r4, r1
    8e64:	0017      	movs	r7, r2
    8e66:	4698      	mov	r8, r3
    8e68:	e64e      	b.n	8b08 <__aeabi_dsub+0x10c>
    8e6a:	4666      	mov	r6, ip
    8e6c:	2400      	movs	r4, #0
    8e6e:	2700      	movs	r7, #0
    8e70:	e685      	b.n	8b7e <__aeabi_dsub+0x182>
    8e72:	001f      	movs	r7, r3
    8e74:	0008      	movs	r0, r1
    8e76:	3f20      	subs	r7, #32
    8e78:	40f8      	lsrs	r0, r7
    8e7a:	0007      	movs	r7, r0
    8e7c:	2b20      	cmp	r3, #32
    8e7e:	d100      	bne.n	8e82 <__aeabi_dsub+0x486>
    8e80:	e08e      	b.n	8fa0 <__aeabi_dsub+0x5a4>
    8e82:	2040      	movs	r0, #64	; 0x40
    8e84:	1ac3      	subs	r3, r0, r3
    8e86:	4099      	lsls	r1, r3
    8e88:	430a      	orrs	r2, r1
    8e8a:	1e51      	subs	r1, r2, #1
    8e8c:	418a      	sbcs	r2, r1
    8e8e:	2100      	movs	r1, #0
    8e90:	4317      	orrs	r7, r2
    8e92:	e692      	b.n	8bba <__aeabi_dsub+0x1be>
    8e94:	2e00      	cmp	r6, #0
    8e96:	d114      	bne.n	8ec2 <__aeabi_dsub+0x4c6>
    8e98:	0026      	movs	r6, r4
    8e9a:	4650      	mov	r0, sl
    8e9c:	4306      	orrs	r6, r0
    8e9e:	d062      	beq.n	8f66 <__aeabi_dsub+0x56a>
    8ea0:	43db      	mvns	r3, r3
    8ea2:	2b00      	cmp	r3, #0
    8ea4:	d15c      	bne.n	8f60 <__aeabi_dsub+0x564>
    8ea6:	1887      	adds	r7, r0, r2
    8ea8:	4297      	cmp	r7, r2
    8eaa:	4192      	sbcs	r2, r2
    8eac:	1864      	adds	r4, r4, r1
    8eae:	4252      	negs	r2, r2
    8eb0:	18a4      	adds	r4, r4, r2
    8eb2:	4666      	mov	r6, ip
    8eb4:	e687      	b.n	8bc6 <__aeabi_dsub+0x1ca>
    8eb6:	4650      	mov	r0, sl
    8eb8:	4320      	orrs	r0, r4
    8eba:	1e44      	subs	r4, r0, #1
    8ebc:	41a0      	sbcs	r0, r4
    8ebe:	2400      	movs	r4, #0
    8ec0:	e760      	b.n	8d84 <__aeabi_dsub+0x388>
    8ec2:	4e57      	ldr	r6, [pc, #348]	; (9020 <__aeabi_dsub+0x624>)
    8ec4:	45b4      	cmp	ip, r6
    8ec6:	d04e      	beq.n	8f66 <__aeabi_dsub+0x56a>
    8ec8:	2680      	movs	r6, #128	; 0x80
    8eca:	0436      	lsls	r6, r6, #16
    8ecc:	425b      	negs	r3, r3
    8ece:	4334      	orrs	r4, r6
    8ed0:	2b38      	cmp	r3, #56	; 0x38
    8ed2:	dd00      	ble.n	8ed6 <__aeabi_dsub+0x4da>
    8ed4:	e07f      	b.n	8fd6 <__aeabi_dsub+0x5da>
    8ed6:	2b1f      	cmp	r3, #31
    8ed8:	dd00      	ble.n	8edc <__aeabi_dsub+0x4e0>
    8eda:	e08b      	b.n	8ff4 <__aeabi_dsub+0x5f8>
    8edc:	2620      	movs	r6, #32
    8ede:	0027      	movs	r7, r4
    8ee0:	4650      	mov	r0, sl
    8ee2:	1af6      	subs	r6, r6, r3
    8ee4:	40b7      	lsls	r7, r6
    8ee6:	40d8      	lsrs	r0, r3
    8ee8:	4307      	orrs	r7, r0
    8eea:	4650      	mov	r0, sl
    8eec:	40b0      	lsls	r0, r6
    8eee:	1e46      	subs	r6, r0, #1
    8ef0:	41b0      	sbcs	r0, r6
    8ef2:	4307      	orrs	r7, r0
    8ef4:	40dc      	lsrs	r4, r3
    8ef6:	18bf      	adds	r7, r7, r2
    8ef8:	e7d6      	b.n	8ea8 <__aeabi_dsub+0x4ac>
    8efa:	000d      	movs	r5, r1
    8efc:	4315      	orrs	r5, r2
    8efe:	d100      	bne.n	8f02 <__aeabi_dsub+0x506>
    8f00:	e602      	b.n	8b08 <__aeabi_dsub+0x10c>
    8f02:	4650      	mov	r0, sl
    8f04:	1a80      	subs	r0, r0, r2
    8f06:	4582      	cmp	sl, r0
    8f08:	41bf      	sbcs	r7, r7
    8f0a:	1a65      	subs	r5, r4, r1
    8f0c:	427f      	negs	r7, r7
    8f0e:	1bed      	subs	r5, r5, r7
    8f10:	4684      	mov	ip, r0
    8f12:	0228      	lsls	r0, r5, #8
    8f14:	d400      	bmi.n	8f18 <__aeabi_dsub+0x51c>
    8f16:	e68d      	b.n	8c34 <__aeabi_dsub+0x238>
    8f18:	4650      	mov	r0, sl
    8f1a:	1a17      	subs	r7, r2, r0
    8f1c:	42ba      	cmp	r2, r7
    8f1e:	4192      	sbcs	r2, r2
    8f20:	1b0c      	subs	r4, r1, r4
    8f22:	4252      	negs	r2, r2
    8f24:	1aa4      	subs	r4, r4, r2
    8f26:	4698      	mov	r8, r3
    8f28:	e5ee      	b.n	8b08 <__aeabi_dsub+0x10c>
    8f2a:	000d      	movs	r5, r1
    8f2c:	4315      	orrs	r5, r2
    8f2e:	d100      	bne.n	8f32 <__aeabi_dsub+0x536>
    8f30:	e76b      	b.n	8e0a <__aeabi_dsub+0x40e>
    8f32:	4650      	mov	r0, sl
    8f34:	0767      	lsls	r7, r4, #29
    8f36:	08c0      	lsrs	r0, r0, #3
    8f38:	4307      	orrs	r7, r0
    8f3a:	2080      	movs	r0, #128	; 0x80
    8f3c:	08e4      	lsrs	r4, r4, #3
    8f3e:	0300      	lsls	r0, r0, #12
    8f40:	4204      	tst	r4, r0
    8f42:	d007      	beq.n	8f54 <__aeabi_dsub+0x558>
    8f44:	08cd      	lsrs	r5, r1, #3
    8f46:	4205      	tst	r5, r0
    8f48:	d104      	bne.n	8f54 <__aeabi_dsub+0x558>
    8f4a:	002c      	movs	r4, r5
    8f4c:	4698      	mov	r8, r3
    8f4e:	08d7      	lsrs	r7, r2, #3
    8f50:	0749      	lsls	r1, r1, #29
    8f52:	430f      	orrs	r7, r1
    8f54:	0f7b      	lsrs	r3, r7, #29
    8f56:	00e4      	lsls	r4, r4, #3
    8f58:	431c      	orrs	r4, r3
    8f5a:	00ff      	lsls	r7, r7, #3
    8f5c:	4e30      	ldr	r6, [pc, #192]	; (9020 <__aeabi_dsub+0x624>)
    8f5e:	e5d3      	b.n	8b08 <__aeabi_dsub+0x10c>
    8f60:	4e2f      	ldr	r6, [pc, #188]	; (9020 <__aeabi_dsub+0x624>)
    8f62:	45b4      	cmp	ip, r6
    8f64:	d1b4      	bne.n	8ed0 <__aeabi_dsub+0x4d4>
    8f66:	000c      	movs	r4, r1
    8f68:	0017      	movs	r7, r2
    8f6a:	4666      	mov	r6, ip
    8f6c:	e5cc      	b.n	8b08 <__aeabi_dsub+0x10c>
    8f6e:	2700      	movs	r7, #0
    8f70:	2400      	movs	r4, #0
    8f72:	e5e8      	b.n	8b46 <__aeabi_dsub+0x14a>
    8f74:	2b00      	cmp	r3, #0
    8f76:	d039      	beq.n	8fec <__aeabi_dsub+0x5f0>
    8f78:	000b      	movs	r3, r1
    8f7a:	4313      	orrs	r3, r2
    8f7c:	d100      	bne.n	8f80 <__aeabi_dsub+0x584>
    8f7e:	e744      	b.n	8e0a <__aeabi_dsub+0x40e>
    8f80:	08c0      	lsrs	r0, r0, #3
    8f82:	0767      	lsls	r7, r4, #29
    8f84:	4307      	orrs	r7, r0
    8f86:	2080      	movs	r0, #128	; 0x80
    8f88:	08e4      	lsrs	r4, r4, #3
    8f8a:	0300      	lsls	r0, r0, #12
    8f8c:	4204      	tst	r4, r0
    8f8e:	d0e1      	beq.n	8f54 <__aeabi_dsub+0x558>
    8f90:	08cb      	lsrs	r3, r1, #3
    8f92:	4203      	tst	r3, r0
    8f94:	d1de      	bne.n	8f54 <__aeabi_dsub+0x558>
    8f96:	08d7      	lsrs	r7, r2, #3
    8f98:	0749      	lsls	r1, r1, #29
    8f9a:	430f      	orrs	r7, r1
    8f9c:	001c      	movs	r4, r3
    8f9e:	e7d9      	b.n	8f54 <__aeabi_dsub+0x558>
    8fa0:	2100      	movs	r1, #0
    8fa2:	e771      	b.n	8e88 <__aeabi_dsub+0x48c>
    8fa4:	2500      	movs	r5, #0
    8fa6:	2700      	movs	r7, #0
    8fa8:	e5e9      	b.n	8b7e <__aeabi_dsub+0x182>
    8faa:	002e      	movs	r6, r5
    8fac:	0027      	movs	r7, r4
    8fae:	3e20      	subs	r6, #32
    8fb0:	40f7      	lsrs	r7, r6
    8fb2:	2d20      	cmp	r5, #32
    8fb4:	d02f      	beq.n	9016 <__aeabi_dsub+0x61a>
    8fb6:	2640      	movs	r6, #64	; 0x40
    8fb8:	1b75      	subs	r5, r6, r5
    8fba:	40ac      	lsls	r4, r5
    8fbc:	4650      	mov	r0, sl
    8fbe:	4320      	orrs	r0, r4
    8fc0:	1e44      	subs	r4, r0, #1
    8fc2:	41a0      	sbcs	r0, r4
    8fc4:	2400      	movs	r4, #0
    8fc6:	4338      	orrs	r0, r7
    8fc8:	e6dc      	b.n	8d84 <__aeabi_dsub+0x388>
    8fca:	2480      	movs	r4, #128	; 0x80
    8fcc:	2500      	movs	r5, #0
    8fce:	0324      	lsls	r4, r4, #12
    8fd0:	4e13      	ldr	r6, [pc, #76]	; (9020 <__aeabi_dsub+0x624>)
    8fd2:	2700      	movs	r7, #0
    8fd4:	e5d3      	b.n	8b7e <__aeabi_dsub+0x182>
    8fd6:	4650      	mov	r0, sl
    8fd8:	4320      	orrs	r0, r4
    8fda:	0007      	movs	r7, r0
    8fdc:	1e78      	subs	r0, r7, #1
    8fde:	4187      	sbcs	r7, r0
    8fe0:	2400      	movs	r4, #0
    8fe2:	18bf      	adds	r7, r7, r2
    8fe4:	e760      	b.n	8ea8 <__aeabi_dsub+0x4ac>
    8fe6:	000c      	movs	r4, r1
    8fe8:	0017      	movs	r7, r2
    8fea:	e58d      	b.n	8b08 <__aeabi_dsub+0x10c>
    8fec:	000c      	movs	r4, r1
    8fee:	0017      	movs	r7, r2
    8ff0:	4e0b      	ldr	r6, [pc, #44]	; (9020 <__aeabi_dsub+0x624>)
    8ff2:	e589      	b.n	8b08 <__aeabi_dsub+0x10c>
    8ff4:	001e      	movs	r6, r3
    8ff6:	0027      	movs	r7, r4
    8ff8:	3e20      	subs	r6, #32
    8ffa:	40f7      	lsrs	r7, r6
    8ffc:	2b20      	cmp	r3, #32
    8ffe:	d00c      	beq.n	901a <__aeabi_dsub+0x61e>
    9000:	2640      	movs	r6, #64	; 0x40
    9002:	1af3      	subs	r3, r6, r3
    9004:	409c      	lsls	r4, r3
    9006:	4650      	mov	r0, sl
    9008:	4320      	orrs	r0, r4
    900a:	1e44      	subs	r4, r0, #1
    900c:	41a0      	sbcs	r0, r4
    900e:	4307      	orrs	r7, r0
    9010:	2400      	movs	r4, #0
    9012:	18bf      	adds	r7, r7, r2
    9014:	e748      	b.n	8ea8 <__aeabi_dsub+0x4ac>
    9016:	2400      	movs	r4, #0
    9018:	e7d0      	b.n	8fbc <__aeabi_dsub+0x5c0>
    901a:	2400      	movs	r4, #0
    901c:	e7f3      	b.n	9006 <__aeabi_dsub+0x60a>
    901e:	46c0      	nop			; (mov r8, r8)
    9020:	000007ff 	.word	0x000007ff
    9024:	ff7fffff 	.word	0xff7fffff

00009028 <__aeabi_dcmpun>:
    9028:	b570      	push	{r4, r5, r6, lr}
    902a:	4e0e      	ldr	r6, [pc, #56]	; (9064 <__aeabi_dcmpun+0x3c>)
    902c:	030d      	lsls	r5, r1, #12
    902e:	031c      	lsls	r4, r3, #12
    9030:	0049      	lsls	r1, r1, #1
    9032:	005b      	lsls	r3, r3, #1
    9034:	0b2d      	lsrs	r5, r5, #12
    9036:	0d49      	lsrs	r1, r1, #21
    9038:	0b24      	lsrs	r4, r4, #12
    903a:	0d5b      	lsrs	r3, r3, #21
    903c:	42b1      	cmp	r1, r6
    903e:	d004      	beq.n	904a <__aeabi_dcmpun+0x22>
    9040:	4908      	ldr	r1, [pc, #32]	; (9064 <__aeabi_dcmpun+0x3c>)
    9042:	2000      	movs	r0, #0
    9044:	428b      	cmp	r3, r1
    9046:	d008      	beq.n	905a <__aeabi_dcmpun+0x32>
    9048:	bd70      	pop	{r4, r5, r6, pc}
    904a:	4305      	orrs	r5, r0
    904c:	2001      	movs	r0, #1
    904e:	2d00      	cmp	r5, #0
    9050:	d1fa      	bne.n	9048 <__aeabi_dcmpun+0x20>
    9052:	4904      	ldr	r1, [pc, #16]	; (9064 <__aeabi_dcmpun+0x3c>)
    9054:	2000      	movs	r0, #0
    9056:	428b      	cmp	r3, r1
    9058:	d1f6      	bne.n	9048 <__aeabi_dcmpun+0x20>
    905a:	4314      	orrs	r4, r2
    905c:	0020      	movs	r0, r4
    905e:	1e44      	subs	r4, r0, #1
    9060:	41a0      	sbcs	r0, r4
    9062:	e7f1      	b.n	9048 <__aeabi_dcmpun+0x20>
    9064:	000007ff 	.word	0x000007ff

00009068 <__aeabi_d2iz>:
    9068:	b530      	push	{r4, r5, lr}
    906a:	4d13      	ldr	r5, [pc, #76]	; (90b8 <__aeabi_d2iz+0x50>)
    906c:	030a      	lsls	r2, r1, #12
    906e:	004b      	lsls	r3, r1, #1
    9070:	0b12      	lsrs	r2, r2, #12
    9072:	0d5b      	lsrs	r3, r3, #21
    9074:	0fc9      	lsrs	r1, r1, #31
    9076:	2400      	movs	r4, #0
    9078:	42ab      	cmp	r3, r5
    907a:	dd10      	ble.n	909e <__aeabi_d2iz+0x36>
    907c:	4c0f      	ldr	r4, [pc, #60]	; (90bc <__aeabi_d2iz+0x54>)
    907e:	42a3      	cmp	r3, r4
    9080:	dc0f      	bgt.n	90a2 <__aeabi_d2iz+0x3a>
    9082:	2480      	movs	r4, #128	; 0x80
    9084:	4d0e      	ldr	r5, [pc, #56]	; (90c0 <__aeabi_d2iz+0x58>)
    9086:	0364      	lsls	r4, r4, #13
    9088:	4322      	orrs	r2, r4
    908a:	1aed      	subs	r5, r5, r3
    908c:	2d1f      	cmp	r5, #31
    908e:	dd0b      	ble.n	90a8 <__aeabi_d2iz+0x40>
    9090:	480c      	ldr	r0, [pc, #48]	; (90c4 <__aeabi_d2iz+0x5c>)
    9092:	1ac3      	subs	r3, r0, r3
    9094:	40da      	lsrs	r2, r3
    9096:	4254      	negs	r4, r2
    9098:	2900      	cmp	r1, #0
    909a:	d100      	bne.n	909e <__aeabi_d2iz+0x36>
    909c:	0014      	movs	r4, r2
    909e:	0020      	movs	r0, r4
    90a0:	bd30      	pop	{r4, r5, pc}
    90a2:	4b09      	ldr	r3, [pc, #36]	; (90c8 <__aeabi_d2iz+0x60>)
    90a4:	18cc      	adds	r4, r1, r3
    90a6:	e7fa      	b.n	909e <__aeabi_d2iz+0x36>
    90a8:	4c08      	ldr	r4, [pc, #32]	; (90cc <__aeabi_d2iz+0x64>)
    90aa:	40e8      	lsrs	r0, r5
    90ac:	46a4      	mov	ip, r4
    90ae:	4463      	add	r3, ip
    90b0:	409a      	lsls	r2, r3
    90b2:	4302      	orrs	r2, r0
    90b4:	e7ef      	b.n	9096 <__aeabi_d2iz+0x2e>
    90b6:	46c0      	nop			; (mov r8, r8)
    90b8:	000003fe 	.word	0x000003fe
    90bc:	0000041d 	.word	0x0000041d
    90c0:	00000433 	.word	0x00000433
    90c4:	00000413 	.word	0x00000413
    90c8:	7fffffff 	.word	0x7fffffff
    90cc:	fffffbed 	.word	0xfffffbed

000090d0 <__aeabi_ui2d>:
    90d0:	b510      	push	{r4, lr}
    90d2:	1e04      	subs	r4, r0, #0
    90d4:	d028      	beq.n	9128 <__aeabi_ui2d+0x58>
    90d6:	f000 f833 	bl	9140 <__clzsi2>
    90da:	4b15      	ldr	r3, [pc, #84]	; (9130 <__aeabi_ui2d+0x60>)
    90dc:	4a15      	ldr	r2, [pc, #84]	; (9134 <__aeabi_ui2d+0x64>)
    90de:	1a1b      	subs	r3, r3, r0
    90e0:	1ad2      	subs	r2, r2, r3
    90e2:	2a1f      	cmp	r2, #31
    90e4:	dd15      	ble.n	9112 <__aeabi_ui2d+0x42>
    90e6:	4a14      	ldr	r2, [pc, #80]	; (9138 <__aeabi_ui2d+0x68>)
    90e8:	1ad2      	subs	r2, r2, r3
    90ea:	4094      	lsls	r4, r2
    90ec:	2200      	movs	r2, #0
    90ee:	0324      	lsls	r4, r4, #12
    90f0:	055b      	lsls	r3, r3, #21
    90f2:	0b24      	lsrs	r4, r4, #12
    90f4:	0d5b      	lsrs	r3, r3, #21
    90f6:	2100      	movs	r1, #0
    90f8:	0010      	movs	r0, r2
    90fa:	0324      	lsls	r4, r4, #12
    90fc:	0d0a      	lsrs	r2, r1, #20
    90fe:	0b24      	lsrs	r4, r4, #12
    9100:	0512      	lsls	r2, r2, #20
    9102:	4322      	orrs	r2, r4
    9104:	4c0d      	ldr	r4, [pc, #52]	; (913c <__aeabi_ui2d+0x6c>)
    9106:	051b      	lsls	r3, r3, #20
    9108:	4022      	ands	r2, r4
    910a:	4313      	orrs	r3, r2
    910c:	005b      	lsls	r3, r3, #1
    910e:	0859      	lsrs	r1, r3, #1
    9110:	bd10      	pop	{r4, pc}
    9112:	0021      	movs	r1, r4
    9114:	4091      	lsls	r1, r2
    9116:	000a      	movs	r2, r1
    9118:	210b      	movs	r1, #11
    911a:	1a08      	subs	r0, r1, r0
    911c:	40c4      	lsrs	r4, r0
    911e:	055b      	lsls	r3, r3, #21
    9120:	0324      	lsls	r4, r4, #12
    9122:	0b24      	lsrs	r4, r4, #12
    9124:	0d5b      	lsrs	r3, r3, #21
    9126:	e7e6      	b.n	90f6 <__aeabi_ui2d+0x26>
    9128:	2300      	movs	r3, #0
    912a:	2400      	movs	r4, #0
    912c:	2200      	movs	r2, #0
    912e:	e7e2      	b.n	90f6 <__aeabi_ui2d+0x26>
    9130:	0000041e 	.word	0x0000041e
    9134:	00000433 	.word	0x00000433
    9138:	00000413 	.word	0x00000413
    913c:	800fffff 	.word	0x800fffff

00009140 <__clzsi2>:
    9140:	211c      	movs	r1, #28
    9142:	2301      	movs	r3, #1
    9144:	041b      	lsls	r3, r3, #16
    9146:	4298      	cmp	r0, r3
    9148:	d301      	bcc.n	914e <__clzsi2+0xe>
    914a:	0c00      	lsrs	r0, r0, #16
    914c:	3910      	subs	r1, #16
    914e:	0a1b      	lsrs	r3, r3, #8
    9150:	4298      	cmp	r0, r3
    9152:	d301      	bcc.n	9158 <__clzsi2+0x18>
    9154:	0a00      	lsrs	r0, r0, #8
    9156:	3908      	subs	r1, #8
    9158:	091b      	lsrs	r3, r3, #4
    915a:	4298      	cmp	r0, r3
    915c:	d301      	bcc.n	9162 <__clzsi2+0x22>
    915e:	0900      	lsrs	r0, r0, #4
    9160:	3904      	subs	r1, #4
    9162:	a202      	add	r2, pc, #8	; (adr r2, 916c <__clzsi2+0x2c>)
    9164:	5c10      	ldrb	r0, [r2, r0]
    9166:	1840      	adds	r0, r0, r1
    9168:	4770      	bx	lr
    916a:	46c0      	nop			; (mov r8, r8)
    916c:	02020304 	.word	0x02020304
    9170:	01010101 	.word	0x01010101
	...

0000917c <__cxa_atexit>:
    917c:	b570      	push	{r4, r5, r6, lr}
    917e:	4c05      	ldr	r4, [pc, #20]	; (9194 <__cxa_atexit+0x18>)
    9180:	0005      	movs	r5, r0
    9182:	0013      	movs	r3, r2
    9184:	1e20      	subs	r0, r4, #0
    9186:	d004      	beq.n	9192 <__cxa_atexit+0x16>
    9188:	000a      	movs	r2, r1
    918a:	2002      	movs	r0, #2
    918c:	0029      	movs	r1, r5
    918e:	e000      	b.n	9192 <__cxa_atexit+0x16>
    9190:	bf00      	nop
    9192:	bd70      	pop	{r4, r5, r6, pc}
    9194:	00000000 	.word	0x00000000

00009198 <__libc_init_array>:
    9198:	b570      	push	{r4, r5, r6, lr}
    919a:	2600      	movs	r6, #0
    919c:	4d0c      	ldr	r5, [pc, #48]	; (91d0 <__libc_init_array+0x38>)
    919e:	4c0d      	ldr	r4, [pc, #52]	; (91d4 <__libc_init_array+0x3c>)
    91a0:	1b64      	subs	r4, r4, r5
    91a2:	10a4      	asrs	r4, r4, #2
    91a4:	42a6      	cmp	r6, r4
    91a6:	d109      	bne.n	91bc <__libc_init_array+0x24>
    91a8:	2600      	movs	r6, #0
    91aa:	f002 f9db 	bl	b564 <_init>
    91ae:	4d0a      	ldr	r5, [pc, #40]	; (91d8 <__libc_init_array+0x40>)
    91b0:	4c0a      	ldr	r4, [pc, #40]	; (91dc <__libc_init_array+0x44>)
    91b2:	1b64      	subs	r4, r4, r5
    91b4:	10a4      	asrs	r4, r4, #2
    91b6:	42a6      	cmp	r6, r4
    91b8:	d105      	bne.n	91c6 <__libc_init_array+0x2e>
    91ba:	bd70      	pop	{r4, r5, r6, pc}
    91bc:	00b3      	lsls	r3, r6, #2
    91be:	58eb      	ldr	r3, [r5, r3]
    91c0:	4798      	blx	r3
    91c2:	3601      	adds	r6, #1
    91c4:	e7ee      	b.n	91a4 <__libc_init_array+0xc>
    91c6:	00b3      	lsls	r3, r6, #2
    91c8:	58eb      	ldr	r3, [r5, r3]
    91ca:	4798      	blx	r3
    91cc:	3601      	adds	r6, #1
    91ce:	e7f2      	b.n	91b6 <__libc_init_array+0x1e>
    91d0:	20000258 	.word	0x20000258
    91d4:	20000258 	.word	0x20000258
    91d8:	20000258 	.word	0x20000258
    91dc:	20000290 	.word	0x20000290

000091e0 <__locale_ctype_ptr_l>:
    91e0:	30ec      	adds	r0, #236	; 0xec
    91e2:	6800      	ldr	r0, [r0, #0]
    91e4:	4770      	bx	lr
	...

000091e8 <malloc>:
    91e8:	b510      	push	{r4, lr}
    91ea:	4b03      	ldr	r3, [pc, #12]	; (91f8 <malloc+0x10>)
    91ec:	0001      	movs	r1, r0
    91ee:	6818      	ldr	r0, [r3, #0]
    91f0:	f000 f89c 	bl	932c <_malloc_r>
    91f4:	bd10      	pop	{r4, pc}
    91f6:	46c0      	nop			; (mov r8, r8)
    91f8:	20000088 	.word	0x20000088

000091fc <free>:
    91fc:	b510      	push	{r4, lr}
    91fe:	4b03      	ldr	r3, [pc, #12]	; (920c <free+0x10>)
    9200:	0001      	movs	r1, r0
    9202:	6818      	ldr	r0, [r3, #0]
    9204:	f000 f848 	bl	9298 <_free_r>
    9208:	bd10      	pop	{r4, pc}
    920a:	46c0      	nop			; (mov r8, r8)
    920c:	20000088 	.word	0x20000088

00009210 <__ascii_mbtowc>:
    9210:	b082      	sub	sp, #8
    9212:	2900      	cmp	r1, #0
    9214:	d100      	bne.n	9218 <__ascii_mbtowc+0x8>
    9216:	a901      	add	r1, sp, #4
    9218:	1e10      	subs	r0, r2, #0
    921a:	d006      	beq.n	922a <__ascii_mbtowc+0x1a>
    921c:	2b00      	cmp	r3, #0
    921e:	d006      	beq.n	922e <__ascii_mbtowc+0x1e>
    9220:	7813      	ldrb	r3, [r2, #0]
    9222:	600b      	str	r3, [r1, #0]
    9224:	7810      	ldrb	r0, [r2, #0]
    9226:	1e43      	subs	r3, r0, #1
    9228:	4198      	sbcs	r0, r3
    922a:	b002      	add	sp, #8
    922c:	4770      	bx	lr
    922e:	2002      	movs	r0, #2
    9230:	4240      	negs	r0, r0
    9232:	e7fa      	b.n	922a <__ascii_mbtowc+0x1a>

00009234 <memcmp>:
    9234:	b530      	push	{r4, r5, lr}
    9236:	2400      	movs	r4, #0
    9238:	42a2      	cmp	r2, r4
    923a:	d101      	bne.n	9240 <memcmp+0xc>
    923c:	2000      	movs	r0, #0
    923e:	e005      	b.n	924c <memcmp+0x18>
    9240:	5d03      	ldrb	r3, [r0, r4]
    9242:	1c65      	adds	r5, r4, #1
    9244:	5d0c      	ldrb	r4, [r1, r4]
    9246:	42a3      	cmp	r3, r4
    9248:	d001      	beq.n	924e <memcmp+0x1a>
    924a:	1b18      	subs	r0, r3, r4
    924c:	bd30      	pop	{r4, r5, pc}
    924e:	002c      	movs	r4, r5
    9250:	e7f2      	b.n	9238 <memcmp+0x4>

00009252 <memcpy>:
    9252:	2300      	movs	r3, #0
    9254:	b510      	push	{r4, lr}
    9256:	429a      	cmp	r2, r3
    9258:	d100      	bne.n	925c <memcpy+0xa>
    925a:	bd10      	pop	{r4, pc}
    925c:	5ccc      	ldrb	r4, [r1, r3]
    925e:	54c4      	strb	r4, [r0, r3]
    9260:	3301      	adds	r3, #1
    9262:	e7f8      	b.n	9256 <memcpy+0x4>

00009264 <memmove>:
    9264:	b510      	push	{r4, lr}
    9266:	4288      	cmp	r0, r1
    9268:	d902      	bls.n	9270 <memmove+0xc>
    926a:	188b      	adds	r3, r1, r2
    926c:	4298      	cmp	r0, r3
    926e:	d308      	bcc.n	9282 <memmove+0x1e>
    9270:	2300      	movs	r3, #0
    9272:	429a      	cmp	r2, r3
    9274:	d007      	beq.n	9286 <memmove+0x22>
    9276:	5ccc      	ldrb	r4, [r1, r3]
    9278:	54c4      	strb	r4, [r0, r3]
    927a:	3301      	adds	r3, #1
    927c:	e7f9      	b.n	9272 <memmove+0xe>
    927e:	5c8b      	ldrb	r3, [r1, r2]
    9280:	5483      	strb	r3, [r0, r2]
    9282:	3a01      	subs	r2, #1
    9284:	d2fb      	bcs.n	927e <memmove+0x1a>
    9286:	bd10      	pop	{r4, pc}

00009288 <memset>:
    9288:	0003      	movs	r3, r0
    928a:	1882      	adds	r2, r0, r2
    928c:	4293      	cmp	r3, r2
    928e:	d100      	bne.n	9292 <memset+0xa>
    9290:	4770      	bx	lr
    9292:	7019      	strb	r1, [r3, #0]
    9294:	3301      	adds	r3, #1
    9296:	e7f9      	b.n	928c <memset+0x4>

00009298 <_free_r>:
    9298:	b570      	push	{r4, r5, r6, lr}
    929a:	0005      	movs	r5, r0
    929c:	2900      	cmp	r1, #0
    929e:	d010      	beq.n	92c2 <_free_r+0x2a>
    92a0:	1f0c      	subs	r4, r1, #4
    92a2:	6823      	ldr	r3, [r4, #0]
    92a4:	2b00      	cmp	r3, #0
    92a6:	da00      	bge.n	92aa <_free_r+0x12>
    92a8:	18e4      	adds	r4, r4, r3
    92aa:	0028      	movs	r0, r5
    92ac:	f001 fc83 	bl	abb6 <__malloc_lock>
    92b0:	4a1d      	ldr	r2, [pc, #116]	; (9328 <_free_r+0x90>)
    92b2:	6813      	ldr	r3, [r2, #0]
    92b4:	2b00      	cmp	r3, #0
    92b6:	d105      	bne.n	92c4 <_free_r+0x2c>
    92b8:	6063      	str	r3, [r4, #4]
    92ba:	6014      	str	r4, [r2, #0]
    92bc:	0028      	movs	r0, r5
    92be:	f001 fc7b 	bl	abb8 <__malloc_unlock>
    92c2:	bd70      	pop	{r4, r5, r6, pc}
    92c4:	42a3      	cmp	r3, r4
    92c6:	d909      	bls.n	92dc <_free_r+0x44>
    92c8:	6821      	ldr	r1, [r4, #0]
    92ca:	1860      	adds	r0, r4, r1
    92cc:	4283      	cmp	r3, r0
    92ce:	d1f3      	bne.n	92b8 <_free_r+0x20>
    92d0:	6818      	ldr	r0, [r3, #0]
    92d2:	685b      	ldr	r3, [r3, #4]
    92d4:	1841      	adds	r1, r0, r1
    92d6:	6021      	str	r1, [r4, #0]
    92d8:	e7ee      	b.n	92b8 <_free_r+0x20>
    92da:	0013      	movs	r3, r2
    92dc:	685a      	ldr	r2, [r3, #4]
    92de:	2a00      	cmp	r2, #0
    92e0:	d001      	beq.n	92e6 <_free_r+0x4e>
    92e2:	42a2      	cmp	r2, r4
    92e4:	d9f9      	bls.n	92da <_free_r+0x42>
    92e6:	6819      	ldr	r1, [r3, #0]
    92e8:	1858      	adds	r0, r3, r1
    92ea:	42a0      	cmp	r0, r4
    92ec:	d10b      	bne.n	9306 <_free_r+0x6e>
    92ee:	6820      	ldr	r0, [r4, #0]
    92f0:	1809      	adds	r1, r1, r0
    92f2:	1858      	adds	r0, r3, r1
    92f4:	6019      	str	r1, [r3, #0]
    92f6:	4282      	cmp	r2, r0
    92f8:	d1e0      	bne.n	92bc <_free_r+0x24>
    92fa:	6810      	ldr	r0, [r2, #0]
    92fc:	6852      	ldr	r2, [r2, #4]
    92fe:	1841      	adds	r1, r0, r1
    9300:	6019      	str	r1, [r3, #0]
    9302:	605a      	str	r2, [r3, #4]
    9304:	e7da      	b.n	92bc <_free_r+0x24>
    9306:	42a0      	cmp	r0, r4
    9308:	d902      	bls.n	9310 <_free_r+0x78>
    930a:	230c      	movs	r3, #12
    930c:	602b      	str	r3, [r5, #0]
    930e:	e7d5      	b.n	92bc <_free_r+0x24>
    9310:	6821      	ldr	r1, [r4, #0]
    9312:	1860      	adds	r0, r4, r1
    9314:	4282      	cmp	r2, r0
    9316:	d103      	bne.n	9320 <_free_r+0x88>
    9318:	6810      	ldr	r0, [r2, #0]
    931a:	6852      	ldr	r2, [r2, #4]
    931c:	1841      	adds	r1, r0, r1
    931e:	6021      	str	r1, [r4, #0]
    9320:	6062      	str	r2, [r4, #4]
    9322:	605c      	str	r4, [r3, #4]
    9324:	e7ca      	b.n	92bc <_free_r+0x24>
    9326:	46c0      	nop			; (mov r8, r8)
    9328:	20001064 	.word	0x20001064

0000932c <_malloc_r>:
    932c:	2303      	movs	r3, #3
    932e:	b570      	push	{r4, r5, r6, lr}
    9330:	1ccd      	adds	r5, r1, #3
    9332:	439d      	bics	r5, r3
    9334:	3508      	adds	r5, #8
    9336:	0006      	movs	r6, r0
    9338:	2d0c      	cmp	r5, #12
    933a:	d21e      	bcs.n	937a <_malloc_r+0x4e>
    933c:	250c      	movs	r5, #12
    933e:	42a9      	cmp	r1, r5
    9340:	d81d      	bhi.n	937e <_malloc_r+0x52>
    9342:	0030      	movs	r0, r6
    9344:	f001 fc37 	bl	abb6 <__malloc_lock>
    9348:	4a25      	ldr	r2, [pc, #148]	; (93e0 <_malloc_r+0xb4>)
    934a:	6814      	ldr	r4, [r2, #0]
    934c:	0021      	movs	r1, r4
    934e:	2900      	cmp	r1, #0
    9350:	d119      	bne.n	9386 <_malloc_r+0x5a>
    9352:	4c24      	ldr	r4, [pc, #144]	; (93e4 <_malloc_r+0xb8>)
    9354:	6823      	ldr	r3, [r4, #0]
    9356:	2b00      	cmp	r3, #0
    9358:	d103      	bne.n	9362 <_malloc_r+0x36>
    935a:	0030      	movs	r0, r6
    935c:	f000 fcbe 	bl	9cdc <_sbrk_r>
    9360:	6020      	str	r0, [r4, #0]
    9362:	0029      	movs	r1, r5
    9364:	0030      	movs	r0, r6
    9366:	f000 fcb9 	bl	9cdc <_sbrk_r>
    936a:	1c43      	adds	r3, r0, #1
    936c:	d12c      	bne.n	93c8 <_malloc_r+0x9c>
    936e:	230c      	movs	r3, #12
    9370:	0030      	movs	r0, r6
    9372:	6033      	str	r3, [r6, #0]
    9374:	f001 fc20 	bl	abb8 <__malloc_unlock>
    9378:	e003      	b.n	9382 <_malloc_r+0x56>
    937a:	2d00      	cmp	r5, #0
    937c:	dadf      	bge.n	933e <_malloc_r+0x12>
    937e:	230c      	movs	r3, #12
    9380:	6033      	str	r3, [r6, #0]
    9382:	2000      	movs	r0, #0
    9384:	bd70      	pop	{r4, r5, r6, pc}
    9386:	680b      	ldr	r3, [r1, #0]
    9388:	1b5b      	subs	r3, r3, r5
    938a:	d41a      	bmi.n	93c2 <_malloc_r+0x96>
    938c:	2b0b      	cmp	r3, #11
    938e:	d903      	bls.n	9398 <_malloc_r+0x6c>
    9390:	600b      	str	r3, [r1, #0]
    9392:	18cc      	adds	r4, r1, r3
    9394:	6025      	str	r5, [r4, #0]
    9396:	e003      	b.n	93a0 <_malloc_r+0x74>
    9398:	428c      	cmp	r4, r1
    939a:	d10e      	bne.n	93ba <_malloc_r+0x8e>
    939c:	6863      	ldr	r3, [r4, #4]
    939e:	6013      	str	r3, [r2, #0]
    93a0:	0030      	movs	r0, r6
    93a2:	f001 fc09 	bl	abb8 <__malloc_unlock>
    93a6:	0020      	movs	r0, r4
    93a8:	2207      	movs	r2, #7
    93aa:	300b      	adds	r0, #11
    93ac:	1d23      	adds	r3, r4, #4
    93ae:	4390      	bics	r0, r2
    93b0:	1ac3      	subs	r3, r0, r3
    93b2:	d0e7      	beq.n	9384 <_malloc_r+0x58>
    93b4:	425a      	negs	r2, r3
    93b6:	50e2      	str	r2, [r4, r3]
    93b8:	e7e4      	b.n	9384 <_malloc_r+0x58>
    93ba:	684b      	ldr	r3, [r1, #4]
    93bc:	6063      	str	r3, [r4, #4]
    93be:	000c      	movs	r4, r1
    93c0:	e7ee      	b.n	93a0 <_malloc_r+0x74>
    93c2:	000c      	movs	r4, r1
    93c4:	6849      	ldr	r1, [r1, #4]
    93c6:	e7c2      	b.n	934e <_malloc_r+0x22>
    93c8:	2303      	movs	r3, #3
    93ca:	1cc4      	adds	r4, r0, #3
    93cc:	439c      	bics	r4, r3
    93ce:	42a0      	cmp	r0, r4
    93d0:	d0e0      	beq.n	9394 <_malloc_r+0x68>
    93d2:	1a21      	subs	r1, r4, r0
    93d4:	0030      	movs	r0, r6
    93d6:	f000 fc81 	bl	9cdc <_sbrk_r>
    93da:	1c43      	adds	r3, r0, #1
    93dc:	d1da      	bne.n	9394 <_malloc_r+0x68>
    93de:	e7c6      	b.n	936e <_malloc_r+0x42>
    93e0:	20001064 	.word	0x20001064
    93e4:	20001068 	.word	0x20001068

000093e8 <__cvt>:
    93e8:	b5f0      	push	{r4, r5, r6, r7, lr}
    93ea:	b08b      	sub	sp, #44	; 0x2c
    93ec:	0014      	movs	r4, r2
    93ee:	1e1d      	subs	r5, r3, #0
    93f0:	9912      	ldr	r1, [sp, #72]	; 0x48
    93f2:	da53      	bge.n	949c <__cvt+0xb4>
    93f4:	2480      	movs	r4, #128	; 0x80
    93f6:	0624      	lsls	r4, r4, #24
    93f8:	191b      	adds	r3, r3, r4
    93fa:	001d      	movs	r5, r3
    93fc:	0014      	movs	r4, r2
    93fe:	232d      	movs	r3, #45	; 0x2d
    9400:	700b      	strb	r3, [r1, #0]
    9402:	2320      	movs	r3, #32
    9404:	9e14      	ldr	r6, [sp, #80]	; 0x50
    9406:	2203      	movs	r2, #3
    9408:	439e      	bics	r6, r3
    940a:	2e46      	cmp	r6, #70	; 0x46
    940c:	d007      	beq.n	941e <__cvt+0x36>
    940e:	0033      	movs	r3, r6
    9410:	3b45      	subs	r3, #69	; 0x45
    9412:	4259      	negs	r1, r3
    9414:	414b      	adcs	r3, r1
    9416:	9910      	ldr	r1, [sp, #64]	; 0x40
    9418:	3a01      	subs	r2, #1
    941a:	18cb      	adds	r3, r1, r3
    941c:	9310      	str	r3, [sp, #64]	; 0x40
    941e:	ab09      	add	r3, sp, #36	; 0x24
    9420:	9304      	str	r3, [sp, #16]
    9422:	ab08      	add	r3, sp, #32
    9424:	9303      	str	r3, [sp, #12]
    9426:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    9428:	9200      	str	r2, [sp, #0]
    942a:	9302      	str	r3, [sp, #8]
    942c:	9b10      	ldr	r3, [sp, #64]	; 0x40
    942e:	0022      	movs	r2, r4
    9430:	9301      	str	r3, [sp, #4]
    9432:	002b      	movs	r3, r5
    9434:	f000 fdc0 	bl	9fb8 <_dtoa_r>
    9438:	0007      	movs	r7, r0
    943a:	2e47      	cmp	r6, #71	; 0x47
    943c:	d102      	bne.n	9444 <__cvt+0x5c>
    943e:	9b11      	ldr	r3, [sp, #68]	; 0x44
    9440:	07db      	lsls	r3, r3, #31
    9442:	d524      	bpl.n	948e <__cvt+0xa6>
    9444:	9b10      	ldr	r3, [sp, #64]	; 0x40
    9446:	18fb      	adds	r3, r7, r3
    9448:	9307      	str	r3, [sp, #28]
    944a:	2e46      	cmp	r6, #70	; 0x46
    944c:	d114      	bne.n	9478 <__cvt+0x90>
    944e:	783b      	ldrb	r3, [r7, #0]
    9450:	2b30      	cmp	r3, #48	; 0x30
    9452:	d10c      	bne.n	946e <__cvt+0x86>
    9454:	2200      	movs	r2, #0
    9456:	2300      	movs	r3, #0
    9458:	0020      	movs	r0, r4
    945a:	0029      	movs	r1, r5
    945c:	f7fe f8dc 	bl	7618 <__aeabi_dcmpeq>
    9460:	2800      	cmp	r0, #0
    9462:	d104      	bne.n	946e <__cvt+0x86>
    9464:	2301      	movs	r3, #1
    9466:	9a10      	ldr	r2, [sp, #64]	; 0x40
    9468:	1a9b      	subs	r3, r3, r2
    946a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    946c:	6013      	str	r3, [r2, #0]
    946e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    9470:	9a07      	ldr	r2, [sp, #28]
    9472:	681b      	ldr	r3, [r3, #0]
    9474:	18d3      	adds	r3, r2, r3
    9476:	9307      	str	r3, [sp, #28]
    9478:	2200      	movs	r2, #0
    947a:	2300      	movs	r3, #0
    947c:	0020      	movs	r0, r4
    947e:	0029      	movs	r1, r5
    9480:	f7fe f8ca 	bl	7618 <__aeabi_dcmpeq>
    9484:	2230      	movs	r2, #48	; 0x30
    9486:	2800      	cmp	r0, #0
    9488:	d00d      	beq.n	94a6 <__cvt+0xbe>
    948a:	9b07      	ldr	r3, [sp, #28]
    948c:	9309      	str	r3, [sp, #36]	; 0x24
    948e:	0038      	movs	r0, r7
    9490:	9b09      	ldr	r3, [sp, #36]	; 0x24
    9492:	9a15      	ldr	r2, [sp, #84]	; 0x54
    9494:	1bdb      	subs	r3, r3, r7
    9496:	6013      	str	r3, [r2, #0]
    9498:	b00b      	add	sp, #44	; 0x2c
    949a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    949c:	2300      	movs	r3, #0
    949e:	e7af      	b.n	9400 <__cvt+0x18>
    94a0:	1c59      	adds	r1, r3, #1
    94a2:	9109      	str	r1, [sp, #36]	; 0x24
    94a4:	701a      	strb	r2, [r3, #0]
    94a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
    94a8:	9907      	ldr	r1, [sp, #28]
    94aa:	4299      	cmp	r1, r3
    94ac:	d8f8      	bhi.n	94a0 <__cvt+0xb8>
    94ae:	e7ee      	b.n	948e <__cvt+0xa6>

000094b0 <__exponent>:
    94b0:	b5f0      	push	{r4, r5, r6, r7, lr}
    94b2:	232b      	movs	r3, #43	; 0x2b
    94b4:	b085      	sub	sp, #20
    94b6:	0007      	movs	r7, r0
    94b8:	000c      	movs	r4, r1
    94ba:	7002      	strb	r2, [r0, #0]
    94bc:	1c86      	adds	r6, r0, #2
    94be:	2900      	cmp	r1, #0
    94c0:	da01      	bge.n	94c6 <__exponent+0x16>
    94c2:	232d      	movs	r3, #45	; 0x2d
    94c4:	424c      	negs	r4, r1
    94c6:	707b      	strb	r3, [r7, #1]
    94c8:	2c09      	cmp	r4, #9
    94ca:	dd23      	ble.n	9514 <__exponent+0x64>
    94cc:	ab02      	add	r3, sp, #8
    94ce:	1ddd      	adds	r5, r3, #7
    94d0:	1e6b      	subs	r3, r5, #1
    94d2:	0020      	movs	r0, r4
    94d4:	210a      	movs	r1, #10
    94d6:	9301      	str	r3, [sp, #4]
    94d8:	f7fe f888 	bl	75ec <__aeabi_idivmod>
    94dc:	1e6b      	subs	r3, r5, #1
    94de:	3130      	adds	r1, #48	; 0x30
    94e0:	7019      	strb	r1, [r3, #0]
    94e2:	0020      	movs	r0, r4
    94e4:	210a      	movs	r1, #10
    94e6:	f7fd ff9b 	bl	7420 <__divsi3>
    94ea:	0004      	movs	r4, r0
    94ec:	2809      	cmp	r0, #9
    94ee:	dc0a      	bgt.n	9506 <__exponent+0x56>
    94f0:	3d02      	subs	r5, #2
    94f2:	3430      	adds	r4, #48	; 0x30
    94f4:	702c      	strb	r4, [r5, #0]
    94f6:	ab02      	add	r3, sp, #8
    94f8:	3307      	adds	r3, #7
    94fa:	0030      	movs	r0, r6
    94fc:	42ab      	cmp	r3, r5
    94fe:	d804      	bhi.n	950a <__exponent+0x5a>
    9500:	1bc0      	subs	r0, r0, r7
    9502:	b005      	add	sp, #20
    9504:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9506:	9d01      	ldr	r5, [sp, #4]
    9508:	e7e2      	b.n	94d0 <__exponent+0x20>
    950a:	782b      	ldrb	r3, [r5, #0]
    950c:	3501      	adds	r5, #1
    950e:	7033      	strb	r3, [r6, #0]
    9510:	3601      	adds	r6, #1
    9512:	e7f0      	b.n	94f6 <__exponent+0x46>
    9514:	2330      	movs	r3, #48	; 0x30
    9516:	18e4      	adds	r4, r4, r3
    9518:	7033      	strb	r3, [r6, #0]
    951a:	1cb0      	adds	r0, r6, #2
    951c:	7074      	strb	r4, [r6, #1]
    951e:	e7ef      	b.n	9500 <__exponent+0x50>

00009520 <_printf_float>:
    9520:	b5f0      	push	{r4, r5, r6, r7, lr}
    9522:	b095      	sub	sp, #84	; 0x54
    9524:	000c      	movs	r4, r1
    9526:	920a      	str	r2, [sp, #40]	; 0x28
    9528:	930b      	str	r3, [sp, #44]	; 0x2c
    952a:	9d1a      	ldr	r5, [sp, #104]	; 0x68
    952c:	9009      	str	r0, [sp, #36]	; 0x24
    952e:	f001 fb2b 	bl	ab88 <_localeconv_r>
    9532:	6803      	ldr	r3, [r0, #0]
    9534:	0018      	movs	r0, r3
    9536:	930d      	str	r3, [sp, #52]	; 0x34
    9538:	f000 fc0c 	bl	9d54 <strlen>
    953c:	2300      	movs	r3, #0
    953e:	9312      	str	r3, [sp, #72]	; 0x48
    9540:	6823      	ldr	r3, [r4, #0]
    9542:	900e      	str	r0, [sp, #56]	; 0x38
    9544:	930c      	str	r3, [sp, #48]	; 0x30
    9546:	990c      	ldr	r1, [sp, #48]	; 0x30
    9548:	7e27      	ldrb	r7, [r4, #24]
    954a:	682b      	ldr	r3, [r5, #0]
    954c:	2207      	movs	r2, #7
    954e:	05c9      	lsls	r1, r1, #23
    9550:	d547      	bpl.n	95e2 <_printf_float+0xc2>
    9552:	189b      	adds	r3, r3, r2
    9554:	4393      	bics	r3, r2
    9556:	001a      	movs	r2, r3
    9558:	3208      	adds	r2, #8
    955a:	602a      	str	r2, [r5, #0]
    955c:	681a      	ldr	r2, [r3, #0]
    955e:	685b      	ldr	r3, [r3, #4]
    9560:	64a2      	str	r2, [r4, #72]	; 0x48
    9562:	64e3      	str	r3, [r4, #76]	; 0x4c
    9564:	2201      	movs	r2, #1
    9566:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
    9568:	6ca6      	ldr	r6, [r4, #72]	; 0x48
    956a:	006b      	lsls	r3, r5, #1
    956c:	085b      	lsrs	r3, r3, #1
    956e:	930f      	str	r3, [sp, #60]	; 0x3c
    9570:	4252      	negs	r2, r2
    9572:	4ba7      	ldr	r3, [pc, #668]	; (9810 <_printf_float+0x2f0>)
    9574:	0030      	movs	r0, r6
    9576:	990f      	ldr	r1, [sp, #60]	; 0x3c
    9578:	f7ff fd56 	bl	9028 <__aeabi_dcmpun>
    957c:	2800      	cmp	r0, #0
    957e:	d000      	beq.n	9582 <_printf_float+0x62>
    9580:	e206      	b.n	9990 <_printf_float+0x470>
    9582:	2201      	movs	r2, #1
    9584:	4ba2      	ldr	r3, [pc, #648]	; (9810 <_printf_float+0x2f0>)
    9586:	4252      	negs	r2, r2
    9588:	0030      	movs	r0, r6
    958a:	990f      	ldr	r1, [sp, #60]	; 0x3c
    958c:	f7fe f854 	bl	7638 <__aeabi_dcmple>
    9590:	2800      	cmp	r0, #0
    9592:	d000      	beq.n	9596 <_printf_float+0x76>
    9594:	e1fc      	b.n	9990 <_printf_float+0x470>
    9596:	2200      	movs	r2, #0
    9598:	2300      	movs	r3, #0
    959a:	0030      	movs	r0, r6
    959c:	0029      	movs	r1, r5
    959e:	f7fe f841 	bl	7624 <__aeabi_dcmplt>
    95a2:	2800      	cmp	r0, #0
    95a4:	d003      	beq.n	95ae <_printf_float+0x8e>
    95a6:	0023      	movs	r3, r4
    95a8:	222d      	movs	r2, #45	; 0x2d
    95aa:	3343      	adds	r3, #67	; 0x43
    95ac:	701a      	strb	r2, [r3, #0]
    95ae:	4d99      	ldr	r5, [pc, #612]	; (9814 <_printf_float+0x2f4>)
    95b0:	2f47      	cmp	r7, #71	; 0x47
    95b2:	d800      	bhi.n	95b6 <_printf_float+0x96>
    95b4:	4d98      	ldr	r5, [pc, #608]	; (9818 <_printf_float+0x2f8>)
    95b6:	2303      	movs	r3, #3
    95b8:	2600      	movs	r6, #0
    95ba:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    95bc:	6123      	str	r3, [r4, #16]
    95be:	3301      	adds	r3, #1
    95c0:	439a      	bics	r2, r3
    95c2:	6022      	str	r2, [r4, #0]
    95c4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    95c6:	aa13      	add	r2, sp, #76	; 0x4c
    95c8:	9300      	str	r3, [sp, #0]
    95ca:	0021      	movs	r1, r4
    95cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    95ce:	9809      	ldr	r0, [sp, #36]	; 0x24
    95d0:	f000 f9f2 	bl	99b8 <_printf_common>
    95d4:	1c43      	adds	r3, r0, #1
    95d6:	d000      	beq.n	95da <_printf_float+0xba>
    95d8:	e09c      	b.n	9714 <_printf_float+0x1f4>
    95da:	2001      	movs	r0, #1
    95dc:	4240      	negs	r0, r0
    95de:	b015      	add	sp, #84	; 0x54
    95e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    95e2:	3307      	adds	r3, #7
    95e4:	e7b6      	b.n	9554 <_printf_float+0x34>
    95e6:	2380      	movs	r3, #128	; 0x80
    95e8:	6862      	ldr	r2, [r4, #4]
    95ea:	00db      	lsls	r3, r3, #3
    95ec:	1c51      	adds	r1, r2, #1
    95ee:	d145      	bne.n	967c <_printf_float+0x15c>
    95f0:	3207      	adds	r2, #7
    95f2:	6062      	str	r2, [r4, #4]
    95f4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    95f6:	2100      	movs	r1, #0
    95f8:	4313      	orrs	r3, r2
    95fa:	aa12      	add	r2, sp, #72	; 0x48
    95fc:	9205      	str	r2, [sp, #20]
    95fe:	aa11      	add	r2, sp, #68	; 0x44
    9600:	9203      	str	r2, [sp, #12]
    9602:	2223      	movs	r2, #35	; 0x23
    9604:	6023      	str	r3, [r4, #0]
    9606:	9106      	str	r1, [sp, #24]
    9608:	9301      	str	r3, [sp, #4]
    960a:	a908      	add	r1, sp, #32
    960c:	6863      	ldr	r3, [r4, #4]
    960e:	1852      	adds	r2, r2, r1
    9610:	9202      	str	r2, [sp, #8]
    9612:	9300      	str	r3, [sp, #0]
    9614:	0032      	movs	r2, r6
    9616:	002b      	movs	r3, r5
    9618:	9704      	str	r7, [sp, #16]
    961a:	9809      	ldr	r0, [sp, #36]	; 0x24
    961c:	f7ff fee4 	bl	93e8 <__cvt>
    9620:	2320      	movs	r3, #32
    9622:	003a      	movs	r2, r7
    9624:	0005      	movs	r5, r0
    9626:	439a      	bics	r2, r3
    9628:	2a47      	cmp	r2, #71	; 0x47
    962a:	d107      	bne.n	963c <_printf_float+0x11c>
    962c:	9b11      	ldr	r3, [sp, #68]	; 0x44
    962e:	1cda      	adds	r2, r3, #3
    9630:	db02      	blt.n	9638 <_printf_float+0x118>
    9632:	6862      	ldr	r2, [r4, #4]
    9634:	4293      	cmp	r3, r2
    9636:	dd5b      	ble.n	96f0 <_printf_float+0x1d0>
    9638:	3f02      	subs	r7, #2
    963a:	b2ff      	uxtb	r7, r7
    963c:	9911      	ldr	r1, [sp, #68]	; 0x44
    963e:	2f65      	cmp	r7, #101	; 0x65
    9640:	d83b      	bhi.n	96ba <_printf_float+0x19a>
    9642:	0020      	movs	r0, r4
    9644:	3901      	subs	r1, #1
    9646:	003a      	movs	r2, r7
    9648:	3050      	adds	r0, #80	; 0x50
    964a:	9111      	str	r1, [sp, #68]	; 0x44
    964c:	f7ff ff30 	bl	94b0 <__exponent>
    9650:	9a12      	ldr	r2, [sp, #72]	; 0x48
    9652:	0006      	movs	r6, r0
    9654:	1883      	adds	r3, r0, r2
    9656:	6123      	str	r3, [r4, #16]
    9658:	2a01      	cmp	r2, #1
    965a:	dc02      	bgt.n	9662 <_printf_float+0x142>
    965c:	6822      	ldr	r2, [r4, #0]
    965e:	07d2      	lsls	r2, r2, #31
    9660:	d501      	bpl.n	9666 <_printf_float+0x146>
    9662:	3301      	adds	r3, #1
    9664:	6123      	str	r3, [r4, #16]
    9666:	2323      	movs	r3, #35	; 0x23
    9668:	aa08      	add	r2, sp, #32
    966a:	189b      	adds	r3, r3, r2
    966c:	781b      	ldrb	r3, [r3, #0]
    966e:	2b00      	cmp	r3, #0
    9670:	d0a8      	beq.n	95c4 <_printf_float+0xa4>
    9672:	0023      	movs	r3, r4
    9674:	222d      	movs	r2, #45	; 0x2d
    9676:	3343      	adds	r3, #67	; 0x43
    9678:	701a      	strb	r2, [r3, #0]
    967a:	e7a3      	b.n	95c4 <_printf_float+0xa4>
    967c:	2f67      	cmp	r7, #103	; 0x67
    967e:	d001      	beq.n	9684 <_printf_float+0x164>
    9680:	2f47      	cmp	r7, #71	; 0x47
    9682:	d1b7      	bne.n	95f4 <_printf_float+0xd4>
    9684:	2a00      	cmp	r2, #0
    9686:	d016      	beq.n	96b6 <_printf_float+0x196>
    9688:	990c      	ldr	r1, [sp, #48]	; 0x30
    968a:	a808      	add	r0, sp, #32
    968c:	430b      	orrs	r3, r1
    968e:	2100      	movs	r1, #0
    9690:	9106      	str	r1, [sp, #24]
    9692:	a912      	add	r1, sp, #72	; 0x48
    9694:	9105      	str	r1, [sp, #20]
    9696:	a911      	add	r1, sp, #68	; 0x44
    9698:	9103      	str	r1, [sp, #12]
    969a:	2123      	movs	r1, #35	; 0x23
    969c:	1809      	adds	r1, r1, r0
    969e:	6023      	str	r3, [r4, #0]
    96a0:	9301      	str	r3, [sp, #4]
    96a2:	9200      	str	r2, [sp, #0]
    96a4:	002b      	movs	r3, r5
    96a6:	9704      	str	r7, [sp, #16]
    96a8:	9102      	str	r1, [sp, #8]
    96aa:	0032      	movs	r2, r6
    96ac:	9809      	ldr	r0, [sp, #36]	; 0x24
    96ae:	f7ff fe9b 	bl	93e8 <__cvt>
    96b2:	0005      	movs	r5, r0
    96b4:	e7ba      	b.n	962c <_printf_float+0x10c>
    96b6:	2201      	movs	r2, #1
    96b8:	e79b      	b.n	95f2 <_printf_float+0xd2>
    96ba:	2f66      	cmp	r7, #102	; 0x66
    96bc:	d119      	bne.n	96f2 <_printf_float+0x1d2>
    96be:	6863      	ldr	r3, [r4, #4]
    96c0:	2900      	cmp	r1, #0
    96c2:	dd0c      	ble.n	96de <_printf_float+0x1be>
    96c4:	6121      	str	r1, [r4, #16]
    96c6:	2b00      	cmp	r3, #0
    96c8:	d102      	bne.n	96d0 <_printf_float+0x1b0>
    96ca:	6822      	ldr	r2, [r4, #0]
    96cc:	07d2      	lsls	r2, r2, #31
    96ce:	d502      	bpl.n	96d6 <_printf_float+0x1b6>
    96d0:	3301      	adds	r3, #1
    96d2:	185b      	adds	r3, r3, r1
    96d4:	6123      	str	r3, [r4, #16]
    96d6:	9b11      	ldr	r3, [sp, #68]	; 0x44
    96d8:	2600      	movs	r6, #0
    96da:	65a3      	str	r3, [r4, #88]	; 0x58
    96dc:	e7c3      	b.n	9666 <_printf_float+0x146>
    96de:	2b00      	cmp	r3, #0
    96e0:	d103      	bne.n	96ea <_printf_float+0x1ca>
    96e2:	2201      	movs	r2, #1
    96e4:	6821      	ldr	r1, [r4, #0]
    96e6:	4211      	tst	r1, r2
    96e8:	d000      	beq.n	96ec <_printf_float+0x1cc>
    96ea:	1c9a      	adds	r2, r3, #2
    96ec:	6122      	str	r2, [r4, #16]
    96ee:	e7f2      	b.n	96d6 <_printf_float+0x1b6>
    96f0:	2767      	movs	r7, #103	; 0x67
    96f2:	9b11      	ldr	r3, [sp, #68]	; 0x44
    96f4:	9812      	ldr	r0, [sp, #72]	; 0x48
    96f6:	4283      	cmp	r3, r0
    96f8:	db05      	blt.n	9706 <_printf_float+0x1e6>
    96fa:	6822      	ldr	r2, [r4, #0]
    96fc:	6123      	str	r3, [r4, #16]
    96fe:	07d2      	lsls	r2, r2, #31
    9700:	d5e9      	bpl.n	96d6 <_printf_float+0x1b6>
    9702:	3301      	adds	r3, #1
    9704:	e7e6      	b.n	96d4 <_printf_float+0x1b4>
    9706:	2201      	movs	r2, #1
    9708:	2b00      	cmp	r3, #0
    970a:	dc01      	bgt.n	9710 <_printf_float+0x1f0>
    970c:	1892      	adds	r2, r2, r2
    970e:	1ad2      	subs	r2, r2, r3
    9710:	1812      	adds	r2, r2, r0
    9712:	e7eb      	b.n	96ec <_printf_float+0x1cc>
    9714:	6822      	ldr	r2, [r4, #0]
    9716:	0553      	lsls	r3, r2, #21
    9718:	d408      	bmi.n	972c <_printf_float+0x20c>
    971a:	6923      	ldr	r3, [r4, #16]
    971c:	002a      	movs	r2, r5
    971e:	990a      	ldr	r1, [sp, #40]	; 0x28
    9720:	9809      	ldr	r0, [sp, #36]	; 0x24
    9722:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    9724:	47a8      	blx	r5
    9726:	1c43      	adds	r3, r0, #1
    9728:	d129      	bne.n	977e <_printf_float+0x25e>
    972a:	e756      	b.n	95da <_printf_float+0xba>
    972c:	2f65      	cmp	r7, #101	; 0x65
    972e:	d800      	bhi.n	9732 <_printf_float+0x212>
    9730:	e0dc      	b.n	98ec <_printf_float+0x3cc>
    9732:	6ca0      	ldr	r0, [r4, #72]	; 0x48
    9734:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
    9736:	2200      	movs	r2, #0
    9738:	2300      	movs	r3, #0
    973a:	f7fd ff6d 	bl	7618 <__aeabi_dcmpeq>
    973e:	2800      	cmp	r0, #0
    9740:	d035      	beq.n	97ae <_printf_float+0x28e>
    9742:	2301      	movs	r3, #1
    9744:	4a35      	ldr	r2, [pc, #212]	; (981c <_printf_float+0x2fc>)
    9746:	990a      	ldr	r1, [sp, #40]	; 0x28
    9748:	9809      	ldr	r0, [sp, #36]	; 0x24
    974a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    974c:	47a8      	blx	r5
    974e:	1c43      	adds	r3, r0, #1
    9750:	d100      	bne.n	9754 <_printf_float+0x234>
    9752:	e742      	b.n	95da <_printf_float+0xba>
    9754:	9b11      	ldr	r3, [sp, #68]	; 0x44
    9756:	9a12      	ldr	r2, [sp, #72]	; 0x48
    9758:	4293      	cmp	r3, r2
    975a:	db02      	blt.n	9762 <_printf_float+0x242>
    975c:	6823      	ldr	r3, [r4, #0]
    975e:	07db      	lsls	r3, r3, #31
    9760:	d50d      	bpl.n	977e <_printf_float+0x25e>
    9762:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    9764:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    9766:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    9768:	990a      	ldr	r1, [sp, #40]	; 0x28
    976a:	9809      	ldr	r0, [sp, #36]	; 0x24
    976c:	47a8      	blx	r5
    976e:	2500      	movs	r5, #0
    9770:	1c43      	adds	r3, r0, #1
    9772:	d100      	bne.n	9776 <_printf_float+0x256>
    9774:	e731      	b.n	95da <_printf_float+0xba>
    9776:	9b12      	ldr	r3, [sp, #72]	; 0x48
    9778:	3b01      	subs	r3, #1
    977a:	429d      	cmp	r5, r3
    977c:	db0b      	blt.n	9796 <_printf_float+0x276>
    977e:	6823      	ldr	r3, [r4, #0]
    9780:	2500      	movs	r5, #0
    9782:	079b      	lsls	r3, r3, #30
    9784:	d500      	bpl.n	9788 <_printf_float+0x268>
    9786:	e0fd      	b.n	9984 <_printf_float+0x464>
    9788:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    978a:	68e0      	ldr	r0, [r4, #12]
    978c:	4298      	cmp	r0, r3
    978e:	db00      	blt.n	9792 <_printf_float+0x272>
    9790:	e725      	b.n	95de <_printf_float+0xbe>
    9792:	0018      	movs	r0, r3
    9794:	e723      	b.n	95de <_printf_float+0xbe>
    9796:	0022      	movs	r2, r4
    9798:	2301      	movs	r3, #1
    979a:	321a      	adds	r2, #26
    979c:	990a      	ldr	r1, [sp, #40]	; 0x28
    979e:	9809      	ldr	r0, [sp, #36]	; 0x24
    97a0:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    97a2:	47b0      	blx	r6
    97a4:	1c43      	adds	r3, r0, #1
    97a6:	d100      	bne.n	97aa <_printf_float+0x28a>
    97a8:	e717      	b.n	95da <_printf_float+0xba>
    97aa:	3501      	adds	r5, #1
    97ac:	e7e3      	b.n	9776 <_printf_float+0x256>
    97ae:	9b11      	ldr	r3, [sp, #68]	; 0x44
    97b0:	2b00      	cmp	r3, #0
    97b2:	dc35      	bgt.n	9820 <_printf_float+0x300>
    97b4:	2301      	movs	r3, #1
    97b6:	4a19      	ldr	r2, [pc, #100]	; (981c <_printf_float+0x2fc>)
    97b8:	990a      	ldr	r1, [sp, #40]	; 0x28
    97ba:	9809      	ldr	r0, [sp, #36]	; 0x24
    97bc:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    97be:	47b0      	blx	r6
    97c0:	1c43      	adds	r3, r0, #1
    97c2:	d100      	bne.n	97c6 <_printf_float+0x2a6>
    97c4:	e709      	b.n	95da <_printf_float+0xba>
    97c6:	9b11      	ldr	r3, [sp, #68]	; 0x44
    97c8:	2b00      	cmp	r3, #0
    97ca:	d105      	bne.n	97d8 <_printf_float+0x2b8>
    97cc:	9b12      	ldr	r3, [sp, #72]	; 0x48
    97ce:	2b00      	cmp	r3, #0
    97d0:	d102      	bne.n	97d8 <_printf_float+0x2b8>
    97d2:	6823      	ldr	r3, [r4, #0]
    97d4:	07db      	lsls	r3, r3, #31
    97d6:	d5d2      	bpl.n	977e <_printf_float+0x25e>
    97d8:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    97da:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    97dc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    97de:	990a      	ldr	r1, [sp, #40]	; 0x28
    97e0:	9809      	ldr	r0, [sp, #36]	; 0x24
    97e2:	47b0      	blx	r6
    97e4:	2600      	movs	r6, #0
    97e6:	1c43      	adds	r3, r0, #1
    97e8:	d100      	bne.n	97ec <_printf_float+0x2cc>
    97ea:	e6f6      	b.n	95da <_printf_float+0xba>
    97ec:	9b11      	ldr	r3, [sp, #68]	; 0x44
    97ee:	425b      	negs	r3, r3
    97f0:	429e      	cmp	r6, r3
    97f2:	db01      	blt.n	97f8 <_printf_float+0x2d8>
    97f4:	9b12      	ldr	r3, [sp, #72]	; 0x48
    97f6:	e791      	b.n	971c <_printf_float+0x1fc>
    97f8:	0022      	movs	r2, r4
    97fa:	2301      	movs	r3, #1
    97fc:	321a      	adds	r2, #26
    97fe:	990a      	ldr	r1, [sp, #40]	; 0x28
    9800:	9809      	ldr	r0, [sp, #36]	; 0x24
    9802:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    9804:	47b8      	blx	r7
    9806:	1c43      	adds	r3, r0, #1
    9808:	d100      	bne.n	980c <_printf_float+0x2ec>
    980a:	e6e6      	b.n	95da <_printf_float+0xba>
    980c:	3601      	adds	r6, #1
    980e:	e7ed      	b.n	97ec <_printf_float+0x2cc>
    9810:	7fefffff 	.word	0x7fefffff
    9814:	0000bdc6 	.word	0x0000bdc6
    9818:	0000bdc2 	.word	0x0000bdc2
    981c:	0000b6d7 	.word	0x0000b6d7
    9820:	6da3      	ldr	r3, [r4, #88]	; 0x58
    9822:	9e12      	ldr	r6, [sp, #72]	; 0x48
    9824:	429e      	cmp	r6, r3
    9826:	dd00      	ble.n	982a <_printf_float+0x30a>
    9828:	001e      	movs	r6, r3
    982a:	2e00      	cmp	r6, #0
    982c:	dc35      	bgt.n	989a <_printf_float+0x37a>
    982e:	2300      	movs	r3, #0
    9830:	930c      	str	r3, [sp, #48]	; 0x30
    9832:	43f3      	mvns	r3, r6
    9834:	17db      	asrs	r3, r3, #31
    9836:	930f      	str	r3, [sp, #60]	; 0x3c
    9838:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    983a:	6da7      	ldr	r7, [r4, #88]	; 0x58
    983c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    983e:	4033      	ands	r3, r6
    9840:	1afb      	subs	r3, r7, r3
    9842:	429a      	cmp	r2, r3
    9844:	db32      	blt.n	98ac <_printf_float+0x38c>
    9846:	9b11      	ldr	r3, [sp, #68]	; 0x44
    9848:	9a12      	ldr	r2, [sp, #72]	; 0x48
    984a:	4293      	cmp	r3, r2
    984c:	db3c      	blt.n	98c8 <_printf_float+0x3a8>
    984e:	6823      	ldr	r3, [r4, #0]
    9850:	07db      	lsls	r3, r3, #31
    9852:	d439      	bmi.n	98c8 <_printf_float+0x3a8>
    9854:	9e12      	ldr	r6, [sp, #72]	; 0x48
    9856:	9a11      	ldr	r2, [sp, #68]	; 0x44
    9858:	1bf3      	subs	r3, r6, r7
    985a:	1ab6      	subs	r6, r6, r2
    985c:	429e      	cmp	r6, r3
    985e:	dd00      	ble.n	9862 <_printf_float+0x342>
    9860:	001e      	movs	r6, r3
    9862:	2e00      	cmp	r6, #0
    9864:	dc39      	bgt.n	98da <_printf_float+0x3ba>
    9866:	43f7      	mvns	r7, r6
    9868:	2500      	movs	r5, #0
    986a:	17fb      	asrs	r3, r7, #31
    986c:	930c      	str	r3, [sp, #48]	; 0x30
    986e:	9a11      	ldr	r2, [sp, #68]	; 0x44
    9870:	9b12      	ldr	r3, [sp, #72]	; 0x48
    9872:	990c      	ldr	r1, [sp, #48]	; 0x30
    9874:	1a9b      	subs	r3, r3, r2
    9876:	0032      	movs	r2, r6
    9878:	400a      	ands	r2, r1
    987a:	1a9b      	subs	r3, r3, r2
    987c:	429d      	cmp	r5, r3
    987e:	db00      	blt.n	9882 <_printf_float+0x362>
    9880:	e77d      	b.n	977e <_printf_float+0x25e>
    9882:	0022      	movs	r2, r4
    9884:	2301      	movs	r3, #1
    9886:	321a      	adds	r2, #26
    9888:	990a      	ldr	r1, [sp, #40]	; 0x28
    988a:	9809      	ldr	r0, [sp, #36]	; 0x24
    988c:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    988e:	47b8      	blx	r7
    9890:	1c43      	adds	r3, r0, #1
    9892:	d100      	bne.n	9896 <_printf_float+0x376>
    9894:	e6a1      	b.n	95da <_printf_float+0xba>
    9896:	3501      	adds	r5, #1
    9898:	e7e9      	b.n	986e <_printf_float+0x34e>
    989a:	0033      	movs	r3, r6
    989c:	002a      	movs	r2, r5
    989e:	990a      	ldr	r1, [sp, #40]	; 0x28
    98a0:	9809      	ldr	r0, [sp, #36]	; 0x24
    98a2:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    98a4:	47b8      	blx	r7
    98a6:	1c43      	adds	r3, r0, #1
    98a8:	d1c1      	bne.n	982e <_printf_float+0x30e>
    98aa:	e696      	b.n	95da <_printf_float+0xba>
    98ac:	0022      	movs	r2, r4
    98ae:	2301      	movs	r3, #1
    98b0:	321a      	adds	r2, #26
    98b2:	990a      	ldr	r1, [sp, #40]	; 0x28
    98b4:	9809      	ldr	r0, [sp, #36]	; 0x24
    98b6:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    98b8:	47b8      	blx	r7
    98ba:	1c43      	adds	r3, r0, #1
    98bc:	d100      	bne.n	98c0 <_printf_float+0x3a0>
    98be:	e68c      	b.n	95da <_printf_float+0xba>
    98c0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    98c2:	3301      	adds	r3, #1
    98c4:	930c      	str	r3, [sp, #48]	; 0x30
    98c6:	e7b7      	b.n	9838 <_printf_float+0x318>
    98c8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    98ca:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    98cc:	990a      	ldr	r1, [sp, #40]	; 0x28
    98ce:	9809      	ldr	r0, [sp, #36]	; 0x24
    98d0:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    98d2:	47b0      	blx	r6
    98d4:	1c43      	adds	r3, r0, #1
    98d6:	d1bd      	bne.n	9854 <_printf_float+0x334>
    98d8:	e67f      	b.n	95da <_printf_float+0xba>
    98da:	19ea      	adds	r2, r5, r7
    98dc:	0033      	movs	r3, r6
    98de:	990a      	ldr	r1, [sp, #40]	; 0x28
    98e0:	9809      	ldr	r0, [sp, #36]	; 0x24
    98e2:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    98e4:	47a8      	blx	r5
    98e6:	1c43      	adds	r3, r0, #1
    98e8:	d1bd      	bne.n	9866 <_printf_float+0x346>
    98ea:	e676      	b.n	95da <_printf_float+0xba>
    98ec:	9b12      	ldr	r3, [sp, #72]	; 0x48
    98ee:	2b01      	cmp	r3, #1
    98f0:	dc02      	bgt.n	98f8 <_printf_float+0x3d8>
    98f2:	2301      	movs	r3, #1
    98f4:	421a      	tst	r2, r3
    98f6:	d038      	beq.n	996a <_printf_float+0x44a>
    98f8:	2301      	movs	r3, #1
    98fa:	002a      	movs	r2, r5
    98fc:	990a      	ldr	r1, [sp, #40]	; 0x28
    98fe:	9809      	ldr	r0, [sp, #36]	; 0x24
    9900:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    9902:	47b8      	blx	r7
    9904:	1c43      	adds	r3, r0, #1
    9906:	d100      	bne.n	990a <_printf_float+0x3ea>
    9908:	e667      	b.n	95da <_printf_float+0xba>
    990a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    990c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    990e:	990a      	ldr	r1, [sp, #40]	; 0x28
    9910:	9809      	ldr	r0, [sp, #36]	; 0x24
    9912:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    9914:	47b8      	blx	r7
    9916:	1c43      	adds	r3, r0, #1
    9918:	d100      	bne.n	991c <_printf_float+0x3fc>
    991a:	e65e      	b.n	95da <_printf_float+0xba>
    991c:	6ca0      	ldr	r0, [r4, #72]	; 0x48
    991e:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
    9920:	2200      	movs	r2, #0
    9922:	2300      	movs	r3, #0
    9924:	f7fd fe78 	bl	7618 <__aeabi_dcmpeq>
    9928:	2800      	cmp	r0, #0
    992a:	d008      	beq.n	993e <_printf_float+0x41e>
    992c:	2500      	movs	r5, #0
    992e:	9b12      	ldr	r3, [sp, #72]	; 0x48
    9930:	3b01      	subs	r3, #1
    9932:	429d      	cmp	r5, r3
    9934:	db0d      	blt.n	9952 <_printf_float+0x432>
    9936:	0022      	movs	r2, r4
    9938:	0033      	movs	r3, r6
    993a:	3250      	adds	r2, #80	; 0x50
    993c:	e6ef      	b.n	971e <_printf_float+0x1fe>
    993e:	9b12      	ldr	r3, [sp, #72]	; 0x48
    9940:	1c6a      	adds	r2, r5, #1
    9942:	3b01      	subs	r3, #1
    9944:	990a      	ldr	r1, [sp, #40]	; 0x28
    9946:	9809      	ldr	r0, [sp, #36]	; 0x24
    9948:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    994a:	47a8      	blx	r5
    994c:	1c43      	adds	r3, r0, #1
    994e:	d1f2      	bne.n	9936 <_printf_float+0x416>
    9950:	e643      	b.n	95da <_printf_float+0xba>
    9952:	0022      	movs	r2, r4
    9954:	2301      	movs	r3, #1
    9956:	321a      	adds	r2, #26
    9958:	990a      	ldr	r1, [sp, #40]	; 0x28
    995a:	9809      	ldr	r0, [sp, #36]	; 0x24
    995c:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    995e:	47b8      	blx	r7
    9960:	1c43      	adds	r3, r0, #1
    9962:	d100      	bne.n	9966 <_printf_float+0x446>
    9964:	e639      	b.n	95da <_printf_float+0xba>
    9966:	3501      	adds	r5, #1
    9968:	e7e1      	b.n	992e <_printf_float+0x40e>
    996a:	002a      	movs	r2, r5
    996c:	e7ea      	b.n	9944 <_printf_float+0x424>
    996e:	0022      	movs	r2, r4
    9970:	2301      	movs	r3, #1
    9972:	3219      	adds	r2, #25
    9974:	990a      	ldr	r1, [sp, #40]	; 0x28
    9976:	9809      	ldr	r0, [sp, #36]	; 0x24
    9978:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    997a:	47b0      	blx	r6
    997c:	1c43      	adds	r3, r0, #1
    997e:	d100      	bne.n	9982 <_printf_float+0x462>
    9980:	e62b      	b.n	95da <_printf_float+0xba>
    9982:	3501      	adds	r5, #1
    9984:	68e3      	ldr	r3, [r4, #12]
    9986:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    9988:	1a9b      	subs	r3, r3, r2
    998a:	429d      	cmp	r5, r3
    998c:	dbef      	blt.n	996e <_printf_float+0x44e>
    998e:	e6fb      	b.n	9788 <_printf_float+0x268>
    9990:	0032      	movs	r2, r6
    9992:	002b      	movs	r3, r5
    9994:	0030      	movs	r0, r6
    9996:	0029      	movs	r1, r5
    9998:	f7ff fb46 	bl	9028 <__aeabi_dcmpun>
    999c:	2800      	cmp	r0, #0
    999e:	d100      	bne.n	99a2 <_printf_float+0x482>
    99a0:	e621      	b.n	95e6 <_printf_float+0xc6>
    99a2:	4d03      	ldr	r5, [pc, #12]	; (99b0 <_printf_float+0x490>)
    99a4:	2f47      	cmp	r7, #71	; 0x47
    99a6:	d900      	bls.n	99aa <_printf_float+0x48a>
    99a8:	e605      	b.n	95b6 <_printf_float+0x96>
    99aa:	4d02      	ldr	r5, [pc, #8]	; (99b4 <_printf_float+0x494>)
    99ac:	e603      	b.n	95b6 <_printf_float+0x96>
    99ae:	46c0      	nop			; (mov r8, r8)
    99b0:	0000bdce 	.word	0x0000bdce
    99b4:	0000bdca 	.word	0x0000bdca

000099b8 <_printf_common>:
    99b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    99ba:	0015      	movs	r5, r2
    99bc:	9301      	str	r3, [sp, #4]
    99be:	688a      	ldr	r2, [r1, #8]
    99c0:	690b      	ldr	r3, [r1, #16]
    99c2:	9000      	str	r0, [sp, #0]
    99c4:	000c      	movs	r4, r1
    99c6:	4293      	cmp	r3, r2
    99c8:	da00      	bge.n	99cc <_printf_common+0x14>
    99ca:	0013      	movs	r3, r2
    99cc:	0022      	movs	r2, r4
    99ce:	602b      	str	r3, [r5, #0]
    99d0:	3243      	adds	r2, #67	; 0x43
    99d2:	7812      	ldrb	r2, [r2, #0]
    99d4:	2a00      	cmp	r2, #0
    99d6:	d001      	beq.n	99dc <_printf_common+0x24>
    99d8:	3301      	adds	r3, #1
    99da:	602b      	str	r3, [r5, #0]
    99dc:	6823      	ldr	r3, [r4, #0]
    99de:	069b      	lsls	r3, r3, #26
    99e0:	d502      	bpl.n	99e8 <_printf_common+0x30>
    99e2:	682b      	ldr	r3, [r5, #0]
    99e4:	3302      	adds	r3, #2
    99e6:	602b      	str	r3, [r5, #0]
    99e8:	2706      	movs	r7, #6
    99ea:	6823      	ldr	r3, [r4, #0]
    99ec:	401f      	ands	r7, r3
    99ee:	d027      	beq.n	9a40 <_printf_common+0x88>
    99f0:	0023      	movs	r3, r4
    99f2:	3343      	adds	r3, #67	; 0x43
    99f4:	781b      	ldrb	r3, [r3, #0]
    99f6:	1e5a      	subs	r2, r3, #1
    99f8:	4193      	sbcs	r3, r2
    99fa:	6822      	ldr	r2, [r4, #0]
    99fc:	0692      	lsls	r2, r2, #26
    99fe:	d430      	bmi.n	9a62 <_printf_common+0xaa>
    9a00:	0022      	movs	r2, r4
    9a02:	9901      	ldr	r1, [sp, #4]
    9a04:	3243      	adds	r2, #67	; 0x43
    9a06:	9800      	ldr	r0, [sp, #0]
    9a08:	9e08      	ldr	r6, [sp, #32]
    9a0a:	47b0      	blx	r6
    9a0c:	1c43      	adds	r3, r0, #1
    9a0e:	d025      	beq.n	9a5c <_printf_common+0xa4>
    9a10:	2306      	movs	r3, #6
    9a12:	6820      	ldr	r0, [r4, #0]
    9a14:	682a      	ldr	r2, [r5, #0]
    9a16:	68e1      	ldr	r1, [r4, #12]
    9a18:	4003      	ands	r3, r0
    9a1a:	2500      	movs	r5, #0
    9a1c:	2b04      	cmp	r3, #4
    9a1e:	d103      	bne.n	9a28 <_printf_common+0x70>
    9a20:	1a8d      	subs	r5, r1, r2
    9a22:	43eb      	mvns	r3, r5
    9a24:	17db      	asrs	r3, r3, #31
    9a26:	401d      	ands	r5, r3
    9a28:	68a3      	ldr	r3, [r4, #8]
    9a2a:	6922      	ldr	r2, [r4, #16]
    9a2c:	4293      	cmp	r3, r2
    9a2e:	dd01      	ble.n	9a34 <_printf_common+0x7c>
    9a30:	1a9b      	subs	r3, r3, r2
    9a32:	18ed      	adds	r5, r5, r3
    9a34:	2700      	movs	r7, #0
    9a36:	42bd      	cmp	r5, r7
    9a38:	d120      	bne.n	9a7c <_printf_common+0xc4>
    9a3a:	2000      	movs	r0, #0
    9a3c:	e010      	b.n	9a60 <_printf_common+0xa8>
    9a3e:	3701      	adds	r7, #1
    9a40:	68e3      	ldr	r3, [r4, #12]
    9a42:	682a      	ldr	r2, [r5, #0]
    9a44:	1a9b      	subs	r3, r3, r2
    9a46:	429f      	cmp	r7, r3
    9a48:	dad2      	bge.n	99f0 <_printf_common+0x38>
    9a4a:	0022      	movs	r2, r4
    9a4c:	2301      	movs	r3, #1
    9a4e:	3219      	adds	r2, #25
    9a50:	9901      	ldr	r1, [sp, #4]
    9a52:	9800      	ldr	r0, [sp, #0]
    9a54:	9e08      	ldr	r6, [sp, #32]
    9a56:	47b0      	blx	r6
    9a58:	1c43      	adds	r3, r0, #1
    9a5a:	d1f0      	bne.n	9a3e <_printf_common+0x86>
    9a5c:	2001      	movs	r0, #1
    9a5e:	4240      	negs	r0, r0
    9a60:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    9a62:	2030      	movs	r0, #48	; 0x30
    9a64:	18e1      	adds	r1, r4, r3
    9a66:	3143      	adds	r1, #67	; 0x43
    9a68:	7008      	strb	r0, [r1, #0]
    9a6a:	0021      	movs	r1, r4
    9a6c:	1c5a      	adds	r2, r3, #1
    9a6e:	3145      	adds	r1, #69	; 0x45
    9a70:	7809      	ldrb	r1, [r1, #0]
    9a72:	18a2      	adds	r2, r4, r2
    9a74:	3243      	adds	r2, #67	; 0x43
    9a76:	3302      	adds	r3, #2
    9a78:	7011      	strb	r1, [r2, #0]
    9a7a:	e7c1      	b.n	9a00 <_printf_common+0x48>
    9a7c:	0022      	movs	r2, r4
    9a7e:	2301      	movs	r3, #1
    9a80:	321a      	adds	r2, #26
    9a82:	9901      	ldr	r1, [sp, #4]
    9a84:	9800      	ldr	r0, [sp, #0]
    9a86:	9e08      	ldr	r6, [sp, #32]
    9a88:	47b0      	blx	r6
    9a8a:	1c43      	adds	r3, r0, #1
    9a8c:	d0e6      	beq.n	9a5c <_printf_common+0xa4>
    9a8e:	3701      	adds	r7, #1
    9a90:	e7d1      	b.n	9a36 <_printf_common+0x7e>
	...

00009a94 <_printf_i>:
    9a94:	b5f0      	push	{r4, r5, r6, r7, lr}
    9a96:	b08b      	sub	sp, #44	; 0x2c
    9a98:	9206      	str	r2, [sp, #24]
    9a9a:	000a      	movs	r2, r1
    9a9c:	3243      	adds	r2, #67	; 0x43
    9a9e:	9307      	str	r3, [sp, #28]
    9aa0:	9005      	str	r0, [sp, #20]
    9aa2:	9204      	str	r2, [sp, #16]
    9aa4:	7e0a      	ldrb	r2, [r1, #24]
    9aa6:	000c      	movs	r4, r1
    9aa8:	9b10      	ldr	r3, [sp, #64]	; 0x40
    9aaa:	2a6e      	cmp	r2, #110	; 0x6e
    9aac:	d100      	bne.n	9ab0 <_printf_i+0x1c>
    9aae:	e08f      	b.n	9bd0 <_printf_i+0x13c>
    9ab0:	d817      	bhi.n	9ae2 <_printf_i+0x4e>
    9ab2:	2a63      	cmp	r2, #99	; 0x63
    9ab4:	d02c      	beq.n	9b10 <_printf_i+0x7c>
    9ab6:	d808      	bhi.n	9aca <_printf_i+0x36>
    9ab8:	2a00      	cmp	r2, #0
    9aba:	d100      	bne.n	9abe <_printf_i+0x2a>
    9abc:	e099      	b.n	9bf2 <_printf_i+0x15e>
    9abe:	2a58      	cmp	r2, #88	; 0x58
    9ac0:	d054      	beq.n	9b6c <_printf_i+0xd8>
    9ac2:	0026      	movs	r6, r4
    9ac4:	3642      	adds	r6, #66	; 0x42
    9ac6:	7032      	strb	r2, [r6, #0]
    9ac8:	e029      	b.n	9b1e <_printf_i+0x8a>
    9aca:	2a64      	cmp	r2, #100	; 0x64
    9acc:	d001      	beq.n	9ad2 <_printf_i+0x3e>
    9ace:	2a69      	cmp	r2, #105	; 0x69
    9ad0:	d1f7      	bne.n	9ac2 <_printf_i+0x2e>
    9ad2:	6821      	ldr	r1, [r4, #0]
    9ad4:	681a      	ldr	r2, [r3, #0]
    9ad6:	0608      	lsls	r0, r1, #24
    9ad8:	d523      	bpl.n	9b22 <_printf_i+0x8e>
    9ada:	1d11      	adds	r1, r2, #4
    9adc:	6019      	str	r1, [r3, #0]
    9ade:	6815      	ldr	r5, [r2, #0]
    9ae0:	e025      	b.n	9b2e <_printf_i+0x9a>
    9ae2:	2a73      	cmp	r2, #115	; 0x73
    9ae4:	d100      	bne.n	9ae8 <_printf_i+0x54>
    9ae6:	e088      	b.n	9bfa <_printf_i+0x166>
    9ae8:	d808      	bhi.n	9afc <_printf_i+0x68>
    9aea:	2a6f      	cmp	r2, #111	; 0x6f
    9aec:	d029      	beq.n	9b42 <_printf_i+0xae>
    9aee:	2a70      	cmp	r2, #112	; 0x70
    9af0:	d1e7      	bne.n	9ac2 <_printf_i+0x2e>
    9af2:	2220      	movs	r2, #32
    9af4:	6809      	ldr	r1, [r1, #0]
    9af6:	430a      	orrs	r2, r1
    9af8:	6022      	str	r2, [r4, #0]
    9afa:	e003      	b.n	9b04 <_printf_i+0x70>
    9afc:	2a75      	cmp	r2, #117	; 0x75
    9afe:	d020      	beq.n	9b42 <_printf_i+0xae>
    9b00:	2a78      	cmp	r2, #120	; 0x78
    9b02:	d1de      	bne.n	9ac2 <_printf_i+0x2e>
    9b04:	0022      	movs	r2, r4
    9b06:	2178      	movs	r1, #120	; 0x78
    9b08:	3245      	adds	r2, #69	; 0x45
    9b0a:	7011      	strb	r1, [r2, #0]
    9b0c:	4a6c      	ldr	r2, [pc, #432]	; (9cc0 <_printf_i+0x22c>)
    9b0e:	e030      	b.n	9b72 <_printf_i+0xde>
    9b10:	000e      	movs	r6, r1
    9b12:	681a      	ldr	r2, [r3, #0]
    9b14:	3642      	adds	r6, #66	; 0x42
    9b16:	1d11      	adds	r1, r2, #4
    9b18:	6019      	str	r1, [r3, #0]
    9b1a:	6813      	ldr	r3, [r2, #0]
    9b1c:	7033      	strb	r3, [r6, #0]
    9b1e:	2301      	movs	r3, #1
    9b20:	e079      	b.n	9c16 <_printf_i+0x182>
    9b22:	0649      	lsls	r1, r1, #25
    9b24:	d5d9      	bpl.n	9ada <_printf_i+0x46>
    9b26:	1d11      	adds	r1, r2, #4
    9b28:	6019      	str	r1, [r3, #0]
    9b2a:	2300      	movs	r3, #0
    9b2c:	5ed5      	ldrsh	r5, [r2, r3]
    9b2e:	2d00      	cmp	r5, #0
    9b30:	da03      	bge.n	9b3a <_printf_i+0xa6>
    9b32:	232d      	movs	r3, #45	; 0x2d
    9b34:	9a04      	ldr	r2, [sp, #16]
    9b36:	426d      	negs	r5, r5
    9b38:	7013      	strb	r3, [r2, #0]
    9b3a:	4b62      	ldr	r3, [pc, #392]	; (9cc4 <_printf_i+0x230>)
    9b3c:	270a      	movs	r7, #10
    9b3e:	9303      	str	r3, [sp, #12]
    9b40:	e02f      	b.n	9ba2 <_printf_i+0x10e>
    9b42:	6820      	ldr	r0, [r4, #0]
    9b44:	6819      	ldr	r1, [r3, #0]
    9b46:	0605      	lsls	r5, r0, #24
    9b48:	d503      	bpl.n	9b52 <_printf_i+0xbe>
    9b4a:	1d08      	adds	r0, r1, #4
    9b4c:	6018      	str	r0, [r3, #0]
    9b4e:	680d      	ldr	r5, [r1, #0]
    9b50:	e005      	b.n	9b5e <_printf_i+0xca>
    9b52:	0640      	lsls	r0, r0, #25
    9b54:	d5f9      	bpl.n	9b4a <_printf_i+0xb6>
    9b56:	680d      	ldr	r5, [r1, #0]
    9b58:	1d08      	adds	r0, r1, #4
    9b5a:	6018      	str	r0, [r3, #0]
    9b5c:	b2ad      	uxth	r5, r5
    9b5e:	4b59      	ldr	r3, [pc, #356]	; (9cc4 <_printf_i+0x230>)
    9b60:	2708      	movs	r7, #8
    9b62:	9303      	str	r3, [sp, #12]
    9b64:	2a6f      	cmp	r2, #111	; 0x6f
    9b66:	d018      	beq.n	9b9a <_printf_i+0x106>
    9b68:	270a      	movs	r7, #10
    9b6a:	e016      	b.n	9b9a <_printf_i+0x106>
    9b6c:	3145      	adds	r1, #69	; 0x45
    9b6e:	700a      	strb	r2, [r1, #0]
    9b70:	4a54      	ldr	r2, [pc, #336]	; (9cc4 <_printf_i+0x230>)
    9b72:	9203      	str	r2, [sp, #12]
    9b74:	681a      	ldr	r2, [r3, #0]
    9b76:	6821      	ldr	r1, [r4, #0]
    9b78:	1d10      	adds	r0, r2, #4
    9b7a:	6018      	str	r0, [r3, #0]
    9b7c:	6815      	ldr	r5, [r2, #0]
    9b7e:	0608      	lsls	r0, r1, #24
    9b80:	d522      	bpl.n	9bc8 <_printf_i+0x134>
    9b82:	07cb      	lsls	r3, r1, #31
    9b84:	d502      	bpl.n	9b8c <_printf_i+0xf8>
    9b86:	2320      	movs	r3, #32
    9b88:	4319      	orrs	r1, r3
    9b8a:	6021      	str	r1, [r4, #0]
    9b8c:	2710      	movs	r7, #16
    9b8e:	2d00      	cmp	r5, #0
    9b90:	d103      	bne.n	9b9a <_printf_i+0x106>
    9b92:	2320      	movs	r3, #32
    9b94:	6822      	ldr	r2, [r4, #0]
    9b96:	439a      	bics	r2, r3
    9b98:	6022      	str	r2, [r4, #0]
    9b9a:	0023      	movs	r3, r4
    9b9c:	2200      	movs	r2, #0
    9b9e:	3343      	adds	r3, #67	; 0x43
    9ba0:	701a      	strb	r2, [r3, #0]
    9ba2:	6863      	ldr	r3, [r4, #4]
    9ba4:	60a3      	str	r3, [r4, #8]
    9ba6:	2b00      	cmp	r3, #0
    9ba8:	db5c      	blt.n	9c64 <_printf_i+0x1d0>
    9baa:	2204      	movs	r2, #4
    9bac:	6821      	ldr	r1, [r4, #0]
    9bae:	4391      	bics	r1, r2
    9bb0:	6021      	str	r1, [r4, #0]
    9bb2:	2d00      	cmp	r5, #0
    9bb4:	d158      	bne.n	9c68 <_printf_i+0x1d4>
    9bb6:	9e04      	ldr	r6, [sp, #16]
    9bb8:	2b00      	cmp	r3, #0
    9bba:	d064      	beq.n	9c86 <_printf_i+0x1f2>
    9bbc:	0026      	movs	r6, r4
    9bbe:	9b03      	ldr	r3, [sp, #12]
    9bc0:	3642      	adds	r6, #66	; 0x42
    9bc2:	781b      	ldrb	r3, [r3, #0]
    9bc4:	7033      	strb	r3, [r6, #0]
    9bc6:	e05e      	b.n	9c86 <_printf_i+0x1f2>
    9bc8:	0648      	lsls	r0, r1, #25
    9bca:	d5da      	bpl.n	9b82 <_printf_i+0xee>
    9bcc:	b2ad      	uxth	r5, r5
    9bce:	e7d8      	b.n	9b82 <_printf_i+0xee>
    9bd0:	6809      	ldr	r1, [r1, #0]
    9bd2:	681a      	ldr	r2, [r3, #0]
    9bd4:	0608      	lsls	r0, r1, #24
    9bd6:	d505      	bpl.n	9be4 <_printf_i+0x150>
    9bd8:	1d11      	adds	r1, r2, #4
    9bda:	6019      	str	r1, [r3, #0]
    9bdc:	6813      	ldr	r3, [r2, #0]
    9bde:	6962      	ldr	r2, [r4, #20]
    9be0:	601a      	str	r2, [r3, #0]
    9be2:	e006      	b.n	9bf2 <_printf_i+0x15e>
    9be4:	0649      	lsls	r1, r1, #25
    9be6:	d5f7      	bpl.n	9bd8 <_printf_i+0x144>
    9be8:	1d11      	adds	r1, r2, #4
    9bea:	6019      	str	r1, [r3, #0]
    9bec:	6813      	ldr	r3, [r2, #0]
    9bee:	8aa2      	ldrh	r2, [r4, #20]
    9bf0:	801a      	strh	r2, [r3, #0]
    9bf2:	2300      	movs	r3, #0
    9bf4:	9e04      	ldr	r6, [sp, #16]
    9bf6:	6123      	str	r3, [r4, #16]
    9bf8:	e054      	b.n	9ca4 <_printf_i+0x210>
    9bfa:	681a      	ldr	r2, [r3, #0]
    9bfc:	1d11      	adds	r1, r2, #4
    9bfe:	6019      	str	r1, [r3, #0]
    9c00:	6816      	ldr	r6, [r2, #0]
    9c02:	2100      	movs	r1, #0
    9c04:	6862      	ldr	r2, [r4, #4]
    9c06:	0030      	movs	r0, r6
    9c08:	f000 ffca 	bl	aba0 <memchr>
    9c0c:	2800      	cmp	r0, #0
    9c0e:	d001      	beq.n	9c14 <_printf_i+0x180>
    9c10:	1b80      	subs	r0, r0, r6
    9c12:	6060      	str	r0, [r4, #4]
    9c14:	6863      	ldr	r3, [r4, #4]
    9c16:	6123      	str	r3, [r4, #16]
    9c18:	2300      	movs	r3, #0
    9c1a:	9a04      	ldr	r2, [sp, #16]
    9c1c:	7013      	strb	r3, [r2, #0]
    9c1e:	e041      	b.n	9ca4 <_printf_i+0x210>
    9c20:	6923      	ldr	r3, [r4, #16]
    9c22:	0032      	movs	r2, r6
    9c24:	9906      	ldr	r1, [sp, #24]
    9c26:	9805      	ldr	r0, [sp, #20]
    9c28:	9d07      	ldr	r5, [sp, #28]
    9c2a:	47a8      	blx	r5
    9c2c:	1c43      	adds	r3, r0, #1
    9c2e:	d043      	beq.n	9cb8 <_printf_i+0x224>
    9c30:	6823      	ldr	r3, [r4, #0]
    9c32:	2500      	movs	r5, #0
    9c34:	079b      	lsls	r3, r3, #30
    9c36:	d40f      	bmi.n	9c58 <_printf_i+0x1c4>
    9c38:	9b09      	ldr	r3, [sp, #36]	; 0x24
    9c3a:	68e0      	ldr	r0, [r4, #12]
    9c3c:	4298      	cmp	r0, r3
    9c3e:	da3d      	bge.n	9cbc <_printf_i+0x228>
    9c40:	0018      	movs	r0, r3
    9c42:	e03b      	b.n	9cbc <_printf_i+0x228>
    9c44:	0022      	movs	r2, r4
    9c46:	2301      	movs	r3, #1
    9c48:	3219      	adds	r2, #25
    9c4a:	9906      	ldr	r1, [sp, #24]
    9c4c:	9805      	ldr	r0, [sp, #20]
    9c4e:	9e07      	ldr	r6, [sp, #28]
    9c50:	47b0      	blx	r6
    9c52:	1c43      	adds	r3, r0, #1
    9c54:	d030      	beq.n	9cb8 <_printf_i+0x224>
    9c56:	3501      	adds	r5, #1
    9c58:	68e3      	ldr	r3, [r4, #12]
    9c5a:	9a09      	ldr	r2, [sp, #36]	; 0x24
    9c5c:	1a9b      	subs	r3, r3, r2
    9c5e:	429d      	cmp	r5, r3
    9c60:	dbf0      	blt.n	9c44 <_printf_i+0x1b0>
    9c62:	e7e9      	b.n	9c38 <_printf_i+0x1a4>
    9c64:	2d00      	cmp	r5, #0
    9c66:	d0a9      	beq.n	9bbc <_printf_i+0x128>
    9c68:	9e04      	ldr	r6, [sp, #16]
    9c6a:	0028      	movs	r0, r5
    9c6c:	0039      	movs	r1, r7
    9c6e:	f7fd fbd3 	bl	7418 <__aeabi_uidivmod>
    9c72:	9b03      	ldr	r3, [sp, #12]
    9c74:	3e01      	subs	r6, #1
    9c76:	5c5b      	ldrb	r3, [r3, r1]
    9c78:	0028      	movs	r0, r5
    9c7a:	7033      	strb	r3, [r6, #0]
    9c7c:	0039      	movs	r1, r7
    9c7e:	f7fd fb45 	bl	730c <__udivsi3>
    9c82:	1e05      	subs	r5, r0, #0
    9c84:	d1f1      	bne.n	9c6a <_printf_i+0x1d6>
    9c86:	2f08      	cmp	r7, #8
    9c88:	d109      	bne.n	9c9e <_printf_i+0x20a>
    9c8a:	6823      	ldr	r3, [r4, #0]
    9c8c:	07db      	lsls	r3, r3, #31
    9c8e:	d506      	bpl.n	9c9e <_printf_i+0x20a>
    9c90:	6863      	ldr	r3, [r4, #4]
    9c92:	6922      	ldr	r2, [r4, #16]
    9c94:	4293      	cmp	r3, r2
    9c96:	dc02      	bgt.n	9c9e <_printf_i+0x20a>
    9c98:	2330      	movs	r3, #48	; 0x30
    9c9a:	3e01      	subs	r6, #1
    9c9c:	7033      	strb	r3, [r6, #0]
    9c9e:	9b04      	ldr	r3, [sp, #16]
    9ca0:	1b9b      	subs	r3, r3, r6
    9ca2:	6123      	str	r3, [r4, #16]
    9ca4:	9b07      	ldr	r3, [sp, #28]
    9ca6:	aa09      	add	r2, sp, #36	; 0x24
    9ca8:	9300      	str	r3, [sp, #0]
    9caa:	0021      	movs	r1, r4
    9cac:	9b06      	ldr	r3, [sp, #24]
    9cae:	9805      	ldr	r0, [sp, #20]
    9cb0:	f7ff fe82 	bl	99b8 <_printf_common>
    9cb4:	1c43      	adds	r3, r0, #1
    9cb6:	d1b3      	bne.n	9c20 <_printf_i+0x18c>
    9cb8:	2001      	movs	r0, #1
    9cba:	4240      	negs	r0, r0
    9cbc:	b00b      	add	sp, #44	; 0x2c
    9cbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9cc0:	0000bde3 	.word	0x0000bde3
    9cc4:	0000bdd2 	.word	0x0000bdd2

00009cc8 <realloc>:
    9cc8:	b510      	push	{r4, lr}
    9cca:	4b03      	ldr	r3, [pc, #12]	; (9cd8 <realloc+0x10>)
    9ccc:	000a      	movs	r2, r1
    9cce:	0001      	movs	r1, r0
    9cd0:	6818      	ldr	r0, [r3, #0]
    9cd2:	f001 fa63 	bl	b19c <_realloc_r>
    9cd6:	bd10      	pop	{r4, pc}
    9cd8:	20000088 	.word	0x20000088

00009cdc <_sbrk_r>:
    9cdc:	2300      	movs	r3, #0
    9cde:	b570      	push	{r4, r5, r6, lr}
    9ce0:	4c06      	ldr	r4, [pc, #24]	; (9cfc <_sbrk_r+0x20>)
    9ce2:	0005      	movs	r5, r0
    9ce4:	0008      	movs	r0, r1
    9ce6:	6023      	str	r3, [r4, #0]
    9ce8:	f001 fc2e 	bl	b548 <_sbrk>
    9cec:	1c43      	adds	r3, r0, #1
    9cee:	d103      	bne.n	9cf8 <_sbrk_r+0x1c>
    9cf0:	6823      	ldr	r3, [r4, #0]
    9cf2:	2b00      	cmp	r3, #0
    9cf4:	d000      	beq.n	9cf8 <_sbrk_r+0x1c>
    9cf6:	602b      	str	r3, [r5, #0]
    9cf8:	bd70      	pop	{r4, r5, r6, pc}
    9cfa:	46c0      	nop			; (mov r8, r8)
    9cfc:	20001070 	.word	0x20001070

00009d00 <siprintf>:
    9d00:	b40e      	push	{r1, r2, r3}
    9d02:	b510      	push	{r4, lr}
    9d04:	b09d      	sub	sp, #116	; 0x74
    9d06:	a902      	add	r1, sp, #8
    9d08:	9002      	str	r0, [sp, #8]
    9d0a:	6108      	str	r0, [r1, #16]
    9d0c:	480b      	ldr	r0, [pc, #44]	; (9d3c <siprintf+0x3c>)
    9d0e:	2482      	movs	r4, #130	; 0x82
    9d10:	6088      	str	r0, [r1, #8]
    9d12:	6148      	str	r0, [r1, #20]
    9d14:	2001      	movs	r0, #1
    9d16:	4240      	negs	r0, r0
    9d18:	ab1f      	add	r3, sp, #124	; 0x7c
    9d1a:	81c8      	strh	r0, [r1, #14]
    9d1c:	4808      	ldr	r0, [pc, #32]	; (9d40 <siprintf+0x40>)
    9d1e:	cb04      	ldmia	r3!, {r2}
    9d20:	00a4      	lsls	r4, r4, #2
    9d22:	6800      	ldr	r0, [r0, #0]
    9d24:	9301      	str	r3, [sp, #4]
    9d26:	818c      	strh	r4, [r1, #12]
    9d28:	f001 fac0 	bl	b2ac <_svfiprintf_r>
    9d2c:	2300      	movs	r3, #0
    9d2e:	9a02      	ldr	r2, [sp, #8]
    9d30:	7013      	strb	r3, [r2, #0]
    9d32:	b01d      	add	sp, #116	; 0x74
    9d34:	bc10      	pop	{r4}
    9d36:	bc08      	pop	{r3}
    9d38:	b003      	add	sp, #12
    9d3a:	4718      	bx	r3
    9d3c:	7fffffff 	.word	0x7fffffff
    9d40:	20000088 	.word	0x20000088

00009d44 <strcpy>:
    9d44:	1c03      	adds	r3, r0, #0
    9d46:	780a      	ldrb	r2, [r1, #0]
    9d48:	3101      	adds	r1, #1
    9d4a:	701a      	strb	r2, [r3, #0]
    9d4c:	3301      	adds	r3, #1
    9d4e:	2a00      	cmp	r2, #0
    9d50:	d1f9      	bne.n	9d46 <strcpy+0x2>
    9d52:	4770      	bx	lr

00009d54 <strlen>:
    9d54:	2300      	movs	r3, #0
    9d56:	5cc2      	ldrb	r2, [r0, r3]
    9d58:	3301      	adds	r3, #1
    9d5a:	2a00      	cmp	r2, #0
    9d5c:	d1fb      	bne.n	9d56 <strlen+0x2>
    9d5e:	1e58      	subs	r0, r3, #1
    9d60:	4770      	bx	lr

00009d62 <_strtoul_l.isra.0>:
    9d62:	b5f0      	push	{r4, r5, r6, r7, lr}
    9d64:	001f      	movs	r7, r3
    9d66:	000e      	movs	r6, r1
    9d68:	b087      	sub	sp, #28
    9d6a:	9005      	str	r0, [sp, #20]
    9d6c:	9103      	str	r1, [sp, #12]
    9d6e:	9201      	str	r2, [sp, #4]
    9d70:	980c      	ldr	r0, [sp, #48]	; 0x30
    9d72:	7834      	ldrb	r4, [r6, #0]
    9d74:	f7ff fa34 	bl	91e0 <__locale_ctype_ptr_l>
    9d78:	2208      	movs	r2, #8
    9d7a:	1900      	adds	r0, r0, r4
    9d7c:	7843      	ldrb	r3, [r0, #1]
    9d7e:	1c75      	adds	r5, r6, #1
    9d80:	4013      	ands	r3, r2
    9d82:	d10c      	bne.n	9d9e <_strtoul_l.isra.0+0x3c>
    9d84:	2c2d      	cmp	r4, #45	; 0x2d
    9d86:	d10c      	bne.n	9da2 <_strtoul_l.isra.0+0x40>
    9d88:	3301      	adds	r3, #1
    9d8a:	782c      	ldrb	r4, [r5, #0]
    9d8c:	9302      	str	r3, [sp, #8]
    9d8e:	1cb5      	adds	r5, r6, #2
    9d90:	2f00      	cmp	r7, #0
    9d92:	d00c      	beq.n	9dae <_strtoul_l.isra.0+0x4c>
    9d94:	2f10      	cmp	r7, #16
    9d96:	d114      	bne.n	9dc2 <_strtoul_l.isra.0+0x60>
    9d98:	2c30      	cmp	r4, #48	; 0x30
    9d9a:	d00a      	beq.n	9db2 <_strtoul_l.isra.0+0x50>
    9d9c:	e011      	b.n	9dc2 <_strtoul_l.isra.0+0x60>
    9d9e:	002e      	movs	r6, r5
    9da0:	e7e6      	b.n	9d70 <_strtoul_l.isra.0+0xe>
    9da2:	9302      	str	r3, [sp, #8]
    9da4:	2c2b      	cmp	r4, #43	; 0x2b
    9da6:	d1f3      	bne.n	9d90 <_strtoul_l.isra.0+0x2e>
    9da8:	782c      	ldrb	r4, [r5, #0]
    9daa:	1cb5      	adds	r5, r6, #2
    9dac:	e7f0      	b.n	9d90 <_strtoul_l.isra.0+0x2e>
    9dae:	2c30      	cmp	r4, #48	; 0x30
    9db0:	d12f      	bne.n	9e12 <_strtoul_l.isra.0+0xb0>
    9db2:	2220      	movs	r2, #32
    9db4:	782b      	ldrb	r3, [r5, #0]
    9db6:	4393      	bics	r3, r2
    9db8:	2b58      	cmp	r3, #88	; 0x58
    9dba:	d154      	bne.n	9e66 <_strtoul_l.isra.0+0x104>
    9dbc:	2710      	movs	r7, #16
    9dbe:	786c      	ldrb	r4, [r5, #1]
    9dc0:	3502      	adds	r5, #2
    9dc2:	2001      	movs	r0, #1
    9dc4:	0039      	movs	r1, r7
    9dc6:	4240      	negs	r0, r0
    9dc8:	f7fd faa0 	bl	730c <__udivsi3>
    9dcc:	0006      	movs	r6, r0
    9dce:	2001      	movs	r0, #1
    9dd0:	0039      	movs	r1, r7
    9dd2:	4240      	negs	r0, r0
    9dd4:	f7fd fb20 	bl	7418 <__aeabi_uidivmod>
    9dd8:	2300      	movs	r3, #0
    9dda:	9104      	str	r1, [sp, #16]
    9ddc:	2101      	movs	r1, #1
    9dde:	2201      	movs	r2, #1
    9de0:	0018      	movs	r0, r3
    9de2:	468c      	mov	ip, r1
    9de4:	4252      	negs	r2, r2
    9de6:	0021      	movs	r1, r4
    9de8:	3930      	subs	r1, #48	; 0x30
    9dea:	2909      	cmp	r1, #9
    9dec:	d813      	bhi.n	9e16 <_strtoul_l.isra.0+0xb4>
    9dee:	000c      	movs	r4, r1
    9df0:	42a7      	cmp	r7, r4
    9df2:	dd1e      	ble.n	9e32 <_strtoul_l.isra.0+0xd0>
    9df4:	2b00      	cmp	r3, #0
    9df6:	db1a      	blt.n	9e2e <_strtoul_l.isra.0+0xcc>
    9df8:	0013      	movs	r3, r2
    9dfa:	4286      	cmp	r6, r0
    9dfc:	d306      	bcc.n	9e0c <_strtoul_l.isra.0+0xaa>
    9dfe:	d102      	bne.n	9e06 <_strtoul_l.isra.0+0xa4>
    9e00:	9904      	ldr	r1, [sp, #16]
    9e02:	42a1      	cmp	r1, r4
    9e04:	db02      	blt.n	9e0c <_strtoul_l.isra.0+0xaa>
    9e06:	4663      	mov	r3, ip
    9e08:	4378      	muls	r0, r7
    9e0a:	1820      	adds	r0, r4, r0
    9e0c:	782c      	ldrb	r4, [r5, #0]
    9e0e:	3501      	adds	r5, #1
    9e10:	e7e9      	b.n	9de6 <_strtoul_l.isra.0+0x84>
    9e12:	270a      	movs	r7, #10
    9e14:	e7d5      	b.n	9dc2 <_strtoul_l.isra.0+0x60>
    9e16:	0021      	movs	r1, r4
    9e18:	3941      	subs	r1, #65	; 0x41
    9e1a:	2919      	cmp	r1, #25
    9e1c:	d801      	bhi.n	9e22 <_strtoul_l.isra.0+0xc0>
    9e1e:	3c37      	subs	r4, #55	; 0x37
    9e20:	e7e6      	b.n	9df0 <_strtoul_l.isra.0+0x8e>
    9e22:	0021      	movs	r1, r4
    9e24:	3961      	subs	r1, #97	; 0x61
    9e26:	2919      	cmp	r1, #25
    9e28:	d803      	bhi.n	9e32 <_strtoul_l.isra.0+0xd0>
    9e2a:	3c57      	subs	r4, #87	; 0x57
    9e2c:	e7e0      	b.n	9df0 <_strtoul_l.isra.0+0x8e>
    9e2e:	0013      	movs	r3, r2
    9e30:	e7ec      	b.n	9e0c <_strtoul_l.isra.0+0xaa>
    9e32:	2b00      	cmp	r3, #0
    9e34:	da09      	bge.n	9e4a <_strtoul_l.isra.0+0xe8>
    9e36:	2322      	movs	r3, #34	; 0x22
    9e38:	2001      	movs	r0, #1
    9e3a:	9a05      	ldr	r2, [sp, #20]
    9e3c:	4240      	negs	r0, r0
    9e3e:	6013      	str	r3, [r2, #0]
    9e40:	9b01      	ldr	r3, [sp, #4]
    9e42:	2b00      	cmp	r3, #0
    9e44:	d10b      	bne.n	9e5e <_strtoul_l.isra.0+0xfc>
    9e46:	b007      	add	sp, #28
    9e48:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9e4a:	9a02      	ldr	r2, [sp, #8]
    9e4c:	2a00      	cmp	r2, #0
    9e4e:	d000      	beq.n	9e52 <_strtoul_l.isra.0+0xf0>
    9e50:	4240      	negs	r0, r0
    9e52:	9a01      	ldr	r2, [sp, #4]
    9e54:	2a00      	cmp	r2, #0
    9e56:	d0f6      	beq.n	9e46 <_strtoul_l.isra.0+0xe4>
    9e58:	9a03      	ldr	r2, [sp, #12]
    9e5a:	2b00      	cmp	r3, #0
    9e5c:	d000      	beq.n	9e60 <_strtoul_l.isra.0+0xfe>
    9e5e:	1e6a      	subs	r2, r5, #1
    9e60:	9b01      	ldr	r3, [sp, #4]
    9e62:	601a      	str	r2, [r3, #0]
    9e64:	e7ef      	b.n	9e46 <_strtoul_l.isra.0+0xe4>
    9e66:	2430      	movs	r4, #48	; 0x30
    9e68:	2f00      	cmp	r7, #0
    9e6a:	d1aa      	bne.n	9dc2 <_strtoul_l.isra.0+0x60>
    9e6c:	3708      	adds	r7, #8
    9e6e:	e7a8      	b.n	9dc2 <_strtoul_l.isra.0+0x60>

00009e70 <strtoul>:
    9e70:	b537      	push	{r0, r1, r2, r4, r5, lr}
    9e72:	0013      	movs	r3, r2
    9e74:	4a06      	ldr	r2, [pc, #24]	; (9e90 <strtoul+0x20>)
    9e76:	0005      	movs	r5, r0
    9e78:	6810      	ldr	r0, [r2, #0]
    9e7a:	6a04      	ldr	r4, [r0, #32]
    9e7c:	2c00      	cmp	r4, #0
    9e7e:	d100      	bne.n	9e82 <strtoul+0x12>
    9e80:	4c04      	ldr	r4, [pc, #16]	; (9e94 <strtoul+0x24>)
    9e82:	000a      	movs	r2, r1
    9e84:	9400      	str	r4, [sp, #0]
    9e86:	0029      	movs	r1, r5
    9e88:	f7ff ff6b 	bl	9d62 <_strtoul_l.isra.0>
    9e8c:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    9e8e:	46c0      	nop			; (mov r8, r8)
    9e90:	20000088 	.word	0x20000088
    9e94:	200000ec 	.word	0x200000ec

00009e98 <__ascii_wctomb>:
    9e98:	1e0b      	subs	r3, r1, #0
    9e9a:	d004      	beq.n	9ea6 <__ascii_wctomb+0xe>
    9e9c:	2aff      	cmp	r2, #255	; 0xff
    9e9e:	d904      	bls.n	9eaa <__ascii_wctomb+0x12>
    9ea0:	238a      	movs	r3, #138	; 0x8a
    9ea2:	6003      	str	r3, [r0, #0]
    9ea4:	3b8b      	subs	r3, #139	; 0x8b
    9ea6:	0018      	movs	r0, r3
    9ea8:	4770      	bx	lr
    9eaa:	700a      	strb	r2, [r1, #0]
    9eac:	2301      	movs	r3, #1
    9eae:	e7fa      	b.n	9ea6 <__ascii_wctomb+0xe>

00009eb0 <quorem>:
    9eb0:	b5f0      	push	{r4, r5, r6, r7, lr}
    9eb2:	6903      	ldr	r3, [r0, #16]
    9eb4:	690c      	ldr	r4, [r1, #16]
    9eb6:	b089      	sub	sp, #36	; 0x24
    9eb8:	0007      	movs	r7, r0
    9eba:	9105      	str	r1, [sp, #20]
    9ebc:	2600      	movs	r6, #0
    9ebe:	429c      	cmp	r4, r3
    9ec0:	dc6d      	bgt.n	9f9e <quorem+0xee>
    9ec2:	000b      	movs	r3, r1
    9ec4:	3c01      	subs	r4, #1
    9ec6:	3314      	adds	r3, #20
    9ec8:	00a5      	lsls	r5, r4, #2
    9eca:	9303      	str	r3, [sp, #12]
    9ecc:	195b      	adds	r3, r3, r5
    9ece:	9304      	str	r3, [sp, #16]
    9ed0:	0003      	movs	r3, r0
    9ed2:	3314      	adds	r3, #20
    9ed4:	9302      	str	r3, [sp, #8]
    9ed6:	195d      	adds	r5, r3, r5
    9ed8:	9b04      	ldr	r3, [sp, #16]
    9eda:	6828      	ldr	r0, [r5, #0]
    9edc:	681b      	ldr	r3, [r3, #0]
    9ede:	1c59      	adds	r1, r3, #1
    9ee0:	9301      	str	r3, [sp, #4]
    9ee2:	f7fd fa13 	bl	730c <__udivsi3>
    9ee6:	9001      	str	r0, [sp, #4]
    9ee8:	42b0      	cmp	r0, r6
    9eea:	d02d      	beq.n	9f48 <quorem+0x98>
    9eec:	9b03      	ldr	r3, [sp, #12]
    9eee:	9802      	ldr	r0, [sp, #8]
    9ef0:	469c      	mov	ip, r3
    9ef2:	9606      	str	r6, [sp, #24]
    9ef4:	4662      	mov	r2, ip
    9ef6:	ca08      	ldmia	r2!, {r3}
    9ef8:	4694      	mov	ip, r2
    9efa:	9a01      	ldr	r2, [sp, #4]
    9efc:	b299      	uxth	r1, r3
    9efe:	4351      	muls	r1, r2
    9f00:	0c1b      	lsrs	r3, r3, #16
    9f02:	4353      	muls	r3, r2
    9f04:	1989      	adds	r1, r1, r6
    9f06:	0c0a      	lsrs	r2, r1, #16
    9f08:	189b      	adds	r3, r3, r2
    9f0a:	9307      	str	r3, [sp, #28]
    9f0c:	8802      	ldrh	r2, [r0, #0]
    9f0e:	0c1e      	lsrs	r6, r3, #16
    9f10:	9b06      	ldr	r3, [sp, #24]
    9f12:	b289      	uxth	r1, r1
    9f14:	18d2      	adds	r2, r2, r3
    9f16:	6803      	ldr	r3, [r0, #0]
    9f18:	1a52      	subs	r2, r2, r1
    9f1a:	0c19      	lsrs	r1, r3, #16
    9f1c:	466b      	mov	r3, sp
    9f1e:	8b9b      	ldrh	r3, [r3, #28]
    9f20:	1acb      	subs	r3, r1, r3
    9f22:	1411      	asrs	r1, r2, #16
    9f24:	185b      	adds	r3, r3, r1
    9f26:	1419      	asrs	r1, r3, #16
    9f28:	b292      	uxth	r2, r2
    9f2a:	041b      	lsls	r3, r3, #16
    9f2c:	431a      	orrs	r2, r3
    9f2e:	9b04      	ldr	r3, [sp, #16]
    9f30:	9106      	str	r1, [sp, #24]
    9f32:	c004      	stmia	r0!, {r2}
    9f34:	4563      	cmp	r3, ip
    9f36:	d2dd      	bcs.n	9ef4 <quorem+0x44>
    9f38:	682b      	ldr	r3, [r5, #0]
    9f3a:	2b00      	cmp	r3, #0
    9f3c:	d104      	bne.n	9f48 <quorem+0x98>
    9f3e:	9b02      	ldr	r3, [sp, #8]
    9f40:	3d04      	subs	r5, #4
    9f42:	42ab      	cmp	r3, r5
    9f44:	d32e      	bcc.n	9fa4 <quorem+0xf4>
    9f46:	613c      	str	r4, [r7, #16]
    9f48:	9905      	ldr	r1, [sp, #20]
    9f4a:	0038      	movs	r0, r7
    9f4c:	f001 f847 	bl	afde <__mcmp>
    9f50:	2800      	cmp	r0, #0
    9f52:	db23      	blt.n	9f9c <quorem+0xec>
    9f54:	2500      	movs	r5, #0
    9f56:	9b01      	ldr	r3, [sp, #4]
    9f58:	9802      	ldr	r0, [sp, #8]
    9f5a:	3301      	adds	r3, #1
    9f5c:	9903      	ldr	r1, [sp, #12]
    9f5e:	9301      	str	r3, [sp, #4]
    9f60:	c908      	ldmia	r1!, {r3}
    9f62:	8802      	ldrh	r2, [r0, #0]
    9f64:	1955      	adds	r5, r2, r5
    9f66:	b29a      	uxth	r2, r3
    9f68:	1aaa      	subs	r2, r5, r2
    9f6a:	6805      	ldr	r5, [r0, #0]
    9f6c:	0c1b      	lsrs	r3, r3, #16
    9f6e:	0c2d      	lsrs	r5, r5, #16
    9f70:	1aeb      	subs	r3, r5, r3
    9f72:	1415      	asrs	r5, r2, #16
    9f74:	195b      	adds	r3, r3, r5
    9f76:	141d      	asrs	r5, r3, #16
    9f78:	b292      	uxth	r2, r2
    9f7a:	041b      	lsls	r3, r3, #16
    9f7c:	4313      	orrs	r3, r2
    9f7e:	c008      	stmia	r0!, {r3}
    9f80:	9b04      	ldr	r3, [sp, #16]
    9f82:	428b      	cmp	r3, r1
    9f84:	d2ec      	bcs.n	9f60 <quorem+0xb0>
    9f86:	9a02      	ldr	r2, [sp, #8]
    9f88:	00a3      	lsls	r3, r4, #2
    9f8a:	18d3      	adds	r3, r2, r3
    9f8c:	681a      	ldr	r2, [r3, #0]
    9f8e:	2a00      	cmp	r2, #0
    9f90:	d104      	bne.n	9f9c <quorem+0xec>
    9f92:	9a02      	ldr	r2, [sp, #8]
    9f94:	3b04      	subs	r3, #4
    9f96:	429a      	cmp	r2, r3
    9f98:	d309      	bcc.n	9fae <quorem+0xfe>
    9f9a:	613c      	str	r4, [r7, #16]
    9f9c:	9e01      	ldr	r6, [sp, #4]
    9f9e:	0030      	movs	r0, r6
    9fa0:	b009      	add	sp, #36	; 0x24
    9fa2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9fa4:	682b      	ldr	r3, [r5, #0]
    9fa6:	2b00      	cmp	r3, #0
    9fa8:	d1cd      	bne.n	9f46 <quorem+0x96>
    9faa:	3c01      	subs	r4, #1
    9fac:	e7c7      	b.n	9f3e <quorem+0x8e>
    9fae:	681a      	ldr	r2, [r3, #0]
    9fb0:	2a00      	cmp	r2, #0
    9fb2:	d1f2      	bne.n	9f9a <quorem+0xea>
    9fb4:	3c01      	subs	r4, #1
    9fb6:	e7ec      	b.n	9f92 <quorem+0xe2>

00009fb8 <_dtoa_r>:
    9fb8:	b5f0      	push	{r4, r5, r6, r7, lr}
    9fba:	0016      	movs	r6, r2
    9fbc:	001f      	movs	r7, r3
    9fbe:	6a44      	ldr	r4, [r0, #36]	; 0x24
    9fc0:	b09d      	sub	sp, #116	; 0x74
    9fc2:	9004      	str	r0, [sp, #16]
    9fc4:	9d25      	ldr	r5, [sp, #148]	; 0x94
    9fc6:	9606      	str	r6, [sp, #24]
    9fc8:	9707      	str	r7, [sp, #28]
    9fca:	2c00      	cmp	r4, #0
    9fcc:	d108      	bne.n	9fe0 <_dtoa_r+0x28>
    9fce:	2010      	movs	r0, #16
    9fd0:	f7ff f90a 	bl	91e8 <malloc>
    9fd4:	9b04      	ldr	r3, [sp, #16]
    9fd6:	6258      	str	r0, [r3, #36]	; 0x24
    9fd8:	6044      	str	r4, [r0, #4]
    9fda:	6084      	str	r4, [r0, #8]
    9fdc:	6004      	str	r4, [r0, #0]
    9fde:	60c4      	str	r4, [r0, #12]
    9fe0:	9b04      	ldr	r3, [sp, #16]
    9fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    9fe4:	6819      	ldr	r1, [r3, #0]
    9fe6:	2900      	cmp	r1, #0
    9fe8:	d00b      	beq.n	a002 <_dtoa_r+0x4a>
    9fea:	685a      	ldr	r2, [r3, #4]
    9fec:	2301      	movs	r3, #1
    9fee:	4093      	lsls	r3, r2
    9ff0:	604a      	str	r2, [r1, #4]
    9ff2:	608b      	str	r3, [r1, #8]
    9ff4:	9804      	ldr	r0, [sp, #16]
    9ff6:	f000 fe18 	bl	ac2a <_Bfree>
    9ffa:	2200      	movs	r2, #0
    9ffc:	9b04      	ldr	r3, [sp, #16]
    9ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    a000:	601a      	str	r2, [r3, #0]
    a002:	9b07      	ldr	r3, [sp, #28]
    a004:	2b00      	cmp	r3, #0
    a006:	da1f      	bge.n	a048 <_dtoa_r+0x90>
    a008:	2301      	movs	r3, #1
    a00a:	602b      	str	r3, [r5, #0]
    a00c:	007b      	lsls	r3, r7, #1
    a00e:	085b      	lsrs	r3, r3, #1
    a010:	9307      	str	r3, [sp, #28]
    a012:	9c07      	ldr	r4, [sp, #28]
    a014:	4bb7      	ldr	r3, [pc, #732]	; (a2f4 <_dtoa_r+0x33c>)
    a016:	0022      	movs	r2, r4
    a018:	9319      	str	r3, [sp, #100]	; 0x64
    a01a:	401a      	ands	r2, r3
    a01c:	429a      	cmp	r2, r3
    a01e:	d116      	bne.n	a04e <_dtoa_r+0x96>
    a020:	4bb5      	ldr	r3, [pc, #724]	; (a2f8 <_dtoa_r+0x340>)
    a022:	9a24      	ldr	r2, [sp, #144]	; 0x90
    a024:	6013      	str	r3, [r2, #0]
    a026:	9b06      	ldr	r3, [sp, #24]
    a028:	2b00      	cmp	r3, #0
    a02a:	d103      	bne.n	a034 <_dtoa_r+0x7c>
    a02c:	0324      	lsls	r4, r4, #12
    a02e:	d101      	bne.n	a034 <_dtoa_r+0x7c>
    a030:	f000 fd91 	bl	ab56 <_dtoa_r+0xb9e>
    a034:	4bb1      	ldr	r3, [pc, #708]	; (a2fc <_dtoa_r+0x344>)
    a036:	9a26      	ldr	r2, [sp, #152]	; 0x98
    a038:	930a      	str	r3, [sp, #40]	; 0x28
    a03a:	4bb1      	ldr	r3, [pc, #708]	; (a300 <_dtoa_r+0x348>)
    a03c:	2a00      	cmp	r2, #0
    a03e:	d001      	beq.n	a044 <_dtoa_r+0x8c>
    a040:	f000 fd8f 	bl	ab62 <_dtoa_r+0xbaa>
    a044:	f000 fd8f 	bl	ab66 <_dtoa_r+0xbae>
    a048:	2300      	movs	r3, #0
    a04a:	602b      	str	r3, [r5, #0]
    a04c:	e7e1      	b.n	a012 <_dtoa_r+0x5a>
    a04e:	9e06      	ldr	r6, [sp, #24]
    a050:	9f07      	ldr	r7, [sp, #28]
    a052:	2200      	movs	r2, #0
    a054:	2300      	movs	r3, #0
    a056:	0030      	movs	r0, r6
    a058:	0039      	movs	r1, r7
    a05a:	f7fd fadd 	bl	7618 <__aeabi_dcmpeq>
    a05e:	1e05      	subs	r5, r0, #0
    a060:	d00e      	beq.n	a080 <_dtoa_r+0xc8>
    a062:	2301      	movs	r3, #1
    a064:	9a24      	ldr	r2, [sp, #144]	; 0x90
    a066:	6013      	str	r3, [r2, #0]
    a068:	4ba6      	ldr	r3, [pc, #664]	; (a304 <_dtoa_r+0x34c>)
    a06a:	9a26      	ldr	r2, [sp, #152]	; 0x98
    a06c:	930a      	str	r3, [sp, #40]	; 0x28
    a06e:	2a00      	cmp	r2, #0
    a070:	d101      	bne.n	a076 <_dtoa_r+0xbe>
    a072:	f000 fd78 	bl	ab66 <_dtoa_r+0xbae>
    a076:	4aa4      	ldr	r2, [pc, #656]	; (a308 <_dtoa_r+0x350>)
    a078:	9926      	ldr	r1, [sp, #152]	; 0x98
    a07a:	600a      	str	r2, [r1, #0]
    a07c:	f000 fd73 	bl	ab66 <_dtoa_r+0xbae>
    a080:	ab1a      	add	r3, sp, #104	; 0x68
    a082:	9301      	str	r3, [sp, #4]
    a084:	ab1b      	add	r3, sp, #108	; 0x6c
    a086:	9300      	str	r3, [sp, #0]
    a088:	0032      	movs	r2, r6
    a08a:	003b      	movs	r3, r7
    a08c:	9804      	ldr	r0, [sp, #16]
    a08e:	f001 f823 	bl	b0d8 <__d2b>
    a092:	0063      	lsls	r3, r4, #1
    a094:	9005      	str	r0, [sp, #20]
    a096:	0d5b      	lsrs	r3, r3, #21
    a098:	d100      	bne.n	a09c <_dtoa_r+0xe4>
    a09a:	e07f      	b.n	a19c <_dtoa_r+0x1e4>
    a09c:	033a      	lsls	r2, r7, #12
    a09e:	4c9b      	ldr	r4, [pc, #620]	; (a30c <_dtoa_r+0x354>)
    a0a0:	0b12      	lsrs	r2, r2, #12
    a0a2:	4314      	orrs	r4, r2
    a0a4:	0021      	movs	r1, r4
    a0a6:	4a9a      	ldr	r2, [pc, #616]	; (a310 <_dtoa_r+0x358>)
    a0a8:	0030      	movs	r0, r6
    a0aa:	9518      	str	r5, [sp, #96]	; 0x60
    a0ac:	189e      	adds	r6, r3, r2
    a0ae:	2200      	movs	r2, #0
    a0b0:	4b98      	ldr	r3, [pc, #608]	; (a314 <_dtoa_r+0x35c>)
    a0b2:	f7fe fca3 	bl	89fc <__aeabi_dsub>
    a0b6:	4a98      	ldr	r2, [pc, #608]	; (a318 <_dtoa_r+0x360>)
    a0b8:	4b98      	ldr	r3, [pc, #608]	; (a31c <_dtoa_r+0x364>)
    a0ba:	f7fe fa1f 	bl	84fc <__aeabi_dmul>
    a0be:	4a98      	ldr	r2, [pc, #608]	; (a320 <_dtoa_r+0x368>)
    a0c0:	4b98      	ldr	r3, [pc, #608]	; (a324 <_dtoa_r+0x36c>)
    a0c2:	f7fd fad7 	bl	7674 <__aeabi_dadd>
    a0c6:	0004      	movs	r4, r0
    a0c8:	0030      	movs	r0, r6
    a0ca:	000d      	movs	r5, r1
    a0cc:	f001 f9fa 	bl	b4c4 <__aeabi_i2d>
    a0d0:	4a95      	ldr	r2, [pc, #596]	; (a328 <_dtoa_r+0x370>)
    a0d2:	4b96      	ldr	r3, [pc, #600]	; (a32c <_dtoa_r+0x374>)
    a0d4:	f7fe fa12 	bl	84fc <__aeabi_dmul>
    a0d8:	0002      	movs	r2, r0
    a0da:	000b      	movs	r3, r1
    a0dc:	0020      	movs	r0, r4
    a0de:	0029      	movs	r1, r5
    a0e0:	f7fd fac8 	bl	7674 <__aeabi_dadd>
    a0e4:	0004      	movs	r4, r0
    a0e6:	000d      	movs	r5, r1
    a0e8:	f7fe ffbe 	bl	9068 <__aeabi_d2iz>
    a0ec:	2200      	movs	r2, #0
    a0ee:	9003      	str	r0, [sp, #12]
    a0f0:	2300      	movs	r3, #0
    a0f2:	0020      	movs	r0, r4
    a0f4:	0029      	movs	r1, r5
    a0f6:	f7fd fa95 	bl	7624 <__aeabi_dcmplt>
    a0fa:	2800      	cmp	r0, #0
    a0fc:	d00e      	beq.n	a11c <_dtoa_r+0x164>
    a0fe:	9803      	ldr	r0, [sp, #12]
    a100:	f001 f9e0 	bl	b4c4 <__aeabi_i2d>
    a104:	000b      	movs	r3, r1
    a106:	0002      	movs	r2, r0
    a108:	0029      	movs	r1, r5
    a10a:	0020      	movs	r0, r4
    a10c:	f7fd fa84 	bl	7618 <__aeabi_dcmpeq>
    a110:	0003      	movs	r3, r0
    a112:	4258      	negs	r0, r3
    a114:	4158      	adcs	r0, r3
    a116:	9b03      	ldr	r3, [sp, #12]
    a118:	1a1b      	subs	r3, r3, r0
    a11a:	9303      	str	r3, [sp, #12]
    a11c:	2301      	movs	r3, #1
    a11e:	9316      	str	r3, [sp, #88]	; 0x58
    a120:	9b03      	ldr	r3, [sp, #12]
    a122:	2b16      	cmp	r3, #22
    a124:	d80f      	bhi.n	a146 <_dtoa_r+0x18e>
    a126:	4982      	ldr	r1, [pc, #520]	; (a330 <_dtoa_r+0x378>)
    a128:	00db      	lsls	r3, r3, #3
    a12a:	18c9      	adds	r1, r1, r3
    a12c:	6808      	ldr	r0, [r1, #0]
    a12e:	6849      	ldr	r1, [r1, #4]
    a130:	9a06      	ldr	r2, [sp, #24]
    a132:	9b07      	ldr	r3, [sp, #28]
    a134:	f7fd fa8a 	bl	764c <__aeabi_dcmpgt>
    a138:	2800      	cmp	r0, #0
    a13a:	d04b      	beq.n	a1d4 <_dtoa_r+0x21c>
    a13c:	9b03      	ldr	r3, [sp, #12]
    a13e:	3b01      	subs	r3, #1
    a140:	9303      	str	r3, [sp, #12]
    a142:	2300      	movs	r3, #0
    a144:	9316      	str	r3, [sp, #88]	; 0x58
    a146:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    a148:	1b9e      	subs	r6, r3, r6
    a14a:	2300      	movs	r3, #0
    a14c:	930b      	str	r3, [sp, #44]	; 0x2c
    a14e:	0033      	movs	r3, r6
    a150:	3b01      	subs	r3, #1
    a152:	930c      	str	r3, [sp, #48]	; 0x30
    a154:	d504      	bpl.n	a160 <_dtoa_r+0x1a8>
    a156:	2301      	movs	r3, #1
    a158:	1b9b      	subs	r3, r3, r6
    a15a:	930b      	str	r3, [sp, #44]	; 0x2c
    a15c:	2300      	movs	r3, #0
    a15e:	930c      	str	r3, [sp, #48]	; 0x30
    a160:	9b03      	ldr	r3, [sp, #12]
    a162:	2b00      	cmp	r3, #0
    a164:	db38      	blt.n	a1d8 <_dtoa_r+0x220>
    a166:	9a03      	ldr	r2, [sp, #12]
    a168:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    a16a:	4694      	mov	ip, r2
    a16c:	4463      	add	r3, ip
    a16e:	930c      	str	r3, [sp, #48]	; 0x30
    a170:	2300      	movs	r3, #0
    a172:	920f      	str	r2, [sp, #60]	; 0x3c
    a174:	9308      	str	r3, [sp, #32]
    a176:	9b22      	ldr	r3, [sp, #136]	; 0x88
    a178:	2501      	movs	r5, #1
    a17a:	2b09      	cmp	r3, #9
    a17c:	d900      	bls.n	a180 <_dtoa_r+0x1c8>
    a17e:	e091      	b.n	a2a4 <_dtoa_r+0x2ec>
    a180:	2b05      	cmp	r3, #5
    a182:	dd02      	ble.n	a18a <_dtoa_r+0x1d2>
    a184:	2500      	movs	r5, #0
    a186:	3b04      	subs	r3, #4
    a188:	9322      	str	r3, [sp, #136]	; 0x88
    a18a:	9b22      	ldr	r3, [sp, #136]	; 0x88
    a18c:	1e98      	subs	r0, r3, #2
    a18e:	2803      	cmp	r0, #3
    a190:	d900      	bls.n	a194 <_dtoa_r+0x1dc>
    a192:	e091      	b.n	a2b8 <_dtoa_r+0x300>
    a194:	f7fd f8b0 	bl	72f8 <__gnu_thumb1_case_uqi>
    a198:	76298482 	.word	0x76298482
    a19c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    a19e:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    a1a0:	189e      	adds	r6, r3, r2
    a1a2:	4b64      	ldr	r3, [pc, #400]	; (a334 <_dtoa_r+0x37c>)
    a1a4:	18f2      	adds	r2, r6, r3
    a1a6:	2a20      	cmp	r2, #32
    a1a8:	dd0f      	ble.n	a1ca <_dtoa_r+0x212>
    a1aa:	4b63      	ldr	r3, [pc, #396]	; (a338 <_dtoa_r+0x380>)
    a1ac:	9806      	ldr	r0, [sp, #24]
    a1ae:	18f3      	adds	r3, r6, r3
    a1b0:	40d8      	lsrs	r0, r3
    a1b2:	2340      	movs	r3, #64	; 0x40
    a1b4:	1a9b      	subs	r3, r3, r2
    a1b6:	409c      	lsls	r4, r3
    a1b8:	4320      	orrs	r0, r4
    a1ba:	f7fe ff89 	bl	90d0 <__aeabi_ui2d>
    a1be:	2301      	movs	r3, #1
    a1c0:	4c5e      	ldr	r4, [pc, #376]	; (a33c <_dtoa_r+0x384>)
    a1c2:	3e01      	subs	r6, #1
    a1c4:	1909      	adds	r1, r1, r4
    a1c6:	9318      	str	r3, [sp, #96]	; 0x60
    a1c8:	e771      	b.n	a0ae <_dtoa_r+0xf6>
    a1ca:	2320      	movs	r3, #32
    a1cc:	9806      	ldr	r0, [sp, #24]
    a1ce:	1a9b      	subs	r3, r3, r2
    a1d0:	4098      	lsls	r0, r3
    a1d2:	e7f2      	b.n	a1ba <_dtoa_r+0x202>
    a1d4:	9016      	str	r0, [sp, #88]	; 0x58
    a1d6:	e7b6      	b.n	a146 <_dtoa_r+0x18e>
    a1d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    a1da:	9a03      	ldr	r2, [sp, #12]
    a1dc:	1a9b      	subs	r3, r3, r2
    a1de:	930b      	str	r3, [sp, #44]	; 0x2c
    a1e0:	4253      	negs	r3, r2
    a1e2:	9308      	str	r3, [sp, #32]
    a1e4:	2300      	movs	r3, #0
    a1e6:	930f      	str	r3, [sp, #60]	; 0x3c
    a1e8:	e7c5      	b.n	a176 <_dtoa_r+0x1be>
    a1ea:	2301      	movs	r3, #1
    a1ec:	930e      	str	r3, [sp, #56]	; 0x38
    a1ee:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    a1f0:	2b00      	cmp	r3, #0
    a1f2:	dd65      	ble.n	a2c0 <_dtoa_r+0x308>
    a1f4:	001f      	movs	r7, r3
    a1f6:	930d      	str	r3, [sp, #52]	; 0x34
    a1f8:	9a04      	ldr	r2, [sp, #16]
    a1fa:	6a54      	ldr	r4, [r2, #36]	; 0x24
    a1fc:	2200      	movs	r2, #0
    a1fe:	6062      	str	r2, [r4, #4]
    a200:	3204      	adds	r2, #4
    a202:	0011      	movs	r1, r2
    a204:	3114      	adds	r1, #20
    a206:	4299      	cmp	r1, r3
    a208:	d95f      	bls.n	a2ca <_dtoa_r+0x312>
    a20a:	6861      	ldr	r1, [r4, #4]
    a20c:	9804      	ldr	r0, [sp, #16]
    a20e:	f000 fcd4 	bl	abba <_Balloc>
    a212:	9b04      	ldr	r3, [sp, #16]
    a214:	6020      	str	r0, [r4, #0]
    a216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    a218:	681b      	ldr	r3, [r3, #0]
    a21a:	930a      	str	r3, [sp, #40]	; 0x28
    a21c:	2f0e      	cmp	r7, #14
    a21e:	d900      	bls.n	a222 <_dtoa_r+0x26a>
    a220:	e105      	b.n	a42e <_dtoa_r+0x476>
    a222:	2d00      	cmp	r5, #0
    a224:	d100      	bne.n	a228 <_dtoa_r+0x270>
    a226:	e102      	b.n	a42e <_dtoa_r+0x476>
    a228:	9b06      	ldr	r3, [sp, #24]
    a22a:	9c07      	ldr	r4, [sp, #28]
    a22c:	9314      	str	r3, [sp, #80]	; 0x50
    a22e:	9415      	str	r4, [sp, #84]	; 0x54
    a230:	9b03      	ldr	r3, [sp, #12]
    a232:	2b00      	cmp	r3, #0
    a234:	dc00      	bgt.n	a238 <_dtoa_r+0x280>
    a236:	e085      	b.n	a344 <_dtoa_r+0x38c>
    a238:	001a      	movs	r2, r3
    a23a:	210f      	movs	r1, #15
    a23c:	4b3c      	ldr	r3, [pc, #240]	; (a330 <_dtoa_r+0x378>)
    a23e:	400a      	ands	r2, r1
    a240:	00d2      	lsls	r2, r2, #3
    a242:	189b      	adds	r3, r3, r2
    a244:	685c      	ldr	r4, [r3, #4]
    a246:	681b      	ldr	r3, [r3, #0]
    a248:	9310      	str	r3, [sp, #64]	; 0x40
    a24a:	9411      	str	r4, [sp, #68]	; 0x44
    a24c:	9b03      	ldr	r3, [sp, #12]
    a24e:	2402      	movs	r4, #2
    a250:	111d      	asrs	r5, r3, #4
    a252:	06eb      	lsls	r3, r5, #27
    a254:	d50a      	bpl.n	a26c <_dtoa_r+0x2b4>
    a256:	4b3a      	ldr	r3, [pc, #232]	; (a340 <_dtoa_r+0x388>)
    a258:	400d      	ands	r5, r1
    a25a:	6a1a      	ldr	r2, [r3, #32]
    a25c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    a25e:	9814      	ldr	r0, [sp, #80]	; 0x50
    a260:	9915      	ldr	r1, [sp, #84]	; 0x54
    a262:	f7fd fd17 	bl	7c94 <__aeabi_ddiv>
    a266:	9006      	str	r0, [sp, #24]
    a268:	9107      	str	r1, [sp, #28]
    a26a:	3401      	adds	r4, #1
    a26c:	4e34      	ldr	r6, [pc, #208]	; (a340 <_dtoa_r+0x388>)
    a26e:	2d00      	cmp	r5, #0
    a270:	d130      	bne.n	a2d4 <_dtoa_r+0x31c>
    a272:	9a10      	ldr	r2, [sp, #64]	; 0x40
    a274:	9b11      	ldr	r3, [sp, #68]	; 0x44
    a276:	9806      	ldr	r0, [sp, #24]
    a278:	9907      	ldr	r1, [sp, #28]
    a27a:	f7fd fd0b 	bl	7c94 <__aeabi_ddiv>
    a27e:	9006      	str	r0, [sp, #24]
    a280:	9107      	str	r1, [sp, #28]
    a282:	e07a      	b.n	a37a <_dtoa_r+0x3c2>
    a284:	2301      	movs	r3, #1
    a286:	9a23      	ldr	r2, [sp, #140]	; 0x8c
    a288:	930e      	str	r3, [sp, #56]	; 0x38
    a28a:	4694      	mov	ip, r2
    a28c:	9b03      	ldr	r3, [sp, #12]
    a28e:	4463      	add	r3, ip
    a290:	1c5f      	adds	r7, r3, #1
    a292:	930d      	str	r3, [sp, #52]	; 0x34
    a294:	1e3b      	subs	r3, r7, #0
    a296:	dcaf      	bgt.n	a1f8 <_dtoa_r+0x240>
    a298:	2301      	movs	r3, #1
    a29a:	e7ad      	b.n	a1f8 <_dtoa_r+0x240>
    a29c:	2300      	movs	r3, #0
    a29e:	e7a5      	b.n	a1ec <_dtoa_r+0x234>
    a2a0:	2300      	movs	r3, #0
    a2a2:	e7f0      	b.n	a286 <_dtoa_r+0x2ce>
    a2a4:	2300      	movs	r3, #0
    a2a6:	950e      	str	r5, [sp, #56]	; 0x38
    a2a8:	9322      	str	r3, [sp, #136]	; 0x88
    a2aa:	3b01      	subs	r3, #1
    a2ac:	2200      	movs	r2, #0
    a2ae:	930d      	str	r3, [sp, #52]	; 0x34
    a2b0:	001f      	movs	r7, r3
    a2b2:	3313      	adds	r3, #19
    a2b4:	9223      	str	r2, [sp, #140]	; 0x8c
    a2b6:	e79f      	b.n	a1f8 <_dtoa_r+0x240>
    a2b8:	2301      	movs	r3, #1
    a2ba:	930e      	str	r3, [sp, #56]	; 0x38
    a2bc:	3b02      	subs	r3, #2
    a2be:	e7f5      	b.n	a2ac <_dtoa_r+0x2f4>
    a2c0:	2301      	movs	r3, #1
    a2c2:	930d      	str	r3, [sp, #52]	; 0x34
    a2c4:	001f      	movs	r7, r3
    a2c6:	001a      	movs	r2, r3
    a2c8:	e7f4      	b.n	a2b4 <_dtoa_r+0x2fc>
    a2ca:	6861      	ldr	r1, [r4, #4]
    a2cc:	0052      	lsls	r2, r2, #1
    a2ce:	3101      	adds	r1, #1
    a2d0:	6061      	str	r1, [r4, #4]
    a2d2:	e796      	b.n	a202 <_dtoa_r+0x24a>
    a2d4:	2301      	movs	r3, #1
    a2d6:	421d      	tst	r5, r3
    a2d8:	d008      	beq.n	a2ec <_dtoa_r+0x334>
    a2da:	9810      	ldr	r0, [sp, #64]	; 0x40
    a2dc:	9911      	ldr	r1, [sp, #68]	; 0x44
    a2de:	18e4      	adds	r4, r4, r3
    a2e0:	6832      	ldr	r2, [r6, #0]
    a2e2:	6873      	ldr	r3, [r6, #4]
    a2e4:	f7fe f90a 	bl	84fc <__aeabi_dmul>
    a2e8:	9010      	str	r0, [sp, #64]	; 0x40
    a2ea:	9111      	str	r1, [sp, #68]	; 0x44
    a2ec:	106d      	asrs	r5, r5, #1
    a2ee:	3608      	adds	r6, #8
    a2f0:	e7bd      	b.n	a26e <_dtoa_r+0x2b6>
    a2f2:	46c0      	nop			; (mov r8, r8)
    a2f4:	7ff00000 	.word	0x7ff00000
    a2f8:	0000270f 	.word	0x0000270f
    a2fc:	0000befe 	.word	0x0000befe
    a300:	0000bf01 	.word	0x0000bf01
    a304:	0000b6d7 	.word	0x0000b6d7
    a308:	0000b6d8 	.word	0x0000b6d8
    a30c:	3ff00000 	.word	0x3ff00000
    a310:	fffffc01 	.word	0xfffffc01
    a314:	3ff80000 	.word	0x3ff80000
    a318:	636f4361 	.word	0x636f4361
    a31c:	3fd287a7 	.word	0x3fd287a7
    a320:	8b60c8b3 	.word	0x8b60c8b3
    a324:	3fc68a28 	.word	0x3fc68a28
    a328:	509f79fb 	.word	0x509f79fb
    a32c:	3fd34413 	.word	0x3fd34413
    a330:	0000bf30 	.word	0x0000bf30
    a334:	00000432 	.word	0x00000432
    a338:	00000412 	.word	0x00000412
    a33c:	fe100000 	.word	0xfe100000
    a340:	0000bf08 	.word	0x0000bf08
    a344:	9b03      	ldr	r3, [sp, #12]
    a346:	2402      	movs	r4, #2
    a348:	2b00      	cmp	r3, #0
    a34a:	d016      	beq.n	a37a <_dtoa_r+0x3c2>
    a34c:	9814      	ldr	r0, [sp, #80]	; 0x50
    a34e:	9915      	ldr	r1, [sp, #84]	; 0x54
    a350:	425d      	negs	r5, r3
    a352:	230f      	movs	r3, #15
    a354:	4aca      	ldr	r2, [pc, #808]	; (a680 <_dtoa_r+0x6c8>)
    a356:	402b      	ands	r3, r5
    a358:	00db      	lsls	r3, r3, #3
    a35a:	18d3      	adds	r3, r2, r3
    a35c:	681a      	ldr	r2, [r3, #0]
    a35e:	685b      	ldr	r3, [r3, #4]
    a360:	f7fe f8cc 	bl	84fc <__aeabi_dmul>
    a364:	2300      	movs	r3, #0
    a366:	9006      	str	r0, [sp, #24]
    a368:	9107      	str	r1, [sp, #28]
    a36a:	4ec6      	ldr	r6, [pc, #792]	; (a684 <_dtoa_r+0x6cc>)
    a36c:	112d      	asrs	r5, r5, #4
    a36e:	2d00      	cmp	r5, #0
    a370:	d000      	beq.n	a374 <_dtoa_r+0x3bc>
    a372:	e08c      	b.n	a48e <_dtoa_r+0x4d6>
    a374:	2b00      	cmp	r3, #0
    a376:	d000      	beq.n	a37a <_dtoa_r+0x3c2>
    a378:	e781      	b.n	a27e <_dtoa_r+0x2c6>
    a37a:	9b16      	ldr	r3, [sp, #88]	; 0x58
    a37c:	2b00      	cmp	r3, #0
    a37e:	d100      	bne.n	a382 <_dtoa_r+0x3ca>
    a380:	e091      	b.n	a4a6 <_dtoa_r+0x4ee>
    a382:	9a06      	ldr	r2, [sp, #24]
    a384:	9b07      	ldr	r3, [sp, #28]
    a386:	9210      	str	r2, [sp, #64]	; 0x40
    a388:	9311      	str	r3, [sp, #68]	; 0x44
    a38a:	9810      	ldr	r0, [sp, #64]	; 0x40
    a38c:	9911      	ldr	r1, [sp, #68]	; 0x44
    a38e:	2200      	movs	r2, #0
    a390:	4bbd      	ldr	r3, [pc, #756]	; (a688 <_dtoa_r+0x6d0>)
    a392:	f7fd f947 	bl	7624 <__aeabi_dcmplt>
    a396:	2800      	cmp	r0, #0
    a398:	d100      	bne.n	a39c <_dtoa_r+0x3e4>
    a39a:	e084      	b.n	a4a6 <_dtoa_r+0x4ee>
    a39c:	2f00      	cmp	r7, #0
    a39e:	d100      	bne.n	a3a2 <_dtoa_r+0x3ea>
    a3a0:	e081      	b.n	a4a6 <_dtoa_r+0x4ee>
    a3a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    a3a4:	2b00      	cmp	r3, #0
    a3a6:	dd3e      	ble.n	a426 <_dtoa_r+0x46e>
    a3a8:	9810      	ldr	r0, [sp, #64]	; 0x40
    a3aa:	9911      	ldr	r1, [sp, #68]	; 0x44
    a3ac:	9b03      	ldr	r3, [sp, #12]
    a3ae:	2200      	movs	r2, #0
    a3b0:	1e5e      	subs	r6, r3, #1
    a3b2:	4bb6      	ldr	r3, [pc, #728]	; (a68c <_dtoa_r+0x6d4>)
    a3b4:	f7fe f8a2 	bl	84fc <__aeabi_dmul>
    a3b8:	9006      	str	r0, [sp, #24]
    a3ba:	9107      	str	r1, [sp, #28]
    a3bc:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    a3be:	3401      	adds	r4, #1
    a3c0:	0020      	movs	r0, r4
    a3c2:	f001 f87f 	bl	b4c4 <__aeabi_i2d>
    a3c6:	9a06      	ldr	r2, [sp, #24]
    a3c8:	9b07      	ldr	r3, [sp, #28]
    a3ca:	f7fe f897 	bl	84fc <__aeabi_dmul>
    a3ce:	2200      	movs	r2, #0
    a3d0:	4baf      	ldr	r3, [pc, #700]	; (a690 <_dtoa_r+0x6d8>)
    a3d2:	f7fd f94f 	bl	7674 <__aeabi_dadd>
    a3d6:	9012      	str	r0, [sp, #72]	; 0x48
    a3d8:	9113      	str	r1, [sp, #76]	; 0x4c
    a3da:	9b12      	ldr	r3, [sp, #72]	; 0x48
    a3dc:	9c13      	ldr	r4, [sp, #76]	; 0x4c
    a3de:	4aad      	ldr	r2, [pc, #692]	; (a694 <_dtoa_r+0x6dc>)
    a3e0:	9310      	str	r3, [sp, #64]	; 0x40
    a3e2:	9411      	str	r4, [sp, #68]	; 0x44
    a3e4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    a3e6:	189c      	adds	r4, r3, r2
    a3e8:	9411      	str	r4, [sp, #68]	; 0x44
    a3ea:	2d00      	cmp	r5, #0
    a3ec:	d15e      	bne.n	a4ac <_dtoa_r+0x4f4>
    a3ee:	9806      	ldr	r0, [sp, #24]
    a3f0:	9907      	ldr	r1, [sp, #28]
    a3f2:	2200      	movs	r2, #0
    a3f4:	4ba8      	ldr	r3, [pc, #672]	; (a698 <_dtoa_r+0x6e0>)
    a3f6:	f7fe fb01 	bl	89fc <__aeabi_dsub>
    a3fa:	9a10      	ldr	r2, [sp, #64]	; 0x40
    a3fc:	0023      	movs	r3, r4
    a3fe:	9006      	str	r0, [sp, #24]
    a400:	9107      	str	r1, [sp, #28]
    a402:	f7fd f923 	bl	764c <__aeabi_dcmpgt>
    a406:	2800      	cmp	r0, #0
    a408:	d000      	beq.n	a40c <_dtoa_r+0x454>
    a40a:	e301      	b.n	aa10 <_dtoa_r+0xa58>
    a40c:	48a3      	ldr	r0, [pc, #652]	; (a69c <_dtoa_r+0x6e4>)
    a40e:	9913      	ldr	r1, [sp, #76]	; 0x4c
    a410:	4684      	mov	ip, r0
    a412:	4461      	add	r1, ip
    a414:	000b      	movs	r3, r1
    a416:	9806      	ldr	r0, [sp, #24]
    a418:	9907      	ldr	r1, [sp, #28]
    a41a:	9a10      	ldr	r2, [sp, #64]	; 0x40
    a41c:	f7fd f902 	bl	7624 <__aeabi_dcmplt>
    a420:	2800      	cmp	r0, #0
    a422:	d000      	beq.n	a426 <_dtoa_r+0x46e>
    a424:	e2e8      	b.n	a9f8 <_dtoa_r+0xa40>
    a426:	9b14      	ldr	r3, [sp, #80]	; 0x50
    a428:	9c15      	ldr	r4, [sp, #84]	; 0x54
    a42a:	9306      	str	r3, [sp, #24]
    a42c:	9407      	str	r4, [sp, #28]
    a42e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    a430:	2b00      	cmp	r3, #0
    a432:	da00      	bge.n	a436 <_dtoa_r+0x47e>
    a434:	e157      	b.n	a6e6 <_dtoa_r+0x72e>
    a436:	9a03      	ldr	r2, [sp, #12]
    a438:	2a0e      	cmp	r2, #14
    a43a:	dd00      	ble.n	a43e <_dtoa_r+0x486>
    a43c:	e153      	b.n	a6e6 <_dtoa_r+0x72e>
    a43e:	4b90      	ldr	r3, [pc, #576]	; (a680 <_dtoa_r+0x6c8>)
    a440:	00d2      	lsls	r2, r2, #3
    a442:	189b      	adds	r3, r3, r2
    a444:	685c      	ldr	r4, [r3, #4]
    a446:	681b      	ldr	r3, [r3, #0]
    a448:	9308      	str	r3, [sp, #32]
    a44a:	9409      	str	r4, [sp, #36]	; 0x24
    a44c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    a44e:	2b00      	cmp	r3, #0
    a450:	db00      	blt.n	a454 <_dtoa_r+0x49c>
    a452:	e0ce      	b.n	a5f2 <_dtoa_r+0x63a>
    a454:	2f00      	cmp	r7, #0
    a456:	dd00      	ble.n	a45a <_dtoa_r+0x4a2>
    a458:	e0cb      	b.n	a5f2 <_dtoa_r+0x63a>
    a45a:	d000      	beq.n	a45e <_dtoa_r+0x4a6>
    a45c:	e2cf      	b.n	a9fe <_dtoa_r+0xa46>
    a45e:	9808      	ldr	r0, [sp, #32]
    a460:	9909      	ldr	r1, [sp, #36]	; 0x24
    a462:	2200      	movs	r2, #0
    a464:	4b8c      	ldr	r3, [pc, #560]	; (a698 <_dtoa_r+0x6e0>)
    a466:	f7fe f849 	bl	84fc <__aeabi_dmul>
    a46a:	9a06      	ldr	r2, [sp, #24]
    a46c:	9b07      	ldr	r3, [sp, #28]
    a46e:	f7fd f8f7 	bl	7660 <__aeabi_dcmpge>
    a472:	003e      	movs	r6, r7
    a474:	9708      	str	r7, [sp, #32]
    a476:	2800      	cmp	r0, #0
    a478:	d000      	beq.n	a47c <_dtoa_r+0x4c4>
    a47a:	e2a4      	b.n	a9c6 <_dtoa_r+0xa0e>
    a47c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    a47e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    a480:	1c5d      	adds	r5, r3, #1
    a482:	2331      	movs	r3, #49	; 0x31
    a484:	7013      	strb	r3, [r2, #0]
    a486:	9b03      	ldr	r3, [sp, #12]
    a488:	3301      	adds	r3, #1
    a48a:	9303      	str	r3, [sp, #12]
    a48c:	e29f      	b.n	a9ce <_dtoa_r+0xa16>
    a48e:	2201      	movs	r2, #1
    a490:	4215      	tst	r5, r2
    a492:	d005      	beq.n	a4a0 <_dtoa_r+0x4e8>
    a494:	18a4      	adds	r4, r4, r2
    a496:	6832      	ldr	r2, [r6, #0]
    a498:	6873      	ldr	r3, [r6, #4]
    a49a:	f7fe f82f 	bl	84fc <__aeabi_dmul>
    a49e:	2301      	movs	r3, #1
    a4a0:	106d      	asrs	r5, r5, #1
    a4a2:	3608      	adds	r6, #8
    a4a4:	e763      	b.n	a36e <_dtoa_r+0x3b6>
    a4a6:	9e03      	ldr	r6, [sp, #12]
    a4a8:	003d      	movs	r5, r7
    a4aa:	e789      	b.n	a3c0 <_dtoa_r+0x408>
    a4ac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    a4ae:	1e69      	subs	r1, r5, #1
    a4b0:	1952      	adds	r2, r2, r5
    a4b2:	9217      	str	r2, [sp, #92]	; 0x5c
    a4b4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    a4b6:	4b72      	ldr	r3, [pc, #456]	; (a680 <_dtoa_r+0x6c8>)
    a4b8:	00c9      	lsls	r1, r1, #3
    a4ba:	2a00      	cmp	r2, #0
    a4bc:	d04a      	beq.n	a554 <_dtoa_r+0x59c>
    a4be:	185b      	adds	r3, r3, r1
    a4c0:	681a      	ldr	r2, [r3, #0]
    a4c2:	685b      	ldr	r3, [r3, #4]
    a4c4:	2000      	movs	r0, #0
    a4c6:	4976      	ldr	r1, [pc, #472]	; (a6a0 <_dtoa_r+0x6e8>)
    a4c8:	f7fd fbe4 	bl	7c94 <__aeabi_ddiv>
    a4cc:	9a10      	ldr	r2, [sp, #64]	; 0x40
    a4ce:	9b11      	ldr	r3, [sp, #68]	; 0x44
    a4d0:	f7fe fa94 	bl	89fc <__aeabi_dsub>
    a4d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    a4d6:	9010      	str	r0, [sp, #64]	; 0x40
    a4d8:	9111      	str	r1, [sp, #68]	; 0x44
    a4da:	9312      	str	r3, [sp, #72]	; 0x48
    a4dc:	9806      	ldr	r0, [sp, #24]
    a4de:	9907      	ldr	r1, [sp, #28]
    a4e0:	f7fe fdc2 	bl	9068 <__aeabi_d2iz>
    a4e4:	0004      	movs	r4, r0
    a4e6:	f000 ffed 	bl	b4c4 <__aeabi_i2d>
    a4ea:	0002      	movs	r2, r0
    a4ec:	000b      	movs	r3, r1
    a4ee:	9806      	ldr	r0, [sp, #24]
    a4f0:	9907      	ldr	r1, [sp, #28]
    a4f2:	f7fe fa83 	bl	89fc <__aeabi_dsub>
    a4f6:	9b12      	ldr	r3, [sp, #72]	; 0x48
    a4f8:	3430      	adds	r4, #48	; 0x30
    a4fa:	1c5d      	adds	r5, r3, #1
    a4fc:	701c      	strb	r4, [r3, #0]
    a4fe:	9a10      	ldr	r2, [sp, #64]	; 0x40
    a500:	9b11      	ldr	r3, [sp, #68]	; 0x44
    a502:	9006      	str	r0, [sp, #24]
    a504:	9107      	str	r1, [sp, #28]
    a506:	f7fd f88d 	bl	7624 <__aeabi_dcmplt>
    a50a:	2800      	cmp	r0, #0
    a50c:	d165      	bne.n	a5da <_dtoa_r+0x622>
    a50e:	9a06      	ldr	r2, [sp, #24]
    a510:	9b07      	ldr	r3, [sp, #28]
    a512:	2000      	movs	r0, #0
    a514:	495c      	ldr	r1, [pc, #368]	; (a688 <_dtoa_r+0x6d0>)
    a516:	f7fe fa71 	bl	89fc <__aeabi_dsub>
    a51a:	9a10      	ldr	r2, [sp, #64]	; 0x40
    a51c:	9b11      	ldr	r3, [sp, #68]	; 0x44
    a51e:	f7fd f881 	bl	7624 <__aeabi_dcmplt>
    a522:	2800      	cmp	r0, #0
    a524:	d000      	beq.n	a528 <_dtoa_r+0x570>
    a526:	e0be      	b.n	a6a6 <_dtoa_r+0x6ee>
    a528:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    a52a:	429d      	cmp	r5, r3
    a52c:	d100      	bne.n	a530 <_dtoa_r+0x578>
    a52e:	e77a      	b.n	a426 <_dtoa_r+0x46e>
    a530:	9810      	ldr	r0, [sp, #64]	; 0x40
    a532:	9911      	ldr	r1, [sp, #68]	; 0x44
    a534:	2200      	movs	r2, #0
    a536:	4b55      	ldr	r3, [pc, #340]	; (a68c <_dtoa_r+0x6d4>)
    a538:	f7fd ffe0 	bl	84fc <__aeabi_dmul>
    a53c:	2200      	movs	r2, #0
    a53e:	9010      	str	r0, [sp, #64]	; 0x40
    a540:	9111      	str	r1, [sp, #68]	; 0x44
    a542:	9806      	ldr	r0, [sp, #24]
    a544:	9907      	ldr	r1, [sp, #28]
    a546:	4b51      	ldr	r3, [pc, #324]	; (a68c <_dtoa_r+0x6d4>)
    a548:	f7fd ffd8 	bl	84fc <__aeabi_dmul>
    a54c:	9512      	str	r5, [sp, #72]	; 0x48
    a54e:	9006      	str	r0, [sp, #24]
    a550:	9107      	str	r1, [sp, #28]
    a552:	e7c3      	b.n	a4dc <_dtoa_r+0x524>
    a554:	1859      	adds	r1, r3, r1
    a556:	6808      	ldr	r0, [r1, #0]
    a558:	6849      	ldr	r1, [r1, #4]
    a55a:	9a10      	ldr	r2, [sp, #64]	; 0x40
    a55c:	9b11      	ldr	r3, [sp, #68]	; 0x44
    a55e:	f7fd ffcd 	bl	84fc <__aeabi_dmul>
    a562:	9010      	str	r0, [sp, #64]	; 0x40
    a564:	9111      	str	r1, [sp, #68]	; 0x44
    a566:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    a568:	9d17      	ldr	r5, [sp, #92]	; 0x5c
    a56a:	9806      	ldr	r0, [sp, #24]
    a56c:	9907      	ldr	r1, [sp, #28]
    a56e:	f7fe fd7b 	bl	9068 <__aeabi_d2iz>
    a572:	9012      	str	r0, [sp, #72]	; 0x48
    a574:	f000 ffa6 	bl	b4c4 <__aeabi_i2d>
    a578:	0002      	movs	r2, r0
    a57a:	000b      	movs	r3, r1
    a57c:	9806      	ldr	r0, [sp, #24]
    a57e:	9907      	ldr	r1, [sp, #28]
    a580:	f7fe fa3c 	bl	89fc <__aeabi_dsub>
    a584:	9b12      	ldr	r3, [sp, #72]	; 0x48
    a586:	9006      	str	r0, [sp, #24]
    a588:	9107      	str	r1, [sp, #28]
    a58a:	3330      	adds	r3, #48	; 0x30
    a58c:	7023      	strb	r3, [r4, #0]
    a58e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    a590:	3401      	adds	r4, #1
    a592:	2200      	movs	r2, #0
    a594:	42a3      	cmp	r3, r4
    a596:	d124      	bne.n	a5e2 <_dtoa_r+0x62a>
    a598:	4b41      	ldr	r3, [pc, #260]	; (a6a0 <_dtoa_r+0x6e8>)
    a59a:	9810      	ldr	r0, [sp, #64]	; 0x40
    a59c:	9911      	ldr	r1, [sp, #68]	; 0x44
    a59e:	f7fd f869 	bl	7674 <__aeabi_dadd>
    a5a2:	0002      	movs	r2, r0
    a5a4:	000b      	movs	r3, r1
    a5a6:	9806      	ldr	r0, [sp, #24]
    a5a8:	9907      	ldr	r1, [sp, #28]
    a5aa:	f7fd f84f 	bl	764c <__aeabi_dcmpgt>
    a5ae:	2800      	cmp	r0, #0
    a5b0:	d000      	beq.n	a5b4 <_dtoa_r+0x5fc>
    a5b2:	e078      	b.n	a6a6 <_dtoa_r+0x6ee>
    a5b4:	9a10      	ldr	r2, [sp, #64]	; 0x40
    a5b6:	9b11      	ldr	r3, [sp, #68]	; 0x44
    a5b8:	2000      	movs	r0, #0
    a5ba:	4939      	ldr	r1, [pc, #228]	; (a6a0 <_dtoa_r+0x6e8>)
    a5bc:	f7fe fa1e 	bl	89fc <__aeabi_dsub>
    a5c0:	0002      	movs	r2, r0
    a5c2:	000b      	movs	r3, r1
    a5c4:	9806      	ldr	r0, [sp, #24]
    a5c6:	9907      	ldr	r1, [sp, #28]
    a5c8:	f7fd f82c 	bl	7624 <__aeabi_dcmplt>
    a5cc:	2800      	cmp	r0, #0
    a5ce:	d100      	bne.n	a5d2 <_dtoa_r+0x61a>
    a5d0:	e729      	b.n	a426 <_dtoa_r+0x46e>
    a5d2:	1e6b      	subs	r3, r5, #1
    a5d4:	781a      	ldrb	r2, [r3, #0]
    a5d6:	2a30      	cmp	r2, #48	; 0x30
    a5d8:	d001      	beq.n	a5de <_dtoa_r+0x626>
    a5da:	9603      	str	r6, [sp, #12]
    a5dc:	e03f      	b.n	a65e <_dtoa_r+0x6a6>
    a5de:	001d      	movs	r5, r3
    a5e0:	e7f7      	b.n	a5d2 <_dtoa_r+0x61a>
    a5e2:	9806      	ldr	r0, [sp, #24]
    a5e4:	9907      	ldr	r1, [sp, #28]
    a5e6:	4b29      	ldr	r3, [pc, #164]	; (a68c <_dtoa_r+0x6d4>)
    a5e8:	f7fd ff88 	bl	84fc <__aeabi_dmul>
    a5ec:	9006      	str	r0, [sp, #24]
    a5ee:	9107      	str	r1, [sp, #28]
    a5f0:	e7bb      	b.n	a56a <_dtoa_r+0x5b2>
    a5f2:	9e0a      	ldr	r6, [sp, #40]	; 0x28
    a5f4:	9a08      	ldr	r2, [sp, #32]
    a5f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a5f8:	9806      	ldr	r0, [sp, #24]
    a5fa:	9907      	ldr	r1, [sp, #28]
    a5fc:	f7fd fb4a 	bl	7c94 <__aeabi_ddiv>
    a600:	f7fe fd32 	bl	9068 <__aeabi_d2iz>
    a604:	0004      	movs	r4, r0
    a606:	f000 ff5d 	bl	b4c4 <__aeabi_i2d>
    a60a:	9a08      	ldr	r2, [sp, #32]
    a60c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a60e:	f7fd ff75 	bl	84fc <__aeabi_dmul>
    a612:	000b      	movs	r3, r1
    a614:	0002      	movs	r2, r0
    a616:	9806      	ldr	r0, [sp, #24]
    a618:	9907      	ldr	r1, [sp, #28]
    a61a:	f7fe f9ef 	bl	89fc <__aeabi_dsub>
    a61e:	0023      	movs	r3, r4
    a620:	3330      	adds	r3, #48	; 0x30
    a622:	7033      	strb	r3, [r6, #0]
    a624:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    a626:	1c75      	adds	r5, r6, #1
    a628:	1aeb      	subs	r3, r5, r3
    a62a:	429f      	cmp	r7, r3
    a62c:	d14c      	bne.n	a6c8 <_dtoa_r+0x710>
    a62e:	0002      	movs	r2, r0
    a630:	000b      	movs	r3, r1
    a632:	f7fd f81f 	bl	7674 <__aeabi_dadd>
    a636:	0006      	movs	r6, r0
    a638:	000f      	movs	r7, r1
    a63a:	0002      	movs	r2, r0
    a63c:	000b      	movs	r3, r1
    a63e:	9808      	ldr	r0, [sp, #32]
    a640:	9909      	ldr	r1, [sp, #36]	; 0x24
    a642:	f7fc ffef 	bl	7624 <__aeabi_dcmplt>
    a646:	2800      	cmp	r0, #0
    a648:	d12c      	bne.n	a6a4 <_dtoa_r+0x6ec>
    a64a:	9808      	ldr	r0, [sp, #32]
    a64c:	9909      	ldr	r1, [sp, #36]	; 0x24
    a64e:	0032      	movs	r2, r6
    a650:	003b      	movs	r3, r7
    a652:	f7fc ffe1 	bl	7618 <__aeabi_dcmpeq>
    a656:	2800      	cmp	r0, #0
    a658:	d001      	beq.n	a65e <_dtoa_r+0x6a6>
    a65a:	07e3      	lsls	r3, r4, #31
    a65c:	d422      	bmi.n	a6a4 <_dtoa_r+0x6ec>
    a65e:	9905      	ldr	r1, [sp, #20]
    a660:	9804      	ldr	r0, [sp, #16]
    a662:	f000 fae2 	bl	ac2a <_Bfree>
    a666:	2300      	movs	r3, #0
    a668:	702b      	strb	r3, [r5, #0]
    a66a:	9b03      	ldr	r3, [sp, #12]
    a66c:	9a24      	ldr	r2, [sp, #144]	; 0x90
    a66e:	3301      	adds	r3, #1
    a670:	6013      	str	r3, [r2, #0]
    a672:	9b26      	ldr	r3, [sp, #152]	; 0x98
    a674:	2b00      	cmp	r3, #0
    a676:	d100      	bne.n	a67a <_dtoa_r+0x6c2>
    a678:	e275      	b.n	ab66 <_dtoa_r+0xbae>
    a67a:	601d      	str	r5, [r3, #0]
    a67c:	e273      	b.n	ab66 <_dtoa_r+0xbae>
    a67e:	46c0      	nop			; (mov r8, r8)
    a680:	0000bf30 	.word	0x0000bf30
    a684:	0000bf08 	.word	0x0000bf08
    a688:	3ff00000 	.word	0x3ff00000
    a68c:	40240000 	.word	0x40240000
    a690:	401c0000 	.word	0x401c0000
    a694:	fcc00000 	.word	0xfcc00000
    a698:	40140000 	.word	0x40140000
    a69c:	7cc00000 	.word	0x7cc00000
    a6a0:	3fe00000 	.word	0x3fe00000
    a6a4:	9e03      	ldr	r6, [sp, #12]
    a6a6:	1e6b      	subs	r3, r5, #1
    a6a8:	781a      	ldrb	r2, [r3, #0]
    a6aa:	2a39      	cmp	r2, #57	; 0x39
    a6ac:	d106      	bne.n	a6bc <_dtoa_r+0x704>
    a6ae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    a6b0:	429a      	cmp	r2, r3
    a6b2:	d107      	bne.n	a6c4 <_dtoa_r+0x70c>
    a6b4:	2330      	movs	r3, #48	; 0x30
    a6b6:	7013      	strb	r3, [r2, #0]
    a6b8:	0013      	movs	r3, r2
    a6ba:	3601      	adds	r6, #1
    a6bc:	781a      	ldrb	r2, [r3, #0]
    a6be:	3201      	adds	r2, #1
    a6c0:	701a      	strb	r2, [r3, #0]
    a6c2:	e78a      	b.n	a5da <_dtoa_r+0x622>
    a6c4:	001d      	movs	r5, r3
    a6c6:	e7ee      	b.n	a6a6 <_dtoa_r+0x6ee>
    a6c8:	2200      	movs	r2, #0
    a6ca:	4bcf      	ldr	r3, [pc, #828]	; (aa08 <_dtoa_r+0xa50>)
    a6cc:	f7fd ff16 	bl	84fc <__aeabi_dmul>
    a6d0:	2200      	movs	r2, #0
    a6d2:	2300      	movs	r3, #0
    a6d4:	9006      	str	r0, [sp, #24]
    a6d6:	9107      	str	r1, [sp, #28]
    a6d8:	002e      	movs	r6, r5
    a6da:	f7fc ff9d 	bl	7618 <__aeabi_dcmpeq>
    a6de:	2800      	cmp	r0, #0
    a6e0:	d100      	bne.n	a6e4 <_dtoa_r+0x72c>
    a6e2:	e787      	b.n	a5f4 <_dtoa_r+0x63c>
    a6e4:	e7bb      	b.n	a65e <_dtoa_r+0x6a6>
    a6e6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    a6e8:	2a00      	cmp	r2, #0
    a6ea:	d100      	bne.n	a6ee <_dtoa_r+0x736>
    a6ec:	e087      	b.n	a7fe <_dtoa_r+0x846>
    a6ee:	9a22      	ldr	r2, [sp, #136]	; 0x88
    a6f0:	2a01      	cmp	r2, #1
    a6f2:	dc6e      	bgt.n	a7d2 <_dtoa_r+0x81a>
    a6f4:	9a18      	ldr	r2, [sp, #96]	; 0x60
    a6f6:	2a00      	cmp	r2, #0
    a6f8:	d067      	beq.n	a7ca <_dtoa_r+0x812>
    a6fa:	4ac4      	ldr	r2, [pc, #784]	; (aa0c <_dtoa_r+0xa54>)
    a6fc:	189b      	adds	r3, r3, r2
    a6fe:	9d08      	ldr	r5, [sp, #32]
    a700:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    a702:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    a704:	2101      	movs	r1, #1
    a706:	18d2      	adds	r2, r2, r3
    a708:	920b      	str	r2, [sp, #44]	; 0x2c
    a70a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    a70c:	9804      	ldr	r0, [sp, #16]
    a70e:	18d3      	adds	r3, r2, r3
    a710:	930c      	str	r3, [sp, #48]	; 0x30
    a712:	f000 fb28 	bl	ad66 <__i2b>
    a716:	0006      	movs	r6, r0
    a718:	2c00      	cmp	r4, #0
    a71a:	dd0e      	ble.n	a73a <_dtoa_r+0x782>
    a71c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    a71e:	2b00      	cmp	r3, #0
    a720:	dd0b      	ble.n	a73a <_dtoa_r+0x782>
    a722:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    a724:	0023      	movs	r3, r4
    a726:	4294      	cmp	r4, r2
    a728:	dd00      	ble.n	a72c <_dtoa_r+0x774>
    a72a:	0013      	movs	r3, r2
    a72c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    a72e:	1ae4      	subs	r4, r4, r3
    a730:	1ad2      	subs	r2, r2, r3
    a732:	920b      	str	r2, [sp, #44]	; 0x2c
    a734:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    a736:	1ad3      	subs	r3, r2, r3
    a738:	930c      	str	r3, [sp, #48]	; 0x30
    a73a:	9b08      	ldr	r3, [sp, #32]
    a73c:	2b00      	cmp	r3, #0
    a73e:	d01e      	beq.n	a77e <_dtoa_r+0x7c6>
    a740:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    a742:	2b00      	cmp	r3, #0
    a744:	d05f      	beq.n	a806 <_dtoa_r+0x84e>
    a746:	2d00      	cmp	r5, #0
    a748:	dd11      	ble.n	a76e <_dtoa_r+0x7b6>
    a74a:	0031      	movs	r1, r6
    a74c:	002a      	movs	r2, r5
    a74e:	9804      	ldr	r0, [sp, #16]
    a750:	f000 fba2 	bl	ae98 <__pow5mult>
    a754:	9a05      	ldr	r2, [sp, #20]
    a756:	0001      	movs	r1, r0
    a758:	0006      	movs	r6, r0
    a75a:	9804      	ldr	r0, [sp, #16]
    a75c:	f000 fb0c 	bl	ad78 <__multiply>
    a760:	9905      	ldr	r1, [sp, #20]
    a762:	9010      	str	r0, [sp, #64]	; 0x40
    a764:	9804      	ldr	r0, [sp, #16]
    a766:	f000 fa60 	bl	ac2a <_Bfree>
    a76a:	9b10      	ldr	r3, [sp, #64]	; 0x40
    a76c:	9305      	str	r3, [sp, #20]
    a76e:	9b08      	ldr	r3, [sp, #32]
    a770:	1b5a      	subs	r2, r3, r5
    a772:	d004      	beq.n	a77e <_dtoa_r+0x7c6>
    a774:	9905      	ldr	r1, [sp, #20]
    a776:	9804      	ldr	r0, [sp, #16]
    a778:	f000 fb8e 	bl	ae98 <__pow5mult>
    a77c:	9005      	str	r0, [sp, #20]
    a77e:	2101      	movs	r1, #1
    a780:	9804      	ldr	r0, [sp, #16]
    a782:	f000 faf0 	bl	ad66 <__i2b>
    a786:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    a788:	9008      	str	r0, [sp, #32]
    a78a:	2b00      	cmp	r3, #0
    a78c:	dd3d      	ble.n	a80a <_dtoa_r+0x852>
    a78e:	001a      	movs	r2, r3
    a790:	0001      	movs	r1, r0
    a792:	9804      	ldr	r0, [sp, #16]
    a794:	f000 fb80 	bl	ae98 <__pow5mult>
    a798:	9b22      	ldr	r3, [sp, #136]	; 0x88
    a79a:	9008      	str	r0, [sp, #32]
    a79c:	2500      	movs	r5, #0
    a79e:	2b01      	cmp	r3, #1
    a7a0:	dc3b      	bgt.n	a81a <_dtoa_r+0x862>
    a7a2:	2500      	movs	r5, #0
    a7a4:	9b06      	ldr	r3, [sp, #24]
    a7a6:	42ab      	cmp	r3, r5
    a7a8:	d133      	bne.n	a812 <_dtoa_r+0x85a>
    a7aa:	9b07      	ldr	r3, [sp, #28]
    a7ac:	031b      	lsls	r3, r3, #12
    a7ae:	42ab      	cmp	r3, r5
    a7b0:	d12f      	bne.n	a812 <_dtoa_r+0x85a>
    a7b2:	9b19      	ldr	r3, [sp, #100]	; 0x64
    a7b4:	9a07      	ldr	r2, [sp, #28]
    a7b6:	4213      	tst	r3, r2
    a7b8:	d02b      	beq.n	a812 <_dtoa_r+0x85a>
    a7ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    a7bc:	3501      	adds	r5, #1
    a7be:	3301      	adds	r3, #1
    a7c0:	930b      	str	r3, [sp, #44]	; 0x2c
    a7c2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    a7c4:	3301      	adds	r3, #1
    a7c6:	930c      	str	r3, [sp, #48]	; 0x30
    a7c8:	e023      	b.n	a812 <_dtoa_r+0x85a>
    a7ca:	2336      	movs	r3, #54	; 0x36
    a7cc:	9a1a      	ldr	r2, [sp, #104]	; 0x68
    a7ce:	1a9b      	subs	r3, r3, r2
    a7d0:	e795      	b.n	a6fe <_dtoa_r+0x746>
    a7d2:	9b08      	ldr	r3, [sp, #32]
    a7d4:	1e7d      	subs	r5, r7, #1
    a7d6:	42ab      	cmp	r3, r5
    a7d8:	db06      	blt.n	a7e8 <_dtoa_r+0x830>
    a7da:	1b5d      	subs	r5, r3, r5
    a7dc:	2f00      	cmp	r7, #0
    a7de:	da0b      	bge.n	a7f8 <_dtoa_r+0x840>
    a7e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    a7e2:	1bdc      	subs	r4, r3, r7
    a7e4:	2300      	movs	r3, #0
    a7e6:	e78c      	b.n	a702 <_dtoa_r+0x74a>
    a7e8:	9b08      	ldr	r3, [sp, #32]
    a7ea:	9508      	str	r5, [sp, #32]
    a7ec:	1aea      	subs	r2, r5, r3
    a7ee:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    a7f0:	2500      	movs	r5, #0
    a7f2:	189b      	adds	r3, r3, r2
    a7f4:	930f      	str	r3, [sp, #60]	; 0x3c
    a7f6:	e7f1      	b.n	a7dc <_dtoa_r+0x824>
    a7f8:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    a7fa:	003b      	movs	r3, r7
    a7fc:	e781      	b.n	a702 <_dtoa_r+0x74a>
    a7fe:	9d08      	ldr	r5, [sp, #32]
    a800:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    a802:	9e0e      	ldr	r6, [sp, #56]	; 0x38
    a804:	e788      	b.n	a718 <_dtoa_r+0x760>
    a806:	9a08      	ldr	r2, [sp, #32]
    a808:	e7b4      	b.n	a774 <_dtoa_r+0x7bc>
    a80a:	9b22      	ldr	r3, [sp, #136]	; 0x88
    a80c:	2500      	movs	r5, #0
    a80e:	2b01      	cmp	r3, #1
    a810:	ddc7      	ble.n	a7a2 <_dtoa_r+0x7ea>
    a812:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    a814:	2001      	movs	r0, #1
    a816:	2b00      	cmp	r3, #0
    a818:	d00b      	beq.n	a832 <_dtoa_r+0x87a>
    a81a:	9b08      	ldr	r3, [sp, #32]
    a81c:	9a08      	ldr	r2, [sp, #32]
    a81e:	691b      	ldr	r3, [r3, #16]
    a820:	930f      	str	r3, [sp, #60]	; 0x3c
    a822:	3303      	adds	r3, #3
    a824:	009b      	lsls	r3, r3, #2
    a826:	18d3      	adds	r3, r2, r3
    a828:	6858      	ldr	r0, [r3, #4]
    a82a:	f000 fa53 	bl	acd4 <__hi0bits>
    a82e:	2320      	movs	r3, #32
    a830:	1a18      	subs	r0, r3, r0
    a832:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    a834:	18c0      	adds	r0, r0, r3
    a836:	231f      	movs	r3, #31
    a838:	4018      	ands	r0, r3
    a83a:	d100      	bne.n	a83e <_dtoa_r+0x886>
    a83c:	e0ab      	b.n	a996 <_dtoa_r+0x9de>
    a83e:	3301      	adds	r3, #1
    a840:	1a1b      	subs	r3, r3, r0
    a842:	2b04      	cmp	r3, #4
    a844:	dc00      	bgt.n	a848 <_dtoa_r+0x890>
    a846:	e09b      	b.n	a980 <_dtoa_r+0x9c8>
    a848:	231c      	movs	r3, #28
    a84a:	1a18      	subs	r0, r3, r0
    a84c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    a84e:	1824      	adds	r4, r4, r0
    a850:	181b      	adds	r3, r3, r0
    a852:	930b      	str	r3, [sp, #44]	; 0x2c
    a854:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    a856:	181b      	adds	r3, r3, r0
    a858:	930c      	str	r3, [sp, #48]	; 0x30
    a85a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    a85c:	2b00      	cmp	r3, #0
    a85e:	dd05      	ble.n	a86c <_dtoa_r+0x8b4>
    a860:	001a      	movs	r2, r3
    a862:	9905      	ldr	r1, [sp, #20]
    a864:	9804      	ldr	r0, [sp, #16]
    a866:	f000 fb69 	bl	af3c <__lshift>
    a86a:	9005      	str	r0, [sp, #20]
    a86c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    a86e:	2b00      	cmp	r3, #0
    a870:	dd05      	ble.n	a87e <_dtoa_r+0x8c6>
    a872:	001a      	movs	r2, r3
    a874:	9908      	ldr	r1, [sp, #32]
    a876:	9804      	ldr	r0, [sp, #16]
    a878:	f000 fb60 	bl	af3c <__lshift>
    a87c:	9008      	str	r0, [sp, #32]
    a87e:	9b16      	ldr	r3, [sp, #88]	; 0x58
    a880:	2b00      	cmp	r3, #0
    a882:	d100      	bne.n	a886 <_dtoa_r+0x8ce>
    a884:	e089      	b.n	a99a <_dtoa_r+0x9e2>
    a886:	9908      	ldr	r1, [sp, #32]
    a888:	9805      	ldr	r0, [sp, #20]
    a88a:	f000 fba8 	bl	afde <__mcmp>
    a88e:	2800      	cmp	r0, #0
    a890:	db00      	blt.n	a894 <_dtoa_r+0x8dc>
    a892:	e082      	b.n	a99a <_dtoa_r+0x9e2>
    a894:	9b03      	ldr	r3, [sp, #12]
    a896:	220a      	movs	r2, #10
    a898:	3b01      	subs	r3, #1
    a89a:	9303      	str	r3, [sp, #12]
    a89c:	9905      	ldr	r1, [sp, #20]
    a89e:	2300      	movs	r3, #0
    a8a0:	9804      	ldr	r0, [sp, #16]
    a8a2:	f000 f9db 	bl	ac5c <__multadd>
    a8a6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    a8a8:	9005      	str	r0, [sp, #20]
    a8aa:	2b00      	cmp	r3, #0
    a8ac:	d100      	bne.n	a8b0 <_dtoa_r+0x8f8>
    a8ae:	e15d      	b.n	ab6c <_dtoa_r+0xbb4>
    a8b0:	2300      	movs	r3, #0
    a8b2:	0031      	movs	r1, r6
    a8b4:	220a      	movs	r2, #10
    a8b6:	9804      	ldr	r0, [sp, #16]
    a8b8:	f000 f9d0 	bl	ac5c <__multadd>
    a8bc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    a8be:	0006      	movs	r6, r0
    a8c0:	2b00      	cmp	r3, #0
    a8c2:	dc02      	bgt.n	a8ca <_dtoa_r+0x912>
    a8c4:	9b22      	ldr	r3, [sp, #136]	; 0x88
    a8c6:	2b02      	cmp	r3, #2
    a8c8:	dc6d      	bgt.n	a9a6 <_dtoa_r+0x9ee>
    a8ca:	2c00      	cmp	r4, #0
    a8cc:	dd05      	ble.n	a8da <_dtoa_r+0x922>
    a8ce:	0031      	movs	r1, r6
    a8d0:	0022      	movs	r2, r4
    a8d2:	9804      	ldr	r0, [sp, #16]
    a8d4:	f000 fb32 	bl	af3c <__lshift>
    a8d8:	0006      	movs	r6, r0
    a8da:	0030      	movs	r0, r6
    a8dc:	2d00      	cmp	r5, #0
    a8de:	d011      	beq.n	a904 <_dtoa_r+0x94c>
    a8e0:	6871      	ldr	r1, [r6, #4]
    a8e2:	9804      	ldr	r0, [sp, #16]
    a8e4:	f000 f969 	bl	abba <_Balloc>
    a8e8:	0031      	movs	r1, r6
    a8ea:	0004      	movs	r4, r0
    a8ec:	6933      	ldr	r3, [r6, #16]
    a8ee:	310c      	adds	r1, #12
    a8f0:	1c9a      	adds	r2, r3, #2
    a8f2:	0092      	lsls	r2, r2, #2
    a8f4:	300c      	adds	r0, #12
    a8f6:	f7fe fcac 	bl	9252 <memcpy>
    a8fa:	2201      	movs	r2, #1
    a8fc:	0021      	movs	r1, r4
    a8fe:	9804      	ldr	r0, [sp, #16]
    a900:	f000 fb1c 	bl	af3c <__lshift>
    a904:	9f0d      	ldr	r7, [sp, #52]	; 0x34
    a906:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    a908:	3f01      	subs	r7, #1
    a90a:	930b      	str	r3, [sp, #44]	; 0x2c
    a90c:	19db      	adds	r3, r3, r7
    a90e:	0037      	movs	r7, r6
    a910:	0006      	movs	r6, r0
    a912:	930f      	str	r3, [sp, #60]	; 0x3c
    a914:	9908      	ldr	r1, [sp, #32]
    a916:	9805      	ldr	r0, [sp, #20]
    a918:	f7ff faca 	bl	9eb0 <quorem>
    a91c:	0039      	movs	r1, r7
    a91e:	900d      	str	r0, [sp, #52]	; 0x34
    a920:	0004      	movs	r4, r0
    a922:	9805      	ldr	r0, [sp, #20]
    a924:	f000 fb5b 	bl	afde <__mcmp>
    a928:	0032      	movs	r2, r6
    a92a:	900e      	str	r0, [sp, #56]	; 0x38
    a92c:	9908      	ldr	r1, [sp, #32]
    a92e:	9804      	ldr	r0, [sp, #16]
    a930:	f000 fb6e 	bl	b010 <__mdiff>
    a934:	2301      	movs	r3, #1
    a936:	930c      	str	r3, [sp, #48]	; 0x30
    a938:	68c3      	ldr	r3, [r0, #12]
    a93a:	3430      	adds	r4, #48	; 0x30
    a93c:	0005      	movs	r5, r0
    a93e:	2b00      	cmp	r3, #0
    a940:	d104      	bne.n	a94c <_dtoa_r+0x994>
    a942:	0001      	movs	r1, r0
    a944:	9805      	ldr	r0, [sp, #20]
    a946:	f000 fb4a 	bl	afde <__mcmp>
    a94a:	900c      	str	r0, [sp, #48]	; 0x30
    a94c:	0029      	movs	r1, r5
    a94e:	9804      	ldr	r0, [sp, #16]
    a950:	f000 f96b 	bl	ac2a <_Bfree>
    a954:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    a956:	9a22      	ldr	r2, [sp, #136]	; 0x88
    a958:	4313      	orrs	r3, r2
    a95a:	d000      	beq.n	a95e <_dtoa_r+0x9a6>
    a95c:	e089      	b.n	aa72 <_dtoa_r+0xaba>
    a95e:	9a06      	ldr	r2, [sp, #24]
    a960:	3301      	adds	r3, #1
    a962:	4213      	tst	r3, r2
    a964:	d000      	beq.n	a968 <_dtoa_r+0x9b0>
    a966:	e084      	b.n	aa72 <_dtoa_r+0xaba>
    a968:	2c39      	cmp	r4, #57	; 0x39
    a96a:	d100      	bne.n	a96e <_dtoa_r+0x9b6>
    a96c:	e0a3      	b.n	aab6 <_dtoa_r+0xafe>
    a96e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    a970:	2b00      	cmp	r3, #0
    a972:	dd01      	ble.n	a978 <_dtoa_r+0x9c0>
    a974:	9c0d      	ldr	r4, [sp, #52]	; 0x34
    a976:	3431      	adds	r4, #49	; 0x31
    a978:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    a97a:	1c5d      	adds	r5, r3, #1
    a97c:	701c      	strb	r4, [r3, #0]
    a97e:	e027      	b.n	a9d0 <_dtoa_r+0xa18>
    a980:	2b04      	cmp	r3, #4
    a982:	d100      	bne.n	a986 <_dtoa_r+0x9ce>
    a984:	e769      	b.n	a85a <_dtoa_r+0x8a2>
    a986:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    a988:	331c      	adds	r3, #28
    a98a:	18d2      	adds	r2, r2, r3
    a98c:	920b      	str	r2, [sp, #44]	; 0x2c
    a98e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    a990:	18e4      	adds	r4, r4, r3
    a992:	18d3      	adds	r3, r2, r3
    a994:	e760      	b.n	a858 <_dtoa_r+0x8a0>
    a996:	0003      	movs	r3, r0
    a998:	e7f5      	b.n	a986 <_dtoa_r+0x9ce>
    a99a:	2f00      	cmp	r7, #0
    a99c:	dc3c      	bgt.n	aa18 <_dtoa_r+0xa60>
    a99e:	9b22      	ldr	r3, [sp, #136]	; 0x88
    a9a0:	2b02      	cmp	r3, #2
    a9a2:	dd39      	ble.n	aa18 <_dtoa_r+0xa60>
    a9a4:	970d      	str	r7, [sp, #52]	; 0x34
    a9a6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    a9a8:	2b00      	cmp	r3, #0
    a9aa:	d10c      	bne.n	a9c6 <_dtoa_r+0xa0e>
    a9ac:	9908      	ldr	r1, [sp, #32]
    a9ae:	2205      	movs	r2, #5
    a9b0:	9804      	ldr	r0, [sp, #16]
    a9b2:	f000 f953 	bl	ac5c <__multadd>
    a9b6:	9008      	str	r0, [sp, #32]
    a9b8:	0001      	movs	r1, r0
    a9ba:	9805      	ldr	r0, [sp, #20]
    a9bc:	f000 fb0f 	bl	afde <__mcmp>
    a9c0:	2800      	cmp	r0, #0
    a9c2:	dd00      	ble.n	a9c6 <_dtoa_r+0xa0e>
    a9c4:	e55a      	b.n	a47c <_dtoa_r+0x4c4>
    a9c6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    a9c8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    a9ca:	43db      	mvns	r3, r3
    a9cc:	9303      	str	r3, [sp, #12]
    a9ce:	2700      	movs	r7, #0
    a9d0:	9908      	ldr	r1, [sp, #32]
    a9d2:	9804      	ldr	r0, [sp, #16]
    a9d4:	f000 f929 	bl	ac2a <_Bfree>
    a9d8:	2e00      	cmp	r6, #0
    a9da:	d100      	bne.n	a9de <_dtoa_r+0xa26>
    a9dc:	e63f      	b.n	a65e <_dtoa_r+0x6a6>
    a9de:	2f00      	cmp	r7, #0
    a9e0:	d005      	beq.n	a9ee <_dtoa_r+0xa36>
    a9e2:	42b7      	cmp	r7, r6
    a9e4:	d003      	beq.n	a9ee <_dtoa_r+0xa36>
    a9e6:	0039      	movs	r1, r7
    a9e8:	9804      	ldr	r0, [sp, #16]
    a9ea:	f000 f91e 	bl	ac2a <_Bfree>
    a9ee:	0031      	movs	r1, r6
    a9f0:	9804      	ldr	r0, [sp, #16]
    a9f2:	f000 f91a 	bl	ac2a <_Bfree>
    a9f6:	e632      	b.n	a65e <_dtoa_r+0x6a6>
    a9f8:	9508      	str	r5, [sp, #32]
    a9fa:	002e      	movs	r6, r5
    a9fc:	e7e3      	b.n	a9c6 <_dtoa_r+0xa0e>
    a9fe:	2300      	movs	r3, #0
    aa00:	9308      	str	r3, [sp, #32]
    aa02:	001e      	movs	r6, r3
    aa04:	e7df      	b.n	a9c6 <_dtoa_r+0xa0e>
    aa06:	46c0      	nop			; (mov r8, r8)
    aa08:	40240000 	.word	0x40240000
    aa0c:	00000433 	.word	0x00000433
    aa10:	9603      	str	r6, [sp, #12]
    aa12:	9508      	str	r5, [sp, #32]
    aa14:	002e      	movs	r6, r5
    aa16:	e531      	b.n	a47c <_dtoa_r+0x4c4>
    aa18:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    aa1a:	970d      	str	r7, [sp, #52]	; 0x34
    aa1c:	2b00      	cmp	r3, #0
    aa1e:	d000      	beq.n	aa22 <_dtoa_r+0xa6a>
    aa20:	e753      	b.n	a8ca <_dtoa_r+0x912>
    aa22:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    aa24:	9908      	ldr	r1, [sp, #32]
    aa26:	9805      	ldr	r0, [sp, #20]
    aa28:	f7ff fa42 	bl	9eb0 <quorem>
    aa2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    aa2e:	3030      	adds	r0, #48	; 0x30
    aa30:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    aa32:	7028      	strb	r0, [r5, #0]
    aa34:	3501      	adds	r5, #1
    aa36:	0004      	movs	r4, r0
    aa38:	1aeb      	subs	r3, r5, r3
    aa3a:	429a      	cmp	r2, r3
    aa3c:	dc78      	bgt.n	ab30 <_dtoa_r+0xb78>
    aa3e:	1e15      	subs	r5, r2, #0
    aa40:	dc00      	bgt.n	aa44 <_dtoa_r+0xa8c>
    aa42:	2501      	movs	r5, #1
    aa44:	2700      	movs	r7, #0
    aa46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    aa48:	195d      	adds	r5, r3, r5
    aa4a:	9905      	ldr	r1, [sp, #20]
    aa4c:	2201      	movs	r2, #1
    aa4e:	9804      	ldr	r0, [sp, #16]
    aa50:	f000 fa74 	bl	af3c <__lshift>
    aa54:	9908      	ldr	r1, [sp, #32]
    aa56:	9005      	str	r0, [sp, #20]
    aa58:	f000 fac1 	bl	afde <__mcmp>
    aa5c:	2800      	cmp	r0, #0
    aa5e:	dc2f      	bgt.n	aac0 <_dtoa_r+0xb08>
    aa60:	d101      	bne.n	aa66 <_dtoa_r+0xaae>
    aa62:	07e3      	lsls	r3, r4, #31
    aa64:	d42c      	bmi.n	aac0 <_dtoa_r+0xb08>
    aa66:	1e6b      	subs	r3, r5, #1
    aa68:	781a      	ldrb	r2, [r3, #0]
    aa6a:	2a30      	cmp	r2, #48	; 0x30
    aa6c:	d1b0      	bne.n	a9d0 <_dtoa_r+0xa18>
    aa6e:	001d      	movs	r5, r3
    aa70:	e7f9      	b.n	aa66 <_dtoa_r+0xaae>
    aa72:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    aa74:	2b00      	cmp	r3, #0
    aa76:	db07      	blt.n	aa88 <_dtoa_r+0xad0>
    aa78:	001d      	movs	r5, r3
    aa7a:	9b22      	ldr	r3, [sp, #136]	; 0x88
    aa7c:	431d      	orrs	r5, r3
    aa7e:	d126      	bne.n	aace <_dtoa_r+0xb16>
    aa80:	2301      	movs	r3, #1
    aa82:	9a06      	ldr	r2, [sp, #24]
    aa84:	4213      	tst	r3, r2
    aa86:	d122      	bne.n	aace <_dtoa_r+0xb16>
    aa88:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    aa8a:	2b00      	cmp	r3, #0
    aa8c:	dc00      	bgt.n	aa90 <_dtoa_r+0xad8>
    aa8e:	e773      	b.n	a978 <_dtoa_r+0x9c0>
    aa90:	9905      	ldr	r1, [sp, #20]
    aa92:	2201      	movs	r2, #1
    aa94:	9804      	ldr	r0, [sp, #16]
    aa96:	f000 fa51 	bl	af3c <__lshift>
    aa9a:	9908      	ldr	r1, [sp, #32]
    aa9c:	9005      	str	r0, [sp, #20]
    aa9e:	f000 fa9e 	bl	afde <__mcmp>
    aaa2:	2800      	cmp	r0, #0
    aaa4:	dc04      	bgt.n	aab0 <_dtoa_r+0xaf8>
    aaa6:	d000      	beq.n	aaaa <_dtoa_r+0xaf2>
    aaa8:	e766      	b.n	a978 <_dtoa_r+0x9c0>
    aaaa:	07e3      	lsls	r3, r4, #31
    aaac:	d400      	bmi.n	aab0 <_dtoa_r+0xaf8>
    aaae:	e763      	b.n	a978 <_dtoa_r+0x9c0>
    aab0:	2c39      	cmp	r4, #57	; 0x39
    aab2:	d000      	beq.n	aab6 <_dtoa_r+0xafe>
    aab4:	e75e      	b.n	a974 <_dtoa_r+0x9bc>
    aab6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    aab8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    aaba:	1c5d      	adds	r5, r3, #1
    aabc:	2339      	movs	r3, #57	; 0x39
    aabe:	7013      	strb	r3, [r2, #0]
    aac0:	1e6b      	subs	r3, r5, #1
    aac2:	781a      	ldrb	r2, [r3, #0]
    aac4:	2a39      	cmp	r2, #57	; 0x39
    aac6:	d03b      	beq.n	ab40 <_dtoa_r+0xb88>
    aac8:	3201      	adds	r2, #1
    aaca:	701a      	strb	r2, [r3, #0]
    aacc:	e780      	b.n	a9d0 <_dtoa_r+0xa18>
    aace:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    aad0:	3301      	adds	r3, #1
    aad2:	930d      	str	r3, [sp, #52]	; 0x34
    aad4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    aad6:	2b00      	cmp	r3, #0
    aad8:	dd05      	ble.n	aae6 <_dtoa_r+0xb2e>
    aada:	2c39      	cmp	r4, #57	; 0x39
    aadc:	d0eb      	beq.n	aab6 <_dtoa_r+0xafe>
    aade:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    aae0:	3401      	adds	r4, #1
    aae2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    aae4:	e74a      	b.n	a97c <_dtoa_r+0x9c4>
    aae6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    aae8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    aaea:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    aaec:	701c      	strb	r4, [r3, #0]
    aaee:	4293      	cmp	r3, r2
    aaf0:	d0ab      	beq.n	aa4a <_dtoa_r+0xa92>
    aaf2:	2300      	movs	r3, #0
    aaf4:	220a      	movs	r2, #10
    aaf6:	9905      	ldr	r1, [sp, #20]
    aaf8:	9804      	ldr	r0, [sp, #16]
    aafa:	f000 f8af 	bl	ac5c <__multadd>
    aafe:	2300      	movs	r3, #0
    ab00:	9005      	str	r0, [sp, #20]
    ab02:	220a      	movs	r2, #10
    ab04:	0039      	movs	r1, r7
    ab06:	9804      	ldr	r0, [sp, #16]
    ab08:	42b7      	cmp	r7, r6
    ab0a:	d106      	bne.n	ab1a <_dtoa_r+0xb62>
    ab0c:	f000 f8a6 	bl	ac5c <__multadd>
    ab10:	0007      	movs	r7, r0
    ab12:	0006      	movs	r6, r0
    ab14:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    ab16:	930b      	str	r3, [sp, #44]	; 0x2c
    ab18:	e6fc      	b.n	a914 <_dtoa_r+0x95c>
    ab1a:	f000 f89f 	bl	ac5c <__multadd>
    ab1e:	0031      	movs	r1, r6
    ab20:	0007      	movs	r7, r0
    ab22:	2300      	movs	r3, #0
    ab24:	220a      	movs	r2, #10
    ab26:	9804      	ldr	r0, [sp, #16]
    ab28:	f000 f898 	bl	ac5c <__multadd>
    ab2c:	0006      	movs	r6, r0
    ab2e:	e7f1      	b.n	ab14 <_dtoa_r+0xb5c>
    ab30:	2300      	movs	r3, #0
    ab32:	220a      	movs	r2, #10
    ab34:	9905      	ldr	r1, [sp, #20]
    ab36:	9804      	ldr	r0, [sp, #16]
    ab38:	f000 f890 	bl	ac5c <__multadd>
    ab3c:	9005      	str	r0, [sp, #20]
    ab3e:	e771      	b.n	aa24 <_dtoa_r+0xa6c>
    ab40:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    ab42:	429a      	cmp	r2, r3
    ab44:	d105      	bne.n	ab52 <_dtoa_r+0xb9a>
    ab46:	9b03      	ldr	r3, [sp, #12]
    ab48:	3301      	adds	r3, #1
    ab4a:	9303      	str	r3, [sp, #12]
    ab4c:	2331      	movs	r3, #49	; 0x31
    ab4e:	7013      	strb	r3, [r2, #0]
    ab50:	e73e      	b.n	a9d0 <_dtoa_r+0xa18>
    ab52:	001d      	movs	r5, r3
    ab54:	e7b4      	b.n	aac0 <_dtoa_r+0xb08>
    ab56:	4b0a      	ldr	r3, [pc, #40]	; (ab80 <_dtoa_r+0xbc8>)
    ab58:	9a26      	ldr	r2, [sp, #152]	; 0x98
    ab5a:	930a      	str	r3, [sp, #40]	; 0x28
    ab5c:	4b09      	ldr	r3, [pc, #36]	; (ab84 <_dtoa_r+0xbcc>)
    ab5e:	2a00      	cmp	r2, #0
    ab60:	d001      	beq.n	ab66 <_dtoa_r+0xbae>
    ab62:	9a26      	ldr	r2, [sp, #152]	; 0x98
    ab64:	6013      	str	r3, [r2, #0]
    ab66:	980a      	ldr	r0, [sp, #40]	; 0x28
    ab68:	b01d      	add	sp, #116	; 0x74
    ab6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ab6c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    ab6e:	2b00      	cmp	r3, #0
    ab70:	dd00      	ble.n	ab74 <_dtoa_r+0xbbc>
    ab72:	e756      	b.n	aa22 <_dtoa_r+0xa6a>
    ab74:	9b22      	ldr	r3, [sp, #136]	; 0x88
    ab76:	2b02      	cmp	r3, #2
    ab78:	dc00      	bgt.n	ab7c <_dtoa_r+0xbc4>
    ab7a:	e752      	b.n	aa22 <_dtoa_r+0xa6a>
    ab7c:	e713      	b.n	a9a6 <_dtoa_r+0x9ee>
    ab7e:	46c0      	nop			; (mov r8, r8)
    ab80:	0000bef5 	.word	0x0000bef5
    ab84:	0000befd 	.word	0x0000befd

0000ab88 <_localeconv_r>:
    ab88:	4b03      	ldr	r3, [pc, #12]	; (ab98 <_localeconv_r+0x10>)
    ab8a:	681b      	ldr	r3, [r3, #0]
    ab8c:	6a18      	ldr	r0, [r3, #32]
    ab8e:	2800      	cmp	r0, #0
    ab90:	d100      	bne.n	ab94 <_localeconv_r+0xc>
    ab92:	4802      	ldr	r0, [pc, #8]	; (ab9c <_localeconv_r+0x14>)
    ab94:	30f0      	adds	r0, #240	; 0xf0
    ab96:	4770      	bx	lr
    ab98:	20000088 	.word	0x20000088
    ab9c:	200000ec 	.word	0x200000ec

0000aba0 <memchr>:
    aba0:	b2c9      	uxtb	r1, r1
    aba2:	1882      	adds	r2, r0, r2
    aba4:	4290      	cmp	r0, r2
    aba6:	d101      	bne.n	abac <memchr+0xc>
    aba8:	2000      	movs	r0, #0
    abaa:	4770      	bx	lr
    abac:	7803      	ldrb	r3, [r0, #0]
    abae:	428b      	cmp	r3, r1
    abb0:	d0fb      	beq.n	abaa <memchr+0xa>
    abb2:	3001      	adds	r0, #1
    abb4:	e7f6      	b.n	aba4 <memchr+0x4>

0000abb6 <__malloc_lock>:
    abb6:	4770      	bx	lr

0000abb8 <__malloc_unlock>:
    abb8:	4770      	bx	lr

0000abba <_Balloc>:
    abba:	b570      	push	{r4, r5, r6, lr}
    abbc:	6a46      	ldr	r6, [r0, #36]	; 0x24
    abbe:	0004      	movs	r4, r0
    abc0:	000d      	movs	r5, r1
    abc2:	2e00      	cmp	r6, #0
    abc4:	d107      	bne.n	abd6 <_Balloc+0x1c>
    abc6:	2010      	movs	r0, #16
    abc8:	f7fe fb0e 	bl	91e8 <malloc>
    abcc:	6260      	str	r0, [r4, #36]	; 0x24
    abce:	6046      	str	r6, [r0, #4]
    abd0:	6086      	str	r6, [r0, #8]
    abd2:	6006      	str	r6, [r0, #0]
    abd4:	60c6      	str	r6, [r0, #12]
    abd6:	6a66      	ldr	r6, [r4, #36]	; 0x24
    abd8:	68f3      	ldr	r3, [r6, #12]
    abda:	2b00      	cmp	r3, #0
    abdc:	d013      	beq.n	ac06 <_Balloc+0x4c>
    abde:	6a63      	ldr	r3, [r4, #36]	; 0x24
    abe0:	00aa      	lsls	r2, r5, #2
    abe2:	68db      	ldr	r3, [r3, #12]
    abe4:	189b      	adds	r3, r3, r2
    abe6:	6818      	ldr	r0, [r3, #0]
    abe8:	2800      	cmp	r0, #0
    abea:	d118      	bne.n	ac1e <_Balloc+0x64>
    abec:	2101      	movs	r1, #1
    abee:	000e      	movs	r6, r1
    abf0:	40ae      	lsls	r6, r5
    abf2:	1d72      	adds	r2, r6, #5
    abf4:	0092      	lsls	r2, r2, #2
    abf6:	0020      	movs	r0, r4
    abf8:	f000 fac2 	bl	b180 <_calloc_r>
    abfc:	2800      	cmp	r0, #0
    abfe:	d00c      	beq.n	ac1a <_Balloc+0x60>
    ac00:	6045      	str	r5, [r0, #4]
    ac02:	6086      	str	r6, [r0, #8]
    ac04:	e00d      	b.n	ac22 <_Balloc+0x68>
    ac06:	2221      	movs	r2, #33	; 0x21
    ac08:	2104      	movs	r1, #4
    ac0a:	0020      	movs	r0, r4
    ac0c:	f000 fab8 	bl	b180 <_calloc_r>
    ac10:	6a63      	ldr	r3, [r4, #36]	; 0x24
    ac12:	60f0      	str	r0, [r6, #12]
    ac14:	68db      	ldr	r3, [r3, #12]
    ac16:	2b00      	cmp	r3, #0
    ac18:	d1e1      	bne.n	abde <_Balloc+0x24>
    ac1a:	2000      	movs	r0, #0
    ac1c:	bd70      	pop	{r4, r5, r6, pc}
    ac1e:	6802      	ldr	r2, [r0, #0]
    ac20:	601a      	str	r2, [r3, #0]
    ac22:	2300      	movs	r3, #0
    ac24:	6103      	str	r3, [r0, #16]
    ac26:	60c3      	str	r3, [r0, #12]
    ac28:	e7f8      	b.n	ac1c <_Balloc+0x62>

0000ac2a <_Bfree>:
    ac2a:	b570      	push	{r4, r5, r6, lr}
    ac2c:	6a44      	ldr	r4, [r0, #36]	; 0x24
    ac2e:	0006      	movs	r6, r0
    ac30:	000d      	movs	r5, r1
    ac32:	2c00      	cmp	r4, #0
    ac34:	d107      	bne.n	ac46 <_Bfree+0x1c>
    ac36:	2010      	movs	r0, #16
    ac38:	f7fe fad6 	bl	91e8 <malloc>
    ac3c:	6270      	str	r0, [r6, #36]	; 0x24
    ac3e:	6044      	str	r4, [r0, #4]
    ac40:	6084      	str	r4, [r0, #8]
    ac42:	6004      	str	r4, [r0, #0]
    ac44:	60c4      	str	r4, [r0, #12]
    ac46:	2d00      	cmp	r5, #0
    ac48:	d007      	beq.n	ac5a <_Bfree+0x30>
    ac4a:	6a73      	ldr	r3, [r6, #36]	; 0x24
    ac4c:	686a      	ldr	r2, [r5, #4]
    ac4e:	68db      	ldr	r3, [r3, #12]
    ac50:	0092      	lsls	r2, r2, #2
    ac52:	189b      	adds	r3, r3, r2
    ac54:	681a      	ldr	r2, [r3, #0]
    ac56:	602a      	str	r2, [r5, #0]
    ac58:	601d      	str	r5, [r3, #0]
    ac5a:	bd70      	pop	{r4, r5, r6, pc}

0000ac5c <__multadd>:
    ac5c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    ac5e:	001e      	movs	r6, r3
    ac60:	2314      	movs	r3, #20
    ac62:	469c      	mov	ip, r3
    ac64:	0007      	movs	r7, r0
    ac66:	000c      	movs	r4, r1
    ac68:	2000      	movs	r0, #0
    ac6a:	690d      	ldr	r5, [r1, #16]
    ac6c:	448c      	add	ip, r1
    ac6e:	4663      	mov	r3, ip
    ac70:	8819      	ldrh	r1, [r3, #0]
    ac72:	681b      	ldr	r3, [r3, #0]
    ac74:	4351      	muls	r1, r2
    ac76:	0c1b      	lsrs	r3, r3, #16
    ac78:	4353      	muls	r3, r2
    ac7a:	1989      	adds	r1, r1, r6
    ac7c:	0c0e      	lsrs	r6, r1, #16
    ac7e:	199b      	adds	r3, r3, r6
    ac80:	b289      	uxth	r1, r1
    ac82:	0c1e      	lsrs	r6, r3, #16
    ac84:	041b      	lsls	r3, r3, #16
    ac86:	185b      	adds	r3, r3, r1
    ac88:	4661      	mov	r1, ip
    ac8a:	3001      	adds	r0, #1
    ac8c:	c108      	stmia	r1!, {r3}
    ac8e:	468c      	mov	ip, r1
    ac90:	4285      	cmp	r5, r0
    ac92:	dcec      	bgt.n	ac6e <__multadd+0x12>
    ac94:	2e00      	cmp	r6, #0
    ac96:	d01b      	beq.n	acd0 <__multadd+0x74>
    ac98:	68a3      	ldr	r3, [r4, #8]
    ac9a:	429d      	cmp	r5, r3
    ac9c:	db12      	blt.n	acc4 <__multadd+0x68>
    ac9e:	6863      	ldr	r3, [r4, #4]
    aca0:	0038      	movs	r0, r7
    aca2:	1c59      	adds	r1, r3, #1
    aca4:	f7ff ff89 	bl	abba <_Balloc>
    aca8:	0021      	movs	r1, r4
    acaa:	6923      	ldr	r3, [r4, #16]
    acac:	9001      	str	r0, [sp, #4]
    acae:	1c9a      	adds	r2, r3, #2
    acb0:	0092      	lsls	r2, r2, #2
    acb2:	310c      	adds	r1, #12
    acb4:	300c      	adds	r0, #12
    acb6:	f7fe facc 	bl	9252 <memcpy>
    acba:	0021      	movs	r1, r4
    acbc:	0038      	movs	r0, r7
    acbe:	f7ff ffb4 	bl	ac2a <_Bfree>
    acc2:	9c01      	ldr	r4, [sp, #4]
    acc4:	1d2b      	adds	r3, r5, #4
    acc6:	009b      	lsls	r3, r3, #2
    acc8:	18e3      	adds	r3, r4, r3
    acca:	3501      	adds	r5, #1
    accc:	605e      	str	r6, [r3, #4]
    acce:	6125      	str	r5, [r4, #16]
    acd0:	0020      	movs	r0, r4
    acd2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

0000acd4 <__hi0bits>:
    acd4:	0003      	movs	r3, r0
    acd6:	0c02      	lsrs	r2, r0, #16
    acd8:	2000      	movs	r0, #0
    acda:	4282      	cmp	r2, r0
    acdc:	d101      	bne.n	ace2 <__hi0bits+0xe>
    acde:	041b      	lsls	r3, r3, #16
    ace0:	3010      	adds	r0, #16
    ace2:	0e1a      	lsrs	r2, r3, #24
    ace4:	d101      	bne.n	acea <__hi0bits+0x16>
    ace6:	3008      	adds	r0, #8
    ace8:	021b      	lsls	r3, r3, #8
    acea:	0f1a      	lsrs	r2, r3, #28
    acec:	d101      	bne.n	acf2 <__hi0bits+0x1e>
    acee:	3004      	adds	r0, #4
    acf0:	011b      	lsls	r3, r3, #4
    acf2:	0f9a      	lsrs	r2, r3, #30
    acf4:	d101      	bne.n	acfa <__hi0bits+0x26>
    acf6:	3002      	adds	r0, #2
    acf8:	009b      	lsls	r3, r3, #2
    acfa:	2b00      	cmp	r3, #0
    acfc:	db03      	blt.n	ad06 <__hi0bits+0x32>
    acfe:	3001      	adds	r0, #1
    ad00:	005b      	lsls	r3, r3, #1
    ad02:	d400      	bmi.n	ad06 <__hi0bits+0x32>
    ad04:	2020      	movs	r0, #32
    ad06:	4770      	bx	lr

0000ad08 <__lo0bits>:
    ad08:	2207      	movs	r2, #7
    ad0a:	6803      	ldr	r3, [r0, #0]
    ad0c:	b510      	push	{r4, lr}
    ad0e:	0001      	movs	r1, r0
    ad10:	401a      	ands	r2, r3
    ad12:	d00d      	beq.n	ad30 <__lo0bits+0x28>
    ad14:	2401      	movs	r4, #1
    ad16:	2000      	movs	r0, #0
    ad18:	4223      	tst	r3, r4
    ad1a:	d105      	bne.n	ad28 <__lo0bits+0x20>
    ad1c:	3002      	adds	r0, #2
    ad1e:	4203      	tst	r3, r0
    ad20:	d003      	beq.n	ad2a <__lo0bits+0x22>
    ad22:	40e3      	lsrs	r3, r4
    ad24:	0020      	movs	r0, r4
    ad26:	600b      	str	r3, [r1, #0]
    ad28:	bd10      	pop	{r4, pc}
    ad2a:	089b      	lsrs	r3, r3, #2
    ad2c:	600b      	str	r3, [r1, #0]
    ad2e:	e7fb      	b.n	ad28 <__lo0bits+0x20>
    ad30:	b29c      	uxth	r4, r3
    ad32:	0010      	movs	r0, r2
    ad34:	2c00      	cmp	r4, #0
    ad36:	d101      	bne.n	ad3c <__lo0bits+0x34>
    ad38:	2010      	movs	r0, #16
    ad3a:	0c1b      	lsrs	r3, r3, #16
    ad3c:	b2da      	uxtb	r2, r3
    ad3e:	2a00      	cmp	r2, #0
    ad40:	d101      	bne.n	ad46 <__lo0bits+0x3e>
    ad42:	3008      	adds	r0, #8
    ad44:	0a1b      	lsrs	r3, r3, #8
    ad46:	071a      	lsls	r2, r3, #28
    ad48:	d101      	bne.n	ad4e <__lo0bits+0x46>
    ad4a:	3004      	adds	r0, #4
    ad4c:	091b      	lsrs	r3, r3, #4
    ad4e:	079a      	lsls	r2, r3, #30
    ad50:	d101      	bne.n	ad56 <__lo0bits+0x4e>
    ad52:	3002      	adds	r0, #2
    ad54:	089b      	lsrs	r3, r3, #2
    ad56:	07da      	lsls	r2, r3, #31
    ad58:	d4e8      	bmi.n	ad2c <__lo0bits+0x24>
    ad5a:	085b      	lsrs	r3, r3, #1
    ad5c:	d001      	beq.n	ad62 <__lo0bits+0x5a>
    ad5e:	3001      	adds	r0, #1
    ad60:	e7e4      	b.n	ad2c <__lo0bits+0x24>
    ad62:	2020      	movs	r0, #32
    ad64:	e7e0      	b.n	ad28 <__lo0bits+0x20>

0000ad66 <__i2b>:
    ad66:	b510      	push	{r4, lr}
    ad68:	000c      	movs	r4, r1
    ad6a:	2101      	movs	r1, #1
    ad6c:	f7ff ff25 	bl	abba <_Balloc>
    ad70:	2301      	movs	r3, #1
    ad72:	6144      	str	r4, [r0, #20]
    ad74:	6103      	str	r3, [r0, #16]
    ad76:	bd10      	pop	{r4, pc}

0000ad78 <__multiply>:
    ad78:	b5f0      	push	{r4, r5, r6, r7, lr}
    ad7a:	690b      	ldr	r3, [r1, #16]
    ad7c:	0015      	movs	r5, r2
    ad7e:	6912      	ldr	r2, [r2, #16]
    ad80:	b089      	sub	sp, #36	; 0x24
    ad82:	000c      	movs	r4, r1
    ad84:	4293      	cmp	r3, r2
    ad86:	da01      	bge.n	ad8c <__multiply+0x14>
    ad88:	002c      	movs	r4, r5
    ad8a:	000d      	movs	r5, r1
    ad8c:	6927      	ldr	r7, [r4, #16]
    ad8e:	692e      	ldr	r6, [r5, #16]
    ad90:	68a2      	ldr	r2, [r4, #8]
    ad92:	19bb      	adds	r3, r7, r6
    ad94:	6861      	ldr	r1, [r4, #4]
    ad96:	9301      	str	r3, [sp, #4]
    ad98:	4293      	cmp	r3, r2
    ad9a:	dd00      	ble.n	ad9e <__multiply+0x26>
    ad9c:	3101      	adds	r1, #1
    ad9e:	f7ff ff0c 	bl	abba <_Balloc>
    ada2:	0003      	movs	r3, r0
    ada4:	3314      	adds	r3, #20
    ada6:	9300      	str	r3, [sp, #0]
    ada8:	9a00      	ldr	r2, [sp, #0]
    adaa:	19bb      	adds	r3, r7, r6
    adac:	4694      	mov	ip, r2
    adae:	009b      	lsls	r3, r3, #2
    adb0:	449c      	add	ip, r3
    adb2:	0013      	movs	r3, r2
    adb4:	2200      	movs	r2, #0
    adb6:	9004      	str	r0, [sp, #16]
    adb8:	4563      	cmp	r3, ip
    adba:	d31c      	bcc.n	adf6 <__multiply+0x7e>
    adbc:	002a      	movs	r2, r5
    adbe:	3414      	adds	r4, #20
    adc0:	00bf      	lsls	r7, r7, #2
    adc2:	19e3      	adds	r3, r4, r7
    adc4:	3214      	adds	r2, #20
    adc6:	00b6      	lsls	r6, r6, #2
    adc8:	9305      	str	r3, [sp, #20]
    adca:	1993      	adds	r3, r2, r6
    adcc:	9402      	str	r4, [sp, #8]
    adce:	9306      	str	r3, [sp, #24]
    add0:	9b06      	ldr	r3, [sp, #24]
    add2:	429a      	cmp	r2, r3
    add4:	d311      	bcc.n	adfa <__multiply+0x82>
    add6:	9b01      	ldr	r3, [sp, #4]
    add8:	2b00      	cmp	r3, #0
    adda:	dd06      	ble.n	adea <__multiply+0x72>
    addc:	2304      	movs	r3, #4
    adde:	425b      	negs	r3, r3
    ade0:	449c      	add	ip, r3
    ade2:	4663      	mov	r3, ip
    ade4:	681b      	ldr	r3, [r3, #0]
    ade6:	2b00      	cmp	r3, #0
    ade8:	d051      	beq.n	ae8e <__multiply+0x116>
    adea:	9b04      	ldr	r3, [sp, #16]
    adec:	9a01      	ldr	r2, [sp, #4]
    adee:	0018      	movs	r0, r3
    adf0:	611a      	str	r2, [r3, #16]
    adf2:	b009      	add	sp, #36	; 0x24
    adf4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    adf6:	c304      	stmia	r3!, {r2}
    adf8:	e7de      	b.n	adb8 <__multiply+0x40>
    adfa:	8814      	ldrh	r4, [r2, #0]
    adfc:	2c00      	cmp	r4, #0
    adfe:	d01e      	beq.n	ae3e <__multiply+0xc6>
    ae00:	2600      	movs	r6, #0
    ae02:	9d00      	ldr	r5, [sp, #0]
    ae04:	9f02      	ldr	r7, [sp, #8]
    ae06:	cf01      	ldmia	r7!, {r0}
    ae08:	9507      	str	r5, [sp, #28]
    ae0a:	cd08      	ldmia	r5!, {r3}
    ae0c:	9303      	str	r3, [sp, #12]
    ae0e:	b283      	uxth	r3, r0
    ae10:	4363      	muls	r3, r4
    ae12:	0019      	movs	r1, r3
    ae14:	466b      	mov	r3, sp
    ae16:	0c00      	lsrs	r0, r0, #16
    ae18:	899b      	ldrh	r3, [r3, #12]
    ae1a:	4360      	muls	r0, r4
    ae1c:	18cb      	adds	r3, r1, r3
    ae1e:	9903      	ldr	r1, [sp, #12]
    ae20:	199b      	adds	r3, r3, r6
    ae22:	0c09      	lsrs	r1, r1, #16
    ae24:	1841      	adds	r1, r0, r1
    ae26:	0c18      	lsrs	r0, r3, #16
    ae28:	1809      	adds	r1, r1, r0
    ae2a:	0c0e      	lsrs	r6, r1, #16
    ae2c:	b29b      	uxth	r3, r3
    ae2e:	0409      	lsls	r1, r1, #16
    ae30:	430b      	orrs	r3, r1
    ae32:	9907      	ldr	r1, [sp, #28]
    ae34:	600b      	str	r3, [r1, #0]
    ae36:	9b05      	ldr	r3, [sp, #20]
    ae38:	42bb      	cmp	r3, r7
    ae3a:	d8e4      	bhi.n	ae06 <__multiply+0x8e>
    ae3c:	602e      	str	r6, [r5, #0]
    ae3e:	6813      	ldr	r3, [r2, #0]
    ae40:	0c1b      	lsrs	r3, r3, #16
    ae42:	9303      	str	r3, [sp, #12]
    ae44:	d01e      	beq.n	ae84 <__multiply+0x10c>
    ae46:	2600      	movs	r6, #0
    ae48:	9b00      	ldr	r3, [sp, #0]
    ae4a:	9c02      	ldr	r4, [sp, #8]
    ae4c:	681b      	ldr	r3, [r3, #0]
    ae4e:	9800      	ldr	r0, [sp, #0]
    ae50:	0007      	movs	r7, r0
    ae52:	8821      	ldrh	r1, [r4, #0]
    ae54:	9d03      	ldr	r5, [sp, #12]
    ae56:	b29b      	uxth	r3, r3
    ae58:	4369      	muls	r1, r5
    ae5a:	c820      	ldmia	r0!, {r5}
    ae5c:	0c2d      	lsrs	r5, r5, #16
    ae5e:	1949      	adds	r1, r1, r5
    ae60:	198e      	adds	r6, r1, r6
    ae62:	0431      	lsls	r1, r6, #16
    ae64:	430b      	orrs	r3, r1
    ae66:	603b      	str	r3, [r7, #0]
    ae68:	cc08      	ldmia	r4!, {r3}
    ae6a:	9903      	ldr	r1, [sp, #12]
    ae6c:	0c1b      	lsrs	r3, r3, #16
    ae6e:	434b      	muls	r3, r1
    ae70:	6879      	ldr	r1, [r7, #4]
    ae72:	0c36      	lsrs	r6, r6, #16
    ae74:	b289      	uxth	r1, r1
    ae76:	185b      	adds	r3, r3, r1
    ae78:	9905      	ldr	r1, [sp, #20]
    ae7a:	199b      	adds	r3, r3, r6
    ae7c:	0c1e      	lsrs	r6, r3, #16
    ae7e:	42a1      	cmp	r1, r4
    ae80:	d8e6      	bhi.n	ae50 <__multiply+0xd8>
    ae82:	6003      	str	r3, [r0, #0]
    ae84:	9b00      	ldr	r3, [sp, #0]
    ae86:	3204      	adds	r2, #4
    ae88:	3304      	adds	r3, #4
    ae8a:	9300      	str	r3, [sp, #0]
    ae8c:	e7a0      	b.n	add0 <__multiply+0x58>
    ae8e:	9b01      	ldr	r3, [sp, #4]
    ae90:	3b01      	subs	r3, #1
    ae92:	9301      	str	r3, [sp, #4]
    ae94:	e79f      	b.n	add6 <__multiply+0x5e>
	...

0000ae98 <__pow5mult>:
    ae98:	2303      	movs	r3, #3
    ae9a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    ae9c:	4013      	ands	r3, r2
    ae9e:	0005      	movs	r5, r0
    aea0:	000e      	movs	r6, r1
    aea2:	0014      	movs	r4, r2
    aea4:	2b00      	cmp	r3, #0
    aea6:	d008      	beq.n	aeba <__pow5mult+0x22>
    aea8:	4922      	ldr	r1, [pc, #136]	; (af34 <__pow5mult+0x9c>)
    aeaa:	3b01      	subs	r3, #1
    aeac:	009a      	lsls	r2, r3, #2
    aeae:	5852      	ldr	r2, [r2, r1]
    aeb0:	2300      	movs	r3, #0
    aeb2:	0031      	movs	r1, r6
    aeb4:	f7ff fed2 	bl	ac5c <__multadd>
    aeb8:	0006      	movs	r6, r0
    aeba:	10a3      	asrs	r3, r4, #2
    aebc:	9301      	str	r3, [sp, #4]
    aebe:	d036      	beq.n	af2e <__pow5mult+0x96>
    aec0:	6a6c      	ldr	r4, [r5, #36]	; 0x24
    aec2:	2c00      	cmp	r4, #0
    aec4:	d107      	bne.n	aed6 <__pow5mult+0x3e>
    aec6:	2010      	movs	r0, #16
    aec8:	f7fe f98e 	bl	91e8 <malloc>
    aecc:	6268      	str	r0, [r5, #36]	; 0x24
    aece:	6044      	str	r4, [r0, #4]
    aed0:	6084      	str	r4, [r0, #8]
    aed2:	6004      	str	r4, [r0, #0]
    aed4:	60c4      	str	r4, [r0, #12]
    aed6:	6a6f      	ldr	r7, [r5, #36]	; 0x24
    aed8:	68bc      	ldr	r4, [r7, #8]
    aeda:	2c00      	cmp	r4, #0
    aedc:	d107      	bne.n	aeee <__pow5mult+0x56>
    aede:	4916      	ldr	r1, [pc, #88]	; (af38 <__pow5mult+0xa0>)
    aee0:	0028      	movs	r0, r5
    aee2:	f7ff ff40 	bl	ad66 <__i2b>
    aee6:	2300      	movs	r3, #0
    aee8:	0004      	movs	r4, r0
    aeea:	60b8      	str	r0, [r7, #8]
    aeec:	6003      	str	r3, [r0, #0]
    aeee:	2201      	movs	r2, #1
    aef0:	9b01      	ldr	r3, [sp, #4]
    aef2:	4213      	tst	r3, r2
    aef4:	d00a      	beq.n	af0c <__pow5mult+0x74>
    aef6:	0031      	movs	r1, r6
    aef8:	0022      	movs	r2, r4
    aefa:	0028      	movs	r0, r5
    aefc:	f7ff ff3c 	bl	ad78 <__multiply>
    af00:	0007      	movs	r7, r0
    af02:	0031      	movs	r1, r6
    af04:	0028      	movs	r0, r5
    af06:	f7ff fe90 	bl	ac2a <_Bfree>
    af0a:	003e      	movs	r6, r7
    af0c:	9b01      	ldr	r3, [sp, #4]
    af0e:	105b      	asrs	r3, r3, #1
    af10:	9301      	str	r3, [sp, #4]
    af12:	d00c      	beq.n	af2e <__pow5mult+0x96>
    af14:	6820      	ldr	r0, [r4, #0]
    af16:	2800      	cmp	r0, #0
    af18:	d107      	bne.n	af2a <__pow5mult+0x92>
    af1a:	0022      	movs	r2, r4
    af1c:	0021      	movs	r1, r4
    af1e:	0028      	movs	r0, r5
    af20:	f7ff ff2a 	bl	ad78 <__multiply>
    af24:	2300      	movs	r3, #0
    af26:	6020      	str	r0, [r4, #0]
    af28:	6003      	str	r3, [r0, #0]
    af2a:	0004      	movs	r4, r0
    af2c:	e7df      	b.n	aeee <__pow5mult+0x56>
    af2e:	0030      	movs	r0, r6
    af30:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    af32:	46c0      	nop			; (mov r8, r8)
    af34:	0000bff8 	.word	0x0000bff8
    af38:	00000271 	.word	0x00000271

0000af3c <__lshift>:
    af3c:	b5f0      	push	{r4, r5, r6, r7, lr}
    af3e:	000d      	movs	r5, r1
    af40:	0017      	movs	r7, r2
    af42:	692b      	ldr	r3, [r5, #16]
    af44:	1154      	asrs	r4, r2, #5
    af46:	b085      	sub	sp, #20
    af48:	18e3      	adds	r3, r4, r3
    af4a:	9302      	str	r3, [sp, #8]
    af4c:	3301      	adds	r3, #1
    af4e:	9301      	str	r3, [sp, #4]
    af50:	6849      	ldr	r1, [r1, #4]
    af52:	68ab      	ldr	r3, [r5, #8]
    af54:	9003      	str	r0, [sp, #12]
    af56:	9a01      	ldr	r2, [sp, #4]
    af58:	4293      	cmp	r3, r2
    af5a:	db34      	blt.n	afc6 <__lshift+0x8a>
    af5c:	9803      	ldr	r0, [sp, #12]
    af5e:	f7ff fe2c 	bl	abba <_Balloc>
    af62:	2300      	movs	r3, #0
    af64:	0002      	movs	r2, r0
    af66:	0006      	movs	r6, r0
    af68:	0019      	movs	r1, r3
    af6a:	3214      	adds	r2, #20
    af6c:	42a3      	cmp	r3, r4
    af6e:	db2d      	blt.n	afcc <__lshift+0x90>
    af70:	43e3      	mvns	r3, r4
    af72:	17db      	asrs	r3, r3, #31
    af74:	401c      	ands	r4, r3
    af76:	002b      	movs	r3, r5
    af78:	211f      	movs	r1, #31
    af7a:	00a4      	lsls	r4, r4, #2
    af7c:	1914      	adds	r4, r2, r4
    af7e:	692a      	ldr	r2, [r5, #16]
    af80:	3314      	adds	r3, #20
    af82:	0092      	lsls	r2, r2, #2
    af84:	189a      	adds	r2, r3, r2
    af86:	400f      	ands	r7, r1
    af88:	d024      	beq.n	afd4 <__lshift+0x98>
    af8a:	3101      	adds	r1, #1
    af8c:	1bc9      	subs	r1, r1, r7
    af8e:	468c      	mov	ip, r1
    af90:	2100      	movs	r1, #0
    af92:	6818      	ldr	r0, [r3, #0]
    af94:	40b8      	lsls	r0, r7
    af96:	4301      	orrs	r1, r0
    af98:	4660      	mov	r0, ip
    af9a:	6021      	str	r1, [r4, #0]
    af9c:	cb02      	ldmia	r3!, {r1}
    af9e:	3404      	adds	r4, #4
    afa0:	40c1      	lsrs	r1, r0
    afa2:	429a      	cmp	r2, r3
    afa4:	d8f5      	bhi.n	af92 <__lshift+0x56>
    afa6:	6021      	str	r1, [r4, #0]
    afa8:	2900      	cmp	r1, #0
    afaa:	d002      	beq.n	afb2 <__lshift+0x76>
    afac:	9b02      	ldr	r3, [sp, #8]
    afae:	3302      	adds	r3, #2
    afb0:	9301      	str	r3, [sp, #4]
    afb2:	9b01      	ldr	r3, [sp, #4]
    afb4:	9803      	ldr	r0, [sp, #12]
    afb6:	3b01      	subs	r3, #1
    afb8:	6133      	str	r3, [r6, #16]
    afba:	0029      	movs	r1, r5
    afbc:	f7ff fe35 	bl	ac2a <_Bfree>
    afc0:	0030      	movs	r0, r6
    afc2:	b005      	add	sp, #20
    afc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    afc6:	3101      	adds	r1, #1
    afc8:	005b      	lsls	r3, r3, #1
    afca:	e7c4      	b.n	af56 <__lshift+0x1a>
    afcc:	0098      	lsls	r0, r3, #2
    afce:	5011      	str	r1, [r2, r0]
    afd0:	3301      	adds	r3, #1
    afd2:	e7cb      	b.n	af6c <__lshift+0x30>
    afd4:	cb02      	ldmia	r3!, {r1}
    afd6:	c402      	stmia	r4!, {r1}
    afd8:	429a      	cmp	r2, r3
    afda:	d8fb      	bhi.n	afd4 <__lshift+0x98>
    afdc:	e7e9      	b.n	afb2 <__lshift+0x76>

0000afde <__mcmp>:
    afde:	690a      	ldr	r2, [r1, #16]
    afe0:	6903      	ldr	r3, [r0, #16]
    afe2:	b530      	push	{r4, r5, lr}
    afe4:	1a9b      	subs	r3, r3, r2
    afe6:	d10e      	bne.n	b006 <__mcmp+0x28>
    afe8:	0092      	lsls	r2, r2, #2
    afea:	3014      	adds	r0, #20
    afec:	3114      	adds	r1, #20
    afee:	1884      	adds	r4, r0, r2
    aff0:	1889      	adds	r1, r1, r2
    aff2:	3c04      	subs	r4, #4
    aff4:	3904      	subs	r1, #4
    aff6:	6822      	ldr	r2, [r4, #0]
    aff8:	680d      	ldr	r5, [r1, #0]
    affa:	42aa      	cmp	r2, r5
    affc:	d005      	beq.n	b00a <__mcmp+0x2c>
    affe:	42aa      	cmp	r2, r5
    b000:	4192      	sbcs	r2, r2
    b002:	2301      	movs	r3, #1
    b004:	4313      	orrs	r3, r2
    b006:	0018      	movs	r0, r3
    b008:	bd30      	pop	{r4, r5, pc}
    b00a:	42a0      	cmp	r0, r4
    b00c:	d3f1      	bcc.n	aff2 <__mcmp+0x14>
    b00e:	e7fa      	b.n	b006 <__mcmp+0x28>

0000b010 <__mdiff>:
    b010:	b5f0      	push	{r4, r5, r6, r7, lr}
    b012:	000d      	movs	r5, r1
    b014:	b085      	sub	sp, #20
    b016:	0007      	movs	r7, r0
    b018:	0011      	movs	r1, r2
    b01a:	0028      	movs	r0, r5
    b01c:	0014      	movs	r4, r2
    b01e:	f7ff ffde 	bl	afde <__mcmp>
    b022:	1e06      	subs	r6, r0, #0
    b024:	d108      	bne.n	b038 <__mdiff+0x28>
    b026:	0001      	movs	r1, r0
    b028:	0038      	movs	r0, r7
    b02a:	f7ff fdc6 	bl	abba <_Balloc>
    b02e:	2301      	movs	r3, #1
    b030:	6146      	str	r6, [r0, #20]
    b032:	6103      	str	r3, [r0, #16]
    b034:	b005      	add	sp, #20
    b036:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b038:	2301      	movs	r3, #1
    b03a:	9301      	str	r3, [sp, #4]
    b03c:	2800      	cmp	r0, #0
    b03e:	db04      	blt.n	b04a <__mdiff+0x3a>
    b040:	0023      	movs	r3, r4
    b042:	002c      	movs	r4, r5
    b044:	001d      	movs	r5, r3
    b046:	2300      	movs	r3, #0
    b048:	9301      	str	r3, [sp, #4]
    b04a:	6861      	ldr	r1, [r4, #4]
    b04c:	0038      	movs	r0, r7
    b04e:	f7ff fdb4 	bl	abba <_Balloc>
    b052:	002f      	movs	r7, r5
    b054:	2200      	movs	r2, #0
    b056:	9b01      	ldr	r3, [sp, #4]
    b058:	6926      	ldr	r6, [r4, #16]
    b05a:	60c3      	str	r3, [r0, #12]
    b05c:	3414      	adds	r4, #20
    b05e:	00b3      	lsls	r3, r6, #2
    b060:	18e3      	adds	r3, r4, r3
    b062:	9302      	str	r3, [sp, #8]
    b064:	692b      	ldr	r3, [r5, #16]
    b066:	3714      	adds	r7, #20
    b068:	009b      	lsls	r3, r3, #2
    b06a:	18fb      	adds	r3, r7, r3
    b06c:	9303      	str	r3, [sp, #12]
    b06e:	0003      	movs	r3, r0
    b070:	4694      	mov	ip, r2
    b072:	3314      	adds	r3, #20
    b074:	cc20      	ldmia	r4!, {r5}
    b076:	cf04      	ldmia	r7!, {r2}
    b078:	9201      	str	r2, [sp, #4]
    b07a:	b2aa      	uxth	r2, r5
    b07c:	4494      	add	ip, r2
    b07e:	466a      	mov	r2, sp
    b080:	4661      	mov	r1, ip
    b082:	8892      	ldrh	r2, [r2, #4]
    b084:	0c2d      	lsrs	r5, r5, #16
    b086:	1a8a      	subs	r2, r1, r2
    b088:	9901      	ldr	r1, [sp, #4]
    b08a:	0c09      	lsrs	r1, r1, #16
    b08c:	1a69      	subs	r1, r5, r1
    b08e:	1415      	asrs	r5, r2, #16
    b090:	1949      	adds	r1, r1, r5
    b092:	140d      	asrs	r5, r1, #16
    b094:	b292      	uxth	r2, r2
    b096:	0409      	lsls	r1, r1, #16
    b098:	430a      	orrs	r2, r1
    b09a:	601a      	str	r2, [r3, #0]
    b09c:	9a03      	ldr	r2, [sp, #12]
    b09e:	46ac      	mov	ip, r5
    b0a0:	3304      	adds	r3, #4
    b0a2:	42ba      	cmp	r2, r7
    b0a4:	d8e6      	bhi.n	b074 <__mdiff+0x64>
    b0a6:	9902      	ldr	r1, [sp, #8]
    b0a8:	001a      	movs	r2, r3
    b0aa:	428c      	cmp	r4, r1
    b0ac:	d305      	bcc.n	b0ba <__mdiff+0xaa>
    b0ae:	3a04      	subs	r2, #4
    b0b0:	6813      	ldr	r3, [r2, #0]
    b0b2:	2b00      	cmp	r3, #0
    b0b4:	d00e      	beq.n	b0d4 <__mdiff+0xc4>
    b0b6:	6106      	str	r6, [r0, #16]
    b0b8:	e7bc      	b.n	b034 <__mdiff+0x24>
    b0ba:	cc04      	ldmia	r4!, {r2}
    b0bc:	b291      	uxth	r1, r2
    b0be:	4461      	add	r1, ip
    b0c0:	140d      	asrs	r5, r1, #16
    b0c2:	0c12      	lsrs	r2, r2, #16
    b0c4:	1952      	adds	r2, r2, r5
    b0c6:	1415      	asrs	r5, r2, #16
    b0c8:	b289      	uxth	r1, r1
    b0ca:	0412      	lsls	r2, r2, #16
    b0cc:	430a      	orrs	r2, r1
    b0ce:	46ac      	mov	ip, r5
    b0d0:	c304      	stmia	r3!, {r2}
    b0d2:	e7e8      	b.n	b0a6 <__mdiff+0x96>
    b0d4:	3e01      	subs	r6, #1
    b0d6:	e7ea      	b.n	b0ae <__mdiff+0x9e>

0000b0d8 <__d2b>:
    b0d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    b0da:	001d      	movs	r5, r3
    b0dc:	2101      	movs	r1, #1
    b0de:	9f08      	ldr	r7, [sp, #32]
    b0e0:	0014      	movs	r4, r2
    b0e2:	f7ff fd6a 	bl	abba <_Balloc>
    b0e6:	032b      	lsls	r3, r5, #12
    b0e8:	006d      	lsls	r5, r5, #1
    b0ea:	0006      	movs	r6, r0
    b0ec:	0b1b      	lsrs	r3, r3, #12
    b0ee:	0d6d      	lsrs	r5, r5, #21
    b0f0:	d124      	bne.n	b13c <__d2b+0x64>
    b0f2:	9301      	str	r3, [sp, #4]
    b0f4:	2c00      	cmp	r4, #0
    b0f6:	d027      	beq.n	b148 <__d2b+0x70>
    b0f8:	4668      	mov	r0, sp
    b0fa:	9400      	str	r4, [sp, #0]
    b0fc:	f7ff fe04 	bl	ad08 <__lo0bits>
    b100:	9c00      	ldr	r4, [sp, #0]
    b102:	2800      	cmp	r0, #0
    b104:	d01e      	beq.n	b144 <__d2b+0x6c>
    b106:	9b01      	ldr	r3, [sp, #4]
    b108:	2120      	movs	r1, #32
    b10a:	001a      	movs	r2, r3
    b10c:	1a09      	subs	r1, r1, r0
    b10e:	408a      	lsls	r2, r1
    b110:	40c3      	lsrs	r3, r0
    b112:	4322      	orrs	r2, r4
    b114:	6172      	str	r2, [r6, #20]
    b116:	9301      	str	r3, [sp, #4]
    b118:	9c01      	ldr	r4, [sp, #4]
    b11a:	61b4      	str	r4, [r6, #24]
    b11c:	1e63      	subs	r3, r4, #1
    b11e:	419c      	sbcs	r4, r3
    b120:	3401      	adds	r4, #1
    b122:	6134      	str	r4, [r6, #16]
    b124:	2d00      	cmp	r5, #0
    b126:	d018      	beq.n	b15a <__d2b+0x82>
    b128:	4b12      	ldr	r3, [pc, #72]	; (b174 <__d2b+0x9c>)
    b12a:	18ed      	adds	r5, r5, r3
    b12c:	2335      	movs	r3, #53	; 0x35
    b12e:	182d      	adds	r5, r5, r0
    b130:	603d      	str	r5, [r7, #0]
    b132:	1a18      	subs	r0, r3, r0
    b134:	9b09      	ldr	r3, [sp, #36]	; 0x24
    b136:	6018      	str	r0, [r3, #0]
    b138:	0030      	movs	r0, r6
    b13a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    b13c:	2280      	movs	r2, #128	; 0x80
    b13e:	0352      	lsls	r2, r2, #13
    b140:	4313      	orrs	r3, r2
    b142:	e7d6      	b.n	b0f2 <__d2b+0x1a>
    b144:	6174      	str	r4, [r6, #20]
    b146:	e7e7      	b.n	b118 <__d2b+0x40>
    b148:	a801      	add	r0, sp, #4
    b14a:	f7ff fddd 	bl	ad08 <__lo0bits>
    b14e:	2401      	movs	r4, #1
    b150:	9b01      	ldr	r3, [sp, #4]
    b152:	6134      	str	r4, [r6, #16]
    b154:	6173      	str	r3, [r6, #20]
    b156:	3020      	adds	r0, #32
    b158:	e7e4      	b.n	b124 <__d2b+0x4c>
    b15a:	4b07      	ldr	r3, [pc, #28]	; (b178 <__d2b+0xa0>)
    b15c:	18c0      	adds	r0, r0, r3
    b15e:	4b07      	ldr	r3, [pc, #28]	; (b17c <__d2b+0xa4>)
    b160:	6038      	str	r0, [r7, #0]
    b162:	18e3      	adds	r3, r4, r3
    b164:	009b      	lsls	r3, r3, #2
    b166:	18f3      	adds	r3, r6, r3
    b168:	6958      	ldr	r0, [r3, #20]
    b16a:	f7ff fdb3 	bl	acd4 <__hi0bits>
    b16e:	0164      	lsls	r4, r4, #5
    b170:	1a20      	subs	r0, r4, r0
    b172:	e7df      	b.n	b134 <__d2b+0x5c>
    b174:	fffffbcd 	.word	0xfffffbcd
    b178:	fffffbce 	.word	0xfffffbce
    b17c:	3fffffff 	.word	0x3fffffff

0000b180 <_calloc_r>:
    b180:	434a      	muls	r2, r1
    b182:	b570      	push	{r4, r5, r6, lr}
    b184:	0011      	movs	r1, r2
    b186:	0014      	movs	r4, r2
    b188:	f7fe f8d0 	bl	932c <_malloc_r>
    b18c:	1e05      	subs	r5, r0, #0
    b18e:	d003      	beq.n	b198 <_calloc_r+0x18>
    b190:	0022      	movs	r2, r4
    b192:	2100      	movs	r1, #0
    b194:	f7fe f878 	bl	9288 <memset>
    b198:	0028      	movs	r0, r5
    b19a:	bd70      	pop	{r4, r5, r6, pc}

0000b19c <_realloc_r>:
    b19c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b19e:	0007      	movs	r7, r0
    b1a0:	000d      	movs	r5, r1
    b1a2:	0016      	movs	r6, r2
    b1a4:	2900      	cmp	r1, #0
    b1a6:	d105      	bne.n	b1b4 <_realloc_r+0x18>
    b1a8:	0011      	movs	r1, r2
    b1aa:	f7fe f8bf 	bl	932c <_malloc_r>
    b1ae:	0004      	movs	r4, r0
    b1b0:	0020      	movs	r0, r4
    b1b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    b1b4:	2a00      	cmp	r2, #0
    b1b6:	d103      	bne.n	b1c0 <_realloc_r+0x24>
    b1b8:	f7fe f86e 	bl	9298 <_free_r>
    b1bc:	0034      	movs	r4, r6
    b1be:	e7f7      	b.n	b1b0 <_realloc_r+0x14>
    b1c0:	f000 f978 	bl	b4b4 <_malloc_usable_size_r>
    b1c4:	002c      	movs	r4, r5
    b1c6:	4286      	cmp	r6, r0
    b1c8:	d9f2      	bls.n	b1b0 <_realloc_r+0x14>
    b1ca:	0031      	movs	r1, r6
    b1cc:	0038      	movs	r0, r7
    b1ce:	f7fe f8ad 	bl	932c <_malloc_r>
    b1d2:	1e04      	subs	r4, r0, #0
    b1d4:	d0ec      	beq.n	b1b0 <_realloc_r+0x14>
    b1d6:	0029      	movs	r1, r5
    b1d8:	0032      	movs	r2, r6
    b1da:	f7fe f83a 	bl	9252 <memcpy>
    b1de:	0029      	movs	r1, r5
    b1e0:	0038      	movs	r0, r7
    b1e2:	f7fe f859 	bl	9298 <_free_r>
    b1e6:	e7e3      	b.n	b1b0 <_realloc_r+0x14>

0000b1e8 <__ssputs_r>:
    b1e8:	b5f0      	push	{r4, r5, r6, r7, lr}
    b1ea:	688e      	ldr	r6, [r1, #8]
    b1ec:	b085      	sub	sp, #20
    b1ee:	0007      	movs	r7, r0
    b1f0:	000c      	movs	r4, r1
    b1f2:	9203      	str	r2, [sp, #12]
    b1f4:	9301      	str	r3, [sp, #4]
    b1f6:	429e      	cmp	r6, r3
    b1f8:	d839      	bhi.n	b26e <__ssputs_r+0x86>
    b1fa:	2390      	movs	r3, #144	; 0x90
    b1fc:	898a      	ldrh	r2, [r1, #12]
    b1fe:	00db      	lsls	r3, r3, #3
    b200:	421a      	tst	r2, r3
    b202:	d034      	beq.n	b26e <__ssputs_r+0x86>
    b204:	2503      	movs	r5, #3
    b206:	6909      	ldr	r1, [r1, #16]
    b208:	6823      	ldr	r3, [r4, #0]
    b20a:	1a5b      	subs	r3, r3, r1
    b20c:	9302      	str	r3, [sp, #8]
    b20e:	6963      	ldr	r3, [r4, #20]
    b210:	9802      	ldr	r0, [sp, #8]
    b212:	435d      	muls	r5, r3
    b214:	0feb      	lsrs	r3, r5, #31
    b216:	195d      	adds	r5, r3, r5
    b218:	9b01      	ldr	r3, [sp, #4]
    b21a:	106d      	asrs	r5, r5, #1
    b21c:	3301      	adds	r3, #1
    b21e:	181b      	adds	r3, r3, r0
    b220:	42ab      	cmp	r3, r5
    b222:	d900      	bls.n	b226 <__ssputs_r+0x3e>
    b224:	001d      	movs	r5, r3
    b226:	0553      	lsls	r3, r2, #21
    b228:	d532      	bpl.n	b290 <__ssputs_r+0xa8>
    b22a:	0029      	movs	r1, r5
    b22c:	0038      	movs	r0, r7
    b22e:	f7fe f87d 	bl	932c <_malloc_r>
    b232:	1e06      	subs	r6, r0, #0
    b234:	d109      	bne.n	b24a <__ssputs_r+0x62>
    b236:	230c      	movs	r3, #12
    b238:	603b      	str	r3, [r7, #0]
    b23a:	2340      	movs	r3, #64	; 0x40
    b23c:	2001      	movs	r0, #1
    b23e:	89a2      	ldrh	r2, [r4, #12]
    b240:	4240      	negs	r0, r0
    b242:	4313      	orrs	r3, r2
    b244:	81a3      	strh	r3, [r4, #12]
    b246:	b005      	add	sp, #20
    b248:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b24a:	9a02      	ldr	r2, [sp, #8]
    b24c:	6921      	ldr	r1, [r4, #16]
    b24e:	f7fe f800 	bl	9252 <memcpy>
    b252:	89a3      	ldrh	r3, [r4, #12]
    b254:	4a14      	ldr	r2, [pc, #80]	; (b2a8 <__ssputs_r+0xc0>)
    b256:	401a      	ands	r2, r3
    b258:	2380      	movs	r3, #128	; 0x80
    b25a:	4313      	orrs	r3, r2
    b25c:	81a3      	strh	r3, [r4, #12]
    b25e:	9b02      	ldr	r3, [sp, #8]
    b260:	6126      	str	r6, [r4, #16]
    b262:	18f6      	adds	r6, r6, r3
    b264:	6026      	str	r6, [r4, #0]
    b266:	6165      	str	r5, [r4, #20]
    b268:	9e01      	ldr	r6, [sp, #4]
    b26a:	1aed      	subs	r5, r5, r3
    b26c:	60a5      	str	r5, [r4, #8]
    b26e:	9b01      	ldr	r3, [sp, #4]
    b270:	42b3      	cmp	r3, r6
    b272:	d200      	bcs.n	b276 <__ssputs_r+0x8e>
    b274:	001e      	movs	r6, r3
    b276:	0032      	movs	r2, r6
    b278:	9903      	ldr	r1, [sp, #12]
    b27a:	6820      	ldr	r0, [r4, #0]
    b27c:	f7fd fff2 	bl	9264 <memmove>
    b280:	68a3      	ldr	r3, [r4, #8]
    b282:	2000      	movs	r0, #0
    b284:	1b9b      	subs	r3, r3, r6
    b286:	60a3      	str	r3, [r4, #8]
    b288:	6823      	ldr	r3, [r4, #0]
    b28a:	199e      	adds	r6, r3, r6
    b28c:	6026      	str	r6, [r4, #0]
    b28e:	e7da      	b.n	b246 <__ssputs_r+0x5e>
    b290:	002a      	movs	r2, r5
    b292:	0038      	movs	r0, r7
    b294:	f7ff ff82 	bl	b19c <_realloc_r>
    b298:	1e06      	subs	r6, r0, #0
    b29a:	d1e0      	bne.n	b25e <__ssputs_r+0x76>
    b29c:	6921      	ldr	r1, [r4, #16]
    b29e:	0038      	movs	r0, r7
    b2a0:	f7fd fffa 	bl	9298 <_free_r>
    b2a4:	e7c7      	b.n	b236 <__ssputs_r+0x4e>
    b2a6:	46c0      	nop			; (mov r8, r8)
    b2a8:	fffffb7f 	.word	0xfffffb7f

0000b2ac <_svfiprintf_r>:
    b2ac:	b5f0      	push	{r4, r5, r6, r7, lr}
    b2ae:	b09f      	sub	sp, #124	; 0x7c
    b2b0:	9002      	str	r0, [sp, #8]
    b2b2:	9305      	str	r3, [sp, #20]
    b2b4:	898b      	ldrh	r3, [r1, #12]
    b2b6:	000f      	movs	r7, r1
    b2b8:	0016      	movs	r6, r2
    b2ba:	061b      	lsls	r3, r3, #24
    b2bc:	d511      	bpl.n	b2e2 <_svfiprintf_r+0x36>
    b2be:	690b      	ldr	r3, [r1, #16]
    b2c0:	2b00      	cmp	r3, #0
    b2c2:	d10e      	bne.n	b2e2 <_svfiprintf_r+0x36>
    b2c4:	2140      	movs	r1, #64	; 0x40
    b2c6:	f7fe f831 	bl	932c <_malloc_r>
    b2ca:	6038      	str	r0, [r7, #0]
    b2cc:	6138      	str	r0, [r7, #16]
    b2ce:	2800      	cmp	r0, #0
    b2d0:	d105      	bne.n	b2de <_svfiprintf_r+0x32>
    b2d2:	230c      	movs	r3, #12
    b2d4:	9a02      	ldr	r2, [sp, #8]
    b2d6:	3801      	subs	r0, #1
    b2d8:	6013      	str	r3, [r2, #0]
    b2da:	b01f      	add	sp, #124	; 0x7c
    b2dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b2de:	2340      	movs	r3, #64	; 0x40
    b2e0:	617b      	str	r3, [r7, #20]
    b2e2:	2300      	movs	r3, #0
    b2e4:	ad06      	add	r5, sp, #24
    b2e6:	616b      	str	r3, [r5, #20]
    b2e8:	3320      	adds	r3, #32
    b2ea:	766b      	strb	r3, [r5, #25]
    b2ec:	3310      	adds	r3, #16
    b2ee:	76ab      	strb	r3, [r5, #26]
    b2f0:	0034      	movs	r4, r6
    b2f2:	7823      	ldrb	r3, [r4, #0]
    b2f4:	2b00      	cmp	r3, #0
    b2f6:	d147      	bne.n	b388 <_svfiprintf_r+0xdc>
    b2f8:	1ba3      	subs	r3, r4, r6
    b2fa:	9304      	str	r3, [sp, #16]
    b2fc:	d00d      	beq.n	b31a <_svfiprintf_r+0x6e>
    b2fe:	1ba3      	subs	r3, r4, r6
    b300:	0032      	movs	r2, r6
    b302:	0039      	movs	r1, r7
    b304:	9802      	ldr	r0, [sp, #8]
    b306:	f7ff ff6f 	bl	b1e8 <__ssputs_r>
    b30a:	1c43      	adds	r3, r0, #1
    b30c:	d100      	bne.n	b310 <_svfiprintf_r+0x64>
    b30e:	e0b5      	b.n	b47c <_svfiprintf_r+0x1d0>
    b310:	696a      	ldr	r2, [r5, #20]
    b312:	9b04      	ldr	r3, [sp, #16]
    b314:	4694      	mov	ip, r2
    b316:	4463      	add	r3, ip
    b318:	616b      	str	r3, [r5, #20]
    b31a:	7823      	ldrb	r3, [r4, #0]
    b31c:	2b00      	cmp	r3, #0
    b31e:	d100      	bne.n	b322 <_svfiprintf_r+0x76>
    b320:	e0ac      	b.n	b47c <_svfiprintf_r+0x1d0>
    b322:	2201      	movs	r2, #1
    b324:	2300      	movs	r3, #0
    b326:	4252      	negs	r2, r2
    b328:	606a      	str	r2, [r5, #4]
    b32a:	a902      	add	r1, sp, #8
    b32c:	3254      	adds	r2, #84	; 0x54
    b32e:	1852      	adds	r2, r2, r1
    b330:	3401      	adds	r4, #1
    b332:	602b      	str	r3, [r5, #0]
    b334:	60eb      	str	r3, [r5, #12]
    b336:	60ab      	str	r3, [r5, #8]
    b338:	7013      	strb	r3, [r2, #0]
    b33a:	65ab      	str	r3, [r5, #88]	; 0x58
    b33c:	4e58      	ldr	r6, [pc, #352]	; (b4a0 <_svfiprintf_r+0x1f4>)
    b33e:	2205      	movs	r2, #5
    b340:	7821      	ldrb	r1, [r4, #0]
    b342:	0030      	movs	r0, r6
    b344:	f7ff fc2c 	bl	aba0 <memchr>
    b348:	1c62      	adds	r2, r4, #1
    b34a:	2800      	cmp	r0, #0
    b34c:	d120      	bne.n	b390 <_svfiprintf_r+0xe4>
    b34e:	6829      	ldr	r1, [r5, #0]
    b350:	06cb      	lsls	r3, r1, #27
    b352:	d504      	bpl.n	b35e <_svfiprintf_r+0xb2>
    b354:	2353      	movs	r3, #83	; 0x53
    b356:	ae02      	add	r6, sp, #8
    b358:	3020      	adds	r0, #32
    b35a:	199b      	adds	r3, r3, r6
    b35c:	7018      	strb	r0, [r3, #0]
    b35e:	070b      	lsls	r3, r1, #28
    b360:	d504      	bpl.n	b36c <_svfiprintf_r+0xc0>
    b362:	2353      	movs	r3, #83	; 0x53
    b364:	202b      	movs	r0, #43	; 0x2b
    b366:	ae02      	add	r6, sp, #8
    b368:	199b      	adds	r3, r3, r6
    b36a:	7018      	strb	r0, [r3, #0]
    b36c:	7823      	ldrb	r3, [r4, #0]
    b36e:	2b2a      	cmp	r3, #42	; 0x2a
    b370:	d016      	beq.n	b3a0 <_svfiprintf_r+0xf4>
    b372:	2000      	movs	r0, #0
    b374:	210a      	movs	r1, #10
    b376:	9b09      	ldr	r3, [sp, #36]	; 0x24
    b378:	7822      	ldrb	r2, [r4, #0]
    b37a:	3a30      	subs	r2, #48	; 0x30
    b37c:	2a09      	cmp	r2, #9
    b37e:	d955      	bls.n	b42c <_svfiprintf_r+0x180>
    b380:	2800      	cmp	r0, #0
    b382:	d015      	beq.n	b3b0 <_svfiprintf_r+0x104>
    b384:	9309      	str	r3, [sp, #36]	; 0x24
    b386:	e013      	b.n	b3b0 <_svfiprintf_r+0x104>
    b388:	2b25      	cmp	r3, #37	; 0x25
    b38a:	d0b5      	beq.n	b2f8 <_svfiprintf_r+0x4c>
    b38c:	3401      	adds	r4, #1
    b38e:	e7b0      	b.n	b2f2 <_svfiprintf_r+0x46>
    b390:	2301      	movs	r3, #1
    b392:	1b80      	subs	r0, r0, r6
    b394:	4083      	lsls	r3, r0
    b396:	6829      	ldr	r1, [r5, #0]
    b398:	0014      	movs	r4, r2
    b39a:	430b      	orrs	r3, r1
    b39c:	602b      	str	r3, [r5, #0]
    b39e:	e7cd      	b.n	b33c <_svfiprintf_r+0x90>
    b3a0:	9b05      	ldr	r3, [sp, #20]
    b3a2:	1d18      	adds	r0, r3, #4
    b3a4:	681b      	ldr	r3, [r3, #0]
    b3a6:	9005      	str	r0, [sp, #20]
    b3a8:	2b00      	cmp	r3, #0
    b3aa:	db39      	blt.n	b420 <_svfiprintf_r+0x174>
    b3ac:	9309      	str	r3, [sp, #36]	; 0x24
    b3ae:	0014      	movs	r4, r2
    b3b0:	7823      	ldrb	r3, [r4, #0]
    b3b2:	2b2e      	cmp	r3, #46	; 0x2e
    b3b4:	d10b      	bne.n	b3ce <_svfiprintf_r+0x122>
    b3b6:	7863      	ldrb	r3, [r4, #1]
    b3b8:	1c62      	adds	r2, r4, #1
    b3ba:	2b2a      	cmp	r3, #42	; 0x2a
    b3bc:	d13e      	bne.n	b43c <_svfiprintf_r+0x190>
    b3be:	9b05      	ldr	r3, [sp, #20]
    b3c0:	3402      	adds	r4, #2
    b3c2:	1d1a      	adds	r2, r3, #4
    b3c4:	681b      	ldr	r3, [r3, #0]
    b3c6:	9205      	str	r2, [sp, #20]
    b3c8:	2b00      	cmp	r3, #0
    b3ca:	db34      	blt.n	b436 <_svfiprintf_r+0x18a>
    b3cc:	9307      	str	r3, [sp, #28]
    b3ce:	4e35      	ldr	r6, [pc, #212]	; (b4a4 <_svfiprintf_r+0x1f8>)
    b3d0:	7821      	ldrb	r1, [r4, #0]
    b3d2:	2203      	movs	r2, #3
    b3d4:	0030      	movs	r0, r6
    b3d6:	f7ff fbe3 	bl	aba0 <memchr>
    b3da:	2800      	cmp	r0, #0
    b3dc:	d006      	beq.n	b3ec <_svfiprintf_r+0x140>
    b3de:	2340      	movs	r3, #64	; 0x40
    b3e0:	1b80      	subs	r0, r0, r6
    b3e2:	4083      	lsls	r3, r0
    b3e4:	682a      	ldr	r2, [r5, #0]
    b3e6:	3401      	adds	r4, #1
    b3e8:	4313      	orrs	r3, r2
    b3ea:	602b      	str	r3, [r5, #0]
    b3ec:	7821      	ldrb	r1, [r4, #0]
    b3ee:	2206      	movs	r2, #6
    b3f0:	482d      	ldr	r0, [pc, #180]	; (b4a8 <_svfiprintf_r+0x1fc>)
    b3f2:	1c66      	adds	r6, r4, #1
    b3f4:	7629      	strb	r1, [r5, #24]
    b3f6:	f7ff fbd3 	bl	aba0 <memchr>
    b3fa:	2800      	cmp	r0, #0
    b3fc:	d046      	beq.n	b48c <_svfiprintf_r+0x1e0>
    b3fe:	4b2b      	ldr	r3, [pc, #172]	; (b4ac <_svfiprintf_r+0x200>)
    b400:	2b00      	cmp	r3, #0
    b402:	d12f      	bne.n	b464 <_svfiprintf_r+0x1b8>
    b404:	6829      	ldr	r1, [r5, #0]
    b406:	9b05      	ldr	r3, [sp, #20]
    b408:	2207      	movs	r2, #7
    b40a:	05c9      	lsls	r1, r1, #23
    b40c:	d528      	bpl.n	b460 <_svfiprintf_r+0x1b4>
    b40e:	189b      	adds	r3, r3, r2
    b410:	4393      	bics	r3, r2
    b412:	3308      	adds	r3, #8
    b414:	9305      	str	r3, [sp, #20]
    b416:	696b      	ldr	r3, [r5, #20]
    b418:	9a03      	ldr	r2, [sp, #12]
    b41a:	189b      	adds	r3, r3, r2
    b41c:	616b      	str	r3, [r5, #20]
    b41e:	e767      	b.n	b2f0 <_svfiprintf_r+0x44>
    b420:	425b      	negs	r3, r3
    b422:	60eb      	str	r3, [r5, #12]
    b424:	2302      	movs	r3, #2
    b426:	430b      	orrs	r3, r1
    b428:	602b      	str	r3, [r5, #0]
    b42a:	e7c0      	b.n	b3ae <_svfiprintf_r+0x102>
    b42c:	434b      	muls	r3, r1
    b42e:	3401      	adds	r4, #1
    b430:	189b      	adds	r3, r3, r2
    b432:	2001      	movs	r0, #1
    b434:	e7a0      	b.n	b378 <_svfiprintf_r+0xcc>
    b436:	2301      	movs	r3, #1
    b438:	425b      	negs	r3, r3
    b43a:	e7c7      	b.n	b3cc <_svfiprintf_r+0x120>
    b43c:	2300      	movs	r3, #0
    b43e:	0014      	movs	r4, r2
    b440:	200a      	movs	r0, #10
    b442:	001a      	movs	r2, r3
    b444:	606b      	str	r3, [r5, #4]
    b446:	7821      	ldrb	r1, [r4, #0]
    b448:	3930      	subs	r1, #48	; 0x30
    b44a:	2909      	cmp	r1, #9
    b44c:	d903      	bls.n	b456 <_svfiprintf_r+0x1aa>
    b44e:	2b00      	cmp	r3, #0
    b450:	d0bd      	beq.n	b3ce <_svfiprintf_r+0x122>
    b452:	9207      	str	r2, [sp, #28]
    b454:	e7bb      	b.n	b3ce <_svfiprintf_r+0x122>
    b456:	4342      	muls	r2, r0
    b458:	3401      	adds	r4, #1
    b45a:	1852      	adds	r2, r2, r1
    b45c:	2301      	movs	r3, #1
    b45e:	e7f2      	b.n	b446 <_svfiprintf_r+0x19a>
    b460:	3307      	adds	r3, #7
    b462:	e7d5      	b.n	b410 <_svfiprintf_r+0x164>
    b464:	ab05      	add	r3, sp, #20
    b466:	9300      	str	r3, [sp, #0]
    b468:	003a      	movs	r2, r7
    b46a:	4b11      	ldr	r3, [pc, #68]	; (b4b0 <_svfiprintf_r+0x204>)
    b46c:	0029      	movs	r1, r5
    b46e:	9802      	ldr	r0, [sp, #8]
    b470:	f7fe f856 	bl	9520 <_printf_float>
    b474:	9003      	str	r0, [sp, #12]
    b476:	9b03      	ldr	r3, [sp, #12]
    b478:	3301      	adds	r3, #1
    b47a:	d1cc      	bne.n	b416 <_svfiprintf_r+0x16a>
    b47c:	89bb      	ldrh	r3, [r7, #12]
    b47e:	980b      	ldr	r0, [sp, #44]	; 0x2c
    b480:	065b      	lsls	r3, r3, #25
    b482:	d400      	bmi.n	b486 <_svfiprintf_r+0x1da>
    b484:	e729      	b.n	b2da <_svfiprintf_r+0x2e>
    b486:	2001      	movs	r0, #1
    b488:	4240      	negs	r0, r0
    b48a:	e726      	b.n	b2da <_svfiprintf_r+0x2e>
    b48c:	ab05      	add	r3, sp, #20
    b48e:	9300      	str	r3, [sp, #0]
    b490:	003a      	movs	r2, r7
    b492:	4b07      	ldr	r3, [pc, #28]	; (b4b0 <_svfiprintf_r+0x204>)
    b494:	0029      	movs	r1, r5
    b496:	9802      	ldr	r0, [sp, #8]
    b498:	f7fe fafc 	bl	9a94 <_printf_i>
    b49c:	e7ea      	b.n	b474 <_svfiprintf_r+0x1c8>
    b49e:	46c0      	nop			; (mov r8, r8)
    b4a0:	0000c004 	.word	0x0000c004
    b4a4:	0000c00a 	.word	0x0000c00a
    b4a8:	0000c00e 	.word	0x0000c00e
    b4ac:	00009521 	.word	0x00009521
    b4b0:	0000b1e9 	.word	0x0000b1e9

0000b4b4 <_malloc_usable_size_r>:
    b4b4:	1f0b      	subs	r3, r1, #4
    b4b6:	681b      	ldr	r3, [r3, #0]
    b4b8:	1f18      	subs	r0, r3, #4
    b4ba:	2b00      	cmp	r3, #0
    b4bc:	da01      	bge.n	b4c2 <_malloc_usable_size_r+0xe>
    b4be:	580b      	ldr	r3, [r1, r0]
    b4c0:	18c0      	adds	r0, r0, r3
    b4c2:	4770      	bx	lr

0000b4c4 <__aeabi_i2d>:
    b4c4:	b570      	push	{r4, r5, r6, lr}
    b4c6:	2800      	cmp	r0, #0
    b4c8:	d030      	beq.n	b52c <__aeabi_i2d+0x68>
    b4ca:	17c3      	asrs	r3, r0, #31
    b4cc:	18c4      	adds	r4, r0, r3
    b4ce:	405c      	eors	r4, r3
    b4d0:	0fc5      	lsrs	r5, r0, #31
    b4d2:	0020      	movs	r0, r4
    b4d4:	f7fd fe34 	bl	9140 <__clzsi2>
    b4d8:	4b17      	ldr	r3, [pc, #92]	; (b538 <__aeabi_i2d+0x74>)
    b4da:	4a18      	ldr	r2, [pc, #96]	; (b53c <__aeabi_i2d+0x78>)
    b4dc:	1a1b      	subs	r3, r3, r0
    b4de:	1ad2      	subs	r2, r2, r3
    b4e0:	2a1f      	cmp	r2, #31
    b4e2:	dd18      	ble.n	b516 <__aeabi_i2d+0x52>
    b4e4:	4a16      	ldr	r2, [pc, #88]	; (b540 <__aeabi_i2d+0x7c>)
    b4e6:	1ad2      	subs	r2, r2, r3
    b4e8:	4094      	lsls	r4, r2
    b4ea:	2200      	movs	r2, #0
    b4ec:	0324      	lsls	r4, r4, #12
    b4ee:	055b      	lsls	r3, r3, #21
    b4f0:	0b24      	lsrs	r4, r4, #12
    b4f2:	0d5b      	lsrs	r3, r3, #21
    b4f4:	2100      	movs	r1, #0
    b4f6:	0010      	movs	r0, r2
    b4f8:	0324      	lsls	r4, r4, #12
    b4fa:	0d0a      	lsrs	r2, r1, #20
    b4fc:	0b24      	lsrs	r4, r4, #12
    b4fe:	0512      	lsls	r2, r2, #20
    b500:	4322      	orrs	r2, r4
    b502:	4c10      	ldr	r4, [pc, #64]	; (b544 <__aeabi_i2d+0x80>)
    b504:	051b      	lsls	r3, r3, #20
    b506:	4022      	ands	r2, r4
    b508:	4313      	orrs	r3, r2
    b50a:	005b      	lsls	r3, r3, #1
    b50c:	07ed      	lsls	r5, r5, #31
    b50e:	085b      	lsrs	r3, r3, #1
    b510:	432b      	orrs	r3, r5
    b512:	0019      	movs	r1, r3
    b514:	bd70      	pop	{r4, r5, r6, pc}
    b516:	0021      	movs	r1, r4
    b518:	4091      	lsls	r1, r2
    b51a:	000a      	movs	r2, r1
    b51c:	210b      	movs	r1, #11
    b51e:	1a08      	subs	r0, r1, r0
    b520:	40c4      	lsrs	r4, r0
    b522:	055b      	lsls	r3, r3, #21
    b524:	0324      	lsls	r4, r4, #12
    b526:	0b24      	lsrs	r4, r4, #12
    b528:	0d5b      	lsrs	r3, r3, #21
    b52a:	e7e3      	b.n	b4f4 <__aeabi_i2d+0x30>
    b52c:	2500      	movs	r5, #0
    b52e:	2300      	movs	r3, #0
    b530:	2400      	movs	r4, #0
    b532:	2200      	movs	r2, #0
    b534:	e7de      	b.n	b4f4 <__aeabi_i2d+0x30>
    b536:	46c0      	nop			; (mov r8, r8)
    b538:	0000041e 	.word	0x0000041e
    b53c:	00000433 	.word	0x00000433
    b540:	00000413 	.word	0x00000413
    b544:	800fffff 	.word	0x800fffff

0000b548 <_sbrk>:
    b548:	4a04      	ldr	r2, [pc, #16]	; (b55c <_sbrk+0x14>)
    b54a:	6813      	ldr	r3, [r2, #0]
    b54c:	2b00      	cmp	r3, #0
    b54e:	d003      	beq.n	b558 <_sbrk+0x10>
    b550:	1818      	adds	r0, r3, r0
    b552:	6010      	str	r0, [r2, #0]
    b554:	0018      	movs	r0, r3
    b556:	4770      	bx	lr
    b558:	4b01      	ldr	r3, [pc, #4]	; (b560 <_sbrk+0x18>)
    b55a:	e7f9      	b.n	b550 <_sbrk+0x8>
    b55c:	2000106c 	.word	0x2000106c
    b560:	20001074 	.word	0x20001074

0000b564 <_init>:
    b564:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b566:	46c0      	nop			; (mov r8, r8)
    b568:	bcf8      	pop	{r3, r4, r5, r6, r7}
    b56a:	bc08      	pop	{r3}
    b56c:	469e      	mov	lr, r3
    b56e:	4770      	bx	lr

0000b570 <_fini>:
    b570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b572:	46c0      	nop			; (mov r8, r8)
    b574:	bcf8      	pop	{r3, r4, r5, r6, r7}
    b576:	bc08      	pop	{r3}
    b578:	469e      	mov	lr, r3
    b57a:	4770      	bx	lr

0000b57c <_ZTV12BLEAttribute>:
	...
    b584:	2115 0000 211b 0000 2117 0000               .!...!...!..

0000b590 <_ZTV17BLECharacteristic>:
	...
    b598:	2179 0000 21a5 0000 3025 7832 253a 3230     y!...!..%02x:%02
    b5a8:	3a78 3025 7832 253a 3230 3a78 3025 7832     x:%02x:%02x:%02x
    b5b8:	253a 3230 0078 0000                         :%02x...

0000b5c0 <_ZTV9BLEDevice>:
	...
    b5c8:	2265 0000 2267 0000 2275 0000 2285 0000     e"..g"..u"..."..
    b5d8:	2359 0000 2295 0000 22b9 0000 22ed 0000     Y#..."..."..."..
    b5e8:	2309 0000 2339 0000 2385 0000               .#..9#...#..

0000b5f4 <_ZTV10BLEService>:
	...
    b5fc:	23e9 0000 2415 0000                         .#...$..

0000b604 <_ZTV23BLEStringCharacteristic>:
	...
    b60c:	2495 0000 24a9 0000                         .$...$..

0000b614 <_ZTV22BLETypedCharacteristicIhE>:
	...
    b61c:	24e5 0000 24f9 0000                         .$...$..

0000b624 <_ZTV21BLEByteCharacteristic>:
	...
    b62c:	250d 0000 2521 0000 3932 3230 0000 0000     .%..!%..2902....

0000b63c <_ZTV22BLELocalCharacteristic>:
	...
    b644:	27fd 0000 2861 0000 25f9 0000               .'..a(...%..

0000b650 <_ZTV18BLELocalDescriptor>:
	...
    b658:	2989 0000 29a1 0000 2981 0000               .)...)...)..

0000b664 <_ZTV14BLELocalDevice>:
	...
    b66c:	2a05 0000 2a1d 0000 2275 0000 2285 0000     .*...*..u"..."..
    b67c:	2a31 0000 2a49 0000 2a59 0000 2c35 0000     1*..I*..Y*..5,..
    b68c:	29ed 0000 29f1 0000 29fb 0000               .)...)...)..

0000b698 <_ZTV15BLELocalService>:
	...
    b6a0:	2d29 0000 2d85 0000 2c65 0000               )-...-..e,..

0000b6ac <_ZTV8ATTClass>:
	...
    b6b4:	2d99 0000 2db5 0000                         .-...-..

0000b6bc <_ZTV8GAPClass>:
	...
    b6c4:	3df5 0000 3df7 0000 7241 7564 6e69 006f     .=...=..Arduino.
    b6d4:	3831 3030 3200 3061 0030 6132 3130 3100     1800.2a00.2a01.1
    b6e4:	3038 0031 6132 3530 0000 0000               801.2a05....

0000b6f0 <_ZTV9GATTClass>:
	...
    b6f8:	4295 0000 42dd 0000 4348 2049 4341 444c     .B...B..HCI ACLD
    b708:	5441 2041 5854 2d20 203e 4800 4943 4320     ATA TX -> .HCI C
    b718:	4d4f 414d 444e 5420 2058 3e2d 0020 4348     OMMAND TX -> .HC
    b728:	2049 4341 444c 5441 2041 5852 3c20 202d     I ACLDATA RX <- 
    b738:	4800 4943 4520 4556 544e 5220 2058 2d3c     .HCI EVENT RX <-
    b748:	0020 0000                                    ...

0000b74c <_ZTV8HCIClass>:
	...
    b754:	42ef 0000 42f1 0000                         .B...B..

0000b75c <HCITransport>:
    b75c:	05a0 2000                                   ... 

0000b760 <_ZTV21HCIUartTransportClass>:
	...
    b768:	49c3 0000 49d5 0000 4a2b 0000 49e1 0000     .I...I..+J...I..
    b778:	49ed 0000 49f9 0000 4a05 0000 49c1 0000     .I...I...J...I..
    b788:	4a1f 0000                                   .J..

0000b78c <_ZTV19L2CAPSignalingClass>:
	...
    b794:	4a85 0000 4a87 0000 6f63 6e6e 6365 6574     .J...J..connecte
    b7a4:	2064 6f74 6320 6e65 7274 6c61 203a 6400     d to central: .d
    b7b4:	7369 6f63 6e6e 6365 6574 2064 7266 6d6f     isconnected from
    b7c4:	6320 6e65 7274 6c61 203a 7300 6174 7472      central: .start
    b7d4:	6e69 2067 4c42 2045 6166 6c69 6465 0021     ing BLE failed!.
    b7e4:	6177 7469 6e69 2067 6f66 2072 4c42 2045     waiting for BLE 
    b7f4:	6f63 6e6e 6365 6974 6e6f 3100 3038 0041     connection.180A.
    b804:	4132 3932 3200 3241 0034 4132 3532 4400     2A29.2A24.2A25.D
    b814:	7665 6369 4965 666e 726f 616d 6974 6e6f     eviceInformation
    b824:	5200 6165 4464 7365 6769 546e 6365 0068     .ReadDesignTech.
    b834:	4452 2d54 0031 4e53 302d 3030 3030 0031     RDT-1.SN-000001.
    b844:	6563 746e 6172 206c 6f63 6e6e 6365 6574     central connecte
    b854:	2064 7665 6e65 3a74 0020 6563 746e 6172     d event: .centra
    b864:	206c 6964 6373 6e6f 656e 7463 6465 6520     l disconnected e
    b874:	6576 746e 203a 6300 6168 6172 7463 7265     vent: .character
    b884:	7369 6974 2063 7277 7469 6574 206e 7665     istic written ev
    b894:	6e65 3a74 0020 454c 2044 6e6f 4c00 4445     ent: .LED on.LED
    b8a4:	6f20 6666 3100 4239 3031 3130 2d30 3845      off.19B10010-E8
    b8b4:	3246 352d 3733 2d45 4634 4336 442d 3031     F2-537E-4F6C-D10
    b8c4:	3734 3836 3141 3132 0034 3931 3142 3030     4768A1214.19B100
    b8d4:	3131 452d 4638 2d32 3335 4537 342d 3646     11-E8F2-537E-4F6
    b8e4:	2d43 3144 3430 3637 4138 3231 3431 3100     C-D104768A1214.1
    b8f4:	4239 3031 3130 2d32 3845 3246 352d 3733     9B10012-E8F2-537
    b904:	2d45 4634 4336 442d 3031 3734 3836 3141     E-4F6C-D104768A1
    b914:	3132 0034 654c 4364 6e6f 7274 6c6f 656c     214.LedControlle
    b924:	0072 0a0d 0000 0000                         r.......

0000b92c <_ZTV7Serial_>:
	...
    b934:	5631 0000 565d 0000 562d 0000 5651 0000     1V..]V..-V..QV..
    b944:	5645 0000 5695 0000 5679 0000               EV...V..yV..

0000b950 <_ZTV26DoubleBufferedEPOutHandler>:
	...
    b958:	5b23 0000 5a05 0000 5961 0000 57c9 0000     #[...Z..aY...W..
    b968:	57dd 0000                                   .W..

0000b96c <_ZL14STRING_PRODUCT>:
    b96c:	7241 7564 6e69 206f 4b4d 2052 6957 6946     Arduino MKR WiFi
    b97c:	3120 3130 0030                               1010.

0000b982 <_ZL15STRING_LANGUAGE>:
    b982:	0304 0409                                   ....

0000b986 <_ZL19STRING_MANUFACTURER>:
    b986:	7241 7564 6e69 206f 4c4c 0043               Arduino LLC.

0000b992 <_ZL21USB_DeviceDescriptorB>:
    b992:	0112 0200 02ef 4001 2341 8054 0100 0201     .......@A#T.....
    b9a2:	0103                                        ..

0000b9a4 <g_APinDescription>:
    b9a4:	0000 0000 0016 0000 0008 0000 001c 0000     ................
    b9b4:	00ff 0400 0400 0006 0000 0000 0017 0000     ................
    b9c4:	0008 0000 001c 0000 00ff 0401 0401 0007     ................
    b9d4:	0000 0000 000a 0000 0008 0000 001c 0000     ................
    b9e4:	0012 0100 0100 00ff 0000 0000 000b 0000     ................
    b9f4:	0008 0000 001c 0000 0013 0101 0101 00ff     ................
    ba04:	0001 0000 000a 0000 0008 0000 001c 0000     ................
    ba14:	00ff 0500 0500 000a 0001 0000 000b 0000     ................
    ba24:	0008 0000 001c 0000 00ff 0501 0501 000b     ................
    ba34:	0000 0000 0014 0000 0008 0000 002c 0000     ............,...
    ba44:	00ff 0002 0002 0004 0000 0000 0015 0000     ................
    ba54:	0008 0000 002c 0000 00ff 0003 0003 0005     ....,...........
    ba64:	0000 0000 0010 0000 0002 0000 001c 0000     ................
    ba74:	00ff 0200 0200 0000 0000 0000 0011 0000     ................
    ba84:	0002 0000 0004 0000 00ff ffff ffff 0001     ................
    ba94:	0000 0000 0013 0000 0002 0000 001c 0000     ................
    baa4:	00ff 0301 0301 00ff 0000 0000 0008 0000     ................
    bab4:	0003 0000 0004 0000 0010 ffff ffff 0010     ................
    bac4:	0000 0000 0009 0000 0003 0000 0004 0000     ................
    bad4:	0011 ffff ffff 00ff 0001 0000 0017 0000     ................
    bae4:	0003 0000 0004 0000 00ff ffff ffff 00ff     ................
    baf4:	0001 0000 0016 0000 0003 0000 0004 0000     ................
    bb04:	00ff ffff ffff 00ff 0000 0000 0002 0000     ................
    bb14:	0001 0000 0006 0000 0000 ffff ffff 00ff     ................
    bb24:	0001 0000 0002 0000 0001 0000 0004 0000     ................
    bb34:	000a ffff ffff 0002 0001 0000 0003 0000     ................
    bb44:	0001 0000 0004 0000 000b ffff ffff 0003     ................
    bb54:	0000 0000 0004 0000 0001 0000 001c 0000     ................
    bb64:	0004 0000 0000 00ff 0000 0000 0005 0000     ................
    bb74:	0001 0000 001c 0000 0005 0001 0001 00ff     ................
    bb84:	0000 0000 0006 0000 0001 0000 0004 0000     ................
    bb94:	0006 ffff ffff 00ff 0000 0000 0007 0000     ................
    bba4:	0001 0000 0004 0000 0007 ffff ffff 00ff     ................
    bbb4:	0000 0000 0018 0000 0006 0000 0000 0000     ................
    bbc4:	00ff ffff ffff 00ff 0000 0000 0019 0000     ................
    bbd4:	0006 0000 0000 0000 00ff ffff ffff 00ff     ................
    bbe4:	0000 0000 0012 0000 0008 0000 0004 0000     ................
    bbf4:	00ff ffff ffff 00ff 0000 0000 0003 0000     ................
    bc04:	0008 0000 0004 0000 00ff ffff ffff 00ff     ................
    bc14:	0000 0000 000c 0000 0003 0000 0000 0000     ................
    bc24:	00ff ffff ffff 00ff 0000 0000 000d 0000     ................
    bc34:	0003 0000 0000 0000 00ff ffff ffff 00ff     ................
    bc44:	0000 0000 000e 0000 0008 0000 0000 0000     ................
    bc54:	00ff ffff ffff 00ff 0000 0000 000f 0000     ................
    bc64:	0003 0000 0000 0000 00ff ffff ffff 00ff     ................
    bc74:	0000 0000 001b 0000 0008 0000 0000 0000     ................
    bc84:	00ff ffff ffff 000f 0001 0000 0008 0000     ................
    bc94:	0008 0000 0006 0000 0002 ffff ffff 00ff     ................
    bca4:	0001 0000 0009 0000 0001 0000 0018 0000     ................
    bcb4:	0003 0401 0401 0009 0000 0000 0000 0000     ................
    bcc4:	0008 0000 0000 0000 00ff ffff ffff 00ff     ................
    bcd4:	0000 0000 0001 0000 0008 0000 0000 0000     ................
    bce4:	00ff ffff ffff 00ff 0000 0000 001c 0000     ................
    bcf4:	0008 0000 0004 0000 00ff ffff ffff 00ff     ................

0000bd04 <_ZTV4Uart>:
	...
    bd0c:	713d 0000 5319 0000 7063 0000 701f 0000     =q...S..cp...p..
    bd1c:	7039 0000 71f1 0000 6d79 0000 6d69 0000     9p...q..ym..im..
    bd2c:	6dfd 0000 6d93 0000 6d65 0000 7e8c 0000     .m...m..em...~..
    bd3c:	7e6e 0000 7e28 0000 7d46 0000 7e28 0000     n~..(~..F}..(~..
    bd4c:	7e60 0000 7e28 0000 7d46 0000 7e6e 0000     `~..(~..F}..n~..
    bd5c:	7e6e 0000 7e60 0000 7d46 0000 7d3e 0000     n~..`~..F}..>}..
    bd6c:	7d3e 0000 7d3e 0000 80a4 0000 86ec 0000     >}..>}..........
    bd7c:	85ac 0000 85ac 0000 85a8 0000 86c4 0000     ................
    bd8c:	86c4 0000 86b6 0000 85a8 0000 86c4 0000     ................
    bd9c:	86b6 0000 86c4 0000 85a8 0000 86cc 0000     ................
    bdac:	86cc 0000 86cc 0000 88d0 0000 0043 4f50     ............C.PO
    bdbc:	4953 0058 002e 4e49 0046 6e69 0066 414e     SIX...INF.inf.NA
    bdcc:	004e 616e 006e 3130 3332 3534 3736 3938     N.nan.0123456789
    bddc:	4241 4443 4645 3000 3231 3433 3635 3837     ABCDEF.012345678
    bdec:	6139 6362 6564 0066                         9abcdef.

0000bdf4 <_ctype_>:
    bdf4:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
    be04:	2020 2020 2020 2020 2020 2020 2020 2020                     
    be14:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
    be24:	0410 0404 0404 0404 0404 1004 1010 1010     ................
    be34:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
    be44:	0101 0101 0101 0101 0101 0101 1010 1010     ................
    be54:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
    be64:	0202 0202 0202 0202 0202 0202 1010 1010     ................
    be74:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...
    bef4:	4900 666e 6e69 7469 0079 614e 004e 0000     .Infinity.NaN...
    bf04:	0000 0000                                   ....

0000bf08 <__mprec_bigtens>:
    bf08:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
    bf18:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
    bf28:	bf3c 7f73 4fdd 7515                         <.s..O.u

0000bf30 <__mprec_tens>:
    bf30:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
    bf40:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
    bf50:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
    bf60:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
    bf70:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
    bf80:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
    bf90:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
    bfa0:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
    bfb0:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
    bfc0:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
    bfd0:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
    bfe0:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
    bff0:	9db4 79d9 7843 44ea                         ...yCx.D

0000bff8 <p05.6047>:
    bff8:	0005 0000 0019 0000 007d 0000 2d23 2b30     ........}...#-0+
    c008:	0020 6c68 004c 6665 4567 4746 0000 0000      .hlL.efgEFG....

0000c018 <__EH_FRAME_BEGIN__>:
    c018:	0000 0000                                   ....
