
ZButtonLED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00009a84  00002000  00002000  00002000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000290  20000000  0000ba84  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000db8  20000290  0000bd14  00010290  2**2
                  ALLOC
  3 .ARM.attributes 00000028  00000000  00000000  00010290  2**0
                  CONTENTS, READONLY
  4 .comment      00000059  00000000  00000000  000102b8  2**0
                  CONTENTS, READONLY
  5 .debug_info   0009ddb7  00000000  00000000  00010311  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000c502  00000000  00000000  000ae0c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_loc    00013cac  00000000  00000000  000ba5ca  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_aranges 00001698  00000000  00000000  000ce276  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 000027f8  00000000  00000000  000cf90e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_macro  00021712  00000000  00000000  000d2106  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   000190b1  00000000  00000000  000f3818  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    0008a87e  00000000  00000000  0010c8c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  000047b8  00000000  00000000  00197148  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00002000 <exception_table>:
    2000:	00 80 00 20 11 4d 00 00 f9 4c 00 00 f9 4c 00 00     ... .M...L...L..
	...
    202c:	f9 4c 00 00 00 00 00 00 00 00 00 00 f9 4c 00 00     .L...........L..
    203c:	65 4d 00 00 f9 4c 00 00 f9 4c 00 00 f9 4c 00 00     eM...L...L...L..
    204c:	f9 4c 00 00 f9 4c 00 00 f9 4c 00 00 f9 4c 00 00     .L...L...L...L..
    205c:	fd 4c 00 00 f9 4c 00 00 f9 4c 00 00 f9 4c 00 00     .L...L...L...L..
    206c:	f9 4c 00 00 f9 4c 00 00 dd 65 00 00 cd 65 00 00     .L...L...e...e..
    207c:	f9 4c 00 00 f9 4c 00 00 f9 4c 00 00 f9 4c 00 00     .L...L...L...L..
    208c:	f9 4c 00 00 00 00 00 00 f9 4c 00 00 f9 4c 00 00     .L.......L...L..
    209c:	f9 4c 00 00 f9 4c 00 00 f9 4c 00 00 f9 4c 00 00     .L...L...L...L..
    20ac:	f9 4c 00 00 00 00 00 00                             .L......

000020b4 <__do_global_dtors_aux>:
    20b4:	b510      	push	{r4, lr}
    20b6:	4c06      	ldr	r4, [pc, #24]	; (20d0 <__do_global_dtors_aux+0x1c>)
    20b8:	7823      	ldrb	r3, [r4, #0]
    20ba:	2b00      	cmp	r3, #0
    20bc:	d107      	bne.n	20ce <__do_global_dtors_aux+0x1a>
    20be:	4b05      	ldr	r3, [pc, #20]	; (20d4 <__do_global_dtors_aux+0x20>)
    20c0:	2b00      	cmp	r3, #0
    20c2:	d002      	beq.n	20ca <__do_global_dtors_aux+0x16>
    20c4:	4804      	ldr	r0, [pc, #16]	; (20d8 <__do_global_dtors_aux+0x24>)
    20c6:	e000      	b.n	20ca <__do_global_dtors_aux+0x16>
    20c8:	bf00      	nop
    20ca:	2301      	movs	r3, #1
    20cc:	7023      	strb	r3, [r4, #0]
    20ce:	bd10      	pop	{r4, pc}
    20d0:	20000290 	.word	0x20000290
    20d4:	00000000 	.word	0x00000000
    20d8:	0000ba80 	.word	0x0000ba80

000020dc <frame_dummy>:
    20dc:	4b08      	ldr	r3, [pc, #32]	; (2100 <frame_dummy+0x24>)
    20de:	b510      	push	{r4, lr}
    20e0:	2b00      	cmp	r3, #0
    20e2:	d003      	beq.n	20ec <frame_dummy+0x10>
    20e4:	4907      	ldr	r1, [pc, #28]	; (2104 <frame_dummy+0x28>)
    20e6:	4808      	ldr	r0, [pc, #32]	; (2108 <frame_dummy+0x2c>)
    20e8:	e000      	b.n	20ec <frame_dummy+0x10>
    20ea:	bf00      	nop
    20ec:	4807      	ldr	r0, [pc, #28]	; (210c <frame_dummy+0x30>)
    20ee:	6803      	ldr	r3, [r0, #0]
    20f0:	2b00      	cmp	r3, #0
    20f2:	d100      	bne.n	20f6 <frame_dummy+0x1a>
    20f4:	bd10      	pop	{r4, pc}
    20f6:	4b06      	ldr	r3, [pc, #24]	; (2110 <frame_dummy+0x34>)
    20f8:	2b00      	cmp	r3, #0
    20fa:	d0fb      	beq.n	20f4 <frame_dummy+0x18>
    20fc:	4798      	blx	r3
    20fe:	e7f9      	b.n	20f4 <frame_dummy+0x18>
    2100:	00000000 	.word	0x00000000
    2104:	20000294 	.word	0x20000294
    2108:	0000ba80 	.word	0x0000ba80
    210c:	2000028c 	.word	0x2000028c
    2110:	00000000 	.word	0x00000000

00002114 <_ZN12BLEAttributeD1Ev>:
{
}

BLEAttribute::~BLEAttribute()
{
}
    2114:	4770      	bx	lr

00002116 <_ZNK12BLEAttribute4typeEv>:
}

enum BLEAttributeType BLEAttribute::type() const
{
  return BLETypeUnknown;
}
    2116:	2000      	movs	r0, #0
    2118:	4770      	bx	lr

0000211a <_ZN12BLEAttributeD0Ev>:
BLEAttribute::~BLEAttribute()
    211a:	b510      	push	{r4, lr}
    211c:	0004      	movs	r4, r0
}
    211e:	f002 feaf 	bl	4e80 <_ZdlPv>
    2122:	0020      	movs	r0, r4
    2124:	bd10      	pop	{r4, pc}
	...

00002128 <_ZN12BLEAttributeC1EPKc>:
  _refCount(0)
    2128:	4b05      	ldr	r3, [pc, #20]	; (2140 <_ZN12BLEAttributeC1EPKc+0x18>)
BLEAttribute::BLEAttribute(const char* uuid) :
    212a:	b510      	push	{r4, lr}
  _refCount(0)
    212c:	3308      	adds	r3, #8
BLEAttribute::BLEAttribute(const char* uuid) :
    212e:	0004      	movs	r4, r0
  _refCount(0)
    2130:	c008      	stmia	r0!, {r3}
    2132:	f000 f9e9 	bl	2508 <_ZN7BLEUuidC1EPKc>
    2136:	2300      	movs	r3, #0
}
    2138:	0020      	movs	r0, r4
  _refCount(0)
    213a:	61e3      	str	r3, [r4, #28]
}
    213c:	bd10      	pop	{r4, pc}
    213e:	46c0      	nop			; (mov r8, r8)
    2140:	0000b0b8 	.word	0x0000b0b8

00002144 <_ZNK12BLEAttribute4uuidEv>:
{
    2144:	b510      	push	{r4, lr}
  return _uuid.str();
    2146:	3004      	adds	r0, #4
    2148:	f000 fa18 	bl	257c <_ZNK7BLEUuid3strEv>
}
    214c:	bd10      	pop	{r4, pc}

0000214e <_ZNK12BLEAttribute8uuidDataEv>:
{
    214e:	b510      	push	{r4, lr}
  return _uuid.data();
    2150:	3004      	adds	r0, #4
    2152:	f000 fa15 	bl	2580 <_ZNK7BLEUuid4dataEv>
}
    2156:	bd10      	pop	{r4, pc}

00002158 <_ZNK12BLEAttribute10uuidLengthEv>:
{
    2158:	b510      	push	{r4, lr}
  return _uuid.length();
    215a:	3004      	adds	r0, #4
    215c:	f000 fa12 	bl	2584 <_ZNK7BLEUuid6lengthEv>
}
    2160:	bd10      	pop	{r4, pc}

00002162 <_ZN12BLEAttribute6retainEv>:

int BLEAttribute::retain()
{
  _refCount++;
    2162:	69c3      	ldr	r3, [r0, #28]
    2164:	3301      	adds	r3, #1
    2166:	61c3      	str	r3, [r0, #28]

  return _refCount;
}
    2168:	0018      	movs	r0, r3
    216a:	4770      	bx	lr

0000216c <_ZN12BLEAttribute7releaseEv>:

int BLEAttribute::release()
{
  _refCount--;
    216c:	69c3      	ldr	r3, [r0, #28]
    216e:	3b01      	subs	r3, #1
    2170:	61c3      	str	r3, [r0, #28]

  return _refCount;
}
    2172:	0018      	movs	r0, r3
    2174:	4770      	bx	lr
	...

00002178 <_ZN17BLECharacteristicD1Ev>:
BLECharacteristic::BLECharacteristic(const char* uuid, uint8_t properties, const char* value) :
  BLECharacteristic(new BLELocalCharacteristic(uuid, properties, value))
{
}

BLECharacteristic::~BLECharacteristic()
    2178:	4b09      	ldr	r3, [pc, #36]	; (21a0 <_ZN17BLECharacteristicD1Ev+0x28>)
    217a:	b510      	push	{r4, lr}
    217c:	3308      	adds	r3, #8
    217e:	0004      	movs	r4, r0
    2180:	6003      	str	r3, [r0, #0]
{
  if (_local && _local->release() <= 0) {
    2182:	6840      	ldr	r0, [r0, #4]
    2184:	2800      	cmp	r0, #0
    2186:	d009      	beq.n	219c <_ZN17BLECharacteristicD1Ev+0x24>
    2188:	f7ff fff0 	bl	216c <_ZN12BLEAttribute7releaseEv>
    218c:	2800      	cmp	r0, #0
    218e:	dc05      	bgt.n	219c <_ZN17BLECharacteristicD1Ev+0x24>
    delete _local;
    2190:	6860      	ldr	r0, [r4, #4]
    2192:	2800      	cmp	r0, #0
    2194:	d002      	beq.n	219c <_ZN17BLECharacteristicD1Ev+0x24>
    2196:	6803      	ldr	r3, [r0, #0]
    2198:	685b      	ldr	r3, [r3, #4]
    219a:	4798      	blx	r3
  }
}
    219c:	0020      	movs	r0, r4
    219e:	bd10      	pop	{r4, pc}
    21a0:	0000b0cc 	.word	0x0000b0cc

000021a4 <_ZN17BLECharacteristicD0Ev>:
BLECharacteristic::~BLECharacteristic()
    21a4:	b510      	push	{r4, lr}
    21a6:	0004      	movs	r4, r0
}
    21a8:	f7ff ffe6 	bl	2178 <_ZN17BLECharacteristicD1Ev>
    21ac:	0020      	movs	r0, r4
    21ae:	f002 fe67 	bl	4e80 <_ZdlPv>
    21b2:	0020      	movs	r0, r4
    21b4:	bd10      	pop	{r4, pc}
	...

000021b8 <_ZN17BLECharacteristicC1EP22BLELocalCharacteristic>:
  _local(local)
    21b8:	4b06      	ldr	r3, [pc, #24]	; (21d4 <_ZN17BLECharacteristicC1EP22BLELocalCharacteristic+0x1c>)
BLECharacteristic::BLECharacteristic(BLELocalCharacteristic* local) :
    21ba:	b510      	push	{r4, lr}
  _local(local)
    21bc:	3308      	adds	r3, #8
BLECharacteristic::BLECharacteristic(BLELocalCharacteristic* local) :
    21be:	0004      	movs	r4, r0
  _local(local)
    21c0:	6003      	str	r3, [r0, #0]
    21c2:	6041      	str	r1, [r0, #4]
  if (_local) {
    21c4:	2900      	cmp	r1, #0
    21c6:	d002      	beq.n	21ce <_ZN17BLECharacteristicC1EP22BLELocalCharacteristic+0x16>
    _local->retain();
    21c8:	0008      	movs	r0, r1
    21ca:	f7ff ffca 	bl	2162 <_ZN12BLEAttribute6retainEv>
}
    21ce:	0020      	movs	r0, r4
    21d0:	bd10      	pop	{r4, pc}
    21d2:	46c0      	nop			; (mov r8, r8)
    21d4:	0000b0cc 	.word	0x0000b0cc

000021d8 <_ZN17BLECharacteristicC1EPKchib>:
BLECharacteristic::BLECharacteristic(const char* uuid, uint8_t properties, int valueSize, bool fixedLength) :
    21d8:	b5f0      	push	{r4, r5, r6, r7, lr}
    21da:	b085      	sub	sp, #20
    21dc:	0004      	movs	r4, r0
    21de:	001e      	movs	r6, r3
  BLECharacteristic(new BLELocalCharacteristic(uuid, properties, valueSize, fixedLength))
    21e0:	2054      	movs	r0, #84	; 0x54
BLECharacteristic::BLECharacteristic(const char* uuid, uint8_t properties, int valueSize, bool fixedLength) :
    21e2:	ab0a      	add	r3, sp, #40	; 0x28
    21e4:	781f      	ldrb	r7, [r3, #0]
    21e6:	9102      	str	r1, [sp, #8]
    21e8:	9203      	str	r2, [sp, #12]
  BLECharacteristic(new BLELocalCharacteristic(uuid, properties, valueSize, fixedLength))
    21ea:	f002 fe45 	bl	4e78 <_Znwj>
    21ee:	0005      	movs	r5, r0
    21f0:	0033      	movs	r3, r6
    21f2:	9a03      	ldr	r2, [sp, #12]
    21f4:	9902      	ldr	r1, [sp, #8]
    21f6:	9700      	str	r7, [sp, #0]
    21f8:	f000 fa6e 	bl	26d8 <_ZN22BLELocalCharacteristicC1EPKchib>
    21fc:	0029      	movs	r1, r5
    21fe:	0020      	movs	r0, r4
    2200:	f7ff ffda 	bl	21b8 <_ZN17BLECharacteristicC1EP22BLELocalCharacteristic>
}
    2204:	0020      	movs	r0, r4
    2206:	b005      	add	sp, #20
    2208:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000220a <_ZNK17BLECharacteristic9valueSizeEv>:
  return 0;
}

int BLECharacteristic::valueSize() const
{
  if (_local) {
    220a:	6843      	ldr	r3, [r0, #4]
{
    220c:	b510      	push	{r4, lr}
    return _local->valueSize();
  }

  return 0;
    220e:	1e18      	subs	r0, r3, #0
  if (_local) {
    2210:	d001      	beq.n	2216 <_ZNK17BLECharacteristic9valueSizeEv+0xc>
    return _local->valueSize();
    2212:	f000 f9c0 	bl	2596 <_ZNK22BLELocalCharacteristic9valueSizeEv>
}
    2216:	bd10      	pop	{r4, pc}

00002218 <_ZNK17BLECharacteristic5valueEv>:

const uint8_t* BLECharacteristic::value() const
{
  if (_local) {
    2218:	6843      	ldr	r3, [r0, #4]
{
    221a:	b510      	push	{r4, lr}
    return _local->value();
  }

  return NULL;
    221c:	1e18      	subs	r0, r3, #0
  if (_local) {
    221e:	d001      	beq.n	2224 <_ZNK17BLECharacteristic5valueEv+0xc>
    return _local->value();
    2220:	f000 f9bb 	bl	259a <_ZNK22BLELocalCharacteristic5valueEv>
}
    2224:	bd10      	pop	{r4, pc}

00002226 <_ZN17BLECharacteristic10writeValueEPKhi>:
  return 0;
}

int BLECharacteristic::writeValue(const uint8_t value[], int length)
{
  if (_local) {
    2226:	6843      	ldr	r3, [r0, #4]
{
    2228:	b510      	push	{r4, lr}
    return _local->writeValue(value, length);
  }

  return 0;
    222a:	1e18      	subs	r0, r3, #0
  if (_local) {
    222c:	d001      	beq.n	2232 <_ZN17BLECharacteristic10writeValueEPKhi+0xc>
    return _local->writeValue(value, length);
    222e:	f000 f9b9 	bl	25a4 <_ZN22BLELocalCharacteristic10writeValueEPKhi>
}
    2232:	bd10      	pop	{r4, pc}

00002234 <_ZN17BLECharacteristic7writtenEv>:
  return 0;
}

bool BLECharacteristic::written()
{
  if (_local) {
    2234:	6843      	ldr	r3, [r0, #4]
{
    2236:	b510      	push	{r4, lr}
    return _local->written();
  }

  return false;
    2238:	1e18      	subs	r0, r3, #0
  if (_local) {
    223a:	d001      	beq.n	2240 <_ZN17BLECharacteristic7writtenEv+0xc>
    return _local->written();
    223c:	f000 fa18 	bl	2670 <_ZN22BLELocalCharacteristic7writtenEv>
}
    2240:	bd10      	pop	{r4, pc}

00002242 <_ZN17BLECharacteristic5localEv>:
  return (_local != NULL);
}

BLELocalCharacteristic* BLECharacteristic::local()
{
  return _local;
    2242:	6840      	ldr	r0, [r0, #4]
}
    2244:	4770      	bx	lr

00002246 <_ZN9BLEDeviceD1Ev>:
  memcpy(_address, address, sizeof(_address));
}

BLEDevice::~BLEDevice()
{
}
    2246:	4770      	bx	lr

00002248 <_ZN9BLEDeviceD0Ev>:
BLEDevice::~BLEDevice()
    2248:	b510      	push	{r4, lr}
    224a:	0004      	movs	r4, r0
}
    224c:	f002 fe18 	bl	4e80 <_ZdlPv>
    2250:	0020      	movs	r0, r4
    2252:	bd10      	pop	{r4, pc}

00002254 <_ZN9BLEDevice4pollEv>:

void BLEDevice::poll()
{
    2254:	b510      	push	{r4, lr}
  HCI.poll();
    2256:	4802      	ldr	r0, [pc, #8]	; (2260 <_ZN9BLEDevice4pollEv+0xc>)
    2258:	f002 f940 	bl	44dc <_ZN8HCIClass4pollEv>
}
    225c:	bd10      	pop	{r4, pc}
    225e:	46c0      	nop			; (mov r8, r8)
    2260:	20000470 	.word	0x20000470

00002264 <_ZN9BLEDevice4pollEm>:

void BLEDevice::poll(unsigned long timeout)
{
    2264:	b510      	push	{r4, lr}
  HCI.poll(timeout);
    2266:	4802      	ldr	r0, [pc, #8]	; (2270 <_ZN9BLEDevice4pollEm+0xc>)
    2268:	f002 f8d0 	bl	440c <_ZN8HCIClass4pollEm>
}
    226c:	bd10      	pop	{r4, pc}
    226e:	46c0      	nop			; (mov r8, r8)
    2270:	20000470 	.word	0x20000470

00002274 <_ZN9BLEDevice10disconnectEv>:

  return ATT.connected(_handle, _address);
}

bool BLEDevice::disconnect()
{
    2274:	b510      	push	{r4, lr}
  if (_handle != 0xffff) {
    2276:	4b06      	ldr	r3, [pc, #24]	; (2290 <_ZN9BLEDevice10disconnectEv+0x1c>)
    2278:	8881      	ldrh	r1, [r0, #4]
    return HCI.disconnect(_handle);
  }

  return false;
    227a:	2000      	movs	r0, #0
  if (_handle != 0xffff) {
    227c:	4299      	cmp	r1, r3
    227e:	d005      	beq.n	228c <_ZN9BLEDevice10disconnectEv+0x18>
    return HCI.disconnect(_handle);
    2280:	4804      	ldr	r0, [pc, #16]	; (2294 <_ZN9BLEDevice10disconnectEv+0x20>)
    2282:	f002 fb11 	bl	48a8 <_ZN8HCIClass10disconnectEt>
    2286:	1e43      	subs	r3, r0, #1
    2288:	4198      	sbcs	r0, r3
    228a:	b2c0      	uxtb	r0, r0
}
    228c:	bd10      	pop	{r4, pc}
    228e:	46c0      	nop			; (mov r8, r8)
    2290:	0000ffff 	.word	0x0000ffff
    2294:	20000470 	.word	0x20000470

00002298 <_ZNK9BLEDevice7addressEv>:

String BLEDevice::address() const
{
    2298:	b510      	push	{r4, lr}
    229a:	0004      	movs	r4, r0
  char result[18];
  sprintf(result, "%02x:%02x:%02x:%02x:%02x:%02x", _address[5], _address[4], _address[3], _address[2], _address[1], _address[0]);
    229c:	7988      	ldrb	r0, [r1, #6]
{
    229e:	b08a      	sub	sp, #40	; 0x28
  sprintf(result, "%02x:%02x:%02x:%02x:%02x:%02x", _address[5], _address[4], _address[3], _address[2], _address[1], _address[0]);
    22a0:	7a8b      	ldrb	r3, [r1, #10]
    22a2:	7aca      	ldrb	r2, [r1, #11]
    22a4:	9003      	str	r0, [sp, #12]
    22a6:	79c8      	ldrb	r0, [r1, #7]
    22a8:	9002      	str	r0, [sp, #8]
    22aa:	7a08      	ldrb	r0, [r1, #8]
    22ac:	9001      	str	r0, [sp, #4]
    22ae:	7a49      	ldrb	r1, [r1, #9]
    22b0:	a805      	add	r0, sp, #20
    22b2:	9100      	str	r1, [sp, #0]
    22b4:	4904      	ldr	r1, [pc, #16]	; (22c8 <_ZNK9BLEDevice7addressEv+0x30>)
    22b6:	f007 fac1 	bl	983c <siprintf>

  return result;
    22ba:	a905      	add	r1, sp, #20
    22bc:	0020      	movs	r0, r4
    22be:	f004 f960 	bl	6582 <_ZN6StringC1EPKc>
}
    22c2:	0020      	movs	r0, r4
    22c4:	b00a      	add	sp, #40	; 0x28
    22c6:	bd10      	pop	{r4, pc}
    22c8:	0000b0dc 	.word	0x0000b0dc

000022cc <_ZN9BLEDevice4rssiEv>:

int BLEDevice::rssi()
{
    22cc:	b510      	push	{r4, lr}
  if (_handle != 0xffff) {
    22ce:	4b04      	ldr	r3, [pc, #16]	; (22e0 <_ZN9BLEDevice4rssiEv+0x14>)
    22d0:	8881      	ldrh	r1, [r0, #4]
    return HCI.readRssi(_handle);
  }

  return 127;
    22d2:	207f      	movs	r0, #127	; 0x7f
  if (_handle != 0xffff) {
    22d4:	4299      	cmp	r1, r3
    22d6:	d002      	beq.n	22de <_ZN9BLEDevice4rssiEv+0x12>
    return HCI.readRssi(_handle);
    22d8:	4802      	ldr	r0, [pc, #8]	; (22e4 <_ZN9BLEDevice4rssiEv+0x18>)
    22da:	f002 f997 	bl	460c <_ZN8HCIClass8readRssiEt>
}
    22de:	bd10      	pop	{r4, pc}
    22e0:	0000ffff 	.word	0x0000ffff
    22e4:	20000470 	.word	0x20000470

000022e8 <_ZNK9BLEDevicecvbEv>:

BLEDevice::operator bool() const
{
    22e8:	b513      	push	{r0, r1, r4, lr}
    22ea:	0004      	movs	r4, r0
  uint8_t zeros[6] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,};
    22ec:	2206      	movs	r2, #6
    22ee:	2100      	movs	r1, #0
    22f0:	4668      	mov	r0, sp
    22f2:	f006 fd67 	bl	8dc4 <memset>

  return ((_handle != 0xffff) && memcmp(_address, zeros, sizeof(zeros)) != 0);
    22f6:	88a2      	ldrh	r2, [r4, #4]
    22f8:	4b06      	ldr	r3, [pc, #24]	; (2314 <_ZNK9BLEDevicecvbEv+0x2c>)
    22fa:	2000      	movs	r0, #0
    22fc:	429a      	cmp	r2, r3
    22fe:	d007      	beq.n	2310 <_ZNK9BLEDevicecvbEv+0x28>
    2300:	1da0      	adds	r0, r4, #6
    2302:	2206      	movs	r2, #6
    2304:	4669      	mov	r1, sp
    2306:	f006 fd33 	bl	8d70 <memcmp>
    230a:	1e43      	subs	r3, r0, #1
    230c:	4198      	sbcs	r0, r3
    230e:	b2c0      	uxtb	r0, r0
}
    2310:	bd16      	pop	{r1, r2, r4, pc}
    2312:	46c0      	nop			; (mov r8, r8)
    2314:	0000ffff 	.word	0x0000ffff

00002318 <_ZNK9BLEDeviceeqERKS_>:

bool BLEDevice::operator==(const BLEDevice& rhs) const
{
    2318:	b510      	push	{r4, lr}
  return ((_handle == rhs._handle) && memcmp(_address, rhs._address, sizeof(_address)) == 0);
    231a:	8884      	ldrh	r4, [r0, #4]
    231c:	888a      	ldrh	r2, [r1, #4]
    231e:	2300      	movs	r3, #0
    2320:	4294      	cmp	r4, r2
    2322:	d107      	bne.n	2334 <_ZNK9BLEDeviceeqERKS_+0x1c>
    2324:	3106      	adds	r1, #6
    2326:	3006      	adds	r0, #6
    2328:	2206      	movs	r2, #6
    232a:	f006 fd21 	bl	8d70 <memcmp>
    232e:	4243      	negs	r3, r0
    2330:	4143      	adcs	r3, r0
    2332:	b2db      	uxtb	r3, r3
}
    2334:	0018      	movs	r0, r3
    2336:	bd10      	pop	{r4, pc}

00002338 <_ZNK9BLEDevice9connectedEv>:
{
    2338:	b510      	push	{r4, lr}
    233a:	0004      	movs	r4, r0
  HCI.poll();
    233c:	4807      	ldr	r0, [pc, #28]	; (235c <_ZNK9BLEDevice9connectedEv+0x24>)
    233e:	f002 f8cd 	bl	44dc <_ZN8HCIClass4pollEv>
  if (!(*this)) {
    2342:	6823      	ldr	r3, [r4, #0]
    2344:	0020      	movs	r0, r4
    2346:	6a1b      	ldr	r3, [r3, #32]
    2348:	4798      	blx	r3
    234a:	2800      	cmp	r0, #0
    234c:	d004      	beq.n	2358 <_ZNK9BLEDevice9connectedEv+0x20>
  return ATT.connected(_handle, _address);
    234e:	1da2      	adds	r2, r4, #6
    2350:	88a1      	ldrh	r1, [r4, #4]
    2352:	4803      	ldr	r0, [pc, #12]	; (2360 <_ZNK9BLEDevice9connectedEv+0x28>)
    2354:	f000 fdac 	bl	2eb0 <_ZNK8ATTClass9connectedEtPKh>
}
    2358:	bd10      	pop	{r4, pc}
    235a:	46c0      	nop			; (mov r8, r8)
    235c:	20000470 	.word	0x20000470
    2360:	200002b8 	.word	0x200002b8

00002364 <_ZNK9BLEDeviceneERKS_>:

bool BLEDevice::operator!=(const BLEDevice& rhs) const
{
    2364:	b510      	push	{r4, lr}
  return ((_handle != rhs._handle) || memcmp(_address, rhs._address, sizeof(_address)) != 0);
    2366:	8884      	ldrh	r4, [r0, #4]
    2368:	888a      	ldrh	r2, [r1, #4]
    236a:	2301      	movs	r3, #1
    236c:	4294      	cmp	r4, r2
    236e:	d107      	bne.n	2380 <_ZNK9BLEDeviceneERKS_+0x1c>
    2370:	3106      	adds	r1, #6
    2372:	3006      	adds	r0, #6
    2374:	2206      	movs	r2, #6
    2376:	f006 fcfb 	bl	8d70 <memcmp>
    237a:	1e43      	subs	r3, r0, #1
    237c:	4198      	sbcs	r0, r3
    237e:	b2c3      	uxtb	r3, r0
}
    2380:	0018      	movs	r0, r3
    2382:	bd10      	pop	{r4, pc}

00002384 <_ZN9BLEDeviceC1Ev>:
  _handle(0xffff)
    2384:	4b07      	ldr	r3, [pc, #28]	; (23a4 <_ZN9BLEDeviceC1Ev+0x20>)
BLEDevice::BLEDevice() :
    2386:	b510      	push	{r4, lr}
  _handle(0xffff)
    2388:	3308      	adds	r3, #8
    238a:	6003      	str	r3, [r0, #0]
    238c:	2301      	movs	r3, #1
BLEDevice::BLEDevice() :
    238e:	0004      	movs	r4, r0
  _handle(0xffff)
    2390:	425b      	negs	r3, r3
    2392:	8083      	strh	r3, [r0, #4]
  memset(_address, 0x00, sizeof(_address));
    2394:	2206      	movs	r2, #6
    2396:	2100      	movs	r1, #0
    2398:	3006      	adds	r0, #6
    239a:	f006 fd13 	bl	8dc4 <memset>
}
    239e:	0020      	movs	r0, r4
    23a0:	bd10      	pop	{r4, pc}
    23a2:	46c0      	nop			; (mov r8, r8)
    23a4:	0000b0fc 	.word	0x0000b0fc

000023a8 <_ZN9BLEDeviceC1EtPh>:
BLEDevice::BLEDevice(uint16_t handle, uint8_t address[6]) :
    23a8:	b510      	push	{r4, lr}
    23aa:	0004      	movs	r4, r0
    23ac:	0008      	movs	r0, r1
  _handle(handle)
    23ae:	4b05      	ldr	r3, [pc, #20]	; (23c4 <_ZN9BLEDeviceC1EtPh+0x1c>)
BLEDevice::BLEDevice(uint16_t handle, uint8_t address[6]) :
    23b0:	0011      	movs	r1, r2
  _handle(handle)
    23b2:	3308      	adds	r3, #8
    23b4:	80a0      	strh	r0, [r4, #4]
    23b6:	6023      	str	r3, [r4, #0]
  memcpy(_address, address, sizeof(_address));
    23b8:	1da0      	adds	r0, r4, #6
    23ba:	2206      	movs	r2, #6
    23bc:	f006 fce7 	bl	8d8e <memcpy>
}
    23c0:	0020      	movs	r0, r4
    23c2:	bd10      	pop	{r4, pc}
    23c4:	0000b0fc 	.word	0x0000b0fc

000023c8 <_ZN10BLEServiceD1Ev>:
BLEService::BLEService(const char* uuid) :
  BLEService(new BLELocalService(uuid))
{
}

BLEService::~BLEService()
    23c8:	4b09      	ldr	r3, [pc, #36]	; (23f0 <_ZN10BLEServiceD1Ev+0x28>)
    23ca:	b510      	push	{r4, lr}
    23cc:	3308      	adds	r3, #8
    23ce:	0004      	movs	r4, r0
    23d0:	6003      	str	r3, [r0, #0]
{
  if (_local && _local->release() <= 0) {
    23d2:	6840      	ldr	r0, [r0, #4]
    23d4:	2800      	cmp	r0, #0
    23d6:	d009      	beq.n	23ec <_ZN10BLEServiceD1Ev+0x24>
    23d8:	f7ff fec8 	bl	216c <_ZN12BLEAttribute7releaseEv>
    23dc:	2800      	cmp	r0, #0
    23de:	dc05      	bgt.n	23ec <_ZN10BLEServiceD1Ev+0x24>
    delete _local;
    23e0:	6860      	ldr	r0, [r4, #4]
    23e2:	2800      	cmp	r0, #0
    23e4:	d002      	beq.n	23ec <_ZN10BLEServiceD1Ev+0x24>
    23e6:	6803      	ldr	r3, [r0, #0]
    23e8:	685b      	ldr	r3, [r3, #4]
    23ea:	4798      	blx	r3
  }
}
    23ec:	0020      	movs	r0, r4
    23ee:	bd10      	pop	{r4, pc}
    23f0:	0000b130 	.word	0x0000b130

000023f4 <_ZN10BLEServiceD0Ev>:
BLEService::~BLEService()
    23f4:	b510      	push	{r4, lr}
    23f6:	0004      	movs	r4, r0
}
    23f8:	f7ff ffe6 	bl	23c8 <_ZN10BLEServiceD1Ev>
    23fc:	0020      	movs	r0, r4
    23fe:	f002 fd3f 	bl	4e80 <_ZdlPv>
    2402:	0020      	movs	r0, r4
    2404:	bd10      	pop	{r4, pc}
	...

00002408 <_ZN10BLEServiceC1EP15BLELocalService>:
  _local(local)
    2408:	4b06      	ldr	r3, [pc, #24]	; (2424 <_ZN10BLEServiceC1EP15BLELocalService+0x1c>)
BLEService::BLEService(BLELocalService* local) :
    240a:	b510      	push	{r4, lr}
  _local(local)
    240c:	3308      	adds	r3, #8
BLEService::BLEService(BLELocalService* local) :
    240e:	0004      	movs	r4, r0
  _local(local)
    2410:	6003      	str	r3, [r0, #0]
    2412:	6041      	str	r1, [r0, #4]
  if (_local) {
    2414:	2900      	cmp	r1, #0
    2416:	d002      	beq.n	241e <_ZN10BLEServiceC1EP15BLELocalService+0x16>
    _local->retain();
    2418:	0008      	movs	r0, r1
    241a:	f7ff fea2 	bl	2162 <_ZN12BLEAttribute6retainEv>
}
    241e:	0020      	movs	r0, r4
    2420:	bd10      	pop	{r4, pc}
    2422:	46c0      	nop			; (mov r8, r8)
    2424:	0000b130 	.word	0x0000b130

00002428 <_ZN10BLEServiceC1EPKc>:
BLEService::BLEService(const char* uuid) :
    2428:	b570      	push	{r4, r5, r6, lr}
    242a:	0004      	movs	r4, r0
  BLEService(new BLELocalService(uuid))
    242c:	2030      	movs	r0, #48	; 0x30
BLEService::BLEService(const char* uuid) :
    242e:	000e      	movs	r6, r1
  BLEService(new BLELocalService(uuid))
    2430:	f002 fd22 	bl	4e78 <_Znwj>
    2434:	0005      	movs	r5, r0
    2436:	0031      	movs	r1, r6
    2438:	f000 fbc2 	bl	2bc0 <_ZN15BLELocalServiceC1EPKc>
    243c:	0029      	movs	r1, r5
    243e:	0020      	movs	r0, r4
    2440:	f7ff ffe2 	bl	2408 <_ZN10BLEServiceC1EP15BLELocalService>
}
    2444:	0020      	movs	r0, r4
    2446:	bd70      	pop	{r4, r5, r6, pc}

00002448 <_ZNK10BLEService4uuidEv>:

const char* BLEService::uuid() const
{
  if (_local) {
    2448:	6843      	ldr	r3, [r0, #4]
{
    244a:	b510      	push	{r4, lr}
    return _local->uuid();
  }

  return "";
    244c:	4803      	ldr	r0, [pc, #12]	; (245c <_ZNK10BLEService4uuidEv+0x14>)
  if (_local) {
    244e:	2b00      	cmp	r3, #0
    2450:	d002      	beq.n	2458 <_ZNK10BLEService4uuidEv+0x10>
    return _local->uuid();
    2452:	0018      	movs	r0, r3
    2454:	f7ff fe76 	bl	2144 <_ZNK12BLEAttribute4uuidEv>
}
    2458:	bd10      	pop	{r4, pc}
    245a:	46c0      	nop			; (mov r8, r8)
    245c:	0000b39b 	.word	0x0000b39b

00002460 <_ZN10BLEService17addCharacteristicER17BLECharacteristic>:

void BLEService::addCharacteristic(BLECharacteristic& characteristic)
{
  if (_local) {
    2460:	6840      	ldr	r0, [r0, #4]
{
    2462:	b510      	push	{r4, lr}
  if (_local) {
    2464:	2800      	cmp	r0, #0
    2466:	d001      	beq.n	246c <_ZN10BLEService17addCharacteristicER17BLECharacteristic+0xc>
    _local->addCharacteristic(characteristic);
    2468:	f000 fbeb 	bl	2c42 <_ZN15BLELocalService17addCharacteristicER17BLECharacteristic>
  }
}
    246c:	bd10      	pop	{r4, pc}

0000246e <_ZN10BLEService5localEv>:

BLELocalService* BLEService::local()
{
  return _local;
    246e:	6840      	ldr	r0, [r0, #4]
}
    2470:	4770      	bx	lr
	...

00002474 <_ZN22BLETypedCharacteristicIhED1Ev>:
#ifndef _BLE_TYPED_CHARACTERISTIC_H_
#define _BLE_TYPED_CHARACTERISTIC_H_

#include "BLECharacteristic.h"

template<typename T> class BLETypedCharacteristic : public BLECharacteristic
    2474:	b510      	push	{r4, lr}
    2476:	0004      	movs	r4, r0
    2478:	4b02      	ldr	r3, [pc, #8]	; (2484 <_ZN22BLETypedCharacteristicIhED1Ev+0x10>)
    247a:	6003      	str	r3, [r0, #0]
    247c:	f7ff fe7c 	bl	2178 <_ZN17BLECharacteristicD1Ev>
    2480:	0020      	movs	r0, r4
    2482:	bd10      	pop	{r4, pc}
    2484:	0000b148 	.word	0x0000b148

00002488 <_ZN22BLETypedCharacteristicIhED0Ev>:
    2488:	b510      	push	{r4, lr}
    248a:	0004      	movs	r4, r0
    248c:	f7ff fff2 	bl	2474 <_ZN22BLETypedCharacteristicIhED1Ev>
    2490:	0020      	movs	r0, r4
    2492:	f002 fcf5 	bl	4e80 <_ZdlPv>
    2496:	0020      	movs	r0, r4
    2498:	bd10      	pop	{r4, pc}
	...

0000249c <_ZN21BLEByteCharacteristicD1Ev>:
class BLEUnsignedCharCharacteristic : public BLETypedCharacteristic<unsigned char> {
public:
  BLEUnsignedCharCharacteristic(const char* uuid, unsigned char properties);
};

class BLEByteCharacteristic : public BLETypedCharacteristic<byte> {
    249c:	b510      	push	{r4, lr}
    249e:	0004      	movs	r4, r0
    24a0:	4b02      	ldr	r3, [pc, #8]	; (24ac <_ZN21BLEByteCharacteristicD1Ev+0x10>)
    24a2:	6003      	str	r3, [r0, #0]
    24a4:	f7ff ffe6 	bl	2474 <_ZN22BLETypedCharacteristicIhED1Ev>
    24a8:	0020      	movs	r0, r4
    24aa:	bd10      	pop	{r4, pc}
    24ac:	0000b158 	.word	0x0000b158

000024b0 <_ZN21BLEByteCharacteristicD0Ev>:
    24b0:	b510      	push	{r4, lr}
    24b2:	0004      	movs	r4, r0
    24b4:	f7ff fff2 	bl	249c <_ZN21BLEByteCharacteristicD1Ev>
    24b8:	0020      	movs	r0, r4
    24ba:	f002 fce1 	bl	4e80 <_ZdlPv>
    24be:	0020      	movs	r0, r4
    24c0:	bd10      	pop	{r4, pc}
	...

000024c4 <_ZN22BLETypedCharacteristicIhEC1EPKch>:

private:
  T byteSwap(T value);
};

template<typename T> BLETypedCharacteristic<T>::BLETypedCharacteristic(const char* uuid, unsigned char properties) :
    24c4:	b530      	push	{r4, r5, lr}
  BLECharacteristic(uuid, properties, sizeof(T), true)
    24c6:	2501      	movs	r5, #1
template<typename T> BLETypedCharacteristic<T>::BLETypedCharacteristic(const char* uuid, unsigned char properties) :
    24c8:	0004      	movs	r4, r0
    24ca:	b085      	sub	sp, #20
  BLECharacteristic(uuid, properties, sizeof(T), true)
    24cc:	002b      	movs	r3, r5
    24ce:	9500      	str	r5, [sp, #0]
    24d0:	f7ff fe82 	bl	21d8 <_ZN17BLECharacteristicC1EPKchib>
    24d4:	4b06      	ldr	r3, [pc, #24]	; (24f0 <_ZN22BLETypedCharacteristicIhEC1EPKch+0x2c>)
    24d6:	210f      	movs	r1, #15
    24d8:	6023      	str	r3, [r4, #0]
    24da:	2300      	movs	r3, #0
    24dc:	4469      	add	r1, sp
  writeValue(value);
}

template<typename T> int BLETypedCharacteristic<T>::writeValue(T value)
{
  return BLECharacteristic::writeValue((uint8_t*)&value, sizeof(T));
    24de:	002a      	movs	r2, r5
    24e0:	0020      	movs	r0, r4
    24e2:	700b      	strb	r3, [r1, #0]
    24e4:	f7ff fe9f 	bl	2226 <_ZN17BLECharacteristic10writeValueEPKhi>
}
    24e8:	0020      	movs	r0, r4
    24ea:	b005      	add	sp, #20
    24ec:	bd30      	pop	{r4, r5, pc}
    24ee:	46c0      	nop			; (mov r8, r8)
    24f0:	0000b148 	.word	0x0000b148

000024f4 <_ZN21BLEByteCharacteristicC1EPKch>:
BLEUnsignedCharCharacteristic::BLEUnsignedCharCharacteristic(const char* uuid, unsigned char properties) :
  BLETypedCharacteristic<unsigned char>(uuid, properties)
{
}

BLEByteCharacteristic::BLEByteCharacteristic(const char* uuid, unsigned char properties) :
    24f4:	b510      	push	{r4, lr}
    24f6:	0004      	movs	r4, r0
  BLETypedCharacteristic<byte>(uuid, properties)
    24f8:	f7ff ffe4 	bl	24c4 <_ZN22BLETypedCharacteristicIhEC1EPKch>
    24fc:	4b01      	ldr	r3, [pc, #4]	; (2504 <_ZN21BLEByteCharacteristicC1EPKch+0x10>)
{
}
    24fe:	0020      	movs	r0, r4
  BLETypedCharacteristic<byte>(uuid, properties)
    2500:	6023      	str	r3, [r4, #0]
}
    2502:	bd10      	pop	{r4, pc}
    2504:	0000b158 	.word	0x0000b158

00002508 <_ZN7BLEUuidC1EPKc>:
#include <stdlib.h>
#include <string.h>

#include "BLEUuid.h"

BLEUuid::BLEUuid(const char * str) :
    2508:	b5f0      	push	{r4, r5, r6, r7, lr}
  _str(str)
{
  char temp[] = {0, 0, 0};
    250a:	2500      	movs	r5, #0
BLEUuid::BLEUuid(const char * str) :
    250c:	0004      	movs	r4, r0
    250e:	000f      	movs	r7, r1
    2510:	b085      	sub	sp, #20
  char temp[] = {0, 0, 0};
    2512:	ae03      	add	r6, sp, #12
  _str(str)
    2514:	c002      	stmia	r0!, {r1}

  memset(_data, 0x00, sizeof(_data));
    2516:	2210      	movs	r2, #16
    2518:	0029      	movs	r1, r5
  char temp[] = {0, 0, 0};
    251a:	7035      	strb	r5, [r6, #0]
    251c:	7075      	strb	r5, [r6, #1]
    251e:	70b5      	strb	r5, [r6, #2]
  memset(_data, 0x00, sizeof(_data));
    2520:	f006 fc50 	bl	8dc4 <memset>

  _length = 0;
    2524:	7525      	strb	r5, [r4, #20]
  for (int i = strlen(str) - 1; i >= 0 && _length < BLE_UUID_MAX_LENGTH; i -= 2) {
    2526:	0038      	movs	r0, r7
    2528:	f007 f9b2 	bl	9890 <strlen>
    252c:	1e45      	subs	r5, r0, #1
    252e:	7d23      	ldrb	r3, [r4, #20]
    2530:	9301      	str	r3, [sp, #4]
    2532:	2d00      	cmp	r5, #0
    2534:	db18      	blt.n	2568 <_ZN7BLEUuidC1EPKc+0x60>
    2536:	2b0f      	cmp	r3, #15
    2538:	dc16      	bgt.n	2568 <_ZN7BLEUuidC1EPKc+0x60>
    if (str[i] == '-') {
    253a:	5d7a      	ldrb	r2, [r7, r5]
    253c:	2a2d      	cmp	r2, #45	; 0x2d
    253e:	d102      	bne.n	2546 <_ZN7BLEUuidC1EPKc+0x3e>
      i++;
    2540:	3501      	adds	r5, #1
  for (int i = strlen(str) - 1; i >= 0 && _length < BLE_UUID_MAX_LENGTH; i -= 2) {
    2542:	3d02      	subs	r5, #2
    2544:	e7f3      	b.n	252e <_ZN7BLEUuidC1EPKc+0x26>
      continue;
    }

    temp[0] = str[i - 1];
    2546:	197b      	adds	r3, r7, r5
    2548:	3b01      	subs	r3, #1
    254a:	781b      	ldrb	r3, [r3, #0]
    temp[1] = str[i];
    254c:	7072      	strb	r2, [r6, #1]

    _data[_length] = strtoul(temp, NULL, 16);
    254e:	2100      	movs	r1, #0
    2550:	2210      	movs	r2, #16
    2552:	0030      	movs	r0, r6
    temp[0] = str[i - 1];
    2554:	7033      	strb	r3, [r6, #0]
    _data[_length] = strtoul(temp, NULL, 16);
    2556:	f007 fa29 	bl	99ac <strtoul>
    255a:	9b01      	ldr	r3, [sp, #4]
    255c:	18e3      	adds	r3, r4, r3
    255e:	7118      	strb	r0, [r3, #4]

    _length++;
    2560:	7d23      	ldrb	r3, [r4, #20]
    2562:	3301      	adds	r3, #1
    2564:	7523      	strb	r3, [r4, #20]
    2566:	e7ec      	b.n	2542 <_ZN7BLEUuidC1EPKc+0x3a>
  }

  if (_length <= 2) {
    2568:	9b01      	ldr	r3, [sp, #4]
    256a:	2b02      	cmp	r3, #2
    256c:	dc04      	bgt.n	2578 <_ZN7BLEUuidC1EPKc+0x70>
    _length = 2;
    256e:	2302      	movs	r3, #2
  } else {
    _length = 16;
  }
}
    2570:	0020      	movs	r0, r4
    _length = 16;
    2572:	7523      	strb	r3, [r4, #20]
}
    2574:	b005      	add	sp, #20
    2576:	bdf0      	pop	{r4, r5, r6, r7, pc}
    _length = 16;
    2578:	2310      	movs	r3, #16
    257a:	e7f9      	b.n	2570 <_ZN7BLEUuidC1EPKc+0x68>

0000257c <_ZNK7BLEUuid3strEv>:

const char* BLEUuid::str() const
{
  return _str;
    257c:	6800      	ldr	r0, [r0, #0]
}
    257e:	4770      	bx	lr

00002580 <_ZNK7BLEUuid4dataEv>:

const uint8_t* BLEUuid::data() const
{
  return _data;
    2580:	3004      	adds	r0, #4
}
    2582:	4770      	bx	lr

00002584 <_ZNK7BLEUuid6lengthEv>:

uint8_t BLEUuid::length() const
{
  return _length;
    2584:	7d00      	ldrb	r0, [r0, #20]
}
    2586:	4770      	bx	lr

00002588 <_ZNK22BLELocalCharacteristic4typeEv>:
}

enum BLEAttributeType BLELocalCharacteristic::type() const
{
  return BLETypeCharacteristic;
}
    2588:	4800      	ldr	r0, [pc, #0]	; (258c <_ZNK22BLELocalCharacteristic4typeEv+0x4>)
    258a:	4770      	bx	lr
    258c:	00002803 	.word	0x00002803

00002590 <_ZNK22BLELocalCharacteristic10propertiesEv>:

uint8_t BLELocalCharacteristic::properties() const
{
  return _properties;
    2590:	3001      	adds	r0, #1
    2592:	7fc0      	ldrb	r0, [r0, #31]
}
    2594:	4770      	bx	lr

00002596 <_ZNK22BLELocalCharacteristic9valueSizeEv>:

int BLELocalCharacteristic::valueSize() const
{
  return _valueSize;
    2596:	6a40      	ldr	r0, [r0, #36]	; 0x24
}
    2598:	4770      	bx	lr

0000259a <_ZNK22BLELocalCharacteristic5valueEv>:

const uint8_t* BLELocalCharacteristic::value() const
{
  return _value;
    259a:	6a80      	ldr	r0, [r0, #40]	; 0x28
}
    259c:	4770      	bx	lr

0000259e <_ZNK22BLELocalCharacteristic11valueLengthEv>:

int BLELocalCharacteristic::valueLength() const
{
  return _valueLength;
    259e:	8d80      	ldrh	r0, [r0, #44]	; 0x2c
}
    25a0:	4770      	bx	lr
	...

000025a4 <_ZN22BLELocalCharacteristic10writeValueEPKhi>:
  return _value[offset];
}

int BLELocalCharacteristic::writeValue(const uint8_t value[], int length)
{
  _valueLength = min(length, _valueSize);
    25a4:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
    25a6:	b570      	push	{r4, r5, r6, lr}
    25a8:	0015      	movs	r5, r2
    25aa:	0004      	movs	r4, r0
    25ac:	000e      	movs	r6, r1
  _valueLength = min(length, _valueSize);
    25ae:	b292      	uxth	r2, r2
    25b0:	42ab      	cmp	r3, r5
    25b2:	dc00      	bgt.n	25b6 <_ZN22BLELocalCharacteristic10writeValueEPKhi+0x12>
    25b4:	b29a      	uxth	r2, r3
    25b6:	85a2      	strh	r2, [r4, #44]	; 0x2c
  memcpy(_value, value, _valueLength);
    25b8:	0031      	movs	r1, r6
    25ba:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    25bc:	f006 fbe7 	bl	8d8e <memcpy>

  if (_fixedLength) {
    25c0:	0023      	movs	r3, r4
    25c2:	332e      	adds	r3, #46	; 0x2e
    25c4:	781b      	ldrb	r3, [r3, #0]
    25c6:	2b00      	cmp	r3, #0
    25c8:	d001      	beq.n	25ce <_ZN22BLELocalCharacteristic10writeValueEPKhi+0x2a>
    _valueLength = _valueSize;
    25ca:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
    25cc:	85a3      	strh	r3, [r4, #44]	; 0x2c
  }

  if ((_properties & BLEIndicate) && (_cccdValue & 0x0002)) {
    25ce:	1c63      	adds	r3, r4, #1
    25d0:	7fdb      	ldrb	r3, [r3, #31]
    25d2:	069a      	lsls	r2, r3, #26
    25d4:	d50b      	bpl.n	25ee <_ZN22BLELocalCharacteristic10writeValueEPKhi+0x4a>
    25d6:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
    25d8:	0792      	lsls	r2, r2, #30
    25da:	d508      	bpl.n	25ee <_ZN22BLELocalCharacteristic10writeValueEPKhi+0x4a>
  return _handle;
}

uint16_t BLELocalCharacteristic::valueHandle() const
{
  return (_handle + 1);
    25dc:	8e21      	ldrh	r1, [r4, #48]	; 0x30
    return ATT.handleInd(valueHandle(), _value, _valueLength);
    25de:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
  return (_handle + 1);
    25e0:	3101      	adds	r1, #1
    return ATT.handleInd(valueHandle(), _value, _valueLength);
    25e2:	b289      	uxth	r1, r1
    25e4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    25e6:	4819      	ldr	r0, [pc, #100]	; (264c <_ZN22BLELocalCharacteristic10writeValueEPKhi+0xa8>)
    25e8:	f000 fcdc 	bl	2fa4 <_ZN8ATTClass9handleIndEtPKhi>
}
    25ec:	bd70      	pop	{r4, r5, r6, pc}
  } else if ((_properties & BLENotify) && (_cccdValue & 0x0001)) {
    25ee:	06db      	lsls	r3, r3, #27
    25f0:	d50b      	bpl.n	260a <_ZN22BLELocalCharacteristic10writeValueEPKhi+0x66>
    25f2:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    25f4:	07db      	lsls	r3, r3, #31
    25f6:	d508      	bpl.n	260a <_ZN22BLELocalCharacteristic10writeValueEPKhi+0x66>
  return (_handle + 1);
    25f8:	8e21      	ldrh	r1, [r4, #48]	; 0x30
    return ATT.handleNotify(valueHandle(), _value, _valueLength);
    25fa:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
  return (_handle + 1);
    25fc:	3101      	adds	r1, #1
    return ATT.handleNotify(valueHandle(), _value, _valueLength);
    25fe:	b289      	uxth	r1, r1
    2600:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    2602:	4812      	ldr	r0, [pc, #72]	; (264c <_ZN22BLELocalCharacteristic10writeValueEPKhi+0xa8>)
    2604:	f000 fc92 	bl	2f2c <_ZN8ATTClass12handleNotifyEtPKhi>
    2608:	e7f0      	b.n	25ec <_ZN22BLELocalCharacteristic10writeValueEPKhi+0x48>
  if (_broadcast) {
    260a:	0023      	movs	r3, r4
    260c:	3332      	adds	r3, #50	; 0x32
    260e:	781b      	ldrb	r3, [r3, #0]
    2610:	2b00      	cmp	r3, #0
    2612:	d101      	bne.n	2618 <_ZN22BLELocalCharacteristic10writeValueEPKhi+0x74>
  return 1;
    2614:	2001      	movs	r0, #1
    2616:	e7e9      	b.n	25ec <_ZN22BLELocalCharacteristic10writeValueEPKhi+0x48>
    uint16_t serviceUuid = GATT.serviceUuidForCharacteristic(this);
    2618:	0021      	movs	r1, r4
    261a:	480d      	ldr	r0, [pc, #52]	; (2650 <_ZN22BLELocalCharacteristic10writeValueEPKhi+0xac>)
    261c:	f001 fcfe 	bl	401c <_ZNK9GATTClass28serviceUuidForCharacteristicEP22BLELocalCharacteristic>
    GAP.setAdvertisedServiceData(serviceUuid, value, length);
    2620:	4c0c      	ldr	r4, [pc, #48]	; (2654 <_ZN22BLELocalCharacteristic10writeValueEPKhi+0xb0>)
    uint16_t serviceUuid = GATT.serviceUuidForCharacteristic(this);
    2622:	0001      	movs	r1, r0
    GAP.setAdvertisedServiceData(serviceUuid, value, length);
    2624:	002b      	movs	r3, r5
    2626:	0020      	movs	r0, r4
    2628:	0032      	movs	r2, r6
    262a:	f001 fc55 	bl	3ed8 <_ZN8GAPClass24setAdvertisedServiceDataEtPKhi>
    if (!ATT.connected() && GAP.advertising()) {
    262e:	4807      	ldr	r0, [pc, #28]	; (264c <_ZN22BLELocalCharacteristic10writeValueEPKhi+0xa8>)
    2630:	f000 fc34 	bl	2e9c <_ZNK8ATTClass9connectedEv>
    2634:	2800      	cmp	r0, #0
    2636:	d1ed      	bne.n	2614 <_ZN22BLELocalCharacteristic10writeValueEPKhi+0x70>
    2638:	0020      	movs	r0, r4
    263a:	f001 fb9b 	bl	3d74 <_ZN8GAPClass11advertisingEv>
    263e:	2800      	cmp	r0, #0
    2640:	d0e8      	beq.n	2614 <_ZN22BLELocalCharacteristic10writeValueEPKhi+0x70>
      GAP.advertise();
    2642:	0020      	movs	r0, r4
    2644:	f001 fb98 	bl	3d78 <_ZN8GAPClass9advertiseEv>
    2648:	e7e4      	b.n	2614 <_ZN22BLELocalCharacteristic10writeValueEPKhi+0x70>
    264a:	46c0      	nop			; (mov r8, r8)
    264c:	200002b8 	.word	0x200002b8
    2650:	20000304 	.word	0x20000304
    2654:	200002dc 	.word	0x200002dc

00002658 <_ZN22BLELocalCharacteristic10writeValueEPKc>:
{
    2658:	b570      	push	{r4, r5, r6, lr}
    265a:	0005      	movs	r5, r0
  return writeValue((uint8_t*)value, strlen(value));
    265c:	0008      	movs	r0, r1
{
    265e:	000c      	movs	r4, r1
  return writeValue((uint8_t*)value, strlen(value));
    2660:	f007 f916 	bl	9890 <strlen>
    2664:	0021      	movs	r1, r4
    2666:	0002      	movs	r2, r0
    2668:	0028      	movs	r0, r5
    266a:	f7ff ff9b 	bl	25a4 <_ZN22BLELocalCharacteristic10writeValueEPKhi>
}
    266e:	bd70      	pop	{r4, r5, r6, pc}

00002670 <_ZN22BLELocalCharacteristic7writtenEv>:
  bool written = _written;
    2670:	0003      	movs	r3, r0
  _written = false;
    2672:	2200      	movs	r2, #0
  bool written = _written;
    2674:	3333      	adds	r3, #51	; 0x33
    2676:	7818      	ldrb	r0, [r3, #0]
  _written = false;
    2678:	701a      	strb	r2, [r3, #0]
}
    267a:	4770      	bx	lr

0000267c <_ZN22BLELocalCharacteristic9setHandleEt>:
  _handle = handle;
    267c:	8601      	strh	r1, [r0, #48]	; 0x30
}
    267e:	4770      	bx	lr

00002680 <_ZNK22BLELocalCharacteristic6handleEv>:
  return _handle;
    2680:	8e00      	ldrh	r0, [r0, #48]	; 0x30
}
    2682:	4770      	bx	lr

00002684 <_ZNK22BLELocalCharacteristic11valueHandleEv>:
  return (_handle + 1);
    2684:	8e00      	ldrh	r0, [r0, #48]	; 0x30
    2686:	3001      	adds	r0, #1
    2688:	b280      	uxth	r0, r0
}
    268a:	4770      	bx	lr

0000268c <_ZNK22BLELocalCharacteristic15descriptorCountEv>:

unsigned int BLELocalCharacteristic::descriptorCount() const
{
  return _descriptors.size();
    268c:	6b80      	ldr	r0, [r0, #56]	; 0x38
}
    268e:	4770      	bx	lr

00002690 <_ZNK22BLELocalCharacteristic10descriptorEj>:
  _size++;
}

template <typename T> T BLELinkedList<T>::get(unsigned int index) const
{
  if (index >= _size) {
    2690:	6b82      	ldr	r2, [r0, #56]	; 0x38
    return T();
    2692:	2300      	movs	r3, #0
  if (index >= _size) {
    2694:	4291      	cmp	r1, r2
    2696:	d207      	bcs.n	26a8 <_ZNK22BLELocalCharacteristic10descriptorEj+0x18>
  }

  BLELinkedListNode<T>* itemNode = _root;

  for (unsigned int i = 0; i < index; i++) {
    2698:	2200      	movs	r2, #0
  BLELinkedListNode<T>* itemNode = _root;
    269a:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
  for (unsigned int i = 0; i < index; i++) {
    269c:	4291      	cmp	r1, r2
    269e:	d002      	beq.n	26a6 <_ZNK22BLELocalCharacteristic10descriptorEj+0x16>
    itemNode = itemNode->next;
    26a0:	685b      	ldr	r3, [r3, #4]
  for (unsigned int i = 0; i < index; i++) {
    26a2:	3201      	adds	r2, #1
    26a4:	e7fa      	b.n	269c <_ZNK22BLELocalCharacteristic10descriptorEj+0xc>
  }

  return itemNode->data;
    26a6:	681b      	ldr	r3, [r3, #0]

BLELocalDescriptor* BLELocalCharacteristic::descriptor(unsigned int index) const
{
  return _descriptors.get(index);
}
    26a8:	0018      	movs	r0, r3
    26aa:	4770      	bx	lr

000026ac <_ZN13BLELinkedListIP18BLELocalDescriptorE3addES1_>:
template <typename T> void BLELinkedList<T>::add(T item)
    26ac:	b570      	push	{r4, r5, r6, lr}
    26ae:	0004      	movs	r4, r0
  BLELinkedListNode<T>* itemNode = new BLELinkedListNode<T>();
    26b0:	2008      	movs	r0, #8
template <typename T> void BLELinkedList<T>::add(T item)
    26b2:	000d      	movs	r5, r1
  BLELinkedListNode<T>* itemNode = new BLELinkedListNode<T>();
    26b4:	f002 fbe0 	bl	4e78 <_Znwj>
    26b8:	2300      	movs	r3, #0
    26ba:	6043      	str	r3, [r0, #4]
  if (_root == NULL) {
    26bc:	6863      	ldr	r3, [r4, #4]
  itemNode->data = item;
    26be:	6005      	str	r5, [r0, #0]
  if (_root == NULL) {
    26c0:	2b00      	cmp	r3, #0
    26c2:	d105      	bne.n	26d0 <_ZN13BLELinkedListIP18BLELocalDescriptorE3addES1_+0x24>
    _root = itemNode;
    26c4:	6060      	str	r0, [r4, #4]
  _size++;
    26c6:	6823      	ldr	r3, [r4, #0]
  _last = itemNode;
    26c8:	60a0      	str	r0, [r4, #8]
  _size++;
    26ca:	3301      	adds	r3, #1
    26cc:	6023      	str	r3, [r4, #0]
}
    26ce:	bd70      	pop	{r4, r5, r6, pc}
    _last->next = itemNode;
    26d0:	68a3      	ldr	r3, [r4, #8]
    26d2:	6058      	str	r0, [r3, #4]
    26d4:	e7f7      	b.n	26c6 <_ZN13BLELinkedListIP18BLELocalDescriptorE3addES1_+0x1a>
	...

000026d8 <_ZN22BLELocalCharacteristicC1EPKchib>:
BLELocalCharacteristic::BLELocalCharacteristic(const char* uuid, uint8_t properties, int valueSize, bool fixedLength) :
    26d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    26da:	0004      	movs	r4, r0
    26dc:	001d      	movs	r5, r3
    26de:	ab06      	add	r3, sp, #24
    26e0:	0016      	movs	r6, r2
    26e2:	781f      	ldrb	r7, [r3, #0]
  _cccdValue(0x0000)
    26e4:	f7ff fd20 	bl	2128 <_ZN12BLEAttributeC1EPKc>
  _valueSize(min(valueSize, 512)),
    26e8:	2280      	movs	r2, #128	; 0x80
  _cccdValue(0x0000)
    26ea:	4b1a      	ldr	r3, [pc, #104]	; (2754 <_ZN22BLELocalCharacteristicC1EPKchib+0x7c>)
  _valueSize(min(valueSize, 512)),
    26ec:	0092      	lsls	r2, r2, #2
  _cccdValue(0x0000)
    26ee:	3308      	adds	r3, #8
    26f0:	6023      	str	r3, [r4, #0]
    26f2:	1c63      	adds	r3, r4, #1
    26f4:	77de      	strb	r6, [r3, #31]
  _valueSize(min(valueSize, 512)),
    26f6:	002b      	movs	r3, r5
    26f8:	4295      	cmp	r5, r2
    26fa:	dd00      	ble.n	26fe <_ZN22BLELocalCharacteristicC1EPKchib+0x26>
    26fc:	0013      	movs	r3, r2
  _cccdValue(0x0000)
    26fe:	6263      	str	r3, [r4, #36]	; 0x24
    2700:	0023      	movs	r3, r4
    2702:	2100      	movs	r1, #0
  memset(_eventHandlers, 0x00, sizeof(_eventHandlers));
    2704:	0020      	movs	r0, r4
  _cccdValue(0x0000)
    2706:	332e      	adds	r3, #46	; 0x2e
    2708:	85a1      	strh	r1, [r4, #44]	; 0x2c
  memset(_eventHandlers, 0x00, sizeof(_eventHandlers));
    270a:	2210      	movs	r2, #16
  _cccdValue(0x0000)
    270c:	701f      	strb	r7, [r3, #0]
  memset(_eventHandlers, 0x00, sizeof(_eventHandlers));
    270e:	3044      	adds	r0, #68	; 0x44
  _cccdValue(0x0000)
    2710:	8621      	strh	r1, [r4, #48]	; 0x30
    2712:	7119      	strb	r1, [r3, #4]
    2714:	7159      	strb	r1, [r3, #5]
    2716:	86a1      	strh	r1, [r4, #52]	; 0x34
  _last(NULL)
    2718:	63a1      	str	r1, [r4, #56]	; 0x38
    271a:	63e1      	str	r1, [r4, #60]	; 0x3c
    271c:	6421      	str	r1, [r4, #64]	; 0x40
  memset(_eventHandlers, 0x00, sizeof(_eventHandlers));
    271e:	f006 fb51 	bl	8dc4 <memset>
  if (properties & (BLENotify | BLEIndicate)) {
    2722:	2330      	movs	r3, #48	; 0x30
    2724:	421e      	tst	r6, r3
    2726:	d00e      	beq.n	2746 <_ZN22BLELocalCharacteristicC1EPKchib+0x6e>
    BLELocalDescriptor* cccd = new BLELocalDescriptor("2902", (uint8_t*)&_cccdValue, sizeof(_cccdValue));
    2728:	202c      	movs	r0, #44	; 0x2c
    272a:	f002 fba5 	bl	4e78 <_Znwj>
    272e:	0022      	movs	r2, r4
    2730:	4909      	ldr	r1, [pc, #36]	; (2758 <_ZN22BLELocalCharacteristicC1EPKchib+0x80>)
    2732:	2302      	movs	r3, #2
    2734:	3234      	adds	r2, #52	; 0x34
    2736:	0006      	movs	r6, r0
    2738:	f000 f8fe 	bl	2938 <_ZN18BLELocalDescriptorC1EPKcPKhi>
    _descriptors.add(cccd);
    273c:	0020      	movs	r0, r4
    273e:	0031      	movs	r1, r6
    2740:	3038      	adds	r0, #56	; 0x38
    2742:	f7ff ffb3 	bl	26ac <_ZN13BLELinkedListIP18BLELocalDescriptorE3addES1_>
  _value = (uint8_t*)malloc(valueSize);
    2746:	0028      	movs	r0, r5
    2748:	f006 faec 	bl	8d24 <malloc>
    274c:	62a0      	str	r0, [r4, #40]	; 0x28
}
    274e:	0020      	movs	r0, r4
    2750:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2752:	46c0      	nop			; (mov r8, r8)
    2754:	0000b168 	.word	0x0000b168
    2758:	0000b160 	.word	0x0000b160

0000275c <_ZN13BLELinkedListIP18BLELocalDescriptorE5clearEv>:
}

template <typename T> void BLELinkedList<T>::clear()
    275c:	b570      	push	{r4, r5, r6, lr}
{
  BLELinkedListNode<T>* itemNode = _root;

  for (unsigned int i = 0; i < _size; i++) {
    275e:	2500      	movs	r5, #0
template <typename T> void BLELinkedList<T>::clear()
    2760:	0004      	movs	r4, r0
  BLELinkedListNode<T>* itemNode = _root;
    2762:	6840      	ldr	r0, [r0, #4]
  for (unsigned int i = 0; i < _size; i++) {
    2764:	6823      	ldr	r3, [r4, #0]
    2766:	429d      	cmp	r5, r3
    2768:	d205      	bcs.n	2776 <_ZN13BLELinkedListIP18BLELocalDescriptorE5clearEv+0x1a>
    BLELinkedListNode<T>* n = itemNode;

    itemNode = itemNode->next;
    276a:	6846      	ldr	r6, [r0, #4]
  for (unsigned int i = 0; i < _size; i++) {
    276c:	3501      	adds	r5, #1

    delete n;
    276e:	f002 fb87 	bl	4e80 <_ZdlPv>
    itemNode = itemNode->next;
    2772:	0030      	movs	r0, r6
  for (unsigned int i = 0; i < _size; i++) {
    2774:	e7f6      	b.n	2764 <_ZN13BLELinkedListIP18BLELocalDescriptorE5clearEv+0x8>
  }

  _size = 0;
    2776:	2300      	movs	r3, #0
    2778:	6023      	str	r3, [r4, #0]
  _root = NULL;
    277a:	6063      	str	r3, [r4, #4]
  _last = NULL;
    277c:	60a3      	str	r3, [r4, #8]
}
    277e:	bd70      	pop	{r4, r5, r6, pc}

00002780 <_ZN22BLELocalCharacteristicD1Ev>:
BLELocalCharacteristic::~BLELocalCharacteristic()
    2780:	b570      	push	{r4, r5, r6, lr}
    2782:	0004      	movs	r4, r0
  for (unsigned int i = 0; i < descriptorCount(); i++) {
    2784:	2500      	movs	r5, #0
BLELocalCharacteristic::~BLELocalCharacteristic()
    2786:	4b16      	ldr	r3, [pc, #88]	; (27e0 <_ZN22BLELocalCharacteristicD1Ev+0x60>)
    2788:	3308      	adds	r3, #8
    278a:	6003      	str	r3, [r0, #0]
  for (unsigned int i = 0; i < descriptorCount(); i++) {
    278c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    278e:	429d      	cmp	r5, r3
    2790:	d214      	bcs.n	27bc <_ZN22BLELocalCharacteristicD1Ev+0x3c>
  for (unsigned int i = 0; i < index; i++) {
    2792:	2200      	movs	r2, #0
  BLELinkedListNode<T>* itemNode = _root;
    2794:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  for (unsigned int i = 0; i < index; i++) {
    2796:	4295      	cmp	r5, r2
    2798:	d002      	beq.n	27a0 <_ZN22BLELocalCharacteristicD1Ev+0x20>
    itemNode = itemNode->next;
    279a:	685b      	ldr	r3, [r3, #4]
  for (unsigned int i = 0; i < index; i++) {
    279c:	3201      	adds	r2, #1
    279e:	e7fa      	b.n	2796 <_ZN22BLELocalCharacteristicD1Ev+0x16>
  return itemNode->data;
    27a0:	681e      	ldr	r6, [r3, #0]
    if (d->release() <= 0) {
    27a2:	0030      	movs	r0, r6
    27a4:	f7ff fce2 	bl	216c <_ZN12BLEAttribute7releaseEv>
    27a8:	2800      	cmp	r0, #0
    27aa:	dc05      	bgt.n	27b8 <_ZN22BLELocalCharacteristicD1Ev+0x38>
      delete d;
    27ac:	2e00      	cmp	r6, #0
    27ae:	d003      	beq.n	27b8 <_ZN22BLELocalCharacteristicD1Ev+0x38>
    27b0:	6833      	ldr	r3, [r6, #0]
    27b2:	0030      	movs	r0, r6
    27b4:	685b      	ldr	r3, [r3, #4]
    27b6:	4798      	blx	r3
  for (unsigned int i = 0; i < descriptorCount(); i++) {
    27b8:	3501      	adds	r5, #1
    27ba:	e7e7      	b.n	278c <_ZN22BLELocalCharacteristicD1Ev+0xc>
  _descriptors.clear();
    27bc:	0025      	movs	r5, r4
    27be:	3538      	adds	r5, #56	; 0x38
    27c0:	0028      	movs	r0, r5
    27c2:	f7ff ffcb 	bl	275c <_ZN13BLELinkedListIP18BLELocalDescriptorE5clearEv>
  if (_value) {
    27c6:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    27c8:	2800      	cmp	r0, #0
    27ca:	d001      	beq.n	27d0 <_ZN22BLELocalCharacteristicD1Ev+0x50>
    free(_value);
    27cc:	f006 fab4 	bl	8d38 <free>
  clear();
    27d0:	0028      	movs	r0, r5
    27d2:	f7ff ffc3 	bl	275c <_ZN13BLELinkedListIP18BLELocalDescriptorE5clearEv>
BLELocalCharacteristic::~BLELocalCharacteristic()
    27d6:	0020      	movs	r0, r4
    27d8:	f7ff fc9c 	bl	2114 <_ZN12BLEAttributeD1Ev>
}
    27dc:	0020      	movs	r0, r4
    27de:	bd70      	pop	{r4, r5, r6, pc}
    27e0:	0000b168 	.word	0x0000b168

000027e4 <_ZN22BLELocalCharacteristicD0Ev>:
BLELocalCharacteristic::~BLELocalCharacteristic()
    27e4:	b510      	push	{r4, lr}
    27e6:	0004      	movs	r4, r0
}
    27e8:	f7ff ffca 	bl	2780 <_ZN22BLELocalCharacteristicD1Ev>
    27ec:	0020      	movs	r0, r4
    27ee:	f002 fb47 	bl	4e80 <_ZdlPv>
    27f2:	0020      	movs	r0, r4
    27f4:	bd10      	pop	{r4, pc}
	...

000027f8 <_ZN22BLELocalCharacteristic9readValueE9BLEDevicetPhi>:

void BLELocalCharacteristic::readValue(BLEDevice device, uint16_t offset, uint8_t value[], int length)
{
    27f8:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (_eventHandlers[BLERead]) {
    27fa:	6cc6      	ldr	r6, [r0, #76]	; 0x4c
{
    27fc:	b089      	sub	sp, #36	; 0x24
    27fe:	0004      	movs	r4, r0
    2800:	0017      	movs	r7, r2
    2802:	9301      	str	r3, [sp, #4]
  if (_eventHandlers[BLERead]) {
    2804:	2e00      	cmp	r6, #0
    2806:	d018      	beq.n	283a <_ZN22BLELocalCharacteristic9readValueE9BLEDevicetPhi+0x42>

class BLEDevice;

typedef void (*BLEDeviceEventHandler)(BLEDevice device);

class BLEDevice {
    2808:	2012      	movs	r0, #18
    280a:	4b10      	ldr	r3, [pc, #64]	; (284c <_ZN22BLELocalCharacteristic9readValueE9BLEDevicetPhi+0x54>)
    280c:	ad05      	add	r5, sp, #20
    280e:	9305      	str	r3, [sp, #20]
    2810:	888b      	ldrh	r3, [r1, #4]
    2812:	2206      	movs	r2, #6
    2814:	80ab      	strh	r3, [r5, #4]
    2816:	ab02      	add	r3, sp, #8
    2818:	18c0      	adds	r0, r0, r3
    281a:	3106      	adds	r1, #6
    281c:	f006 fab7 	bl	8d8e <memcpy>
    _eventHandlers[BLERead](device, BLECharacteristic(this));
    2820:	0021      	movs	r1, r4
    2822:	a803      	add	r0, sp, #12
    2824:	f7ff fcc8 	bl	21b8 <_ZN17BLECharacteristicC1EP22BLELocalCharacteristic>
    2828:	a903      	add	r1, sp, #12
    282a:	0028      	movs	r0, r5
    282c:	47b0      	blx	r6
    282e:	a803      	add	r0, sp, #12
    2830:	f7ff fca2 	bl	2178 <_ZN17BLECharacteristicD1Ev>
    2834:	0028      	movs	r0, r5
    2836:	f7ff fd06 	bl	2246 <_ZN9BLEDeviceD1Ev>
  }

  memcpy(value, _value + offset, length);
    283a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    283c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    283e:	19c9      	adds	r1, r1, r7
    2840:	9801      	ldr	r0, [sp, #4]
    2842:	f006 faa4 	bl	8d8e <memcpy>
}
    2846:	b009      	add	sp, #36	; 0x24
    2848:	bdf0      	pop	{r4, r5, r6, r7, pc}
    284a:	46c0      	nop			; (mov r8, r8)
    284c:	0000b104 	.word	0x0000b104

00002850 <_ZN22BLELocalCharacteristic10writeValueE9BLEDevicePKhi>:

void BLELocalCharacteristic::writeValue(BLEDevice device, const uint8_t value[], int length)
{
    2850:	b5f0      	push	{r4, r5, r6, r7, lr}
    2852:	000d      	movs	r5, r1
    2854:	0011      	movs	r1, r2
  _written = true;
    2856:	0002      	movs	r2, r0
{
    2858:	0004      	movs	r4, r0
  _written = true;
    285a:	2001      	movs	r0, #1
    285c:	3233      	adds	r2, #51	; 0x33
    285e:	7010      	strb	r0, [r2, #0]
{
    2860:	b087      	sub	sp, #28

  writeValue(value, length);
    2862:	001a      	movs	r2, r3
    2864:	0020      	movs	r0, r4
    2866:	f7ff fe9d 	bl	25a4 <_ZN22BLELocalCharacteristic10writeValueEPKhi>

  if (_eventHandlers[BLEWritten]) {
    286a:	6d27      	ldr	r7, [r4, #80]	; 0x50
    286c:	2f00      	cmp	r7, #0
    286e:	d017      	beq.n	28a0 <_ZN22BLELocalCharacteristic10writeValueE9BLEDevicePKhi+0x50>
    2870:	2012      	movs	r0, #18
    2872:	4b0c      	ldr	r3, [pc, #48]	; (28a4 <_ZN22BLELocalCharacteristic10writeValueE9BLEDevicePKhi+0x54>)
    2874:	2206      	movs	r2, #6
    2876:	9303      	str	r3, [sp, #12]
    2878:	88ab      	ldrh	r3, [r5, #4]
    287a:	ae03      	add	r6, sp, #12
    287c:	1da9      	adds	r1, r5, #6
    287e:	4468      	add	r0, sp
    2880:	80b3      	strh	r3, [r6, #4]
    2882:	f006 fa84 	bl	8d8e <memcpy>
    _eventHandlers[BLEWritten](device, BLECharacteristic(this));
    2886:	0021      	movs	r1, r4
    2888:	a801      	add	r0, sp, #4
    288a:	f7ff fc95 	bl	21b8 <_ZN17BLECharacteristicC1EP22BLELocalCharacteristic>
    288e:	a901      	add	r1, sp, #4
    2890:	0030      	movs	r0, r6
    2892:	47b8      	blx	r7
    2894:	a801      	add	r0, sp, #4
    2896:	f7ff fc6f 	bl	2178 <_ZN17BLECharacteristicD1Ev>
    289a:	0030      	movs	r0, r6
    289c:	f7ff fcd3 	bl	2246 <_ZN9BLEDeviceD1Ev>
  }
}
    28a0:	b007      	add	sp, #28
    28a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    28a4:	0000b104 	.word	0x0000b104

000028a8 <_ZN22BLELocalCharacteristic14writeCccdValueE9BLEDevicet>:

void BLELocalCharacteristic::writeCccdValue(BLEDevice device, uint16_t value)
{
  value &= 0x0003;
    28a8:	2303      	movs	r3, #3
{
    28aa:	b570      	push	{r4, r5, r6, lr}
  value &= 0x0003;
    28ac:	401a      	ands	r2, r3

  if (_cccdValue != value) {
    28ae:	8e83      	ldrh	r3, [r0, #52]	; 0x34
{
    28b0:	b086      	sub	sp, #24
    28b2:	0004      	movs	r4, r0
  if (_cccdValue != value) {
    28b4:	4293      	cmp	r3, r2
    28b6:	d020      	beq.n	28fa <_ZN22BLELocalCharacteristic14writeCccdValueE9BLEDevicet+0x52>
    _cccdValue = value;
    28b8:	8682      	strh	r2, [r0, #52]	; 0x34

    BLECharacteristicEvent event = (_cccdValue) ? BLESubscribed : BLEUnsubscribed;
    28ba:	4253      	negs	r3, r2
    28bc:	415a      	adcs	r2, r3

    if (_eventHandlers[event]) {
    28be:	3210      	adds	r2, #16
    28c0:	0092      	lsls	r2, r2, #2
    28c2:	1882      	adds	r2, r0, r2
    28c4:	6856      	ldr	r6, [r2, #4]
    28c6:	2e00      	cmp	r6, #0
    28c8:	d017      	beq.n	28fa <_ZN22BLELocalCharacteristic14writeCccdValueE9BLEDevicet+0x52>
    28ca:	2012      	movs	r0, #18
    28cc:	4b0c      	ldr	r3, [pc, #48]	; (2900 <_ZN22BLELocalCharacteristic14writeCccdValueE9BLEDevicet+0x58>)
    28ce:	2206      	movs	r2, #6
    28d0:	9303      	str	r3, [sp, #12]
    28d2:	888b      	ldrh	r3, [r1, #4]
    28d4:	ad03      	add	r5, sp, #12
    28d6:	3106      	adds	r1, #6
    28d8:	4468      	add	r0, sp
    28da:	80ab      	strh	r3, [r5, #4]
    28dc:	f006 fa57 	bl	8d8e <memcpy>
      _eventHandlers[event](device, BLECharacteristic(this));
    28e0:	0021      	movs	r1, r4
    28e2:	a801      	add	r0, sp, #4
    28e4:	f7ff fc68 	bl	21b8 <_ZN17BLECharacteristicC1EP22BLELocalCharacteristic>
    28e8:	a901      	add	r1, sp, #4
    28ea:	0028      	movs	r0, r5
    28ec:	47b0      	blx	r6
    28ee:	a801      	add	r0, sp, #4
    28f0:	f7ff fc42 	bl	2178 <_ZN17BLECharacteristicD1Ev>
    28f4:	0028      	movs	r0, r5
    28f6:	f7ff fca6 	bl	2246 <_ZN9BLEDeviceD1Ev>
    }
  }
}
    28fa:	b006      	add	sp, #24
    28fc:	bd70      	pop	{r4, r5, r6, pc}
    28fe:	46c0      	nop			; (mov r8, r8)
    2900:	0000b104 	.word	0x0000b104

00002904 <_ZNK18BLELocalDescriptor4typeEv>:
}

enum BLEAttributeType BLELocalDescriptor::type() const
{
  return BLETypeDescriptor;
}
    2904:	20a4      	movs	r0, #164	; 0xa4
    2906:	0180      	lsls	r0, r0, #6
    2908:	4770      	bx	lr
	...

0000290c <_ZN18BLELocalDescriptorD1Ev>:
BLELocalDescriptor::~BLELocalDescriptor()
    290c:	b510      	push	{r4, lr}
    290e:	0004      	movs	r4, r0
    2910:	4b03      	ldr	r3, [pc, #12]	; (2920 <_ZN18BLELocalDescriptorD1Ev+0x14>)
    2912:	3308      	adds	r3, #8
    2914:	6003      	str	r3, [r0, #0]
    2916:	f7ff fbfd 	bl	2114 <_ZN12BLEAttributeD1Ev>
}
    291a:	0020      	movs	r0, r4
    291c:	bd10      	pop	{r4, pc}
    291e:	46c0      	nop			; (mov r8, r8)
    2920:	0000b17c 	.word	0x0000b17c

00002924 <_ZN18BLELocalDescriptorD0Ev>:
BLELocalDescriptor::~BLELocalDescriptor()
    2924:	b510      	push	{r4, lr}
    2926:	0004      	movs	r4, r0
}
    2928:	f7ff fff0 	bl	290c <_ZN18BLELocalDescriptorD1Ev>
    292c:	0020      	movs	r0, r4
    292e:	f002 faa7 	bl	4e80 <_ZdlPv>
    2932:	0020      	movs	r0, r4
    2934:	bd10      	pop	{r4, pc}
	...

00002938 <_ZN18BLELocalDescriptorC1EPKcPKhi>:
BLELocalDescriptor::BLELocalDescriptor(const char* uuid, const uint8_t value[], int valueSize) :
    2938:	b570      	push	{r4, r5, r6, lr}
    293a:	0004      	movs	r4, r0
    293c:	0016      	movs	r6, r2
    293e:	001d      	movs	r5, r3
  _handle(0x0000)
    2940:	f7ff fbf2 	bl	2128 <_ZN12BLEAttributeC1EPKc>
  _valueSize(min(valueSize, 512)),
    2944:	2280      	movs	r2, #128	; 0x80
  _handle(0x0000)
    2946:	4b06      	ldr	r3, [pc, #24]	; (2960 <_ZN18BLELocalDescriptorC1EPKcPKhi+0x28>)
    2948:	6226      	str	r6, [r4, #32]
    294a:	3308      	adds	r3, #8
    294c:	6023      	str	r3, [r4, #0]
  _valueSize(min(valueSize, 512)),
    294e:	0092      	lsls	r2, r2, #2
    2950:	4295      	cmp	r5, r2
    2952:	dd00      	ble.n	2956 <_ZN18BLELocalDescriptorC1EPKcPKhi+0x1e>
    2954:	0015      	movs	r5, r2
  _handle(0x0000)
    2956:	2300      	movs	r3, #0
    2958:	6265      	str	r5, [r4, #36]	; 0x24
}
    295a:	0020      	movs	r0, r4
  _handle(0x0000)
    295c:	8523      	strh	r3, [r4, #40]	; 0x28
}
    295e:	bd70      	pop	{r4, r5, r6, pc}
    2960:	0000b17c 	.word	0x0000b17c

00002964 <_ZNK18BLELocalDescriptor9valueSizeEv>:

int BLELocalDescriptor::valueSize() const
{
  return _valueSize;
    2964:	6a40      	ldr	r0, [r0, #36]	; 0x24
}
    2966:	4770      	bx	lr

00002968 <_ZNK18BLELocalDescriptor5valueEv>:

const uint8_t* BLELocalDescriptor::value() const
{
  return _value;
    2968:	6a00      	ldr	r0, [r0, #32]
}
    296a:	4770      	bx	lr

0000296c <_ZN18BLELocalDescriptor9setHandleEt>:
  return _value[offset];
}

void BLELocalDescriptor::setHandle(uint16_t handle)
{
  _handle = handle;
    296c:	8501      	strh	r1, [r0, #40]	; 0x28
}
    296e:	4770      	bx	lr

00002970 <_ZNK14BLELocalDevicecvbEv>:
}

BLELocalDevice::operator bool() const
{
  return true;
}
    2970:	2001      	movs	r0, #1
    2972:	4770      	bx	lr

00002974 <_ZNK14BLELocalDeviceeqERK9BLEDevice>:

bool BLELocalDevice::operator==(const BLEDevice& rhs) const
{
  return (this == &rhs);
    2974:	1a40      	subs	r0, r0, r1
    2976:	4241      	negs	r1, r0
    2978:	4148      	adcs	r0, r1
    297a:	b2c0      	uxtb	r0, r0
}
    297c:	4770      	bx	lr

0000297e <_ZNK14BLELocalDeviceneERK9BLEDevice>:

bool BLELocalDevice::operator!=(const BLEDevice& rhs) const
{
  return (this != &rhs);
    297e:	1a40      	subs	r0, r0, r1
    2980:	1e41      	subs	r1, r0, #1
    2982:	4188      	sbcs	r0, r1
    2984:	b2c0      	uxtb	r0, r0
}
    2986:	4770      	bx	lr

00002988 <_ZN14BLELocalDeviceD1Ev>:
BLELocalDevice::~BLELocalDevice()
    2988:	b510      	push	{r4, lr}
    298a:	0004      	movs	r4, r0
    298c:	4b03      	ldr	r3, [pc, #12]	; (299c <_ZN14BLELocalDeviceD1Ev+0x14>)
    298e:	3308      	adds	r3, #8
    2990:	6003      	str	r3, [r0, #0]
    2992:	f7ff fc58 	bl	2246 <_ZN9BLEDeviceD1Ev>
}
    2996:	0020      	movs	r0, r4
    2998:	bd10      	pop	{r4, pc}
    299a:	46c0      	nop			; (mov r8, r8)
    299c:	0000b190 	.word	0x0000b190

000029a0 <_ZN14BLELocalDeviceD0Ev>:
BLELocalDevice::~BLELocalDevice()
    29a0:	b510      	push	{r4, lr}
    29a2:	0004      	movs	r4, r0
}
    29a4:	f7ff fff0 	bl	2988 <_ZN14BLELocalDeviceD1Ev>
    29a8:	0020      	movs	r0, r4
    29aa:	f002 fa69 	bl	4e80 <_ZdlPv>
    29ae:	0020      	movs	r0, r4
    29b0:	bd10      	pop	{r4, pc}
	...

000029b4 <_ZNK14BLELocalDevice9connectedEv>:
{
    29b4:	b510      	push	{r4, lr}
  HCI.poll();
    29b6:	4803      	ldr	r0, [pc, #12]	; (29c4 <_ZNK14BLELocalDevice9connectedEv+0x10>)
    29b8:	f001 fd90 	bl	44dc <_ZN8HCIClass4pollEv>
  return ATT.connected();
    29bc:	4802      	ldr	r0, [pc, #8]	; (29c8 <_ZNK14BLELocalDevice9connectedEv+0x14>)
    29be:	f000 fa6d 	bl	2e9c <_ZNK8ATTClass9connectedEv>
}
    29c2:	bd10      	pop	{r4, pc}
    29c4:	20000470 	.word	0x20000470
    29c8:	200002b8 	.word	0x200002b8

000029cc <_ZN14BLELocalDevice10disconnectEv>:
{
    29cc:	b510      	push	{r4, lr}
  return ATT.disconnect();
    29ce:	4802      	ldr	r0, [pc, #8]	; (29d8 <_ZN14BLELocalDevice10disconnectEv+0xc>)
    29d0:	f000 fa7e 	bl	2ed0 <_ZN8ATTClass10disconnectEv>
}
    29d4:	bd10      	pop	{r4, pc}
    29d6:	46c0      	nop			; (mov r8, r8)
    29d8:	200002b8 	.word	0x200002b8

000029dc <_ZNK14BLELocalDevice7addressEv>:
{
    29dc:	b530      	push	{r4, r5, lr}
    29de:	0005      	movs	r5, r0
    29e0:	b08d      	sub	sp, #52	; 0x34
  uint8_t addr[6] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
    29e2:	ac05      	add	r4, sp, #20
    29e4:	2206      	movs	r2, #6
    29e6:	2100      	movs	r1, #0
    29e8:	0020      	movs	r0, r4
    29ea:	f006 f9eb 	bl	8dc4 <memset>
  HCI.readBdAddr(addr);
    29ee:	0021      	movs	r1, r4
    29f0:	480b      	ldr	r0, [pc, #44]	; (2a20 <_ZNK14BLELocalDevice7addressEv+0x44>)
    29f2:	f001 fdf7 	bl	45e4 <_ZN8HCIClass10readBdAddrEPh>
  sprintf(result, "%02x:%02x:%02x:%02x:%02x:%02x", addr[5], addr[4], addr[3], addr[2], addr[1], addr[0]);
    29f6:	7821      	ldrb	r1, [r4, #0]
    29f8:	7923      	ldrb	r3, [r4, #4]
    29fa:	7962      	ldrb	r2, [r4, #5]
    29fc:	9103      	str	r1, [sp, #12]
    29fe:	7861      	ldrb	r1, [r4, #1]
    2a00:	a807      	add	r0, sp, #28
    2a02:	9102      	str	r1, [sp, #8]
    2a04:	78a1      	ldrb	r1, [r4, #2]
    2a06:	9101      	str	r1, [sp, #4]
    2a08:	78e1      	ldrb	r1, [r4, #3]
    2a0a:	9100      	str	r1, [sp, #0]
    2a0c:	4905      	ldr	r1, [pc, #20]	; (2a24 <_ZNK14BLELocalDevice7addressEv+0x48>)
    2a0e:	f006 ff15 	bl	983c <siprintf>
  return result;
    2a12:	a907      	add	r1, sp, #28
    2a14:	0028      	movs	r0, r5
    2a16:	f003 fdb4 	bl	6582 <_ZN6StringC1EPKc>
}
    2a1a:	0028      	movs	r0, r5
    2a1c:	b00d      	add	sp, #52	; 0x34
    2a1e:	bd30      	pop	{r4, r5, pc}
    2a20:	20000470 	.word	0x20000470
    2a24:	0000b0dc 	.word	0x0000b0dc

00002a28 <_ZN14BLELocalDeviceC1Ev>:
BLELocalDevice::BLELocalDevice()
    2a28:	b510      	push	{r4, lr}
    2a2a:	0004      	movs	r4, r0
    2a2c:	f7ff fcaa 	bl	2384 <_ZN9BLEDeviceC1Ev>
    2a30:	4b02      	ldr	r3, [pc, #8]	; (2a3c <_ZN14BLELocalDeviceC1Ev+0x14>)
}
    2a32:	0020      	movs	r0, r4
BLELocalDevice::BLELocalDevice()
    2a34:	3308      	adds	r3, #8
    2a36:	6023      	str	r3, [r4, #0]
}
    2a38:	bd10      	pop	{r4, pc}
    2a3a:	46c0      	nop			; (mov r8, r8)
    2a3c:	0000b190 	.word	0x0000b190

00002a40 <_ZN14BLELocalDevice3endEv>:
{
    2a40:	b510      	push	{r4, lr}
  GATT.end();
    2a42:	4805      	ldr	r0, [pc, #20]	; (2a58 <_ZN14BLELocalDevice3endEv+0x18>)
    2a44:	f001 fad2 	bl	3fec <_ZN9GATTClass3endEv>
  HCI.end();
    2a48:	4804      	ldr	r0, [pc, #16]	; (2a5c <_ZN14BLELocalDevice3endEv+0x1c>)
    2a4a:	f001 fc05 	bl	4258 <_ZN8HCIClass3endEv>
  digitalWrite(NINA_RESETN, HIGH);
    2a4e:	2101      	movs	r1, #1
    2a50:	201f      	movs	r0, #31
    2a52:	f003 fcb3 	bl	63bc <digitalWrite>
}
    2a56:	bd10      	pop	{r4, pc}
    2a58:	20000304 	.word	0x20000304
    2a5c:	20000470 	.word	0x20000470

00002a60 <_ZN14BLELocalDevice5beginEv>:
{
    2a60:	b530      	push	{r4, r5, lr}
  pinMode(SPIWIFI_SS, OUTPUT);
    2a62:	2101      	movs	r1, #1
{
    2a64:	b087      	sub	sp, #28
    2a66:	0005      	movs	r5, r0
  pinMode(SPIWIFI_SS, OUTPUT);
    2a68:	201c      	movs	r0, #28
    2a6a:	f003 fc5b 	bl	6324 <pinMode>
  pinMode(NINA_RESETN, OUTPUT);
    2a6e:	2101      	movs	r1, #1
    2a70:	201f      	movs	r0, #31
    2a72:	f003 fc57 	bl	6324 <pinMode>
  digitalWrite(SPIWIFI_SS, LOW);
    2a76:	2100      	movs	r1, #0
    2a78:	201c      	movs	r0, #28
    2a7a:	f003 fc9f 	bl	63bc <digitalWrite>
  digitalWrite(NINA_RESETN, HIGH);
    2a7e:	2101      	movs	r1, #1
    2a80:	201f      	movs	r0, #31
    2a82:	f003 fc9b 	bl	63bc <digitalWrite>
  delay(100);
    2a86:	2064      	movs	r0, #100	; 0x64
    2a88:	f002 f9b0 	bl	4dec <delay>
  digitalWrite(NINA_RESETN, LOW);
    2a8c:	2100      	movs	r1, #0
    2a8e:	201f      	movs	r0, #31
    2a90:	f003 fc94 	bl	63bc <digitalWrite>
  delay(750);
    2a94:	481d      	ldr	r0, [pc, #116]	; (2b0c <_ZN14BLELocalDevice5beginEv+0xac>)
    2a96:	f002 f9a9 	bl	4dec <delay>
  if (!HCI.begin()) {
    2a9a:	4c1d      	ldr	r4, [pc, #116]	; (2b10 <_ZN14BLELocalDevice5beginEv+0xb0>)
    2a9c:	0020      	movs	r0, r4
    2a9e:	f001 fbcf 	bl	4240 <_ZN8HCIClass5beginEv>
    2aa2:	2800      	cmp	r0, #0
    2aa4:	d105      	bne.n	2ab2 <_ZN14BLELocalDevice5beginEv+0x52>
    end();
    2aa6:	0028      	movs	r0, r5
    2aa8:	f7ff ffca 	bl	2a40 <_ZN14BLELocalDevice3endEv>
    return 0;
    2aac:	2000      	movs	r0, #0
}
    2aae:	b007      	add	sp, #28
    2ab0:	bd30      	pop	{r4, r5, pc}
  delay(100);
    2ab2:	2064      	movs	r0, #100	; 0x64
    2ab4:	f002 f99a 	bl	4dec <delay>
  if (HCI.reset() != 0) {
    2ab8:	0020      	movs	r0, r4
    2aba:	f001 fd63 	bl	4584 <_ZN8HCIClass5resetEv>
    2abe:	2800      	cmp	r0, #0
    2ac0:	d1f1      	bne.n	2aa6 <_ZN14BLELocalDevice5beginEv+0x46>
  if (HCI.readLocalVersion(hciVer, hciRev, lmpVer, manufacturer, lmpSubVer) != 0) {
    2ac2:	ab05      	add	r3, sp, #20
    2ac4:	9301      	str	r3, [sp, #4]
    2ac6:	2312      	movs	r3, #18
    2ac8:	446b      	add	r3, sp
    2aca:	9300      	str	r3, [sp, #0]
    2acc:	210d      	movs	r1, #13
    2ace:	230e      	movs	r3, #14
    2ad0:	aa04      	add	r2, sp, #16
    2ad2:	446b      	add	r3, sp
    2ad4:	4469      	add	r1, sp
    2ad6:	0020      	movs	r0, r4
    2ad8:	f001 fd5e 	bl	4598 <_ZN8HCIClass16readLocalVersionERhRtS0_S1_S1_>
    2adc:	2800      	cmp	r0, #0
    2ade:	d1e2      	bne.n	2aa6 <_ZN14BLELocalDevice5beginEv+0x46>
  if (HCI.setEventMask(0x3FFFFFFFFFFFFFFF) != 0) {
    2ae0:	2201      	movs	r2, #1
    2ae2:	4b0c      	ldr	r3, [pc, #48]	; (2b14 <_ZN14BLELocalDevice5beginEv+0xb4>)
    2ae4:	4252      	negs	r2, r2
    2ae6:	0020      	movs	r0, r4
    2ae8:	f001 fdac 	bl	4644 <_ZN8HCIClass12setEventMaskEy>
    2aec:	2800      	cmp	r0, #0
    2aee:	d1da      	bne.n	2aa6 <_ZN14BLELocalDevice5beginEv+0x46>
  if (HCI.readLeBufferSize(pktLen, maxPkt) != 0) {
    2af0:	220f      	movs	r2, #15
    2af2:	2116      	movs	r1, #22
    2af4:	446a      	add	r2, sp
    2af6:	4469      	add	r1, sp
    2af8:	0020      	movs	r0, r4
    2afa:	f001 fdaf 	bl	465c <_ZN8HCIClass16readLeBufferSizeERtRh>
    2afe:	2800      	cmp	r0, #0
    2b00:	d1d1      	bne.n	2aa6 <_ZN14BLELocalDevice5beginEv+0x46>
  GATT.begin();
    2b02:	4805      	ldr	r0, [pc, #20]	; (2b18 <_ZN14BLELocalDevice5beginEv+0xb8>)
    2b04:	f001 fb30 	bl	4168 <_ZN9GATTClass5beginEv>
  return 1;
    2b08:	2001      	movs	r0, #1
    2b0a:	e7d0      	b.n	2aae <_ZN14BLELocalDevice5beginEv+0x4e>
    2b0c:	000002ee 	.word	0x000002ee
    2b10:	20000470 	.word	0x20000470
    2b14:	3fffffff 	.word	0x3fffffff
    2b18:	20000304 	.word	0x20000304

00002b1c <_ZN14BLELocalDevice20setAdvertisedServiceERK10BLEService>:
{
    2b1c:	b510      	push	{r4, lr}
  setAdvertisedServiceUuid(service.uuid());
    2b1e:	0008      	movs	r0, r1
    2b20:	f7ff fc92 	bl	2448 <_ZNK10BLEService4uuidEv>
    2b24:	0001      	movs	r1, r0
  GAP.setAdvertisedServiceUuid(advertisedServiceUuid);
    2b26:	4802      	ldr	r0, [pc, #8]	; (2b30 <_ZN14BLELocalDevice20setAdvertisedServiceERK10BLEService+0x14>)
    2b28:	f001 f920 	bl	3d6c <_ZN8GAPClass24setAdvertisedServiceUuidEPKc>
}
    2b2c:	bd10      	pop	{r4, pc}
    2b2e:	46c0      	nop			; (mov r8, r8)
    2b30:	200002dc 	.word	0x200002dc

00002b34 <_ZN14BLELocalDevice12setLocalNameEPKc>:
{
    2b34:	b510      	push	{r4, lr}
  GAP.setLocalName(localName);
    2b36:	4802      	ldr	r0, [pc, #8]	; (2b40 <_ZN14BLELocalDevice12setLocalNameEPKc+0xc>)
    2b38:	f001 f91a 	bl	3d70 <_ZN8GAPClass12setLocalNameEPKc>
}
    2b3c:	bd10      	pop	{r4, pc}
    2b3e:	46c0      	nop			; (mov r8, r8)
    2b40:	200002dc 	.word	0x200002dc

00002b44 <_ZN14BLELocalDevice10addServiceER10BLEService>:
{
    2b44:	b510      	push	{r4, lr}
  GATT.addService(service);
    2b46:	4802      	ldr	r0, [pc, #8]	; (2b50 <_ZN14BLELocalDevice10addServiceER10BLEService+0xc>)
    2b48:	f001 fb28 	bl	419c <_ZN9GATTClass10addServiceER10BLEService>
}
    2b4c:	bd10      	pop	{r4, pc}
    2b4e:	46c0      	nop			; (mov r8, r8)
    2b50:	20000304 	.word	0x20000304

00002b54 <_ZN14BLELocalDevice9advertiseEv>:
{
    2b54:	b510      	push	{r4, lr}
  return GAP.advertise();
    2b56:	4802      	ldr	r0, [pc, #8]	; (2b60 <_ZN14BLELocalDevice9advertiseEv+0xc>)
    2b58:	f001 f90e 	bl	3d78 <_ZN8GAPClass9advertiseEv>
}
    2b5c:	bd10      	pop	{r4, pc}
    2b5e:	46c0      	nop			; (mov r8, r8)
    2b60:	200002dc 	.word	0x200002dc

00002b64 <_GLOBAL__sub_I__ZN14BLELocalDeviceC2Ev>:
void BLELocalDevice::noDebug()
{
  HCI.noDebug();
}

BLELocalDevice BLE;
    2b64:	b510      	push	{r4, lr}
    2b66:	4c05      	ldr	r4, [pc, #20]	; (2b7c <_GLOBAL__sub_I__ZN14BLELocalDeviceC2Ev+0x18>)
    2b68:	0020      	movs	r0, r4
    2b6a:	f7ff ff5d 	bl	2a28 <_ZN14BLELocalDeviceC1Ev>
    2b6e:	4a04      	ldr	r2, [pc, #16]	; (2b80 <_GLOBAL__sub_I__ZN14BLELocalDeviceC2Ev+0x1c>)
    2b70:	4904      	ldr	r1, [pc, #16]	; (2b84 <_GLOBAL__sub_I__ZN14BLELocalDeviceC2Ev+0x20>)
    2b72:	0020      	movs	r0, r4
    2b74:	f004 f956 	bl	6e24 <__aeabi_atexit>
    2b78:	bd10      	pop	{r4, pc}
    2b7a:	46c0      	nop			; (mov r8, r8)
    2b7c:	200002ac 	.word	0x200002ac
    2b80:	20000000 	.word	0x20000000
    2b84:	00002989 	.word	0x00002989

00002b88 <_ZN14BLELocalDevice4rssiEv>:
{
    2b88:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  BLEDevice central = ATT.central();
    2b8a:	490a      	ldr	r1, [pc, #40]	; (2bb4 <_ZN14BLELocalDevice4rssiEv+0x2c>)
    2b8c:	a801      	add	r0, sp, #4
    2b8e:	f000 f9bb 	bl	2f08 <_ZN8ATTClass7centralEv>
  if (central) {
    2b92:	a801      	add	r0, sp, #4
    2b94:	f7ff fba8 	bl	22e8 <_ZNK9BLEDevicecvbEv>
  return 127;
    2b98:	247f      	movs	r4, #127	; 0x7f
  if (central) {
    2b9a:	2800      	cmp	r0, #0
    2b9c:	d003      	beq.n	2ba6 <_ZN14BLELocalDevice4rssiEv+0x1e>
    return central.rssi();
    2b9e:	a801      	add	r0, sp, #4
    2ba0:	f7ff fb94 	bl	22cc <_ZN9BLEDevice4rssiEv>
    2ba4:	0004      	movs	r4, r0
  BLEDevice central = ATT.central();
    2ba6:	a801      	add	r0, sp, #4
    2ba8:	f7ff fb4d 	bl	2246 <_ZN9BLEDeviceD1Ev>
}
    2bac:	0020      	movs	r0, r4
    2bae:	b004      	add	sp, #16
    2bb0:	bd10      	pop	{r4, pc}
    2bb2:	46c0      	nop			; (mov r8, r8)
    2bb4:	200002b8 	.word	0x200002b8

00002bb8 <_ZNK15BLELocalService4typeEv>:
}

enum BLEAttributeType BLELocalService::type() const
{
  return BLETypeService;
}
    2bb8:	20a0      	movs	r0, #160	; 0xa0
    2bba:	0180      	lsls	r0, r0, #6
    2bbc:	4770      	bx	lr
	...

00002bc0 <_ZN15BLELocalServiceC1EPKc>:
BLELocalService::BLELocalService(const char* uuid) :
    2bc0:	b510      	push	{r4, lr}
    2bc2:	0004      	movs	r4, r0
  _endHandle(0x0000)
    2bc4:	f7ff fab0 	bl	2128 <_ZN12BLEAttributeC1EPKc>
    2bc8:	4b05      	ldr	r3, [pc, #20]	; (2be0 <_ZN15BLELocalServiceC1EPKc+0x20>)
}
    2bca:	0020      	movs	r0, r4
  _endHandle(0x0000)
    2bcc:	3308      	adds	r3, #8
    2bce:	6023      	str	r3, [r4, #0]
    2bd0:	2300      	movs	r3, #0
    2bd2:	8423      	strh	r3, [r4, #32]
    2bd4:	8463      	strh	r3, [r4, #34]	; 0x22
  _last(NULL)
    2bd6:	6263      	str	r3, [r4, #36]	; 0x24
    2bd8:	62a3      	str	r3, [r4, #40]	; 0x28
    2bda:	62e3      	str	r3, [r4, #44]	; 0x2c
}
    2bdc:	bd10      	pop	{r4, pc}
    2bde:	46c0      	nop			; (mov r8, r8)
    2be0:	0000b1c4 	.word	0x0000b1c4

00002be4 <_ZN15BLELocalService10setHandlesEtt>:
  }
}

void BLELocalService::setHandles(uint16_t start, uint16_t end)
{
  _startHandle = start;
    2be4:	8401      	strh	r1, [r0, #32]
  _endHandle = end;
    2be6:	8442      	strh	r2, [r0, #34]	; 0x22
}
    2be8:	4770      	bx	lr

00002bea <_ZNK15BLELocalService11startHandleEv>:

uint16_t BLELocalService::startHandle() const
{
  return _startHandle;
    2bea:	8c00      	ldrh	r0, [r0, #32]
}
    2bec:	4770      	bx	lr

00002bee <_ZNK15BLELocalService9endHandleEv>:

uint16_t BLELocalService::endHandle() const
{
  return _endHandle;
    2bee:	8c40      	ldrh	r0, [r0, #34]	; 0x22
}
    2bf0:	4770      	bx	lr

00002bf2 <_ZNK15BLELocalService19characteristicCountEv>:

unsigned int BLELocalService::characteristicCount() const
{
  return _characteristics.size();
    2bf2:	6a40      	ldr	r0, [r0, #36]	; 0x24
}
    2bf4:	4770      	bx	lr

00002bf6 <_ZNK15BLELocalService14characteristicEj>:
  if (index >= _size) {
    2bf6:	6a42      	ldr	r2, [r0, #36]	; 0x24
    return T();
    2bf8:	2300      	movs	r3, #0
  if (index >= _size) {
    2bfa:	4291      	cmp	r1, r2
    2bfc:	d207      	bcs.n	2c0e <_ZNK15BLELocalService14characteristicEj+0x18>
  for (unsigned int i = 0; i < index; i++) {
    2bfe:	2200      	movs	r2, #0
  BLELinkedListNode<T>* itemNode = _root;
    2c00:	6a83      	ldr	r3, [r0, #40]	; 0x28
  for (unsigned int i = 0; i < index; i++) {
    2c02:	4291      	cmp	r1, r2
    2c04:	d002      	beq.n	2c0c <_ZNK15BLELocalService14characteristicEj+0x16>
    itemNode = itemNode->next;
    2c06:	685b      	ldr	r3, [r3, #4]
  for (unsigned int i = 0; i < index; i++) {
    2c08:	3201      	adds	r2, #1
    2c0a:	e7fa      	b.n	2c02 <_ZNK15BLELocalService14characteristicEj+0xc>
  return itemNode->data;
    2c0c:	681b      	ldr	r3, [r3, #0]

BLELocalCharacteristic* BLELocalService::characteristic(unsigned int index) const
{
  return _characteristics.get(index);
}
    2c0e:	0018      	movs	r0, r3
    2c10:	4770      	bx	lr

00002c12 <_ZN15BLELocalService17addCharacteristicEP22BLELocalCharacteristic>:

void BLELocalService::addCharacteristic(BLELocalCharacteristic* characteristic)
{
    2c12:	b570      	push	{r4, r5, r6, lr}
    2c14:	0004      	movs	r4, r0
  characteristic->retain();
    2c16:	0008      	movs	r0, r1
{
    2c18:	000d      	movs	r5, r1
  characteristic->retain();
    2c1a:	f7ff faa2 	bl	2162 <_ZN12BLEAttribute6retainEv>
  BLELinkedListNode<T>* itemNode = new BLELinkedListNode<T>();
    2c1e:	2008      	movs	r0, #8
    2c20:	f002 f92a 	bl	4e78 <_Znwj>
    2c24:	2300      	movs	r3, #0
    2c26:	6043      	str	r3, [r0, #4]
  if (_root == NULL) {
    2c28:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  itemNode->data = item;
    2c2a:	6005      	str	r5, [r0, #0]
  if (_root == NULL) {
    2c2c:	2b00      	cmp	r3, #0
    2c2e:	d105      	bne.n	2c3c <_ZN15BLELocalService17addCharacteristicEP22BLELocalCharacteristic+0x2a>
    _root = itemNode;
    2c30:	62a0      	str	r0, [r4, #40]	; 0x28
  _size++;
    2c32:	6a63      	ldr	r3, [r4, #36]	; 0x24
  _last = itemNode;
    2c34:	62e0      	str	r0, [r4, #44]	; 0x2c
  _size++;
    2c36:	3301      	adds	r3, #1
    2c38:	6263      	str	r3, [r4, #36]	; 0x24

  _characteristics.add(characteristic);
}
    2c3a:	bd70      	pop	{r4, r5, r6, pc}
    _last->next = itemNode;
    2c3c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    2c3e:	6058      	str	r0, [r3, #4]
    2c40:	e7f7      	b.n	2c32 <_ZN15BLELocalService17addCharacteristicEP22BLELocalCharacteristic+0x20>

00002c42 <_ZN15BLELocalService17addCharacteristicER17BLECharacteristic>:
{
    2c42:	b510      	push	{r4, lr}
    2c44:	0004      	movs	r4, r0
  BLELocalCharacteristic* localCharacteristic = characteristic.local();
    2c46:	0008      	movs	r0, r1
    2c48:	f7ff fafb 	bl	2242 <_ZN17BLECharacteristic5localEv>
    2c4c:	1e01      	subs	r1, r0, #0
  if (localCharacteristic) {
    2c4e:	d002      	beq.n	2c56 <_ZN15BLELocalService17addCharacteristicER17BLECharacteristic+0x14>
    addCharacteristic(localCharacteristic);
    2c50:	0020      	movs	r0, r4
    2c52:	f7ff ffde 	bl	2c12 <_ZN15BLELocalService17addCharacteristicEP22BLELocalCharacteristic>
}
    2c56:	bd10      	pop	{r4, pc}

00002c58 <_ZN13BLELinkedListIP22BLELocalCharacteristicE5clearEv>:
template <typename T> void BLELinkedList<T>::clear()
    2c58:	b570      	push	{r4, r5, r6, lr}
  for (unsigned int i = 0; i < _size; i++) {
    2c5a:	2500      	movs	r5, #0
template <typename T> void BLELinkedList<T>::clear()
    2c5c:	0004      	movs	r4, r0
  BLELinkedListNode<T>* itemNode = _root;
    2c5e:	6840      	ldr	r0, [r0, #4]
  for (unsigned int i = 0; i < _size; i++) {
    2c60:	6823      	ldr	r3, [r4, #0]
    2c62:	429d      	cmp	r5, r3
    2c64:	d205      	bcs.n	2c72 <_ZN13BLELinkedListIP22BLELocalCharacteristicE5clearEv+0x1a>
    itemNode = itemNode->next;
    2c66:	6846      	ldr	r6, [r0, #4]
  for (unsigned int i = 0; i < _size; i++) {
    2c68:	3501      	adds	r5, #1
    delete n;
    2c6a:	f002 f909 	bl	4e80 <_ZdlPv>
    itemNode = itemNode->next;
    2c6e:	0030      	movs	r0, r6
  for (unsigned int i = 0; i < _size; i++) {
    2c70:	e7f6      	b.n	2c60 <_ZN13BLELinkedListIP22BLELocalCharacteristicE5clearEv+0x8>
  _size = 0;
    2c72:	2300      	movs	r3, #0
    2c74:	6023      	str	r3, [r4, #0]
  _root = NULL;
    2c76:	6063      	str	r3, [r4, #4]
  _last = NULL;
    2c78:	60a3      	str	r3, [r4, #8]
}
    2c7a:	bd70      	pop	{r4, r5, r6, pc}

00002c7c <_ZN15BLELocalServiceD1Ev>:
BLELocalService::~BLELocalService()
    2c7c:	b570      	push	{r4, r5, r6, lr}
    2c7e:	0004      	movs	r4, r0
  for (unsigned int i = 0; i < characteristicCount(); i++) {
    2c80:	2500      	movs	r5, #0
BLELocalService::~BLELocalService()
    2c82:	4b14      	ldr	r3, [pc, #80]	; (2cd4 <_ZN15BLELocalServiceD1Ev+0x58>)
    2c84:	3308      	adds	r3, #8
    2c86:	6003      	str	r3, [r0, #0]
  for (unsigned int i = 0; i < characteristicCount(); i++) {
    2c88:	6a63      	ldr	r3, [r4, #36]	; 0x24
    2c8a:	429d      	cmp	r5, r3
    2c8c:	d214      	bcs.n	2cb8 <_ZN15BLELocalServiceD1Ev+0x3c>
  for (unsigned int i = 0; i < index; i++) {
    2c8e:	2200      	movs	r2, #0
  BLELinkedListNode<T>* itemNode = _root;
    2c90:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  for (unsigned int i = 0; i < index; i++) {
    2c92:	4295      	cmp	r5, r2
    2c94:	d002      	beq.n	2c9c <_ZN15BLELocalServiceD1Ev+0x20>
    itemNode = itemNode->next;
    2c96:	685b      	ldr	r3, [r3, #4]
  for (unsigned int i = 0; i < index; i++) {
    2c98:	3201      	adds	r2, #1
    2c9a:	e7fa      	b.n	2c92 <_ZN15BLELocalServiceD1Ev+0x16>
  return itemNode->data;
    2c9c:	681e      	ldr	r6, [r3, #0]
    if (c->release() <= 0) {
    2c9e:	0030      	movs	r0, r6
    2ca0:	f7ff fa64 	bl	216c <_ZN12BLEAttribute7releaseEv>
    2ca4:	2800      	cmp	r0, #0
    2ca6:	dc05      	bgt.n	2cb4 <_ZN15BLELocalServiceD1Ev+0x38>
      delete c;
    2ca8:	2e00      	cmp	r6, #0
    2caa:	d003      	beq.n	2cb4 <_ZN15BLELocalServiceD1Ev+0x38>
    2cac:	6833      	ldr	r3, [r6, #0]
    2cae:	0030      	movs	r0, r6
    2cb0:	685b      	ldr	r3, [r3, #4]
    2cb2:	4798      	blx	r3
  for (unsigned int i = 0; i < characteristicCount(); i++) {
    2cb4:	3501      	adds	r5, #1
    2cb6:	e7e7      	b.n	2c88 <_ZN15BLELocalServiceD1Ev+0xc>
  _characteristics.clear();
    2cb8:	0025      	movs	r5, r4
    2cba:	3524      	adds	r5, #36	; 0x24
    2cbc:	0028      	movs	r0, r5
    2cbe:	f7ff ffcb 	bl	2c58 <_ZN13BLELinkedListIP22BLELocalCharacteristicE5clearEv>
  clear();
    2cc2:	0028      	movs	r0, r5
    2cc4:	f7ff ffc8 	bl	2c58 <_ZN13BLELinkedListIP22BLELocalCharacteristicE5clearEv>
BLELocalService::~BLELocalService()
    2cc8:	0020      	movs	r0, r4
    2cca:	f7ff fa23 	bl	2114 <_ZN12BLEAttributeD1Ev>
}
    2cce:	0020      	movs	r0, r4
    2cd0:	bd70      	pop	{r4, r5, r6, pc}
    2cd2:	46c0      	nop			; (mov r8, r8)
    2cd4:	0000b1c4 	.word	0x0000b1c4

00002cd8 <_ZN15BLELocalServiceD0Ev>:
BLELocalService::~BLELocalService()
    2cd8:	b510      	push	{r4, lr}
    2cda:	0004      	movs	r4, r0
}
    2cdc:	f7ff ffce 	bl	2c7c <_ZN15BLELocalServiceD1Ev>
    2ce0:	0020      	movs	r0, r4
    2ce2:	f002 f8cd 	bl	4e80 <_ZdlPv>
    2ce6:	0020      	movs	r0, r4
    2ce8:	bd10      	pop	{r4, pc}
	...

00002cec <_ZN8ATTClassD1Ev>:
{
  memset(_peerAddress, 0x00, sizeof(_peerAddress));
  memset(_eventHandlers, 0x00, sizeof(_eventHandlers));
}

ATTClass::~ATTClass()
    2cec:	4b05      	ldr	r3, [pc, #20]	; (2d04 <_ZN8ATTClassD1Ev+0x18>)
    2cee:	b510      	push	{r4, lr}
    2cf0:	3308      	adds	r3, #8
    2cf2:	0004      	movs	r4, r0
    2cf4:	6003      	str	r3, [r0, #0]
{
  if (_longWriteValue) {
    2cf6:	6940      	ldr	r0, [r0, #20]
    2cf8:	2800      	cmp	r0, #0
    2cfa:	d001      	beq.n	2d00 <_ZN8ATTClassD1Ev+0x14>
    free(_longWriteValue);
    2cfc:	f006 f81c 	bl	8d38 <free>
  }
}
    2d00:	0020      	movs	r0, r4
    2d02:	bd10      	pop	{r4, pc}
    2d04:	0000b1d8 	.word	0x0000b1d8

00002d08 <_ZN8ATTClassD0Ev>:
ATTClass::~ATTClass()
    2d08:	b510      	push	{r4, lr}
    2d0a:	0004      	movs	r4, r0
}
    2d0c:	f7ff ffee 	bl	2cec <_ZN8ATTClassD1Ev>
    2d10:	0020      	movs	r0, r4
    2d12:	f002 f8b5 	bl	4e80 <_ZdlPv>
    2d16:	0020      	movs	r0, r4
    2d18:	bd10      	pop	{r4, pc}
	...

00002d1c <_ZN8ATTClass9sendErrorEthth.constprop.3>:
void ATTClass::handleCnf(uint16_t /*connectionHandle*/, uint8_t /*dlen*/, uint8_t /*data*/[])
{
  _cnf = true;
}

void ATTClass::sendError(uint16_t connectionHandle, uint8_t opcode, uint16_t handle, uint8_t code)
    2d1c:	b5f0      	push	{r4, r5, r6, r7, lr}
  struct __attribute__ ((packed)) {
    uint8_t op;
    uint8_t opcode;
    uint16_t handle;
    uint8_t code;
  } attError = { ATT_OP_ERROR, opcode, handle, code };
    2d1e:	2505      	movs	r5, #5
void ATTClass::sendError(uint16_t connectionHandle, uint8_t opcode, uint16_t handle, uint8_t code)
    2d20:	b087      	sub	sp, #28
  } attError = { ATT_OP_ERROR, opcode, handle, code };
    2d22:	ac04      	add	r4, sp, #16
void ATTClass::sendError(uint16_t connectionHandle, uint8_t opcode, uint16_t handle, uint8_t code)
    2d24:	9002      	str	r0, [sp, #8]
    2d26:	000f      	movs	r7, r1
    2d28:	0016      	movs	r6, r2
  } attError = { ATT_OP_ERROR, opcode, handle, code };
    2d2a:	2100      	movs	r1, #0
    2d2c:	002a      	movs	r2, r5
    2d2e:	0020      	movs	r0, r4
void ATTClass::sendError(uint16_t connectionHandle, uint8_t opcode, uint16_t handle, uint8_t code)
    2d30:	9303      	str	r3, [sp, #12]
  } attError = { ATT_OP_ERROR, opcode, handle, code };
    2d32:	f006 f847 	bl	8dc4 <memset>
    2d36:	2301      	movs	r3, #1
    2d38:	7023      	strb	r3, [r4, #0]
    2d3a:	466b      	mov	r3, sp
    2d3c:	7b1b      	ldrb	r3, [r3, #12]
    2d3e:	7067      	strb	r7, [r4, #1]
    2d40:	7123      	strb	r3, [r4, #4]
    2d42:	8066      	strh	r6, [r4, #2]

  HCI.sendAclPkt(connectionHandle, ATT_CID, sizeof(attError), &attError);
    2d44:	002b      	movs	r3, r5
    2d46:	9400      	str	r4, [sp, #0]
    2d48:	2204      	movs	r2, #4
    2d4a:	9902      	ldr	r1, [sp, #8]
    2d4c:	4802      	ldr	r0, [pc, #8]	; (2d58 <_ZN8ATTClass9sendErrorEthth.constprop.3+0x3c>)
    2d4e:	f001 fabf 	bl	42d0 <_ZN8HCIClass10sendAclPktEthhPv>
}
    2d52:	b007      	add	sp, #28
    2d54:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2d56:	46c0      	nop			; (mov r8, r8)
    2d58:	20000470 	.word	0x20000470

00002d5c <_ZN8ATTClassC1Ev>:
  _longWriteValueLength(0)
    2d5c:	4b0d      	ldr	r3, [pc, #52]	; (2d94 <_ZN8ATTClassC1Ev+0x38>)
    2d5e:	2201      	movs	r2, #1
    2d60:	3308      	adds	r3, #8
ATTClass::ATTClass() :
    2d62:	b570      	push	{r4, r5, r6, lr}
  _longWriteValueLength(0)
    2d64:	2500      	movs	r5, #0
    2d66:	6003      	str	r3, [r0, #0]
    2d68:	2317      	movs	r3, #23
ATTClass::ATTClass() :
    2d6a:	0004      	movs	r4, r0
  _longWriteValueLength(0)
    2d6c:	4252      	negs	r2, r2
    2d6e:	8083      	strh	r3, [r0, #4]
    2d70:	81c3      	strh	r3, [r0, #14]
    2d72:	8245      	strh	r5, [r0, #18]
    2d74:	6145      	str	r5, [r0, #20]
    2d76:	8305      	strh	r5, [r0, #24]
  memset(_peerAddress, 0x00, sizeof(_peerAddress));
    2d78:	0029      	movs	r1, r5
  _longWriteValueLength(0)
    2d7a:	80c2      	strh	r2, [r0, #6]
  memset(_peerAddress, 0x00, sizeof(_peerAddress));
    2d7c:	3207      	adds	r2, #7
    2d7e:	3008      	adds	r0, #8
    2d80:	f006 f820 	bl	8dc4 <memset>
  memset(_eventHandlers, 0x00, sizeof(_eventHandlers));
    2d84:	0020      	movs	r0, r4
    2d86:	0029      	movs	r1, r5
    2d88:	2208      	movs	r2, #8
    2d8a:	301c      	adds	r0, #28
    2d8c:	f006 f81a 	bl	8dc4 <memset>
}
    2d90:	0020      	movs	r0, r4
    2d92:	bd70      	pop	{r4, r5, r6, pc}
    2d94:	0000b1d8 	.word	0x0000b1d8

00002d98 <_ZN8ATTClass9setMaxMtuEt>:
  _maxMtu = maxMtu;
    2d98:	8081      	strh	r1, [r0, #4]
}
    2d9a:	4770      	bx	lr

00002d9c <_ZN8ATTClass13addConnectionEthhPhttth>:
{
    2d9c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    2d9e:	0004      	movs	r4, r0
    2da0:	000d      	movs	r5, r1
  if (role == 1) {
    2da2:	2a01      	cmp	r2, #1
    2da4:	d116      	bne.n	2dd4 <_ZN8ATTClass13addConnectionEthhPhttth+0x38>
    memcpy(_peerAddress, peerBdaddr, sizeof(_peerAddress));
    2da6:	0006      	movs	r6, r0
    _mtu = 23;
    2da8:	2317      	movs	r3, #23
    memcpy(_peerAddress, peerBdaddr, sizeof(_peerAddress));
    2daa:	3608      	adds	r6, #8
    _connectionHandle = handle;
    2dac:	80e1      	strh	r1, [r4, #6]
    memcpy(_peerAddress, peerBdaddr, sizeof(_peerAddress));
    2dae:	3205      	adds	r2, #5
    _mtu = 23;
    2db0:	81c3      	strh	r3, [r0, #14]
    memcpy(_peerAddress, peerBdaddr, sizeof(_peerAddress));
    2db2:	9908      	ldr	r1, [sp, #32]
    2db4:	0030      	movs	r0, r6
    2db6:	f005 ffea 	bl	8d8e <memcpy>
    if (_eventHandlers[BLEConnected]) {
    2dba:	69e4      	ldr	r4, [r4, #28]
    2dbc:	2c00      	cmp	r4, #0
    2dbe:	d009      	beq.n	2dd4 <_ZN8ATTClass13addConnectionEthhPhttth+0x38>
      _eventHandlers[BLEConnected](BLEDevice(_connectionHandle, _peerAddress));
    2dc0:	0032      	movs	r2, r6
    2dc2:	0029      	movs	r1, r5
    2dc4:	a801      	add	r0, sp, #4
    2dc6:	f7ff faef 	bl	23a8 <_ZN9BLEDeviceC1EtPh>
    2dca:	a801      	add	r0, sp, #4
    2dcc:	47a0      	blx	r4
    2dce:	a801      	add	r0, sp, #4
    2dd0:	f7ff fa39 	bl	2246 <_ZN9BLEDeviceD1Ev>
}
    2dd4:	bd7f      	pop	{r0, r1, r2, r3, r4, r5, r6, pc}
	...

00002dd8 <_ZN8ATTClass16removeConnectionEht>:
{
    2dd8:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (_connectionHandle == handle) {
    2dda:	88c3      	ldrh	r3, [r0, #6]
{
    2ddc:	b089      	sub	sp, #36	; 0x24
    2dde:	0004      	movs	r4, r0
  if (_connectionHandle == handle) {
    2de0:	428b      	cmp	r3, r1
    2de2:	d153      	bne.n	2e8c <_ZN8ATTClass16removeConnectionEht+0xb4>
    BLEDevice bleDevice(_connectionHandle, _peerAddress);
    2de4:	0002      	movs	r2, r0
    2de6:	0019      	movs	r1, r3
    2de8:	3208      	adds	r2, #8
    2dea:	a802      	add	r0, sp, #8
    2dec:	9201      	str	r2, [sp, #4]
    for (uint16_t i = 0; i < GATT.attributeCount(); i++) {
    2dee:	2500      	movs	r5, #0
    BLEDevice bleDevice(_connectionHandle, _peerAddress);
    2df0:	f7ff fada 	bl	23a8 <_ZN9BLEDeviceC1EtPh>
    for (uint16_t i = 0; i < GATT.attributeCount(); i++) {
    2df4:	4e26      	ldr	r6, [pc, #152]	; (2e90 <_ZN8ATTClass16removeConnectionEht+0xb8>)
    2df6:	0030      	movs	r0, r6
    2df8:	f001 f8e4 	bl	3fc4 <_ZNK9GATTClass14attributeCountEv>
    2dfc:	4285      	cmp	r5, r0
    2dfe:	d222      	bcs.n	2e46 <_ZN8ATTClass16removeConnectionEht+0x6e>
      BLEAttribute* attribute = GATT.attribute(i);
    2e00:	0029      	movs	r1, r5
    2e02:	0030      	movs	r0, r6
    2e04:	f001 f905 	bl	4012 <_ZNK9GATTClass9attributeEj>
      if (attribute->type() == BLETypeCharacteristic) {
    2e08:	6803      	ldr	r3, [r0, #0]
      BLEAttribute* attribute = GATT.attribute(i);
    2e0a:	0007      	movs	r7, r0
      if (attribute->type() == BLETypeCharacteristic) {
    2e0c:	689b      	ldr	r3, [r3, #8]
    2e0e:	4798      	blx	r3
    2e10:	4b20      	ldr	r3, [pc, #128]	; (2e94 <_ZN8ATTClass16removeConnectionEht+0xbc>)
    2e12:	4298      	cmp	r0, r3
    2e14:	d114      	bne.n	2e40 <_ZN8ATTClass16removeConnectionEht+0x68>
    2e16:	2206      	movs	r2, #6
    2e18:	2012      	movs	r0, #18
    2e1a:	4b1f      	ldr	r3, [pc, #124]	; (2e98 <_ZN8ATTClass16removeConnectionEht+0xc0>)
    2e1c:	ae05      	add	r6, sp, #20
    2e1e:	9305      	str	r3, [sp, #20]
    2e20:	ab02      	add	r3, sp, #8
    2e22:	889b      	ldrh	r3, [r3, #4]
    2e24:	80b3      	strh	r3, [r6, #4]
    2e26:	ab02      	add	r3, sp, #8
    2e28:	1899      	adds	r1, r3, r2
    2e2a:	18c0      	adds	r0, r0, r3
    2e2c:	f005 ffaf 	bl	8d8e <memcpy>
        characteristic->writeCccdValue(bleDevice, 0x0000);
    2e30:	0038      	movs	r0, r7
    2e32:	2200      	movs	r2, #0
    2e34:	0031      	movs	r1, r6
    2e36:	f7ff fd37 	bl	28a8 <_ZN22BLELocalCharacteristic14writeCccdValueE9BLEDevicet>
    2e3a:	0030      	movs	r0, r6
    2e3c:	f7ff fa03 	bl	2246 <_ZN9BLEDeviceD1Ev>
    for (uint16_t i = 0; i < GATT.attributeCount(); i++) {
    2e40:	3501      	adds	r5, #1
    2e42:	b2ad      	uxth	r5, r5
    2e44:	e7d6      	b.n	2df4 <_ZN8ATTClass16removeConnectionEht+0x1c>
    if (_eventHandlers[BLEDisconnected]) {
    2e46:	6a26      	ldr	r6, [r4, #32]
    2e48:	2e00      	cmp	r6, #0
    2e4a:	d011      	beq.n	2e70 <_ZN8ATTClass16removeConnectionEht+0x98>
    2e4c:	2206      	movs	r2, #6
    2e4e:	2012      	movs	r0, #18
    2e50:	4b11      	ldr	r3, [pc, #68]	; (2e98 <_ZN8ATTClass16removeConnectionEht+0xc0>)
    2e52:	ad05      	add	r5, sp, #20
    2e54:	9305      	str	r3, [sp, #20]
    2e56:	ab02      	add	r3, sp, #8
    2e58:	889b      	ldrh	r3, [r3, #4]
    2e5a:	80ab      	strh	r3, [r5, #4]
    2e5c:	ab02      	add	r3, sp, #8
    2e5e:	1899      	adds	r1, r3, r2
    2e60:	18c0      	adds	r0, r0, r3
    2e62:	f005 ff94 	bl	8d8e <memcpy>
      _eventHandlers[BLEDisconnected](bleDevice);
    2e66:	0028      	movs	r0, r5
    2e68:	47b0      	blx	r6
    2e6a:	0028      	movs	r0, r5
    2e6c:	f7ff f9eb 	bl	2246 <_ZN9BLEDeviceD1Ev>
    _connectionHandle = 0xffff;
    2e70:	2301      	movs	r3, #1
    2e72:	425b      	negs	r3, r3
    2e74:	80e3      	strh	r3, [r4, #6]
    memset(_peerAddress, 0x00, sizeof(_peerAddress));
    2e76:	2206      	movs	r2, #6
    2e78:	2100      	movs	r1, #0
    2e7a:	9801      	ldr	r0, [sp, #4]
    2e7c:	f005 ffa2 	bl	8dc4 <memset>
    _longWriteHandle = 0x0000;
    2e80:	2300      	movs	r3, #0
    BLEDevice bleDevice(_connectionHandle, _peerAddress);
    2e82:	a802      	add	r0, sp, #8
    _longWriteHandle = 0x0000;
    2e84:	8263      	strh	r3, [r4, #18]
    _longWriteValueLength = 0;
    2e86:	8323      	strh	r3, [r4, #24]
    BLEDevice bleDevice(_connectionHandle, _peerAddress);
    2e88:	f7ff f9dd 	bl	2246 <_ZN9BLEDeviceD1Ev>
}
    2e8c:	b009      	add	sp, #36	; 0x24
    2e8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2e90:	20000304 	.word	0x20000304
    2e94:	00002803 	.word	0x00002803
    2e98:	0000b104 	.word	0x0000b104

00002e9c <_ZNK8ATTClass9connectedEv>:
  return (_connectionHandle != 0xffff);
    2e9c:	4b03      	ldr	r3, [pc, #12]	; (2eac <_ZNK8ATTClass9connectedEv+0x10>)
    2e9e:	88c0      	ldrh	r0, [r0, #6]
    2ea0:	18c0      	adds	r0, r0, r3
    2ea2:	1e43      	subs	r3, r0, #1
    2ea4:	4198      	sbcs	r0, r3
    2ea6:	b2c0      	uxtb	r0, r0
}
    2ea8:	4770      	bx	lr
    2eaa:	46c0      	nop			; (mov r8, r8)
    2eac:	ffff0001 	.word	0xffff0001

00002eb0 <_ZNK8ATTClass9connectedEtPKh>:
{
    2eb0:	b510      	push	{r4, lr}
    2eb2:	000c      	movs	r4, r1
    2eb4:	0011      	movs	r1, r2
  return ((_connectionHandle == handle) && memcmp(_peerAddress, address, 6) == 0);
    2eb6:	88c2      	ldrh	r2, [r0, #6]
    2eb8:	2300      	movs	r3, #0
    2eba:	42a2      	cmp	r2, r4
    2ebc:	d106      	bne.n	2ecc <_ZNK8ATTClass9connectedEtPKh+0x1c>
    2ebe:	3008      	adds	r0, #8
    2ec0:	2206      	movs	r2, #6
    2ec2:	f005 ff55 	bl	8d70 <memcmp>
    2ec6:	4243      	negs	r3, r0
    2ec8:	4143      	adcs	r3, r0
    2eca:	b2db      	uxtb	r3, r3
}
    2ecc:	0018      	movs	r0, r3
    2ece:	bd10      	pop	{r4, pc}

00002ed0 <_ZN8ATTClass10disconnectEv>:
{
    2ed0:	b510      	push	{r4, lr}
  if (_connectionHandle != 0xffff) {
    2ed2:	4b0b      	ldr	r3, [pc, #44]	; (2f00 <_ZN8ATTClass10disconnectEv+0x30>)
    2ed4:	88c1      	ldrh	r1, [r0, #6]
{
    2ed6:	0004      	movs	r4, r0
  if (_connectionHandle != 0xffff) {
    2ed8:	4299      	cmp	r1, r3
    2eda:	d101      	bne.n	2ee0 <_ZN8ATTClass10disconnectEv+0x10>
  return false;
    2edc:	2000      	movs	r0, #0
}
    2ede:	bd10      	pop	{r4, pc}
    if (HCI.disconnect(_connectionHandle) != 0) {
    2ee0:	4808      	ldr	r0, [pc, #32]	; (2f04 <_ZN8ATTClass10disconnectEv+0x34>)
    2ee2:	f001 fce1 	bl	48a8 <_ZN8HCIClass10disconnectEt>
    2ee6:	1e01      	subs	r1, r0, #0
    2ee8:	d1f8      	bne.n	2edc <_ZN8ATTClass10disconnectEv+0xc>
    _connectionHandle = 0xffff;
    2eea:	2301      	movs	r3, #1
    memset(_peerAddress, 0x00, sizeof(_peerAddress));
    2eec:	0020      	movs	r0, r4
    _connectionHandle = 0xffff;
    2eee:	425b      	negs	r3, r3
    2ef0:	80e3      	strh	r3, [r4, #6]
    memset(_peerAddress, 0x00, sizeof(_peerAddress));
    2ef2:	3008      	adds	r0, #8
    2ef4:	2206      	movs	r2, #6
    2ef6:	f005 ff65 	bl	8dc4 <memset>
    return true;
    2efa:	2001      	movs	r0, #1
    2efc:	e7ef      	b.n	2ede <_ZN8ATTClass10disconnectEv+0xe>
    2efe:	46c0      	nop			; (mov r8, r8)
    2f00:	0000ffff 	.word	0x0000ffff
    2f04:	20000470 	.word	0x20000470

00002f08 <_ZN8ATTClass7centralEv>:
{
    2f08:	b510      	push	{r4, lr}
    2f0a:	000a      	movs	r2, r1
  if (connected()) {
    2f0c:	4b06      	ldr	r3, [pc, #24]	; (2f28 <_ZN8ATTClass7centralEv+0x20>)
  return (_connectionHandle != 0xffff);
    2f0e:	88c9      	ldrh	r1, [r1, #6]
{
    2f10:	0004      	movs	r4, r0
  if (connected()) {
    2f12:	4299      	cmp	r1, r3
    2f14:	d004      	beq.n	2f20 <_ZN8ATTClass7centralEv+0x18>
    return BLEDevice(_connectionHandle, _peerAddress);
    2f16:	3208      	adds	r2, #8
    2f18:	f7ff fa46 	bl	23a8 <_ZN9BLEDeviceC1EtPh>
}
    2f1c:	0020      	movs	r0, r4
    2f1e:	bd10      	pop	{r4, pc}
  return BLEDevice();
    2f20:	f7ff fa30 	bl	2384 <_ZN9BLEDeviceC1Ev>
    2f24:	e7fa      	b.n	2f1c <_ZN8ATTClass7centralEv+0x14>
    2f26:	46c0      	nop			; (mov r8, r8)
    2f28:	0000ffff 	.word	0x0000ffff

00002f2c <_ZN8ATTClass12handleNotifyEtPKhi>:
{
    2f2c:	b5f0      	push	{r4, r5, r6, r7, lr}
    2f2e:	b087      	sub	sp, #28
    2f30:	af02      	add	r7, sp, #8
    2f32:	607a      	str	r2, [r7, #4]
    2f34:	603b      	str	r3, [r7, #0]
    2f36:	81f9      	strh	r1, [r7, #14]
  if (_connectionHandle != 0xffff) {
    2f38:	88c6      	ldrh	r6, [r0, #6]
    2f3a:	4a18      	ldr	r2, [pc, #96]	; (2f9c <_ZN8ATTClass12handleNotifyEtPKhi+0x70>)
  return false;
    2f3c:	2300      	movs	r3, #0
  if (_connectionHandle != 0xffff) {
    2f3e:	4296      	cmp	r6, r2
    2f40:	d028      	beq.n	2f94 <_ZN8ATTClass12handleNotifyEtPKhi+0x68>
    return true;
    2f42:	466b      	mov	r3, sp
    uint8_t notication[_mtu];
    2f44:	466a      	mov	r2, sp
    return true;
    2f46:	60bb      	str	r3, [r7, #8]
    uint8_t notication[_mtu];
    2f48:	89c4      	ldrh	r4, [r0, #14]
    memcpy(&notication[1], &handle, sizeof(handle));
    2f4a:	2009      	movs	r0, #9
    uint8_t notication[_mtu];
    2f4c:	1de3      	adds	r3, r4, #7
    2f4e:	08db      	lsrs	r3, r3, #3
    2f50:	00db      	lsls	r3, r3, #3
    2f52:	1ad3      	subs	r3, r2, r3
    2f54:	469d      	mov	sp, r3
    notication[0] = ATT_OP_HANDLE_NOTIFY;
    2f56:	231b      	movs	r3, #27
    uint8_t notication[_mtu];
    2f58:	ad02      	add	r5, sp, #8
    notication[0] = ATT_OP_HANDLE_NOTIFY;
    2f5a:	702b      	strb	r3, [r5, #0]
    memcpy(&notication[1], &handle, sizeof(handle));
    2f5c:	3b0d      	subs	r3, #13
    2f5e:	2202      	movs	r2, #2
    2f60:	4468      	add	r0, sp
    2f62:	18f9      	adds	r1, r7, r3
    2f64:	f005 ff13 	bl	8d8e <memcpy>
    length = min((uint16_t)(_mtu - noticationLength), (uint16_t)length);
    2f68:	3c03      	subs	r4, #3
    2f6a:	883a      	ldrh	r2, [r7, #0]
    2f6c:	b2a4      	uxth	r4, r4
    2f6e:	4294      	cmp	r4, r2
    2f70:	dd00      	ble.n	2f74 <_ZN8ATTClass12handleNotifyEtPKhi+0x48>
    2f72:	0014      	movs	r4, r2
    memcpy(&notication[noticationLength], value, length);
    2f74:	0022      	movs	r2, r4
    2f76:	6879      	ldr	r1, [r7, #4]
    2f78:	1ce8      	adds	r0, r5, #3
    noticationLength += length;
    2f7a:	3403      	adds	r4, #3
    memcpy(&notication[noticationLength], value, length);
    2f7c:	f005 ff07 	bl	8d8e <memcpy>
    HCI.sendAclPkt(_connectionHandle, ATT_CID, noticationLength, notication);
    2f80:	b2e3      	uxtb	r3, r4
    2f82:	9500      	str	r5, [sp, #0]
    2f84:	2204      	movs	r2, #4
    2f86:	0031      	movs	r1, r6
    2f88:	4805      	ldr	r0, [pc, #20]	; (2fa0 <_ZN8ATTClass12handleNotifyEtPKhi+0x74>)
    2f8a:	f001 f9a1 	bl	42d0 <_ZN8HCIClass10sendAclPktEthhPv>
    2f8e:	68bb      	ldr	r3, [r7, #8]
    2f90:	469d      	mov	sp, r3
    return true;
    2f92:	2301      	movs	r3, #1
}
    2f94:	0018      	movs	r0, r3
    2f96:	46bd      	mov	sp, r7
    2f98:	b005      	add	sp, #20
    2f9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2f9c:	0000ffff 	.word	0x0000ffff
    2fa0:	20000470 	.word	0x20000470

00002fa4 <_ZN8ATTClass9handleIndEtPKhi>:
{
    2fa4:	b5f0      	push	{r4, r5, r6, r7, lr}
    2fa6:	b089      	sub	sp, #36	; 0x24
    2fa8:	af02      	add	r7, sp, #8
    2faa:	60ba      	str	r2, [r7, #8]
    2fac:	607b      	str	r3, [r7, #4]
    2fae:	82f9      	strh	r1, [r7, #22]
  if (_connectionHandle != 0xffff) {
    2fb0:	88c3      	ldrh	r3, [r0, #6]
{
    2fb2:	0005      	movs	r5, r0
  if (_connectionHandle != 0xffff) {
    2fb4:	613b      	str	r3, [r7, #16]
    2fb6:	001a      	movs	r2, r3
    2fb8:	4b1e      	ldr	r3, [pc, #120]	; (3034 <_ZN8ATTClass9handleIndEtPKhi+0x90>)
  return false;
    2fba:	2600      	movs	r6, #0
  if (_connectionHandle != 0xffff) {
    2fbc:	429a      	cmp	r2, r3
    2fbe:	d035      	beq.n	302c <_ZN8ATTClass9handleIndEtPKhi+0x88>
    return true;
    2fc0:	466b      	mov	r3, sp
    uint8_t indication[_mtu];
    2fc2:	466a      	mov	r2, sp
    return true;
    2fc4:	60fb      	str	r3, [r7, #12]
    uint8_t indication[_mtu];
    2fc6:	89c4      	ldrh	r4, [r0, #14]
    memcpy(&indication[1], &handle, sizeof(handle));
    2fc8:	2009      	movs	r0, #9
    uint8_t indication[_mtu];
    2fca:	1de3      	adds	r3, r4, #7
    2fcc:	08db      	lsrs	r3, r3, #3
    2fce:	00db      	lsls	r3, r3, #3
    2fd0:	1ad3      	subs	r3, r2, r3
    2fd2:	469d      	mov	sp, r3
    indication[0] = ATT_OP_HANDLE_IND;
    2fd4:	231d      	movs	r3, #29
    uint8_t indication[_mtu];
    2fd6:	ae02      	add	r6, sp, #8
    indication[0] = ATT_OP_HANDLE_IND;
    2fd8:	7033      	strb	r3, [r6, #0]
    memcpy(&indication[1], &handle, sizeof(handle));
    2fda:	3b07      	subs	r3, #7
    2fdc:	2202      	movs	r2, #2
    2fde:	4468      	add	r0, sp
    2fe0:	18f9      	adds	r1, r7, r3
    2fe2:	f005 fed4 	bl	8d8e <memcpy>
    length = min((uint16_t)(_mtu - indicationLength), (uint16_t)length);
    2fe6:	3c03      	subs	r4, #3
    2fe8:	88ba      	ldrh	r2, [r7, #4]
    2fea:	b2a4      	uxth	r4, r4
    2fec:	4294      	cmp	r4, r2
    2fee:	dd00      	ble.n	2ff2 <_ZN8ATTClass9handleIndEtPKhi+0x4e>
    2ff0:	0014      	movs	r4, r2
    memcpy(&indication[indicationLength], value, length);
    2ff2:	0022      	movs	r2, r4
    2ff4:	68b9      	ldr	r1, [r7, #8]
    2ff6:	1cf0      	adds	r0, r6, #3
    2ff8:	f005 fec9 	bl	8d8e <memcpy>
    _cnf = false;
    2ffc:	2300      	movs	r3, #0
    indicationLength += length;
    2ffe:	3403      	adds	r4, #3
    _cnf = false;
    3000:	742b      	strb	r3, [r5, #16]
    HCI.sendAclPkt(_connectionHandle, ATT_CID, indicationLength, indication);
    3002:	b2e3      	uxtb	r3, r4
    3004:	4c0c      	ldr	r4, [pc, #48]	; (3038 <_ZN8ATTClass9handleIndEtPKhi+0x94>)
    3006:	9600      	str	r6, [sp, #0]
    3008:	2204      	movs	r2, #4
    300a:	6939      	ldr	r1, [r7, #16]
    300c:	0020      	movs	r0, r4
    300e:	f001 f95f 	bl	42d0 <_ZN8HCIClass10sendAclPktEthhPv>
    while (!_cnf) {
    3012:	7c2e      	ldrb	r6, [r5, #16]
    3014:	b2f6      	uxtb	r6, r6
    3016:	2e00      	cmp	r6, #0
    3018:	d106      	bne.n	3028 <_ZN8ATTClass9handleIndEtPKhi+0x84>
      HCI.poll();
    301a:	0020      	movs	r0, r4
    301c:	f001 fa5e 	bl	44dc <_ZN8HCIClass4pollEv>
      if (!connected()) {
    3020:	88eb      	ldrh	r3, [r5, #6]
    3022:	4a04      	ldr	r2, [pc, #16]	; (3034 <_ZN8ATTClass9handleIndEtPKhi+0x90>)
    3024:	4293      	cmp	r3, r2
    3026:	d1f4      	bne.n	3012 <_ZN8ATTClass9handleIndEtPKhi+0x6e>
    3028:	68fb      	ldr	r3, [r7, #12]
    302a:	469d      	mov	sp, r3
}
    302c:	0030      	movs	r0, r6
    302e:	46bd      	mov	sp, r7
    3030:	b007      	add	sp, #28
    3032:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3034:	0000ffff 	.word	0x0000ffff
    3038:	20000470 	.word	0x20000470

0000303c <_ZN8ATTClass6mtuReqEthPh>:
{
    303c:	b5f0      	push	{r4, r5, r6, r7, lr}
    303e:	000f      	movs	r7, r1
    3040:	b085      	sub	sp, #20
  if (dlen != 2) {
    3042:	2a02      	cmp	r2, #2
    3044:	d007      	beq.n	3056 <_ZN8ATTClass6mtuReqEthPh+0x1a>
    sendError(connectionHandle, ATT_OP_MTU_REQ, 0x0000, ATT_ECODE_INVALID_PDU);
    3046:	2304      	movs	r3, #4
    3048:	2200      	movs	r2, #0
    304a:	2102      	movs	r1, #2
    304c:	0038      	movs	r0, r7
    304e:	f7ff fe65 	bl	2d1c <_ZN8ATTClass9sendErrorEthth.constprop.3>
}
    3052:	b005      	add	sp, #20
    3054:	bdf0      	pop	{r4, r5, r6, r7, pc}
  uint16_t mtu = *(uint16_t*)data;
    3056:	881c      	ldrh	r4, [r3, #0]
  if (mtu > _maxMtu) {
    3058:	8883      	ldrh	r3, [r0, #4]
    305a:	429c      	cmp	r4, r3
    305c:	dd00      	ble.n	3060 <_ZN8ATTClass6mtuReqEthPh+0x24>
    mtu = _maxMtu;
    305e:	001c      	movs	r4, r3
  } mtuResp = { ATT_OP_MTU_RESP, mtu };
    3060:	2503      	movs	r5, #3
    3062:	ae03      	add	r6, sp, #12
  _mtu = mtu;
    3064:	81c4      	strh	r4, [r0, #14]
  } mtuResp = { ATT_OP_MTU_RESP, mtu };
    3066:	002a      	movs	r2, r5
    3068:	2100      	movs	r1, #0
    306a:	0030      	movs	r0, r6
    306c:	f005 feaa 	bl	8dc4 <memset>
    3070:	230d      	movs	r3, #13
    3072:	446b      	add	r3, sp
    3074:	701c      	strb	r4, [r3, #0]
    3076:	0a24      	lsrs	r4, r4, #8
    3078:	705c      	strb	r4, [r3, #1]
    307a:	7035      	strb	r5, [r6, #0]
  HCI.sendAclPkt(connectionHandle, ATT_CID, sizeof(mtuResp), &mtuResp);
    307c:	002b      	movs	r3, r5
    307e:	9600      	str	r6, [sp, #0]
    3080:	2204      	movs	r2, #4
    3082:	0039      	movs	r1, r7
    3084:	4801      	ldr	r0, [pc, #4]	; (308c <_ZN8ATTClass6mtuReqEthPh+0x50>)
    3086:	f001 f923 	bl	42d0 <_ZN8HCIClass10sendAclPktEthhPv>
    308a:	e7e2      	b.n	3052 <_ZN8ATTClass6mtuReqEthPh+0x16>
    308c:	20000470 	.word	0x20000470

00003090 <_ZN8ATTClass11findInfoReqEthPh>:
{
    3090:	b5f0      	push	{r4, r5, r6, r7, lr}
    3092:	b08d      	sub	sp, #52	; 0x34
    3094:	af02      	add	r7, sp, #8
    3096:	61bb      	str	r3, [r7, #24]
  }
    3098:	466b      	mov	r3, sp
{
    309a:	6078      	str	r0, [r7, #4]
    309c:	60b9      	str	r1, [r7, #8]
  }
    309e:	603b      	str	r3, [r7, #0]
  if (dlen != sizeof(FindInfoReq)) {
    30a0:	2a04      	cmp	r2, #4
    30a2:	d00d      	beq.n	30c0 <_ZN8ATTClass11findInfoReqEthPh+0x30>
    sendError(connectionHandle, ATT_OP_FIND_INFO_REQ, findInfoReq->startHandle, ATT_ECODE_INVALID_PDU);
    30a4:	69ba      	ldr	r2, [r7, #24]
    30a6:	69bb      	ldr	r3, [r7, #24]
    30a8:	7852      	ldrb	r2, [r2, #1]
    30aa:	781b      	ldrb	r3, [r3, #0]
    30ac:	0212      	lsls	r2, r2, #8
    30ae:	431a      	orrs	r2, r3
    30b0:	2304      	movs	r3, #4
    30b2:	68b8      	ldr	r0, [r7, #8]
    30b4:	0019      	movs	r1, r3
    30b6:	f7ff fe31 	bl	2d1c <_ZN8ATTClass9sendErrorEthth.constprop.3>
}
    30ba:	46bd      	mov	sp, r7
    30bc:	b00b      	add	sp, #44	; 0x2c
    30be:	bdf0      	pop	{r4, r5, r6, r7, pc}
  uint8_t response[_mtu];
    30c0:	466a      	mov	r2, sp
    30c2:	687b      	ldr	r3, [r7, #4]
  responseLength = 2;
    30c4:	2602      	movs	r6, #2
  uint8_t response[_mtu];
    30c6:	89db      	ldrh	r3, [r3, #14]
    30c8:	3307      	adds	r3, #7
    30ca:	08db      	lsrs	r3, r3, #3
    30cc:	00db      	lsls	r3, r3, #3
    30ce:	1ad3      	subs	r3, r2, r3
    30d0:	469d      	mov	sp, r3
    30d2:	ab02      	add	r3, sp, #8
    30d4:	61fb      	str	r3, [r7, #28]
  response[0] = ATT_OP_FIND_INFO_RESP;
    30d6:	2305      	movs	r3, #5
    30d8:	69fa      	ldr	r2, [r7, #28]
    30da:	7013      	strb	r3, [r2, #0]
  response[1] = 0x00;
    30dc:	2300      	movs	r3, #0
    30de:	7053      	strb	r3, [r2, #1]
  for (uint16_t i = (findInfoReq->startHandle - 1); i < GATT.attributeCount() && i <= (findInfoReq->endHandle - 1); i++) {
    30e0:	69bb      	ldr	r3, [r7, #24]
    30e2:	781a      	ldrb	r2, [r3, #0]
    30e4:	785b      	ldrb	r3, [r3, #1]
    30e6:	021b      	lsls	r3, r3, #8
    30e8:	4313      	orrs	r3, r2
    30ea:	3b01      	subs	r3, #1
    30ec:	b29b      	uxth	r3, r3
    30ee:	617b      	str	r3, [r7, #20]
    30f0:	4c49      	ldr	r4, [pc, #292]	; (3218 <_ZN8ATTClass11findInfoReqEthPh+0x188>)
    30f2:	0020      	movs	r0, r4
    30f4:	f000 ff66 	bl	3fc4 <_ZNK9GATTClass14attributeCountEv>
    30f8:	697b      	ldr	r3, [r7, #20]
    30fa:	4283      	cmp	r3, r0
    30fc:	d207      	bcs.n	310e <_ZN8ATTClass11findInfoReqEthPh+0x7e>
    30fe:	69bb      	ldr	r3, [r7, #24]
    3100:	789a      	ldrb	r2, [r3, #2]
    3102:	78db      	ldrb	r3, [r3, #3]
    3104:	021b      	lsls	r3, r3, #8
    3106:	4313      	orrs	r3, r2
    3108:	697a      	ldr	r2, [r7, #20]
    310a:	4293      	cmp	r3, r2
    310c:	dc21      	bgt.n	3152 <_ZN8ATTClass11findInfoReqEthPh+0xc2>
  if (responseLength == 2) {
    310e:	2e02      	cmp	r6, #2
    3110:	d116      	bne.n	3140 <_ZN8ATTClass11findInfoReqEthPh+0xb0>
    sendError(connectionHandle, ATT_OP_FIND_INFO_REQ, findInfoReq->startHandle, ATT_ECODE_ATTR_NOT_FOUND);
    3112:	69ba      	ldr	r2, [r7, #24]
    3114:	69bb      	ldr	r3, [r7, #24]
    3116:	7852      	ldrb	r2, [r2, #1]
    3118:	781b      	ldrb	r3, [r3, #0]
    311a:	0212      	lsls	r2, r2, #8
    311c:	431a      	orrs	r2, r3
    311e:	2104      	movs	r1, #4
    3120:	230a      	movs	r3, #10
    3122:	68b8      	ldr	r0, [r7, #8]
    3124:	f7ff fdfa 	bl	2d1c <_ZN8ATTClass9sendErrorEthth.constprop.3>
    3128:	683b      	ldr	r3, [r7, #0]
    312a:	469d      	mov	sp, r3
    312c:	e7c5      	b.n	30ba <_ZN8ATTClass11findInfoReqEthPh+0x2a>
    int uuidLen = isValueHandle ? 2 : attribute->uuidLength();
    312e:	2302      	movs	r3, #2
    3130:	613b      	str	r3, [r7, #16]
    bool isValueHandle = (attribute->type() == BLETypeCharacteristic) && (((BLELocalCharacteristic*)attribute)->valueHandle() == handle);
    3132:	3b01      	subs	r3, #1
    3134:	60fb      	str	r3, [r7, #12]
    3136:	e02c      	b.n	3192 <_ZN8ATTClass11findInfoReqEthPh+0x102>
    3138:	2300      	movs	r3, #0
    313a:	60fb      	str	r3, [r7, #12]
    int infoType = (uuidLen == 2) ? 0x01 : 0x02;
    313c:	3301      	adds	r3, #1
    313e:	e028      	b.n	3192 <_ZN8ATTClass11findInfoReqEthPh+0x102>
    HCI.sendAclPkt(connectionHandle, ATT_CID, responseLength, response);
    3140:	69fa      	ldr	r2, [r7, #28]
    3142:	b2f3      	uxtb	r3, r6
    3144:	9200      	str	r2, [sp, #0]
    3146:	68b9      	ldr	r1, [r7, #8]
    3148:	2204      	movs	r2, #4
    314a:	4834      	ldr	r0, [pc, #208]	; (321c <_ZN8ATTClass11findInfoReqEthPh+0x18c>)
    314c:	f001 f8c0 	bl	42d0 <_ZN8HCIClass10sendAclPktEthhPv>
    3150:	e7ea      	b.n	3128 <_ZN8ATTClass11findInfoReqEthPh+0x98>
    BLEAttribute* attribute = GATT.attribute(i);
    3152:	6979      	ldr	r1, [r7, #20]
    3154:	0020      	movs	r0, r4
    3156:	f000 ff5c 	bl	4012 <_ZNK9GATTClass9attributeEj>
    uint16_t handle = (i + 1);
    315a:	697b      	ldr	r3, [r7, #20]
    BLEAttribute* attribute = GATT.attribute(i);
    315c:	0005      	movs	r5, r0
    uint16_t handle = (i + 1);
    315e:	3301      	adds	r3, #1
    3160:	b29b      	uxth	r3, r3
    3162:	617b      	str	r3, [r7, #20]
    3164:	8abb      	ldrh	r3, [r7, #20]
    3166:	84bb      	strh	r3, [r7, #36]	; 0x24
    bool isValueHandle = (attribute->type() == BLETypeCharacteristic) && (((BLELocalCharacteristic*)attribute)->valueHandle() == handle);
    3168:	6803      	ldr	r3, [r0, #0]
    316a:	689b      	ldr	r3, [r3, #8]
    316c:	4798      	blx	r3
    316e:	4b2c      	ldr	r3, [pc, #176]	; (3220 <_ZN8ATTClass11findInfoReqEthPh+0x190>)
    3170:	4298      	cmp	r0, r3
    3172:	d105      	bne.n	3180 <_ZN8ATTClass11findInfoReqEthPh+0xf0>
    3174:	0028      	movs	r0, r5
    3176:	f7ff fa85 	bl	2684 <_ZNK22BLELocalCharacteristic11valueHandleEv>
    317a:	697b      	ldr	r3, [r7, #20]
    317c:	4283      	cmp	r3, r0
    317e:	d0d6      	beq.n	312e <_ZN8ATTClass11findInfoReqEthPh+0x9e>
    int uuidLen = isValueHandle ? 2 : attribute->uuidLength();
    3180:	0028      	movs	r0, r5
    3182:	f7fe ffe9 	bl	2158 <_ZNK12BLEAttribute10uuidLengthEv>
    3186:	6138      	str	r0, [r7, #16]
    int infoType = (uuidLen == 2) ? 0x01 : 0x02;
    3188:	2802      	cmp	r0, #2
    318a:	d0d5      	beq.n	3138 <_ZN8ATTClass11findInfoReqEthPh+0xa8>
    318c:	2300      	movs	r3, #0
    318e:	60fb      	str	r3, [r7, #12]
    3190:	3302      	adds	r3, #2
    if (response[1] == 0) {
    3192:	69fa      	ldr	r2, [r7, #28]
    3194:	7852      	ldrb	r2, [r2, #1]
    3196:	2a00      	cmp	r2, #0
    3198:	d101      	bne.n	319e <_ZN8ATTClass11findInfoReqEthPh+0x10e>
      response[1] = infoType;
    319a:	69fa      	ldr	r2, [r7, #28]
    319c:	7053      	strb	r3, [r2, #1]
    if (response[1] != infoType) {
    319e:	69fa      	ldr	r2, [r7, #28]
    31a0:	7852      	ldrb	r2, [r2, #1]
    31a2:	4293      	cmp	r3, r2
    31a4:	d1b3      	bne.n	310e <_ZN8ATTClass11findInfoReqEthPh+0x7e>
    memcpy(&response[responseLength], &handle, sizeof(handle));
    31a6:	69fb      	ldr	r3, [r7, #28]
    31a8:	2202      	movs	r2, #2
    31aa:	1998      	adds	r0, r3, r6
    31ac:	2324      	movs	r3, #36	; 0x24
    31ae:	18f9      	adds	r1, r7, r3
    31b0:	f005 fded 	bl	8d8e <memcpy>
    if (isValueHandle || attribute->type() == BLETypeDescriptor) {
    31b4:	68fb      	ldr	r3, [r7, #12]
    responseLength += sizeof(handle);
    31b6:	1cb4      	adds	r4, r6, #2
    31b8:	b2a4      	uxth	r4, r4
    if (isValueHandle || attribute->type() == BLETypeDescriptor) {
    31ba:	2b00      	cmp	r3, #0
    31bc:	d107      	bne.n	31ce <_ZN8ATTClass11findInfoReqEthPh+0x13e>
    31be:	682b      	ldr	r3, [r5, #0]
    31c0:	0028      	movs	r0, r5
    31c2:	689b      	ldr	r3, [r3, #8]
    31c4:	4798      	blx	r3
    31c6:	23a4      	movs	r3, #164	; 0xa4
    31c8:	019b      	lsls	r3, r3, #6
    31ca:	4298      	cmp	r0, r3
    31cc:	d115      	bne.n	31fa <_ZN8ATTClass11findInfoReqEthPh+0x16a>
      memcpy(&response[responseLength], attribute->uuidData(), uuidLen);
    31ce:	69fb      	ldr	r3, [r7, #28]
    31d0:	0028      	movs	r0, r5
    31d2:	191e      	adds	r6, r3, r4
    31d4:	f7fe ffbb 	bl	214e <_ZNK12BLEAttribute8uuidDataEv>
    31d8:	693a      	ldr	r2, [r7, #16]
    31da:	0001      	movs	r1, r0
    31dc:	0030      	movs	r0, r6
    31de:	f005 fdd6 	bl	8d8e <memcpy>
      responseLength += uuidLen;
    31e2:	693b      	ldr	r3, [r7, #16]
    31e4:	18e4      	adds	r4, r4, r3
    31e6:	b2a6      	uxth	r6, r4
    if ((responseLength + (2 + uuidLen)) > _mtu) {
    31e8:	693b      	ldr	r3, [r7, #16]
    31ea:	687a      	ldr	r2, [r7, #4]
    31ec:	3302      	adds	r3, #2
    31ee:	89d2      	ldrh	r2, [r2, #14]
    31f0:	199b      	adds	r3, r3, r6
    31f2:	4293      	cmp	r3, r2
    31f4:	dc00      	bgt.n	31f8 <_ZN8ATTClass11findInfoReqEthPh+0x168>
    31f6:	e77b      	b.n	30f0 <_ZN8ATTClass11findInfoReqEthPh+0x60>
    31f8:	e789      	b.n	310e <_ZN8ATTClass11findInfoReqEthPh+0x7e>
      uint16_t type = attribute->type();
    31fa:	682b      	ldr	r3, [r5, #0]
    31fc:	0028      	movs	r0, r5
    31fe:	689b      	ldr	r3, [r3, #8]
    3200:	4798      	blx	r3
      memcpy(&response[responseLength], &type, sizeof(type));
    3202:	69fb      	ldr	r3, [r7, #28]
      uint16_t type = attribute->type();
    3204:	84f8      	strh	r0, [r7, #38]	; 0x26
      memcpy(&response[responseLength], &type, sizeof(type));
    3206:	1918      	adds	r0, r3, r4
    3208:	2326      	movs	r3, #38	; 0x26
    320a:	2202      	movs	r2, #2
    320c:	18f9      	adds	r1, r7, r3
      responseLength += sizeof(type);
    320e:	3604      	adds	r6, #4
      memcpy(&response[responseLength], &type, sizeof(type));
    3210:	f005 fdbd 	bl	8d8e <memcpy>
      responseLength += sizeof(type);
    3214:	b2b6      	uxth	r6, r6
    3216:	e7e7      	b.n	31e8 <_ZN8ATTClass11findInfoReqEthPh+0x158>
    3218:	20000304 	.word	0x20000304
    321c:	20000470 	.word	0x20000470
    3220:	00002803 	.word	0x00002803

00003224 <_ZN8ATTClass13findByTypeReqEthPh>:
{
    3224:	b5f0      	push	{r4, r5, r6, r7, lr}
    3226:	b08b      	sub	sp, #44	; 0x2c
    3228:	001c      	movs	r4, r3
  }
    322a:	466b      	mov	r3, sp
{
    322c:	af02      	add	r7, sp, #8
    322e:	60f9      	str	r1, [r7, #12]
    3230:	6078      	str	r0, [r7, #4]
  }
    3232:	603b      	str	r3, [r7, #0]
    3234:	7821      	ldrb	r1, [r4, #0]
  if (dlen < sizeof(FindByTypeReq)) {
    3236:	2a05      	cmp	r2, #5
    3238:	d80a      	bhi.n	3250 <_ZN8ATTClass13findByTypeReqEthPh+0x2c>
    sendError(connectionHandle, ATT_OP_FIND_BY_TYPE_RESP, findByTypeReq->startHandle, ATT_ECODE_INVALID_PDU);
    323a:	7862      	ldrb	r2, [r4, #1]
    323c:	2304      	movs	r3, #4
    323e:	0212      	lsls	r2, r2, #8
    3240:	430a      	orrs	r2, r1
    3242:	68f8      	ldr	r0, [r7, #12]
    3244:	2107      	movs	r1, #7
    3246:	f7ff fd69 	bl	2d1c <_ZN8ATTClass9sendErrorEthth.constprop.3>
}
    324a:	46bd      	mov	sp, r7
    324c:	b009      	add	sp, #36	; 0x24
    324e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  uint8_t response[_mtu];
    3250:	4668      	mov	r0, sp
    3252:	687b      	ldr	r3, [r7, #4]
    3254:	89db      	ldrh	r3, [r3, #14]
    3256:	3307      	adds	r3, #7
    3258:	08db      	lsrs	r3, r3, #3
    325a:	00db      	lsls	r3, r3, #3
    325c:	1ac3      	subs	r3, r0, r3
    325e:	469d      	mov	sp, r3
    3260:	ab02      	add	r3, sp, #8
    3262:	613b      	str	r3, [r7, #16]
  response[0] = ATT_OP_FIND_BY_TYPE_RESP;
    3264:	2307      	movs	r3, #7
    3266:	6938      	ldr	r0, [r7, #16]
    3268:	7003      	strb	r3, [r0, #0]
  if (findByTypeReq->type == BLETypeService) {
    326a:	20a0      	movs	r0, #160	; 0xa0
    326c:	7963      	ldrb	r3, [r4, #5]
    326e:	7925      	ldrb	r5, [r4, #4]
    3270:	021b      	lsls	r3, r3, #8
    3272:	0180      	lsls	r0, r0, #6
    3274:	432b      	orrs	r3, r5
    3276:	4283      	cmp	r3, r0
    3278:	d00b      	beq.n	3292 <_ZN8ATTClass13findByTypeReqEthPh+0x6e>
    sendError(connectionHandle, ATT_OP_FIND_BY_TYPE_RESP, findByTypeReq->startHandle, ATT_ECODE_ATTR_NOT_FOUND);
    327a:	7862      	ldrb	r2, [r4, #1]
    327c:	7823      	ldrb	r3, [r4, #0]
    327e:	0212      	lsls	r2, r2, #8
    3280:	431a      	orrs	r2, r3
    3282:	2107      	movs	r1, #7
    3284:	230a      	movs	r3, #10
    3286:	68f8      	ldr	r0, [r7, #12]
    3288:	f7ff fd48 	bl	2d1c <_ZN8ATTClass9sendErrorEthth.constprop.3>
    328c:	683b      	ldr	r3, [r7, #0]
    328e:	469d      	mov	sp, r3
    3290:	e7db      	b.n	324a <_ZN8ATTClass13findByTypeReqEthPh+0x26>
  responseLength = 1;
    3292:	2501      	movs	r5, #1
  uint16_t valueLength = dlen - sizeof(*findByTypeReq);
    3294:	3a06      	subs	r2, #6
    3296:	b293      	uxth	r3, r2
    for (uint16_t i = (findByTypeReq->startHandle - 1); i < GATT.attributeCount() && i <= (findByTypeReq->endHandle - 1); i++) {
    3298:	7862      	ldrb	r2, [r4, #1]
  uint16_t valueLength = dlen - sizeof(*findByTypeReq);
    329a:	60bb      	str	r3, [r7, #8]
    for (uint16_t i = (findByTypeReq->startHandle - 1); i < GATT.attributeCount() && i <= (findByTypeReq->endHandle - 1); i++) {
    329c:	0212      	lsls	r2, r2, #8
    329e:	430a      	orrs	r2, r1
    32a0:	3a01      	subs	r2, #1
    32a2:	b293      	uxth	r3, r2
    32a4:	617b      	str	r3, [r7, #20]
    32a6:	4e2d      	ldr	r6, [pc, #180]	; (335c <_ZN8ATTClass13findByTypeReqEthPh+0x138>)
    32a8:	0030      	movs	r0, r6
    32aa:	f000 fe8b 	bl	3fc4 <_ZNK9GATTClass14attributeCountEv>
    32ae:	697b      	ldr	r3, [r7, #20]
    32b0:	4283      	cmp	r3, r0
    32b2:	d206      	bcs.n	32c2 <_ZN8ATTClass13findByTypeReqEthPh+0x9e>
    32b4:	78e3      	ldrb	r3, [r4, #3]
    32b6:	78a2      	ldrb	r2, [r4, #2]
    32b8:	021b      	lsls	r3, r3, #8
    32ba:	4313      	orrs	r3, r2
    32bc:	697a      	ldr	r2, [r7, #20]
    32be:	4293      	cmp	r3, r2
    32c0:	dc0a      	bgt.n	32d8 <_ZN8ATTClass13findByTypeReqEthPh+0xb4>
  if (responseLength == 1) {
    32c2:	2d01      	cmp	r5, #1
    32c4:	d0d9      	beq.n	327a <_ZN8ATTClass13findByTypeReqEthPh+0x56>
    HCI.sendAclPkt(connectionHandle, ATT_CID, responseLength, response);
    32c6:	693a      	ldr	r2, [r7, #16]
    32c8:	b2eb      	uxtb	r3, r5
    32ca:	9200      	str	r2, [sp, #0]
    32cc:	68f9      	ldr	r1, [r7, #12]
    32ce:	2204      	movs	r2, #4
    32d0:	4823      	ldr	r0, [pc, #140]	; (3360 <_ZN8ATTClass13findByTypeReqEthPh+0x13c>)
    32d2:	f000 fffd 	bl	42d0 <_ZN8HCIClass10sendAclPktEthhPv>
    32d6:	e7d9      	b.n	328c <_ZN8ATTClass13findByTypeReqEthPh+0x68>
      BLEAttribute* attribute = GATT.attribute(i);
    32d8:	6979      	ldr	r1, [r7, #20]
    32da:	0030      	movs	r0, r6
    32dc:	f000 fe99 	bl	4012 <_ZNK9GATTClass9attributeEj>
      if ((attribute->type() == findByTypeReq->type) && (attribute->uuidLength() == valueLength) && memcmp(attribute->uuidData(), value, valueLength) == 0) {
    32e0:	6803      	ldr	r3, [r0, #0]
      BLEAttribute* attribute = GATT.attribute(i);
    32e2:	0006      	movs	r6, r0
      if ((attribute->type() == findByTypeReq->type) && (attribute->uuidLength() == valueLength) && memcmp(attribute->uuidData(), value, valueLength) == 0) {
    32e4:	689b      	ldr	r3, [r3, #8]
    32e6:	4798      	blx	r3
    32e8:	7963      	ldrb	r3, [r4, #5]
    32ea:	7922      	ldrb	r2, [r4, #4]
    32ec:	021b      	lsls	r3, r3, #8
    32ee:	4313      	orrs	r3, r2
    32f0:	4298      	cmp	r0, r3
    32f2:	d10e      	bne.n	3312 <_ZN8ATTClass13findByTypeReqEthPh+0xee>
    32f4:	0030      	movs	r0, r6
    32f6:	f7fe ff2f 	bl	2158 <_ZNK12BLEAttribute10uuidLengthEv>
    32fa:	68bb      	ldr	r3, [r7, #8]
    32fc:	4298      	cmp	r0, r3
    32fe:	d108      	bne.n	3312 <_ZN8ATTClass13findByTypeReqEthPh+0xee>
    3300:	0030      	movs	r0, r6
    3302:	f7fe ff24 	bl	214e <_ZNK12BLEAttribute8uuidDataEv>
  uint8_t* value = &data[sizeof(*findByTypeReq)];
    3306:	1da1      	adds	r1, r4, #6
      if ((attribute->type() == findByTypeReq->type) && (attribute->uuidLength() == valueLength) && memcmp(attribute->uuidData(), value, valueLength) == 0) {
    3308:	68ba      	ldr	r2, [r7, #8]
    330a:	f005 fd31 	bl	8d70 <memcmp>
    330e:	2800      	cmp	r0, #0
    3310:	d009      	beq.n	3326 <_ZN8ATTClass13findByTypeReqEthPh+0x102>
      if ((responseLength + 4) > _mtu) {
    3312:	687a      	ldr	r2, [r7, #4]
    3314:	1ceb      	adds	r3, r5, #3
    3316:	89d2      	ldrh	r2, [r2, #14]
    3318:	4293      	cmp	r3, r2
    331a:	dad2      	bge.n	32c2 <_ZN8ATTClass13findByTypeReqEthPh+0x9e>
    for (uint16_t i = (findByTypeReq->startHandle - 1); i < GATT.attributeCount() && i <= (findByTypeReq->endHandle - 1); i++) {
    331c:	697a      	ldr	r2, [r7, #20]
    331e:	3201      	adds	r2, #1
    3320:	b293      	uxth	r3, r2
    3322:	617b      	str	r3, [r7, #20]
    3324:	e7bf      	b.n	32a6 <_ZN8ATTClass13findByTypeReqEthPh+0x82>
        uint16_t startHandle = service->startHandle();
    3326:	0030      	movs	r0, r6
    3328:	f7ff fc5f 	bl	2bea <_ZNK15BLELocalService11startHandleEv>
        memcpy(&response[responseLength], &startHandle, sizeof(startHandle));
    332c:	693b      	ldr	r3, [r7, #16]
        uint16_t startHandle = service->startHandle();
    332e:	83b8      	strh	r0, [r7, #28]
        memcpy(&response[responseLength], &startHandle, sizeof(startHandle));
    3330:	1958      	adds	r0, r3, r5
    3332:	231c      	movs	r3, #28
    3334:	2202      	movs	r2, #2
    3336:	18f9      	adds	r1, r7, r3
    3338:	f005 fd29 	bl	8d8e <memcpy>
        uint16_t endHandle = service->endHandle();
    333c:	0030      	movs	r0, r6
    333e:	f7ff fc56 	bl	2bee <_ZNK15BLELocalService9endHandleEv>
        memcpy(&response[responseLength], &endHandle, sizeof(endHandle));
    3342:	693b      	ldr	r3, [r7, #16]
        uint16_t endHandle = service->endHandle();
    3344:	83f8      	strh	r0, [r7, #30]
        responseLength += sizeof(startHandle);
    3346:	1ca8      	adds	r0, r5, #2
        memcpy(&response[responseLength], &endHandle, sizeof(endHandle));
    3348:	b280      	uxth	r0, r0
    334a:	1818      	adds	r0, r3, r0
    334c:	231e      	movs	r3, #30
    334e:	2202      	movs	r2, #2
    3350:	18f9      	adds	r1, r7, r3
        responseLength += sizeof(endHandle);
    3352:	3504      	adds	r5, #4
        memcpy(&response[responseLength], &endHandle, sizeof(endHandle));
    3354:	f005 fd1b 	bl	8d8e <memcpy>
        responseLength += sizeof(endHandle);
    3358:	b2ad      	uxth	r5, r5
    335a:	e7da      	b.n	3312 <_ZN8ATTClass13findByTypeReqEthPh+0xee>
    335c:	20000304 	.word	0x20000304
    3360:	20000470 	.word	0x20000470

00003364 <_ZN8ATTClass14readByGroupReqEthPh>:
{
    3364:	b5f0      	push	{r4, r5, r6, r7, lr}
    3366:	b08f      	sub	sp, #60	; 0x3c
    3368:	001e      	movs	r6, r3
  }
    336a:	466b      	mov	r3, sp
{
    336c:	af02      	add	r7, sp, #8
    336e:	60b8      	str	r0, [r7, #8]
    3370:	6179      	str	r1, [r7, #20]
  }
    3372:	60fb      	str	r3, [r7, #12]
  if (dlen != sizeof(ReadByGroupReq) || (readByGroupReq->uuid != BLETypeService && readByGroupReq->uuid != 0x2801)) {
    3374:	2a06      	cmp	r2, #6
    3376:	d107      	bne.n	3388 <_ZN8ATTClass14readByGroupReqEthPh+0x24>
    3378:	7973      	ldrb	r3, [r6, #5]
    337a:	7931      	ldrb	r1, [r6, #4]
    337c:	021b      	lsls	r3, r3, #8
    337e:	430b      	orrs	r3, r1
    3380:	4955      	ldr	r1, [pc, #340]	; (34d8 <_ZN8ATTClass14readByGroupReqEthPh+0x174>)
    3382:	185b      	adds	r3, r3, r1
    3384:	2b01      	cmp	r3, #1
    3386:	d90d      	bls.n	33a4 <_ZN8ATTClass14readByGroupReqEthPh+0x40>
    sendError(connectionHandle, ATT_OP_READ_BY_GROUP_REQ, readByGroupReq->startHandle, ATT_ECODE_UNSUPP_GRP_TYPE);
    3388:	7872      	ldrb	r2, [r6, #1]
    338a:	7833      	ldrb	r3, [r6, #0]
    338c:	0212      	lsls	r2, r2, #8
    338e:	431a      	orrs	r2, r3
    3390:	2310      	movs	r3, #16
    3392:	0019      	movs	r1, r3
    sendError(connectionHandle, ATT_OP_READ_BY_GROUP_REQ, readByGroupReq->startHandle, ATT_ECODE_ATTR_NOT_FOUND);
    3394:	6978      	ldr	r0, [r7, #20]
    3396:	f7ff fcc1 	bl	2d1c <_ZN8ATTClass9sendErrorEthth.constprop.3>
    339a:	68fb      	ldr	r3, [r7, #12]
    339c:	469d      	mov	sp, r3
}
    339e:	46bd      	mov	sp, r7
    33a0:	b00d      	add	sp, #52	; 0x34
    33a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
  uint8_t response[_mtu];
    33a4:	4669      	mov	r1, sp
    33a6:	68bb      	ldr	r3, [r7, #8]
    33a8:	89db      	ldrh	r3, [r3, #14]
    33aa:	3307      	adds	r3, #7
    33ac:	08db      	lsrs	r3, r3, #3
    33ae:	00db      	lsls	r3, r3, #3
    33b0:	1acb      	subs	r3, r1, r3
    33b2:	469d      	mov	sp, r3
    33b4:	ab02      	add	r3, sp, #8
    33b6:	627b      	str	r3, [r7, #36]	; 0x24
  response[0] = ATT_OP_READ_BY_GROUP_RESP;
    33b8:	2311      	movs	r3, #17
    33ba:	6a79      	ldr	r1, [r7, #36]	; 0x24
    33bc:	700b      	strb	r3, [r1, #0]
  response[1] = 0x00;
    33be:	2300      	movs	r3, #0
    33c0:	704b      	strb	r3, [r1, #1]
  for (uint16_t i = (readByGroupReq->startHandle - 1); i < GATT.attributeCount() && i <= (readByGroupReq->endHandle - 1); i++) {
    33c2:	7873      	ldrb	r3, [r6, #1]
    33c4:	7831      	ldrb	r1, [r6, #0]
    33c6:	021b      	lsls	r3, r3, #8
    33c8:	430b      	orrs	r3, r1
    33ca:	3b01      	subs	r3, #1
    33cc:	b29b      	uxth	r3, r3
    33ce:	61fb      	str	r3, [r7, #28]
  responseLength = 2;
    33d0:	2302      	movs	r3, #2
    int infoSize = (uuidLen == 2) ? 6 : 20;
    33d2:	607a      	str	r2, [r7, #4]
  responseLength = 2;
    33d4:	623b      	str	r3, [r7, #32]
  for (uint16_t i = (readByGroupReq->startHandle - 1); i < GATT.attributeCount() && i <= (readByGroupReq->endHandle - 1); i++) {
    33d6:	4c41      	ldr	r4, [pc, #260]	; (34dc <_ZN8ATTClass14readByGroupReqEthPh+0x178>)
    33d8:	0020      	movs	r0, r4
    33da:	f000 fdf3 	bl	3fc4 <_ZNK9GATTClass14attributeCountEv>
    33de:	69fb      	ldr	r3, [r7, #28]
    33e0:	4283      	cmp	r3, r0
    33e2:	d206      	bcs.n	33f2 <_ZN8ATTClass14readByGroupReqEthPh+0x8e>
    33e4:	78f3      	ldrb	r3, [r6, #3]
    33e6:	78b2      	ldrb	r2, [r6, #2]
    33e8:	021b      	lsls	r3, r3, #8
    33ea:	4313      	orrs	r3, r2
    33ec:	69fa      	ldr	r2, [r7, #28]
    33ee:	4293      	cmp	r3, r2
    33f0:	dc14      	bgt.n	341c <_ZN8ATTClass14readByGroupReqEthPh+0xb8>
  if (responseLength == 2) {
    33f2:	6a3b      	ldr	r3, [r7, #32]
    33f4:	2b02      	cmp	r3, #2
    33f6:	d106      	bne.n	3406 <_ZN8ATTClass14readByGroupReqEthPh+0xa2>
    sendError(connectionHandle, ATT_OP_READ_BY_GROUP_REQ, readByGroupReq->startHandle, ATT_ECODE_ATTR_NOT_FOUND);
    33f8:	7872      	ldrb	r2, [r6, #1]
    33fa:	7833      	ldrb	r3, [r6, #0]
    33fc:	0212      	lsls	r2, r2, #8
    33fe:	431a      	orrs	r2, r3
    3400:	2110      	movs	r1, #16
    3402:	230a      	movs	r3, #10
    3404:	e7c6      	b.n	3394 <_ZN8ATTClass14readByGroupReqEthPh+0x30>
    HCI.sendAclPkt(connectionHandle, ATT_CID, responseLength, response);
    3406:	2320      	movs	r3, #32
    3408:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    340a:	18fb      	adds	r3, r7, r3
    340c:	781b      	ldrb	r3, [r3, #0]
    340e:	9200      	str	r2, [sp, #0]
    3410:	6979      	ldr	r1, [r7, #20]
    3412:	2204      	movs	r2, #4
    3414:	4832      	ldr	r0, [pc, #200]	; (34e0 <_ZN8ATTClass14readByGroupReqEthPh+0x17c>)
    3416:	f000 ff5b 	bl	42d0 <_ZN8HCIClass10sendAclPktEthhPv>
    341a:	e7be      	b.n	339a <_ZN8ATTClass14readByGroupReqEthPh+0x36>
    BLEAttribute* attribute = GATT.attribute(i);
    341c:	0020      	movs	r0, r4
    341e:	69f9      	ldr	r1, [r7, #28]
    3420:	f000 fdf7 	bl	4012 <_ZNK9GATTClass9attributeEj>
    if (readByGroupReq->uuid != attribute->type()) {
    3424:	7975      	ldrb	r5, [r6, #5]
    3426:	7933      	ldrb	r3, [r6, #4]
    3428:	022d      	lsls	r5, r5, #8
    342a:	431d      	orrs	r5, r3
    342c:	6803      	ldr	r3, [r0, #0]
    BLEAttribute* attribute = GATT.attribute(i);
    342e:	0004      	movs	r4, r0
    if (readByGroupReq->uuid != attribute->type()) {
    3430:	689b      	ldr	r3, [r3, #8]
    3432:	4798      	blx	r3
    3434:	4285      	cmp	r5, r0
    3436:	d149      	bne.n	34cc <_ZN8ATTClass14readByGroupReqEthPh+0x168>
    int uuidLen = attribute->uuidLength();
    3438:	0020      	movs	r0, r4
    343a:	f7fe fe8d 	bl	2158 <_ZNK12BLEAttribute10uuidLengthEv>
    int infoSize = (uuidLen == 2) ? 6 : 20;
    343e:	687b      	ldr	r3, [r7, #4]
    int uuidLen = attribute->uuidLength();
    3440:	6138      	str	r0, [r7, #16]
    int infoSize = (uuidLen == 2) ? 6 : 20;
    3442:	61bb      	str	r3, [r7, #24]
    3444:	2802      	cmp	r0, #2
    3446:	d001      	beq.n	344c <_ZN8ATTClass14readByGroupReqEthPh+0xe8>
    3448:	2314      	movs	r3, #20
    344a:	61bb      	str	r3, [r7, #24]
    if (response[1] == 0) {
    344c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    344e:	785b      	ldrb	r3, [r3, #1]
    3450:	2b00      	cmp	r3, #0
    3452:	d102      	bne.n	345a <_ZN8ATTClass14readByGroupReqEthPh+0xf6>
      response[1] = infoSize;
    3454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3456:	7e3a      	ldrb	r2, [r7, #24]
    3458:	705a      	strb	r2, [r3, #1]
    if (response[1] != infoSize) {
    345a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    345c:	69ba      	ldr	r2, [r7, #24]
    345e:	785b      	ldrb	r3, [r3, #1]
    3460:	429a      	cmp	r2, r3
    3462:	d1c6      	bne.n	33f2 <_ZN8ATTClass14readByGroupReqEthPh+0x8e>
    uint16_t startHandle = service->startHandle();
    3464:	0020      	movs	r0, r4
    3466:	f7ff fbc0 	bl	2bea <_ZNK15BLELocalService11startHandleEv>
    memcpy(&response[responseLength], &startHandle, sizeof(startHandle));
    346a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    346c:	6a3a      	ldr	r2, [r7, #32]
    uint16_t startHandle = service->startHandle();
    346e:	85b8      	strh	r0, [r7, #44]	; 0x2c
    memcpy(&response[responseLength], &startHandle, sizeof(startHandle));
    3470:	1898      	adds	r0, r3, r2
    3472:	232c      	movs	r3, #44	; 0x2c
    3474:	2202      	movs	r2, #2
    3476:	18f9      	adds	r1, r7, r3
    3478:	f005 fc89 	bl	8d8e <memcpy>
    uint16_t endHandle = service->endHandle();
    347c:	0020      	movs	r0, r4
    347e:	f7ff fbb6 	bl	2bee <_ZNK15BLELocalService9endHandleEv>
    responseLength += sizeof(startHandle);
    3482:	6a3b      	ldr	r3, [r7, #32]
    uint16_t endHandle = service->endHandle();
    3484:	85f8      	strh	r0, [r7, #46]	; 0x2e
    responseLength += sizeof(startHandle);
    3486:	1c98      	adds	r0, r3, #2
    memcpy(&response[responseLength], &endHandle, sizeof(endHandle));
    3488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    348a:	b280      	uxth	r0, r0
    348c:	1818      	adds	r0, r3, r0
    348e:	232e      	movs	r3, #46	; 0x2e
    3490:	2202      	movs	r2, #2
    3492:	18f9      	adds	r1, r7, r3
    3494:	f005 fc7b 	bl	8d8e <memcpy>
    responseLength += sizeof(endHandle);
    3498:	6a3b      	ldr	r3, [r7, #32]
    memcpy(&response[responseLength], service->uuidData(), uuidLen);
    349a:	0020      	movs	r0, r4
    responseLength += sizeof(endHandle);
    349c:	1d1d      	adds	r5, r3, #4
    memcpy(&response[responseLength], service->uuidData(), uuidLen);
    349e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    responseLength += sizeof(endHandle);
    34a0:	b2ad      	uxth	r5, r5
    memcpy(&response[responseLength], service->uuidData(), uuidLen);
    34a2:	195b      	adds	r3, r3, r5
    34a4:	623b      	str	r3, [r7, #32]
    34a6:	f7fe fe52 	bl	214e <_ZNK12BLEAttribute8uuidDataEv>
    34aa:	693a      	ldr	r2, [r7, #16]
    34ac:	0001      	movs	r1, r0
    34ae:	6a38      	ldr	r0, [r7, #32]
    34b0:	f005 fc6d 	bl	8d8e <memcpy>
    responseLength += uuidLen;
    34b4:	693b      	ldr	r3, [r7, #16]
    34b6:	18ed      	adds	r5, r5, r3
    34b8:	b2ab      	uxth	r3, r5
    34ba:	623b      	str	r3, [r7, #32]
    if ((responseLength + infoSize) > _mtu) {
    34bc:	6a3a      	ldr	r2, [r7, #32]
    34be:	69bb      	ldr	r3, [r7, #24]
    34c0:	4694      	mov	ip, r2
    34c2:	68ba      	ldr	r2, [r7, #8]
    34c4:	4463      	add	r3, ip
    34c6:	89d2      	ldrh	r2, [r2, #14]
    34c8:	4293      	cmp	r3, r2
    34ca:	dc92      	bgt.n	33f2 <_ZN8ATTClass14readByGroupReqEthPh+0x8e>
  for (uint16_t i = (readByGroupReq->startHandle - 1); i < GATT.attributeCount() && i <= (readByGroupReq->endHandle - 1); i++) {
    34cc:	69fb      	ldr	r3, [r7, #28]
    34ce:	3301      	adds	r3, #1
    34d0:	b29b      	uxth	r3, r3
    34d2:	61fb      	str	r3, [r7, #28]
    34d4:	e77f      	b.n	33d6 <_ZN8ATTClass14readByGroupReqEthPh+0x72>
    34d6:	46c0      	nop			; (mov r8, r8)
    34d8:	ffffd800 	.word	0xffffd800
    34dc:	20000304 	.word	0x20000304
    34e0:	20000470 	.word	0x20000470

000034e4 <_ZN8ATTClass17readOrReadBlobReqEthhPh>:
{
    34e4:	b5f0      	push	{r4, r5, r6, r7, lr}
    34e6:	b08d      	sub	sp, #52	; 0x34
    34e8:	000e      	movs	r6, r1
  HCI.sendAclPkt(connectionHandle, ATT_CID, responseLength, response);
    34ea:	4669      	mov	r1, sp
{
    34ec:	af02      	add	r7, sp, #8
    34ee:	0014      	movs	r4, r2
    34f0:	60b8      	str	r0, [r7, #8]
    34f2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
  HCI.sendAclPkt(connectionHandle, ATT_CID, responseLength, response);
    34f4:	6079      	str	r1, [r7, #4]
  if (opcode == ATT_OP_READ_REQ) {
    34f6:	2c0a      	cmp	r4, #10
    34f8:	d105      	bne.n	3506 <_ZN8ATTClass17readOrReadBlobReqEthhPh+0x22>
    if (dlen != sizeof(uint16_t)) {
    34fa:	2b02      	cmp	r3, #2
    34fc:	d010      	beq.n	3520 <_ZN8ATTClass17readOrReadBlobReqEthhPh+0x3c>
      sendError(connectionHandle, ATT_OP_READ_REQ, 0x0000, ATT_ECODE_INVALID_PDU);
    34fe:	2304      	movs	r3, #4
    3500:	2200      	movs	r2, #0
      sendError(connectionHandle, opcode, handle, ATT_ECODE_INVALID_OFFSET);
    3502:	0021      	movs	r1, r4
    3504:	e004      	b.n	3510 <_ZN8ATTClass17readOrReadBlobReqEthhPh+0x2c>
    if (dlen != (sizeof(uint16_t) + sizeof(uint16_t))) {
    3506:	2b04      	cmp	r3, #4
    3508:	d00a      	beq.n	3520 <_ZN8ATTClass17readOrReadBlobReqEthhPh+0x3c>
      sendError(connectionHandle, ATT_OP_READ_BLOB_REQ, 0x0000, ATT_ECODE_INVALID_PDU);
    350a:	2304      	movs	r3, #4
    350c:	2200      	movs	r2, #0
    350e:	210c      	movs	r1, #12
      sendError(connectionHandle, opcode, handle, ATT_ECODE_INVALID_OFFSET);
    3510:	0030      	movs	r0, r6
    3512:	f7ff fc03 	bl	2d1c <_ZN8ATTClass9sendErrorEthth.constprop.3>
    3516:	687b      	ldr	r3, [r7, #4]
    3518:	469d      	mov	sp, r3
}
    351a:	46bd      	mov	sp, r7
    351c:	b00b      	add	sp, #44	; 0x2c
    351e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  uint16_t handle = *(uint16_t*)data;
    3520:	8813      	ldrh	r3, [r2, #0]
    3522:	613b      	str	r3, [r7, #16]
  uint16_t offset = (opcode == ATT_OP_READ_REQ) ? 0 : *(uint16_t*)&data[sizeof(handle)];
    3524:	2300      	movs	r3, #0
    3526:	617b      	str	r3, [r7, #20]
    3528:	2c0a      	cmp	r4, #10
    352a:	d001      	beq.n	3530 <_ZN8ATTClass17readOrReadBlobReqEthhPh+0x4c>
    352c:	8853      	ldrh	r3, [r2, #2]
    352e:	617b      	str	r3, [r7, #20]
  if ((uint16_t)(handle - 1) > GATT.attributeCount()) {
    3530:	4d5f      	ldr	r5, [pc, #380]	; (36b0 <_ZN8ATTClass17readOrReadBlobReqEthhPh+0x1cc>)
    3532:	0028      	movs	r0, r5
    3534:	f000 fd46 	bl	3fc4 <_ZNK9GATTClass14attributeCountEv>
    3538:	693b      	ldr	r3, [r7, #16]
    353a:	1e59      	subs	r1, r3, #1
    353c:	b28b      	uxth	r3, r1
    353e:	4283      	cmp	r3, r0
    3540:	d902      	bls.n	3548 <_ZN8ATTClass17readOrReadBlobReqEthhPh+0x64>
    sendError(connectionHandle, opcode, handle, ATT_ECODE_ATTR_NOT_FOUND);
    3542:	230a      	movs	r3, #10
      sendError(connectionHandle, opcode, handle, ATT_ECODE_INVALID_OFFSET);
    3544:	693a      	ldr	r2, [r7, #16]
    3546:	e7dc      	b.n	3502 <_ZN8ATTClass17readOrReadBlobReqEthhPh+0x1e>
  uint8_t response[_mtu];
    3548:	466a      	mov	r2, sp
    354a:	68bb      	ldr	r3, [r7, #8]
    354c:	89db      	ldrh	r3, [r3, #14]
    354e:	3307      	adds	r3, #7
    3550:	08db      	lsrs	r3, r3, #3
    3552:	00db      	lsls	r3, r3, #3
    3554:	1ad3      	subs	r3, r2, r3
    3556:	469d      	mov	sp, r3
    3558:	ab02      	add	r3, sp, #8
    355a:	60fb      	str	r3, [r7, #12]
  response[0] = (opcode == ATT_OP_READ_REQ) ? ATT_OP_READ_RESP : ATT_OP_READ_BLOB_RESP;
    355c:	230b      	movs	r3, #11
    355e:	2c0a      	cmp	r4, #10
    3560:	d000      	beq.n	3564 <_ZN8ATTClass17readOrReadBlobReqEthhPh+0x80>
    3562:	3302      	adds	r3, #2
    3564:	68fa      	ldr	r2, [r7, #12]
  BLEAttribute* attribute = GATT.attribute(handle - 1);
    3566:	0028      	movs	r0, r5
  response[0] = (opcode == ATT_OP_READ_REQ) ? ATT_OP_READ_RESP : ATT_OP_READ_BLOB_RESP;
    3568:	7013      	strb	r3, [r2, #0]
  BLEAttribute* attribute = GATT.attribute(handle - 1);
    356a:	f000 fd52 	bl	4012 <_ZNK9GATTClass9attributeEj>
  enum BLEAttributeType attributeType = attribute->type();
    356e:	6803      	ldr	r3, [r0, #0]
  BLEAttribute* attribute = GATT.attribute(handle - 1);
    3570:	0005      	movs	r5, r0
  enum BLEAttributeType attributeType = attribute->type();
    3572:	689b      	ldr	r3, [r3, #8]
    3574:	4798      	blx	r3
  if (attributeType == BLETypeService) {
    3576:	23a0      	movs	r3, #160	; 0xa0
    3578:	019b      	lsls	r3, r3, #6
    357a:	4298      	cmp	r0, r3
    357c:	d115      	bne.n	35aa <_ZN8ATTClass17readOrReadBlobReqEthhPh+0xc6>
    if (offset) {
    357e:	697b      	ldr	r3, [r7, #20]
    3580:	2b00      	cmp	r3, #0
    3582:	d003      	beq.n	358c <_ZN8ATTClass17readOrReadBlobReqEthhPh+0xa8>
      sendError(connectionHandle, ATT_ECODE_ATTR_NOT_LONG, handle, ATT_ECODE_INVALID_PDU);
    3584:	2304      	movs	r3, #4
    3586:	693a      	ldr	r2, [r7, #16]
    3588:	210b      	movs	r1, #11
    358a:	e7c1      	b.n	3510 <_ZN8ATTClass17readOrReadBlobReqEthhPh+0x2c>
    uint8_t uuidLen = service->uuidLength();
    358c:	0028      	movs	r0, r5
    358e:	f7fe fde3 	bl	2158 <_ZNK12BLEAttribute10uuidLengthEv>
    3592:	0004      	movs	r4, r0
    memcpy(&response[responseLength], service->uuidData(), uuidLen);
    3594:	0028      	movs	r0, r5
    3596:	f7fe fdda 	bl	214e <_ZNK12BLEAttribute8uuidDataEv>
    359a:	0022      	movs	r2, r4
    359c:	0001      	movs	r1, r0
    359e:	68fb      	ldr	r3, [r7, #12]
    35a0:	3301      	adds	r3, #1
    memcpy(&response[responseLength], descriptor->value() + offset, valueLength);
    35a2:	0018      	movs	r0, r3
    35a4:	f005 fbf3 	bl	8d8e <memcpy>
    35a8:	e062      	b.n	3670 <_ZN8ATTClass17readOrReadBlobReqEthhPh+0x18c>
  } else if (attributeType == BLETypeCharacteristic) {
    35aa:	4b42      	ldr	r3, [pc, #264]	; (36b4 <_ZN8ATTClass17readOrReadBlobReqEthhPh+0x1d0>)
    35ac:	4298      	cmp	r0, r3
    35ae:	d161      	bne.n	3674 <_ZN8ATTClass17readOrReadBlobReqEthhPh+0x190>
    if (characteristic->handle() == handle) {
    35b0:	0028      	movs	r0, r5
    35b2:	f7ff f865 	bl	2680 <_ZNK22BLELocalCharacteristic6handleEv>
    35b6:	693b      	ldr	r3, [r7, #16]
    35b8:	4283      	cmp	r3, r0
    35ba:	d12d      	bne.n	3618 <_ZN8ATTClass17readOrReadBlobReqEthhPh+0x134>
      if (offset) {
    35bc:	697b      	ldr	r3, [r7, #20]
    35be:	2b00      	cmp	r3, #0
    35c0:	d001      	beq.n	35c6 <_ZN8ATTClass17readOrReadBlobReqEthhPh+0xe2>
        sendError(connectionHandle, opcode, handle, ATT_ECODE_ATTR_NOT_LONG);
    35c2:	230b      	movs	r3, #11
    35c4:	e7be      	b.n	3544 <_ZN8ATTClass17readOrReadBlobReqEthhPh+0x60>
      response[responseLength++] = characteristic->properties();
    35c6:	0028      	movs	r0, r5
    35c8:	f7fe ffe2 	bl	2590 <_ZNK22BLELocalCharacteristic10propertiesEv>
    35cc:	68fb      	ldr	r3, [r7, #12]
    35ce:	7058      	strb	r0, [r3, #1]
      uint16_t valueHandle = characteristic->valueHandle();
    35d0:	0028      	movs	r0, r5
    35d2:	f7ff f857 	bl	2684 <_ZNK22BLELocalCharacteristic11valueHandleEv>
      memcpy(&response[responseLength], &valueHandle, sizeof(valueHandle));
    35d6:	68fb      	ldr	r3, [r7, #12]
      uint16_t valueHandle = characteristic->valueHandle();
    35d8:	83b8      	strh	r0, [r7, #28]
      memcpy(&response[responseLength], &valueHandle, sizeof(valueHandle));
    35da:	1c98      	adds	r0, r3, #2
    35dc:	231c      	movs	r3, #28
    35de:	2202      	movs	r2, #2
    35e0:	18f9      	adds	r1, r7, r3
    35e2:	f005 fbd4 	bl	8d8e <memcpy>
      uint8_t uuidLen = characteristic->uuidLength();
    35e6:	0028      	movs	r0, r5
    35e8:	f7fe fdb6 	bl	2158 <_ZNK12BLEAttribute10uuidLengthEv>
    35ec:	0004      	movs	r4, r0
      memcpy(&response[responseLength], characteristic->uuidData(), uuidLen);
    35ee:	0028      	movs	r0, r5
    35f0:	f7fe fdad 	bl	214e <_ZNK12BLEAttribute8uuidDataEv>
    35f4:	68fb      	ldr	r3, [r7, #12]
    35f6:	0001      	movs	r1, r0
    35f8:	3304      	adds	r3, #4
    35fa:	0022      	movs	r2, r4
    35fc:	0018      	movs	r0, r3
    35fe:	f005 fbc6 	bl	8d8e <memcpy>
      responseLength += uuidLen;
    3602:	3404      	adds	r4, #4
    responseLength += valueLength;
    3604:	b2a3      	uxth	r3, r4
  HCI.sendAclPkt(connectionHandle, ATT_CID, responseLength, response);
    3606:	68fa      	ldr	r2, [r7, #12]
    3608:	b2db      	uxtb	r3, r3
    360a:	9200      	str	r2, [sp, #0]
    360c:	0031      	movs	r1, r6
    360e:	2204      	movs	r2, #4
    3610:	4829      	ldr	r0, [pc, #164]	; (36b8 <_ZN8ATTClass17readOrReadBlobReqEthhPh+0x1d4>)
    3612:	f000 fe5d 	bl	42d0 <_ZN8HCIClass10sendAclPktEthhPv>
    3616:	e77e      	b.n	3516 <_ZN8ATTClass17readOrReadBlobReqEthhPh+0x32>
      if ((characteristic->properties() & BLERead) == 0) {
    3618:	0028      	movs	r0, r5
    361a:	f7fe ffb9 	bl	2590 <_ZNK22BLELocalCharacteristic10propertiesEv>
    361e:	2302      	movs	r3, #2
    3620:	4218      	tst	r0, r3
    3622:	d08f      	beq.n	3544 <_ZN8ATTClass17readOrReadBlobReqEthhPh+0x60>
      uint16_t valueLength = characteristic->valueLength();
    3624:	0028      	movs	r0, r5
    3626:	f7fe ffba 	bl	259e <_ZNK22BLELocalCharacteristic11valueLengthEv>
      if (offset >= valueLength) {
    362a:	697b      	ldr	r3, [r7, #20]
    362c:	b280      	uxth	r0, r0
    362e:	4298      	cmp	r0, r3
    3630:	dc01      	bgt.n	3636 <_ZN8ATTClass17readOrReadBlobReqEthhPh+0x152>
      sendError(connectionHandle, opcode, handle, ATT_ECODE_INVALID_OFFSET);
    3632:	2307      	movs	r3, #7
    3634:	e786      	b.n	3544 <_ZN8ATTClass17readOrReadBlobReqEthhPh+0x60>
      valueLength = min(_mtu - responseLength, valueLength - offset);
    3636:	68bb      	ldr	r3, [r7, #8]
    3638:	89dc      	ldrh	r4, [r3, #14]
    363a:	697b      	ldr	r3, [r7, #20]
    363c:	3c01      	subs	r4, #1
    363e:	1ac0      	subs	r0, r0, r3
    3640:	4284      	cmp	r4, r0
    3642:	dd00      	ble.n	3646 <_ZN8ATTClass17readOrReadBlobReqEthhPh+0x162>
    3644:	0004      	movs	r4, r0
      characteristic->readValue(BLEDevice(connectionHandle, _peerAddress), offset, &response[responseLength], valueLength);
    3646:	231c      	movs	r3, #28
    3648:	68ba      	ldr	r2, [r7, #8]
    364a:	0031      	movs	r1, r6
    364c:	3208      	adds	r2, #8
    364e:	18f8      	adds	r0, r7, r3
    3650:	f7fe feaa 	bl	23a8 <_ZN9BLEDeviceC1EtPh>
    3654:	211c      	movs	r1, #28
    3656:	68fb      	ldr	r3, [r7, #12]
    3658:	b2a2      	uxth	r2, r4
    365a:	9200      	str	r2, [sp, #0]
    365c:	3301      	adds	r3, #1
    365e:	0028      	movs	r0, r5
    3660:	697a      	ldr	r2, [r7, #20]
    3662:	1879      	adds	r1, r7, r1
    3664:	f7ff f8c8 	bl	27f8 <_ZN22BLELocalCharacteristic9readValueE9BLEDevicetPhi>
    3668:	231c      	movs	r3, #28
    366a:	18f8      	adds	r0, r7, r3
    366c:	f7fe fdeb 	bl	2246 <_ZN9BLEDeviceD1Ev>
    responseLength += valueLength;
    3670:	3401      	adds	r4, #1
    3672:	e7c7      	b.n	3604 <_ZN8ATTClass17readOrReadBlobReqEthhPh+0x120>
  } else if (attributeType == BLETypeDescriptor) {
    3674:	22a4      	movs	r2, #164	; 0xa4
  responseLength = 1;
    3676:	2301      	movs	r3, #1
  } else if (attributeType == BLETypeDescriptor) {
    3678:	0192      	lsls	r2, r2, #6
    367a:	4290      	cmp	r0, r2
    367c:	d1c3      	bne.n	3606 <_ZN8ATTClass17readOrReadBlobReqEthhPh+0x122>
    uint16_t valueLength = descriptor->valueSize();
    367e:	0028      	movs	r0, r5
    3680:	f7ff f970 	bl	2964 <_ZNK18BLELocalDescriptor9valueSizeEv>
    if (offset >= valueLength) {
    3684:	697b      	ldr	r3, [r7, #20]
    3686:	b280      	uxth	r0, r0
    3688:	4298      	cmp	r0, r3
    368a:	ddd2      	ble.n	3632 <_ZN8ATTClass17readOrReadBlobReqEthhPh+0x14e>
    valueLength = min(_mtu - responseLength, valueLength - offset);
    368c:	68bb      	ldr	r3, [r7, #8]
    368e:	89dc      	ldrh	r4, [r3, #14]
    3690:	697b      	ldr	r3, [r7, #20]
    3692:	3c01      	subs	r4, #1
    3694:	1ac0      	subs	r0, r0, r3
    3696:	4284      	cmp	r4, r0
    3698:	dd00      	ble.n	369c <_ZN8ATTClass17readOrReadBlobReqEthhPh+0x1b8>
    369a:	0004      	movs	r4, r0
    memcpy(&response[responseLength], descriptor->value() + offset, valueLength);
    369c:	0028      	movs	r0, r5
    369e:	f7ff f963 	bl	2968 <_ZNK18BLELocalDescriptor5valueEv>
    36a2:	68fb      	ldr	r3, [r7, #12]
    36a4:	6979      	ldr	r1, [r7, #20]
    36a6:	3301      	adds	r3, #1
    36a8:	b2a2      	uxth	r2, r4
    36aa:	1841      	adds	r1, r0, r1
    36ac:	e779      	b.n	35a2 <_ZN8ATTClass17readOrReadBlobReqEthhPh+0xbe>
    36ae:	46c0      	nop			; (mov r8, r8)
    36b0:	20000304 	.word	0x20000304
    36b4:	00002803 	.word	0x00002803
    36b8:	20000470 	.word	0x20000470

000036bc <_ZN8ATTClass13readByTypeReqEthPh>:
{
    36bc:	b5f0      	push	{r4, r5, r6, r7, lr}
    36be:	b08d      	sub	sp, #52	; 0x34
    36c0:	af02      	add	r7, sp, #8
    36c2:	61bb      	str	r3, [r7, #24]
  }
    36c4:	466b      	mov	r3, sp
{
    36c6:	6178      	str	r0, [r7, #20]
    36c8:	60b9      	str	r1, [r7, #8]
  }
    36ca:	603b      	str	r3, [r7, #0]
  if (dlen != sizeof(ReadByTypeReq)) {
    36cc:	2a06      	cmp	r2, #6
    36ce:	d00d      	beq.n	36ec <_ZN8ATTClass13readByTypeReqEthPh+0x30>
    sendError(connectionHandle, ATT_OP_READ_BY_TYPE_REQ, readByTypeReq->startHandle, ATT_ECODE_INVALID_PDU);
    36d0:	69ba      	ldr	r2, [r7, #24]
    36d2:	69bb      	ldr	r3, [r7, #24]
    36d4:	7852      	ldrb	r2, [r2, #1]
    36d6:	781b      	ldrb	r3, [r3, #0]
    36d8:	0212      	lsls	r2, r2, #8
    36da:	431a      	orrs	r2, r3
    36dc:	2108      	movs	r1, #8
    36de:	2304      	movs	r3, #4
    36e0:	68b8      	ldr	r0, [r7, #8]
    36e2:	f7ff fb1b 	bl	2d1c <_ZN8ATTClass9sendErrorEthth.constprop.3>
}
    36e6:	46bd      	mov	sp, r7
    36e8:	b00b      	add	sp, #44	; 0x2c
    36ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
  uint8_t response[_mtu];
    36ec:	466a      	mov	r2, sp
    36ee:	697b      	ldr	r3, [r7, #20]
  responseLength = 2;
    36f0:	2402      	movs	r4, #2
  uint8_t response[_mtu];
    36f2:	89db      	ldrh	r3, [r3, #14]
    36f4:	3307      	adds	r3, #7
    36f6:	08db      	lsrs	r3, r3, #3
    36f8:	00db      	lsls	r3, r3, #3
    36fa:	1ad3      	subs	r3, r2, r3
    36fc:	469d      	mov	sp, r3
    36fe:	ab02      	add	r3, sp, #8
    3700:	61fb      	str	r3, [r7, #28]
  response[0] = ATT_OP_READ_BY_TYPE_RESP;
    3702:	2309      	movs	r3, #9
    3704:	69fa      	ldr	r2, [r7, #28]
    3706:	7013      	strb	r3, [r2, #0]
  response[1] = 0x00;
    3708:	2300      	movs	r3, #0
    370a:	7053      	strb	r3, [r2, #1]
  for (uint16_t i = (readByTypeReq->startHandle - 1); i < GATT.attributeCount() && i <= (readByTypeReq->endHandle - 1); i++) {
    370c:	69ba      	ldr	r2, [r7, #24]
    370e:	69bb      	ldr	r3, [r7, #24]
    3710:	7855      	ldrb	r5, [r2, #1]
    3712:	781b      	ldrb	r3, [r3, #0]
    3714:	022d      	lsls	r5, r5, #8
    3716:	431d      	orrs	r5, r3
    3718:	3d01      	subs	r5, #1
    371a:	b2ad      	uxth	r5, r5
    371c:	4e82      	ldr	r6, [pc, #520]	; (3928 <_ZN8ATTClass13readByTypeReqEthPh+0x26c>)
    371e:	0030      	movs	r0, r6
    3720:	f000 fc50 	bl	3fc4 <_ZNK9GATTClass14attributeCountEv>
    3724:	4285      	cmp	r5, r0
    3726:	d207      	bcs.n	3738 <_ZN8ATTClass13readByTypeReqEthPh+0x7c>
    3728:	69bb      	ldr	r3, [r7, #24]
    372a:	789a      	ldrb	r2, [r3, #2]
    372c:	78db      	ldrb	r3, [r3, #3]
    372e:	021b      	lsls	r3, r3, #8
    3730:	4313      	orrs	r3, r2
    3732:	42ab      	cmp	r3, r5
    3734:	dd00      	ble.n	3738 <_ZN8ATTClass13readByTypeReqEthPh+0x7c>
    3736:	e08c      	b.n	3852 <_ZN8ATTClass13readByTypeReqEthPh+0x196>
  if (responseLength == 2) {
    3738:	2c02      	cmp	r4, #2
    373a:	d000      	beq.n	373e <_ZN8ATTClass13readByTypeReqEthPh+0x82>
    373c:	e080      	b.n	3840 <_ZN8ATTClass13readByTypeReqEthPh+0x184>
    sendError(connectionHandle, ATT_OP_READ_BY_TYPE_REQ, readByTypeReq->startHandle, ATT_ECODE_ATTR_NOT_FOUND);
    373e:	69ba      	ldr	r2, [r7, #24]
    3740:	69bb      	ldr	r3, [r7, #24]
    3742:	7852      	ldrb	r2, [r2, #1]
    3744:	781b      	ldrb	r3, [r3, #0]
    3746:	0212      	lsls	r2, r2, #8
    3748:	431a      	orrs	r2, r3
    374a:	2108      	movs	r1, #8
    374c:	230a      	movs	r3, #10
    374e:	68b8      	ldr	r0, [r7, #8]
    3750:	f7ff fae4 	bl	2d1c <_ZN8ATTClass9sendErrorEthth.constprop.3>
    3754:	683b      	ldr	r3, [r7, #0]
    3756:	469d      	mov	sp, r3
    3758:	e7c5      	b.n	36e6 <_ZN8ATTClass13readByTypeReqEthPh+0x2a>
      } else if (attribute->type() == 0x2902) {
    375a:	6833      	ldr	r3, [r6, #0]
    375c:	0030      	movs	r0, r6
    375e:	689b      	ldr	r3, [r3, #8]
    3760:	4798      	blx	r3
    3762:	4b72      	ldr	r3, [pc, #456]	; (392c <_ZN8ATTClass13readByTypeReqEthPh+0x270>)
    3764:	4298      	cmp	r0, r3
    3766:	d000      	beq.n	376a <_ZN8ATTClass13readByTypeReqEthPh+0xae>
    3768:	e0db      	b.n	3922 <_ZN8ATTClass13readByTypeReqEthPh+0x266>
        memcpy(&response[responseLength], &handle, sizeof(handle));
    376a:	69fb      	ldr	r3, [r7, #28]
    376c:	2202      	movs	r2, #2
    376e:	1918      	adds	r0, r3, r4
    3770:	2324      	movs	r3, #36	; 0x24
    3772:	18f9      	adds	r1, r7, r3
    3774:	f005 fb0b 	bl	8d8e <memcpy>
        int valueSize = min((uint16_t)(_mtu - responseLength), (uint16_t)descriptor->valueSize());
    3778:	697b      	ldr	r3, [r7, #20]
    377a:	0030      	movs	r0, r6
    377c:	89dd      	ldrh	r5, [r3, #14]
    377e:	f7ff f8f1 	bl	2964 <_ZNK18BLELocalDescriptor9valueSizeEv>
        responseLength += sizeof(handle);
    3782:	3402      	adds	r4, #2
    3784:	b2a4      	uxth	r4, r4
        int valueSize = min((uint16_t)(_mtu - responseLength), (uint16_t)descriptor->valueSize());
    3786:	1b2d      	subs	r5, r5, r4
    3788:	b2ad      	uxth	r5, r5
    378a:	b280      	uxth	r0, r0
    378c:	42a8      	cmp	r0, r5
    378e:	dd14      	ble.n	37ba <_ZN8ATTClass13readByTypeReqEthPh+0xfe>
    3790:	697b      	ldr	r3, [r7, #20]
    3792:	89dd      	ldrh	r5, [r3, #14]
    3794:	1b2d      	subs	r5, r5, r4
    3796:	b2ad      	uxth	r5, r5
        memcpy(&response[responseLength], descriptor->value(), valueSize);
    3798:	69fb      	ldr	r3, [r7, #28]
    379a:	0030      	movs	r0, r6
    379c:	191b      	adds	r3, r3, r4
    379e:	617b      	str	r3, [r7, #20]
    37a0:	f7ff f8e2 	bl	2968 <_ZNK18BLELocalDescriptor5valueEv>
      memcpy(&response[responseLength], characteristic->value(), valueLength);
    37a4:	0001      	movs	r1, r0
    37a6:	002a      	movs	r2, r5
    37a8:	6978      	ldr	r0, [r7, #20]
    37aa:	f005 faf0 	bl	8d8e <memcpy>
      response[1] = 2 + valueLength;
    37ae:	69fb      	ldr	r3, [r7, #28]
      responseLength += valueLength;
    37b0:	1964      	adds	r4, r4, r5
      response[1] = 2 + valueLength;
    37b2:	3502      	adds	r5, #2
      responseLength += valueLength;
    37b4:	b2a4      	uxth	r4, r4
      response[1] = 2 + valueLength;
    37b6:	705d      	strb	r5, [r3, #1]
      break; // all done
    37b8:	e7be      	b.n	3738 <_ZN8ATTClass13readByTypeReqEthPh+0x7c>
        int valueSize = min((uint16_t)(_mtu - responseLength), (uint16_t)descriptor->valueSize());
    37ba:	0030      	movs	r0, r6
    37bc:	f7ff f8d2 	bl	2964 <_ZNK18BLELocalDescriptor9valueSizeEv>
    37c0:	b285      	uxth	r5, r0
    37c2:	e7e9      	b.n	3798 <_ZN8ATTClass13readByTypeReqEthPh+0xdc>
    } else if (attribute->type() == BLETypeCharacteristic && attribute->uuidLength() == 2 && memcmp(&readByTypeReq->uuid, attribute->uuidData(), 2) == 0) {
    37c4:	6893      	ldr	r3, [r2, #8]
    37c6:	0030      	movs	r0, r6
    37c8:	4798      	blx	r3
    37ca:	4b59      	ldr	r3, [pc, #356]	; (3930 <_ZN8ATTClass13readByTypeReqEthPh+0x274>)
    37cc:	4298      	cmp	r0, r3
    37ce:	d000      	beq.n	37d2 <_ZN8ATTClass13readByTypeReqEthPh+0x116>
    37d0:	e0a7      	b.n	3922 <_ZN8ATTClass13readByTypeReqEthPh+0x266>
    37d2:	0030      	movs	r0, r6
    37d4:	f7fe fcc0 	bl	2158 <_ZNK12BLEAttribute10uuidLengthEv>
    37d8:	6138      	str	r0, [r7, #16]
    37da:	2802      	cmp	r0, #2
    37dc:	d000      	beq.n	37e0 <_ZN8ATTClass13readByTypeReqEthPh+0x124>
    37de:	e0a0      	b.n	3922 <_ZN8ATTClass13readByTypeReqEthPh+0x266>
    37e0:	0030      	movs	r0, r6
    37e2:	f7fe fcb4 	bl	214e <_ZNK12BLEAttribute8uuidDataEv>
    37e6:	69bb      	ldr	r3, [r7, #24]
    37e8:	0001      	movs	r1, r0
    37ea:	3304      	adds	r3, #4
    37ec:	693a      	ldr	r2, [r7, #16]
    37ee:	0018      	movs	r0, r3
    37f0:	f005 fabe 	bl	8d70 <memcmp>
    37f4:	2800      	cmp	r0, #0
    37f6:	d000      	beq.n	37fa <_ZN8ATTClass13readByTypeReqEthPh+0x13e>
    37f8:	e093      	b.n	3922 <_ZN8ATTClass13readByTypeReqEthPh+0x266>
      memcpy(&response[responseLength], &handle, sizeof(handle));
    37fa:	69fb      	ldr	r3, [r7, #28]
    37fc:	693a      	ldr	r2, [r7, #16]
    37fe:	1918      	adds	r0, r3, r4
    3800:	2324      	movs	r3, #36	; 0x24
    3802:	18f9      	adds	r1, r7, r3
    3804:	f005 fac3 	bl	8d8e <memcpy>
      int valueLength = min((uint16_t)(_mtu - responseLength), (uint16_t)characteristic->valueLength());
    3808:	697b      	ldr	r3, [r7, #20]
    380a:	0030      	movs	r0, r6
    380c:	89dd      	ldrh	r5, [r3, #14]
    380e:	f7fe fec6 	bl	259e <_ZNK22BLELocalCharacteristic11valueLengthEv>
      responseLength += sizeof(handle);
    3812:	3402      	adds	r4, #2
    3814:	b2a4      	uxth	r4, r4
      int valueLength = min((uint16_t)(_mtu - responseLength), (uint16_t)characteristic->valueLength());
    3816:	1b2d      	subs	r5, r5, r4
    3818:	b2ad      	uxth	r5, r5
    381a:	b280      	uxth	r0, r0
    381c:	42a8      	cmp	r0, r5
    381e:	dc04      	bgt.n	382a <_ZN8ATTClass13readByTypeReqEthPh+0x16e>
    3820:	0030      	movs	r0, r6
    3822:	f7fe febc 	bl	259e <_ZNK22BLELocalCharacteristic11valueLengthEv>
    3826:	b285      	uxth	r5, r0
    3828:	e003      	b.n	3832 <_ZN8ATTClass13readByTypeReqEthPh+0x176>
    382a:	697b      	ldr	r3, [r7, #20]
    382c:	89dd      	ldrh	r5, [r3, #14]
    382e:	1b2d      	subs	r5, r5, r4
    3830:	b2ad      	uxth	r5, r5
      memcpy(&response[responseLength], characteristic->value(), valueLength);
    3832:	69fb      	ldr	r3, [r7, #28]
    3834:	0030      	movs	r0, r6
    3836:	191b      	adds	r3, r3, r4
    3838:	617b      	str	r3, [r7, #20]
    383a:	f7fe feae 	bl	259a <_ZNK22BLELocalCharacteristic5valueEv>
    383e:	e7b1      	b.n	37a4 <_ZN8ATTClass13readByTypeReqEthPh+0xe8>
    HCI.sendAclPkt(connectionHandle, ATT_CID, responseLength, response);
    3840:	69fa      	ldr	r2, [r7, #28]
    3842:	b2e3      	uxtb	r3, r4
    3844:	9200      	str	r2, [sp, #0]
    3846:	68b9      	ldr	r1, [r7, #8]
    3848:	2204      	movs	r2, #4
    384a:	483a      	ldr	r0, [pc, #232]	; (3934 <_ZN8ATTClass13readByTypeReqEthPh+0x278>)
    384c:	f000 fd40 	bl	42d0 <_ZN8HCIClass10sendAclPktEthhPv>
    3850:	e780      	b.n	3754 <_ZN8ATTClass13readByTypeReqEthPh+0x98>
    BLEAttribute* attribute = GATT.attribute(i);
    3852:	0029      	movs	r1, r5
    3854:	0030      	movs	r0, r6
    3856:	f000 fbdc 	bl	4012 <_ZNK9GATTClass9attributeEj>
    uint16_t handle = (i + 1);
    385a:	1c6b      	adds	r3, r5, #1
    385c:	b29b      	uxth	r3, r3
    385e:	60fb      	str	r3, [r7, #12]
    3860:	89bb      	ldrh	r3, [r7, #12]
    BLEAttribute* attribute = GATT.attribute(i);
    3862:	0006      	movs	r6, r0
    uint16_t handle = (i + 1);
    3864:	84bb      	strh	r3, [r7, #36]	; 0x24
    if (attribute->type() == readByTypeReq->uuid) {
    3866:	6803      	ldr	r3, [r0, #0]
    3868:	689b      	ldr	r3, [r3, #8]
    386a:	4798      	blx	r3
    386c:	69bb      	ldr	r3, [r7, #24]
    386e:	791a      	ldrb	r2, [r3, #4]
    3870:	795b      	ldrb	r3, [r3, #5]
    3872:	021b      	lsls	r3, r3, #8
    3874:	4313      	orrs	r3, r2
    3876:	6832      	ldr	r2, [r6, #0]
    3878:	4298      	cmp	r0, r3
    387a:	d1a3      	bne.n	37c4 <_ZN8ATTClass13readByTypeReqEthPh+0x108>
      if (attribute->type() == BLETypeCharacteristic) {
    387c:	6893      	ldr	r3, [r2, #8]
    387e:	0030      	movs	r0, r6
    3880:	4798      	blx	r3
    3882:	4b2b      	ldr	r3, [pc, #172]	; (3930 <_ZN8ATTClass13readByTypeReqEthPh+0x274>)
    3884:	4298      	cmp	r0, r3
    3886:	d000      	beq.n	388a <_ZN8ATTClass13readByTypeReqEthPh+0x1ce>
    3888:	e767      	b.n	375a <_ZN8ATTClass13readByTypeReqEthPh+0x9e>
        if (characteristic->valueHandle() == handle) {
    388a:	0030      	movs	r0, r6
    388c:	f7fe fefa 	bl	2684 <_ZNK22BLELocalCharacteristic11valueHandleEv>
    3890:	68fb      	ldr	r3, [r7, #12]
    3892:	4283      	cmp	r3, r0
    3894:	d045      	beq.n	3922 <_ZN8ATTClass13readByTypeReqEthPh+0x266>
        int uuidLen = attribute->uuidLength();
    3896:	0030      	movs	r0, r6
    3898:	f7fe fc5e 	bl	2158 <_ZNK12BLEAttribute10uuidLengthEv>
        int typeSize = (uuidLen == 2) ? 7 : 21;
    389c:	2307      	movs	r3, #7
        int uuidLen = attribute->uuidLength();
    389e:	6078      	str	r0, [r7, #4]
        int typeSize = (uuidLen == 2) ? 7 : 21;
    38a0:	613b      	str	r3, [r7, #16]
    38a2:	2802      	cmp	r0, #2
    38a4:	d001      	beq.n	38aa <_ZN8ATTClass13readByTypeReqEthPh+0x1ee>
    38a6:	2315      	movs	r3, #21
    38a8:	613b      	str	r3, [r7, #16]
        if (response[1] == 0) {
    38aa:	69fb      	ldr	r3, [r7, #28]
    38ac:	785b      	ldrb	r3, [r3, #1]
    38ae:	2b00      	cmp	r3, #0
    38b0:	d102      	bne.n	38b8 <_ZN8ATTClass13readByTypeReqEthPh+0x1fc>
          response[1] = typeSize;
    38b2:	69fb      	ldr	r3, [r7, #28]
    38b4:	7c3a      	ldrb	r2, [r7, #16]
    38b6:	705a      	strb	r2, [r3, #1]
        if (response[1] != typeSize) {
    38b8:	69fb      	ldr	r3, [r7, #28]
    38ba:	693a      	ldr	r2, [r7, #16]
    38bc:	785b      	ldrb	r3, [r3, #1]
    38be:	429a      	cmp	r2, r3
    38c0:	d000      	beq.n	38c4 <_ZN8ATTClass13readByTypeReqEthPh+0x208>
    38c2:	e739      	b.n	3738 <_ZN8ATTClass13readByTypeReqEthPh+0x7c>
        memcpy(&response[responseLength], &handle, sizeof(handle));
    38c4:	69fb      	ldr	r3, [r7, #28]
    38c6:	2202      	movs	r2, #2
    38c8:	1918      	adds	r0, r3, r4
    38ca:	2324      	movs	r3, #36	; 0x24
    38cc:	18f9      	adds	r1, r7, r3
    38ce:	f005 fa5e 	bl	8d8e <memcpy>
        response[responseLength++] = characteristic->properties();
    38d2:	0030      	movs	r0, r6
    38d4:	f7fe fe5c 	bl	2590 <_ZNK22BLELocalCharacteristic10propertiesEv>
    38d8:	69fa      	ldr	r2, [r7, #28]
        responseLength += sizeof(handle);
    38da:	1ca3      	adds	r3, r4, #2
        response[responseLength++] = characteristic->properties();
    38dc:	b29b      	uxth	r3, r3
    38de:	54d0      	strb	r0, [r2, r3]
        memcpy(&response[responseLength], &valueHandle, sizeof(valueHandle));
    38e0:	2326      	movs	r3, #38	; 0x26
        response[responseLength++] = characteristic->properties();
    38e2:	1ce0      	adds	r0, r4, #3
        memcpy(&response[responseLength], &valueHandle, sizeof(valueHandle));
    38e4:	b280      	uxth	r0, r0
    38e6:	18f9      	adds	r1, r7, r3
        uint16_t valueHandle = (handle + 1);
    38e8:	3502      	adds	r5, #2
        memcpy(&response[responseLength], &valueHandle, sizeof(valueHandle));
    38ea:	1810      	adds	r0, r2, r0
    38ec:	2202      	movs	r2, #2
        uint16_t valueHandle = (handle + 1);
    38ee:	84fd      	strh	r5, [r7, #38]	; 0x26
        responseLength += sizeof(valueHandle);
    38f0:	3405      	adds	r4, #5
        memcpy(&response[responseLength], &valueHandle, sizeof(valueHandle));
    38f2:	f005 fa4c 	bl	8d8e <memcpy>
        memcpy(&response[responseLength], characteristic->uuidData(), uuidLen);
    38f6:	69fb      	ldr	r3, [r7, #28]
        responseLength += sizeof(valueHandle);
    38f8:	b2a4      	uxth	r4, r4
        memcpy(&response[responseLength], characteristic->uuidData(), uuidLen);
    38fa:	0030      	movs	r0, r6
    38fc:	191d      	adds	r5, r3, r4
    38fe:	f7fe fc26 	bl	214e <_ZNK12BLEAttribute8uuidDataEv>
    3902:	687a      	ldr	r2, [r7, #4]
    3904:	0001      	movs	r1, r0
    3906:	0028      	movs	r0, r5
    3908:	f005 fa41 	bl	8d8e <memcpy>
        responseLength += uuidLen;
    390c:	687b      	ldr	r3, [r7, #4]
        if ((responseLength + typeSize) > _mtu) {
    390e:	697a      	ldr	r2, [r7, #20]
        responseLength += uuidLen;
    3910:	18e4      	adds	r4, r4, r3
        if ((responseLength + typeSize) > _mtu) {
    3912:	693b      	ldr	r3, [r7, #16]
        responseLength += uuidLen;
    3914:	b2a4      	uxth	r4, r4
        if ((responseLength + typeSize) > _mtu) {
    3916:	89d2      	ldrh	r2, [r2, #14]
    3918:	18e3      	adds	r3, r4, r3
    391a:	4293      	cmp	r3, r2
    391c:	dd00      	ble.n	3920 <_ZN8ATTClass13readByTypeReqEthPh+0x264>
    391e:	e70b      	b.n	3738 <_ZN8ATTClass13readByTypeReqEthPh+0x7c>
    3920:	68fd      	ldr	r5, [r7, #12]
  for (uint16_t i = (readByTypeReq->startHandle - 1); i < GATT.attributeCount() && i <= (readByTypeReq->endHandle - 1); i++) {
    3922:	3501      	adds	r5, #1
    3924:	b2ad      	uxth	r5, r5
    3926:	e6f9      	b.n	371c <_ZN8ATTClass13readByTypeReqEthPh+0x60>
    3928:	20000304 	.word	0x20000304
    392c:	00002902 	.word	0x00002902
    3930:	00002803 	.word	0x00002803
    3934:	20000470 	.word	0x20000470

00003938 <_ZN8ATTClass13writeReqOrCmdEthhPh>:
{
    3938:	b5f0      	push	{r4, r5, r6, r7, lr}
    393a:	b08b      	sub	sp, #44	; 0x2c
    393c:	af02      	add	r7, sp, #8
    393e:	60b8      	str	r0, [r7, #8]
    3940:	000d      	movs	r5, r1
    3942:	0014      	movs	r4, r2
    3944:	607b      	str	r3, [r7, #4]
  if (dlen < sizeof(uint16_t)) {
    3946:	2b01      	cmp	r3, #1
    3948:	d808      	bhi.n	395c <_ZN8ATTClass13writeReqOrCmdEthhPh+0x24>
    if (withResponse) {
    394a:	2a12      	cmp	r2, #18
    394c:	d115      	bne.n	397a <_ZN8ATTClass13writeReqOrCmdEthhPh+0x42>
      sendError(connectionHandle, ATT_OP_WRITE_REQ, 0x0000, ATT_ECODE_INVALID_PDU);
    394e:	2304      	movs	r3, #4
    3950:	2200      	movs	r2, #0
      sendError(connectionHandle, ATT_OP_WRITE_REQ, handle, ATT_ECODE_WRITE_NOT_PERM);
    3952:	0021      	movs	r1, r4
    3954:	0028      	movs	r0, r5
    3956:	f7ff f9e1 	bl	2d1c <_ZN8ATTClass9sendErrorEthth.constprop.3>
    395a:	e00e      	b.n	397a <_ZN8ATTClass13writeReqOrCmdEthhPh+0x42>
  uint16_t handle = *(uint16_t*)data;
    395c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
  if ((uint16_t)(handle - 1) > GATT.attributeCount()) {
    395e:	484b      	ldr	r0, [pc, #300]	; (3a8c <_ZN8ATTClass13writeReqOrCmdEthhPh+0x154>)
  uint16_t handle = *(uint16_t*)data;
    3960:	881b      	ldrh	r3, [r3, #0]
    3962:	60fb      	str	r3, [r7, #12]
  if ((uint16_t)(handle - 1) > GATT.attributeCount()) {
    3964:	f000 fb2e 	bl	3fc4 <_ZNK9GATTClass14attributeCountEv>
    3968:	68fb      	ldr	r3, [r7, #12]
    396a:	1e59      	subs	r1, r3, #1
    396c:	b28b      	uxth	r3, r1
    396e:	4283      	cmp	r3, r0
    3970:	d906      	bls.n	3980 <_ZN8ATTClass13writeReqOrCmdEthhPh+0x48>
      sendError(connectionHandle, ATT_OP_WRITE_REQ, handle, ATT_ECODE_ATTR_NOT_FOUND);
    3972:	230a      	movs	r3, #10
    if (withResponse) {
    3974:	2c12      	cmp	r4, #18
    3976:	d100      	bne.n	397a <_ZN8ATTClass13writeReqOrCmdEthhPh+0x42>
    3978:	e085      	b.n	3a86 <_ZN8ATTClass13writeReqOrCmdEthhPh+0x14e>
}
    397a:	46bd      	mov	sp, r7
    397c:	b009      	add	sp, #36	; 0x24
    397e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  BLEAttribute* attribute = GATT.attribute(handle - 1);
    3980:	4842      	ldr	r0, [pc, #264]	; (3a8c <_ZN8ATTClass13writeReqOrCmdEthhPh+0x154>)
    3982:	f000 fb46 	bl	4012 <_ZNK9GATTClass9attributeEj>
  if (attribute->type() == BLETypeCharacteristic) {
    3986:	6803      	ldr	r3, [r0, #0]
  BLEAttribute* attribute = GATT.attribute(handle - 1);
    3988:	0006      	movs	r6, r0
  if (attribute->type() == BLETypeCharacteristic) {
    398a:	689b      	ldr	r3, [r3, #8]
    398c:	4798      	blx	r3
    398e:	4b40      	ldr	r3, [pc, #256]	; (3a90 <_ZN8ATTClass13writeReqOrCmdEthhPh+0x158>)
    3990:	4298      	cmp	r0, r3
    3992:	d141      	bne.n	3a18 <_ZN8ATTClass13writeReqOrCmdEthhPh+0xe0>
    if (handle != characteristic->valueHandle() || 
    3994:	0030      	movs	r0, r6
    3996:	f7fe fe75 	bl	2684 <_ZNK22BLELocalCharacteristic11valueHandleEv>
      withResponse ? ((characteristic->properties() & BLEWrite) == 0) : 
    399a:	68fb      	ldr	r3, [r7, #12]
    399c:	4283      	cmp	r3, r0
    399e:	d101      	bne.n	39a4 <_ZN8ATTClass13writeReqOrCmdEthhPh+0x6c>
    if (handle != characteristic->valueHandle() || 
    39a0:	2c12      	cmp	r4, #18
    39a2:	d133      	bne.n	3a0c <_ZN8ATTClass13writeReqOrCmdEthhPh+0xd4>
      withResponse ? ((characteristic->properties() & BLEWrite) == 0) : 
    39a4:	0030      	movs	r0, r6
    39a6:	f7fe fdf3 	bl	2590 <_ZNK22BLELocalCharacteristic10propertiesEv>
    if (handle != characteristic->valueHandle() || 
    39aa:	0703      	lsls	r3, r0, #28
    39ac:	d567      	bpl.n	3a7e <_ZN8ATTClass13writeReqOrCmdEthhPh+0x146>
    if (connectionHandle == _connectionHandle) {
    39ae:	68bb      	ldr	r3, [r7, #8]
    39b0:	88db      	ldrh	r3, [r3, #6]
    39b2:	42ab      	cmp	r3, r5
    39b4:	d114      	bne.n	39e0 <_ZN8ATTClass13writeReqOrCmdEthhPh+0xa8>
      characteristic->writeValue(BLEDevice(connectionHandle, _peerAddress), value, valueLength);
    39b6:	2314      	movs	r3, #20
    39b8:	68ba      	ldr	r2, [r7, #8]
    39ba:	0029      	movs	r1, r5
    39bc:	3208      	adds	r2, #8
    39be:	18f8      	adds	r0, r7, r3
    39c0:	f7fe fcf2 	bl	23a8 <_ZN9BLEDeviceC1EtPh>
    39c4:	2114      	movs	r1, #20
  uint8_t valueLength = dlen - sizeof(handle);
    39c6:	687b      	ldr	r3, [r7, #4]
  uint8_t* value = &data[sizeof(handle)];
    39c8:	6bba      	ldr	r2, [r7, #56]	; 0x38
  uint8_t valueLength = dlen - sizeof(handle);
    39ca:	3b02      	subs	r3, #2
      characteristic->writeValue(BLEDevice(connectionHandle, _peerAddress), value, valueLength);
    39cc:	b2db      	uxtb	r3, r3
  uint8_t* value = &data[sizeof(handle)];
    39ce:	3202      	adds	r2, #2
      characteristic->writeValue(BLEDevice(connectionHandle, _peerAddress), value, valueLength);
    39d0:	1879      	adds	r1, r7, r1
    39d2:	0030      	movs	r0, r6
    39d4:	f7fe ff3c 	bl	2850 <_ZN22BLELocalCharacteristic10writeValueE9BLEDevicePKhi>
      characteristic->writeCccdValue(BLEDevice(connectionHandle, _peerAddress), *((uint16_t*)value));
    39d8:	2314      	movs	r3, #20
    39da:	18f8      	adds	r0, r7, r3
    39dc:	f7fe fc33 	bl	2246 <_ZN9BLEDeviceD1Ev>
  if (withResponse) {
    39e0:	2c12      	cmp	r4, #18
    39e2:	d1ca      	bne.n	397a <_ZN8ATTClass13writeReqOrCmdEthhPh+0x42>
    HCI.sendAclPkt(connectionHandle, ATT_CID, responseLength, response);
    39e4:	466c      	mov	r4, sp
    uint8_t response[_mtu];
    39e6:	68bb      	ldr	r3, [r7, #8]
    response[0] = ATT_OP_WRITE_RESP;
    39e8:	2213      	movs	r2, #19
    uint8_t response[_mtu];
    39ea:	89db      	ldrh	r3, [r3, #14]
    HCI.sendAclPkt(connectionHandle, ATT_CID, responseLength, response);
    39ec:	0029      	movs	r1, r5
    uint8_t response[_mtu];
    39ee:	3307      	adds	r3, #7
    39f0:	08db      	lsrs	r3, r3, #3
    39f2:	00db      	lsls	r3, r3, #3
    39f4:	1ae3      	subs	r3, r4, r3
    39f6:	469d      	mov	sp, r3
    39f8:	ab02      	add	r3, sp, #8
    response[0] = ATT_OP_WRITE_RESP;
    39fa:	701a      	strb	r2, [r3, #0]
    HCI.sendAclPkt(connectionHandle, ATT_CID, responseLength, response);
    39fc:	4825      	ldr	r0, [pc, #148]	; (3a94 <_ZN8ATTClass13writeReqOrCmdEthhPh+0x15c>)
    39fe:	9300      	str	r3, [sp, #0]
    3a00:	3a0f      	subs	r2, #15
    3a02:	2301      	movs	r3, #1
    3a04:	f000 fc64 	bl	42d0 <_ZN8HCIClass10sendAclPktEthhPv>
    3a08:	46a5      	mov	sp, r4
    3a0a:	e7b6      	b.n	397a <_ZN8ATTClass13writeReqOrCmdEthhPh+0x42>
                     ((characteristic->properties() & BLEWriteWithoutResponse) == 0)) {
    3a0c:	0030      	movs	r0, r6
    3a0e:	f7fe fdbf 	bl	2590 <_ZNK22BLELocalCharacteristic10propertiesEv>
    if (handle != characteristic->valueHandle() || 
    3a12:	0743      	lsls	r3, r0, #29
    3a14:	d4cb      	bmi.n	39ae <_ZN8ATTClass13writeReqOrCmdEthhPh+0x76>
    3a16:	e7b0      	b.n	397a <_ZN8ATTClass13writeReqOrCmdEthhPh+0x42>
  } else if (attribute->type() == BLETypeDescriptor) {
    3a18:	6833      	ldr	r3, [r6, #0]
    3a1a:	0030      	movs	r0, r6
    3a1c:	689b      	ldr	r3, [r3, #8]
    3a1e:	4798      	blx	r3
    3a20:	23a4      	movs	r3, #164	; 0xa4
    3a22:	019b      	lsls	r3, r3, #6
    3a24:	4298      	cmp	r0, r3
    3a26:	d12a      	bne.n	3a7e <_ZN8ATTClass13writeReqOrCmdEthhPh+0x146>
    if (descriptor->uuidLength() != 2 || *((uint16_t*)(descriptor->uuidData())) != 0x2902) {
    3a28:	0030      	movs	r0, r6
    3a2a:	f7fe fb95 	bl	2158 <_ZNK12BLEAttribute10uuidLengthEv>
    3a2e:	2802      	cmp	r0, #2
    3a30:	d125      	bne.n	3a7e <_ZN8ATTClass13writeReqOrCmdEthhPh+0x146>
    3a32:	0030      	movs	r0, r6
    3a34:	f7fe fb8b 	bl	214e <_ZNK12BLEAttribute8uuidDataEv>
    3a38:	4b17      	ldr	r3, [pc, #92]	; (3a98 <_ZN8ATTClass13writeReqOrCmdEthhPh+0x160>)
    3a3a:	8802      	ldrh	r2, [r0, #0]
    3a3c:	429a      	cmp	r2, r3
    3a3e:	d11e      	bne.n	3a7e <_ZN8ATTClass13writeReqOrCmdEthhPh+0x146>
    attribute = GATT.attribute(handle - 2);
    3a40:	68fb      	ldr	r3, [r7, #12]
    3a42:	4812      	ldr	r0, [pc, #72]	; (3a8c <_ZN8ATTClass13writeReqOrCmdEthhPh+0x154>)
    3a44:	1e99      	subs	r1, r3, #2
    3a46:	f000 fae4 	bl	4012 <_ZNK9GATTClass9attributeEj>
    if (attribute->type() != BLETypeCharacteristic) {
    3a4a:	6803      	ldr	r3, [r0, #0]
    attribute = GATT.attribute(handle - 2);
    3a4c:	0006      	movs	r6, r0
    if (attribute->type() != BLETypeCharacteristic) {
    3a4e:	689b      	ldr	r3, [r3, #8]
    3a50:	4798      	blx	r3
    3a52:	4b0f      	ldr	r3, [pc, #60]	; (3a90 <_ZN8ATTClass13writeReqOrCmdEthhPh+0x158>)
    3a54:	4298      	cmp	r0, r3
    3a56:	d112      	bne.n	3a7e <_ZN8ATTClass13writeReqOrCmdEthhPh+0x146>
    if (connectionHandle == _connectionHandle) {
    3a58:	68bb      	ldr	r3, [r7, #8]
    3a5a:	88db      	ldrh	r3, [r3, #6]
    3a5c:	42ab      	cmp	r3, r5
    3a5e:	d1bf      	bne.n	39e0 <_ZN8ATTClass13writeReqOrCmdEthhPh+0xa8>
      characteristic->writeCccdValue(BLEDevice(connectionHandle, _peerAddress), *((uint16_t*)value));
    3a60:	2314      	movs	r3, #20
    3a62:	68ba      	ldr	r2, [r7, #8]
    3a64:	0029      	movs	r1, r5
    3a66:	18f8      	adds	r0, r7, r3
    3a68:	3208      	adds	r2, #8
    3a6a:	f7fe fc9d 	bl	23a8 <_ZN9BLEDeviceC1EtPh>
    3a6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    3a70:	0030      	movs	r0, r6
    3a72:	885a      	ldrh	r2, [r3, #2]
    3a74:	2314      	movs	r3, #20
    3a76:	18f9      	adds	r1, r7, r3
    3a78:	f7fe ff16 	bl	28a8 <_ZN22BLELocalCharacteristic14writeCccdValueE9BLEDevicet>
    3a7c:	e7ac      	b.n	39d8 <_ZN8ATTClass13writeReqOrCmdEthhPh+0xa0>
    if (withResponse) {
    3a7e:	2c12      	cmp	r4, #18
    3a80:	d000      	beq.n	3a84 <_ZN8ATTClass13writeReqOrCmdEthhPh+0x14c>
    3a82:	e77a      	b.n	397a <_ZN8ATTClass13writeReqOrCmdEthhPh+0x42>
      sendError(connectionHandle, ATT_OP_WRITE_REQ, handle, ATT_ECODE_WRITE_NOT_PERM);
    3a84:	2303      	movs	r3, #3
    3a86:	68fa      	ldr	r2, [r7, #12]
    3a88:	e763      	b.n	3952 <_ZN8ATTClass13writeReqOrCmdEthhPh+0x1a>
    3a8a:	46c0      	nop			; (mov r8, r8)
    3a8c:	20000304 	.word	0x20000304
    3a90:	00002803 	.word	0x00002803
    3a94:	20000470 	.word	0x20000470
    3a98:	00002902 	.word	0x00002902

00003a9c <_ZN8ATTClass12prepWriteReqEthPh>:
{
    3a9c:	b5f0      	push	{r4, r5, r6, r7, lr}
    3a9e:	b08b      	sub	sp, #44	; 0x2c
    3aa0:	af02      	add	r7, sp, #8
    3aa2:	617b      	str	r3, [r7, #20]
  HCI.sendAclPkt(connectionHandle, ATT_CID, responseLength, response);
    3aa4:	466b      	mov	r3, sp
{
    3aa6:	0005      	movs	r5, r0
    3aa8:	61f9      	str	r1, [r7, #28]
    3aaa:	613a      	str	r2, [r7, #16]
  HCI.sendAclPkt(connectionHandle, ATT_CID, responseLength, response);
    3aac:	60bb      	str	r3, [r7, #8]
  if (dlen < sizeof(PrepWriteReq)) {
    3aae:	2a03      	cmp	r2, #3
    3ab0:	d806      	bhi.n	3ac0 <_ZN8ATTClass12prepWriteReqEthPh+0x24>
    sendError(connectionHandle, ATT_OP_PREP_WRITE_REQ, 0x0000, ATT_ECODE_INVALID_PDU);
    3ab2:	2304      	movs	r3, #4
    3ab4:	2200      	movs	r2, #0
    sendError(connectionHandle, ATT_OP_PREP_WRITE_REQ, handle, ATT_ECODE_INVALID_OFFSET);
    3ab6:	2116      	movs	r1, #22
    3ab8:	69f8      	ldr	r0, [r7, #28]
    3aba:	f7ff f92f 	bl	2d1c <_ZN8ATTClass9sendErrorEthth.constprop.3>
    return;
    3abe:	e075      	b.n	3bac <_ZN8ATTClass12prepWriteReqEthPh+0x110>
  uint16_t handle = prepWriteReq->handle;
    3ac0:	697a      	ldr	r2, [r7, #20]
    3ac2:	697b      	ldr	r3, [r7, #20]
    3ac4:	7854      	ldrb	r4, [r2, #1]
    3ac6:	781b      	ldrb	r3, [r3, #0]
  uint16_t offset = prepWriteReq->offset;
    3ac8:	78d0      	ldrb	r0, [r2, #3]
  uint16_t handle = prepWriteReq->handle;
    3aca:	0224      	lsls	r4, r4, #8
    3acc:	431c      	orrs	r4, r3
  uint16_t offset = prepWriteReq->offset;
    3ace:	7893      	ldrb	r3, [r2, #2]
  if ((uint16_t)(handle - 1) > GATT.attributeCount()) {
    3ad0:	4e3c      	ldr	r6, [pc, #240]	; (3bc4 <_ZN8ATTClass12prepWriteReqEthPh+0x128>)
  uint16_t offset = prepWriteReq->offset;
    3ad2:	0200      	lsls	r0, r0, #8
    3ad4:	4318      	orrs	r0, r3
    3ad6:	60f8      	str	r0, [r7, #12]
  if ((uint16_t)(handle - 1) > GATT.attributeCount()) {
    3ad8:	0030      	movs	r0, r6
    3ada:	f000 fa73 	bl	3fc4 <_ZNK9GATTClass14attributeCountEv>
    3ade:	1e61      	subs	r1, r4, #1
    3ae0:	b28b      	uxth	r3, r1
    3ae2:	4283      	cmp	r3, r0
    3ae4:	d902      	bls.n	3aec <_ZN8ATTClass12prepWriteReqEthPh+0x50>
    sendError(connectionHandle, ATT_OP_PREP_WRITE_REQ, handle, ATT_ECODE_ATTR_NOT_FOUND);
    3ae6:	230a      	movs	r3, #10
    sendError(connectionHandle, ATT_OP_PREP_WRITE_REQ, handle, ATT_ECODE_INVALID_OFFSET);
    3ae8:	0022      	movs	r2, r4
    3aea:	e7e4      	b.n	3ab6 <_ZN8ATTClass12prepWriteReqEthPh+0x1a>
  BLEAttribute* attribute = GATT.attribute(handle - 1);
    3aec:	0030      	movs	r0, r6
    3aee:	f000 fa90 	bl	4012 <_ZNK9GATTClass9attributeEj>
  if (attribute->type() != BLETypeCharacteristic) {
    3af2:	6803      	ldr	r3, [r0, #0]
  BLEAttribute* attribute = GATT.attribute(handle - 1);
    3af4:	61b8      	str	r0, [r7, #24]
  if (attribute->type() != BLETypeCharacteristic) {
    3af6:	689b      	ldr	r3, [r3, #8]
    3af8:	4798      	blx	r3
    3afa:	4b33      	ldr	r3, [pc, #204]	; (3bc8 <_ZN8ATTClass12prepWriteReqEthPh+0x12c>)
    3afc:	4298      	cmp	r0, r3
    3afe:	d001      	beq.n	3b04 <_ZN8ATTClass12prepWriteReqEthPh+0x68>
    sendError(connectionHandle, ATT_OP_PREP_WRITE_REQ, handle, ATT_ECODE_ATTR_NOT_LONG);
    3b00:	230b      	movs	r3, #11
    3b02:	e7f1      	b.n	3ae8 <_ZN8ATTClass12prepWriteReqEthPh+0x4c>
  if (handle != characteristic->valueHandle()) {
    3b04:	69b8      	ldr	r0, [r7, #24]
    3b06:	f7fe fdbd 	bl	2684 <_ZNK22BLELocalCharacteristic11valueHandleEv>
    3b0a:	4284      	cmp	r4, r0
    3b0c:	d1f8      	bne.n	3b00 <_ZN8ATTClass12prepWriteReqEthPh+0x64>
  if ((characteristic->properties() & BLEWrite) == 0) {
    3b0e:	69b8      	ldr	r0, [r7, #24]
    3b10:	f7fe fd3e 	bl	2590 <_ZNK22BLELocalCharacteristic10propertiesEv>
    3b14:	0703      	lsls	r3, r0, #28
    3b16:	d401      	bmi.n	3b1c <_ZN8ATTClass12prepWriteReqEthPh+0x80>
    sendError(connectionHandle, ATT_OP_PREP_WRITE_REQ, handle, ATT_ECODE_WRITE_NOT_PERM);
    3b18:	2303      	movs	r3, #3
    3b1a:	e7e5      	b.n	3ae8 <_ZN8ATTClass12prepWriteReqEthPh+0x4c>
  if (_longWriteHandle == 0) {
    3b1c:	8a6e      	ldrh	r6, [r5, #18]
    3b1e:	2e00      	cmp	r6, #0
    3b20:	d149      	bne.n	3bb6 <_ZN8ATTClass12prepWriteReqEthPh+0x11a>
    int valueSize = characteristic->valueSize();
    3b22:	69b8      	ldr	r0, [r7, #24]
    3b24:	f7fe fd37 	bl	2596 <_ZNK22BLELocalCharacteristic9valueSizeEv>
    _longWriteValue = (uint8_t*)realloc(_longWriteValue, valueSize);
    3b28:	0001      	movs	r1, r0
    int valueSize = characteristic->valueSize();
    3b2a:	6078      	str	r0, [r7, #4]
    _longWriteValue = (uint8_t*)realloc(_longWriteValue, valueSize);
    3b2c:	6968      	ldr	r0, [r5, #20]
    3b2e:	f005 fe69 	bl	9804 <realloc>
    _longWriteValueLength = 0;
    3b32:	832e      	strh	r6, [r5, #24]
    _longWriteValue = (uint8_t*)realloc(_longWriteValue, valueSize);
    3b34:	6168      	str	r0, [r5, #20]
    _longWriteHandle = handle;
    3b36:	826c      	strh	r4, [r5, #18]
    memset(_longWriteValue, 0x00, valueSize);
    3b38:	687a      	ldr	r2, [r7, #4]
    3b3a:	0031      	movs	r1, r6
    3b3c:	f005 f942 	bl	8dc4 <memset>
  if ((offset != _longWriteValueLength) || ((offset + valueLength) > (uint16_t)characteristic->valueSize())) {
    3b40:	8b2b      	ldrh	r3, [r5, #24]
    3b42:	68fa      	ldr	r2, [r7, #12]
    3b44:	4293      	cmp	r3, r2
    3b46:	d13b      	bne.n	3bc0 <_ZN8ATTClass12prepWriteReqEthPh+0x124>
  uint8_t valueLength = dlen - sizeof(PrepWriteReq);
    3b48:	693b      	ldr	r3, [r7, #16]
  if ((offset != _longWriteValueLength) || ((offset + valueLength) > (uint16_t)characteristic->valueSize())) {
    3b4a:	69b8      	ldr	r0, [r7, #24]
  uint8_t valueLength = dlen - sizeof(PrepWriteReq);
    3b4c:	1f1e      	subs	r6, r3, #4
    3b4e:	b2f6      	uxtb	r6, r6
  if ((offset != _longWriteValueLength) || ((offset + valueLength) > (uint16_t)characteristic->valueSize())) {
    3b50:	1993      	adds	r3, r2, r6
    3b52:	607b      	str	r3, [r7, #4]
    3b54:	f7fe fd1f 	bl	2596 <_ZNK22BLELocalCharacteristic9valueSizeEv>
    3b58:	687b      	ldr	r3, [r7, #4]
    3b5a:	b280      	uxth	r0, r0
    3b5c:	4298      	cmp	r0, r3
    3b5e:	db2f      	blt.n	3bc0 <_ZN8ATTClass12prepWriteReqEthPh+0x124>
  memcpy(_longWriteValue + offset, value, valueLength);
    3b60:	696a      	ldr	r2, [r5, #20]
    3b62:	68fb      	ldr	r3, [r7, #12]
    3b64:	4694      	mov	ip, r2
    3b66:	4463      	add	r3, ip
    3b68:	0018      	movs	r0, r3
  uint8_t* value = &data[sizeof(PrepWriteReq)];
    3b6a:	697b      	ldr	r3, [r7, #20]
  memcpy(_longWriteValue + offset, value, valueLength);
    3b6c:	0032      	movs	r2, r6
  uint8_t* value = &data[sizeof(PrepWriteReq)];
    3b6e:	1d19      	adds	r1, r3, #4
  memcpy(_longWriteValue + offset, value, valueLength);
    3b70:	f005 f90d 	bl	8d8e <memcpy>
  uint8_t response[_mtu];
    3b74:	466a      	mov	r2, sp
  _longWriteValueLength += valueLength;
    3b76:	8b2b      	ldrh	r3, [r5, #24]
  memcpy(&response[1], data, dlen);
    3b78:	2009      	movs	r0, #9
  _longWriteValueLength += valueLength;
    3b7a:	199e      	adds	r6, r3, r6
  uint8_t response[_mtu];
    3b7c:	89eb      	ldrh	r3, [r5, #14]
  memcpy(&response[1], data, dlen);
    3b7e:	6979      	ldr	r1, [r7, #20]
  uint8_t response[_mtu];
    3b80:	3307      	adds	r3, #7
    3b82:	08db      	lsrs	r3, r3, #3
    3b84:	00db      	lsls	r3, r3, #3
    3b86:	1ad3      	subs	r3, r2, r3
    3b88:	469d      	mov	sp, r3
  response[0] = ATT_OP_PREP_WRITE_RESP;
    3b8a:	2317      	movs	r3, #23
  uint8_t response[_mtu];
    3b8c:	ac02      	add	r4, sp, #8
  response[0] = ATT_OP_PREP_WRITE_RESP;
    3b8e:	7023      	strb	r3, [r4, #0]
  memcpy(&response[1], data, dlen);
    3b90:	693a      	ldr	r2, [r7, #16]
  _longWriteValueLength += valueLength;
    3b92:	832e      	strh	r6, [r5, #24]
  memcpy(&response[1], data, dlen);
    3b94:	4468      	add	r0, sp
    3b96:	f005 f8fa 	bl	8d8e <memcpy>
  responseLength = dlen + 1;
    3b9a:	693b      	ldr	r3, [r7, #16]
  HCI.sendAclPkt(connectionHandle, ATT_CID, responseLength, response);
    3b9c:	9400      	str	r4, [sp, #0]
  responseLength = dlen + 1;
    3b9e:	3301      	adds	r3, #1
  HCI.sendAclPkt(connectionHandle, ATT_CID, responseLength, response);
    3ba0:	b2db      	uxtb	r3, r3
    3ba2:	2204      	movs	r2, #4
    3ba4:	69f9      	ldr	r1, [r7, #28]
    3ba6:	4809      	ldr	r0, [pc, #36]	; (3bcc <_ZN8ATTClass12prepWriteReqEthPh+0x130>)
    3ba8:	f000 fb92 	bl	42d0 <_ZN8HCIClass10sendAclPktEthhPv>
    3bac:	68bb      	ldr	r3, [r7, #8]
    3bae:	469d      	mov	sp, r3
}
    3bb0:	46bd      	mov	sp, r7
    3bb2:	b009      	add	sp, #36	; 0x24
    3bb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    sendError(connectionHandle, ATT_OP_PREP_WRITE_REQ, handle, ATT_ECODE_UNLIKELY);
    3bb6:	230e      	movs	r3, #14
  } else if (_longWriteHandle != handle) {
    3bb8:	42b4      	cmp	r4, r6
    3bba:	d000      	beq.n	3bbe <_ZN8ATTClass12prepWriteReqEthPh+0x122>
    3bbc:	e794      	b.n	3ae8 <_ZN8ATTClass12prepWriteReqEthPh+0x4c>
    3bbe:	e7bf      	b.n	3b40 <_ZN8ATTClass12prepWriteReqEthPh+0xa4>
    sendError(connectionHandle, ATT_OP_PREP_WRITE_REQ, handle, ATT_ECODE_INVALID_OFFSET);
    3bc0:	2307      	movs	r3, #7
    3bc2:	e791      	b.n	3ae8 <_ZN8ATTClass12prepWriteReqEthPh+0x4c>
    3bc4:	20000304 	.word	0x20000304
    3bc8:	00002803 	.word	0x00002803
    3bcc:	20000470 	.word	0x20000470

00003bd0 <_ZN8ATTClass12execWriteReqEthPh>:
{
    3bd0:	b5f0      	push	{r4, r5, r6, r7, lr}
    3bd2:	b089      	sub	sp, #36	; 0x24
    3bd4:	000d      	movs	r5, r1
  HCI.sendAclPkt(connectionHandle, ATT_CID, responseLength, response);
    3bd6:	4669      	mov	r1, sp
{
    3bd8:	af02      	add	r7, sp, #8
    3bda:	0004      	movs	r4, r0
  HCI.sendAclPkt(connectionHandle, ATT_CID, responseLength, response);
    3bdc:	6079      	str	r1, [r7, #4]
  if (dlen != sizeof(uint8_t)) {
    3bde:	2a01      	cmp	r2, #1
    3be0:	d008      	beq.n	3bf4 <_ZN8ATTClass12execWriteReqEthPh+0x24>
    sendError(connectionHandle, ATT_OP_EXEC_WRITE_REQ, 0x0000, ATT_ECODE_INVALID_PDU);
    3be2:	2304      	movs	r3, #4
    3be4:	2200      	movs	r2, #0
    3be6:	2118      	movs	r1, #24
    3be8:	0028      	movs	r0, r5
    3bea:	f7ff f897 	bl	2d1c <_ZN8ATTClass9sendErrorEthth.constprop.3>
}
    3bee:	46bd      	mov	sp, r7
    3bf0:	b007      	add	sp, #28
    3bf2:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (_longWriteHandle && (flag & 0x01)) {
    3bf4:	8a41      	ldrh	r1, [r0, #18]
    3bf6:	2900      	cmp	r1, #0
    3bf8:	d01c      	beq.n	3c34 <_ZN8ATTClass12execWriteReqEthPh+0x64>
    3bfa:	781b      	ldrb	r3, [r3, #0]
    3bfc:	4213      	tst	r3, r2
    3bfe:	d019      	beq.n	3c34 <_ZN8ATTClass12execWriteReqEthPh+0x64>
    BLELocalCharacteristic* characteristic = (BLELocalCharacteristic*)GATT.attribute(_longWriteHandle - 1);
    3c00:	3901      	subs	r1, #1
    3c02:	4818      	ldr	r0, [pc, #96]	; (3c64 <_ZN8ATTClass12execWriteReqEthPh+0x94>)
    3c04:	f000 fa05 	bl	4012 <_ZNK9GATTClass9attributeEj>
    if (connectionHandle == _connectionHandle) {
    3c08:	88e3      	ldrh	r3, [r4, #6]
    BLELocalCharacteristic* characteristic = (BLELocalCharacteristic*)GATT.attribute(_longWriteHandle - 1);
    3c0a:	0006      	movs	r6, r0
    if (connectionHandle == _connectionHandle) {
    3c0c:	42ab      	cmp	r3, r5
    3c0e:	d111      	bne.n	3c34 <_ZN8ATTClass12execWriteReqEthPh+0x64>
      characteristic->writeValue(BLEDevice(connectionHandle, _peerAddress), _longWriteValue, _longWriteValueLength);
    3c10:	230c      	movs	r3, #12
    3c12:	0022      	movs	r2, r4
    3c14:	0029      	movs	r1, r5
    3c16:	3208      	adds	r2, #8
    3c18:	18f8      	adds	r0, r7, r3
    3c1a:	f7fe fbc5 	bl	23a8 <_ZN9BLEDeviceC1EtPh>
    3c1e:	210c      	movs	r1, #12
    3c20:	8b23      	ldrh	r3, [r4, #24]
    3c22:	0030      	movs	r0, r6
    3c24:	6962      	ldr	r2, [r4, #20]
    3c26:	1879      	adds	r1, r7, r1
    3c28:	f7fe fe12 	bl	2850 <_ZN22BLELocalCharacteristic10writeValueE9BLEDevicePKhi>
    3c2c:	230c      	movs	r3, #12
    3c2e:	18f8      	adds	r0, r7, r3
    3c30:	f7fe fb09 	bl	2246 <_ZN9BLEDeviceD1Ev>
  _longWriteHandle = 0x0000;
    3c34:	2300      	movs	r3, #0
  uint8_t response[_mtu];
    3c36:	466a      	mov	r2, sp
  _longWriteHandle = 0x0000;
    3c38:	8263      	strh	r3, [r4, #18]
  _longWriteValueLength = 0;
    3c3a:	8323      	strh	r3, [r4, #24]
  uint8_t response[_mtu];
    3c3c:	89e3      	ldrh	r3, [r4, #14]
  HCI.sendAclPkt(connectionHandle, ATT_CID, responseLength, response);
    3c3e:	0029      	movs	r1, r5
  uint8_t response[_mtu];
    3c40:	3307      	adds	r3, #7
    3c42:	08db      	lsrs	r3, r3, #3
    3c44:	00db      	lsls	r3, r3, #3
    3c46:	1ad3      	subs	r3, r2, r3
    3c48:	469d      	mov	sp, r3
  response[0] = ATT_OP_EXEC_WRITE_RESP;
    3c4a:	2219      	movs	r2, #25
  uint8_t response[_mtu];
    3c4c:	ab02      	add	r3, sp, #8
  response[0] = ATT_OP_EXEC_WRITE_RESP;
    3c4e:	701a      	strb	r2, [r3, #0]
  HCI.sendAclPkt(connectionHandle, ATT_CID, responseLength, response);
    3c50:	4805      	ldr	r0, [pc, #20]	; (3c68 <_ZN8ATTClass12execWriteReqEthPh+0x98>)
    3c52:	9300      	str	r3, [sp, #0]
    3c54:	3a15      	subs	r2, #21
    3c56:	2301      	movs	r3, #1
    3c58:	f000 fb3a 	bl	42d0 <_ZN8HCIClass10sendAclPktEthhPv>
    3c5c:	687b      	ldr	r3, [r7, #4]
    3c5e:	469d      	mov	sp, r3
    3c60:	e7c5      	b.n	3bee <_ZN8ATTClass12execWriteReqEthPh+0x1e>
    3c62:	46c0      	nop			; (mov r8, r8)
    3c64:	20000304 	.word	0x20000304
    3c68:	20000470 	.word	0x20000470

00003c6c <_ZN8ATTClass10handleDataEthPh>:
{
    3c6c:	b513      	push	{r0, r1, r4, lr}
    3c6e:	000c      	movs	r4, r1
  uint8_t opcode = data[0];
    3c70:	7819      	ldrb	r1, [r3, #0]
  dlen--;
    3c72:	3a01      	subs	r2, #1
    3c74:	b2d2      	uxtb	r2, r2
  data++;
    3c76:	3301      	adds	r3, #1
  switch (opcode) {
    3c78:	290c      	cmp	r1, #12
    3c7a:	d011      	beq.n	3ca0 <_ZN8ATTClass10handleDataEthPh+0x34>
    3c7c:	d817      	bhi.n	3cae <_ZN8ATTClass10handleDataEthPh+0x42>
    3c7e:	2906      	cmp	r1, #6
    3c80:	d035      	beq.n	3cee <_ZN8ATTClass10handleDataEthPh+0x82>
    3c82:	d809      	bhi.n	3c98 <_ZN8ATTClass10handleDataEthPh+0x2c>
    3c84:	2902      	cmp	r1, #2
    3c86:	d02a      	beq.n	3cde <_ZN8ATTClass10handleDataEthPh+0x72>
    3c88:	2904      	cmp	r1, #4
    3c8a:	d02c      	beq.n	3ce6 <_ZN8ATTClass10handleDataEthPh+0x7a>
      sendError(connectionHandle, opcode, 0x00, ATT_ECODE_REQ_NOT_SUPP);
    3c8c:	2306      	movs	r3, #6
    3c8e:	2200      	movs	r2, #0
    3c90:	0020      	movs	r0, r4
    3c92:	f7ff f843 	bl	2d1c <_ZN8ATTClass9sendErrorEthth.constprop.3>
}
    3c96:	e025      	b.n	3ce4 <_ZN8ATTClass10handleDataEthPh+0x78>
  switch (opcode) {
    3c98:	2908      	cmp	r1, #8
    3c9a:	d02c      	beq.n	3cf6 <_ZN8ATTClass10handleDataEthPh+0x8a>
    3c9c:	290a      	cmp	r1, #10
    3c9e:	d1f5      	bne.n	3c8c <_ZN8ATTClass10handleDataEthPh+0x20>
      readOrReadBlobReq(connectionHandle, opcode, dlen, data);
    3ca0:	9300      	str	r3, [sp, #0]
    3ca2:	0013      	movs	r3, r2
    3ca4:	000a      	movs	r2, r1
    3ca6:	0021      	movs	r1, r4
    3ca8:	f7ff fc1c 	bl	34e4 <_ZN8ATTClass17readOrReadBlobReqEthhPh>
      break;
    3cac:	e01a      	b.n	3ce4 <_ZN8ATTClass10handleDataEthPh+0x78>
  switch (opcode) {
    3cae:	2916      	cmp	r1, #22
    3cb0:	d029      	beq.n	3d06 <_ZN8ATTClass10handleDataEthPh+0x9a>
    3cb2:	d80a      	bhi.n	3cca <_ZN8ATTClass10handleDataEthPh+0x5e>
    3cb4:	2910      	cmp	r1, #16
    3cb6:	d022      	beq.n	3cfe <_ZN8ATTClass10handleDataEthPh+0x92>
    3cb8:	2912      	cmp	r1, #18
    3cba:	d1e7      	bne.n	3c8c <_ZN8ATTClass10handleDataEthPh+0x20>
      writeReqOrCmd(connectionHandle, opcode, dlen, data);
    3cbc:	9300      	str	r3, [sp, #0]
    3cbe:	0013      	movs	r3, r2
    3cc0:	000a      	movs	r2, r1
    3cc2:	0021      	movs	r1, r4
    3cc4:	f7ff fe38 	bl	3938 <_ZN8ATTClass13writeReqOrCmdEthhPh>
      break;
    3cc8:	e00c      	b.n	3ce4 <_ZN8ATTClass10handleDataEthPh+0x78>
  switch (opcode) {
    3cca:	291e      	cmp	r1, #30
    3ccc:	d01f      	beq.n	3d0e <_ZN8ATTClass10handleDataEthPh+0xa2>
    3cce:	2952      	cmp	r1, #82	; 0x52
    3cd0:	d0f4      	beq.n	3cbc <_ZN8ATTClass10handleDataEthPh+0x50>
    3cd2:	2918      	cmp	r1, #24
    3cd4:	d1da      	bne.n	3c8c <_ZN8ATTClass10handleDataEthPh+0x20>
      execWriteReq(connectionHandle, dlen, data);
    3cd6:	0021      	movs	r1, r4
    3cd8:	f7ff ff7a 	bl	3bd0 <_ZN8ATTClass12execWriteReqEthPh>
      break;
    3cdc:	e002      	b.n	3ce4 <_ZN8ATTClass10handleDataEthPh+0x78>
      mtuReq(connectionHandle, dlen, data);
    3cde:	0021      	movs	r1, r4
    3ce0:	f7ff f9ac 	bl	303c <_ZN8ATTClass6mtuReqEthPh>
}
    3ce4:	bd13      	pop	{r0, r1, r4, pc}
      findInfoReq(connectionHandle, dlen, data);
    3ce6:	0021      	movs	r1, r4
    3ce8:	f7ff f9d2 	bl	3090 <_ZN8ATTClass11findInfoReqEthPh>
      break;
    3cec:	e7fa      	b.n	3ce4 <_ZN8ATTClass10handleDataEthPh+0x78>
      findByTypeReq(connectionHandle, dlen, data);
    3cee:	0021      	movs	r1, r4
    3cf0:	f7ff fa98 	bl	3224 <_ZN8ATTClass13findByTypeReqEthPh>
      break;
    3cf4:	e7f6      	b.n	3ce4 <_ZN8ATTClass10handleDataEthPh+0x78>
      readByTypeReq(connectionHandle, dlen, data);
    3cf6:	0021      	movs	r1, r4
    3cf8:	f7ff fce0 	bl	36bc <_ZN8ATTClass13readByTypeReqEthPh>
      break;
    3cfc:	e7f2      	b.n	3ce4 <_ZN8ATTClass10handleDataEthPh+0x78>
      readByGroupReq(connectionHandle, dlen, data);
    3cfe:	0021      	movs	r1, r4
    3d00:	f7ff fb30 	bl	3364 <_ZN8ATTClass14readByGroupReqEthPh>
      break;
    3d04:	e7ee      	b.n	3ce4 <_ZN8ATTClass10handleDataEthPh+0x78>
      prepWriteReq(connectionHandle, dlen, data);
    3d06:	0021      	movs	r1, r4
    3d08:	f7ff fec8 	bl	3a9c <_ZN8ATTClass12prepWriteReqEthPh>
      break;
    3d0c:	e7ea      	b.n	3ce4 <_ZN8ATTClass10handleDataEthPh+0x78>
  _cnf = true;
    3d0e:	2301      	movs	r3, #1
    3d10:	7403      	strb	r3, [r0, #16]
    3d12:	e7e7      	b.n	3ce4 <_ZN8ATTClass10handleDataEthPh+0x78>

00003d14 <_GLOBAL__sub_I__ZN8ATTClassC2Ev>:
  if (event < (sizeof(_eventHandlers) / (sizeof(_eventHandlers[0])))) {
    _eventHandlers[event] = eventHandler;
  }
}

ATTClass ATT;
    3d14:	b510      	push	{r4, lr}
    3d16:	4c05      	ldr	r4, [pc, #20]	; (3d2c <_GLOBAL__sub_I__ZN8ATTClassC2Ev+0x18>)
    3d18:	0020      	movs	r0, r4
    3d1a:	f7ff f81f 	bl	2d5c <_ZN8ATTClassC1Ev>
    3d1e:	4a04      	ldr	r2, [pc, #16]	; (3d30 <_GLOBAL__sub_I__ZN8ATTClassC2Ev+0x1c>)
    3d20:	4904      	ldr	r1, [pc, #16]	; (3d34 <_GLOBAL__sub_I__ZN8ATTClassC2Ev+0x20>)
    3d22:	0020      	movs	r0, r4
    3d24:	f003 f87e 	bl	6e24 <__aeabi_atexit>
    3d28:	bd10      	pop	{r4, pc}
    3d2a:	46c0      	nop			; (mov r8, r8)
    3d2c:	200002b8 	.word	0x200002b8
    3d30:	20000000 	.word	0x20000000
    3d34:	00002ced 	.word	0x00002ced

00003d38 <_ZN8GAPClassD1Ev>:
{
}

GAPClass::~GAPClass()
{
}
    3d38:	4770      	bx	lr

00003d3a <_ZN8GAPClassD0Ev>:
GAPClass::~GAPClass()
    3d3a:	b510      	push	{r4, lr}
    3d3c:	0004      	movs	r4, r0
}
    3d3e:	f001 f89f 	bl	4e80 <_ZdlPv>
    3d42:	0020      	movs	r0, r4
    3d44:	bd10      	pop	{r4, pc}
	...

00003d48 <_ZN8GAPClassC1Ev>:
  _serviceDataLength(0)
    3d48:	4b07      	ldr	r3, [pc, #28]	; (3d68 <_ZN8GAPClassC1Ev+0x20>)
    3d4a:	22a0      	movs	r2, #160	; 0xa0
    3d4c:	3308      	adds	r3, #8
    3d4e:	6003      	str	r3, [r0, #0]
    3d50:	2300      	movs	r3, #0
    3d52:	8302      	strh	r2, [r0, #24]
    3d54:	3a9f      	subs	r2, #159	; 0x9f
    3d56:	7103      	strb	r3, [r0, #4]
    3d58:	6083      	str	r3, [r0, #8]
    3d5a:	60c3      	str	r3, [r0, #12]
    3d5c:	6103      	str	r3, [r0, #16]
    3d5e:	6143      	str	r3, [r0, #20]
    3d60:	7682      	strb	r2, [r0, #26]
    3d62:	6203      	str	r3, [r0, #32]
    3d64:	6243      	str	r3, [r0, #36]	; 0x24
}
    3d66:	4770      	bx	lr
    3d68:	0000b1e8 	.word	0x0000b1e8

00003d6c <_ZN8GAPClass24setAdvertisedServiceUuidEPKc>:

void GAPClass::setAdvertisedServiceUuid(const char* advertisedServiceUuid)
{
  _advertisedServiceUuid = advertisedServiceUuid;
    3d6c:	6081      	str	r1, [r0, #8]
}
    3d6e:	4770      	bx	lr

00003d70 <_ZN8GAPClass12setLocalNameEPKc>:
  _manufacturerDataLength = manufacturerDataLength;
}

void GAPClass::setLocalName(const char *localName)
{
  _localName = localName;
    3d70:	6141      	str	r1, [r0, #20]
}
    3d72:	4770      	bx	lr

00003d74 <_ZN8GAPClass11advertisingEv>:

bool GAPClass::advertising()
{
  return _advertising;
    3d74:	7900      	ldrb	r0, [r0, #4]
}
    3d76:	4770      	bx	lr

00003d78 <_ZN8GAPClass9advertiseEv>:

int GAPClass::advertise()
{
    3d78:	b5f0      	push	{r4, r5, r6, r7, lr}
    3d7a:	b09b      	sub	sp, #108	; 0x6c
    3d7c:	0004      	movs	r4, r0
  uint8_t directBdaddr[6] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
    3d7e:	ad08      	add	r5, sp, #32
    3d80:	2206      	movs	r2, #6
    3d82:	2100      	movs	r1, #0
    3d84:	0028      	movs	r0, r5
    3d86:	f005 f81d 	bl	8dc4 <memset>
    3d8a:	2200      	movs	r2, #0

  uint8_t type = (_connectable) ? 0x00 : (_localName ? 0x02 : 0x03);
    3d8c:	7ea1      	ldrb	r1, [r4, #26]
    3d8e:	0013      	movs	r3, r2
    3d90:	4291      	cmp	r1, r2
    3d92:	d103      	bne.n	3d9c <_ZN8GAPClass9advertiseEv+0x24>
    3d94:	6963      	ldr	r3, [r4, #20]
    3d96:	4259      	negs	r1, r3
    3d98:	414b      	adcs	r3, r1
    3d9a:	3302      	adds	r3, #2

  _advertising = false;

  if (HCI.leSetAdvertisingParameters(_advertisingInterval, _advertisingInterval, type, 0x00, 0x00, directBdaddr, 0x07, 0) != 0) {
    3d9c:	2007      	movs	r0, #7
    3d9e:	8b21      	ldrh	r1, [r4, #24]
  _advertising = false;
    3da0:	7122      	strb	r2, [r4, #4]
  if (HCI.leSetAdvertisingParameters(_advertisingInterval, _advertisingInterval, type, 0x00, 0x00, directBdaddr, 0x07, 0) != 0) {
    3da2:	9204      	str	r2, [sp, #16]
    3da4:	9003      	str	r0, [sp, #12]
    3da6:	9201      	str	r2, [sp, #4]
    3da8:	9200      	str	r2, [sp, #0]
    3daa:	9502      	str	r5, [sp, #8]
    3dac:	000a      	movs	r2, r1
    3dae:	4849      	ldr	r0, [pc, #292]	; (3ed4 <_ZN8GAPClass9advertiseEv+0x15c>)
    3db0:	f000 fc78 	bl	46a4 <_ZN8HCIClass26leSetAdvertisingParametersEtthhhPhhh>
    3db4:	2800      	cmp	r0, #0
    3db6:	d002      	beq.n	3dbe <_ZN8GAPClass9advertiseEv+0x46>
    return 0;
    3db8:	2000      	movs	r0, #0
  }

  _advertising = false;

  return 1;
}
    3dba:	b01b      	add	sp, #108	; 0x6c
    3dbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
  advertisingData[0] = 0x02;
    3dbe:	2302      	movs	r3, #2
    3dc0:	ae0a      	add	r6, sp, #40	; 0x28
    3dc2:	7033      	strb	r3, [r6, #0]
  advertisingData[2] = 0x06;
    3dc4:	2706      	movs	r7, #6
  advertisingData[1] = 0x01;
    3dc6:	2301      	movs	r3, #1
  if (_advertisedServiceUuid) {
    3dc8:	68a1      	ldr	r1, [r4, #8]
  advertisingData[1] = 0x01;
    3dca:	7073      	strb	r3, [r6, #1]
  advertisingData[2] = 0x06;
    3dcc:	70b7      	strb	r7, [r6, #2]
  if (_advertisedServiceUuid) {
    3dce:	2900      	cmp	r1, #0
    3dd0:	d06f      	beq.n	3eb2 <_ZN8GAPClass9advertiseEv+0x13a>
    BLEUuid uuid(_advertisedServiceUuid);
    3dd2:	a812      	add	r0, sp, #72	; 0x48
    3dd4:	f7fe fb98 	bl	2508 <_ZN7BLEUuidC1EPKc>
    int uuidLen = uuid.length();
    3dd8:	a812      	add	r0, sp, #72	; 0x48
    3dda:	f7fe fbd3 	bl	2584 <_ZNK7BLEUuid6lengthEv>
    advertisingData[3] = 1 + uuidLen;
    3dde:	1c43      	adds	r3, r0, #1
    int uuidLen = uuid.length();
    3de0:	0005      	movs	r5, r0
    advertisingData[3] = 1 + uuidLen;
    3de2:	70f3      	strb	r3, [r6, #3]
    advertisingData[4] = (uuidLen > 2) ? 0x06 : 0x02;
    3de4:	2802      	cmp	r0, #2
    3de6:	dc00      	bgt.n	3dea <_ZN8GAPClass9advertiseEv+0x72>
    3de8:	3f04      	subs	r7, #4
    memcpy(&advertisingData[5], uuid.data(), uuidLen);
    3dea:	a812      	add	r0, sp, #72	; 0x48
    advertisingData[4] = (uuidLen > 2) ? 0x06 : 0x02;
    3dec:	7137      	strb	r7, [r6, #4]
    memcpy(&advertisingData[5], uuid.data(), uuidLen);
    3dee:	f7fe fbc7 	bl	2580 <_ZNK7BLEUuid4dataEv>
    3df2:	002a      	movs	r2, r5
    3df4:	0001      	movs	r1, r0
    memcpy(&advertisingData[5], _manufacturerData, _manufacturerDataLength);
    3df6:	2025      	movs	r0, #37	; 0x25
    3df8:	ab02      	add	r3, sp, #8
    3dfa:	18c0      	adds	r0, r0, r3
    3dfc:	f004 ffc7 	bl	8d8e <memcpy>
    advertisingDataLen += (2 + _manufacturerDataLength);
    3e00:	3505      	adds	r5, #5
    3e02:	b2ed      	uxtb	r5, r5
  if (_serviceData && _serviceDataLength > 0 && advertisingDataLen >= (_serviceDataLength + 4)) {
    3e04:	6a23      	ldr	r3, [r4, #32]
    3e06:	9306      	str	r3, [sp, #24]
    3e08:	2b00      	cmp	r3, #0
    3e0a:	d01f      	beq.n	3e4c <_ZN8GAPClass9advertiseEv+0xd4>
    3e0c:	6a67      	ldr	r7, [r4, #36]	; 0x24
    3e0e:	2f00      	cmp	r7, #0
    3e10:	dd1c      	ble.n	3e4c <_ZN8GAPClass9advertiseEv+0xd4>
    3e12:	1cfb      	adds	r3, r7, #3
    3e14:	42ab      	cmp	r3, r5
    3e16:	da19      	bge.n	3e4c <_ZN8GAPClass9advertiseEv+0xd4>
    advertisingData[advertisingDataLen++] = 0x16;
    3e18:	2216      	movs	r2, #22
    memcpy(&advertisingData[advertisingDataLen], &_serviceDataUuid, sizeof(_serviceDataUuid));
    3e1a:	0021      	movs	r1, r4
    advertisingData[advertisingDataLen++] = _serviceDataLength + 3;
    3e1c:	b2fb      	uxtb	r3, r7
    3e1e:	9307      	str	r3, [sp, #28]
    3e20:	3303      	adds	r3, #3
    3e22:	5573      	strb	r3, [r6, r5]
    advertisingData[advertisingDataLen++] = 0x16;
    3e24:	1ca8      	adds	r0, r5, #2
    advertisingData[advertisingDataLen++] = _serviceDataLength + 3;
    3e26:	1c6b      	adds	r3, r5, #1
    advertisingData[advertisingDataLen++] = 0x16;
    3e28:	b2db      	uxtb	r3, r3
    memcpy(&advertisingData[advertisingDataLen], &_serviceDataUuid, sizeof(_serviceDataUuid));
    3e2a:	b2c0      	uxtb	r0, r0
    advertisingDataLen += sizeof(_serviceDataUuid);
    3e2c:	3504      	adds	r5, #4
    advertisingData[advertisingDataLen++] = 0x16;
    3e2e:	54f2      	strb	r2, [r6, r3]
    memcpy(&advertisingData[advertisingDataLen], &_serviceDataUuid, sizeof(_serviceDataUuid));
    3e30:	311c      	adds	r1, #28
    3e32:	3a14      	subs	r2, #20
    advertisingDataLen += sizeof(_serviceDataUuid);
    3e34:	b2ed      	uxtb	r5, r5
    memcpy(&advertisingData[advertisingDataLen], &_serviceDataUuid, sizeof(_serviceDataUuid));
    3e36:	1830      	adds	r0, r6, r0
    3e38:	f004 ffa9 	bl	8d8e <memcpy>
    memcpy(&advertisingData[advertisingDataLen],_serviceData, _serviceDataLength);
    3e3c:	1970      	adds	r0, r6, r5
    3e3e:	003a      	movs	r2, r7
    3e40:	9906      	ldr	r1, [sp, #24]
    3e42:	f004 ffa4 	bl	8d8e <memcpy>
    advertisingDataLen += _serviceDataLength;
    3e46:	9b07      	ldr	r3, [sp, #28]
    3e48:	195d      	adds	r5, r3, r5
    3e4a:	b2ed      	uxtb	r5, r5
  if (HCI.leSetAdvertisingData(advertisingDataLen, advertisingData) != 0) {
    3e4c:	4f21      	ldr	r7, [pc, #132]	; (3ed4 <_ZN8GAPClass9advertiseEv+0x15c>)
    3e4e:	aa0a      	add	r2, sp, #40	; 0x28
    3e50:	0029      	movs	r1, r5
    3e52:	0038      	movs	r0, r7
    3e54:	f000 fc4a 	bl	46ec <_ZN8HCIClass20leSetAdvertisingDataEhPh>
    3e58:	2800      	cmp	r0, #0
    3e5a:	d1ad      	bne.n	3db8 <_ZN8GAPClass9advertiseEv+0x40>
  if (_localName) {
    3e5c:	6965      	ldr	r5, [r4, #20]
    3e5e:	ae12      	add	r6, sp, #72	; 0x48
  uint8_t scanResponseDataLen = 0;
    3e60:	1e29      	subs	r1, r5, #0
  if (_localName) {
    3e62:	d015      	beq.n	3e90 <_ZN8GAPClass9advertiseEv+0x118>
    int localNameLen = strlen(_localName);
    3e64:	0028      	movs	r0, r5
    3e66:	f005 fd13 	bl	9890 <strlen>
    3e6a:	0002      	movs	r2, r0
    if (localNameLen > 29) {
    3e6c:	281d      	cmp	r0, #29
    3e6e:	dd2d      	ble.n	3ecc <_ZN8GAPClass9advertiseEv+0x154>
      scanResponseData[1] = 0x08;
    3e70:	2308      	movs	r3, #8
      localNameLen = 29;
    3e72:	221d      	movs	r2, #29
      scanResponseData[1] = 0x08;
    3e74:	7073      	strb	r3, [r6, #1]
    memcpy(&scanResponseData[2], _localName, localNameLen);
    3e76:	2042      	movs	r0, #66	; 0x42
    scanResponseData[0] = 1 + localNameLen;
    3e78:	b2d3      	uxtb	r3, r2
    3e7a:	9306      	str	r3, [sp, #24]
    3e7c:	3301      	adds	r3, #1
    3e7e:	7033      	strb	r3, [r6, #0]
    memcpy(&scanResponseData[2], _localName, localNameLen);
    3e80:	ab02      	add	r3, sp, #8
    3e82:	0029      	movs	r1, r5
    3e84:	18c0      	adds	r0, r0, r3
    3e86:	f004 ff82 	bl	8d8e <memcpy>
    scanResponseDataLen += (2 + localNameLen);
    3e8a:	9b06      	ldr	r3, [sp, #24]
    3e8c:	1c9d      	adds	r5, r3, #2
    3e8e:	b2e9      	uxtb	r1, r5
  if (HCI.leSetScanResponseData(scanResponseDataLen, scanResponseData) != 0) {
    3e90:	0032      	movs	r2, r6
    3e92:	0038      	movs	r0, r7
    3e94:	f000 fc46 	bl	4724 <_ZN8HCIClass21leSetScanResponseDataEhPh>
    3e98:	2800      	cmp	r0, #0
    3e9a:	d000      	beq.n	3e9e <_ZN8GAPClass9advertiseEv+0x126>
    3e9c:	e78c      	b.n	3db8 <_ZN8GAPClass9advertiseEv+0x40>
  if (HCI.leSetAdvertiseEnable(0x01) != 0) {
    3e9e:	2101      	movs	r1, #1
    3ea0:	0038      	movs	r0, r7
    3ea2:	f000 fc5b 	bl	475c <_ZN8HCIClass20leSetAdvertiseEnableEh>
    3ea6:	2800      	cmp	r0, #0
    3ea8:	d000      	beq.n	3eac <_ZN8GAPClass9advertiseEv+0x134>
    3eaa:	e785      	b.n	3db8 <_ZN8GAPClass9advertiseEv+0x40>
  _advertising = false;
    3eac:	7120      	strb	r0, [r4, #4]
  return 1;
    3eae:	3001      	adds	r0, #1
    3eb0:	e783      	b.n	3dba <_ZN8GAPClass9advertiseEv+0x42>
  } else if (_manufacturerData && _manufacturerDataLength) {
    3eb2:	68e1      	ldr	r1, [r4, #12]
  advertisingDataLen += 3;
    3eb4:	2503      	movs	r5, #3
  } else if (_manufacturerData && _manufacturerDataLength) {
    3eb6:	2900      	cmp	r1, #0
    3eb8:	d0a4      	beq.n	3e04 <_ZN8GAPClass9advertiseEv+0x8c>
    3eba:	6922      	ldr	r2, [r4, #16]
    3ebc:	2a00      	cmp	r2, #0
    3ebe:	d0a1      	beq.n	3e04 <_ZN8GAPClass9advertiseEv+0x8c>
    advertisingData[3] = 1 + _manufacturerDataLength;
    3ec0:	b2d5      	uxtb	r5, r2
    3ec2:	1c6b      	adds	r3, r5, #1
    3ec4:	70f3      	strb	r3, [r6, #3]
    advertisingData[4] = 0xff;
    3ec6:	23ff      	movs	r3, #255	; 0xff
    3ec8:	7133      	strb	r3, [r6, #4]
    3eca:	e794      	b.n	3df6 <_ZN8GAPClass9advertiseEv+0x7e>
      scanResponseData[1] = 0x09;
    3ecc:	2309      	movs	r3, #9
    3ece:	7073      	strb	r3, [r6, #1]
    3ed0:	e7d1      	b.n	3e76 <_ZN8GAPClass9advertiseEv+0xfe>
    3ed2:	46c0      	nop			; (mov r8, r8)
    3ed4:	20000470 	.word	0x20000470

00003ed8 <_ZN8GAPClass24setAdvertisedServiceDataEtPKhi>:
  _connectable = connectable;
}

void GAPClass::setAdvertisedServiceData(uint16_t uuid, const uint8_t data[], int length)
{
  _serviceDataUuid = uuid;
    3ed8:	8381      	strh	r1, [r0, #28]
  _serviceData = data;
    3eda:	6202      	str	r2, [r0, #32]
  _serviceDataLength = length;
    3edc:	6243      	str	r3, [r0, #36]	; 0x24
}
    3ede:	4770      	bx	lr

00003ee0 <_GLOBAL__sub_I__ZN8GAPClassC2Ev>:

GAPClass GAP;
    3ee0:	b510      	push	{r4, lr}
    3ee2:	4c05      	ldr	r4, [pc, #20]	; (3ef8 <_GLOBAL__sub_I__ZN8GAPClassC2Ev+0x18>)
    3ee4:	0020      	movs	r0, r4
    3ee6:	f7ff ff2f 	bl	3d48 <_ZN8GAPClassC1Ev>
    3eea:	4a04      	ldr	r2, [pc, #16]	; (3efc <_GLOBAL__sub_I__ZN8GAPClassC2Ev+0x1c>)
    3eec:	4904      	ldr	r1, [pc, #16]	; (3f00 <_GLOBAL__sub_I__ZN8GAPClassC2Ev+0x20>)
    3eee:	0020      	movs	r0, r4
    3ef0:	f002 ff98 	bl	6e24 <__aeabi_atexit>
    3ef4:	bd10      	pop	{r4, pc}
    3ef6:	46c0      	nop			; (mov r8, r8)
    3ef8:	200002dc 	.word	0x200002dc
    3efc:	20000000 	.word	0x20000000
    3f00:	00003d39 	.word	0x00003d39

00003f04 <_ZN9GATTClassC1Ev>:

#include "BLEProperty.h"

#include "GATT.h"

GATTClass::GATTClass() :
    3f04:	b5f0      	push	{r4, r5, r6, r7, lr}
  _genericAccessService("1800"),
  _deviceNameCharacteristic("2a00", BLERead, 20),
  _appearanceCharacteristic("2a01", BLERead, 2),
  _genericAttributeService("1801"),
  _servicesChangedCharacteristic("2a05", BLEIndicate, 4)
    3f06:	0004      	movs	r4, r0
  _last(NULL)
    3f08:	2700      	movs	r7, #0
GATTClass::GATTClass() :
    3f0a:	0006      	movs	r6, r0
  _servicesChangedCharacteristic("2a05", BLEIndicate, 4)
    3f0c:	4b22      	ldr	r3, [pc, #136]	; (3f98 <_ZN9GATTClassC1Ev+0x94>)
    3f0e:	3410      	adds	r4, #16
    3f10:	3308      	adds	r3, #8
GATTClass::GATTClass() :
    3f12:	b087      	sub	sp, #28
  _servicesChangedCharacteristic("2a05", BLEIndicate, 4)
    3f14:	6003      	str	r3, [r0, #0]
    3f16:	6047      	str	r7, [r0, #4]
    3f18:	6087      	str	r7, [r0, #8]
    3f1a:	60c7      	str	r7, [r0, #12]
    3f1c:	491f      	ldr	r1, [pc, #124]	; (3f9c <_ZN9GATTClassC1Ev+0x98>)
    3f1e:	0020      	movs	r0, r4
    3f20:	f7fe fe4e 	bl	2bc0 <_ZN15BLELocalServiceC1EPKc>
    3f24:	0033      	movs	r3, r6
    3f26:	3340      	adds	r3, #64	; 0x40
    3f28:	9303      	str	r3, [sp, #12]
    3f2a:	9700      	str	r7, [sp, #0]
    3f2c:	2314      	movs	r3, #20
    3f2e:	2202      	movs	r2, #2
    3f30:	491b      	ldr	r1, [pc, #108]	; (3fa0 <_ZN9GATTClassC1Ev+0x9c>)
    3f32:	9803      	ldr	r0, [sp, #12]
    3f34:	f7fe fbd0 	bl	26d8 <_ZN22BLELocalCharacteristicC1EPKchib>
    3f38:	0033      	movs	r3, r6
    3f3a:	3394      	adds	r3, #148	; 0x94
    3f3c:	9304      	str	r3, [sp, #16]
    3f3e:	0035      	movs	r5, r6
    3f40:	2302      	movs	r3, #2
    3f42:	35e8      	adds	r5, #232	; 0xe8
    3f44:	001a      	movs	r2, r3
    3f46:	9700      	str	r7, [sp, #0]
    3f48:	4916      	ldr	r1, [pc, #88]	; (3fa4 <_ZN9GATTClassC1Ev+0xa0>)
    3f4a:	9804      	ldr	r0, [sp, #16]
    3f4c:	f7fe fbc4 	bl	26d8 <_ZN22BLELocalCharacteristicC1EPKchib>
    3f50:	4915      	ldr	r1, [pc, #84]	; (3fa8 <_ZN9GATTClassC1Ev+0xa4>)
    3f52:	0028      	movs	r0, r5
    3f54:	f7fe fe34 	bl	2bc0 <_ZN15BLELocalServiceC1EPKc>
    3f58:	0033      	movs	r3, r6
    3f5a:	3319      	adds	r3, #25
    3f5c:	33ff      	adds	r3, #255	; 0xff
    3f5e:	9305      	str	r3, [sp, #20]
    3f60:	2220      	movs	r2, #32
    3f62:	2304      	movs	r3, #4
    3f64:	4911      	ldr	r1, [pc, #68]	; (3fac <_ZN9GATTClassC1Ev+0xa8>)
    3f66:	9700      	str	r7, [sp, #0]
    3f68:	9805      	ldr	r0, [sp, #20]
    3f6a:	f7fe fbb5 	bl	26d8 <_ZN22BLELocalCharacteristicC1EPKchib>
{
  _genericAccessService.retain();
    3f6e:	0020      	movs	r0, r4
    3f70:	f7fe f8f7 	bl	2162 <_ZN12BLEAttribute6retainEv>
  _genericAttributeService.retain();
    3f74:	0028      	movs	r0, r5
    3f76:	f7fe f8f4 	bl	2162 <_ZN12BLEAttribute6retainEv>

  _genericAccessService.addCharacteristic(&_deviceNameCharacteristic);
    3f7a:	9903      	ldr	r1, [sp, #12]
    3f7c:	0020      	movs	r0, r4
    3f7e:	f7fe fe48 	bl	2c12 <_ZN15BLELocalService17addCharacteristicEP22BLELocalCharacteristic>
  _genericAccessService.addCharacteristic(&_appearanceCharacteristic);
    3f82:	9904      	ldr	r1, [sp, #16]
    3f84:	0020      	movs	r0, r4
    3f86:	f7fe fe44 	bl	2c12 <_ZN15BLELocalService17addCharacteristicEP22BLELocalCharacteristic>

  _genericAttributeService.addCharacteristic(&_servicesChangedCharacteristic);
    3f8a:	0028      	movs	r0, r5
    3f8c:	9905      	ldr	r1, [sp, #20]
    3f8e:	f7fe fe40 	bl	2c12 <_ZN15BLELocalService17addCharacteristicEP22BLELocalCharacteristic>
}
    3f92:	0030      	movs	r0, r6
    3f94:	b007      	add	sp, #28
    3f96:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3f98:	0000b21c 	.word	0x0000b21c
    3f9c:	0000b200 	.word	0x0000b200
    3fa0:	0000b205 	.word	0x0000b205
    3fa4:	0000b20a 	.word	0x0000b20a
    3fa8:	0000b20f 	.word	0x0000b20f
    3fac:	0000b214 	.word	0x0000b214

00003fb0 <_ZN9GATTClass13setAppearanceEt>:
{
  _deviceNameCharacteristic.writeValue(deviceName);
}

void GATTClass::setAppearance(uint16_t appearance)
{
    3fb0:	b507      	push	{r0, r1, r2, lr}
    3fb2:	466b      	mov	r3, sp
    3fb4:	80d9      	strh	r1, [r3, #6]
    3fb6:	3306      	adds	r3, #6
  _appearanceCharacteristic.writeValue((uint8_t*)&appearance, sizeof(appearance));
    3fb8:	3094      	adds	r0, #148	; 0x94
    3fba:	2202      	movs	r2, #2
    3fbc:	0019      	movs	r1, r3
    3fbe:	f7fe faf1 	bl	25a4 <_ZN22BLELocalCharacteristic10writeValueEPKhi>
}
    3fc2:	bd07      	pop	{r0, r1, r2, pc}

00003fc4 <_ZNK9GATTClass14attributeCountEv>:
  }
}

unsigned int GATTClass::attributeCount() const
{
  return _attributes.size();
    3fc4:	6840      	ldr	r0, [r0, #4]
}
    3fc6:	4770      	bx	lr

00003fc8 <_ZN13BLELinkedListIP12BLEAttributeE5clearEv>:
template <typename T> void BLELinkedList<T>::clear()
    3fc8:	b570      	push	{r4, r5, r6, lr}
  for (unsigned int i = 0; i < _size; i++) {
    3fca:	2500      	movs	r5, #0
template <typename T> void BLELinkedList<T>::clear()
    3fcc:	0004      	movs	r4, r0
  BLELinkedListNode<T>* itemNode = _root;
    3fce:	6840      	ldr	r0, [r0, #4]
  for (unsigned int i = 0; i < _size; i++) {
    3fd0:	6823      	ldr	r3, [r4, #0]
    3fd2:	429d      	cmp	r5, r3
    3fd4:	d205      	bcs.n	3fe2 <_ZN13BLELinkedListIP12BLEAttributeE5clearEv+0x1a>
    itemNode = itemNode->next;
    3fd6:	6846      	ldr	r6, [r0, #4]
  for (unsigned int i = 0; i < _size; i++) {
    3fd8:	3501      	adds	r5, #1
    delete n;
    3fda:	f000 ff51 	bl	4e80 <_ZdlPv>
    itemNode = itemNode->next;
    3fde:	0030      	movs	r0, r6
  for (unsigned int i = 0; i < _size; i++) {
    3fe0:	e7f6      	b.n	3fd0 <_ZN13BLELinkedListIP12BLEAttributeE5clearEv+0x8>
  _size = 0;
    3fe2:	2300      	movs	r3, #0
    3fe4:	6023      	str	r3, [r4, #0]
  _root = NULL;
    3fe6:	6063      	str	r3, [r4, #4]
  _last = NULL;
    3fe8:	60a3      	str	r3, [r4, #8]
}
    3fea:	bd70      	pop	{r4, r5, r6, pc}

00003fec <_ZN9GATTClass3endEv>:
{
    3fec:	b510      	push	{r4, lr}
  _attributes.clear();
    3fee:	3004      	adds	r0, #4
    3ff0:	f7ff ffea 	bl	3fc8 <_ZN13BLELinkedListIP12BLEAttributeE5clearEv>
}
    3ff4:	bd10      	pop	{r4, pc}

00003ff6 <_ZNK13BLELinkedListIP12BLEAttributeE3getEj>:
  if (index >= _size) {
    3ff6:	6802      	ldr	r2, [r0, #0]
    return T();
    3ff8:	2300      	movs	r3, #0
  if (index >= _size) {
    3ffa:	428a      	cmp	r2, r1
    3ffc:	d907      	bls.n	400e <_ZNK13BLELinkedListIP12BLEAttributeE3getEj+0x18>
  for (unsigned int i = 0; i < index; i++) {
    3ffe:	2200      	movs	r2, #0
  BLELinkedListNode<T>* itemNode = _root;
    4000:	6843      	ldr	r3, [r0, #4]
  for (unsigned int i = 0; i < index; i++) {
    4002:	428a      	cmp	r2, r1
    4004:	d002      	beq.n	400c <_ZNK13BLELinkedListIP12BLEAttributeE3getEj+0x16>
    itemNode = itemNode->next;
    4006:	685b      	ldr	r3, [r3, #4]
  for (unsigned int i = 0; i < index; i++) {
    4008:	3201      	adds	r2, #1
    400a:	e7fa      	b.n	4002 <_ZNK13BLELinkedListIP12BLEAttributeE3getEj+0xc>
  return itemNode->data;
    400c:	681b      	ldr	r3, [r3, #0]
}
    400e:	0018      	movs	r0, r3
    4010:	4770      	bx	lr

00004012 <_ZNK9GATTClass9attributeEj>:

BLEAttribute* GATTClass::attribute(unsigned int index) const
{
    4012:	b510      	push	{r4, lr}
  return _attributes.get(index);
    4014:	3004      	adds	r0, #4
    4016:	f7ff ffee 	bl	3ff6 <_ZNK13BLELinkedListIP12BLEAttributeE3getEj>
}
    401a:	bd10      	pop	{r4, pc}

0000401c <_ZNK9GATTClass28serviceUuidForCharacteristicEP22BLELocalCharacteristic>:

uint16_t GATTClass::serviceUuidForCharacteristic(BLELocalCharacteristic* characteristic) const
{
    401c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint16_t serviceUuid = 0x0000;

  BLELocalService* lastService = NULL;

  for (unsigned int i = 0; i < attributeCount(); i++) {
    401e:	2500      	movs	r5, #0
{
    4020:	0007      	movs	r7, r0
  BLELocalService* lastService = NULL;
    4022:	002c      	movs	r4, r5
{
    4024:	9101      	str	r1, [sp, #4]
  for (unsigned int i = 0; i < attributeCount(); i++) {
    4026:	687b      	ldr	r3, [r7, #4]
    4028:	429d      	cmp	r5, r3
    402a:	d20e      	bcs.n	404a <_ZNK9GATTClass28serviceUuidForCharacteristicEP22BLELocalCharacteristic+0x2e>
  return _attributes.get(index);
    402c:	0029      	movs	r1, r5
    402e:	1d38      	adds	r0, r7, #4
    4030:	f7ff ffe1 	bl	3ff6 <_ZNK13BLELinkedListIP12BLEAttributeE3getEj>
    BLEAttribute* a = attribute(i);
    uint16_t attributeType = a->type();
    4034:	6803      	ldr	r3, [r0, #0]
  return _attributes.get(index);
    4036:	0006      	movs	r6, r0
    uint16_t attributeType = a->type();
    4038:	689b      	ldr	r3, [r3, #8]
    403a:	4798      	blx	r3

    if (attributeType == BLETypeService) {
    403c:	23a0      	movs	r3, #160	; 0xa0
    403e:	019b      	lsls	r3, r3, #6
    4040:	4298      	cmp	r0, r3
    4042:	d00d      	beq.n	4060 <_ZNK9GATTClass28serviceUuidForCharacteristicEP22BLELocalCharacteristic+0x44>
      lastService = (BLELocalService*)a;
    } else if (a == characteristic) {
    4044:	9b01      	ldr	r3, [sp, #4]
    4046:	42b3      	cmp	r3, r6
    4048:	d10b      	bne.n	4062 <_ZNK9GATTClass28serviceUuidForCharacteristicEP22BLELocalCharacteristic+0x46>
  uint16_t serviceUuid = 0x0000;
    404a:	1e20      	subs	r0, r4, #0
      break;
    }
  }

  if (lastService) {
    404c:	d007      	beq.n	405e <_ZNK9GATTClass28serviceUuidForCharacteristicEP22BLELocalCharacteristic+0x42>
    if (lastService->uuidLength() == 2) {
    404e:	f7fe f883 	bl	2158 <_ZNK12BLEAttribute10uuidLengthEv>
    4052:	2802      	cmp	r0, #2
    4054:	d107      	bne.n	4066 <_ZNK9GATTClass28serviceUuidForCharacteristicEP22BLELocalCharacteristic+0x4a>
      serviceUuid = *(uint16_t*)(lastService->uuidData());
    4056:	0020      	movs	r0, r4
    4058:	f7fe f879 	bl	214e <_ZNK12BLEAttribute8uuidDataEv>
    405c:	8800      	ldrh	r0, [r0, #0]
      serviceUuid = *(uint16_t*)(lastService->uuidData() + 10);
    }
  }

  return serviceUuid;
}
    405e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    4060:	0034      	movs	r4, r6
  for (unsigned int i = 0; i < attributeCount(); i++) {
    4062:	3501      	adds	r5, #1
    4064:	e7df      	b.n	4026 <_ZNK9GATTClass28serviceUuidForCharacteristicEP22BLELocalCharacteristic+0xa>
      serviceUuid = *(uint16_t*)(lastService->uuidData() + 10);
    4066:	0020      	movs	r0, r4
    4068:	f7fe f871 	bl	214e <_ZNK12BLEAttribute8uuidDataEv>
    406c:	8940      	ldrh	r0, [r0, #10]
    406e:	e7f6      	b.n	405e <_ZNK9GATTClass28serviceUuidForCharacteristicEP22BLELocalCharacteristic+0x42>

00004070 <_ZN9GATTClass15clearAttributesEv>:

  service->setHandles(startHandle, attributeCount());
}

void GATTClass::clearAttributes()
{
    4070:	b570      	push	{r4, r5, r6, lr}
    4072:	0006      	movs	r6, r0
  for (unsigned int i = 0; i < attributeCount(); i++) {
    4074:	2400      	movs	r4, #0
    4076:	6873      	ldr	r3, [r6, #4]
    4078:	1d30      	adds	r0, r6, #4
    407a:	429c      	cmp	r4, r3
    407c:	d20f      	bcs.n	409e <_ZN9GATTClass15clearAttributesEv+0x2e>
  return _attributes.get(index);
    407e:	0021      	movs	r1, r4
    4080:	f7ff ffb9 	bl	3ff6 <_ZNK13BLELinkedListIP12BLEAttributeE3getEj>
    4084:	0005      	movs	r5, r0
    BLEAttribute* a = attribute(i);

    if (a->release() <= 0) {
    4086:	f7fe f871 	bl	216c <_ZN12BLEAttribute7releaseEv>
    408a:	2800      	cmp	r0, #0
    408c:	dc05      	bgt.n	409a <_ZN9GATTClass15clearAttributesEv+0x2a>
      delete a;
    408e:	2d00      	cmp	r5, #0
    4090:	d003      	beq.n	409a <_ZN9GATTClass15clearAttributesEv+0x2a>
    4092:	682b      	ldr	r3, [r5, #0]
    4094:	0028      	movs	r0, r5
    4096:	685b      	ldr	r3, [r3, #4]
    4098:	4798      	blx	r3
  for (unsigned int i = 0; i < attributeCount(); i++) {
    409a:	3401      	adds	r4, #1
    409c:	e7eb      	b.n	4076 <_ZN9GATTClass15clearAttributesEv+0x6>
    }
  }

  _attributes.clear();
    409e:	f7ff ff93 	bl	3fc8 <_ZN13BLELinkedListIP12BLEAttributeE5clearEv>
}
    40a2:	bd70      	pop	{r4, r5, r6, pc}

000040a4 <_ZN13BLELinkedListIP12BLEAttributeE3addES1_>:
template <typename T> void BLELinkedList<T>::add(T item)
    40a4:	b570      	push	{r4, r5, r6, lr}
    40a6:	0004      	movs	r4, r0
  BLELinkedListNode<T>* itemNode = new BLELinkedListNode<T>();
    40a8:	2008      	movs	r0, #8
template <typename T> void BLELinkedList<T>::add(T item)
    40aa:	000d      	movs	r5, r1
  BLELinkedListNode<T>* itemNode = new BLELinkedListNode<T>();
    40ac:	f000 fee4 	bl	4e78 <_Znwj>
    40b0:	2300      	movs	r3, #0
    40b2:	6043      	str	r3, [r0, #4]
  if (_root == NULL) {
    40b4:	6863      	ldr	r3, [r4, #4]
  itemNode->data = item;
    40b6:	6005      	str	r5, [r0, #0]
  if (_root == NULL) {
    40b8:	2b00      	cmp	r3, #0
    40ba:	d105      	bne.n	40c8 <_ZN13BLELinkedListIP12BLEAttributeE3addES1_+0x24>
    _root = itemNode;
    40bc:	6060      	str	r0, [r4, #4]
  _size++;
    40be:	6823      	ldr	r3, [r4, #0]
  _last = itemNode;
    40c0:	60a0      	str	r0, [r4, #8]
  _size++;
    40c2:	3301      	adds	r3, #1
    40c4:	6023      	str	r3, [r4, #0]
}
    40c6:	bd70      	pop	{r4, r5, r6, pc}
    _last->next = itemNode;
    40c8:	68a3      	ldr	r3, [r4, #8]
    40ca:	6058      	str	r0, [r3, #4]
    40cc:	e7f7      	b.n	40be <_ZN13BLELinkedListIP12BLEAttributeE3addES1_+0x1a>

000040ce <_ZN9GATTClass10addServiceEP15BLELocalService>:
{
    40ce:	b5f0      	push	{r4, r5, r6, r7, lr}
    40d0:	0006      	movs	r6, r0
    40d2:	000d      	movs	r5, r1
  for (unsigned int i = 0; i < service->characteristicCount(); i++) {
    40d4:	2700      	movs	r7, #0
{
    40d6:	b085      	sub	sp, #20
  service->retain();
    40d8:	0008      	movs	r0, r1
    40da:	f7fe f842 	bl	2162 <_ZN12BLEAttribute6retainEv>
  _attributes.add(service);
    40de:	1d33      	adds	r3, r6, #4
    40e0:	0018      	movs	r0, r3
    40e2:	0029      	movs	r1, r5
    40e4:	9301      	str	r3, [sp, #4]
    40e6:	f7ff ffdd 	bl	40a4 <_ZN13BLELinkedListIP12BLEAttributeE3addES1_>
  uint16_t startHandle = attributeCount();
    40ea:	88b3      	ldrh	r3, [r6, #4]
    40ec:	9303      	str	r3, [sp, #12]
  for (unsigned int i = 0; i < service->characteristicCount(); i++) {
    40ee:	0028      	movs	r0, r5
    40f0:	f7fe fd7f 	bl	2bf2 <_ZNK15BLELocalService19characteristicCountEv>
    40f4:	4287      	cmp	r7, r0
    40f6:	d22e      	bcs.n	4156 <_ZN9GATTClass10addServiceEP15BLELocalService+0x88>
    BLELocalCharacteristic* characteristic = service->characteristic(i);
    40f8:	0039      	movs	r1, r7
    40fa:	0028      	movs	r0, r5
    40fc:	f7fe fd7b 	bl	2bf6 <_ZNK15BLELocalService14characteristicEj>
    4100:	0004      	movs	r4, r0
    characteristic->retain();
    4102:	f7fe f82e 	bl	2162 <_ZN12BLEAttribute6retainEv>
    _attributes.add(characteristic);
    4106:	0021      	movs	r1, r4
    4108:	9801      	ldr	r0, [sp, #4]
    410a:	f7ff ffcb 	bl	40a4 <_ZN13BLELinkedListIP12BLEAttributeE3addES1_>
    characteristic->setHandle(attributeCount());
    410e:	88b1      	ldrh	r1, [r6, #4]
    4110:	0020      	movs	r0, r4
    4112:	f7fe fab3 	bl	267c <_ZN22BLELocalCharacteristic9setHandleEt>
    _attributes.add(characteristic);
    4116:	0021      	movs	r1, r4
    4118:	9801      	ldr	r0, [sp, #4]
    411a:	f7ff ffc3 	bl	40a4 <_ZN13BLELinkedListIP12BLEAttributeE3addES1_>
    for (unsigned int j = 0; j < characteristic->descriptorCount(); j++) {
    411e:	2300      	movs	r3, #0
    4120:	0020      	movs	r0, r4
    4122:	9300      	str	r3, [sp, #0]
    4124:	f7fe fab2 	bl	268c <_ZNK22BLELocalCharacteristic15descriptorCountEv>
    4128:	9b00      	ldr	r3, [sp, #0]
    412a:	4283      	cmp	r3, r0
    412c:	d211      	bcs.n	4152 <_ZN9GATTClass10addServiceEP15BLELocalService+0x84>
      BLELocalDescriptor* descriptor = characteristic->descriptor(j);
    412e:	0019      	movs	r1, r3
    4130:	0020      	movs	r0, r4
    4132:	f7fe faad 	bl	2690 <_ZNK22BLELocalCharacteristic10descriptorEj>
    4136:	9002      	str	r0, [sp, #8]
      descriptor->retain();
    4138:	f7fe f813 	bl	2162 <_ZN12BLEAttribute6retainEv>
      _attributes.add(descriptor);
    413c:	9902      	ldr	r1, [sp, #8]
    413e:	9801      	ldr	r0, [sp, #4]
    4140:	f7ff ffb0 	bl	40a4 <_ZN13BLELinkedListIP12BLEAttributeE3addES1_>
      descriptor->setHandle(attributeCount());
    4144:	88b1      	ldrh	r1, [r6, #4]
    4146:	9802      	ldr	r0, [sp, #8]
    4148:	f7fe fc10 	bl	296c <_ZN18BLELocalDescriptor9setHandleEt>
    for (unsigned int j = 0; j < characteristic->descriptorCount(); j++) {
    414c:	9b00      	ldr	r3, [sp, #0]
    414e:	3301      	adds	r3, #1
    4150:	e7e6      	b.n	4120 <_ZN9GATTClass10addServiceEP15BLELocalService+0x52>
  for (unsigned int i = 0; i < service->characteristicCount(); i++) {
    4152:	3701      	adds	r7, #1
    4154:	e7cb      	b.n	40ee <_ZN9GATTClass10addServiceEP15BLELocalService+0x20>
  service->setHandles(startHandle, attributeCount());
    4156:	6872      	ldr	r2, [r6, #4]
    4158:	9903      	ldr	r1, [sp, #12]
    415a:	b292      	uxth	r2, r2
    415c:	0028      	movs	r0, r5
    415e:	f7fe fd41 	bl	2be4 <_ZN15BLELocalService10setHandlesEtt>
}
    4162:	b005      	add	sp, #20
    4164:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

00004168 <_ZN9GATTClass5beginEv>:
{
    4168:	b510      	push	{r4, lr}
    416a:	0004      	movs	r4, r0
  _deviceNameCharacteristic.writeValue(deviceName);
    416c:	490a      	ldr	r1, [pc, #40]	; (4198 <_ZN9GATTClass5beginEv+0x30>)
    416e:	3040      	adds	r0, #64	; 0x40
    4170:	f7fe fa72 	bl	2658 <_ZN22BLELocalCharacteristic10writeValueEPKc>
  setAppearance(0x000);
    4174:	2100      	movs	r1, #0
    4176:	0020      	movs	r0, r4
    4178:	f7ff ff1a 	bl	3fb0 <_ZN9GATTClass13setAppearanceEt>
  clearAttributes();
    417c:	0020      	movs	r0, r4
    417e:	f7ff ff77 	bl	4070 <_ZN9GATTClass15clearAttributesEv>
  addService(&_genericAccessService);
    4182:	0021      	movs	r1, r4
    4184:	0020      	movs	r0, r4
    4186:	3110      	adds	r1, #16
    4188:	f7ff ffa1 	bl	40ce <_ZN9GATTClass10addServiceEP15BLELocalService>
  addService(&_genericAttributeService);
    418c:	0021      	movs	r1, r4
    418e:	0020      	movs	r0, r4
    4190:	31e8      	adds	r1, #232	; 0xe8
    4192:	f7ff ff9c 	bl	40ce <_ZN9GATTClass10addServiceEP15BLELocalService>
}
    4196:	bd10      	pop	{r4, pc}
    4198:	0000b1f8 	.word	0x0000b1f8

0000419c <_ZN9GATTClass10addServiceER10BLEService>:
{
    419c:	b510      	push	{r4, lr}
    419e:	0004      	movs	r4, r0
  BLELocalService* localService = service.local();
    41a0:	0008      	movs	r0, r1
    41a2:	f7fe f964 	bl	246e <_ZN10BLEService5localEv>
    41a6:	1e01      	subs	r1, r0, #0
  if (localService) {
    41a8:	d002      	beq.n	41b0 <_ZN9GATTClass10addServiceER10BLEService+0x14>
    addService(localService);
    41aa:	0020      	movs	r0, r4
    41ac:	f7ff ff8f 	bl	40ce <_ZN9GATTClass10addServiceEP15BLELocalService>
}
    41b0:	bd10      	pop	{r4, pc}
	...

000041b4 <_GLOBAL__sub_I__ZN9GATTClassC2Ev>:

GATTClass GATT;
    41b4:	b510      	push	{r4, lr}
    41b6:	4c05      	ldr	r4, [pc, #20]	; (41cc <_GLOBAL__sub_I__ZN9GATTClassC2Ev+0x18>)
    41b8:	0020      	movs	r0, r4
    41ba:	f7ff fea3 	bl	3f04 <_ZN9GATTClassC1Ev>
    41be:	4a04      	ldr	r2, [pc, #16]	; (41d0 <_GLOBAL__sub_I__ZN9GATTClassC2Ev+0x1c>)
    41c0:	4904      	ldr	r1, [pc, #16]	; (41d4 <_GLOBAL__sub_I__ZN9GATTClassC2Ev+0x20>)
    41c2:	0020      	movs	r0, r4
    41c4:	f002 fe2e 	bl	6e24 <__aeabi_atexit>
    41c8:	bd10      	pop	{r4, pc}
    41ca:	46c0      	nop			; (mov r8, r8)
    41cc:	20000304 	.word	0x20000304
    41d0:	20000000 	.word	0x20000000
    41d4:	000041d9 	.word	0x000041d9

000041d8 <_ZN9GATTClassD1Ev>:
GATTClass::~GATTClass()
    41d8:	b510      	push	{r4, lr}
    41da:	0004      	movs	r4, r0
    41dc:	4b0f      	ldr	r3, [pc, #60]	; (421c <_ZN9GATTClassD1Ev+0x44>)
    41de:	3308      	adds	r3, #8
    41e0:	6003      	str	r3, [r0, #0]
  clearAttributes();
    41e2:	f7ff ff45 	bl	4070 <_ZN9GATTClass15clearAttributesEv>
GATTClass::~GATTClass()
    41e6:	0020      	movs	r0, r4
    41e8:	3019      	adds	r0, #25
    41ea:	30ff      	adds	r0, #255	; 0xff
    41ec:	f7fe fac8 	bl	2780 <_ZN22BLELocalCharacteristicD1Ev>
    41f0:	0020      	movs	r0, r4
    41f2:	30e8      	adds	r0, #232	; 0xe8
    41f4:	f7fe fd42 	bl	2c7c <_ZN15BLELocalServiceD1Ev>
    41f8:	0020      	movs	r0, r4
    41fa:	3094      	adds	r0, #148	; 0x94
    41fc:	f7fe fac0 	bl	2780 <_ZN22BLELocalCharacteristicD1Ev>
    4200:	0020      	movs	r0, r4
    4202:	3040      	adds	r0, #64	; 0x40
    4204:	f7fe fabc 	bl	2780 <_ZN22BLELocalCharacteristicD1Ev>
    4208:	0020      	movs	r0, r4
    420a:	3010      	adds	r0, #16
    420c:	f7fe fd36 	bl	2c7c <_ZN15BLELocalServiceD1Ev>
    4210:	1d20      	adds	r0, r4, #4
  clear();
    4212:	f7ff fed9 	bl	3fc8 <_ZN13BLELinkedListIP12BLEAttributeE5clearEv>
}
    4216:	0020      	movs	r0, r4
    4218:	bd10      	pop	{r4, pc}
    421a:	46c0      	nop			; (mov r8, r8)
    421c:	0000b21c 	.word	0x0000b21c

00004220 <_ZN9GATTClassD0Ev>:
GATTClass::~GATTClass()
    4220:	b510      	push	{r4, lr}
    4222:	0004      	movs	r4, r0
}
    4224:	f7ff ffd8 	bl	41d8 <_ZN9GATTClassD1Ev>
    4228:	0020      	movs	r0, r4
    422a:	f000 fe29 	bl	4e80 <_ZdlPv>
    422e:	0020      	movs	r0, r4
    4230:	bd10      	pop	{r4, pc}

00004232 <_ZN8HCIClassD1Ev>:
{
}

HCIClass::~HCIClass()
{
}
    4232:	4770      	bx	lr

00004234 <_ZN8HCIClassD0Ev>:
HCIClass::~HCIClass()
    4234:	b510      	push	{r4, lr}
    4236:	0004      	movs	r4, r0
}
    4238:	f000 fe22 	bl	4e80 <_ZdlPv>
    423c:	0020      	movs	r0, r4
    423e:	bd10      	pop	{r4, pc}

00004240 <_ZN8HCIClass5beginEv>:

int HCIClass::begin()
{
  _recvIndex = 0;
    4240:	2300      	movs	r3, #0
{
    4242:	b510      	push	{r4, lr}
  _recvIndex = 0;
    4244:	6083      	str	r3, [r0, #8]

  return HCITransport.begin();
    4246:	4b03      	ldr	r3, [pc, #12]	; (4254 <_ZN8HCIClass5beginEv+0x14>)
    4248:	6818      	ldr	r0, [r3, #0]
    424a:	6803      	ldr	r3, [r0, #0]
    424c:	681b      	ldr	r3, [r3, #0]
    424e:	4798      	blx	r3
}
    4250:	bd10      	pop	{r4, pc}
    4252:	46c0      	nop			; (mov r8, r8)
    4254:	0000b288 	.word	0x0000b288

00004258 <_ZN8HCIClass3endEv>:

void HCIClass::end()
{
  HCITransport.end();
    4258:	4b03      	ldr	r3, [pc, #12]	; (4268 <_ZN8HCIClass3endEv+0x10>)
{
    425a:	b510      	push	{r4, lr}
  HCITransport.end();
    425c:	6818      	ldr	r0, [r3, #0]
    425e:	6803      	ldr	r3, [r0, #0]
    4260:	685b      	ldr	r3, [r3, #4]
    4262:	4798      	blx	r3
}
    4264:	bd10      	pop	{r4, pc}
    4266:	46c0      	nop			; (mov r8, r8)
    4268:	0000b288 	.word	0x0000b288

0000426c <_ZN8HCIClass17handleNumCompPktsEtt>:
    sendAclPkt(aclHdr->handle & 0x0fff, 0x0005, sizeof(l2capRejectCid), &l2capRejectCid);
  }
}

void HCIClass::handleNumCompPkts(uint16_t /*handle*/, uint16_t numPkts)
{
    426c:	30ff      	adds	r0, #255	; 0xff
  if (numPkts && _pendingPkt > numPkts) {
    426e:	2a00      	cmp	r2, #0
    4270:	d005      	beq.n	427e <_ZN8HCIClass17handleNumCompPktsEtt+0x12>
    4272:	7f83      	ldrb	r3, [r0, #30]
    4274:	4293      	cmp	r3, r2
    4276:	dd02      	ble.n	427e <_ZN8HCIClass17handleNumCompPktsEtt+0x12>
    _pendingPkt -= numPkts;
    4278:	1a9b      	subs	r3, r3, r2
  } else {
    _pendingPkt = 0;
    427a:	7783      	strb	r3, [r0, #30]
  }
}
    427c:	4770      	bx	lr
    _pendingPkt = 0;
    427e:	2300      	movs	r3, #0
    4280:	e7fb      	b.n	427a <_ZN8HCIClass17handleNumCompPktsEtt+0xe>
	...

00004284 <_ZN8HCIClass7dumpPktEPKchPh>:
    }
  }
}

void HCIClass::dumpPkt(const char* prefix, uint8_t plen, uint8_t pdata[])
{
    4284:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    4286:	0005      	movs	r5, r0
  if (_debug) {
    4288:	6840      	ldr	r0, [r0, #4]
{
    428a:	0017      	movs	r7, r2
    428c:	9301      	str	r3, [sp, #4]
  if (_debug) {
    428e:	2800      	cmp	r0, #0
    4290:	d01b      	beq.n	42ca <_ZN8HCIClass7dumpPktEPKchPh+0x46>
    _debug->print(prefix);
    4292:	f000 fe1b 	bl	4ecc <_ZN5Print5printEPKc>

    for (uint8_t i = 0; i < plen; i++) {
    4296:	2400      	movs	r4, #0
    4298:	42bc      	cmp	r4, r7
    429a:	da0f      	bge.n	42bc <_ZN8HCIClass7dumpPktEPKchPh+0x38>
      byte b = pdata[i];
    429c:	9b01      	ldr	r3, [sp, #4]
    429e:	5d1e      	ldrb	r6, [r3, r4]

      if (b < 16) {
    42a0:	2e0f      	cmp	r6, #15
    42a2:	dc03      	bgt.n	42ac <_ZN8HCIClass7dumpPktEPKchPh+0x28>
        _debug->print("0");
    42a4:	4909      	ldr	r1, [pc, #36]	; (42cc <_ZN8HCIClass7dumpPktEPKchPh+0x48>)
    42a6:	6868      	ldr	r0, [r5, #4]
    42a8:	f000 fe10 	bl	4ecc <_ZN5Print5printEPKc>
      }

      _debug->print(b, HEX);
    42ac:	2210      	movs	r2, #16
    42ae:	0031      	movs	r1, r6
    42b0:	6868      	ldr	r0, [r5, #4]
    for (uint8_t i = 0; i < plen; i++) {
    42b2:	3401      	adds	r4, #1
      _debug->print(b, HEX);
    42b4:	f000 fe57 	bl	4f66 <_ZN5Print5printEhi>
    for (uint8_t i = 0; i < plen; i++) {
    42b8:	b2e4      	uxtb	r4, r4
    42ba:	e7ed      	b.n	4298 <_ZN8HCIClass7dumpPktEPKchPh+0x14>
    }

    _debug->println();
    42bc:	6868      	ldr	r0, [r5, #4]
    42be:	f000 fe09 	bl	4ed4 <_ZN5Print7printlnEv>
    _debug->flush();
    42c2:	6868      	ldr	r0, [r5, #4]
    42c4:	6803      	ldr	r3, [r0, #0]
    42c6:	68db      	ldr	r3, [r3, #12]
    42c8:	4798      	blx	r3
  }
}
    42ca:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    42cc:	0000b203 	.word	0x0000b203

000042d0 <_ZN8HCIClass10sendAclPktEthhPv>:
{
    42d0:	b5f0      	push	{r4, r5, r6, r7, lr}
    42d2:	0004      	movs	r4, r0
    42d4:	001d      	movs	r5, r3
    42d6:	b085      	sub	sp, #20
    42d8:	af00      	add	r7, sp, #0
    42da:	60b9      	str	r1, [r7, #8]
    42dc:	607a      	str	r2, [r7, #4]
  while (_pendingPkt >= _maxPkt) {
    42de:	0023      	movs	r3, r4
    42e0:	33ff      	adds	r3, #255	; 0xff
    42e2:	7f9a      	ldrb	r2, [r3, #30]
    42e4:	7f5b      	ldrb	r3, [r3, #29]
    42e6:	429a      	cmp	r2, r3
    42e8:	db03      	blt.n	42f2 <_ZN8HCIClass10sendAclPktEthhPv+0x22>
    poll();
    42ea:	0020      	movs	r0, r4
    42ec:	f000 f8f6 	bl	44dc <_ZN8HCIClass4pollEv>
  while (_pendingPkt >= _maxPkt) {
    42f0:	e7f5      	b.n	42de <_ZN8HCIClass10sendAclPktEthhPv+0xe>
  uint8_t txBuffer[sizeof(aclHdr) + plen];
    42f2:	002b      	movs	r3, r5
    42f4:	466a      	mov	r2, sp
    42f6:	3310      	adds	r3, #16
    42f8:	08db      	lsrs	r3, r3, #3
    42fa:	00db      	lsls	r3, r3, #3
    42fc:	1ad3      	subs	r3, r2, r3
    42fe:	469d      	mov	sp, r3
    4300:	60fb      	str	r3, [r7, #12]
  memcpy(txBuffer, &aclHdr, sizeof(aclHdr));
    4302:	466a      	mov	r2, sp
    4304:	2302      	movs	r3, #2
    4306:	7013      	strb	r3, [r2, #0]
    4308:	7a3b      	ldrb	r3, [r7, #8]
    430a:	3201      	adds	r2, #1
    430c:	7013      	strb	r3, [r2, #0]
    430e:	68bb      	ldr	r3, [r7, #8]
  memcpy(&txBuffer[sizeof(aclHdr)], data, plen);
    4310:	2009      	movs	r0, #9
  memcpy(txBuffer, &aclHdr, sizeof(aclHdr));
    4312:	0a1b      	lsrs	r3, r3, #8
    4314:	7053      	strb	r3, [r2, #1]
    4316:	466a      	mov	r2, sp
  } aclHdr = { HCI_ACLDATA_PKT, handle, uint8_t(plen + 4), plen, cid };
    4318:	1d2b      	adds	r3, r5, #4
  memcpy(txBuffer, &aclHdr, sizeof(aclHdr));
    431a:	b2db      	uxtb	r3, r3
    431c:	70d3      	strb	r3, [r2, #3]
    431e:	2300      	movs	r3, #0
    4320:	7113      	strb	r3, [r2, #4]
    4322:	466b      	mov	r3, sp
    4324:	b2aa      	uxth	r2, r5
    4326:	715a      	strb	r2, [r3, #5]
    4328:	2200      	movs	r2, #0
    432a:	719a      	strb	r2, [r3, #6]
    432c:	466b      	mov	r3, sp
    432e:	1dda      	adds	r2, r3, #7
    4330:	88bb      	ldrh	r3, [r7, #4]
  uint8_t txBuffer[sizeof(aclHdr) + plen];
    4332:	002e      	movs	r6, r5
  memcpy(txBuffer, &aclHdr, sizeof(aclHdr));
    4334:	7013      	strb	r3, [r2, #0]
    4336:	2300      	movs	r3, #0
  memcpy(&txBuffer[sizeof(aclHdr)], data, plen);
    4338:	4468      	add	r0, sp
  memcpy(txBuffer, &aclHdr, sizeof(aclHdr));
    433a:	7053      	strb	r3, [r2, #1]
  memcpy(&txBuffer[sizeof(aclHdr)], data, plen);
    433c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    433e:	002a      	movs	r2, r5
    4340:	f004 fd25 	bl	8d8e <memcpy>
  if (_debug) {
    4344:	6863      	ldr	r3, [r4, #4]
  uint8_t txBuffer[sizeof(aclHdr) + plen];
    4346:	3609      	adds	r6, #9
  if (_debug) {
    4348:	2b00      	cmp	r3, #0
    434a:	d005      	beq.n	4358 <_ZN8HCIClass10sendAclPktEthhPv+0x88>
    dumpPkt("HCI ACLDATA TX -> ", sizeof(aclHdr) + plen, txBuffer);
    434c:	b2f2      	uxtb	r2, r6
    434e:	466b      	mov	r3, sp
    4350:	4909      	ldr	r1, [pc, #36]	; (4378 <_ZN8HCIClass10sendAclPktEthhPv+0xa8>)
    4352:	0020      	movs	r0, r4
    4354:	f7ff ff96 	bl	4284 <_ZN8HCIClass7dumpPktEPKchPh>
  _pendingPkt++;
    4358:	34ff      	adds	r4, #255	; 0xff
    435a:	7fa3      	ldrb	r3, [r4, #30]
  HCITransport.write(txBuffer, sizeof(aclHdr) + plen);
    435c:	0032      	movs	r2, r6
  _pendingPkt++;
    435e:	3301      	adds	r3, #1
    4360:	77a3      	strb	r3, [r4, #30]
  HCITransport.write(txBuffer, sizeof(aclHdr) + plen);
    4362:	4b06      	ldr	r3, [pc, #24]	; (437c <_ZN8HCIClass10sendAclPktEthhPv+0xac>)
    4364:	68f9      	ldr	r1, [r7, #12]
    4366:	6818      	ldr	r0, [r3, #0]
    4368:	6803      	ldr	r3, [r0, #0]
    436a:	699b      	ldr	r3, [r3, #24]
    436c:	4798      	blx	r3
}
    436e:	2000      	movs	r0, #0
    4370:	46bd      	mov	sp, r7
    4372:	b005      	add	sp, #20
    4374:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4376:	46c0      	nop			; (mov r8, r8)
    4378:	0000b22c 	.word	0x0000b22c
    437c:	0000b288 	.word	0x0000b288

00004380 <_ZN8HCIClass16handleAclDataPktEhPh>:
{
    4380:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (aclHdr->cid == ATT_CID) {
    4382:	79d7      	ldrb	r7, [r2, #7]
    4384:	7993      	ldrb	r3, [r2, #6]
    4386:	023f      	lsls	r7, r7, #8
{
    4388:	b087      	sub	sp, #28
    438a:	0005      	movs	r5, r0
    438c:	0014      	movs	r4, r2
  if (aclHdr->cid == ATT_CID) {
    438e:	431f      	orrs	r7, r3
    4390:	2f04      	cmp	r7, #4
    4392:	d10d      	bne.n	43b0 <_ZN8HCIClass16handleAclDataPktEhPh+0x30>
    ATT.handleData(aclHdr->handle & 0x0fff, aclHdr->len, &_recvBuffer[1 + sizeof(HCIACLHdr)]);
    4394:	0003      	movs	r3, r0
    4396:	7861      	ldrb	r1, [r4, #1]
    4398:	7820      	ldrb	r0, [r4, #0]
    439a:	0209      	lsls	r1, r1, #8
    439c:	4301      	orrs	r1, r0
    439e:	0509      	lsls	r1, r1, #20
    43a0:	3315      	adds	r3, #21
    43a2:	7912      	ldrb	r2, [r2, #4]
    43a4:	0d09      	lsrs	r1, r1, #20
    43a6:	4817      	ldr	r0, [pc, #92]	; (4404 <_ZN8HCIClass16handleAclDataPktEhPh+0x84>)
    43a8:	f7ff fc60 	bl	3c6c <_ZN8ATTClass10handleDataEthPh>
}
    43ac:	b007      	add	sp, #28
    43ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
  } else if (aclHdr->cid == SIGNALING_CID) {
    43b0:	2f05      	cmp	r7, #5
    43b2:	d10c      	bne.n	43ce <_ZN8HCIClass16handleAclDataPktEhPh+0x4e>
    L2CAPSignaling.handleData(aclHdr->handle & 0x0fff, aclHdr->len, &_recvBuffer[1 + sizeof(HCIACLHdr)]);
    43b4:	0003      	movs	r3, r0
    43b6:	7861      	ldrb	r1, [r4, #1]
    43b8:	7820      	ldrb	r0, [r4, #0]
    43ba:	0209      	lsls	r1, r1, #8
    43bc:	4301      	orrs	r1, r0
    43be:	0509      	lsls	r1, r1, #20
    43c0:	3315      	adds	r3, #21
    43c2:	7912      	ldrb	r2, [r2, #4]
    43c4:	0d09      	lsrs	r1, r1, #20
    43c6:	4810      	ldr	r0, [pc, #64]	; (4408 <_ZN8HCIClass16handleAclDataPktEhPh+0x88>)
    43c8:	f000 fb82 	bl	4ad0 <_ZN19L2CAPSignalingClass10handleDataEthPh>
    43cc:	e7ee      	b.n	43ac <_ZN8HCIClass16handleAclDataPktEhPh+0x2c>
    } l2capRejectCid= { 0x01, 0x00, 0x006, 0x0002, aclHdr->cid, 0x0000 };
    43ce:	ae03      	add	r6, sp, #12
    43d0:	220a      	movs	r2, #10
    43d2:	2100      	movs	r1, #0
    43d4:	0030      	movs	r0, r6
    43d6:	f004 fcf5 	bl	8dc4 <memset>
    43da:	2301      	movs	r3, #1
    43dc:	7033      	strb	r3, [r6, #0]
    43de:	3305      	adds	r3, #5
    43e0:	8073      	strh	r3, [r6, #2]
    sendAclPkt(aclHdr->handle & 0x0fff, 0x0005, sizeof(l2capRejectCid), &l2capRejectCid);
    43e2:	7861      	ldrb	r1, [r4, #1]
    } l2capRejectCid= { 0x01, 0x00, 0x006, 0x0002, aclHdr->cid, 0x0000 };
    43e4:	3b04      	subs	r3, #4
    43e6:	80b3      	strh	r3, [r6, #4]
    sendAclPkt(aclHdr->handle & 0x0fff, 0x0005, sizeof(l2capRejectCid), &l2capRejectCid);
    43e8:	7823      	ldrb	r3, [r4, #0]
    43ea:	0209      	lsls	r1, r1, #8
    43ec:	4319      	orrs	r1, r3
    43ee:	0509      	lsls	r1, r1, #20
    } l2capRejectCid= { 0x01, 0x00, 0x006, 0x0002, aclHdr->cid, 0x0000 };
    43f0:	80f7      	strh	r7, [r6, #6]
    sendAclPkt(aclHdr->handle & 0x0fff, 0x0005, sizeof(l2capRejectCid), &l2capRejectCid);
    43f2:	0d09      	lsrs	r1, r1, #20
    43f4:	9600      	str	r6, [sp, #0]
    43f6:	230a      	movs	r3, #10
    43f8:	2205      	movs	r2, #5
    43fa:	0028      	movs	r0, r5
    43fc:	f7ff ff68 	bl	42d0 <_ZN8HCIClass10sendAclPktEthhPv>
}
    4400:	e7d4      	b.n	43ac <_ZN8HCIClass16handleAclDataPktEhPh+0x2c>
    4402:	46c0      	nop			; (mov r8, r8)
    4404:	200002b8 	.word	0x200002b8
    4408:	2000059c 	.word	0x2000059c

0000440c <_ZN8HCIClass4pollEm>:
{
    440c:	b570      	push	{r4, r5, r6, lr}
    440e:	0004      	movs	r4, r0
    4410:	4d2f      	ldr	r5, [pc, #188]	; (44d0 <_ZN8HCIClass4pollEm+0xc4>)
  if (timeout) {
    4412:	2900      	cmp	r1, #0
    4414:	d003      	beq.n	441e <_ZN8HCIClass4pollEm+0x12>
    HCITransport.wait(timeout);
    4416:	6828      	ldr	r0, [r5, #0]
    4418:	6803      	ldr	r3, [r0, #0]
    441a:	689b      	ldr	r3, [r3, #8]
    441c:	4798      	blx	r3
  while (HCITransport.available()) {
    441e:	682e      	ldr	r6, [r5, #0]
    4420:	6833      	ldr	r3, [r6, #0]
    4422:	0030      	movs	r0, r6
    4424:	68db      	ldr	r3, [r3, #12]
    4426:	4798      	blx	r3
    4428:	2800      	cmp	r0, #0
    442a:	d050      	beq.n	44ce <_ZN8HCIClass4pollEm+0xc2>
    byte b = HCITransport.read();
    442c:	6833      	ldr	r3, [r6, #0]
    442e:	0030      	movs	r0, r6
    4430:	695b      	ldr	r3, [r3, #20]
    4432:	4798      	blx	r3
    _recvBuffer[_recvIndex++] = b;
    4434:	68a3      	ldr	r3, [r4, #8]
    byte b = HCITransport.read();
    4436:	b2c1      	uxtb	r1, r0
    _recvBuffer[_recvIndex++] = b;
    4438:	1c5a      	adds	r2, r3, #1
    443a:	18e3      	adds	r3, r4, r3
    443c:	60a2      	str	r2, [r4, #8]
    443e:	7319      	strb	r1, [r3, #12]
    if (_recvBuffer[0] == HCI_ACLDATA_PKT) {
    4440:	7b23      	ldrb	r3, [r4, #12]
    4442:	2b02      	cmp	r3, #2
    4444:	d11d      	bne.n	4482 <_ZN8HCIClass4pollEm+0x76>
      if (_recvIndex > 5 && _recvIndex >= (5 + (_recvBuffer[3] + (_recvBuffer[4] << 8)))) {
    4446:	2a05      	cmp	r2, #5
    4448:	dde9      	ble.n	441e <_ZN8HCIClass4pollEm+0x12>
    444a:	7c23      	ldrb	r3, [r4, #16]
    444c:	7be1      	ldrb	r1, [r4, #15]
    444e:	021b      	lsls	r3, r3, #8
    4450:	185b      	adds	r3, r3, r1
    4452:	3304      	adds	r3, #4
    4454:	429a      	cmp	r2, r3
    4456:	dde2      	ble.n	441e <_ZN8HCIClass4pollEm+0x12>
        if (_debug) {
    4458:	6863      	ldr	r3, [r4, #4]
    445a:	2b00      	cmp	r3, #0
    445c:	d006      	beq.n	446c <_ZN8HCIClass4pollEm+0x60>
          dumpPkt("HCI ACLDATA RX <- ", _recvIndex, _recvBuffer);
    445e:	0023      	movs	r3, r4
    4460:	b2d2      	uxtb	r2, r2
    4462:	330c      	adds	r3, #12
    4464:	491b      	ldr	r1, [pc, #108]	; (44d4 <_ZN8HCIClass4pollEm+0xc8>)
    4466:	0020      	movs	r0, r4
    4468:	f7ff ff0c 	bl	4284 <_ZN8HCIClass7dumpPktEPKchPh>
        int pktLen = _recvIndex - 1;
    446c:	68a3      	ldr	r3, [r4, #8]
        handleAclDataPkt(pktLen, &_recvBuffer[1]);
    446e:	0022      	movs	r2, r4
        int pktLen = _recvIndex - 1;
    4470:	1e59      	subs	r1, r3, #1
        _recvIndex = 0;
    4472:	2300      	movs	r3, #0
        handleAclDataPkt(pktLen, &_recvBuffer[1]);
    4474:	b2c9      	uxtb	r1, r1
        _recvIndex = 0;
    4476:	60a3      	str	r3, [r4, #8]
        handleAclDataPkt(pktLen, &_recvBuffer[1]);
    4478:	320d      	adds	r2, #13
    447a:	0020      	movs	r0, r4
    447c:	f7ff ff80 	bl	4380 <_ZN8HCIClass16handleAclDataPktEhPh>
    4480:	e7cd      	b.n	441e <_ZN8HCIClass4pollEm+0x12>
    } else if (_recvBuffer[0] == HCI_EVENT_PKT) {
    4482:	2b04      	cmp	r3, #4
    4484:	d11a      	bne.n	44bc <_ZN8HCIClass4pollEm+0xb0>
      if (_recvIndex > 3 && _recvIndex >= (3 + _recvBuffer[2])) {
    4486:	2a03      	cmp	r2, #3
    4488:	ddc9      	ble.n	441e <_ZN8HCIClass4pollEm+0x12>
    448a:	7ba3      	ldrb	r3, [r4, #14]
    448c:	3302      	adds	r3, #2
    448e:	429a      	cmp	r2, r3
    4490:	ddc5      	ble.n	441e <_ZN8HCIClass4pollEm+0x12>
        if (_debug) {
    4492:	6863      	ldr	r3, [r4, #4]
    4494:	2b00      	cmp	r3, #0
    4496:	d006      	beq.n	44a6 <_ZN8HCIClass4pollEm+0x9a>
          dumpPkt("HCI EVENT RX <- ", _recvIndex, _recvBuffer);
    4498:	0023      	movs	r3, r4
    449a:	b2d2      	uxtb	r2, r2
    449c:	330c      	adds	r3, #12
    449e:	490e      	ldr	r1, [pc, #56]	; (44d8 <_ZN8HCIClass4pollEm+0xcc>)
    44a0:	0020      	movs	r0, r4
    44a2:	f7ff feef 	bl	4284 <_ZN8HCIClass7dumpPktEPKchPh>
        int pktLen = _recvIndex - 1;
    44a6:	68a3      	ldr	r3, [r4, #8]
        handleEventPkt(pktLen, &_recvBuffer[1]);
    44a8:	0022      	movs	r2, r4
        int pktLen = _recvIndex - 1;
    44aa:	1e59      	subs	r1, r3, #1
        _recvIndex = 0;
    44ac:	2300      	movs	r3, #0
        handleEventPkt(pktLen, &_recvBuffer[1]);
    44ae:	b2c9      	uxtb	r1, r1
        _recvIndex = 0;
    44b0:	60a3      	str	r3, [r4, #8]
        handleEventPkt(pktLen, &_recvBuffer[1]);
    44b2:	320d      	adds	r2, #13
    44b4:	0020      	movs	r0, r4
    44b6:	f000 f95d 	bl	4774 <_ZN8HCIClass14handleEventPktEhPh>
    44ba:	e7b0      	b.n	441e <_ZN8HCIClass4pollEm+0x12>
      _recvIndex = 0;
    44bc:	2300      	movs	r3, #0
      if (_debug) {
    44be:	6860      	ldr	r0, [r4, #4]
      _recvIndex = 0;
    44c0:	60a3      	str	r3, [r4, #8]
      if (_debug) {
    44c2:	4298      	cmp	r0, r3
    44c4:	d0ab      	beq.n	441e <_ZN8HCIClass4pollEm+0x12>
        _debug->println(b, HEX);
    44c6:	2210      	movs	r2, #16
    44c8:	f000 fd51 	bl	4f6e <_ZN5Print7printlnEhi>
    44cc:	e7a7      	b.n	441e <_ZN8HCIClass4pollEm+0x12>
}
    44ce:	bd70      	pop	{r4, r5, r6, pc}
    44d0:	0000b288 	.word	0x0000b288
    44d4:	0000b252 	.word	0x0000b252
    44d8:	0000b265 	.word	0x0000b265

000044dc <_ZN8HCIClass4pollEv>:
{
    44dc:	b510      	push	{r4, lr}
  poll(0);
    44de:	2100      	movs	r1, #0
    44e0:	f7ff ff94 	bl	440c <_ZN8HCIClass4pollEm>
}
    44e4:	bd10      	pop	{r4, pc}
	...

000044e8 <_ZN8HCIClass11sendCommandEthPv>:
{
    44e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    44ea:	0004      	movs	r4, r0
  uint8_t txBuffer[sizeof(pktHdr) + plen];
    44ec:	0010      	movs	r0, r2
{
    44ee:	000d      	movs	r5, r1
  uint8_t txBuffer[sizeof(pktHdr) + plen];
    44f0:	4669      	mov	r1, sp
    44f2:	300b      	adds	r0, #11
    44f4:	08c0      	lsrs	r0, r0, #3
    44f6:	00c0      	lsls	r0, r0, #3
    44f8:	1a09      	subs	r1, r1, r0
{
    44fa:	af00      	add	r7, sp, #0
  uint8_t txBuffer[sizeof(pktHdr) + plen];
    44fc:	468d      	mov	sp, r1
    44fe:	6079      	str	r1, [r7, #4]
  memcpy(txBuffer, &pktHdr, sizeof(pktHdr));
    4500:	4668      	mov	r0, sp
    4502:	2101      	movs	r1, #1
    4504:	7001      	strb	r1, [r0, #0]
    4506:	4669      	mov	r1, sp
    4508:	7045      	strb	r5, [r0, #1]
    450a:	0a28      	lsrs	r0, r5, #8
    450c:	7088      	strb	r0, [r1, #2]
    450e:	4669      	mov	r1, sp
  memcpy(&txBuffer[sizeof(pktHdr)], parameters, plen);
    4510:	a801      	add	r0, sp, #4
  memcpy(txBuffer, &pktHdr, sizeof(pktHdr));
    4512:	70ca      	strb	r2, [r1, #3]
  memcpy(&txBuffer[sizeof(pktHdr)], parameters, plen);
    4514:	0019      	movs	r1, r3
  uint8_t txBuffer[sizeof(pktHdr) + plen];
    4516:	1d16      	adds	r6, r2, #4
  memcpy(&txBuffer[sizeof(pktHdr)], parameters, plen);
    4518:	f004 fc39 	bl	8d8e <memcpy>
  if (_debug) {
    451c:	6863      	ldr	r3, [r4, #4]
    451e:	2b00      	cmp	r3, #0
    4520:	d005      	beq.n	452e <_ZN8HCIClass11sendCommandEthPv+0x46>
    dumpPkt("HCI COMMAND TX -> ", sizeof(pktHdr) + plen, txBuffer);
    4522:	b2f2      	uxtb	r2, r6
    4524:	466b      	mov	r3, sp
    4526:	4915      	ldr	r1, [pc, #84]	; (457c <_ZN8HCIClass11sendCommandEthPv+0x94>)
    4528:	0020      	movs	r0, r4
    452a:	f7ff feab 	bl	4284 <_ZN8HCIClass7dumpPktEPKchPh>
  HCITransport.write(txBuffer, sizeof(pktHdr) + plen);
    452e:	4b14      	ldr	r3, [pc, #80]	; (4580 <_ZN8HCIClass11sendCommandEthPv+0x98>)
    4530:	0032      	movs	r2, r6
    4532:	6818      	ldr	r0, [r3, #0]
    4534:	6879      	ldr	r1, [r7, #4]
    4536:	6803      	ldr	r3, [r0, #0]
  _cmdCompleteStatus = -1;
    4538:	0026      	movs	r6, r4
  HCITransport.write(txBuffer, sizeof(pktHdr) + plen);
    453a:	699b      	ldr	r3, [r3, #24]
    453c:	4798      	blx	r3
  _cmdCompleteOpcode = 0xffff;
    453e:	0023      	movs	r3, r4
    4540:	33fe      	adds	r3, #254	; 0xfe
    4542:	607b      	str	r3, [r7, #4]
    4544:	2301      	movs	r3, #1
    4546:	687a      	ldr	r2, [r7, #4]
    4548:	425b      	negs	r3, r3
  _cmdCompleteStatus = -1;
    454a:	36fc      	adds	r6, #252	; 0xfc
  _cmdCompleteOpcode = 0xffff;
    454c:	8213      	strh	r3, [r2, #16]
  _cmdCompleteStatus = -1;
    454e:	6173      	str	r3, [r6, #20]
  for (unsigned long start = millis(); _cmdCompleteOpcode != opcode && millis() < (start + 1000);) {
    4550:	f000 fc16 	bl	4d80 <millis>
    4554:	6038      	str	r0, [r7, #0]
    4556:	687b      	ldr	r3, [r7, #4]
    4558:	8a1b      	ldrh	r3, [r3, #16]
    455a:	42ab      	cmp	r3, r5
    455c:	d00b      	beq.n	4576 <_ZN8HCIClass11sendCommandEthPv+0x8e>
    455e:	f000 fc0f 	bl	4d80 <millis>
    4562:	22fa      	movs	r2, #250	; 0xfa
    4564:	683b      	ldr	r3, [r7, #0]
    4566:	0092      	lsls	r2, r2, #2
    4568:	189b      	adds	r3, r3, r2
    456a:	4298      	cmp	r0, r3
    456c:	d203      	bcs.n	4576 <_ZN8HCIClass11sendCommandEthPv+0x8e>
    poll();
    456e:	0020      	movs	r0, r4
    4570:	f7ff ffb4 	bl	44dc <_ZN8HCIClass4pollEv>
  for (unsigned long start = millis(); _cmdCompleteOpcode != opcode && millis() < (start + 1000);) {
    4574:	e7ef      	b.n	4556 <_ZN8HCIClass11sendCommandEthPv+0x6e>
}
    4576:	46bd      	mov	sp, r7
  return _cmdCompleteStatus;
    4578:	6970      	ldr	r0, [r6, #20]
}
    457a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    457c:	0000b23f 	.word	0x0000b23f
    4580:	0000b288 	.word	0x0000b288

00004584 <_ZN8HCIClass5resetEv>:
  return sendCommand(OGF_HOST_CTL << 10 | OCF_RESET);
    4584:	2300      	movs	r3, #0
{
    4586:	b510      	push	{r4, lr}
  return sendCommand(OGF_HOST_CTL << 10 | OCF_RESET);
    4588:	001a      	movs	r2, r3
    458a:	4902      	ldr	r1, [pc, #8]	; (4594 <_ZN8HCIClass5resetEv+0x10>)
    458c:	f7ff ffac 	bl	44e8 <_ZN8HCIClass11sendCommandEthPv>
}
    4590:	bd10      	pop	{r4, pc}
    4592:	46c0      	nop			; (mov r8, r8)
    4594:	00000c03 	.word	0x00000c03

00004598 <_ZN8HCIClass16readLocalVersionERhRtS0_S1_S1_>:
{
    4598:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    459a:	001c      	movs	r4, r3
  int result = sendCommand(OGF_INFO_PARAM << 10 | OCF_READ_LOCAL_VERSION);
    459c:	2300      	movs	r3, #0
{
    459e:	000e      	movs	r6, r1
    45a0:	0015      	movs	r5, r2
  int result = sendCommand(OGF_INFO_PARAM << 10 | OCF_READ_LOCAL_VERSION);
    45a2:	490f      	ldr	r1, [pc, #60]	; (45e0 <_ZN8HCIClass16readLocalVersionERhRtS0_S1_S1_+0x48>)
    45a4:	001a      	movs	r2, r3
{
    45a6:	0007      	movs	r7, r0
  int result = sendCommand(OGF_INFO_PARAM << 10 | OCF_READ_LOCAL_VERSION);
    45a8:	f7ff ff9e 	bl	44e8 <_ZN8HCIClass11sendCommandEthPv>
  if (result == 0) {
    45ac:	2800      	cmp	r0, #0
    45ae:	d116      	bne.n	45de <_ZN8HCIClass16readLocalVersionERhRtS0_S1_S1_+0x46>
    } *localVersion = (HCILocalVersion*)_cmdResponse;
    45b0:	37fc      	adds	r7, #252	; 0xfc
    45b2:	69fb      	ldr	r3, [r7, #28]
    hciVer = localVersion->hciVer;
    45b4:	781a      	ldrb	r2, [r3, #0]
    45b6:	7032      	strb	r2, [r6, #0]
    hciRev = localVersion->hciRev;
    45b8:	789a      	ldrb	r2, [r3, #2]
    45ba:	7859      	ldrb	r1, [r3, #1]
    45bc:	0212      	lsls	r2, r2, #8
    45be:	430a      	orrs	r2, r1
    45c0:	802a      	strh	r2, [r5, #0]
    lmpVer = localVersion->lmpVer;
    45c2:	78da      	ldrb	r2, [r3, #3]
    45c4:	7022      	strb	r2, [r4, #0]
    manufacturer = localVersion->manufacturer;
    45c6:	795a      	ldrb	r2, [r3, #5]
    45c8:	7919      	ldrb	r1, [r3, #4]
    45ca:	0212      	lsls	r2, r2, #8
    45cc:	430a      	orrs	r2, r1
    45ce:	9906      	ldr	r1, [sp, #24]
    45d0:	800a      	strh	r2, [r1, #0]
    lmpSubVer = localVersion->lmpSubVer;
    45d2:	799a      	ldrb	r2, [r3, #6]
    45d4:	79db      	ldrb	r3, [r3, #7]
    45d6:	021b      	lsls	r3, r3, #8
    45d8:	4313      	orrs	r3, r2
    45da:	9a07      	ldr	r2, [sp, #28]
    45dc:	8013      	strh	r3, [r2, #0]
}
    45de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    45e0:	00001001 	.word	0x00001001

000045e4 <_ZN8HCIClass10readBdAddrEPh>:
  int result = sendCommand(OGF_INFO_PARAM << 10 | OCF_READ_BD_ADDR);
    45e4:	2300      	movs	r3, #0
{
    45e6:	b570      	push	{r4, r5, r6, lr}
  int result = sendCommand(OGF_INFO_PARAM << 10 | OCF_READ_BD_ADDR);
    45e8:	001a      	movs	r2, r3
{
    45ea:	000e      	movs	r6, r1
  int result = sendCommand(OGF_INFO_PARAM << 10 | OCF_READ_BD_ADDR);
    45ec:	4906      	ldr	r1, [pc, #24]	; (4608 <_ZN8HCIClass10readBdAddrEPh+0x24>)
{
    45ee:	0004      	movs	r4, r0
  int result = sendCommand(OGF_INFO_PARAM << 10 | OCF_READ_BD_ADDR);
    45f0:	f7ff ff7a 	bl	44e8 <_ZN8HCIClass11sendCommandEthPv>
    45f4:	1e05      	subs	r5, r0, #0
  if (result == 0) {
    45f6:	d105      	bne.n	4604 <_ZN8HCIClass10readBdAddrEPh+0x20>
    memcpy(addr, _cmdResponse, 6);
    45f8:	34fc      	adds	r4, #252	; 0xfc
    45fa:	69e1      	ldr	r1, [r4, #28]
    45fc:	2206      	movs	r2, #6
    45fe:	0030      	movs	r0, r6
    4600:	f004 fbc5 	bl	8d8e <memcpy>
}
    4604:	0028      	movs	r0, r5
    4606:	bd70      	pop	{r4, r5, r6, pc}
    4608:	00001009 	.word	0x00001009

0000460c <_ZN8HCIClass8readRssiEt>:
{
    460c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    460e:	466b      	mov	r3, sp
    4610:	1d9d      	adds	r5, r3, #6
    4612:	80d9      	strh	r1, [r3, #6]
  int result = sendCommand(OGF_STATUS_PARAM << 10 | OCF_READ_RSSI, sizeof(handle), &handle);
    4614:	2202      	movs	r2, #2
    4616:	490a      	ldr	r1, [pc, #40]	; (4640 <_ZN8HCIClass8readRssiEt+0x34>)
    4618:	002b      	movs	r3, r5
{
    461a:	0004      	movs	r4, r0
  int result = sendCommand(OGF_STATUS_PARAM << 10 | OCF_READ_RSSI, sizeof(handle), &handle);
    461c:	f7ff ff64 	bl	44e8 <_ZN8HCIClass11sendCommandEthPv>
  int rssi = 127;
    4620:	217f      	movs	r1, #127	; 0x7f
  if (result == 0) {
    4622:	2800      	cmp	r0, #0
    4624:	d10a      	bne.n	463c <_ZN8HCIClass8readRssiEt+0x30>
    } *readRssi = (HCIReadRssi*)_cmdResponse;
    4626:	34fc      	adds	r4, #252	; 0xfc
    4628:	69e2      	ldr	r2, [r4, #28]
    if (readRssi->handle == handle) {
    462a:	8828      	ldrh	r0, [r5, #0]
    462c:	7853      	ldrb	r3, [r2, #1]
    462e:	7814      	ldrb	r4, [r2, #0]
    4630:	021b      	lsls	r3, r3, #8
    4632:	4323      	orrs	r3, r4
    4634:	4298      	cmp	r0, r3
    4636:	d101      	bne.n	463c <_ZN8HCIClass8readRssiEt+0x30>
      rssi = readRssi->rssi;
    4638:	2102      	movs	r1, #2
    463a:	5651      	ldrsb	r1, [r2, r1]
}
    463c:	0008      	movs	r0, r1
    463e:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    4640:	00001405 	.word	0x00001405

00004644 <_ZN8HCIClass12setEventMaskEy>:
{
    4644:	b507      	push	{r0, r1, r2, lr}
  return sendCommand(OGF_HOST_CTL << 10 | OCF_SET_EVENT_MASK, sizeof(eventMask), &eventMask);
    4646:	4904      	ldr	r1, [pc, #16]	; (4658 <_ZN8HCIClass12setEventMaskEy+0x14>)
{
    4648:	9200      	str	r2, [sp, #0]
    464a:	9301      	str	r3, [sp, #4]
  return sendCommand(OGF_HOST_CTL << 10 | OCF_SET_EVENT_MASK, sizeof(eventMask), &eventMask);
    464c:	466b      	mov	r3, sp
    464e:	2208      	movs	r2, #8
    4650:	f7ff ff4a 	bl	44e8 <_ZN8HCIClass11sendCommandEthPv>
}
    4654:	bd0e      	pop	{r1, r2, r3, pc}
    4656:	46c0      	nop			; (mov r8, r8)
    4658:	00000c01 	.word	0x00000c01

0000465c <_ZN8HCIClass16readLeBufferSizeERtRh>:
{
    465c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  int result = sendCommand(OGF_LE_CTL << 10 | OCF_LE_READ_BUFFER_SIZE);
    465e:	2300      	movs	r3, #0
{
    4660:	000e      	movs	r6, r1
    4662:	0017      	movs	r7, r2
  int result = sendCommand(OGF_LE_CTL << 10 | OCF_LE_READ_BUFFER_SIZE);
    4664:	490d      	ldr	r1, [pc, #52]	; (469c <_ZN8HCIClass16readLeBufferSizeERtRh+0x40>)
    4666:	001a      	movs	r2, r3
{
    4668:	0005      	movs	r5, r0
  int result = sendCommand(OGF_LE_CTL << 10 | OCF_LE_READ_BUFFER_SIZE);
    466a:	f7ff ff3d 	bl	44e8 <_ZN8HCIClass11sendCommandEthPv>
    466e:	1e04      	subs	r4, r0, #0
  if (result == 0) {
    4670:	d111      	bne.n	4696 <_ZN8HCIClass16readLeBufferSizeERtRh+0x3a>
    } *leBufferSize = (HCILeBufferSize*)_cmdResponse;
    4672:	002b      	movs	r3, r5
    4674:	33fc      	adds	r3, #252	; 0xfc
    4676:	69da      	ldr	r2, [r3, #28]
    _maxPkt = maxPkt = leBufferSize->maxPkt;
    4678:	35ff      	adds	r5, #255	; 0xff
    pktLen = leBufferSize->pktLen;
    467a:	7853      	ldrb	r3, [r2, #1]
    467c:	7811      	ldrb	r1, [r2, #0]
    467e:	021b      	lsls	r3, r3, #8
    4680:	430b      	orrs	r3, r1
    4682:	8033      	strh	r3, [r6, #0]
    _maxPkt = maxPkt = leBufferSize->maxPkt;
    4684:	7893      	ldrb	r3, [r2, #2]
    ATT.setMaxMtu(pktLen - 9); // max pkt len - ACL header size
    4686:	4806      	ldr	r0, [pc, #24]	; (46a0 <_ZN8HCIClass16readLeBufferSizeERtRh+0x44>)
    _maxPkt = maxPkt = leBufferSize->maxPkt;
    4688:	703b      	strb	r3, [r7, #0]
    468a:	776b      	strb	r3, [r5, #29]
    ATT.setMaxMtu(pktLen - 9); // max pkt len - ACL header size
    468c:	8831      	ldrh	r1, [r6, #0]
    468e:	3909      	subs	r1, #9
    4690:	b289      	uxth	r1, r1
    4692:	f7fe fb81 	bl	2d98 <_ZN8ATTClass9setMaxMtuEt>
}
    4696:	0020      	movs	r0, r4
    4698:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    469a:	46c0      	nop			; (mov r8, r8)
    469c:	00002002 	.word	0x00002002
    46a0:	200002b8 	.word	0x200002b8

000046a4 <_ZN8HCIClass26leSetAdvertisingParametersEtthhhPhhh>:
{
    46a4:	b5f0      	push	{r4, r5, r6, r7, lr}
    46a6:	b085      	sub	sp, #20
    46a8:	469c      	mov	ip, r3
  leAdvertisingParamters.minInterval = minInterval;
    46aa:	466b      	mov	r3, sp
  leAdvertisingParamters.maxInterval = maxInterval;
    46ac:	805a      	strh	r2, [r3, #2]
  leAdvertisingParamters.advType = advType;
    46ae:	4662      	mov	r2, ip
{
    46b0:	0004      	movs	r4, r0
    46b2:	a80a      	add	r0, sp, #40	; 0x28
    46b4:	7807      	ldrb	r7, [r0, #0]
    46b6:	a80b      	add	r0, sp, #44	; 0x2c
    46b8:	7800      	ldrb	r0, [r0, #0]
    46ba:	ad0d      	add	r5, sp, #52	; 0x34
    46bc:	782e      	ldrb	r6, [r5, #0]
  leAdvertisingParamters.minInterval = minInterval;
    46be:	8019      	strh	r1, [r3, #0]
  leAdvertisingParamters.advType = advType;
    46c0:	711a      	strb	r2, [r3, #4]
  leAdvertisingParamters.directBdaddrType = directBdaddrType;
    46c2:	7198      	strb	r0, [r3, #6]
  memcpy(leAdvertisingParamters.directBdaddr, directBdaddr, 6);
    46c4:	990c      	ldr	r1, [sp, #48]	; 0x30
{
    46c6:	ad0e      	add	r5, sp, #56	; 0x38
  memcpy(leAdvertisingParamters.directBdaddr, directBdaddr, 6);
    46c8:	2206      	movs	r2, #6
    46ca:	1dd8      	adds	r0, r3, #7
{
    46cc:	782d      	ldrb	r5, [r5, #0]
  leAdvertisingParamters.ownBdaddrType = ownBdaddrType;
    46ce:	715f      	strb	r7, [r3, #5]
  memcpy(leAdvertisingParamters.directBdaddr, directBdaddr, 6);
    46d0:	f004 fb5d 	bl	8d8e <memcpy>
  leAdvertisingParamters.chanMap = chanMap;
    46d4:	466b      	mov	r3, sp
  return sendCommand(OGF_LE_CTL << 10 | OCF_LE_SET_ADVERTISING_PARAMETERS, sizeof(leAdvertisingParamters), &leAdvertisingParamters);
    46d6:	220f      	movs	r2, #15
    46d8:	4903      	ldr	r1, [pc, #12]	; (46e8 <_ZN8HCIClass26leSetAdvertisingParametersEtthhhPhhh+0x44>)
    46da:	0020      	movs	r0, r4
  leAdvertisingParamters.chanMap = chanMap;
    46dc:	735e      	strb	r6, [r3, #13]
  leAdvertisingParamters.filter = filter;
    46de:	739d      	strb	r5, [r3, #14]
  return sendCommand(OGF_LE_CTL << 10 | OCF_LE_SET_ADVERTISING_PARAMETERS, sizeof(leAdvertisingParamters), &leAdvertisingParamters);
    46e0:	f7ff ff02 	bl	44e8 <_ZN8HCIClass11sendCommandEthPv>
}
    46e4:	b005      	add	sp, #20
    46e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    46e8:	00002006 	.word	0x00002006

000046ec <_ZN8HCIClass20leSetAdvertisingDataEhPh>:
{
    46ec:	b5f0      	push	{r4, r5, r6, r7, lr}
  memset(&leAdvertisingData, 0, sizeof(leAdvertisingData));
    46ee:	2420      	movs	r4, #32
{
    46f0:	b089      	sub	sp, #36	; 0x24
    46f2:	000d      	movs	r5, r1
    46f4:	0006      	movs	r6, r0
    46f6:	0017      	movs	r7, r2
  memset(&leAdvertisingData, 0, sizeof(leAdvertisingData));
    46f8:	2100      	movs	r1, #0
    46fa:	0022      	movs	r2, r4
    46fc:	4668      	mov	r0, sp
    46fe:	f004 fb61 	bl	8dc4 <memset>
  leAdvertisingData.length = length;
    4702:	466b      	mov	r3, sp
  memcpy(leAdvertisingData.data, data, length);
    4704:	002a      	movs	r2, r5
    4706:	0039      	movs	r1, r7
    4708:	1c58      	adds	r0, r3, #1
  leAdvertisingData.length = length;
    470a:	701d      	strb	r5, [r3, #0]
  memcpy(leAdvertisingData.data, data, length);
    470c:	f004 fb3f 	bl	8d8e <memcpy>
  return sendCommand(OGF_LE_CTL << 10 | OCF_LE_SET_ADVERTISING_DATA, sizeof(leAdvertisingData), &leAdvertisingData);
    4710:	466b      	mov	r3, sp
    4712:	0022      	movs	r2, r4
    4714:	4902      	ldr	r1, [pc, #8]	; (4720 <_ZN8HCIClass20leSetAdvertisingDataEhPh+0x34>)
    4716:	0030      	movs	r0, r6
    4718:	f7ff fee6 	bl	44e8 <_ZN8HCIClass11sendCommandEthPv>
}
    471c:	b009      	add	sp, #36	; 0x24
    471e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4720:	00002008 	.word	0x00002008

00004724 <_ZN8HCIClass21leSetScanResponseDataEhPh>:
{
    4724:	b5f0      	push	{r4, r5, r6, r7, lr}
  memset(&leScanResponseData, 0, sizeof(leScanResponseData));
    4726:	2420      	movs	r4, #32
{
    4728:	b089      	sub	sp, #36	; 0x24
    472a:	000d      	movs	r5, r1
    472c:	0006      	movs	r6, r0
    472e:	0017      	movs	r7, r2
  memset(&leScanResponseData, 0, sizeof(leScanResponseData));
    4730:	2100      	movs	r1, #0
    4732:	0022      	movs	r2, r4
    4734:	4668      	mov	r0, sp
    4736:	f004 fb45 	bl	8dc4 <memset>
  leScanResponseData.length = length;
    473a:	466b      	mov	r3, sp
  memcpy(leScanResponseData.data, data, length);
    473c:	002a      	movs	r2, r5
    473e:	0039      	movs	r1, r7
    4740:	1c58      	adds	r0, r3, #1
  leScanResponseData.length = length;
    4742:	701d      	strb	r5, [r3, #0]
  memcpy(leScanResponseData.data, data, length);
    4744:	f004 fb23 	bl	8d8e <memcpy>
  return sendCommand(OGF_LE_CTL << 10 | OCF_LE_SET_SCAN_RESPONSE_DATA, sizeof(leScanResponseData), &leScanResponseData);
    4748:	466b      	mov	r3, sp
    474a:	0022      	movs	r2, r4
    474c:	4902      	ldr	r1, [pc, #8]	; (4758 <_ZN8HCIClass21leSetScanResponseDataEhPh+0x34>)
    474e:	0030      	movs	r0, r6
    4750:	f7ff feca 	bl	44e8 <_ZN8HCIClass11sendCommandEthPv>
}
    4754:	b009      	add	sp, #36	; 0x24
    4756:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4758:	00002009 	.word	0x00002009

0000475c <_ZN8HCIClass20leSetAdvertiseEnableEh>:
{
    475c:	b507      	push	{r0, r1, r2, lr}
    475e:	466b      	mov	r3, sp
    4760:	3307      	adds	r3, #7
    4762:	7019      	strb	r1, [r3, #0]
  return sendCommand(OGF_LE_CTL << 10 | OCF_LE_SET_ADVERTISE_ENABLE, sizeof(enable), &enable);
    4764:	2201      	movs	r2, #1
    4766:	4902      	ldr	r1, [pc, #8]	; (4770 <_ZN8HCIClass20leSetAdvertiseEnableEh+0x14>)
    4768:	f7ff febe 	bl	44e8 <_ZN8HCIClass11sendCommandEthPv>
}
    476c:	bd0e      	pop	{r1, r2, r3, pc}
    476e:	46c0      	nop			; (mov r8, r8)
    4770:	0000200a 	.word	0x0000200a

00004774 <_ZN8HCIClass14handleEventPktEhPh>:
{
    4774:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (eventHdr->evt == EVT_DISCONN_COMPLETE) {
    4776:	7813      	ldrb	r3, [r2, #0]
{
    4778:	b087      	sub	sp, #28
    477a:	0004      	movs	r4, r0
  if (eventHdr->evt == EVT_DISCONN_COMPLETE) {
    477c:	2b05      	cmp	r3, #5
    477e:	d110      	bne.n	47a2 <_ZN8HCIClass14handleEventPktEhPh+0x2e>
    ATT.removeConnection(disconnComplete->handle, disconnComplete->reason);
    4780:	1c94      	adds	r4, r2, #2
    4782:	7861      	ldrb	r1, [r4, #1]
    4784:	7952      	ldrb	r2, [r2, #5]
    4786:	4839      	ldr	r0, [pc, #228]	; (486c <_ZN8HCIClass14handleEventPktEhPh+0xf8>)
    4788:	f7fe fb26 	bl	2dd8 <_ZN8ATTClass16removeConnectionEht>
    L2CAPSignaling.removeConnection(disconnComplete->handle, disconnComplete->reason);
    478c:	7861      	ldrb	r1, [r4, #1]
    478e:	4838      	ldr	r0, [pc, #224]	; (4870 <_ZN8HCIClass14handleEventPktEhPh+0xfc>)
    4790:	78e2      	ldrb	r2, [r4, #3]
    4792:	f000 f94d 	bl	4a30 <_ZN19L2CAPSignalingClass16removeConnectionEht>
    HCI.leSetAdvertiseEnable(0x01);
    4796:	2101      	movs	r1, #1
    4798:	4836      	ldr	r0, [pc, #216]	; (4874 <_ZN8HCIClass14handleEventPktEhPh+0x100>)
    479a:	f7ff ffdf 	bl	475c <_ZN8HCIClass20leSetAdvertiseEnableEh>
}
    479e:	b007      	add	sp, #28
    47a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  } else if (eventHdr->evt == EVT_CMD_COMPLETE) {
    47a2:	2b0e      	cmp	r3, #14
    47a4:	d110      	bne.n	47c8 <_ZN8HCIClass14handleEventPktEhPh+0x54>
    _cmdCompleteOpcode = cmdCompleteHeader->opcode;
    47a6:	7913      	ldrb	r3, [r2, #4]
    47a8:	78d0      	ldrb	r0, [r2, #3]
    47aa:	021b      	lsls	r3, r3, #8
    47ac:	4303      	orrs	r3, r0
    47ae:	0020      	movs	r0, r4
    47b0:	30fe      	adds	r0, #254	; 0xfe
    47b2:	8203      	strh	r3, [r0, #16]
    _cmdCompleteStatus = cmdCompleteHeader->status;
    47b4:	7953      	ldrb	r3, [r2, #5]
    47b6:	3802      	subs	r0, #2
    47b8:	6143      	str	r3, [r0, #20]
    _cmdResponseLen = pdata[1] - sizeof(CmdComplete);
    47ba:	7853      	ldrb	r3, [r2, #1]
    47bc:	34ff      	adds	r4, #255	; 0xff
    47be:	3b04      	subs	r3, #4
    _cmdResponse = &pdata[sizeof(HCIEventHdr) + sizeof(CmdComplete)];
    47c0:	3206      	adds	r2, #6
    _cmdResponseLen = pdata[1] - sizeof(CmdComplete);
    47c2:	7563      	strb	r3, [r4, #21]
    _cmdResponse = &pdata[sizeof(HCIEventHdr) + sizeof(CmdComplete)];
    47c4:	61c2      	str	r2, [r0, #28]
    47c6:	e7ea      	b.n	479e <_ZN8HCIClass14handleEventPktEhPh+0x2a>
  } else if (eventHdr->evt == EVT_NUM_COMP_PKTS) {
    47c8:	2b13      	cmp	r3, #19
    47ca:	d10d      	bne.n	47e8 <_ZN8HCIClass14handleEventPktEhPh+0x74>
    for (uint8_t i = 0; i < numHandles; i++) {
    47cc:	2500      	movs	r5, #0
    uint8_t numHandles = pdata[sizeof(HCIEventHdr)];
    47ce:	7896      	ldrb	r6, [r2, #2]
    uint16_t* data = (uint16_t*)&pdata[sizeof(HCIEventHdr) + sizeof(numHandles)];
    47d0:	1cd7      	adds	r7, r2, #3
    for (uint8_t i = 0; i < numHandles; i++) {
    47d2:	42b5      	cmp	r5, r6
    47d4:	dae3      	bge.n	479e <_ZN8HCIClass14handleEventPktEhPh+0x2a>
      handleNumCompPkts(data[0], data[1]);
    47d6:	887a      	ldrh	r2, [r7, #2]
    47d8:	8839      	ldrh	r1, [r7, #0]
    47da:	0020      	movs	r0, r4
    for (uint8_t i = 0; i < numHandles; i++) {
    47dc:	3501      	adds	r5, #1
      handleNumCompPkts(data[0], data[1]);
    47de:	f7ff fd45 	bl	426c <_ZN8HCIClass17handleNumCompPktsEtt>
      data += 2;
    47e2:	3704      	adds	r7, #4
    for (uint8_t i = 0; i < numHandles; i++) {
    47e4:	b2ed      	uxtb	r5, r5
    47e6:	e7f4      	b.n	47d2 <_ZN8HCIClass14handleEventPktEhPh+0x5e>
  } else if (eventHdr->evt == EVT_LE_META_EVENT) {
    47e8:	2b3e      	cmp	r3, #62	; 0x3e
    47ea:	d1d8      	bne.n	479e <_ZN8HCIClass14handleEventPktEhPh+0x2a>
    if (leMetaHeader->subevent == EVT_LE_CONN_COMPLETE) {
    47ec:	7893      	ldrb	r3, [r2, #2]
    47ee:	2b01      	cmp	r3, #1
    47f0:	d1d5      	bne.n	479e <_ZN8HCIClass14handleEventPktEhPh+0x2a>
      if (leConnectionComplete->status == 0x00) {
    47f2:	78d3      	ldrb	r3, [r2, #3]
    47f4:	1cd5      	adds	r5, r2, #3
    47f6:	2b00      	cmp	r3, #0
    47f8:	d1d1      	bne.n	479e <_ZN8HCIClass14handleEventPktEhPh+0x2a>
        ATT.addConnection(leConnectionComplete->handle,
    47fa:	3208      	adds	r2, #8
    47fc:	0014      	movs	r4, r2
    47fe:	78a9      	ldrb	r1, [r5, #2]
    4800:	7868      	ldrb	r0, [r5, #1]
    4802:	0209      	lsls	r1, r1, #8
                          leConnectionComplete->masterClockAccuracy);
    4804:	4301      	orrs	r1, r0
    4806:	7c68      	ldrb	r0, [r5, #17]
    4808:	792b      	ldrb	r3, [r5, #4]
    480a:	78ea      	ldrb	r2, [r5, #3]
    480c:	9004      	str	r0, [sp, #16]
        ATT.addConnection(leConnectionComplete->handle,
    480e:	7c28      	ldrb	r0, [r5, #16]
    4810:	7bee      	ldrb	r6, [r5, #15]
    4812:	0200      	lsls	r0, r0, #8
                          leConnectionComplete->masterClockAccuracy);
    4814:	4330      	orrs	r0, r6
    4816:	9003      	str	r0, [sp, #12]
        ATT.addConnection(leConnectionComplete->handle,
    4818:	7ba8      	ldrb	r0, [r5, #14]
    481a:	7b6e      	ldrb	r6, [r5, #13]
    481c:	0200      	lsls	r0, r0, #8
                          leConnectionComplete->masterClockAccuracy);
    481e:	4330      	orrs	r0, r6
    4820:	9002      	str	r0, [sp, #8]
        ATT.addConnection(leConnectionComplete->handle,
    4822:	7b28      	ldrb	r0, [r5, #12]
    4824:	7aee      	ldrb	r6, [r5, #11]
    4826:	0200      	lsls	r0, r0, #8
                          leConnectionComplete->masterClockAccuracy);
    4828:	4330      	orrs	r0, r6
    482a:	9001      	str	r0, [sp, #4]
    482c:	9400      	str	r4, [sp, #0]
    482e:	480f      	ldr	r0, [pc, #60]	; (486c <_ZN8HCIClass14handleEventPktEhPh+0xf8>)
    4830:	f7fe fab4 	bl	2d9c <_ZN8ATTClass13addConnectionEthhPhttth>
        L2CAPSignaling.addConnection(leConnectionComplete->handle,
    4834:	78a9      	ldrb	r1, [r5, #2]
    4836:	7868      	ldrb	r0, [r5, #1]
    4838:	0209      	lsls	r1, r1, #8
                              leConnectionComplete->masterClockAccuracy);
    483a:	4301      	orrs	r1, r0
    483c:	7c68      	ldrb	r0, [r5, #17]
    483e:	792b      	ldrb	r3, [r5, #4]
    4840:	78ea      	ldrb	r2, [r5, #3]
    4842:	9004      	str	r0, [sp, #16]
        L2CAPSignaling.addConnection(leConnectionComplete->handle,
    4844:	7c28      	ldrb	r0, [r5, #16]
    4846:	7bee      	ldrb	r6, [r5, #15]
    4848:	0200      	lsls	r0, r0, #8
                              leConnectionComplete->masterClockAccuracy);
    484a:	4330      	orrs	r0, r6
    484c:	9003      	str	r0, [sp, #12]
        L2CAPSignaling.addConnection(leConnectionComplete->handle,
    484e:	7ba8      	ldrb	r0, [r5, #14]
    4850:	7b6e      	ldrb	r6, [r5, #13]
    4852:	0200      	lsls	r0, r0, #8
                              leConnectionComplete->masterClockAccuracy);
    4854:	4330      	orrs	r0, r6
    4856:	9002      	str	r0, [sp, #8]
        L2CAPSignaling.addConnection(leConnectionComplete->handle,
    4858:	7b28      	ldrb	r0, [r5, #12]
    485a:	7aee      	ldrb	r6, [r5, #11]
    485c:	0200      	lsls	r0, r0, #8
                              leConnectionComplete->masterClockAccuracy);
    485e:	4330      	orrs	r0, r6
    4860:	9001      	str	r0, [sp, #4]
    4862:	9400      	str	r4, [sp, #0]
    4864:	4802      	ldr	r0, [pc, #8]	; (4870 <_ZN8HCIClass14handleEventPktEhPh+0xfc>)
    4866:	f000 f8b7 	bl	49d8 <_ZN19L2CAPSignalingClass13addConnectionEthhPhttth>
}
    486a:	e798      	b.n	479e <_ZN8HCIClass14handleEventPktEhPh+0x2a>
    486c:	200002b8 	.word	0x200002b8
    4870:	2000059c 	.word	0x2000059c
    4874:	20000470 	.word	0x20000470

00004878 <_ZN8HCIClass12leConnUpdateEttttt>:
{
    4878:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  leConnUpdateData.handle = handle;
    487a:	466e      	mov	r6, sp
  leConnUpdateData.maxInterval = maxInterval;
    487c:	80b3      	strh	r3, [r6, #4]
  leConnUpdateData.minCeLength = 0x0004;
    487e:	2304      	movs	r3, #4
{
    4880:	ac08      	add	r4, sp, #32
    4882:	8825      	ldrh	r5, [r4, #0]
    4884:	ac09      	add	r4, sp, #36	; 0x24
    4886:	8824      	ldrh	r4, [r4, #0]
  leConnUpdateData.minCeLength = 0x0004;
    4888:	8173      	strh	r3, [r6, #10]
  leConnUpdateData.maxCeLength = 0x0006;
    488a:	3302      	adds	r3, #2
  leConnUpdateData.handle = handle;
    488c:	8031      	strh	r1, [r6, #0]
  leConnUpdateData.minInterval = minInterval;
    488e:	8072      	strh	r2, [r6, #2]
  leConnUpdateData.maxCeLength = 0x0006;
    4890:	81b3      	strh	r3, [r6, #12]
  return sendCommand(OGF_LE_CTL << 10 | OCF_LE_CONN_UPDATE, sizeof(leConnUpdateData), &leConnUpdateData);
    4892:	220e      	movs	r2, #14
    4894:	466b      	mov	r3, sp
    4896:	4903      	ldr	r1, [pc, #12]	; (48a4 <_ZN8HCIClass12leConnUpdateEttttt+0x2c>)
  leConnUpdateData.latency = latency;
    4898:	80f5      	strh	r5, [r6, #6]
  leConnUpdateData.supervisionTimeout = supervisionTimeout;
    489a:	8134      	strh	r4, [r6, #8]
  return sendCommand(OGF_LE_CTL << 10 | OCF_LE_CONN_UPDATE, sizeof(leConnUpdateData), &leConnUpdateData);
    489c:	f7ff fe24 	bl	44e8 <_ZN8HCIClass11sendCommandEthPv>
}
    48a0:	b004      	add	sp, #16
    48a2:	bd70      	pop	{r4, r5, r6, pc}
    48a4:	00002013 	.word	0x00002013

000048a8 <_ZN8HCIClass10disconnectEt>:
{
    48a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  } disconnectData = { handle, HCI_OE_USER_ENDED_CONNECTION };
    48aa:	2503      	movs	r5, #3
    48ac:	ac01      	add	r4, sp, #4
{
    48ae:	0006      	movs	r6, r0
    48b0:	000f      	movs	r7, r1
  } disconnectData = { handle, HCI_OE_USER_ENDED_CONNECTION };
    48b2:	002a      	movs	r2, r5
    48b4:	2100      	movs	r1, #0
    48b6:	0020      	movs	r0, r4
    48b8:	f004 fa84 	bl	8dc4 <memset>
    48bc:	2313      	movs	r3, #19
  return sendCommand(OGF_LINK_CTL << 10 | OCF_DISCONNECT, sizeof(disconnectData), &disconnectData);
    48be:	002a      	movs	r2, r5
  } disconnectData = { handle, HCI_OE_USER_ENDED_CONNECTION };
    48c0:	70a3      	strb	r3, [r4, #2]
  return sendCommand(OGF_LINK_CTL << 10 | OCF_DISCONNECT, sizeof(disconnectData), &disconnectData);
    48c2:	0030      	movs	r0, r6
    48c4:	0023      	movs	r3, r4
    48c6:	4902      	ldr	r1, [pc, #8]	; (48d0 <_ZN8HCIClass10disconnectEt+0x28>)
  } disconnectData = { handle, HCI_OE_USER_ENDED_CONNECTION };
    48c8:	8027      	strh	r7, [r4, #0]
  return sendCommand(OGF_LINK_CTL << 10 | OCF_DISCONNECT, sizeof(disconnectData), &disconnectData);
    48ca:	f7ff fe0d 	bl	44e8 <_ZN8HCIClass11sendCommandEthPv>
}
    48ce:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    48d0:	00000406 	.word	0x00000406

000048d4 <_GLOBAL__sub_I__ZN8HCIClassC2Ev>:
  _pendingPkt(0)
    48d4:	4807      	ldr	r0, [pc, #28]	; (48f4 <_GLOBAL__sub_I__ZN8HCIClassC2Ev+0x20>)
    48d6:	4b08      	ldr	r3, [pc, #32]	; (48f8 <_GLOBAL__sub_I__ZN8HCIClassC2Ev+0x24>)
    48d8:	0002      	movs	r2, r0
    48da:	3308      	adds	r3, #8

HCIClass HCI;
    48dc:	b510      	push	{r4, lr}
  _pendingPkt(0)
    48de:	6003      	str	r3, [r0, #0]
    48e0:	2300      	movs	r3, #0
    48e2:	32ff      	adds	r2, #255	; 0xff
    48e4:	7793      	strb	r3, [r2, #30]
HCIClass HCI;
    48e6:	4905      	ldr	r1, [pc, #20]	; (48fc <_GLOBAL__sub_I__ZN8HCIClassC2Ev+0x28>)
    48e8:	4a05      	ldr	r2, [pc, #20]	; (4900 <_GLOBAL__sub_I__ZN8HCIClassC2Ev+0x2c>)
  _pendingPkt(0)
    48ea:	6043      	str	r3, [r0, #4]
    48ec:	6083      	str	r3, [r0, #8]
HCIClass HCI;
    48ee:	f002 fa99 	bl	6e24 <__aeabi_atexit>
    48f2:	bd10      	pop	{r4, pc}
    48f4:	20000470 	.word	0x20000470
    48f8:	0000b278 	.word	0x0000b278
    48fc:	00004233 	.word	0x00004233
    4900:	20000000 	.word	0x20000000

00004904 <_ZN21HCIUartTransportClassD1Ev>:
{
}

HCIUartTransportClass::~HCIUartTransportClass()
{
}
    4904:	4770      	bx	lr

00004906 <_ZN21HCIUartTransportClass5beginEv>:

int HCIUartTransportClass::begin()
{
  _uart->begin(_baudrate);
    4906:	6843      	ldr	r3, [r0, #4]
{
    4908:	b510      	push	{r4, lr}
  _uart->begin(_baudrate);
    490a:	681a      	ldr	r2, [r3, #0]
    490c:	6881      	ldr	r1, [r0, #8]
    490e:	69d2      	ldr	r2, [r2, #28]
    4910:	0018      	movs	r0, r3
    4912:	4790      	blx	r2

  return 1;
}
    4914:	2001      	movs	r0, #1
    4916:	bd10      	pop	{r4, pc}

00004918 <_ZN21HCIUartTransportClass3endEv>:

void HCIUartTransportClass::end()
{
    4918:	b510      	push	{r4, lr}
  _uart->end();
    491a:	6840      	ldr	r0, [r0, #4]
    491c:	6803      	ldr	r3, [r0, #0]
    491e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    4920:	4798      	blx	r3
}
    4922:	bd10      	pop	{r4, pc}

00004924 <_ZN21HCIUartTransportClass9availableEv>:
    }
  }
}

int HCIUartTransportClass::available()
{
    4924:	b510      	push	{r4, lr}
  return _uart->available();
    4926:	6840      	ldr	r0, [r0, #4]
    4928:	6803      	ldr	r3, [r0, #0]
    492a:	691b      	ldr	r3, [r3, #16]
    492c:	4798      	blx	r3
}
    492e:	bd10      	pop	{r4, pc}

00004930 <_ZN21HCIUartTransportClass4peekEv>:

int HCIUartTransportClass::peek()
{
    4930:	b510      	push	{r4, lr}
  return _uart->peek();
    4932:	6840      	ldr	r0, [r0, #4]
    4934:	6803      	ldr	r3, [r0, #0]
    4936:	699b      	ldr	r3, [r3, #24]
    4938:	4798      	blx	r3
}
    493a:	bd10      	pop	{r4, pc}

0000493c <_ZN21HCIUartTransportClass4readEv>:

int HCIUartTransportClass::read()
{
    493c:	b510      	push	{r4, lr}
  return _uart->read();
    493e:	6840      	ldr	r0, [r0, #4]
    4940:	6803      	ldr	r3, [r0, #0]
    4942:	695b      	ldr	r3, [r3, #20]
    4944:	4798      	blx	r3
}
    4946:	bd10      	pop	{r4, pc}

00004948 <_ZN21HCIUartTransportClass5writeEPKhj>:

size_t HCIUartTransportClass::write(const uint8_t* data, size_t length)
{
    4948:	b570      	push	{r4, r5, r6, lr}
    494a:	0004      	movs	r4, r0
#ifdef ARDUINO_AVR_UNO_WIFI_REV2
  // wait while the CTS pin is low
  while (digitalRead(NINA_CTS) == HIGH);
#endif

  size_t result = _uart->write(data, length);
    494c:	6840      	ldr	r0, [r0, #4]
    494e:	6803      	ldr	r3, [r0, #0]
    4950:	685b      	ldr	r3, [r3, #4]
    4952:	4798      	blx	r3
    4954:	0005      	movs	r5, r0

  _uart->flush();
    4956:	6860      	ldr	r0, [r4, #4]
    4958:	6803      	ldr	r3, [r0, #0]
    495a:	68db      	ldr	r3, [r3, #12]
    495c:	4798      	blx	r3

  return result;
}
    495e:	0028      	movs	r0, r5
    4960:	bd70      	pop	{r4, r5, r6, pc}

00004962 <_ZN21HCIUartTransportClassD0Ev>:
HCIUartTransportClass::~HCIUartTransportClass()
    4962:	b510      	push	{r4, lr}
    4964:	0004      	movs	r4, r0
}
    4966:	f000 fa8b 	bl	4e80 <_ZdlPv>
    496a:	0020      	movs	r0, r4
    496c:	bd10      	pop	{r4, pc}

0000496e <_ZN21HCIUartTransportClass4waitEm>:
{
    496e:	b570      	push	{r4, r5, r6, lr}
    4970:	0004      	movs	r4, r0
    4972:	000e      	movs	r6, r1
  for (unsigned long start = millis(); (millis() - start) < timeout;) {
    4974:	f000 fa04 	bl	4d80 <millis>
    4978:	0005      	movs	r5, r0
    497a:	f000 fa01 	bl	4d80 <millis>
    497e:	1b40      	subs	r0, r0, r5
    4980:	42b0      	cmp	r0, r6
    4982:	d205      	bcs.n	4990 <_ZN21HCIUartTransportClass4waitEm+0x22>
    if (available()) {
    4984:	6823      	ldr	r3, [r4, #0]
    4986:	0020      	movs	r0, r4
    4988:	68db      	ldr	r3, [r3, #12]
    498a:	4798      	blx	r3
    498c:	2800      	cmp	r0, #0
    498e:	d0f4      	beq.n	497a <_ZN21HCIUartTransportClass4waitEm+0xc>
}
    4990:	bd70      	pop	{r4, r5, r6, pc}
	...

00004994 <_GLOBAL__sub_I__ZN21HCIUartTransportClassC2ER14HardwareSerialm>:
  _baudrate(baudrate)
    4994:	4b06      	ldr	r3, [pc, #24]	; (49b0 <_GLOBAL__sub_I__ZN21HCIUartTransportClassC2ER14HardwareSerialm+0x1c>)
    4996:	4807      	ldr	r0, [pc, #28]	; (49b4 <_GLOBAL__sub_I__ZN21HCIUartTransportClassC2ER14HardwareSerialm+0x20>)
#ifdef ARDUINO_AVR_UNO_WIFI_REV2
HCIUartTransportClass HCIUartTransport(SerialHCI, 119600);
#else
HCIUartTransportClass HCIUartTransport(SerialHCI, 912600);
#endif
HCITransportInterface& HCITransport = HCIUartTransport;
    4998:	b510      	push	{r4, lr}
  _baudrate(baudrate)
    499a:	3308      	adds	r3, #8
    499c:	6003      	str	r3, [r0, #0]
    499e:	4b06      	ldr	r3, [pc, #24]	; (49b8 <_GLOBAL__sub_I__ZN21HCIUartTransportClassC2ER14HardwareSerialm+0x24>)
HCIUartTransportClass HCIUartTransport(SerialHCI, 912600);
    49a0:	4a06      	ldr	r2, [pc, #24]	; (49bc <_GLOBAL__sub_I__ZN21HCIUartTransportClassC2ER14HardwareSerialm+0x28>)
  _baudrate(baudrate)
    49a2:	6043      	str	r3, [r0, #4]
    49a4:	4b06      	ldr	r3, [pc, #24]	; (49c0 <_GLOBAL__sub_I__ZN21HCIUartTransportClassC2ER14HardwareSerialm+0x2c>)
HCIUartTransportClass HCIUartTransport(SerialHCI, 912600);
    49a6:	4907      	ldr	r1, [pc, #28]	; (49c4 <_GLOBAL__sub_I__ZN21HCIUartTransportClassC2ER14HardwareSerialm+0x30>)
  _baudrate(baudrate)
    49a8:	6083      	str	r3, [r0, #8]
HCIUartTransportClass HCIUartTransport(SerialHCI, 912600);
    49aa:	f002 fa3b 	bl	6e24 <__aeabi_atexit>
HCITransportInterface& HCITransport = HCIUartTransport;
    49ae:	bd10      	pop	{r4, pc}
    49b0:	0000b28c 	.word	0x0000b28c
    49b4:	20000590 	.word	0x20000590
    49b8:	20000dd8 	.word	0x20000dd8
    49bc:	20000000 	.word	0x20000000
    49c0:	000decd8 	.word	0x000decd8
    49c4:	00004905 	.word	0x00004905

000049c8 <_ZN19L2CAPSignalingClassD1Ev>:
{
}

L2CAPSignalingClass::~L2CAPSignalingClass()
{
}
    49c8:	4770      	bx	lr

000049ca <_ZN19L2CAPSignalingClassD0Ev>:
L2CAPSignalingClass::~L2CAPSignalingClass()
    49ca:	b510      	push	{r4, lr}
    49cc:	0004      	movs	r4, r0
}
    49ce:	f000 fa57 	bl	4e80 <_ZdlPv>
    49d2:	0020      	movs	r0, r4
    49d4:	bd10      	pop	{r4, pc}
	...

000049d8 <_ZN19L2CAPSignalingClass13addConnectionEthhPhttth>:

void L2CAPSignalingClass::addConnection(uint16_t handle, uint8_t role, uint8_t /*peerBdaddrType*/,
                                        uint8_t /*peerBdaddr*/[6], uint16_t interval,
                                        uint16_t /*latency*/, uint16_t /*supervisionTimeout*/,
                                        uint8_t /*masterClockAccuracy*/)
{
    49d8:	b5f0      	push	{r4, r5, r6, r7, lr}
    49da:	b087      	sub	sp, #28
    49dc:	ab0d      	add	r3, sp, #52	; 0x34
    49de:	000f      	movs	r7, r1
    49e0:	881b      	ldrh	r3, [r3, #0]
  if (role != 1) {
    49e2:	2a01      	cmp	r2, #1
    49e4:	d120      	bne.n	4a28 <_ZN19L2CAPSignalingClass13addConnectionEthhPhttth+0x50>
    // ignore
    return;
  }

  if (!_minInterval || !_maxInterval) {
    49e6:	8886      	ldrh	r6, [r0, #4]
    49e8:	2e00      	cmp	r6, #0
    49ea:	d01d      	beq.n	4a28 <_ZN19L2CAPSignalingClass13addConnectionEthhPhttth+0x50>
    49ec:	88c5      	ldrh	r5, [r0, #6]
    49ee:	2d00      	cmp	r5, #0
    49f0:	d01a      	beq.n	4a28 <_ZN19L2CAPSignalingClass13addConnectionEthhPhttth+0x50>
    // no connection intervale to request
    return;
  }

  if (interval >= _minInterval && interval <= _maxInterval) {
    49f2:	42b3      	cmp	r3, r6
    49f4:	db01      	blt.n	49fa <_ZN19L2CAPSignalingClass13addConnectionEthhPhttth+0x22>
    49f6:	42ab      	cmp	r3, r5
    49f8:	dd16      	ble.n	4a28 <_ZN19L2CAPSignalingClass13addConnectionEthhPhttth+0x50>
    uint16_t minInterval;
    uint16_t maxInterval;
    uint16_t latency;
    uint16_t supervisionTimeout;
  } request = { CONNECTION_PARAMETER_UPDATE_REQUEST, 0x01, 8,
                _minInterval, _maxInterval, 0x0000, 0x00c8 };
    49fa:	ac03      	add	r4, sp, #12
    49fc:	220c      	movs	r2, #12
    49fe:	2100      	movs	r1, #0
    4a00:	0020      	movs	r0, r4
    4a02:	f004 f9df 	bl	8dc4 <memset>
    4a06:	2312      	movs	r3, #18
    4a08:	7023      	strb	r3, [r4, #0]
    4a0a:	3b11      	subs	r3, #17
    4a0c:	7063      	strb	r3, [r4, #1]
    4a0e:	3307      	adds	r3, #7
    4a10:	8063      	strh	r3, [r4, #2]
    4a12:	33c0      	adds	r3, #192	; 0xc0
    4a14:	8163      	strh	r3, [r4, #10]
    4a16:	80a6      	strh	r6, [r4, #4]
    4a18:	80e5      	strh	r5, [r4, #6]

  HCI.sendAclPkt(handle, SIGNALING_CID, sizeof(request), &request);
    4a1a:	3bbc      	subs	r3, #188	; 0xbc
    4a1c:	9400      	str	r4, [sp, #0]
    4a1e:	2205      	movs	r2, #5
    4a20:	0039      	movs	r1, r7
    4a22:	4802      	ldr	r0, [pc, #8]	; (4a2c <_ZN19L2CAPSignalingClass13addConnectionEthhPhttth+0x54>)
    4a24:	f7ff fc54 	bl	42d0 <_ZN8HCIClass10sendAclPktEthhPv>
}
    4a28:	b007      	add	sp, #28
    4a2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4a2c:	20000470 	.word	0x20000470

00004a30 <_ZN19L2CAPSignalingClass16removeConnectionEht>:
  }
}

void L2CAPSignalingClass::removeConnection(uint8_t /*handle*/, uint16_t /*reason*/)
{
}
    4a30:	4770      	bx	lr
	...

00004a34 <_ZN19L2CAPSignalingClass32connectionParameterUpdateRequestEthhPh>:
  _minInterval = minInterval;
  _maxInterval = maxInterval;
}

void L2CAPSignalingClass::connectionParameterUpdateRequest(uint16_t handle, uint8_t identifier, uint8_t dlen, uint8_t data[])
{
    4a34:	b5f0      	push	{r4, r5, r6, r7, lr}
    4a36:	b087      	sub	sp, #28
    4a38:	0007      	movs	r7, r0
    4a3a:	000e      	movs	r6, r1
    4a3c:	9203      	str	r2, [sp, #12]
    4a3e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    uint16_t maxInterval;
    uint16_t latency;
    uint16_t supervisionTimeout;
  } *request = (L2CAPConnectionParameterUpdateRequest*)data;

  if (dlen < sizeof(L2CAPConnectionParameterUpdateRequest)) {
    4a40:	2b07      	cmp	r3, #7
    4a42:	d941      	bls.n	4ac8 <_ZN19L2CAPSignalingClass32connectionParameterUpdateRequestEthhPh+0x94>
  struct __attribute__ ((packed)) L2CAPConnectionParameterUpdateResponse {
    uint8_t code;
    uint8_t identifier;
    uint16_t length;
    uint16_t value;
  } response = { CONNECTION_PARAMETER_UPDATE_RESPONSE, identifier, 2, 0x0000 };
    4a44:	ad04      	add	r5, sp, #16
    4a46:	2100      	movs	r1, #0
    4a48:	2206      	movs	r2, #6
    4a4a:	0028      	movs	r0, r5
    4a4c:	f004 f9ba 	bl	8dc4 <memset>
    4a50:	2313      	movs	r3, #19
    4a52:	702b      	strb	r3, [r5, #0]
    4a54:	3b11      	subs	r3, #17
    4a56:	806b      	strh	r3, [r5, #2]
    4a58:	466b      	mov	r3, sp
    4a5a:	7b1b      	ldrb	r3, [r3, #12]
    4a5c:	706b      	strb	r3, [r5, #1]

  if (_minInterval && _maxInterval) {
    4a5e:	88b9      	ldrh	r1, [r7, #4]
    4a60:	2900      	cmp	r1, #0
    4a62:	d010      	beq.n	4a86 <_ZN19L2CAPSignalingClass32connectionParameterUpdateRequestEthhPh+0x52>
    4a64:	88fa      	ldrh	r2, [r7, #6]
    4a66:	2a00      	cmp	r2, #0
    4a68:	d00d      	beq.n	4a86 <_ZN19L2CAPSignalingClass32connectionParameterUpdateRequestEthhPh+0x52>
    if (request->minInterval < _minInterval || request->maxInterval > _maxInterval) {
    4a6a:	7863      	ldrb	r3, [r4, #1]
    4a6c:	7820      	ldrb	r0, [r4, #0]
    4a6e:	021b      	lsls	r3, r3, #8
    4a70:	4303      	orrs	r3, r0
    4a72:	428b      	cmp	r3, r1
    4a74:	db05      	blt.n	4a82 <_ZN19L2CAPSignalingClass32connectionParameterUpdateRequestEthhPh+0x4e>
    4a76:	78e3      	ldrb	r3, [r4, #3]
    4a78:	78a1      	ldrb	r1, [r4, #2]
    4a7a:	021b      	lsls	r3, r3, #8
    4a7c:	430b      	orrs	r3, r1
    4a7e:	4293      	cmp	r3, r2
    4a80:	dd01      	ble.n	4a86 <_ZN19L2CAPSignalingClass32connectionParameterUpdateRequestEthhPh+0x52>
      response.value = 0x0001; // reject
    4a82:	2301      	movs	r3, #1
    4a84:	80ab      	strh	r3, [r5, #4]
    }
  }

  HCI.sendAclPkt(handle, SIGNALING_CID, sizeof(response), &response);
    4a86:	4f11      	ldr	r7, [pc, #68]	; (4acc <_ZN19L2CAPSignalingClass32connectionParameterUpdateRequestEthhPh+0x98>)
    4a88:	2306      	movs	r3, #6
    4a8a:	9500      	str	r5, [sp, #0]
    4a8c:	2205      	movs	r2, #5
    4a8e:	0031      	movs	r1, r6
    4a90:	0038      	movs	r0, r7
    4a92:	f7ff fc1d 	bl	42d0 <_ZN8HCIClass10sendAclPktEthhPv>

  if (response.value == 0x0000) {
    4a96:	88ab      	ldrh	r3, [r5, #4]
    4a98:	2b00      	cmp	r3, #0
    4a9a:	d115      	bne.n	4ac8 <_ZN19L2CAPSignalingClass32connectionParameterUpdateRequestEthhPh+0x94>
    HCI.leConnUpdate(handle, request->minInterval, request->maxInterval, request->latency, request->supervisionTimeout);
    4a9c:	78e3      	ldrb	r3, [r4, #3]
    4a9e:	78a2      	ldrb	r2, [r4, #2]
    4aa0:	021b      	lsls	r3, r3, #8
    4aa2:	4313      	orrs	r3, r2
    4aa4:	7862      	ldrb	r2, [r4, #1]
    4aa6:	7821      	ldrb	r1, [r4, #0]
    4aa8:	0212      	lsls	r2, r2, #8
    4aaa:	430a      	orrs	r2, r1
    4aac:	79e1      	ldrb	r1, [r4, #7]
    4aae:	79a0      	ldrb	r0, [r4, #6]
    4ab0:	0209      	lsls	r1, r1, #8
    4ab2:	4301      	orrs	r1, r0
    4ab4:	9101      	str	r1, [sp, #4]
    4ab6:	7961      	ldrb	r1, [r4, #5]
    4ab8:	7920      	ldrb	r0, [r4, #4]
    4aba:	0209      	lsls	r1, r1, #8
    4abc:	4301      	orrs	r1, r0
    4abe:	9100      	str	r1, [sp, #0]
    4ac0:	0038      	movs	r0, r7
    4ac2:	0031      	movs	r1, r6
    4ac4:	f7ff fed8 	bl	4878 <_ZN8HCIClass12leConnUpdateEttttt>
  }
}
    4ac8:	b007      	add	sp, #28
    4aca:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4acc:	20000470 	.word	0x20000470

00004ad0 <_ZN19L2CAPSignalingClass10handleDataEthPh>:
{
    4ad0:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if (dlen < sizeof(L2CAPSignalingHdr)) {
    4ad2:	2a03      	cmp	r2, #3
    4ad4:	d910      	bls.n	4af8 <_ZN19L2CAPSignalingClass10handleDataEthPh+0x28>
  if (dlen != (sizeof(L2CAPSignalingHdr) + l2capSignalingHdr->length)) {
    4ad6:	78dc      	ldrb	r4, [r3, #3]
    4ad8:	789d      	ldrb	r5, [r3, #2]
    4ada:	0224      	lsls	r4, r4, #8
    4adc:	432c      	orrs	r4, r5
    4ade:	1d25      	adds	r5, r4, #4
    4ae0:	42aa      	cmp	r2, r5
    4ae2:	d109      	bne.n	4af8 <_ZN19L2CAPSignalingClass10handleDataEthPh+0x28>
  if (code == CONNECTION_PARAMETER_UPDATE_REQUEST) {
    4ae4:	781a      	ldrb	r2, [r3, #0]
    4ae6:	2a12      	cmp	r2, #18
    4ae8:	d106      	bne.n	4af8 <_ZN19L2CAPSignalingClass10handleDataEthPh+0x28>
    connectionParameterUpdateRequest(connectionHandle, identifier, length, data);
    4aea:	785a      	ldrb	r2, [r3, #1]
    4aec:	b2e4      	uxtb	r4, r4
  data = &data[sizeof(L2CAPSignalingHdr)];
    4aee:	3304      	adds	r3, #4
    connectionParameterUpdateRequest(connectionHandle, identifier, length, data);
    4af0:	9300      	str	r3, [sp, #0]
    4af2:	0023      	movs	r3, r4
    4af4:	f7ff ff9e 	bl	4a34 <_ZN19L2CAPSignalingClass32connectionParameterUpdateRequestEthhPh>
}
    4af8:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
	...

00004afc <_GLOBAL__sub_I__ZN19L2CAPSignalingClassC2Ev>:
  _maxInterval(0)
    4afc:	4b06      	ldr	r3, [pc, #24]	; (4b18 <_GLOBAL__sub_I__ZN19L2CAPSignalingClassC2Ev+0x1c>)
    4afe:	4807      	ldr	r0, [pc, #28]	; (4b1c <_GLOBAL__sub_I__ZN19L2CAPSignalingClassC2Ev+0x20>)
    4b00:	3308      	adds	r3, #8

void L2CAPSignalingClass::connectionParameterUpdateResponse(uint16_t /*handle*/, uint8_t /*identifier*/, uint8_t /*dlen*/, uint8_t /*data*/[])
{
}

L2CAPSignalingClass L2CAPSignaling;
    4b02:	b510      	push	{r4, lr}
  _maxInterval(0)
    4b04:	6003      	str	r3, [r0, #0]
    4b06:	2300      	movs	r3, #0
L2CAPSignalingClass L2CAPSignaling;
    4b08:	4a05      	ldr	r2, [pc, #20]	; (4b20 <_GLOBAL__sub_I__ZN19L2CAPSignalingClassC2Ev+0x24>)
    4b0a:	4906      	ldr	r1, [pc, #24]	; (4b24 <_GLOBAL__sub_I__ZN19L2CAPSignalingClassC2Ev+0x28>)
  _maxInterval(0)
    4b0c:	8083      	strh	r3, [r0, #4]
    4b0e:	80c3      	strh	r3, [r0, #6]
L2CAPSignalingClass L2CAPSignaling;
    4b10:	f002 f988 	bl	6e24 <__aeabi_atexit>
    4b14:	bd10      	pop	{r4, pc}
    4b16:	46c0      	nop			; (mov r8, r8)
    4b18:	0000b2b8 	.word	0x0000b2b8
    4b1c:	2000059c 	.word	0x2000059c
    4b20:	20000000 	.word	0x20000000
    4b24:	000049c9 	.word	0x000049c9

00004b28 <_ZN22BLETypedCharacteristicIhE10writeValueEh>:
template<typename T> int BLETypedCharacteristic<T>::writeValue(T value)
    4b28:	b507      	push	{r0, r1, r2, lr}
    4b2a:	466b      	mov	r3, sp
    4b2c:	71d9      	strb	r1, [r3, #7]
    4b2e:	3307      	adds	r3, #7
  return BLECharacteristic::writeValue((uint8_t*)&value, sizeof(T));
    4b30:	2201      	movs	r2, #1
    4b32:	0019      	movs	r1, r3
    4b34:	f7fd fb77 	bl	2226 <_ZN17BLECharacteristic10writeValueEPKhi>
}
    4b38:	bd0e      	pop	{r1, r2, r3, pc}
	...

00004b3c <setup>:
BLEByteCharacteristic ledCharacteristic("19B10011-E8F2-537E-4F6C-D104768A1214", BLERead | BLEWrite);
// create button characteristic and allow remote device to get notifications
BLEByteCharacteristic buttonCharacteristic("19B10012-E8F2-537E-4F6C-D104768A1214", BLERead | BLENotify);

void setup() {
  Serial.begin(9600);
    4b3c:	2196      	movs	r1, #150	; 0x96
void setup() {
    4b3e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  Serial.begin(9600);
    4b40:	4d21      	ldr	r5, [pc, #132]	; (4bc8 <setup+0x8c>)
    4b42:	0189      	lsls	r1, r1, #6
    4b44:	0028      	movs	r0, r5
    4b46:	f000 fba9 	bl	529c <_ZN7Serial_5beginEm>
  while (!Serial);
    4b4a:	0028      	movs	r0, r5
    4b4c:	f000 fba8 	bl	52a0 <_ZN7Serial_cvbEv>
    4b50:	2800      	cmp	r0, #0
    4b52:	d0fa      	beq.n	4b4a <setup+0xe>

  pinMode(ledPin, OUTPUT); // use the LED as an output
    4b54:	2101      	movs	r1, #1
    4b56:	2006      	movs	r0, #6
    4b58:	f001 fbe4 	bl	6324 <pinMode>
  pinMode(buttonPin, INPUT); // use button pin as an input
    4b5c:	2004      	movs	r0, #4
    4b5e:	2100      	movs	r1, #0
    4b60:	f001 fbe0 	bl	6324 <pinMode>

  // begin initialization
  if (!BLE.begin()) {
    4b64:	4c19      	ldr	r4, [pc, #100]	; (4bcc <setup+0x90>)
    4b66:	0020      	movs	r0, r4
    4b68:	f7fd ff7a 	bl	2a60 <_ZN14BLELocalDevice5beginEv>
    4b6c:	2800      	cmp	r0, #0
    4b6e:	d104      	bne.n	4b7a <setup+0x3e>
    Serial.println("starting BLE failed!");
    4b70:	4917      	ldr	r1, [pc, #92]	; (4bd0 <setup+0x94>)
    4b72:	0028      	movs	r0, r5
    4b74:	f000 f9b6 	bl	4ee4 <_ZN5Print7printlnEPKc>
    4b78:	e7fe      	b.n	4b78 <setup+0x3c>

    while (1);
  }

  // set the local name peripheral advertises
  BLE.setLocalName("ButtonLED");
    4b7a:	0020      	movs	r0, r4
    4b7c:	4915      	ldr	r1, [pc, #84]	; (4bd4 <setup+0x98>)
    4b7e:	f7fd ffd9 	bl	2b34 <_ZN14BLELocalDevice12setLocalNameEPKc>
  // set the UUID for the service this peripheral advertises:
  BLE.setAdvertisedService(ledService);
    4b82:	4e15      	ldr	r6, [pc, #84]	; (4bd8 <setup+0x9c>)
    4b84:	0020      	movs	r0, r4
    4b86:	0031      	movs	r1, r6
    4b88:	f7fd ffc8 	bl	2b1c <_ZN14BLELocalDevice20setAdvertisedServiceERK10BLEService>

  // add the characteristics to the service
  ledService.addCharacteristic(ledCharacteristic);
    4b8c:	4f13      	ldr	r7, [pc, #76]	; (4bdc <setup+0xa0>)
    4b8e:	0030      	movs	r0, r6
    4b90:	0039      	movs	r1, r7
    4b92:	f7fd fc65 	bl	2460 <_ZN10BLEService17addCharacteristicER17BLECharacteristic>
  ledService.addCharacteristic(buttonCharacteristic);
    4b96:	0030      	movs	r0, r6
    4b98:	4911      	ldr	r1, [pc, #68]	; (4be0 <setup+0xa4>)
    4b9a:	f7fd fc61 	bl	2460 <_ZN10BLEService17addCharacteristicER17BLECharacteristic>

  // add the service
  BLE.addService(ledService);
    4b9e:	0031      	movs	r1, r6
    4ba0:	0020      	movs	r0, r4
    4ba2:	f7fd ffcf 	bl	2b44 <_ZN14BLELocalDevice10addServiceER10BLEService>

  ledCharacteristic.writeValue(0);
    4ba6:	0038      	movs	r0, r7
    4ba8:	2100      	movs	r1, #0
    4baa:	f7ff ffbd 	bl	4b28 <_ZN22BLETypedCharacteristicIhE10writeValueEh>
  buttonCharacteristic.writeValue(0);
    4bae:	2100      	movs	r1, #0
    4bb0:	480b      	ldr	r0, [pc, #44]	; (4be0 <setup+0xa4>)
    4bb2:	f7ff ffb9 	bl	4b28 <_ZN22BLETypedCharacteristicIhE10writeValueEh>

  // start advertising
  BLE.advertise();
    4bb6:	0020      	movs	r0, r4
    4bb8:	f7fd ffcc 	bl	2b54 <_ZN14BLELocalDevice9advertiseEv>

  Serial.println("Bluetooth device active, waiting for connections...");
    4bbc:	0028      	movs	r0, r5
    4bbe:	4909      	ldr	r1, [pc, #36]	; (4be4 <setup+0xa8>)
    4bc0:	f000 f990 	bl	4ee4 <_ZN5Print7printlnEPKc>
}
    4bc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4bc6:	46c0      	nop			; (mov r8, r8)
    4bc8:	200005c4 	.word	0x200005c4
    4bcc:	200002ac 	.word	0x200002ac
    4bd0:	0000b346 	.word	0x0000b346
    4bd4:	0000b35b 	.word	0x0000b35b
    4bd8:	200005b4 	.word	0x200005b4
    4bdc:	200005ac 	.word	0x200005ac
    4be0:	200005a4 	.word	0x200005a4
    4be4:	0000b365 	.word	0x0000b365

00004be8 <_ZN22BLETypedCharacteristicIhE5valueEv>:

template<typename T> T BLETypedCharacteristic<T>::value()
    4be8:	b537      	push	{r0, r1, r2, r4, r5, lr}
    4bea:	0004      	movs	r4, r0
{
  T value;

  memcpy(&value, (unsigned char*)BLECharacteristic::value(), BLECharacteristic::valueSize());
    4bec:	f7fd fb14 	bl	2218 <_ZNK17BLECharacteristic5valueEv>
    4bf0:	0005      	movs	r5, r0
    4bf2:	0020      	movs	r0, r4
    4bf4:	f7fd fb09 	bl	220a <_ZNK17BLECharacteristic9valueSizeEv>
    4bf8:	466b      	mov	r3, sp
    4bfa:	1ddc      	adds	r4, r3, #7
    4bfc:	0002      	movs	r2, r0
    4bfe:	0029      	movs	r1, r5
    4c00:	0020      	movs	r0, r4
    4c02:	f004 f8c4 	bl	8d8e <memcpy>

  return value;
    4c06:	7820      	ldrb	r0, [r4, #0]
}
    4c08:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
	...

00004c0c <_GLOBAL__sub_I_ledService>:
    } else {
      Serial.println("LED off");
      digitalWrite(ledPin, LOW);
    }
  }
}
    4c0c:	b570      	push	{r4, r5, r6, lr}
BLEService ledService("19B10010-E8F2-537E-4F6C-D104768A1214"); // create service
    4c0e:	4d11      	ldr	r5, [pc, #68]	; (4c54 <_GLOBAL__sub_I_ledService+0x48>)
    4c10:	4911      	ldr	r1, [pc, #68]	; (4c58 <_GLOBAL__sub_I_ledService+0x4c>)
    4c12:	0028      	movs	r0, r5
    4c14:	f7fd fc08 	bl	2428 <_ZN10BLEServiceC1EPKc>
    4c18:	4c10      	ldr	r4, [pc, #64]	; (4c5c <_GLOBAL__sub_I_ledService+0x50>)
    4c1a:	4911      	ldr	r1, [pc, #68]	; (4c60 <_GLOBAL__sub_I_ledService+0x54>)
    4c1c:	0022      	movs	r2, r4
    4c1e:	0028      	movs	r0, r5
    4c20:	f002 f900 	bl	6e24 <__aeabi_atexit>
BLEByteCharacteristic ledCharacteristic("19B10011-E8F2-537E-4F6C-D104768A1214", BLERead | BLEWrite);
    4c24:	4d0f      	ldr	r5, [pc, #60]	; (4c64 <_GLOBAL__sub_I_ledService+0x58>)
    4c26:	220a      	movs	r2, #10
    4c28:	490f      	ldr	r1, [pc, #60]	; (4c68 <_GLOBAL__sub_I_ledService+0x5c>)
    4c2a:	0028      	movs	r0, r5
    4c2c:	f7fd fc62 	bl	24f4 <_ZN21BLEByteCharacteristicC1EPKch>
    4c30:	4e0e      	ldr	r6, [pc, #56]	; (4c6c <_GLOBAL__sub_I_ledService+0x60>)
    4c32:	0022      	movs	r2, r4
    4c34:	0031      	movs	r1, r6
    4c36:	0028      	movs	r0, r5
    4c38:	f002 f8f4 	bl	6e24 <__aeabi_atexit>
BLEByteCharacteristic buttonCharacteristic("19B10012-E8F2-537E-4F6C-D104768A1214", BLERead | BLENotify);
    4c3c:	4d0c      	ldr	r5, [pc, #48]	; (4c70 <_GLOBAL__sub_I_ledService+0x64>)
    4c3e:	2212      	movs	r2, #18
    4c40:	0028      	movs	r0, r5
    4c42:	490c      	ldr	r1, [pc, #48]	; (4c74 <_GLOBAL__sub_I_ledService+0x68>)
    4c44:	f7fd fc56 	bl	24f4 <_ZN21BLEByteCharacteristicC1EPKch>
    4c48:	0031      	movs	r1, r6
    4c4a:	0028      	movs	r0, r5
    4c4c:	0022      	movs	r2, r4
    4c4e:	f002 f8e9 	bl	6e24 <__aeabi_atexit>
}
    4c52:	bd70      	pop	{r4, r5, r6, pc}
    4c54:	200005b4 	.word	0x200005b4
    4c58:	0000b2c8 	.word	0x0000b2c8
    4c5c:	20000000 	.word	0x20000000
    4c60:	000023c9 	.word	0x000023c9
    4c64:	200005ac 	.word	0x200005ac
    4c68:	0000b2ed 	.word	0x0000b2ed
    4c6c:	0000249d 	.word	0x0000249d
    4c70:	200005a4 	.word	0x200005a4
    4c74:	0000b312 	.word	0x0000b312

00004c78 <loop>:
void loop() {
    4c78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  BLE.poll();
    4c7a:	4819      	ldr	r0, [pc, #100]	; (4ce0 <loop+0x68>)
    4c7c:	f7fd faea 	bl	2254 <_ZN9BLEDevice4pollEv>
  char buttonValue = digitalRead(buttonPin);
    4c80:	2004      	movs	r0, #4
    4c82:	f001 fbc7 	bl	6414 <digitalRead>
  boolean buttonChanged = (buttonCharacteristic.value() != buttonValue);
    4c86:	4f17      	ldr	r7, [pc, #92]	; (4ce4 <loop+0x6c>)
  char buttonValue = digitalRead(buttonPin);
    4c88:	b2c4      	uxtb	r4, r0
  boolean buttonChanged = (buttonCharacteristic.value() != buttonValue);
    4c8a:	0038      	movs	r0, r7
    4c8c:	f7ff ffac 	bl	4be8 <_ZN22BLETypedCharacteristicIhE5valueEv>
    4c90:	4d15      	ldr	r5, [pc, #84]	; (4ce8 <loop+0x70>)
    4c92:	0006      	movs	r6, r0
  if (buttonChanged) {
    4c94:	4284      	cmp	r4, r0
    4c96:	d007      	beq.n	4ca8 <loop+0x30>
    ledCharacteristic.writeValue(buttonValue);
    4c98:	0021      	movs	r1, r4
    4c9a:	0028      	movs	r0, r5
    4c9c:	f7ff ff44 	bl	4b28 <_ZN22BLETypedCharacteristicIhE10writeValueEh>
    buttonCharacteristic.writeValue(buttonValue);
    4ca0:	0021      	movs	r1, r4
    4ca2:	0038      	movs	r0, r7
    4ca4:	f7ff ff40 	bl	4b28 <_ZN22BLETypedCharacteristicIhE10writeValueEh>
  if (ledCharacteristic.written() || buttonChanged) {
    4ca8:	0028      	movs	r0, r5
    4caa:	f7fd fac3 	bl	2234 <_ZN17BLECharacteristic7writtenEv>
    4cae:	2800      	cmp	r0, #0
    4cb0:	d107      	bne.n	4cc2 <loop+0x4a>
    4cb2:	42b4      	cmp	r4, r6
    4cb4:	d105      	bne.n	4cc2 <loop+0x4a>
}
    4cb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      Serial.println("LED off");
    4cb8:	490c      	ldr	r1, [pc, #48]	; (4cec <loop+0x74>)
    4cba:	f000 f913 	bl	4ee4 <_ZN5Print7printlnEPKc>
      digitalWrite(ledPin, LOW);
    4cbe:	0021      	movs	r1, r4
    4cc0:	e009      	b.n	4cd6 <loop+0x5e>
    if (ledCharacteristic.value()) {
    4cc2:	0028      	movs	r0, r5
    4cc4:	f7ff ff90 	bl	4be8 <_ZN22BLETypedCharacteristicIhE5valueEv>
    4cc8:	1e04      	subs	r4, r0, #0
    4cca:	4809      	ldr	r0, [pc, #36]	; (4cf0 <loop+0x78>)
    4ccc:	d0f4      	beq.n	4cb8 <loop+0x40>
      Serial.println("LED on");
    4cce:	4909      	ldr	r1, [pc, #36]	; (4cf4 <loop+0x7c>)
    4cd0:	f000 f908 	bl	4ee4 <_ZN5Print7printlnEPKc>
      digitalWrite(ledPin, HIGH);
    4cd4:	2101      	movs	r1, #1
      digitalWrite(ledPin, LOW);
    4cd6:	2006      	movs	r0, #6
    4cd8:	f001 fb70 	bl	63bc <digitalWrite>
}
    4cdc:	e7eb      	b.n	4cb6 <loop+0x3e>
    4cde:	46c0      	nop			; (mov r8, r8)
    4ce0:	200002ac 	.word	0x200002ac
    4ce4:	200005a4 	.word	0x200005a4
    4ce8:	200005ac 	.word	0x200005ac
    4cec:	0000b33e 	.word	0x0000b33e
    4cf0:	200005c4 	.word	0x200005c4
    4cf4:	0000b337 	.word	0x0000b337

00004cf8 <Dummy_Handler>:

/* Default empty handler */
void Dummy_Handler(void)
{
#if defined DEBUG
  __BKPT(3);
    4cf8:	be03      	bkpt	0x0003
    4cfa:	e7fe      	b.n	4cfa <Dummy_Handler+0x2>

00004cfc <USB_Handler>:

static void (*usb_isr)(void) = NULL;

void USB_Handler(void)
{
  if (usb_isr)
    4cfc:	4b03      	ldr	r3, [pc, #12]	; (4d0c <USB_Handler+0x10>)
{
    4cfe:	b510      	push	{r4, lr}
  if (usb_isr)
    4d00:	681b      	ldr	r3, [r3, #0]
    4d02:	2b00      	cmp	r3, #0
    4d04:	d000      	beq.n	4d08 <USB_Handler+0xc>
    usb_isr();
    4d06:	4798      	blx	r3
}
    4d08:	bd10      	pop	{r4, pc}
    4d0a:	46c0      	nop			; (mov r8, r8)
    4d0c:	200005bc 	.word	0x200005bc

00004d10 <Reset_Handler>:
{
    4d10:	b570      	push	{r4, r5, r6, lr}
  if ((&__data_start__ != &__data_end__) && (pSrc != pDest)) {
    4d12:	490f      	ldr	r1, [pc, #60]	; (4d50 <Reset_Handler+0x40>)
    4d14:	4c0f      	ldr	r4, [pc, #60]	; (4d54 <Reset_Handler+0x44>)
    4d16:	42a1      	cmp	r1, r4
    4d18:	d104      	bne.n	4d24 <Reset_Handler+0x14>
  SystemInit();
    4d1a:	f000 f97d 	bl	5018 <SystemInit>
  main();
    4d1e:	f000 f88b 	bl	4e38 <main>
    4d22:	e7fe      	b.n	4d22 <Reset_Handler+0x12>
  if ((&__data_start__ != &__data_end__) && (pSrc != pDest)) {
    4d24:	4d0c      	ldr	r5, [pc, #48]	; (4d58 <Reset_Handler+0x48>)
    4d26:	2300      	movs	r3, #0
    4d28:	428d      	cmp	r5, r1
    4d2a:	d0f6      	beq.n	4d1a <Reset_Handler+0xa>
    4d2c:	18ca      	adds	r2, r1, r3
    4d2e:	18e8      	adds	r0, r5, r3
    for (; pDest < &__data_end__; pDest++, pSrc++)
    4d30:	42a2      	cmp	r2, r4
    4d32:	d305      	bcc.n	4d40 <Reset_Handler+0x30>
  if ((&__data_start__ != &__data_end__) && (pSrc != pDest)) {
    4d34:	4290      	cmp	r0, r2
    4d36:	d0f0      	beq.n	4d1a <Reset_Handler+0xa>
    4d38:	4b08      	ldr	r3, [pc, #32]	; (4d5c <Reset_Handler+0x4c>)
    for (pDest = &__bss_start__; pDest < &__bss_end__; pDest++)
    4d3a:	4909      	ldr	r1, [pc, #36]	; (4d60 <Reset_Handler+0x50>)
      *pDest = 0;
    4d3c:	2200      	movs	r2, #0
    4d3e:	e004      	b.n	4d4a <Reset_Handler+0x3a>
      *pDest = *pSrc;
    4d40:	6800      	ldr	r0, [r0, #0]
    4d42:	3304      	adds	r3, #4
    4d44:	6010      	str	r0, [r2, #0]
    4d46:	e7f1      	b.n	4d2c <Reset_Handler+0x1c>
      *pDest = 0;
    4d48:	c304      	stmia	r3!, {r2}
    for (pDest = &__bss_start__; pDest < &__bss_end__; pDest++)
    4d4a:	428b      	cmp	r3, r1
    4d4c:	d3fc      	bcc.n	4d48 <Reset_Handler+0x38>
    4d4e:	e7e4      	b.n	4d1a <Reset_Handler+0xa>
    4d50:	20000000 	.word	0x20000000
    4d54:	20000290 	.word	0x20000290
    4d58:	0000ba84 	.word	0x0000ba84
    4d5c:	20000290 	.word	0x20000290
    4d60:	20001048 	.word	0x20001048

00004d64 <SysTick_Handler>:
{
    4d64:	b510      	push	{r4, lr}
  if (sysTickHook())
    4d66:	f000 f864 	bl	4e32 <sysTickHook>
    4d6a:	2800      	cmp	r0, #0
    4d6c:	d101      	bne.n	4d72 <SysTick_Handler+0xe>
  SysTick_DefaultHandler();
    4d6e:	f000 f855 	bl	4e1c <SysTick_DefaultHandler>
}
    4d72:	bd10      	pop	{r4, pc}

00004d74 <USB_SetHandler>:

void USB_SetHandler(void (*new_usb_isr)(void))
{
  usb_isr = new_usb_isr;
    4d74:	4b01      	ldr	r3, [pc, #4]	; (4d7c <USB_SetHandler+0x8>)
    4d76:	6018      	str	r0, [r3, #0]
}
    4d78:	4770      	bx	lr
    4d7a:	46c0      	nop			; (mov r8, r8)
    4d7c:	200005bc 	.word	0x200005bc

00004d80 <millis>:
static volatile uint32_t _ulTickCount=0 ;

unsigned long millis( void )
{
// todo: ensure no interrupts
  return _ulTickCount ;
    4d80:	4b01      	ldr	r3, [pc, #4]	; (4d88 <millis+0x8>)
    4d82:	6818      	ldr	r0, [r3, #0]
}
    4d84:	4770      	bx	lr
    4d86:	46c0      	nop			; (mov r8, r8)
    4d88:	200005c0 	.word	0x200005c0

00004d8c <micros>:
// Interrupt-compatible version of micros
// Theory: repeatedly take readings of SysTick counter, millis counter and SysTick interrupt pending flag.
// When it appears that millis counter and pending is stable and SysTick hasn't rolled over, use these
// values to calculate micros. If there is a pending SysTick, add one to the millis counter in the calculation.
unsigned long micros( void )
{
    4d8c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t pend, pend2;
  uint32_t count, count2;

  ticks2  = SysTick->VAL;
  pend2   = !!(SCB->ICSR & SCB_ICSR_PENDSTSET_Msk)  ;
  count2  = _ulTickCount ;
    4d8e:	4813      	ldr	r0, [pc, #76]	; (4ddc <micros+0x50>)
  pend2   = !!(SCB->ICSR & SCB_ICSR_PENDSTSET_Msk)  ;
    4d90:	2201      	movs	r2, #1
  count2  = _ulTickCount ;
    4d92:	4684      	mov	ip, r0
  ticks2  = SysTick->VAL;
    4d94:	4912      	ldr	r1, [pc, #72]	; (4de0 <micros+0x54>)
  pend2   = !!(SCB->ICSR & SCB_ICSR_PENDSTSET_Msk)  ;
    4d96:	4c13      	ldr	r4, [pc, #76]	; (4de4 <micros+0x58>)
  ticks2  = SysTick->VAL;
    4d98:	688e      	ldr	r6, [r1, #8]
  pend2   = !!(SCB->ICSR & SCB_ICSR_PENDSTSET_Msk)  ;
    4d9a:	6863      	ldr	r3, [r4, #4]
  count2  = _ulTickCount ;
    4d9c:	6805      	ldr	r5, [r0, #0]
  pend2   = !!(SCB->ICSR & SCB_ICSR_PENDSTSET_Msk)  ;
    4d9e:	0e9b      	lsrs	r3, r3, #26
    4da0:	4013      	ands	r3, r2
  {
    ticks=ticks2;
    pend=pend2;
    count=count2;
    ticks2  = SysTick->VAL;
    pend2   = !!(SCB->ICSR & SCB_ICSR_PENDSTSET_Msk)  ;
    4da2:	9201      	str	r2, [sp, #4]
    ticks2  = SysTick->VAL;
    4da4:	6888      	ldr	r0, [r1, #8]
    pend2   = !!(SCB->ICSR & SCB_ICSR_PENDSTSET_Msk)  ;
    4da6:	6862      	ldr	r2, [r4, #4]
    4da8:	9f01      	ldr	r7, [sp, #4]
    4daa:	0e92      	lsrs	r2, r2, #26
    4dac:	403a      	ands	r2, r7
    count2  = _ulTickCount ;
    4dae:	4667      	mov	r7, ip
    4db0:	683f      	ldr	r7, [r7, #0]
  } while ((pend != pend2) || (count != count2) || (ticks < ticks2));
    4db2:	4293      	cmp	r3, r2
    4db4:	d10e      	bne.n	4dd4 <micros+0x48>
    4db6:	42bd      	cmp	r5, r7
    4db8:	d10c      	bne.n	4dd4 <micros+0x48>
    4dba:	4286      	cmp	r6, r0
    4dbc:	d30a      	bcc.n	4dd4 <micros+0x48>

  return ((count+pend) * 1000) + (((SysTick->LOAD  - ticks)*(1048576/(VARIANT_MCK/1000000)))>>20) ;
    4dbe:	195b      	adds	r3, r3, r5
    4dc0:	25fa      	movs	r5, #250	; 0xfa
    4dc2:	6848      	ldr	r0, [r1, #4]
    4dc4:	00ad      	lsls	r5, r5, #2
    4dc6:	1b86      	subs	r6, r0, r6
    4dc8:	4807      	ldr	r0, [pc, #28]	; (4de8 <micros+0x5c>)
    4dca:	436b      	muls	r3, r5
    4dcc:	4370      	muls	r0, r6
    4dce:	0d00      	lsrs	r0, r0, #20
    4dd0:	18c0      	adds	r0, r0, r3
  // this is an optimization to turn a runtime division into two compile-time divisions and
  // a runtime multiplication and shift, saving a few cycles
}
    4dd2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
{
    4dd4:	003d      	movs	r5, r7
    4dd6:	0013      	movs	r3, r2
    4dd8:	0006      	movs	r6, r0
    4dda:	e7e3      	b.n	4da4 <micros+0x18>
    4ddc:	200005c0 	.word	0x200005c0
    4de0:	e000e010 	.word	0xe000e010
    4de4:	e000ed00 	.word	0xe000ed00
    4de8:	00005555 	.word	0x00005555

00004dec <delay>:

void delay( unsigned long ms )
{
    4dec:	b570      	push	{r4, r5, r6, lr}
    4dee:	1e04      	subs	r4, r0, #0
  if (ms == 0)
    4df0:	d010      	beq.n	4e14 <delay+0x28>
  {
    return;
  }

  uint32_t start = micros();
    4df2:	f7ff ffcb 	bl	4d8c <micros>
    4df6:	0005      	movs	r5, r0

  while (ms > 0)
  {
    yield();
    4df8:	f000 f81a 	bl	4e30 <yield>
    while (ms > 0 && (micros() - start) >= 1000)
    4dfc:	f7ff ffc6 	bl	4d8c <micros>
    4e00:	4b05      	ldr	r3, [pc, #20]	; (4e18 <delay+0x2c>)
    4e02:	1b40      	subs	r0, r0, r5
    4e04:	4298      	cmp	r0, r3
    4e06:	d9f7      	bls.n	4df8 <delay+0xc>
    {
      ms--;
      start += 1000;
    4e08:	23fa      	movs	r3, #250	; 0xfa
      ms--;
    4e0a:	3c01      	subs	r4, #1
      start += 1000;
    4e0c:	009b      	lsls	r3, r3, #2
    4e0e:	18ed      	adds	r5, r5, r3
    while (ms > 0 && (micros() - start) >= 1000)
    4e10:	2c00      	cmp	r4, #0
    4e12:	d1f3      	bne.n	4dfc <delay+0x10>
    }
  }
}
    4e14:	bd70      	pop	{r4, r5, r6, pc}
    4e16:	46c0      	nop			; (mov r8, r8)
    4e18:	000003e7 	.word	0x000003e7

00004e1c <SysTick_DefaultHandler>:

#include "Reset.h" // for tickReset()

void SysTick_DefaultHandler(void)
{
    4e1c:	b510      	push	{r4, lr}
  // Increment tick count each ms
  _ulTickCount++;
    4e1e:	4a03      	ldr	r2, [pc, #12]	; (4e2c <SysTick_DefaultHandler+0x10>)
    4e20:	6813      	ldr	r3, [r2, #0]
    4e22:	3301      	adds	r3, #1
    4e24:	6013      	str	r3, [r2, #0]
  tickReset();
    4e26:	f000 f8bb 	bl	4fa0 <tickReset>
}
    4e2a:	bd10      	pop	{r4, pc}
    4e2c:	200005c0 	.word	0x200005c0

00004e30 <yield>:
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
	// Empty
}
    4e30:	4770      	bx	lr

00004e32 <sysTickHook>:
 * handler provided by Arduino.
 */
static int __false() {
	// Return false
	return 0;
}
    4e32:	2000      	movs	r0, #0
    4e34:	4770      	bx	lr
	...

00004e38 <main>:

/*
 * \brief Main entry point of Arduino application
 */
int main( void )
{
    4e38:	b510      	push	{r4, lr}
  init();
    4e3a:	f001 f9c9 	bl	61d0 <init>

  __libc_init_array();
    4e3e:	f003 ff49 	bl	8cd4 <__libc_init_array>

  initVariant();
    4e42:	f001 fbb1 	bl	65a8 <_Z11initVariantv>

  delay(1);
    4e46:	2001      	movs	r0, #1
    4e48:	f7ff ffd0 	bl	4dec <delay>
#if defined(USBCON)
  USBDevice.init();
    4e4c:	4c08      	ldr	r4, [pc, #32]	; (4e70 <main+0x38>)
    4e4e:	0020      	movs	r0, r4
    4e50:	f000 fca2 	bl	5798 <_ZN14USBDeviceClass4initEv>
  USBDevice.attach();
    4e54:	0020      	movs	r0, r4
    4e56:	f000 fcff 	bl	5858 <_ZN14USBDeviceClass6attachEv>
#endif

  setup();
    4e5a:	f7ff fe6f 	bl	4b3c <setup>

  for (;;)
  {
    loop();
    4e5e:	f7ff ff0b 	bl	4c78 <loop>
    if (serialEventRun) serialEventRun();
    4e62:	4b04      	ldr	r3, [pc, #16]	; (4e74 <main+0x3c>)
    4e64:	2b00      	cmp	r3, #0
    4e66:	d0fa      	beq.n	4e5e <main+0x26>
    4e68:	e000      	b.n	4e6c <main+0x34>
    4e6a:	bf00      	nop
    4e6c:	e7f7      	b.n	4e5e <main+0x26>
    4e6e:	46c0      	nop			; (mov r8, r8)
    4e70:	200005e0 	.word	0x200005e0
    4e74:	00000000 	.word	0x00000000

00004e78 <_Znwj>:
    4e78:	b510      	push	{r4, lr}
    4e7a:	f003 ff53 	bl	8d24 <malloc>
    4e7e:	bd10      	pop	{r4, pc}

00004e80 <_ZdlPv>:
    4e80:	b510      	push	{r4, lr}
    4e82:	f003 ff59 	bl	8d38 <free>
    4e86:	bd10      	pop	{r4, pc}

00004e88 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
    4e88:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    4e8a:	0006      	movs	r6, r0
    4e8c:	000d      	movs	r5, r1
    4e8e:	000c      	movs	r4, r1
    4e90:	188b      	adds	r3, r1, r2
    4e92:	9301      	str	r3, [sp, #4]
  size_t n = 0;
  while (size--) {
    4e94:	9b01      	ldr	r3, [sp, #4]
    4e96:	1b67      	subs	r7, r4, r5
    4e98:	429c      	cmp	r4, r3
    4e9a:	d007      	beq.n	4eac <_ZN5Print5writeEPKhj+0x24>
    if (write(*buffer++)) n++;
    4e9c:	6833      	ldr	r3, [r6, #0]
    4e9e:	7821      	ldrb	r1, [r4, #0]
    4ea0:	681b      	ldr	r3, [r3, #0]
    4ea2:	0030      	movs	r0, r6
    4ea4:	4798      	blx	r3
    4ea6:	3401      	adds	r4, #1
    4ea8:	2800      	cmp	r0, #0
    4eaa:	d1f3      	bne.n	4e94 <_ZN5Print5writeEPKhj+0xc>
    else break;
  }
  return n;
}
    4eac:	0038      	movs	r0, r7
    4eae:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

00004eb0 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
    4eb0:	b570      	push	{r4, r5, r6, lr}
    4eb2:	0005      	movs	r5, r0
    4eb4:	000c      	movs	r4, r1
      if (str == NULL) return 0;
    4eb6:	1e08      	subs	r0, r1, #0
    4eb8:	d007      	beq.n	4eca <_ZN5Print5writeEPKc+0x1a>
      return write((const uint8_t *)str, strlen(str));
    4eba:	f004 fce9 	bl	9890 <strlen>
    4ebe:	682b      	ldr	r3, [r5, #0]
    4ec0:	0002      	movs	r2, r0
    4ec2:	685b      	ldr	r3, [r3, #4]
    4ec4:	0021      	movs	r1, r4
    4ec6:	0028      	movs	r0, r5
    4ec8:	4798      	blx	r3
    }
    4eca:	bd70      	pop	{r4, r5, r6, pc}

00004ecc <_ZN5Print5printEPKc>:
{
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
    4ecc:	b510      	push	{r4, lr}
  return write(str);
    4ece:	f7ff ffef 	bl	4eb0 <_ZN5Print5writeEPKc>
}
    4ed2:	bd10      	pop	{r4, pc}

00004ed4 <_ZN5Print7printlnEv>:
{
  return x.printTo(*this);
}

size_t Print::println(void)
{
    4ed4:	b510      	push	{r4, lr}
  return write("\r\n");
    4ed6:	4902      	ldr	r1, [pc, #8]	; (4ee0 <_ZN5Print7printlnEv+0xc>)
    4ed8:	f7ff ffea 	bl	4eb0 <_ZN5Print5writeEPKc>
}
    4edc:	bd10      	pop	{r4, pc}
    4ede:	46c0      	nop			; (mov r8, r8)
    4ee0:	0000b399 	.word	0x0000b399

00004ee4 <_ZN5Print7printlnEPKc>:
  n += println();
  return n;
}

size_t Print::println(const char c[])
{
    4ee4:	b570      	push	{r4, r5, r6, lr}
    4ee6:	0004      	movs	r4, r0
  return write(str);
    4ee8:	f7ff ffe2 	bl	4eb0 <_ZN5Print5writeEPKc>
    4eec:	0005      	movs	r5, r0
  size_t n = print(c);
  n += println();
    4eee:	0020      	movs	r0, r4
    4ef0:	f7ff fff0 	bl	4ed4 <_ZN5Print7printlnEv>
    4ef4:	1940      	adds	r0, r0, r5
  return n;
}
    4ef6:	bd70      	pop	{r4, r5, r6, pc}

00004ef8 <_ZN5Print11printNumberEmh>:
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base)
{
    4ef8:	b5f0      	push	{r4, r5, r6, r7, lr}
    4efa:	0016      	movs	r6, r2
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
    4efc:	2200      	movs	r2, #0
{
    4efe:	b08d      	sub	sp, #52	; 0x34
  *str = '\0';
    4f00:	ab02      	add	r3, sp, #8
    4f02:	3305      	adds	r3, #5
{
    4f04:	9001      	str	r0, [sp, #4]
    4f06:	000d      	movs	r5, r1
  *str = '\0';
    4f08:	77da      	strb	r2, [r3, #31]

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
    4f0a:	2e01      	cmp	r6, #1
    4f0c:	dc00      	bgt.n	4f10 <_ZN5Print11printNumberEmh+0x18>
    4f0e:	260a      	movs	r6, #10
    4f10:	ac0b      	add	r4, sp, #44	; 0x2c

  do {
    char c = n % base;
    4f12:	0028      	movs	r0, r5
    4f14:	0031      	movs	r1, r6
    4f16:	f002 f81d 	bl	6f54 <__aeabi_uidivmod>
    4f1a:	000f      	movs	r7, r1
    4f1c:	b2cb      	uxtb	r3, r1
    n /= base;
    4f1e:	0028      	movs	r0, r5
    4f20:	0031      	movs	r1, r6
    char c = n % base;
    4f22:	9300      	str	r3, [sp, #0]
    n /= base;
    4f24:	f001 ff90 	bl	6e48 <__udivsi3>

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
    4f28:	b2fb      	uxtb	r3, r7
    4f2a:	3337      	adds	r3, #55	; 0x37
    n /= base;
    4f2c:	0005      	movs	r5, r0
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
    4f2e:	3c01      	subs	r4, #1
    4f30:	b2db      	uxtb	r3, r3
    4f32:	2f09      	cmp	r7, #9
    4f34:	d802      	bhi.n	4f3c <_ZN5Print11printNumberEmh+0x44>
    4f36:	9b00      	ldr	r3, [sp, #0]
    4f38:	3330      	adds	r3, #48	; 0x30
    4f3a:	b2db      	uxtb	r3, r3
    4f3c:	7023      	strb	r3, [r4, #0]
  } while(n);
    4f3e:	2d00      	cmp	r5, #0
    4f40:	d1e7      	bne.n	4f12 <_ZN5Print11printNumberEmh+0x1a>

  return write(str);
    4f42:	0021      	movs	r1, r4
    4f44:	9801      	ldr	r0, [sp, #4]
    4f46:	f7ff ffb3 	bl	4eb0 <_ZN5Print5writeEPKc>
}
    4f4a:	b00d      	add	sp, #52	; 0x34
    4f4c:	bdf0      	pop	{r4, r5, r6, r7, pc}

00004f4e <_ZN5Print5printEmi>:
{
    4f4e:	b510      	push	{r4, lr}
  if (base == 0) return write(n);
    4f50:	2a00      	cmp	r2, #0
    4f52:	d104      	bne.n	4f5e <_ZN5Print5printEmi+0x10>
    4f54:	6803      	ldr	r3, [r0, #0]
    4f56:	b2c9      	uxtb	r1, r1
    4f58:	681b      	ldr	r3, [r3, #0]
    4f5a:	4798      	blx	r3
}
    4f5c:	bd10      	pop	{r4, pc}
  else return printNumber(n, base);
    4f5e:	b2d2      	uxtb	r2, r2
    4f60:	f7ff ffca 	bl	4ef8 <_ZN5Print11printNumberEmh>
    4f64:	e7fa      	b.n	4f5c <_ZN5Print5printEmi+0xe>

00004f66 <_ZN5Print5printEhi>:
{
    4f66:	b510      	push	{r4, lr}
  return print((unsigned long) b, base);
    4f68:	f7ff fff1 	bl	4f4e <_ZN5Print5printEmi>
}
    4f6c:	bd10      	pop	{r4, pc}

00004f6e <_ZN5Print7printlnEhi>:
{
    4f6e:	b570      	push	{r4, r5, r6, lr}
    4f70:	0004      	movs	r4, r0
  return print((unsigned long) b, base);
    4f72:	f7ff ffec 	bl	4f4e <_ZN5Print5printEmi>
    4f76:	0005      	movs	r5, r0
  n += println();
    4f78:	0020      	movs	r0, r4
    4f7a:	f7ff ffab 	bl	4ed4 <_ZN5Print7printlnEv>
    4f7e:	1940      	adds	r0, r0, r5
}
    4f80:	bd70      	pop	{r4, r5, r6, pc}
	...

00004f84 <initiateReset>:
}

static int ticks = -1;

void initiateReset(int _ticks) {
	ticks = _ticks;
    4f84:	4b01      	ldr	r3, [pc, #4]	; (4f8c <initiateReset+0x8>)
    4f86:	6018      	str	r0, [r3, #0]
}
    4f88:	4770      	bx	lr
    4f8a:	46c0      	nop			; (mov r8, r8)
    4f8c:	20000004 	.word	0x20000004

00004f90 <cancelReset>:

void cancelReset() {
	ticks = -1;
    4f90:	2201      	movs	r2, #1
    4f92:	4b02      	ldr	r3, [pc, #8]	; (4f9c <cancelReset+0xc>)
    4f94:	4252      	negs	r2, r2
    4f96:	601a      	str	r2, [r3, #0]
}
    4f98:	4770      	bx	lr
    4f9a:	46c0      	nop			; (mov r8, r8)
    4f9c:	20000004 	.word	0x20000004

00004fa0 <tickReset>:

void tickReset() {
	if (ticks == -1)
    4fa0:	4a16      	ldr	r2, [pc, #88]	; (4ffc <tickReset+0x5c>)
void tickReset() {
    4fa2:	b510      	push	{r4, lr}
	if (ticks == -1)
    4fa4:	6813      	ldr	r3, [r2, #0]
    4fa6:	1c59      	adds	r1, r3, #1
    4fa8:	d027      	beq.n	4ffa <tickReset+0x5a>
		return;
	ticks--;
    4faa:	3b01      	subs	r3, #1
    4fac:	6013      	str	r3, [r2, #0]
	if (ticks == 0)
    4fae:	2b00      	cmp	r3, #0
    4fb0:	d123      	bne.n	4ffa <tickReset+0x5a>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    4fb2:	b672      	cpsid	i
	if (APP_START < (0x200 + 4)) {
    4fb4:	4b12      	ldr	r3, [pc, #72]	; (5000 <tickReset+0x60>)
    4fb6:	4a13      	ldr	r2, [pc, #76]	; (5004 <tickReset+0x64>)
    4fb8:	3304      	adds	r3, #4
    4fba:	4293      	cmp	r3, r2
    4fbc:	d808      	bhi.n	4fd0 <tickReset+0x30>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    4fbe:	f3bf 8f4f 	dsb	sy
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
    4fc2:	4a11      	ldr	r2, [pc, #68]	; (5008 <tickReset+0x68>)
    4fc4:	4b11      	ldr	r3, [pc, #68]	; (500c <tickReset+0x6c>)
    4fc6:	60da      	str	r2, [r3, #12]
    4fc8:	f3bf 8f4f 	dsb	sy
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    4fcc:	46c0      	nop			; (mov r8, r8)
    4fce:	e7fd      	b.n	4fcc <tickReset+0x2c>
        return NVMCTRL->INTFLAG.reg & NVMCTRL_INTFLAG_READY;
    4fd0:	4a0f      	ldr	r2, [pc, #60]	; (5010 <tickReset+0x70>)
	while (!nvmReady())
    4fd2:	2101      	movs	r1, #1
    4fd4:	0010      	movs	r0, r2
        return NVMCTRL->INTFLAG.reg & NVMCTRL_INTFLAG_READY;
    4fd6:	7d14      	ldrb	r4, [r2, #20]
	while (!nvmReady())
    4fd8:	420c      	tst	r4, r1
    4fda:	d0fc      	beq.n	4fd6 <tickReset+0x36>
	NVMCTRL->STATUS.reg |= NVMCTRL_STATUS_MASK;
    4fdc:	2120      	movs	r1, #32
    4fde:	8b14      	ldrh	r4, [r2, #24]
    4fe0:	31ff      	adds	r1, #255	; 0xff
	NVMCTRL->ADDR.reg  = (uintptr_t)&NVM_MEMORY[APP_START / 4];
    4fe2:	089b      	lsrs	r3, r3, #2
    4fe4:	005b      	lsls	r3, r3, #1
	NVMCTRL->STATUS.reg |= NVMCTRL_STATUS_MASK;
    4fe6:	4321      	orrs	r1, r4
    4fe8:	8311      	strh	r1, [r2, #24]
	NVMCTRL->ADDR.reg  = (uintptr_t)&NVM_MEMORY[APP_START / 4];
    4fea:	61d3      	str	r3, [r2, #28]
	NVMCTRL->CTRLA.reg = NVMCTRL_CTRLA_CMD_ER | NVMCTRL_CTRLA_CMDEX_KEY;
    4fec:	4b09      	ldr	r3, [pc, #36]	; (5014 <tickReset+0x74>)
    4fee:	8013      	strh	r3, [r2, #0]
	while (!nvmReady())
    4ff0:	2301      	movs	r3, #1
        return NVMCTRL->INTFLAG.reg & NVMCTRL_INTFLAG_READY;
    4ff2:	7d02      	ldrb	r2, [r0, #20]
	while (!nvmReady())
    4ff4:	421a      	tst	r2, r3
    4ff6:	d0fc      	beq.n	4ff2 <tickReset+0x52>
    4ff8:	e7e1      	b.n	4fbe <tickReset+0x1e>
		banzai();
}
    4ffa:	bd10      	pop	{r4, pc}
    4ffc:	20000004 	.word	0x20000004
    5000:	00002000 	.word	0x00002000
    5004:	00000203 	.word	0x00000203
    5008:	05fa0004 	.word	0x05fa0004
    500c:	e000ed00 	.word	0xe000ed00
    5010:	41004000 	.word	0x41004000
    5014:	ffffa502 	.word	0xffffa502

00005018 <SystemInit>:
#define GENERIC_CLOCK_MULTIPLEXER_DFLL48M (0u)

void SystemInit( void )
{
  /* Set 1 Flash Wait State for 48MHz, cf tables 20.9 and 35.27 in SAMD21 Datasheet */
  NVMCTRL->CTRLB.bit.RWS = NVMCTRL_CTRLB_RWS_HALF_Val ;
    5018:	221e      	movs	r2, #30
{
    501a:	b570      	push	{r4, r5, r6, lr}
  NVMCTRL->CTRLB.bit.RWS = NVMCTRL_CTRLB_RWS_HALF_Val ;
    501c:	4846      	ldr	r0, [pc, #280]	; (5138 <SystemInit+0x120>)

  /* Turn on the digital interface clock */
  PM->APBAMASK.reg |= PM_APBAMASK_GCLK ;
    501e:	4947      	ldr	r1, [pc, #284]	; (513c <SystemInit+0x124>)
  NVMCTRL->CTRLB.bit.RWS = NVMCTRL_CTRLB_RWS_HALF_Val ;
    5020:	6843      	ldr	r3, [r0, #4]
    5022:	4393      	bics	r3, r2
    5024:	3a1c      	subs	r2, #28
    5026:	4313      	orrs	r3, r2
    5028:	6043      	str	r3, [r0, #4]
  PM->APBAMASK.reg |= PM_APBAMASK_GCLK ;
    502a:	2308      	movs	r3, #8
    502c:	698c      	ldr	r4, [r1, #24]
    502e:	4323      	orrs	r3, r4
    5030:	618b      	str	r3, [r1, #24]
#else // has crystal

  /* ----------------------------------------------------------------------------------------------
   * 1) Enable XOSC32K clock (External on-board 32.768Hz oscillator)
   */
  SYSCTRL->XOSC32K.reg = SYSCTRL_XOSC32K_STARTUP( 0x6u ) | /* cf table 15.10 of product datasheet in chapter 15.8.6 */
    5032:	4c43      	ldr	r4, [pc, #268]	; (5140 <SystemInit+0x128>)
    5034:	4b43      	ldr	r3, [pc, #268]	; (5144 <SystemInit+0x12c>)
    5036:	829c      	strh	r4, [r3, #20]
                         SYSCTRL_XOSC32K_XTALEN | SYSCTRL_XOSC32K_EN32K ;
  SYSCTRL->XOSC32K.bit.ENABLE = 1 ; /* separate call, as described in chapter 15.6.3 */
    5038:	8a9c      	ldrh	r4, [r3, #20]
    503a:	4314      	orrs	r4, r2
    503c:	829c      	strh	r4, [r3, #20]

  while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_XOSC32KRDY) == 0 )
    503e:	68dc      	ldr	r4, [r3, #12]
    5040:	4214      	tst	r4, r2
    5042:	d0fc      	beq.n	503e <SystemInit+0x26>

  /* Software reset the module to ensure it is re-initialized correctly */
  /* Note: Due to synchronization, there is a delay from writing CTRL.SWRST until the reset is complete.
   * CTRL.SWRST and STATUS.SYNCBUSY will both be cleared when the reset is complete, as described in chapter 13.8.1
   */
  GCLK->CTRL.reg = GCLK_CTRL_SWRST ;
    5044:	2401      	movs	r4, #1
    5046:	4a40      	ldr	r2, [pc, #256]	; (5148 <SystemInit+0x130>)
    5048:	7014      	strb	r4, [r2, #0]

  while ( (GCLK->CTRL.reg & GCLK_CTRL_SWRST) && (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY) )
    504a:	7815      	ldrb	r5, [r2, #0]
    504c:	4225      	tst	r5, r4
    504e:	d003      	beq.n	5058 <SystemInit+0x40>
    5050:	7855      	ldrb	r5, [r2, #1]
    5052:	b26d      	sxtb	r5, r5
    5054:	2d00      	cmp	r5, #0
    5056:	dbf8      	blt.n	504a <SystemInit+0x32>
  }

  /* ----------------------------------------------------------------------------------------------
   * 2) Put XOSC32K as source of Generic Clock Generator 1
   */
  GCLK->GENDIV.reg = GCLK_GENDIV_ID( GENERIC_CLOCK_GENERATOR_XOSC32K ) ; // Generic Clock Generator 1
    5058:	2401      	movs	r4, #1
    505a:	6094      	str	r4, [r2, #8]

  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY )
    505c:	7854      	ldrb	r4, [r2, #1]
    505e:	b264      	sxtb	r4, r4
    5060:	2c00      	cmp	r4, #0
    5062:	dbfb      	blt.n	505c <SystemInit+0x44>
  {
    /* Wait for synchronization */
  }

  /* Write Generic Clock Generator 1 configuration */
  GCLK->GENCTRL.reg = GCLK_GENCTRL_ID( GENERIC_CLOCK_GENERATOR_OSC32K ) | // Generic Clock Generator 1
    5064:	4c39      	ldr	r4, [pc, #228]	; (514c <SystemInit+0x134>)
    5066:	6054      	str	r4, [r2, #4]
                      GCLK_GENCTRL_SRC_XOSC32K | // Selected source is External 32KHz Oscillator
#endif
//                      GCLK_GENCTRL_OE | // Output clock to a pin for tests
                      GCLK_GENCTRL_GENEN ;

  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY )
    5068:	7854      	ldrb	r4, [r2, #1]
    506a:	b264      	sxtb	r4, r4
    506c:	2c00      	cmp	r4, #0
    506e:	dbfb      	blt.n	5068 <SystemInit+0x50>
  }

  /* ----------------------------------------------------------------------------------------------
   * 3) Put Generic Clock Generator 1 as source for Generic Clock Multiplexer 0 (DFLL48M reference)
   */
  GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID( GENERIC_CLOCK_MULTIPLEXER_DFLL48M ) | // Generic Clock Multiplexer 0
    5070:	2482      	movs	r4, #130	; 0x82
    5072:	01e4      	lsls	r4, r4, #7
    5074:	8054      	strh	r4, [r2, #2]
                      GCLK_CLKCTRL_GEN_GCLK1 | // Generic Clock Generator 1 is source
                      GCLK_CLKCTRL_CLKEN ;

  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY )
    5076:	7854      	ldrb	r4, [r2, #1]
    5078:	b264      	sxtb	r4, r4
    507a:	2c00      	cmp	r4, #0
    507c:	dbfb      	blt.n	5076 <SystemInit+0x5e>
   */

  /* DFLL Configuration in Closed Loop mode, cf product datasheet chapter 15.6.7.1 - Closed-Loop Operation */

  /* Remove the OnDemand mode, Bug http://avr32.icgroup.norway.atmel.com/bugzilla/show_bug.cgi?id=9905 */
  SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    507e:	2402      	movs	r4, #2
    5080:	849c      	strh	r4, [r3, #36]	; 0x24

  while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) == 0 )
    5082:	340e      	adds	r4, #14
    5084:	68dd      	ldr	r5, [r3, #12]
    5086:	4225      	tst	r5, r4
    5088:	d0fc      	beq.n	5084 <SystemInit+0x6c>
  {
    /* Wait for synchronization */
  }

  SYSCTRL->DFLLMUL.reg = SYSCTRL_DFLLMUL_CSTEP( 31 ) | // Coarse step is 31, half of the max value
    508a:	4c31      	ldr	r4, [pc, #196]	; (5150 <SystemInit+0x138>)
    508c:	62dc      	str	r4, [r3, #44]	; 0x2c
                         SYSCTRL_DFLLMUL_FSTEP( 511 ) | // Fine step is 511, half of the max value
                         SYSCTRL_DFLLMUL_MUL( (VARIANT_MCK + VARIANT_MAINOSC/2) / VARIANT_MAINOSC ) ; // External 32KHz is the reference

  while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) == 0 )
    508e:	2410      	movs	r4, #16
    5090:	68dd      	ldr	r5, [r3, #12]
    5092:	4225      	tst	r5, r4
    5094:	d0fc      	beq.n	5090 <SystemInit+0x78>
  SYSCTRL->DFLLCTRL.reg |= SYSCTRL_DFLLCTRL_ENABLE ;

#else   // has crystal

  /* Write full configuration to DFLL control register */
  SYSCTRL->DFLLCTRL.reg |= SYSCTRL_DFLLCTRL_MODE | /* Enable the closed loop mode */
    5096:	8c9d      	ldrh	r5, [r3, #36]	; 0x24
    5098:	4c2e      	ldr	r4, [pc, #184]	; (5154 <SystemInit+0x13c>)
    509a:	432c      	orrs	r4, r5
    509c:	849c      	strh	r4, [r3, #36]	; 0x24
                           SYSCTRL_DFLLCTRL_WAITLOCK |
                           SYSCTRL_DFLLCTRL_QLDIS ; /* Disable Quick lock */

  while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) == 0 )
    509e:	2410      	movs	r4, #16
    50a0:	68dd      	ldr	r5, [r3, #12]
    50a2:	4225      	tst	r5, r4
    50a4:	d0fc      	beq.n	50a0 <SystemInit+0x88>
  {
    /* Wait for synchronization */
  }

  /* Enable the DFLL */
  SYSCTRL->DFLLCTRL.reg |= SYSCTRL_DFLLCTRL_ENABLE ;
    50a6:	2402      	movs	r4, #2
    50a8:	8c9d      	ldrh	r5, [r3, #36]	; 0x24

  while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLLCKC) == 0 ||
    50aa:	2680      	movs	r6, #128	; 0x80
  SYSCTRL->DFLLCTRL.reg |= SYSCTRL_DFLLCTRL_ENABLE ;
    50ac:	432c      	orrs	r4, r5
    50ae:	849c      	strh	r4, [r3, #36]	; 0x24
          (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLLCKF) == 0 )
    50b0:	2440      	movs	r4, #64	; 0x40
  while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLLCKC) == 0 ||
    50b2:	68dd      	ldr	r5, [r3, #12]
    50b4:	4235      	tst	r5, r6
    50b6:	d0fc      	beq.n	50b2 <SystemInit+0x9a>
          (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLLCKF) == 0 )
    50b8:	68dd      	ldr	r5, [r3, #12]
  while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLLCKC) == 0 ||
    50ba:	4225      	tst	r5, r4
    50bc:	d0f9      	beq.n	50b2 <SystemInit+0x9a>
    /* Wait for locks flags */
  }

#endif

  while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) == 0 )
    50be:	2410      	movs	r4, #16
    50c0:	68dd      	ldr	r5, [r3, #12]
    50c2:	4225      	tst	r5, r4
    50c4:	d0fc      	beq.n	50c0 <SystemInit+0xa8>
  }

  /* ----------------------------------------------------------------------------------------------
   * 5) Switch Generic Clock Generator 0 to DFLL48M. CPU will run at 48MHz.
   */
  GCLK->GENDIV.reg = GCLK_GENDIV_ID( GENERIC_CLOCK_GENERATOR_MAIN ) ; // Generic Clock Generator 0
    50c6:	2400      	movs	r4, #0
    50c8:	6094      	str	r4, [r2, #8]

  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY )
    50ca:	7854      	ldrb	r4, [r2, #1]
    50cc:	b264      	sxtb	r4, r4
    50ce:	2c00      	cmp	r4, #0
    50d0:	dbfb      	blt.n	50ca <SystemInit+0xb2>
  {
    /* Wait for synchronization */
  }

  /* Write Generic Clock Generator 0 configuration */
  GCLK->GENCTRL.reg = GCLK_GENCTRL_ID( GENERIC_CLOCK_GENERATOR_MAIN ) | // Generic Clock Generator 0
    50d2:	4c21      	ldr	r4, [pc, #132]	; (5158 <SystemInit+0x140>)
    50d4:	6054      	str	r4, [r2, #4]
                      GCLK_GENCTRL_SRC_DFLL48M | // Selected source is DFLL 48MHz
//                      GCLK_GENCTRL_OE | // Output clock to a pin for tests
                      GCLK_GENCTRL_IDC | // Set 50/50 duty cycle
                      GCLK_GENCTRL_GENEN ;

  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY )
    50d6:	7854      	ldrb	r4, [r2, #1]
    50d8:	b264      	sxtb	r4, r4
    50da:	2c00      	cmp	r4, #0
    50dc:	dbfb      	blt.n	50d6 <SystemInit+0xbe>
  }

  /* ----------------------------------------------------------------------------------------------
   * 6) Modify PRESCaler value of OSC8M to have 8MHz
   */
  SYSCTRL->OSC8M.bit.PRESC = SYSCTRL_OSC8M_PRESC_0_Val ;  //CMSIS 4.5 changed the prescaler defines
    50de:	6a1c      	ldr	r4, [r3, #32]
    50e0:	4d1e      	ldr	r5, [pc, #120]	; (515c <SystemInit+0x144>)
    50e2:	402c      	ands	r4, r5
  SYSCTRL->OSC8M.bit.ONDEMAND = 0 ;
    50e4:	2580      	movs	r5, #128	; 0x80
  SYSCTRL->OSC8M.bit.PRESC = SYSCTRL_OSC8M_PRESC_0_Val ;  //CMSIS 4.5 changed the prescaler defines
    50e6:	621c      	str	r4, [r3, #32]
  SYSCTRL->OSC8M.bit.ONDEMAND = 0 ;
    50e8:	6a1c      	ldr	r4, [r3, #32]
    50ea:	43ac      	bics	r4, r5
    50ec:	621c      	str	r4, [r3, #32]

  /* ----------------------------------------------------------------------------------------------
   * 7) Put OSC8M as source for Generic Clock Generator 3
   */
  GCLK->GENDIV.reg = GCLK_GENDIV_ID( GENERIC_CLOCK_GENERATOR_OSC8M ) ; // Generic Clock Generator 3
    50ee:	2303      	movs	r3, #3
    50f0:	6093      	str	r3, [r2, #8]

  /* Write Generic Clock Generator 3 configuration */
  GCLK->GENCTRL.reg = GCLK_GENCTRL_ID( GENERIC_CLOCK_GENERATOR_OSC8M ) | // Generic Clock Generator 3
    50f2:	4b1b      	ldr	r3, [pc, #108]	; (5160 <SystemInit+0x148>)
    50f4:	6053      	str	r3, [r2, #4]
                      GCLK_GENCTRL_SRC_OSC8M | // Selected source is RC OSC 8MHz (already enabled at reset)
//                      GCLK_GENCTRL_OE | // Output clock to a pin for tests
                      GCLK_GENCTRL_GENEN ;

  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY )
    50f6:	7853      	ldrb	r3, [r2, #1]
    50f8:	b25b      	sxtb	r3, r3
    50fa:	2b00      	cmp	r3, #0
    50fc:	dbfb      	blt.n	50f6 <SystemInit+0xde>

  /*
   * Now that all system clocks are configured, we can set CPU and APBx BUS clocks.
   * There values are normally the one present after Reset.
   */
  PM->CPUSEL.reg  = PM_CPUSEL_CPUDIV_DIV1 ;
    50fe:	2300      	movs	r3, #0

  // ADC Linearity bits 4:0
  uint32_t linearity = (*((uint32_t *) ADC_FUSES_LINEARITY_0_ADDR) & ADC_FUSES_LINEARITY_0_Msk) >> ADC_FUSES_LINEARITY_0_Pos;

  // ADC Linearity bits 7:5
  linearity |= ((*((uint32_t *) ADC_FUSES_LINEARITY_1_ADDR) & ADC_FUSES_LINEARITY_1_Msk) >> ADC_FUSES_LINEARITY_1_Pos) << 5;
    5100:	24ff      	movs	r4, #255	; 0xff
  PM->CPUSEL.reg  = PM_CPUSEL_CPUDIV_DIV1 ;
    5102:	720b      	strb	r3, [r1, #8]
  SystemCoreClock=VARIANT_MCK ;
    5104:	4a17      	ldr	r2, [pc, #92]	; (5164 <SystemInit+0x14c>)
  PM->APBASEL.reg = PM_APBASEL_APBADIV_DIV1_Val ;
    5106:	724b      	strb	r3, [r1, #9]
  PM->APBBSEL.reg = PM_APBBSEL_APBBDIV_DIV1_Val ;
    5108:	728b      	strb	r3, [r1, #10]
  PM->APBCSEL.reg = PM_APBCSEL_APBCDIV_DIV1_Val ;
    510a:	72cb      	strb	r3, [r1, #11]
  SystemCoreClock=VARIANT_MCK ;
    510c:	4b16      	ldr	r3, [pc, #88]	; (5168 <SystemInit+0x150>)
    510e:	601a      	str	r2, [r3, #0]
  uint32_t bias = (*((uint32_t *) ADC_FUSES_BIASCAL_ADDR) & ADC_FUSES_BIASCAL_Msk) >> ADC_FUSES_BIASCAL_Pos;
    5110:	4b16      	ldr	r3, [pc, #88]	; (516c <SystemInit+0x154>)
  uint32_t linearity = (*((uint32_t *) ADC_FUSES_LINEARITY_0_ADDR) & ADC_FUSES_LINEARITY_0_Msk) >> ADC_FUSES_LINEARITY_0_Pos;
    5112:	4a17      	ldr	r2, [pc, #92]	; (5170 <SystemInit+0x158>)
  uint32_t bias = (*((uint32_t *) ADC_FUSES_BIASCAL_ADDR) & ADC_FUSES_BIASCAL_Msk) >> ADC_FUSES_BIASCAL_Pos;
    5114:	681b      	ldr	r3, [r3, #0]
  uint32_t linearity = (*((uint32_t *) ADC_FUSES_LINEARITY_0_ADDR) & ADC_FUSES_LINEARITY_0_Msk) >> ADC_FUSES_LINEARITY_0_Pos;
    5116:	6811      	ldr	r1, [r2, #0]
  uint32_t bias = (*((uint32_t *) ADC_FUSES_BIASCAL_ADDR) & ADC_FUSES_BIASCAL_Msk) >> ADC_FUSES_BIASCAL_Pos;
    5118:	069a      	lsls	r2, r3, #26
  linearity |= ((*((uint32_t *) ADC_FUSES_LINEARITY_1_ADDR) & ADC_FUSES_LINEARITY_1_Msk) >> ADC_FUSES_LINEARITY_1_Pos) << 5;
    511a:	015b      	lsls	r3, r3, #5
  uint32_t linearity = (*((uint32_t *) ADC_FUSES_LINEARITY_0_ADDR) & ADC_FUSES_LINEARITY_0_Msk) >> ADC_FUSES_LINEARITY_0_Pos;
    511c:	0ec9      	lsrs	r1, r1, #27
  linearity |= ((*((uint32_t *) ADC_FUSES_LINEARITY_1_ADDR) & ADC_FUSES_LINEARITY_1_Msk) >> ADC_FUSES_LINEARITY_1_Pos) << 5;
    511e:	4023      	ands	r3, r4
  uint32_t bias = (*((uint32_t *) ADC_FUSES_BIASCAL_ADDR) & ADC_FUSES_BIASCAL_Msk) >> ADC_FUSES_BIASCAL_Pos;
    5120:	0f52      	lsrs	r2, r2, #29

  ADC->CALIB.reg = ADC_CALIB_BIAS_CAL(bias) | ADC_CALIB_LINEARITY_CAL(linearity);
    5122:	0212      	lsls	r2, r2, #8
  linearity |= ((*((uint32_t *) ADC_FUSES_LINEARITY_1_ADDR) & ADC_FUSES_LINEARITY_1_Msk) >> ADC_FUSES_LINEARITY_1_Pos) << 5;
    5124:	430b      	orrs	r3, r1
  ADC->CALIB.reg = ADC_CALIB_BIAS_CAL(bias) | ADC_CALIB_LINEARITY_CAL(linearity);
    5126:	4313      	orrs	r3, r2
    5128:	4a12      	ldr	r2, [pc, #72]	; (5174 <SystemInit+0x15c>)
    512a:	8513      	strh	r3, [r2, #40]	; 0x28

  /*
   * 9) Disable automatic NVM write operations
   */
  NVMCTRL->CTRLB.bit.MANW = 1;
    512c:	2380      	movs	r3, #128	; 0x80
    512e:	6842      	ldr	r2, [r0, #4]
    5130:	4313      	orrs	r3, r2
    5132:	6043      	str	r3, [r0, #4]
}
    5134:	bd70      	pop	{r4, r5, r6, pc}
    5136:	46c0      	nop			; (mov r8, r8)
    5138:	41004000 	.word	0x41004000
    513c:	40000400 	.word	0x40000400
    5140:	0000060c 	.word	0x0000060c
    5144:	40000800 	.word	0x40000800
    5148:	40000c00 	.word	0x40000c00
    514c:	00010501 	.word	0x00010501
    5150:	7dff05b9 	.word	0x7dff05b9
    5154:	00000a04 	.word	0x00000a04
    5158:	00030700 	.word	0x00030700
    515c:	fffffcff 	.word	0xfffffcff
    5160:	00010603 	.word	0x00010603
    5164:	02dc6c00 	.word	0x02dc6c00
    5168:	20000084 	.word	0x20000084
    516c:	00806024 	.word	0x00806024
    5170:	00806020 	.word	0x00806020
    5174:	42004000 	.word	0x42004000

00005178 <_ZN7Serial_17availableForWriteEv>:
int Serial_::availableForWrite(void)
{
	// return the number of bytes left in the current bank,
	// always EP size - 1, because bank is flushed on every write
	return (EPX_SIZE - 1);
}
    5178:	203f      	movs	r0, #63	; 0x3f
    517a:	4770      	bx	lr

0000517c <_ZN7Serial_5writeEh>:
		setWriteError();
		return 0;
	}
}

size_t Serial_::write(uint8_t c) {
    517c:	b513      	push	{r0, r1, r4, lr}
    517e:	466b      	mov	r3, sp
	return write(&c, 1);
    5180:	6802      	ldr	r2, [r0, #0]
size_t Serial_::write(uint8_t c) {
    5182:	71d9      	strb	r1, [r3, #7]
    5184:	3307      	adds	r3, #7
	return write(&c, 1);
    5186:	6854      	ldr	r4, [r2, #4]
    5188:	0019      	movs	r1, r3
    518a:	2201      	movs	r2, #1
    518c:	47a0      	blx	r4
}
    518e:	bd16      	pop	{r1, r2, r4, pc}

00005190 <_ZN7Serial_9availableEv>:
{
    5190:	b510      	push	{r4, lr}
	return usb.available(CDC_ENDPOINT_OUT);
    5192:	2102      	movs	r1, #2
    5194:	6900      	ldr	r0, [r0, #16]
    5196:	f000 fc47 	bl	5a28 <_ZN14USBDeviceClass9availableEm>
}
    519a:	bd10      	pop	{r4, pc}

0000519c <_ZN7Serial_5flushEv>:
{
    519c:	b510      	push	{r4, lr}
	usb.flush(CDC_ENDPOINT_IN);
    519e:	2103      	movs	r1, #3
    51a0:	6900      	ldr	r0, [r0, #16]
    51a2:	f000 fc57 	bl	5a54 <_ZN14USBDeviceClass5flushEm>
}
    51a6:	bd10      	pop	{r4, pc}

000051a8 <_ZN7Serial_5writeEPKhj>:
{
    51a8:	b510      	push	{r4, lr}
    51aa:	0013      	movs	r3, r2
    51ac:	0004      	movs	r4, r0
	uint32_t r = usb.send(CDC_ENDPOINT_IN, buffer, size);
    51ae:	000a      	movs	r2, r1
    51b0:	6900      	ldr	r0, [r0, #16]
    51b2:	2103      	movs	r1, #3
    51b4:	f000 fd3a 	bl	5c2c <_ZN14USBDeviceClass4sendEmPKvm>
	if (r > 0) {
    51b8:	2800      	cmp	r0, #0
    51ba:	d101      	bne.n	51c0 <_ZN7Serial_5writeEPKhj+0x18>
    void setWriteError(int err = 1) { write_error = err; }
    51bc:	2301      	movs	r3, #1
    51be:	6063      	str	r3, [r4, #4]
}
    51c0:	bd10      	pop	{r4, pc}
	...

000051c4 <_ZN7Serial_4peekEv>:
{
    51c4:	b510      	push	{r4, lr}
	if (_serialPeek != -1)
    51c6:	4c05      	ldr	r4, [pc, #20]	; (51dc <_ZN7Serial_4peekEv+0x18>)
    51c8:	6823      	ldr	r3, [r4, #0]
    51ca:	1c5a      	adds	r2, r3, #1
    51cc:	d104      	bne.n	51d8 <_ZN7Serial_4peekEv+0x14>
	_serialPeek = read();
    51ce:	6803      	ldr	r3, [r0, #0]
    51d0:	695b      	ldr	r3, [r3, #20]
    51d2:	4798      	blx	r3
    51d4:	0003      	movs	r3, r0
    51d6:	6020      	str	r0, [r4, #0]
}
    51d8:	0018      	movs	r0, r3
    51da:	bd10      	pop	{r4, pc}
    51dc:	20000058 	.word	0x20000058

000051e0 <_ZN7Serial_4readEv>:
	if (_serialPeek != -1) {
    51e0:	4b07      	ldr	r3, [pc, #28]	; (5200 <_ZN7Serial_4readEv+0x20>)
{
    51e2:	0002      	movs	r2, r0
	if (_serialPeek != -1) {
    51e4:	6818      	ldr	r0, [r3, #0]
{
    51e6:	b510      	push	{r4, lr}
	if (_serialPeek != -1) {
    51e8:	1c41      	adds	r1, r0, #1
    51ea:	d003      	beq.n	51f4 <_ZN7Serial_4readEv+0x14>
		_serialPeek = -1;
    51ec:	2201      	movs	r2, #1
    51ee:	4252      	negs	r2, r2
    51f0:	601a      	str	r2, [r3, #0]
}
    51f2:	bd10      	pop	{r4, pc}
	return usb.recv(CDC_ENDPOINT_OUT);
    51f4:	2102      	movs	r1, #2
    51f6:	6910      	ldr	r0, [r2, #16]
    51f8:	f000 fd0a 	bl	5c10 <_ZN14USBDeviceClass4recvEm>
    51fc:	e7f9      	b.n	51f2 <_ZN7Serial_4readEv+0x12>
    51fe:	46c0      	nop			; (mov r8, r8)
    5200:	20000058 	.word	0x20000058

00005204 <_Z16CDC_GetInterfacePh>:
{
    5204:	b510      	push	{r4, lr}
	interfaceNum[0] += 2;	// uses 2
    5206:	7803      	ldrb	r3, [r0, #0]
	return USBDevice.sendControl(&_cdcInterface,sizeof(_cdcInterface));
    5208:	2242      	movs	r2, #66	; 0x42
	interfaceNum[0] += 2;	// uses 2
    520a:	3302      	adds	r3, #2
    520c:	7003      	strb	r3, [r0, #0]
	return USBDevice.sendControl(&_cdcInterface,sizeof(_cdcInterface));
    520e:	4902      	ldr	r1, [pc, #8]	; (5218 <_Z16CDC_GetInterfacePh+0x14>)
    5210:	4802      	ldr	r0, [pc, #8]	; (521c <_Z16CDC_GetInterfacePh+0x18>)
    5212:	f000 fdab 	bl	5d6c <_ZN14USBDeviceClass11sendControlEPKvm>
}
    5216:	bd10      	pop	{r4, pc}
    5218:	20000014 	.word	0x20000014
    521c:	200005e0 	.word	0x200005e0

00005220 <_Z9CDC_SetupR8USBSetup>:
{
    5220:	b510      	push	{r4, lr}
	uint8_t requestType = setup.bmRequestType;
    5222:	7801      	ldrb	r1, [r0, #0]
{
    5224:	0003      	movs	r3, r0
	uint8_t r = setup.bRequest;
    5226:	7842      	ldrb	r2, [r0, #1]
	return false;
    5228:	2000      	movs	r0, #0
	if (requestType == REQUEST_DEVICETOHOST_CLASS_INTERFACE)
    522a:	29a1      	cmp	r1, #161	; 0xa1
    522c:	d108      	bne.n	5240 <_Z9CDC_SetupR8USBSetup+0x20>
		if (r == CDC_GET_LINE_CODING)
    522e:	2a21      	cmp	r2, #33	; 0x21
    5230:	d105      	bne.n	523e <_Z9CDC_SetupR8USBSetup+0x1e>
			USBDevice.sendControl((void*)&_usbLineInfo, 7);
    5232:	3a1a      	subs	r2, #26
    5234:	4916      	ldr	r1, [pc, #88]	; (5290 <_Z9CDC_SetupR8USBSetup+0x70>)
    5236:	4817      	ldr	r0, [pc, #92]	; (5294 <_Z9CDC_SetupR8USBSetup+0x74>)
    5238:	f000 fd98 	bl	5d6c <_ZN14USBDeviceClass11sendControlEPKvm>
			return true;
    523c:	2001      	movs	r0, #1
}
    523e:	bd10      	pop	{r4, pc}
	if (requestType == REQUEST_HOSTTODEVICE_CLASS_INTERFACE)
    5240:	2921      	cmp	r1, #33	; 0x21
    5242:	d1fc      	bne.n	523e <_Z9CDC_SetupR8USBSetup+0x1e>
		if (r == CDC_SET_LINE_CODING)
    5244:	2a20      	cmp	r2, #32
    5246:	d111      	bne.n	526c <_Z9CDC_SetupR8USBSetup+0x4c>
			USBDevice.recvControl((void*)&_usbLineInfo, 7);
    5248:	3a19      	subs	r2, #25
    524a:	4911      	ldr	r1, [pc, #68]	; (5290 <_Z9CDC_SetupR8USBSetup+0x70>)
    524c:	4811      	ldr	r0, [pc, #68]	; (5294 <_Z9CDC_SetupR8USBSetup+0x74>)
    524e:	f000 fc45 	bl	5adc <_ZN14USBDeviceClass11recvControlEPvm>
			if (_usbLineInfo.dwDTERate == 1200 && (_usbLineInfo.lineState & 0x01) == 0)
    5252:	2296      	movs	r2, #150	; 0x96
    5254:	4b0e      	ldr	r3, [pc, #56]	; (5290 <_Z9CDC_SetupR8USBSetup+0x70>)
    5256:	00d2      	lsls	r2, r2, #3
    5258:	6819      	ldr	r1, [r3, #0]
    525a:	4291      	cmp	r1, r2
    525c:	d103      	bne.n	5266 <_Z9CDC_SetupR8USBSetup+0x46>
    525e:	2401      	movs	r4, #1
    5260:	79d8      	ldrb	r0, [r3, #7]
    5262:	4004      	ands	r4, r0
    5264:	d00e      	beq.n	5284 <_Z9CDC_SetupR8USBSetup+0x64>
				cancelReset();
    5266:	f7ff fe93 	bl	4f90 <cancelReset>
    526a:	e00e      	b.n	528a <_Z9CDC_SetupR8USBSetup+0x6a>
		if (r == CDC_SET_CONTROL_LINE_STATE)
    526c:	2a22      	cmp	r2, #34	; 0x22
    526e:	d103      	bne.n	5278 <_Z9CDC_SetupR8USBSetup+0x58>
			_usbLineInfo.lineState = setup.wValueL;
    5270:	789a      	ldrb	r2, [r3, #2]
    5272:	4b07      	ldr	r3, [pc, #28]	; (5290 <_Z9CDC_SetupR8USBSetup+0x70>)
    5274:	71da      	strb	r2, [r3, #7]
    5276:	e7ec      	b.n	5252 <_Z9CDC_SetupR8USBSetup+0x32>
		if (CDC_SEND_BREAK == r)
    5278:	2a23      	cmp	r2, #35	; 0x23
    527a:	d1e0      	bne.n	523e <_Z9CDC_SetupR8USBSetup+0x1e>
			breakValue = ((uint16_t)setup.wValueH << 8) | setup.wValueL;
    527c:	885a      	ldrh	r2, [r3, #2]
    527e:	4b06      	ldr	r3, [pc, #24]	; (5298 <_Z9CDC_SetupR8USBSetup+0x78>)
    5280:	601a      	str	r2, [r3, #0]
			return false;
    5282:	e7dc      	b.n	523e <_Z9CDC_SetupR8USBSetup+0x1e>
				initiateReset(250);
    5284:	20fa      	movs	r0, #250	; 0xfa
    5286:	f7ff fe7d 	bl	4f84 <initiateReset>
			return false;
    528a:	2000      	movs	r0, #0
    528c:	e7d7      	b.n	523e <_Z9CDC_SetupR8USBSetup+0x1e>
    528e:	46c0      	nop			; (mov r8, r8)
    5290:	2000000c 	.word	0x2000000c
    5294:	200005e0 	.word	0x200005e0
    5298:	20000008 	.word	0x20000008

0000529c <_ZN7Serial_5beginEm>:
}
    529c:	4770      	bx	lr
	...

000052a0 <_ZN7Serial_cvbEv>:
// setup() before printing to ensure that an application on the host is
// actually ready to receive and display the data.
// We add a short delay before returning to fix a bug observed by Federico
// where the port is configured (lineState != 0) but not quite opened.
Serial_::operator bool()
{
    52a0:	b510      	push	{r4, lr}
	// this is here to avoid spurious opening after upload
	if (millis() < 500)
    52a2:	f7ff fd6d 	bl	4d80 <millis>
    52a6:	23f4      	movs	r3, #244	; 0xf4
    52a8:	33ff      	adds	r3, #255	; 0xff
		return false;
    52aa:	2400      	movs	r4, #0
	if (millis() < 500)
    52ac:	4298      	cmp	r0, r3
    52ae:	d907      	bls.n	52c0 <_ZN7Serial_cvbEv+0x20>

	bool result = false;

	if (_usbLineInfo.lineState > 0)
    52b0:	4b04      	ldr	r3, [pc, #16]	; (52c4 <_ZN7Serial_cvbEv+0x24>)
	{
		result = true;
	}

	delay(10);
    52b2:	200a      	movs	r0, #10
	if (_usbLineInfo.lineState > 0)
    52b4:	79dc      	ldrb	r4, [r3, #7]
    52b6:	1e63      	subs	r3, r4, #1
    52b8:	419c      	sbcs	r4, r3
    52ba:	b2e4      	uxtb	r4, r4
	delay(10);
    52bc:	f7ff fd96 	bl	4dec <delay>
	return result;
}
    52c0:	0020      	movs	r0, r4
    52c2:	bd10      	pop	{r4, pc}
    52c4:	2000000c 	.word	0x2000000c

000052c8 <_GLOBAL__sub_I__Z17_CDC_GetInterfacev>:
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
    52c8:	22fa      	movs	r2, #250	; 0xfa
    Print() : write_error(0) {}
    52ca:	2100      	movs	r1, #0
    52cc:	4b05      	ldr	r3, [pc, #20]	; (52e4 <_GLOBAL__sub_I__Z17_CDC_GetInterfacev+0x1c>)
    52ce:	0092      	lsls	r2, r2, #2
    52d0:	609a      	str	r2, [r3, #8]
//	Serial over CDC (Serial1 is the physical port)

class Serial_ : public Stream
{
public:
	Serial_(USBDeviceClass &_usb) : usb(_usb), stalled(false) { }
    52d2:	4a05      	ldr	r2, [pc, #20]	; (52e8 <_GLOBAL__sub_I__Z17_CDC_GetInterfacev+0x20>)
    52d4:	6059      	str	r1, [r3, #4]
    52d6:	3208      	adds	r2, #8
    52d8:	601a      	str	r2, [r3, #0]
    52da:	4a04      	ldr	r2, [pc, #16]	; (52ec <_GLOBAL__sub_I__Z17_CDC_GetInterfacev+0x24>)
    52dc:	7619      	strb	r1, [r3, #24]
    52de:	611a      	str	r2, [r3, #16]

bool Serial_::rts() {
	return _usbLineInfo.lineState & 0x2;
}

Serial_ SerialUSB(USBDevice);
    52e0:	4770      	bx	lr
    52e2:	46c0      	nop			; (mov r8, r8)
    52e4:	200005c4 	.word	0x200005c4
    52e8:	0000b39c 	.word	0x0000b39c
    52ec:	200005e0 	.word	0x200005e0

000052f0 <_ZL5utox8mPc>:
	packMessages(false);

	return true;
}

static void utox8(uint32_t val, char* s) {
    52f0:	b530      	push	{r4, r5, lr}
	for (int i = 0; i < 8; i++) {
		int d = val & 0XF;
    52f2:	250f      	movs	r5, #15
    52f4:	1dcb      	adds	r3, r1, #7
    52f6:	3901      	subs	r1, #1
    52f8:	0002      	movs	r2, r0
    52fa:	402a      	ands	r2, r5
		val = (val >> 4);

		s[7 - i] = d > 9 ? 'A' + d - 10 : '0' + d;
    52fc:	0014      	movs	r4, r2
		val = (val >> 4);
    52fe:	0900      	lsrs	r0, r0, #4
		s[7 - i] = d > 9 ? 'A' + d - 10 : '0' + d;
    5300:	3430      	adds	r4, #48	; 0x30
    5302:	2a09      	cmp	r2, #9
    5304:	dd01      	ble.n	530a <_ZL5utox8mPc+0x1a>
    5306:	3237      	adds	r2, #55	; 0x37
    5308:	0014      	movs	r4, r2
    530a:	701c      	strb	r4, [r3, #0]
    530c:	3b01      	subs	r3, #1
	for (int i = 0; i < 8; i++) {
    530e:	428b      	cmp	r3, r1
    5310:	d1f2      	bne.n	52f8 <_ZL5utox8mPc+0x8>
	}
}
    5312:	bd30      	pop	{r4, r5, pc}

00005314 <_ZN26DoubleBufferedEPOutHandlerD1Ev>:
		usbd.epBank0SetAddress(ep, const_cast<uint8_t *>(data0));

		release();
	}

	virtual ~DoubleBufferedEPOutHandler() {
    5314:	b510      	push	{r4, lr}
    5316:	0004      	movs	r4, r0
		free((void*)data0);
    5318:	6980      	ldr	r0, [r0, #24]
    531a:	f003 fd0d 	bl	8d38 <free>
		free((void*)data1);
    531e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    5320:	f003 fd0a 	bl	8d38 <free>
	}
    5324:	0020      	movs	r0, r4
    5326:	bd10      	pop	{r4, pc}

00005328 <_ZN26DoubleBufferedEPOutHandlerD0Ev>:
	virtual ~DoubleBufferedEPOutHandler() {
    5328:	b510      	push	{r4, lr}
    532a:	0004      	movs	r4, r0
	}
    532c:	f7ff fff2 	bl	5314 <_ZN26DoubleBufferedEPOutHandlerD1Ev>
    5330:	0020      	movs	r0, r4
    5332:	f7ff fda5 	bl	4e80 <_ZdlPv>
    5336:	0020      	movs	r0, r4
    5338:	bd10      	pop	{r4, pc}
	...

0000533c <_ZN14USBDeviceClass6initEPEmm.part.5>:
	for (uint8_t i = 1; i < sizeof(EndPoints) && EndPoints[i] != 0; i++) {
		initEP(i, EndPoints[i]);
	}
}

void USBDeviceClass::initEP(uint32_t ep, uint32_t config)
    533c:	b570      	push	{r4, r5, r6, lr}
		if (epHandlers[ep] != NULL) {
			delete (DoubleBufferedEPOutHandler*)epHandlers[ep];
		}
		epHandlers[ep] = new DoubleBufferedEPOutHandler(usbd, ep, 256);
	}
	else if (config == (USB_ENDPOINT_TYPE_BULK | USB_ENDPOINT_IN(0)))
    533e:	2982      	cmp	r1, #130	; 0x82
    5340:	d11f      	bne.n	5382 <_ZN14USBDeviceClass6initEPEmm.part.5+0x46>
	inline void epBank1SetSize(ep_t ep, uint16_t size) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.SIZE = EP_PCKSIZE_SIZE(size); }
    5342:	b2c3      	uxtb	r3, r0
    5344:	4d2c      	ldr	r5, [pc, #176]	; (53f8 <_ZN14USBDeviceClass6initEPEmm.part.5+0xbc>)
    5346:	015a      	lsls	r2, r3, #5
    5348:	18aa      	adds	r2, r5, r2
    534a:	6991      	ldr	r1, [r2, #24]
    534c:	4c2b      	ldr	r4, [pc, #172]	; (53fc <_ZN14USBDeviceClass6initEPEmm.part.5+0xc0>)
	{
		usbd.epBank1SetSize(ep, 64);
		usbd.epBank1SetAddress(ep, &udd_ep_in_cache_buffer[ep]);
    534e:	0180      	lsls	r0, r0, #6
    5350:	400c      	ands	r4, r1
    5352:	21c0      	movs	r1, #192	; 0xc0
    5354:	0589      	lsls	r1, r1, #22
    5356:	4321      	orrs	r1, r4
    5358:	6191      	str	r1, [r2, #24]
    535a:	4929      	ldr	r1, [pc, #164]	; (5400 <_ZN14USBDeviceClass6initEPEmm.part.5+0xc4>)
	inline void epBank1ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK1RDY = 1; }
    535c:	3308      	adds	r3, #8
    535e:	1808      	adds	r0, r1, r0
    5360:	2180      	movs	r1, #128	; 0x80
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
    5362:	6150      	str	r0, [r2, #20]
	inline void epBank1ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK1RDY = 1; }
    5364:	682a      	ldr	r2, [r5, #0]
    5366:	015b      	lsls	r3, r3, #5
    5368:	18d0      	adds	r0, r2, r3
    536a:	7904      	ldrb	r4, [r0, #4]
    536c:	4249      	negs	r1, r1
    536e:	4321      	orrs	r1, r4
    5370:	7101      	strb	r1, [r0, #4]
	inline void epBank1SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE1 = type; }
    5372:	2070      	movs	r0, #112	; 0x70
    5374:	5c99      	ldrb	r1, [r3, r2]
    5376:	4381      	bics	r1, r0
    5378:	0008      	movs	r0, r1
    537a:	2130      	movs	r1, #48	; 0x30
    537c:	4301      	orrs	r1, r0
    537e:	5499      	strb	r1, [r3, r2]
		usbd.epBank0SetByteCount(ep, 0);

		// NAK on endpoint OUT, the bank is full.
		usbd.epBank0SetReady(ep);
	}
}
    5380:	bd70      	pop	{r4, r5, r6, pc}
	else if (config == USB_ENDPOINT_TYPE_CONTROL)
    5382:	2900      	cmp	r1, #0
    5384:	d1fc      	bne.n	5380 <_ZN14USBDeviceClass6initEPEmm.part.5+0x44>
	inline void epBank0SetSize(ep_t ep, uint16_t size) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.SIZE = EP_PCKSIZE_SIZE(size); }
    5386:	24c0      	movs	r4, #192	; 0xc0
    5388:	b2c1      	uxtb	r1, r0
    538a:	4e1b      	ldr	r6, [pc, #108]	; (53f8 <_ZN14USBDeviceClass6initEPEmm.part.5+0xbc>)
    538c:	014b      	lsls	r3, r1, #5
    538e:	18f3      	adds	r3, r6, r3
    5390:	689a      	ldr	r2, [r3, #8]
    5392:	4d1a      	ldr	r5, [pc, #104]	; (53fc <_ZN14USBDeviceClass6initEPEmm.part.5+0xc0>)
    5394:	05a4      	lsls	r4, r4, #22
    5396:	402a      	ands	r2, r5
    5398:	4322      	orrs	r2, r4
    539a:	609a      	str	r2, [r3, #8]
		usbd.epBank0SetAddress(ep, &udd_ep_out_cache_buffer[ep]);
    539c:	4a19      	ldr	r2, [pc, #100]	; (5404 <_ZN14USBDeviceClass6initEPEmm.part.5+0xc8>)
    539e:	0180      	lsls	r0, r0, #6
    53a0:	1810      	adds	r0, r2, r0
	inline void epBank0SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE0 = type; }
    53a2:	000a      	movs	r2, r1
	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
    53a4:	6058      	str	r0, [r3, #4]
	inline void epBank0SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE0 = type; }
    53a6:	6830      	ldr	r0, [r6, #0]
    53a8:	2607      	movs	r6, #7
    53aa:	3208      	adds	r2, #8
    53ac:	0152      	lsls	r2, r2, #5
    53ae:	5c11      	ldrb	r1, [r2, r0]
    53b0:	43b1      	bics	r1, r6
    53b2:	000e      	movs	r6, r1
    53b4:	2101      	movs	r1, #1
    53b6:	4331      	orrs	r1, r6
    53b8:	5411      	strb	r1, [r2, r0]
	inline void epBank1SetSize(ep_t ep, uint16_t size) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.SIZE = EP_PCKSIZE_SIZE(size); }
    53ba:	6999      	ldr	r1, [r3, #24]
    53bc:	400d      	ands	r5, r1
    53be:	432c      	orrs	r4, r5
    53c0:	619c      	str	r4, [r3, #24]
	inline void epBank1SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE1 = type; }
    53c2:	2470      	movs	r4, #112	; 0x70
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
    53c4:	490e      	ldr	r1, [pc, #56]	; (5400 <_ZN14USBDeviceClass6initEPEmm.part.5+0xc4>)
    53c6:	6159      	str	r1, [r3, #20]
	inline void epBank1SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE1 = type; }
    53c8:	5c11      	ldrb	r1, [r2, r0]
    53ca:	43a1      	bics	r1, r4
    53cc:	000c      	movs	r4, r1
    53ce:	2110      	movs	r1, #16
    53d0:	4321      	orrs	r1, r4
    53d2:	5411      	strb	r1, [r2, r0]
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
    53d4:	6899      	ldr	r1, [r3, #8]
    53d6:	4c0c      	ldr	r4, [pc, #48]	; (5408 <_ZN14USBDeviceClass6initEPEmm.part.5+0xcc>)
	inline void epBank0SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK0RDY = 1; }
    53d8:	1882      	adds	r2, r0, r2
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
    53da:	400c      	ands	r4, r1
    53dc:	2180      	movs	r1, #128	; 0x80
    53de:	0349      	lsls	r1, r1, #13
    53e0:	4321      	orrs	r1, r4
    53e2:	6099      	str	r1, [r3, #8]
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
    53e4:	6899      	ldr	r1, [r3, #8]
    53e6:	0b89      	lsrs	r1, r1, #14
    53e8:	0389      	lsls	r1, r1, #14
    53ea:	6099      	str	r1, [r3, #8]
	inline void epBank0SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK0RDY = 1; }
    53ec:	2340      	movs	r3, #64	; 0x40
    53ee:	7951      	ldrb	r1, [r2, #5]
    53f0:	430b      	orrs	r3, r1
    53f2:	7153      	strb	r3, [r2, #5]
    53f4:	e7c4      	b.n	5380 <_ZN14USBDeviceClass6initEPEmm.part.5+0x44>
    53f6:	46c0      	nop			; (mov r8, r8)
    53f8:	20000a98 	.word	0x20000a98
    53fc:	8fffffff 	.word	0x8fffffff
    5400:	2000060c 	.word	0x2000060c
    5404:	200007cc 	.word	0x200007cc
    5408:	f0003fff 	.word	0xf0003fff

0000540c <_ZN20USBDevice_SAMD21G18x5resetEv>:
void USBDevice_SAMD21G18x::reset() {
    540c:	b570      	push	{r4, r5, r6, lr}
	usb.CTRLA.bit.SWRST = 1;
    540e:	0004      	movs	r4, r0
    5410:	2301      	movs	r3, #1
    5412:	cc20      	ldmia	r4!, {r5}
	memset(EP, 0, sizeof(EP));
    5414:	2100      	movs	r1, #0
	usb.CTRLA.bit.SWRST = 1;
    5416:	782a      	ldrb	r2, [r5, #0]
	memset(EP, 0, sizeof(EP));
    5418:	0020      	movs	r0, r4
	usb.CTRLA.bit.SWRST = 1;
    541a:	4313      	orrs	r3, r2
	memset(EP, 0, sizeof(EP));
    541c:	2280      	movs	r2, #128	; 0x80
	usb.CTRLA.bit.SWRST = 1;
    541e:	702b      	strb	r3, [r5, #0]
	memset(EP, 0, sizeof(EP));
    5420:	0052      	lsls	r2, r2, #1
    5422:	f003 fccf 	bl	8dc4 <memset>
	while (usb.SYNCBUSY.bit.SWRST) {}
    5426:	78ab      	ldrb	r3, [r5, #2]
    5428:	07db      	lsls	r3, r3, #31
    542a:	d4fc      	bmi.n	5426 <_ZN20USBDevice_SAMD21G18x5resetEv+0x1a>
	usb.DESCADD.reg = (uint32_t)(&EP);
    542c:	626c      	str	r4, [r5, #36]	; 0x24
}
    542e:	bd70      	pop	{r4, r5, r6, pc}

00005430 <_ZN20USBDevice_SAMD21G18x9calibrateEv>:
	uint32_t pad_transn = (*pad_transn_p & USB_FUSES_TRANSN_Msk) >> USB_FUSES_TRANSN_Pos;
    5430:	221f      	movs	r2, #31
    5432:	4b14      	ldr	r3, [pc, #80]	; (5484 <_ZN20USBDevice_SAMD21G18x9calibrateEv+0x54>)
void USBDevice_SAMD21G18x::calibrate() {
    5434:	b570      	push	{r4, r5, r6, lr}
	uint32_t pad_transn = (*pad_transn_p & USB_FUSES_TRANSN_Msk) >> USB_FUSES_TRANSN_Pos;
    5436:	681b      	ldr	r3, [r3, #0]
    5438:	0b59      	lsrs	r1, r3, #13
	uint32_t pad_transp = (*pad_transp_p & USB_FUSES_TRANSP_Msk) >> USB_FUSES_TRANSP_Pos;
    543a:	0c9c      	lsrs	r4, r3, #18
	uint32_t pad_trim   = (*pad_trim_p   & USB_FUSES_TRIM_Msk  ) >> USB_FUSES_TRIM_Pos;
    543c:	019b      	lsls	r3, r3, #6
	uint32_t pad_transn = (*pad_transn_p & USB_FUSES_TRANSN_Msk) >> USB_FUSES_TRANSN_Pos;
    543e:	4011      	ands	r1, r2
	uint32_t pad_trim   = (*pad_trim_p   & USB_FUSES_TRIM_Msk  ) >> USB_FUSES_TRIM_Pos;
    5440:	0f5b      	lsrs	r3, r3, #29
	uint32_t pad_transp = (*pad_transp_p & USB_FUSES_TRANSP_Msk) >> USB_FUSES_TRANSP_Pos;
    5442:	4022      	ands	r2, r4
	if (pad_transn == 0x1F)  // maximum value (31)
    5444:	291f      	cmp	r1, #31
    5446:	d100      	bne.n	544a <_ZN20USBDevice_SAMD21G18x9calibrateEv+0x1a>
		pad_transn = 5;
    5448:	391a      	subs	r1, #26
	if (pad_transp == 0x1F)  // maximum value (31)
    544a:	2a1f      	cmp	r2, #31
    544c:	d100      	bne.n	5450 <_ZN20USBDevice_SAMD21G18x9calibrateEv+0x20>
		pad_transp = 29;
    544e:	3a02      	subs	r2, #2
	if (pad_trim == 0x7)     // maximum value (7)
    5450:	2b07      	cmp	r3, #7
    5452:	d100      	bne.n	5456 <_ZN20USBDevice_SAMD21G18x9calibrateEv+0x26>
		pad_trim = 3;
    5454:	3b04      	subs	r3, #4
	usb.PADCAL.bit.TRANSN = pad_transn;
    5456:	251f      	movs	r5, #31
    5458:	6800      	ldr	r0, [r0, #0]
    545a:	018e      	lsls	r6, r1, #6
    545c:	8d04      	ldrh	r4, [r0, #40]	; 0x28
    545e:	490a      	ldr	r1, [pc, #40]	; (5488 <_ZN20USBDevice_SAMD21G18x9calibrateEv+0x58>)
	usb.PADCAL.bit.TRANSP = pad_transp;
    5460:	402a      	ands	r2, r5
	usb.PADCAL.bit.TRANSN = pad_transn;
    5462:	4021      	ands	r1, r4
    5464:	4331      	orrs	r1, r6
    5466:	8501      	strh	r1, [r0, #40]	; 0x28
	usb.PADCAL.bit.TRANSP = pad_transp;
    5468:	8d01      	ldrh	r1, [r0, #40]	; 0x28
    546a:	0014      	movs	r4, r2
    546c:	000a      	movs	r2, r1
    546e:	43aa      	bics	r2, r5
    5470:	4322      	orrs	r2, r4
    5472:	8502      	strh	r2, [r0, #40]	; 0x28
	usb.PADCAL.bit.TRIM   = pad_trim;
    5474:	8d02      	ldrh	r2, [r0, #40]	; 0x28
    5476:	0319      	lsls	r1, r3, #12
    5478:	4b04      	ldr	r3, [pc, #16]	; (548c <_ZN20USBDevice_SAMD21G18x9calibrateEv+0x5c>)
    547a:	4013      	ands	r3, r2
    547c:	430b      	orrs	r3, r1
    547e:	8503      	strh	r3, [r0, #40]	; 0x28
}
    5480:	bd70      	pop	{r4, r5, r6, pc}
    5482:	46c0      	nop			; (mov r8, r8)
    5484:	00806024 	.word	0x00806024
    5488:	fffff83f 	.word	0xfffff83f
    548c:	ffff8fff 	.word	0xffff8fff

00005490 <_ZN7__GuardC1Ev>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    5490:	f3ef 8310 	mrs	r3, PRIMASK
	__Guard() : primask(__get_PRIMASK()), loops(1) {
    5494:	6003      	str	r3, [r0, #0]
    5496:	2301      	movs	r3, #1
    5498:	6043      	str	r3, [r0, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    549a:	b672      	cpsid	i
	}
    549c:	4770      	bx	lr

0000549e <_ZN7__GuardD1Ev>:
		if (primask == 0) {
    549e:	6803      	ldr	r3, [r0, #0]
    54a0:	2b00      	cmp	r3, #0
    54a2:	d102      	bne.n	54aa <_ZN7__GuardD1Ev+0xc>
  __ASM volatile ("cpsie i" : : : "memory");
    54a4:	b662      	cpsie	i
  __ASM volatile ("isb 0xF":::"memory");
    54a6:	f3bf 8f6f 	isb	sy
	}
    54aa:	4770      	bx	lr

000054ac <_ZNK26DoubleBufferedEPOutHandler9availableEv>:
			release();
		}
	}

	// Returns how many bytes are stored in the buffers
	virtual uint32_t available() const {
    54ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
		if (current == 0) {
    54ae:	6905      	ldr	r5, [r0, #16]
	virtual uint32_t available() const {
    54b0:	0004      	movs	r4, r0
			bool ready = false;
			synchronized {
    54b2:	4668      	mov	r0, sp
		if (current == 0) {
    54b4:	2d00      	cmp	r5, #0
    54b6:	d114      	bne.n	54e2 <_ZNK26DoubleBufferedEPOutHandler9availableEv+0x36>
			synchronized {
    54b8:	f7ff ffea 	bl	5490 <_ZN7__GuardC1Ev>
    54bc:	9b01      	ldr	r3, [sp, #4]
				ready = ready0;
    54be:	1d62      	adds	r2, r4, #5
			synchronized {
    54c0:	3b01      	subs	r3, #1
    54c2:	d302      	bcc.n	54ca <_ZNK26DoubleBufferedEPOutHandler9availableEv+0x1e>
				ready = ready0;
    54c4:	7fd5      	ldrb	r5, [r2, #31]
    54c6:	b2ed      	uxtb	r5, r5
    54c8:	e7fa      	b.n	54c0 <_ZNK26DoubleBufferedEPOutHandler9availableEv+0x14>
			synchronized {
    54ca:	4668      	mov	r0, sp
    54cc:	9301      	str	r3, [sp, #4]
    54ce:	f7ff ffe6 	bl	549e <_ZN7__GuardD1Ev>
			}
			return ready ? (last0 - first0) : 0;
    54d2:	2d00      	cmp	r5, #0
    54d4:	d101      	bne.n	54da <_ZNK26DoubleBufferedEPOutHandler9availableEv+0x2e>
    54d6:	2000      	movs	r0, #0
			synchronized {
				ready = ready1;
			}
			return ready ? (last1 - first1) : 0;
		}
	}
    54d8:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
			return ready ? (last0 - first0) : 0;
    54da:	6a20      	ldr	r0, [r4, #32]
    54dc:	69e3      	ldr	r3, [r4, #28]
			return ready ? (last1 - first1) : 0;
    54de:	1ac0      	subs	r0, r0, r3
    54e0:	e7fa      	b.n	54d8 <_ZNK26DoubleBufferedEPOutHandler9availableEv+0x2c>
			synchronized {
    54e2:	f7ff ffd5 	bl	5490 <_ZN7__GuardC1Ev>
				ready = ready1;
    54e6:	0022      	movs	r2, r4
			bool ready = false;
    54e8:	2500      	movs	r5, #0
    54ea:	9b01      	ldr	r3, [sp, #4]
				ready = ready1;
    54ec:	3234      	adds	r2, #52	; 0x34
			synchronized {
    54ee:	3b01      	subs	r3, #1
    54f0:	d302      	bcc.n	54f8 <_ZNK26DoubleBufferedEPOutHandler9availableEv+0x4c>
				ready = ready1;
    54f2:	7815      	ldrb	r5, [r2, #0]
    54f4:	b2ed      	uxtb	r5, r5
			synchronized {
    54f6:	e7fa      	b.n	54ee <_ZNK26DoubleBufferedEPOutHandler9availableEv+0x42>
    54f8:	4668      	mov	r0, sp
    54fa:	9301      	str	r3, [sp, #4]
    54fc:	f7ff ffcf 	bl	549e <_ZN7__GuardD1Ev>
			return ready ? (last1 - first1) : 0;
    5500:	2d00      	cmp	r5, #0
    5502:	d0e8      	beq.n	54d6 <_ZNK26DoubleBufferedEPOutHandler9availableEv+0x2a>
    5504:	6b20      	ldr	r0, [r4, #48]	; 0x30
    5506:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    5508:	e7e9      	b.n	54de <_ZNK26DoubleBufferedEPOutHandler9availableEv+0x32>
	...

0000550c <_ZN26DoubleBufferedEPOutHandler7releaseEv>:

	void release() {
    550c:	b5f0      	push	{r4, r5, r6, r7, lr}
	inline void epBank0EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT0 = 1; }
    550e:	2501      	movs	r5, #1
		// Release OUT EP
		usbd.epBank0EnableTransferComplete(ep);
    5510:	6846      	ldr	r6, [r0, #4]
	inline void epBank0EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT0 = 1; }
    5512:	7a03      	ldrb	r3, [r0, #8]
    5514:	6831      	ldr	r1, [r6, #0]
    5516:	015a      	lsls	r2, r3, #5
    5518:	188c      	adds	r4, r1, r2
    551a:	34ff      	adds	r4, #255	; 0xff
    551c:	7aa7      	ldrb	r7, [r4, #10]
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
    551e:	18b2      	adds	r2, r6, r2
	inline void epBank0EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT0 = 1; }
    5520:	433d      	orrs	r5, r7
    5522:	72a5      	strb	r5, [r4, #10]
		usbd.epBank0SetMultiPacketSize(ep, size);
    5524:	68c4      	ldr	r4, [r0, #12]
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
    5526:	4d09      	ldr	r5, [pc, #36]	; (554c <_ZN26DoubleBufferedEPOutHandler7releaseEv+0x40>)
    5528:	6890      	ldr	r0, [r2, #8]
    552a:	04a4      	lsls	r4, r4, #18
    552c:	4028      	ands	r0, r5
    552e:	0924      	lsrs	r4, r4, #4
    5530:	4320      	orrs	r0, r4
    5532:	6090      	str	r0, [r2, #8]
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
    5534:	6890      	ldr	r0, [r2, #8]
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
    5536:	3308      	adds	r3, #8
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
    5538:	0b80      	lsrs	r0, r0, #14
    553a:	0380      	lsls	r0, r0, #14
    553c:	6090      	str	r0, [r2, #8]
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
    553e:	2240      	movs	r2, #64	; 0x40
    5540:	015b      	lsls	r3, r3, #5
    5542:	18cb      	adds	r3, r1, r3
    5544:	7919      	ldrb	r1, [r3, #4]
    5546:	430a      	orrs	r2, r1
    5548:	711a      	strb	r2, [r3, #4]
		usbd.epBank0SetByteCount(ep, 0);
		usbd.epBank0ResetReady(ep);
	}
    554a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    554c:	f0003fff 	.word	0xf0003fff

00005550 <_ZN26DoubleBufferedEPOutHandler4recvEPvm>:
	virtual uint32_t recv(void *_data, uint32_t len)
    5550:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
		if (current == 0) {
    5552:	6903      	ldr	r3, [r0, #16]
	virtual uint32_t recv(void *_data, uint32_t len)
    5554:	0004      	movs	r4, r0
    5556:	000e      	movs	r6, r1
    5558:	0017      	movs	r7, r2
			synchronized {
    555a:	4668      	mov	r0, sp
		if (current == 0) {
    555c:	2b00      	cmp	r3, #0
    555e:	d13d      	bne.n	55dc <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x8c>
			synchronized {
    5560:	f7ff ff96 	bl	5490 <_ZN7__GuardC1Ev>
    5564:	9b01      	ldr	r3, [sp, #4]
				if (!ready0) {
    5566:	1d61      	adds	r1, r4, #5
    5568:	3b01      	subs	r3, #1
			synchronized {
    556a:	1c5a      	adds	r2, r3, #1
    556c:	d00c      	beq.n	5588 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x38>
				if (!ready0) {
    556e:	7fcd      	ldrb	r5, [r1, #31]
    5570:	1e5a      	subs	r2, r3, #1
    5572:	b2ed      	uxtb	r5, r5
    5574:	2d00      	cmp	r5, #0
    5576:	d105      	bne.n	5584 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x34>
				synchronized {
    5578:	4668      	mov	r0, sp
    557a:	9301      	str	r3, [sp, #4]
    557c:	f7ff ff8f 	bl	549e <_ZN7__GuardD1Ev>
	}
    5580:	0028      	movs	r0, r5
    5582:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    5584:	0013      	movs	r3, r2
    5586:	e7f0      	b.n	556a <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x1a>
			synchronized {
    5588:	4668      	mov	r0, sp
    558a:	9301      	str	r3, [sp, #4]
			for (i=0; i<len && first0 < last0; i++) {
    558c:	2500      	movs	r5, #0
			synchronized {
    558e:	f7ff ff86 	bl	549e <_ZN7__GuardD1Ev>
    5592:	69e3      	ldr	r3, [r4, #28]
			for (i=0; i<len && first0 < last0; i++) {
    5594:	42af      	cmp	r7, r5
    5596:	d002      	beq.n	559e <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x4e>
    5598:	6a22      	ldr	r2, [r4, #32]
    559a:	4293      	cmp	r3, r2
    559c:	d357      	bcc.n	564e <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0xfe>
			if (first0 == last0) {
    559e:	6a22      	ldr	r2, [r4, #32]
    55a0:	4293      	cmp	r3, r2
    55a2:	d1ed      	bne.n	5580 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x30>
				first0 = 0;
    55a4:	2300      	movs	r3, #0
    55a6:	61e3      	str	r3, [r4, #28]
				current = 1;
    55a8:	3301      	adds	r3, #1
    55aa:	6123      	str	r3, [r4, #16]
				synchronized {
    55ac:	4668      	mov	r0, sp
    55ae:	f7ff ff6f 	bl	5490 <_ZN7__GuardC1Ev>
					if (notify) {
    55b2:	0022      	movs	r2, r4
					ready0 = false;
    55b4:	2100      	movs	r1, #0
    55b6:	9b01      	ldr	r3, [sp, #4]
    55b8:	1d67      	adds	r7, r4, #5
    55ba:	3b01      	subs	r3, #1
					if (notify) {
    55bc:	3235      	adds	r2, #53	; 0x35
				synchronized {
    55be:	1c58      	adds	r0, r3, #1
    55c0:	d0da      	beq.n	5578 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x28>
					ready0 = false;
    55c2:	77f9      	strb	r1, [r7, #31]
					if (notify) {
    55c4:	7810      	ldrb	r0, [r2, #0]
    55c6:	1e5e      	subs	r6, r3, #1
    55c8:	2800      	cmp	r0, #0
    55ca:	d005      	beq.n	55d8 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x88>
						notify = false;
    55cc:	7011      	strb	r1, [r2, #0]
						release();
    55ce:	0020      	movs	r0, r4
    55d0:	9301      	str	r3, [sp, #4]
    55d2:	f7ff ff9b 	bl	550c <_ZN26DoubleBufferedEPOutHandler7releaseEv>
    55d6:	e7ec      	b.n	55b2 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x62>
					if (notify) {
    55d8:	0033      	movs	r3, r6
    55da:	e7f0      	b.n	55be <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x6e>
			synchronized {
    55dc:	f7ff ff58 	bl	5490 <_ZN7__GuardC1Ev>
				if (!ready1) {
    55e0:	0021      	movs	r1, r4
    55e2:	9b01      	ldr	r3, [sp, #4]
    55e4:	3134      	adds	r1, #52	; 0x34
    55e6:	3b01      	subs	r3, #1
			synchronized {
    55e8:	1c5a      	adds	r2, r3, #1
    55ea:	d006      	beq.n	55fa <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0xaa>
				if (!ready1) {
    55ec:	780d      	ldrb	r5, [r1, #0]
    55ee:	1e5a      	subs	r2, r3, #1
    55f0:	b2ed      	uxtb	r5, r5
    55f2:	2d00      	cmp	r5, #0
    55f4:	d0c0      	beq.n	5578 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x28>
    55f6:	0013      	movs	r3, r2
    55f8:	e7f6      	b.n	55e8 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x98>
			synchronized {
    55fa:	4668      	mov	r0, sp
    55fc:	9301      	str	r3, [sp, #4]
			for (i=0; i<len && first1 < last1; i++) {
    55fe:	2500      	movs	r5, #0
			synchronized {
    5600:	f7ff ff4d 	bl	549e <_ZN7__GuardD1Ev>
    5604:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
			for (i=0; i<len && first1 < last1; i++) {
    5606:	42bd      	cmp	r5, r7
    5608:	d002      	beq.n	5610 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0xc0>
    560a:	6b22      	ldr	r2, [r4, #48]	; 0x30
    560c:	4293      	cmp	r3, r2
    560e:	d326      	bcc.n	565e <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x10e>
			if (first1 == last1) {
    5610:	6b22      	ldr	r2, [r4, #48]	; 0x30
    5612:	4293      	cmp	r3, r2
    5614:	d1b4      	bne.n	5580 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x30>
				first1 = 0;
    5616:	2300      	movs	r3, #0
				synchronized {
    5618:	4668      	mov	r0, sp
				first1 = 0;
    561a:	62e3      	str	r3, [r4, #44]	; 0x2c
				current = 0;
    561c:	6123      	str	r3, [r4, #16]
				synchronized {
    561e:	f7ff ff37 	bl	5490 <_ZN7__GuardC1Ev>
					ready1 = false;
    5622:	0027      	movs	r7, r4
					if (notify) {
    5624:	0022      	movs	r2, r4
					ready1 = false;
    5626:	2100      	movs	r1, #0
    5628:	9b01      	ldr	r3, [sp, #4]
    562a:	3734      	adds	r7, #52	; 0x34
    562c:	3b01      	subs	r3, #1
					if (notify) {
    562e:	3235      	adds	r2, #53	; 0x35
				synchronized {
    5630:	1c58      	adds	r0, r3, #1
    5632:	d0a1      	beq.n	5578 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x28>
					ready1 = false;
    5634:	7039      	strb	r1, [r7, #0]
					if (notify) {
    5636:	7810      	ldrb	r0, [r2, #0]
    5638:	1e5e      	subs	r6, r3, #1
    563a:	2800      	cmp	r0, #0
    563c:	d005      	beq.n	564a <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0xfa>
						notify = false;
    563e:	7011      	strb	r1, [r2, #0]
						release();
    5640:	0020      	movs	r0, r4
    5642:	9301      	str	r3, [sp, #4]
    5644:	f7ff ff62 	bl	550c <_ZN26DoubleBufferedEPOutHandler7releaseEv>
    5648:	e7eb      	b.n	5622 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0xd2>
    564a:	0033      	movs	r3, r6
    564c:	e7f0      	b.n	5630 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0xe0>
				data[i] = data0[first0++];
    564e:	1c5a      	adds	r2, r3, #1
    5650:	61e2      	str	r2, [r4, #28]
    5652:	69a2      	ldr	r2, [r4, #24]
    5654:	18d3      	adds	r3, r2, r3
    5656:	781b      	ldrb	r3, [r3, #0]
    5658:	5573      	strb	r3, [r6, r5]
			for (i=0; i<len && first0 < last0; i++) {
    565a:	3501      	adds	r5, #1
    565c:	e799      	b.n	5592 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x42>
				data[i] = data1[first1++];
    565e:	1c5a      	adds	r2, r3, #1
    5660:	62e2      	str	r2, [r4, #44]	; 0x2c
    5662:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    5664:	18d3      	adds	r3, r2, r3
    5666:	781b      	ldrb	r3, [r3, #0]
    5668:	5573      	strb	r3, [r6, r5]
			for (i=0; i<len && first1 < last1; i++) {
    566a:	3501      	adds	r5, #1
    566c:	e7ca      	b.n	5604 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0xb4>

0000566e <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv>:
	virtual void handleEndpoint()
    566e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	inline bool epBank0IsTransferComplete(ep_t ep)  { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.TRCPT0; }
    5670:	7a02      	ldrb	r2, [r0, #8]
		if (usbd.epBank0IsTransferComplete(ep))
    5672:	6843      	ldr	r3, [r0, #4]
	inline bool epBank0IsTransferComplete(ep_t ep)  { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.TRCPT0; }
    5674:	0011      	movs	r1, r2
	virtual void handleEndpoint()
    5676:	0004      	movs	r4, r0
	inline bool epBank0IsTransferComplete(ep_t ep)  { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.TRCPT0; }
    5678:	3108      	adds	r1, #8
    567a:	6818      	ldr	r0, [r3, #0]
    567c:	0149      	lsls	r1, r1, #5
    567e:	1841      	adds	r1, r0, r1
    5680:	79c8      	ldrb	r0, [r1, #7]
		if (usbd.epBank0IsTransferComplete(ep))
    5682:	07c0      	lsls	r0, r0, #31
    5684:	d527      	bpl.n	56d6 <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0x68>
	inline void epBank0AckTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT(1); }
    5686:	2501      	movs	r5, #1
    5688:	0152      	lsls	r2, r2, #5
    568a:	71cd      	strb	r5, [r1, #7]
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
    568c:	189b      	adds	r3, r3, r2
    568e:	689a      	ldr	r2, [r3, #8]
			if (incoming == 0) {
    5690:	6961      	ldr	r1, [r4, #20]
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
    5692:	0492      	lsls	r2, r2, #18
    5694:	0c92      	lsrs	r2, r2, #18
			if (incoming == 0) {
    5696:	2900      	cmp	r1, #0
    5698:	d121      	bne.n	56de <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0x70>
				last0 = usbd.epBank0ByteCount(ep);
    569a:	6222      	str	r2, [r4, #32]
				if (last0 != 0) {
    569c:	6a22      	ldr	r2, [r4, #32]
    569e:	2a00      	cmp	r2, #0
    56a0:	d03e      	beq.n	5720 <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0xb2>
	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
    56a2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
					incoming = 1;
    56a4:	6165      	str	r5, [r4, #20]
					synchronized {
    56a6:	4668      	mov	r0, sp
	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
    56a8:	605a      	str	r2, [r3, #4]
					synchronized {
    56aa:	f7ff fef1 	bl	5490 <_ZN7__GuardC1Ev>
						if (ready1) {
    56ae:	0027      	movs	r7, r4
    56b0:	0021      	movs	r1, r4
    56b2:	9b01      	ldr	r3, [sp, #4]
						ready0 = true;
    56b4:	1d66      	adds	r6, r4, #5
    56b6:	3b01      	subs	r3, #1
						if (ready1) {
    56b8:	3734      	adds	r7, #52	; 0x34
    56ba:	3135      	adds	r1, #53	; 0x35
					synchronized {
    56bc:	1c5a      	adds	r2, r3, #1
    56be:	d02b      	beq.n	5718 <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0xaa>
						ready0 = true;
    56c0:	77f5      	strb	r5, [r6, #31]
						if (ready1) {
    56c2:	783a      	ldrb	r2, [r7, #0]
    56c4:	1e58      	subs	r0, r3, #1
    56c6:	b2d2      	uxtb	r2, r2
    56c8:	2a00      	cmp	r2, #0
    56ca:	d005      	beq.n	56d8 <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0x6a>
    56cc:	9301      	str	r3, [sp, #4]
							return;
    56ce:	4668      	mov	r0, sp
							notify = true;
    56d0:	700d      	strb	r5, [r1, #0]
							return;
    56d2:	f7ff fee4 	bl	549e <_ZN7__GuardD1Ev>
	}
    56d6:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
						notify = false;
    56d8:	700a      	strb	r2, [r1, #0]
					synchronized {
    56da:	0003      	movs	r3, r0
    56dc:	e7ee      	b.n	56bc <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0x4e>
				last1 = usbd.epBank0ByteCount(ep);
    56de:	6322      	str	r2, [r4, #48]	; 0x30
				if (last1 != 0) {
    56e0:	6b22      	ldr	r2, [r4, #48]	; 0x30
    56e2:	2a00      	cmp	r2, #0
    56e4:	d01c      	beq.n	5720 <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0xb2>
					incoming = 0;
    56e6:	2200      	movs	r2, #0
    56e8:	6162      	str	r2, [r4, #20]
	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
    56ea:	69a2      	ldr	r2, [r4, #24]
					synchronized {
    56ec:	4668      	mov	r0, sp
	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
    56ee:	605a      	str	r2, [r3, #4]
					synchronized {
    56f0:	f7ff fece 	bl	5490 <_ZN7__GuardC1Ev>
						ready1 = true;
    56f4:	0026      	movs	r6, r4
    56f6:	0021      	movs	r1, r4
    56f8:	9b01      	ldr	r3, [sp, #4]
    56fa:	3634      	adds	r6, #52	; 0x34
    56fc:	3b01      	subs	r3, #1
						if (ready0) {
    56fe:	1d67      	adds	r7, r4, #5
    5700:	3135      	adds	r1, #53	; 0x35
					synchronized {
    5702:	1c5a      	adds	r2, r3, #1
    5704:	d008      	beq.n	5718 <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0xaa>
						ready1 = true;
    5706:	7035      	strb	r5, [r6, #0]
						if (ready0) {
    5708:	7ffa      	ldrb	r2, [r7, #31]
    570a:	1e58      	subs	r0, r3, #1
    570c:	b2d2      	uxtb	r2, r2
    570e:	2a00      	cmp	r2, #0
    5710:	d1dc      	bne.n	56cc <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0x5e>
						notify = false;
    5712:	700a      	strb	r2, [r1, #0]
					synchronized {
    5714:	0003      	movs	r3, r0
    5716:	e7f4      	b.n	5702 <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0x94>
    5718:	4668      	mov	r0, sp
    571a:	9301      	str	r3, [sp, #4]
    571c:	f7ff febf 	bl	549e <_ZN7__GuardD1Ev>
			release();
    5720:	0020      	movs	r0, r4
    5722:	f7ff fef3 	bl	550c <_ZN26DoubleBufferedEPOutHandler7releaseEv>
    5726:	e7d6      	b.n	56d6 <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0x68>

00005728 <_ZN14USBDeviceClass14SendInterfacesEPm>:
{
    5728:	b537      	push	{r0, r1, r2, r4, r5, lr}
	uint8_t interfaces = 0;
    572a:	466b      	mov	r3, sp
    572c:	1ddc      	adds	r4, r3, #7
    572e:	2300      	movs	r3, #0
{
    5730:	000d      	movs	r5, r1
	total[0] += CDC_GetInterface(&interfaces);
    5732:	0020      	movs	r0, r4
	uint8_t interfaces = 0;
    5734:	7023      	strb	r3, [r4, #0]
	total[0] += CDC_GetInterface(&interfaces);
    5736:	f7ff fd65 	bl	5204 <_Z16CDC_GetInterfacePh>
    573a:	682b      	ldr	r3, [r5, #0]
    573c:	1818      	adds	r0, r3, r0
    573e:	6028      	str	r0, [r5, #0]
	total[0] += PluggableUSB().getInterface(&interfaces);
    5740:	f001 fb5e 	bl	6e00 <_Z12PluggableUSBv>
    5744:	0021      	movs	r1, r4
    5746:	f001 fb17 	bl	6d78 <_ZN13PluggableUSB_12getInterfaceEPh>
    574a:	682b      	ldr	r3, [r5, #0]
    574c:	1818      	adds	r0, r3, r0
    574e:	6028      	str	r0, [r5, #0]
	return interfaces;
    5750:	7820      	ldrb	r0, [r4, #0]
}
    5752:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

00005754 <_ZN14USBDeviceClass14handleEndpointEh>:
	if (ep == CDC_ENDPOINT_IN)
    5754:	2903      	cmp	r1, #3
    5756:	d10e      	bne.n	5776 <_ZN14USBDeviceClass14handleEndpointEh+0x22>
	inline void epBank1ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK1RDY = 1; }
    5758:	2280      	movs	r2, #128	; 0x80
    575a:	4b0e      	ldr	r3, [pc, #56]	; (5794 <_ZN14USBDeviceClass14handleEndpointEh+0x40>)
    575c:	3162      	adds	r1, #98	; 0x62
    575e:	681b      	ldr	r3, [r3, #0]
    5760:	31ff      	adds	r1, #255	; 0xff
    5762:	5c58      	ldrb	r0, [r3, r1]
    5764:	4252      	negs	r2, r2
    5766:	4302      	orrs	r2, r0
    5768:	545a      	strb	r2, [r3, r1]
	inline void epBank1AckTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT(2); }
    576a:	2268      	movs	r2, #104	; 0x68
    576c:	3963      	subs	r1, #99	; 0x63
    576e:	39ff      	subs	r1, #255	; 0xff
    5770:	32ff      	adds	r2, #255	; 0xff
    5772:	5499      	strb	r1, [r3, r2]
}
    5774:	4770      	bx	lr
	if (ep == CDC_ENDPOINT_ACM)
    5776:	2901      	cmp	r1, #1
    5778:	d1fc      	bne.n	5774 <_ZN14USBDeviceClass14handleEndpointEh+0x20>
	inline void epBank1ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK1RDY = 1; }
    577a:	2280      	movs	r2, #128	; 0x80
    577c:	4b05      	ldr	r3, [pc, #20]	; (5794 <_ZN14USBDeviceClass14handleEndpointEh+0x40>)
    577e:	3124      	adds	r1, #36	; 0x24
    5780:	681b      	ldr	r3, [r3, #0]
    5782:	31ff      	adds	r1, #255	; 0xff
    5784:	5c58      	ldrb	r0, [r3, r1]
    5786:	4252      	negs	r2, r2
    5788:	4302      	orrs	r2, r0
    578a:	545a      	strb	r2, [r3, r1]
	inline void epBank1AckTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT(2); }
    578c:	3923      	subs	r1, #35	; 0x23
    578e:	39ff      	subs	r1, #255	; 0xff
    5790:	2228      	movs	r2, #40	; 0x28
    5792:	e7ed      	b.n	5770 <_ZN14USBDeviceClass14handleEndpointEh+0x1c>
    5794:	20000a98 	.word	0x20000a98

00005798 <_ZN14USBDeviceClass4initEv>:
	PM->APBBMASK.reg |= PM_APBBMASK_USB;
    5798:	2320      	movs	r3, #32
{
    579a:	b570      	push	{r4, r5, r6, lr}
	PM->APBBMASK.reg |= PM_APBBMASK_USB;
    579c:	4a25      	ldr	r2, [pc, #148]	; (5834 <_ZN14USBDeviceClass4initEv+0x9c>)
{
    579e:	0004      	movs	r4, r0
	PM->APBBMASK.reg |= PM_APBBMASK_USB;
    57a0:	69d1      	ldr	r1, [r2, #28]
	PORT->Group[0].PMUX[PIN_PA24G_USB_DM/2].reg &= ~(0xF << (4 * (PIN_PA24G_USB_DM & 0x01u)));
    57a2:	200f      	movs	r0, #15
	PM->APBBMASK.reg |= PM_APBBMASK_USB;
    57a4:	430b      	orrs	r3, r1
    57a6:	61d3      	str	r3, [r2, #28]
	PORT->Group[0].PINCFG[PIN_PA24G_USB_DM].bit.PMUXEN = 1;
    57a8:	2201      	movs	r2, #1
    57aa:	4923      	ldr	r1, [pc, #140]	; (5838 <_ZN14USBDeviceClass4initEv+0xa0>)
    57ac:	780b      	ldrb	r3, [r1, #0]
    57ae:	4313      	orrs	r3, r2
    57b0:	700b      	strb	r3, [r1, #0]
	PORT->Group[0].PMUX[PIN_PA24G_USB_DM/2].reg &= ~(0xF << (4 * (PIN_PA24G_USB_DM & 0x01u)));
    57b2:	4b22      	ldr	r3, [pc, #136]	; (583c <_ZN14USBDeviceClass4initEv+0xa4>)
    57b4:	7819      	ldrb	r1, [r3, #0]
    57b6:	4381      	bics	r1, r0
    57b8:	7019      	strb	r1, [r3, #0]
	PORT->Group[0].PMUX[PIN_PA24G_USB_DM/2].reg |= MUX_PA24G_USB_DM << (4 * (PIN_PA24G_USB_DM & 0x01u));
    57ba:	2106      	movs	r1, #6
    57bc:	781d      	ldrb	r5, [r3, #0]
    57be:	4329      	orrs	r1, r5
    57c0:	7019      	strb	r1, [r3, #0]
	PORT->Group[0].PINCFG[PIN_PA25G_USB_DP].bit.PMUXEN = 1;
    57c2:	491f      	ldr	r1, [pc, #124]	; (5840 <_ZN14USBDeviceClass4initEv+0xa8>)
    57c4:	780d      	ldrb	r5, [r1, #0]
    57c6:	432a      	orrs	r2, r5
    57c8:	700a      	strb	r2, [r1, #0]
	PORT->Group[0].PMUX[PIN_PA25G_USB_DP/2].reg &= ~(0xF << (4 * (PIN_PA25G_USB_DP & 0x01u)));
    57ca:	781a      	ldrb	r2, [r3, #0]
    57cc:	4002      	ands	r2, r0
    57ce:	701a      	strb	r2, [r3, #0]
	PORT->Group[0].PMUX[PIN_PA25G_USB_DP/2].reg |= MUX_PA25G_USB_DP << (4 * (PIN_PA25G_USB_DP & 0x01u));
    57d0:	2260      	movs	r2, #96	; 0x60
    57d2:	7819      	ldrb	r1, [r3, #0]
    57d4:	430a      	orrs	r2, r1
    57d6:	701a      	strb	r2, [r3, #0]
	GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(6)     | // Generic Clock Multiplexer 6
    57d8:	4b1a      	ldr	r3, [pc, #104]	; (5844 <_ZN14USBDeviceClass4initEv+0xac>)
    57da:	4a1b      	ldr	r2, [pc, #108]	; (5848 <_ZN14USBDeviceClass4initEv+0xb0>)
    57dc:	805a      	strh	r2, [r3, #2]
	while (GCLK->STATUS.bit.SYNCBUSY)
    57de:	785a      	ldrb	r2, [r3, #1]
    57e0:	09d2      	lsrs	r2, r2, #7
    57e2:	d1fc      	bne.n	57de <_ZN14USBDeviceClass4initEv+0x46>
	USB_SetHandler(&UDD_Handler);
    57e4:	4819      	ldr	r0, [pc, #100]	; (584c <_ZN14USBDeviceClass4initEv+0xb4>)
    57e6:	f7ff fac5 	bl	4d74 <USB_SetHandler>
	usbd.reset();
    57ea:	4d19      	ldr	r5, [pc, #100]	; (5850 <_ZN14USBDeviceClass4initEv+0xb8>)
    57ec:	0028      	movs	r0, r5
    57ee:	f7ff fe0d 	bl	540c <_ZN20USBDevice_SAMD21G18x5resetEv>
	usbd.calibrate();
    57f2:	0028      	movs	r0, r5
    57f4:	f7ff fe1c 	bl	5430 <_ZN20USBDevice_SAMD21G18x9calibrateEv>
	inline void setUSBDeviceMode() { usb.CTRLA.bit.MODE = USB_CTRLA_MODE_DEVICE_Val; }
    57f8:	217f      	movs	r1, #127	; 0x7f
    57fa:	682b      	ldr	r3, [r5, #0]
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    57fc:	20c1      	movs	r0, #193	; 0xc1
    57fe:	781a      	ldrb	r2, [r3, #0]
    5800:	0080      	lsls	r0, r0, #2
    5802:	400a      	ands	r2, r1
    5804:	701a      	strb	r2, [r3, #0]
	inline void runInStandby()   { usb.CTRLA.bit.RUNSTDBY = 1; }
    5806:	2204      	movs	r2, #4
    5808:	7819      	ldrb	r1, [r3, #0]
    580a:	430a      	orrs	r2, r1
	inline void setFullSpeed()       { usb.CTRLB.bit.SPDCONF = USB_DEVICE_CTRLB_SPDCONF_FS_Val;   }
    580c:	210c      	movs	r1, #12
	inline void runInStandby()   { usb.CTRLA.bit.RUNSTDBY = 1; }
    580e:	701a      	strb	r2, [r3, #0]
	inline void setFullSpeed()       { usb.CTRLB.bit.SPDCONF = USB_DEVICE_CTRLB_SPDCONF_FS_Val;   }
    5810:	891a      	ldrh	r2, [r3, #8]
    5812:	438a      	bics	r2, r1
    5814:	490f      	ldr	r1, [pc, #60]	; (5854 <_ZN14USBDeviceClass4initEv+0xbc>)
    5816:	811a      	strh	r2, [r3, #8]
    5818:	580a      	ldr	r2, [r1, r0]
    581a:	0212      	lsls	r2, r2, #8
    581c:	0a12      	lsrs	r2, r2, #8
    581e:	500a      	str	r2, [r1, r0]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    5820:	2280      	movs	r2, #128	; 0x80
    5822:	600a      	str	r2, [r1, #0]
	inline void enable()  { usb.CTRLA.bit.ENABLE = 1; }
    5824:	7819      	ldrb	r1, [r3, #0]
    5826:	3a7e      	subs	r2, #126	; 0x7e
    5828:	430a      	orrs	r2, r1
    582a:	701a      	strb	r2, [r3, #0]
	initialized = true;
    582c:	2301      	movs	r3, #1
    582e:	7023      	strb	r3, [r4, #0]
}
    5830:	bd70      	pop	{r4, r5, r6, pc}
    5832:	46c0      	nop			; (mov r8, r8)
    5834:	40000400 	.word	0x40000400
    5838:	41004458 	.word	0x41004458
    583c:	4100443c 	.word	0x4100443c
    5840:	41004459 	.word	0x41004459
    5844:	40000c00 	.word	0x40000c00
    5848:	00004006 	.word	0x00004006
    584c:	000061b1 	.word	0x000061b1
    5850:	20000a98 	.word	0x20000a98
    5854:	e000e100 	.word	0xe000e100

00005858 <_ZN14USBDeviceClass6attachEv>:
	if (!initialized)
    5858:	7800      	ldrb	r0, [r0, #0]
    585a:	2800      	cmp	r0, #0
    585c:	d010      	beq.n	5880 <_ZN14USBDeviceClass6attachEv+0x28>
	inline void attach() { usb.CTRLB.bit.DETACH = 0; }
    585e:	2101      	movs	r1, #1
    5860:	4b08      	ldr	r3, [pc, #32]	; (5884 <_ZN14USBDeviceClass6attachEv+0x2c>)
    5862:	681b      	ldr	r3, [r3, #0]
    5864:	891a      	ldrh	r2, [r3, #8]
    5866:	438a      	bics	r2, r1
    5868:	811a      	strh	r2, [r3, #8]
	inline void enableEndOfResetInterrupt()    { usb.INTENSET.bit.EORST = 1; }
    586a:	2208      	movs	r2, #8
    586c:	8b19      	ldrh	r1, [r3, #24]
    586e:	430a      	orrs	r2, r1
    5870:	831a      	strh	r2, [r3, #24]
	inline void enableStartOfFrameInterrupt()  { usb.INTENSET.bit.SOF = 1; }
    5872:	2204      	movs	r2, #4
    5874:	8b19      	ldrh	r1, [r3, #24]
    5876:	430a      	orrs	r2, r1
    5878:	831a      	strh	r2, [r3, #24]
	_usbConfiguration = 0;
    587a:	2200      	movs	r2, #0
    587c:	4b02      	ldr	r3, [pc, #8]	; (5888 <_ZN14USBDeviceClass6attachEv+0x30>)
    587e:	601a      	str	r2, [r3, #0]
}
    5880:	4770      	bx	lr
    5882:	46c0      	nop			; (mov r8, r8)
    5884:	20000a98 	.word	0x20000a98
    5888:	20000a90 	.word	0x20000a90

0000588c <_ZN14USBDeviceClass10setAddressEm>:
{
    588c:	b510      	push	{r4, lr}
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
    588e:	4a0f      	ldr	r2, [pc, #60]	; (58cc <_ZN14USBDeviceClass10setAddressEm+0x40>)
    5890:	6993      	ldr	r3, [r2, #24]
    5892:	0b9b      	lsrs	r3, r3, #14
    5894:	039b      	lsls	r3, r3, #14
    5896:	6193      	str	r3, [r2, #24]
	inline void epBank1AckTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT(2); }
    5898:	6813      	ldr	r3, [r2, #0]
    589a:	2202      	movs	r2, #2
    589c:	33ff      	adds	r3, #255	; 0xff
    589e:	721a      	strb	r2, [r3, #8]
	inline void epBank1SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK1RDY = 1; }
    58a0:	7998      	ldrb	r0, [r3, #6]
    58a2:	3a82      	subs	r2, #130	; 0x82
    58a4:	4302      	orrs	r2, r0
    58a6:	719a      	strb	r2, [r3, #6]
	inline bool epBank1IsTransferComplete(ep_t ep)  { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.TRCPT1; }
    58a8:	7a1a      	ldrb	r2, [r3, #8]
	while (!usbd.epBank1IsTransferComplete(0)) {}
    58aa:	0792      	lsls	r2, r2, #30
    58ac:	d5fc      	bpl.n	58a8 <_ZN14USBDeviceClass10setAddressEm+0x1c>
	USB->DEVICE.DADD.bit.DADD = addr; // Address
    58ae:	247f      	movs	r4, #127	; 0x7f
    58b0:	4a07      	ldr	r2, [pc, #28]	; (58d0 <_ZN14USBDeviceClass10setAddressEm+0x44>)
    58b2:	4021      	ands	r1, r4
    58b4:	7a93      	ldrb	r3, [r2, #10]
    58b6:	0008      	movs	r0, r1
    58b8:	43a3      	bics	r3, r4
    58ba:	0019      	movs	r1, r3
	USB->DEVICE.DADD.bit.ADDEN = 1; // Enable
    58bc:	2380      	movs	r3, #128	; 0x80
	USB->DEVICE.DADD.bit.DADD = addr; // Address
    58be:	4301      	orrs	r1, r0
    58c0:	7291      	strb	r1, [r2, #10]
	USB->DEVICE.DADD.bit.ADDEN = 1; // Enable
    58c2:	7a91      	ldrb	r1, [r2, #10]
    58c4:	425b      	negs	r3, r3
    58c6:	430b      	orrs	r3, r1
    58c8:	7293      	strb	r3, [r2, #10]
}
    58ca:	bd10      	pop	{r4, pc}
    58cc:	20000a98 	.word	0x20000a98
    58d0:	41005000 	.word	0x41005000

000058d4 <_ZN14USBDeviceClass25handleClassInterfaceSetupER8USBSetup>:
{
    58d4:	b510      	push	{r4, lr}
	if (CDC_ACM_INTERFACE == i)
    58d6:	790b      	ldrb	r3, [r1, #4]
{
    58d8:	000c      	movs	r4, r1
	if (CDC_ACM_INTERFACE == i)
    58da:	2b00      	cmp	r3, #0
    58dc:	d10c      	bne.n	58f8 <_ZN14USBDeviceClass25handleClassInterfaceSetupER8USBSetup+0x24>
		if (CDC_Setup(setup) == false) {
    58de:	0008      	movs	r0, r1
    58e0:	f7ff fc9e 	bl	5220 <_Z9CDC_SetupR8USBSetup>
    58e4:	2800      	cmp	r0, #0
    58e6:	d001      	beq.n	58ec <_ZN14USBDeviceClass25handleClassInterfaceSetupER8USBSetup+0x18>
		return true;
    58e8:	2001      	movs	r0, #1
}
    58ea:	bd10      	pop	{r4, pc}
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
    58ec:	4a09      	ldr	r2, [pc, #36]	; (5914 <_ZN14USBDeviceClass25handleClassInterfaceSetupER8USBSetup+0x40>)
    58ee:	6993      	ldr	r3, [r2, #24]
    58f0:	0b9b      	lsrs	r3, r3, #14
    58f2:	039b      	lsls	r3, r3, #14
    58f4:	6193      	str	r3, [r2, #24]
    58f6:	e7f7      	b.n	58e8 <_ZN14USBDeviceClass25handleClassInterfaceSetupER8USBSetup+0x14>
	bool ret = PluggableUSB().setup(setup);
    58f8:	f001 fa82 	bl	6e00 <_Z12PluggableUSBv>
    58fc:	0021      	movs	r1, r4
    58fe:	f001 fa6e 	bl	6dde <_ZN13PluggableUSB_5setupER8USBSetup>
	if ( ret == false) {
    5902:	2800      	cmp	r0, #0
    5904:	d1f0      	bne.n	58e8 <_ZN14USBDeviceClass25handleClassInterfaceSetupER8USBSetup+0x14>
    5906:	4a03      	ldr	r2, [pc, #12]	; (5914 <_ZN14USBDeviceClass25handleClassInterfaceSetupER8USBSetup+0x40>)
    5908:	6993      	ldr	r3, [r2, #24]
    590a:	0b9b      	lsrs	r3, r3, #14
    590c:	039b      	lsls	r3, r3, #14
    590e:	6193      	str	r3, [r2, #24]
    5910:	e7eb      	b.n	58ea <_ZN14USBDeviceClass25handleClassInterfaceSetupER8USBSetup+0x16>
    5912:	46c0      	nop			; (mov r8, r8)
    5914:	20000a98 	.word	0x20000a98

00005918 <_ZN14USBDeviceClass6initEPEmm>:
{
    5918:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    591a:	000d      	movs	r5, r1
	if (config == (USB_ENDPOINT_TYPE_INTERRUPT | USB_ENDPOINT_IN(0)))
    591c:	2a83      	cmp	r2, #131	; 0x83
    591e:	d119      	bne.n	5954 <_ZN14USBDeviceClass6initEPEmm+0x3c>
	inline void epBank1SetSize(ep_t ep, uint16_t size) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.SIZE = EP_PCKSIZE_SIZE(size); }
    5920:	b2cb      	uxtb	r3, r1
    5922:	4c33      	ldr	r4, [pc, #204]	; (59f0 <_ZN14USBDeviceClass6initEPEmm+0xd8>)
    5924:	015a      	lsls	r2, r3, #5
    5926:	18a2      	adds	r2, r4, r2
    5928:	6991      	ldr	r1, [r2, #24]
    592a:	4832      	ldr	r0, [pc, #200]	; (59f4 <_ZN14USBDeviceClass6initEPEmm+0xdc>)
		usbd.epBank1SetAddress(ep, &udd_ep_in_cache_buffer[ep]);
    592c:	01ad      	lsls	r5, r5, #6
    592e:	4008      	ands	r0, r1
    5930:	21c0      	movs	r1, #192	; 0xc0
    5932:	0589      	lsls	r1, r1, #22
    5934:	4301      	orrs	r1, r0
    5936:	6191      	str	r1, [r2, #24]
    5938:	492f      	ldr	r1, [pc, #188]	; (59f8 <_ZN14USBDeviceClass6initEPEmm+0xe0>)
	inline void epBank1SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE1 = type; }
    593a:	6820      	ldr	r0, [r4, #0]
    593c:	194d      	adds	r5, r1, r5
    593e:	2170      	movs	r1, #112	; 0x70
    5940:	3308      	adds	r3, #8
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
    5942:	6155      	str	r5, [r2, #20]
	inline void epBank1SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE1 = type; }
    5944:	015b      	lsls	r3, r3, #5
    5946:	5c1a      	ldrb	r2, [r3, r0]
    5948:	438a      	bics	r2, r1
    594a:	0011      	movs	r1, r2
    594c:	2240      	movs	r2, #64	; 0x40
    594e:	430a      	orrs	r2, r1
    5950:	541a      	strb	r2, [r3, r0]
}
    5952:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
	else if (config == (USB_ENDPOINT_TYPE_BULK | USB_ENDPOINT_OUT(0)))
    5954:	2a02      	cmp	r2, #2
    5956:	d145      	bne.n	59e4 <_ZN14USBDeviceClass6initEPEmm+0xcc>
		if (epHandlers[ep] != NULL) {
    5958:	4a28      	ldr	r2, [pc, #160]	; (59fc <_ZN14USBDeviceClass6initEPEmm+0xe4>)
    595a:	008b      	lsls	r3, r1, #2
    595c:	5898      	ldr	r0, [r3, r2]
    595e:	2800      	cmp	r0, #0
    5960:	d002      	beq.n	5968 <_ZN14USBDeviceClass6initEPEmm+0x50>
			delete (DoubleBufferedEPOutHandler*)epHandlers[ep];
    5962:	6803      	ldr	r3, [r0, #0]
    5964:	691b      	ldr	r3, [r3, #16]
    5966:	4798      	blx	r3
		epHandlers[ep] = new DoubleBufferedEPOutHandler(usbd, ep, 256);
    5968:	2038      	movs	r0, #56	; 0x38
    596a:	f7ff fa85 	bl	4e78 <_Znwj>
		notify(false)
    596e:	4b24      	ldr	r3, [pc, #144]	; (5a00 <_ZN14USBDeviceClass6initEPEmm+0xe8>)
    5970:	2780      	movs	r7, #128	; 0x80
    5972:	6003      	str	r3, [r0, #0]
    5974:	2300      	movs	r3, #0
    5976:	4e1e      	ldr	r6, [pc, #120]	; (59f0 <_ZN14USBDeviceClass6initEPEmm+0xd8>)
    5978:	007f      	lsls	r7, r7, #1
    597a:	1d42      	adds	r2, r0, #5
    597c:	6203      	str	r3, [r0, #32]
    597e:	6103      	str	r3, [r0, #16]
    5980:	6143      	str	r3, [r0, #20]
    5982:	61c3      	str	r3, [r0, #28]
    5984:	6046      	str	r6, [r0, #4]
    5986:	6085      	str	r5, [r0, #8]
    5988:	60c7      	str	r7, [r0, #12]
    598a:	77d3      	strb	r3, [r2, #31]
    598c:	322f      	adds	r2, #47	; 0x2f
    598e:	62c3      	str	r3, [r0, #44]	; 0x2c
    5990:	6303      	str	r3, [r0, #48]	; 0x30
    5992:	0004      	movs	r4, r0
    5994:	7013      	strb	r3, [r2, #0]
		data0 = reinterpret_cast<uint8_t *>(malloc(size));
    5996:	0038      	movs	r0, r7
		notify(false)
    5998:	7053      	strb	r3, [r2, #1]
		data0 = reinterpret_cast<uint8_t *>(malloc(size));
    599a:	f003 f9c3 	bl	8d24 <malloc>
    599e:	9001      	str	r0, [sp, #4]
    59a0:	61a0      	str	r0, [r4, #24]
		data1 = reinterpret_cast<uint8_t *>(malloc(size));
    59a2:	0038      	movs	r0, r7
    59a4:	f003 f9be 	bl	8d24 <malloc>
	inline void epBank0SetSize(ep_t ep, uint16_t size) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.SIZE = EP_PCKSIZE_SIZE(size); }
    59a8:	b2eb      	uxtb	r3, r5
    59aa:	015a      	lsls	r2, r3, #5
		data1 = reinterpret_cast<uint8_t *>(malloc(size));
    59ac:	62a0      	str	r0, [r4, #40]	; 0x28
	inline void epBank0SetSize(ep_t ep, uint16_t size) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.SIZE = EP_PCKSIZE_SIZE(size); }
    59ae:	18b2      	adds	r2, r6, r2
    59b0:	6891      	ldr	r1, [r2, #8]
    59b2:	4810      	ldr	r0, [pc, #64]	; (59f4 <_ZN14USBDeviceClass6initEPEmm+0xdc>)
	inline void epBank0SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE0 = type; }
    59b4:	3308      	adds	r3, #8
	inline void epBank0SetSize(ep_t ep, uint16_t size) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.SIZE = EP_PCKSIZE_SIZE(size); }
    59b6:	4008      	ands	r0, r1
    59b8:	21c0      	movs	r1, #192	; 0xc0
    59ba:	0589      	lsls	r1, r1, #22
    59bc:	4301      	orrs	r1, r0
    59be:	6091      	str	r1, [r2, #8]
	inline void epBank0SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE0 = type; }
    59c0:	6831      	ldr	r1, [r6, #0]
    59c2:	2607      	movs	r6, #7
    59c4:	015b      	lsls	r3, r3, #5
    59c6:	5c58      	ldrb	r0, [r3, r1]
    59c8:	00ad      	lsls	r5, r5, #2
    59ca:	43b0      	bics	r0, r6
    59cc:	0006      	movs	r6, r0
    59ce:	2003      	movs	r0, #3
    59d0:	4330      	orrs	r0, r6
    59d2:	5458      	strb	r0, [r3, r1]
	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
    59d4:	9b01      	ldr	r3, [sp, #4]
		release();
    59d6:	0020      	movs	r0, r4
	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
    59d8:	6053      	str	r3, [r2, #4]
		release();
    59da:	f7ff fd97 	bl	550c <_ZN26DoubleBufferedEPOutHandler7releaseEv>
    59de:	4b07      	ldr	r3, [pc, #28]	; (59fc <_ZN14USBDeviceClass6initEPEmm+0xe4>)
    59e0:	515c      	str	r4, [r3, r5]
    59e2:	e7b6      	b.n	5952 <_ZN14USBDeviceClass6initEPEmm+0x3a>
    59e4:	0011      	movs	r1, r2
    59e6:	0028      	movs	r0, r5
    59e8:	f7ff fca8 	bl	533c <_ZN14USBDeviceClass6initEPEmm.part.5>
}
    59ec:	e7b1      	b.n	5952 <_ZN14USBDeviceClass6initEPEmm+0x3a>
    59ee:	46c0      	nop			; (mov r8, r8)
    59f0:	20000a98 	.word	0x20000a98
    59f4:	8fffffff 	.word	0x8fffffff
    59f8:	2000060c 	.word	0x2000060c
    59fc:	200005e4 	.word	0x200005e4
    5a00:	0000b3c8 	.word	0x0000b3c8

00005a04 <_ZN14USBDeviceClass13initEndpointsEv>:
void USBDeviceClass::initEndpoints() {
    5a04:	b570      	push	{r4, r5, r6, lr}
    5a06:	0005      	movs	r5, r0
    5a08:	2401      	movs	r4, #1
	for (uint8_t i = 1; i < sizeof(EndPoints) && EndPoints[i] != 0; i++) {
    5a0a:	4b06      	ldr	r3, [pc, #24]	; (5a24 <_ZN14USBDeviceClass13initEndpointsEv+0x20>)
    5a0c:	00a2      	lsls	r2, r4, #2
    5a0e:	58d2      	ldr	r2, [r2, r3]
    5a10:	2a00      	cmp	r2, #0
    5a12:	d005      	beq.n	5a20 <_ZN14USBDeviceClass13initEndpointsEv+0x1c>
		initEP(i, EndPoints[i]);
    5a14:	0021      	movs	r1, r4
    5a16:	0028      	movs	r0, r5
    5a18:	f7ff ff7e 	bl	5918 <_ZN14USBDeviceClass6initEPEmm>
    5a1c:	3401      	adds	r4, #1
	for (uint8_t i = 1; i < sizeof(EndPoints) && EndPoints[i] != 0; i++) {
    5a1e:	e7f4      	b.n	5a0a <_ZN14USBDeviceClass13initEndpointsEv+0x6>
}
    5a20:	bd70      	pop	{r4, r5, r6, pc}
    5a22:	46c0      	nop			; (mov r8, r8)
    5a24:	2000005c 	.word	0x2000005c

00005a28 <_ZN14USBDeviceClass9availableEm>:
}

// Number of bytes, assumes a rx endpoint
uint32_t USBDeviceClass::available(uint32_t ep)
{
	if (epHandlers[ep]) {
    5a28:	4b08      	ldr	r3, [pc, #32]	; (5a4c <_ZN14USBDeviceClass9availableEm+0x24>)
    5a2a:	008a      	lsls	r2, r1, #2
    5a2c:	58d0      	ldr	r0, [r2, r3]
{
    5a2e:	b510      	push	{r4, lr}
	if (epHandlers[ep]) {
    5a30:	2800      	cmp	r0, #0
    5a32:	d003      	beq.n	5a3c <_ZN14USBDeviceClass9availableEm+0x14>
		return epHandlers[ep]->available();
    5a34:	6803      	ldr	r3, [r0, #0]
    5a36:	689b      	ldr	r3, [r3, #8]
    5a38:	4798      	blx	r3
	} else {
		return usbd.epBank0ByteCount(ep);
	}
}
    5a3a:	bd10      	pop	{r4, pc}
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
    5a3c:	b2c9      	uxtb	r1, r1
    5a3e:	4b04      	ldr	r3, [pc, #16]	; (5a50 <_ZN14USBDeviceClass9availableEm+0x28>)
    5a40:	0149      	lsls	r1, r1, #5
    5a42:	1859      	adds	r1, r3, r1
    5a44:	6888      	ldr	r0, [r1, #8]
    5a46:	0480      	lsls	r0, r0, #18
    5a48:	0c80      	lsrs	r0, r0, #18
		return usbd.epBank0ByteCount(ep);
    5a4a:	e7f6      	b.n	5a3a <_ZN14USBDeviceClass9availableEm+0x12>
    5a4c:	200005e4 	.word	0x200005e4
    5a50:	20000a98 	.word	0x20000a98

00005a54 <_ZN14USBDeviceClass5flushEm>:
{
    5a54:	b510      	push	{r4, lr}
    5a56:	000c      	movs	r4, r1
	if (available(ep)) {
    5a58:	f7ff ffe6 	bl	5a28 <_ZN14USBDeviceClass9availableEm>
    5a5c:	2800      	cmp	r0, #0
    5a5e:	d00c      	beq.n	5a7a <_ZN14USBDeviceClass5flushEm+0x26>
	inline void epBank1SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK1RDY = 1; }
    5a60:	4b06      	ldr	r3, [pc, #24]	; (5a7c <_ZN14USBDeviceClass5flushEm+0x28>)
    5a62:	b2e4      	uxtb	r4, r4
    5a64:	681b      	ldr	r3, [r3, #0]
    5a66:	3408      	adds	r4, #8
    5a68:	0164      	lsls	r4, r4, #5
    5a6a:	191c      	adds	r4, r3, r4
    5a6c:	2380      	movs	r3, #128	; 0x80
    5a6e:	7962      	ldrb	r2, [r4, #5]
    5a70:	425b      	negs	r3, r3
    5a72:	4313      	orrs	r3, r2
    5a74:	7163      	strb	r3, [r4, #5]
	inline void epBank1AckTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT(2); }
    5a76:	2302      	movs	r3, #2
    5a78:	71e3      	strb	r3, [r4, #7]
}
    5a7a:	bd10      	pop	{r4, pc}
    5a7c:	20000a98 	.word	0x20000a98

00005a80 <_ZN14USBDeviceClass14armRecvCtrlOUTEm>:
		return c;
	}
}

uint8_t USBDeviceClass::armRecvCtrlOUT(uint32_t ep)
{
    5a80:	b570      	push	{r4, r5, r6, lr}
	// Get endpoint configuration from setting register
	usbd.epBank0SetAddress(ep, &udd_ep_out_cache_buffer[ep]);
    5a82:	4b13      	ldr	r3, [pc, #76]	; (5ad0 <_ZN14USBDeviceClass14armRecvCtrlOUTEm+0x50>)
	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
    5a84:	b2cc      	uxtb	r4, r1
    5a86:	4a13      	ldr	r2, [pc, #76]	; (5ad4 <_ZN14USBDeviceClass14armRecvCtrlOUTEm+0x54>)
    5a88:	0160      	lsls	r0, r4, #5
    5a8a:	0189      	lsls	r1, r1, #6
    5a8c:	1859      	adds	r1, r3, r1
    5a8e:	1813      	adds	r3, r2, r0
    5a90:	6059      	str	r1, [r3, #4]
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
    5a92:	6899      	ldr	r1, [r3, #8]
    5a94:	4d10      	ldr	r5, [pc, #64]	; (5ad8 <_ZN14USBDeviceClass14armRecvCtrlOUTEm+0x58>)
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
    5a96:	3408      	adds	r4, #8
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
    5a98:	400d      	ands	r5, r1
    5a9a:	2180      	movs	r1, #128	; 0x80
    5a9c:	0289      	lsls	r1, r1, #10
    5a9e:	4329      	orrs	r1, r5
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
    5aa0:	2540      	movs	r5, #64	; 0x40
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
    5aa2:	6099      	str	r1, [r3, #8]
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
    5aa4:	6899      	ldr	r1, [r3, #8]
    5aa6:	0b89      	lsrs	r1, r1, #14
    5aa8:	0389      	lsls	r1, r1, #14
    5aaa:	6099      	str	r1, [r3, #8]
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
    5aac:	6811      	ldr	r1, [r2, #0]
    5aae:	0163      	lsls	r3, r4, #5
    5ab0:	18cb      	adds	r3, r1, r3
    5ab2:	791e      	ldrb	r6, [r3, #4]
    5ab4:	4335      	orrs	r5, r6
    5ab6:	711d      	strb	r5, [r3, #4]
	inline bool epBank0IsReady(ep_t ep)    { return usb.DeviceEndpoint[ep].EPSTATUS.bit.BK0RDY; }
    5ab8:	799d      	ldrb	r5, [r3, #6]
	usbd.epBank0SetByteCount(ep, 0);

	usbd.epBank0ResetReady(ep);

	// Wait OUT
	while (!usbd.epBank0IsReady(ep)) {}
    5aba:	066d      	lsls	r5, r5, #25
    5abc:	d5fc      	bpl.n	5ab8 <_ZN14USBDeviceClass14armRecvCtrlOUTEm+0x38>
	inline bool epBank0IsTransferComplete(ep_t ep)  { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.TRCPT0; }
    5abe:	0164      	lsls	r4, r4, #5
    5ac0:	1909      	adds	r1, r1, r4
    5ac2:	79cb      	ldrb	r3, [r1, #7]
	while (!usbd.epBank0IsTransferComplete(ep)) {}
    5ac4:	07db      	lsls	r3, r3, #31
    5ac6:	d5fc      	bpl.n	5ac2 <_ZN14USBDeviceClass14armRecvCtrlOUTEm+0x42>
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
    5ac8:	1812      	adds	r2, r2, r0
    5aca:	6890      	ldr	r0, [r2, #8]
	return usbd.epBank0ByteCount(ep);
    5acc:	b2c0      	uxtb	r0, r0
}
    5ace:	bd70      	pop	{r4, r5, r6, pc}
    5ad0:	200007cc 	.word	0x200007cc
    5ad4:	20000a98 	.word	0x20000a98
    5ad8:	f0003fff 	.word	0xf0003fff

00005adc <_ZN14USBDeviceClass11recvControlEPvm>:
{
    5adc:	b570      	push	{r4, r5, r6, lr}
    5ade:	0014      	movs	r4, r2
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
    5ae0:	2240      	movs	r2, #64	; 0x40
    5ae2:	4b0b      	ldr	r3, [pc, #44]	; (5b10 <_ZN14USBDeviceClass11recvControlEPvm+0x34>)
    5ae4:	000d      	movs	r5, r1
    5ae6:	681b      	ldr	r3, [r3, #0]
    5ae8:	33ff      	adds	r3, #255	; 0xff
    5aea:	7959      	ldrb	r1, [r3, #5]
    5aec:	430a      	orrs	r2, r1
    5aee:	715a      	strb	r2, [r3, #5]
	uint32_t read = armRecvCtrlOUT(0);
    5af0:	2100      	movs	r1, #0
    5af2:	f7ff ffc5 	bl	5a80 <_ZN14USBDeviceClass14armRecvCtrlOUTEm>
    5af6:	42a0      	cmp	r0, r4
    5af8:	d900      	bls.n	5afc <_ZN14USBDeviceClass11recvControlEPvm+0x20>
    5afa:	0020      	movs	r0, r4
	for (uint32_t i=0; i<len; i++) {
    5afc:	2300      	movs	r3, #0
		data[i] = buffer[i];
    5afe:	4905      	ldr	r1, [pc, #20]	; (5b14 <_ZN14USBDeviceClass11recvControlEPvm+0x38>)
	for (uint32_t i=0; i<len; i++) {
    5b00:	42a3      	cmp	r3, r4
    5b02:	d003      	beq.n	5b0c <_ZN14USBDeviceClass11recvControlEPvm+0x30>
		data[i] = buffer[i];
    5b04:	5c5a      	ldrb	r2, [r3, r1]
    5b06:	54ea      	strb	r2, [r5, r3]
	for (uint32_t i=0; i<len; i++) {
    5b08:	3301      	adds	r3, #1
    5b0a:	e7f9      	b.n	5b00 <_ZN14USBDeviceClass11recvControlEPvm+0x24>
}
    5b0c:	bd70      	pop	{r4, r5, r6, pc}
    5b0e:	46c0      	nop			; (mov r8, r8)
    5b10:	20000a98 	.word	0x20000a98
    5b14:	200007cc 	.word	0x200007cc

00005b18 <_ZN14USBDeviceClass7armRecvEm>:

uint8_t USBDeviceClass::armRecv(uint32_t ep)
{
    5b18:	b510      	push	{r4, lr}
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
    5b1a:	b2c9      	uxtb	r1, r1
    5b1c:	480b      	ldr	r0, [pc, #44]	; (5b4c <_ZN14USBDeviceClass7armRecvEm+0x34>)
    5b1e:	0149      	lsls	r1, r1, #5
    5b20:	1842      	adds	r2, r0, r1
    5b22:	6893      	ldr	r3, [r2, #8]
    5b24:	049b      	lsls	r3, r3, #18
    5b26:	0c9b      	lsrs	r3, r3, #18
	uint16_t count = usbd.epBank0ByteCount(ep);
	if (count >= 64) {
    5b28:	2b3f      	cmp	r3, #63	; 0x3f
    5b2a:	dd0b      	ble.n	5b44 <_ZN14USBDeviceClass7armRecvEm+0x2c>
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
    5b2c:	6894      	ldr	r4, [r2, #8]
		usbd.epBank0SetByteCount(ep, count - 64);
    5b2e:	3b40      	subs	r3, #64	; 0x40
    5b30:	049b      	lsls	r3, r3, #18
    5b32:	0ba4      	lsrs	r4, r4, #14
    5b34:	0c9b      	lsrs	r3, r3, #18
    5b36:	03a4      	lsls	r4, r4, #14
    5b38:	4323      	orrs	r3, r4
    5b3a:	6093      	str	r3, [r2, #8]
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
    5b3c:	1841      	adds	r1, r0, r1
    5b3e:	6888      	ldr	r0, [r1, #8]
	} else {
		usbd.epBank0SetByteCount(ep, 0);
	}
	return usbd.epBank0ByteCount(ep);
    5b40:	b2c0      	uxtb	r0, r0
}
    5b42:	bd10      	pop	{r4, pc}
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
    5b44:	6893      	ldr	r3, [r2, #8]
    5b46:	0b9b      	lsrs	r3, r3, #14
    5b48:	039b      	lsls	r3, r3, #14
    5b4a:	e7f6      	b.n	5b3a <_ZN14USBDeviceClass7armRecvEm+0x22>
    5b4c:	20000a98 	.word	0x20000a98

00005b50 <_ZN14USBDeviceClass4recvEmPvm>:
{
    5b50:	b5f0      	push	{r4, r5, r6, r7, lr}
    5b52:	001c      	movs	r4, r3
	if (!_usbConfiguration)
    5b54:	4b2a      	ldr	r3, [pc, #168]	; (5c00 <_ZN14USBDeviceClass4recvEmPvm+0xb0>)
{
    5b56:	b085      	sub	sp, #20
	if (!_usbConfiguration)
    5b58:	681b      	ldr	r3, [r3, #0]
{
    5b5a:	0006      	movs	r6, r0
    5b5c:	000d      	movs	r5, r1
    5b5e:	9201      	str	r2, [sp, #4]
	if (!_usbConfiguration)
    5b60:	2b00      	cmp	r3, #0
    5b62:	d04a      	beq.n	5bfa <_ZN14USBDeviceClass4recvEmPvm+0xaa>
	if (epHandlers[ep]) {
    5b64:	4b27      	ldr	r3, [pc, #156]	; (5c04 <_ZN14USBDeviceClass4recvEmPvm+0xb4>)
    5b66:	008a      	lsls	r2, r1, #2
    5b68:	58d0      	ldr	r0, [r2, r3]
    5b6a:	2800      	cmp	r0, #0
    5b6c:	d008      	beq.n	5b80 <_ZN14USBDeviceClass4recvEmPvm+0x30>
		return epHandlers[ep]->recv(_data, len);
    5b6e:	6803      	ldr	r3, [r0, #0]
    5b70:	0022      	movs	r2, r4
    5b72:	685b      	ldr	r3, [r3, #4]
    5b74:	9901      	ldr	r1, [sp, #4]
    5b76:	4798      	blx	r3
    5b78:	0004      	movs	r4, r0
}
    5b7a:	0020      	movs	r0, r4
    5b7c:	b005      	add	sp, #20
    5b7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (available(ep) < len)
    5b80:	0030      	movs	r0, r6
    5b82:	f7ff ff51 	bl	5a28 <_ZN14USBDeviceClass9availableEm>
    5b86:	4284      	cmp	r4, r0
    5b88:	d904      	bls.n	5b94 <_ZN14USBDeviceClass4recvEmPvm+0x44>
		len = available(ep);
    5b8a:	0029      	movs	r1, r5
    5b8c:	0030      	movs	r0, r6
    5b8e:	f7ff ff4b 	bl	5a28 <_ZN14USBDeviceClass9availableEm>
    5b92:	0004      	movs	r4, r0
	armRecv(ep);
    5b94:	0029      	movs	r1, r5
    5b96:	0030      	movs	r0, r6
    5b98:	f7ff ffbe 	bl	5b18 <_ZN14USBDeviceClass7armRecvEm>
	inline void epBank0DisableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENCLR.bit.TRCPT0 = 1; }
    5b9c:	2101      	movs	r1, #1
    5b9e:	b2eb      	uxtb	r3, r5
    5ba0:	4f19      	ldr	r7, [pc, #100]	; (5c08 <_ZN14USBDeviceClass4recvEmPvm+0xb8>)
    5ba2:	9303      	str	r3, [sp, #12]
    5ba4:	015b      	lsls	r3, r3, #5
    5ba6:	9302      	str	r3, [sp, #8]
    5ba8:	9a02      	ldr	r2, [sp, #8]
    5baa:	683b      	ldr	r3, [r7, #0]
	memcpy(_data, udd_ep_out_cache_buffer[ep], len);
    5bac:	9801      	ldr	r0, [sp, #4]
    5bae:	189b      	adds	r3, r3, r2
    5bb0:	33ff      	adds	r3, #255	; 0xff
    5bb2:	7a5a      	ldrb	r2, [r3, #9]
    5bb4:	430a      	orrs	r2, r1
    5bb6:	4915      	ldr	r1, [pc, #84]	; (5c0c <_ZN14USBDeviceClass4recvEmPvm+0xbc>)
    5bb8:	725a      	strb	r2, [r3, #9]
    5bba:	01ab      	lsls	r3, r5, #6
    5bbc:	18c9      	adds	r1, r1, r3
    5bbe:	0022      	movs	r2, r4
    5bc0:	f003 f8e5 	bl	8d8e <memcpy>
	if (len && !available(ep)) {
    5bc4:	2c00      	cmp	r4, #0
    5bc6:	d0d8      	beq.n	5b7a <_ZN14USBDeviceClass4recvEmPvm+0x2a>
    5bc8:	0029      	movs	r1, r5
    5bca:	0030      	movs	r0, r6
    5bcc:	f7ff ff2c 	bl	5a28 <_ZN14USBDeviceClass9availableEm>
    5bd0:	2800      	cmp	r0, #0
    5bd2:	d1d2      	bne.n	5b7a <_ZN14USBDeviceClass4recvEmPvm+0x2a>
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
    5bd4:	2140      	movs	r1, #64	; 0x40
    5bd6:	9b03      	ldr	r3, [sp, #12]
    5bd8:	683a      	ldr	r2, [r7, #0]
    5bda:	3308      	adds	r3, #8
    5bdc:	015b      	lsls	r3, r3, #5
    5bde:	18d3      	adds	r3, r2, r3
    5be0:	7918      	ldrb	r0, [r3, #4]
    5be2:	4301      	orrs	r1, r0
    5be4:	7119      	strb	r1, [r3, #4]
	inline void epBank0AckTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT(1); }
    5be6:	2101      	movs	r1, #1
    5be8:	71d9      	strb	r1, [r3, #7]
	inline void epBank0EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT0 = 1; }
    5bea:	2101      	movs	r1, #1
    5bec:	9b02      	ldr	r3, [sp, #8]
    5bee:	18d3      	adds	r3, r2, r3
    5bf0:	33ff      	adds	r3, #255	; 0xff
    5bf2:	7a9a      	ldrb	r2, [r3, #10]
    5bf4:	430a      	orrs	r2, r1
    5bf6:	729a      	strb	r2, [r3, #10]
    5bf8:	e7bf      	b.n	5b7a <_ZN14USBDeviceClass4recvEmPvm+0x2a>
		return -1;
    5bfa:	2401      	movs	r4, #1
    5bfc:	4264      	negs	r4, r4
    5bfe:	e7bc      	b.n	5b7a <_ZN14USBDeviceClass4recvEmPvm+0x2a>
    5c00:	20000a90 	.word	0x20000a90
    5c04:	200005e4 	.word	0x200005e4
    5c08:	20000a98 	.word	0x20000a98
    5c0c:	200007cc 	.word	0x200007cc

00005c10 <_ZN14USBDeviceClass4recvEm>:
{
    5c10:	b513      	push	{r0, r1, r4, lr}
	if (recv(ep, &c, 1) != 1) {
    5c12:	466b      	mov	r3, sp
    5c14:	1ddc      	adds	r4, r3, #7
    5c16:	0022      	movs	r2, r4
    5c18:	2301      	movs	r3, #1
    5c1a:	f7ff ff99 	bl	5b50 <_ZN14USBDeviceClass4recvEmPvm>
    5c1e:	2801      	cmp	r0, #1
    5c20:	d101      	bne.n	5c26 <_ZN14USBDeviceClass4recvEm+0x16>
		return c;
    5c22:	7820      	ldrb	r0, [r4, #0]
}
    5c24:	bd16      	pop	{r1, r2, r4, pc}
		return -1;
    5c26:	2001      	movs	r0, #1
    5c28:	4240      	negs	r0, r0
    5c2a:	e7fb      	b.n	5c24 <_ZN14USBDeviceClass4recvEm+0x14>

00005c2c <_ZN14USBDeviceClass4sendEmPKvm>:
	0
};

// Blocking Send of data to an endpoint
uint32_t USBDeviceClass::send(uint32_t ep, const void *data, uint32_t len)
{
    5c2c:	b5f0      	push	{r4, r5, r6, r7, lr}
    5c2e:	001e      	movs	r6, r3
	uint32_t written = 0;
	uint32_t length = 0;

	if (!_usbConfiguration)
    5c30:	4b35      	ldr	r3, [pc, #212]	; (5d08 <_ZN14USBDeviceClass4sendEmPKvm+0xdc>)
{
    5c32:	b085      	sub	sp, #20
	if (!_usbConfiguration)
    5c34:	681b      	ldr	r3, [r3, #0]
{
    5c36:	000f      	movs	r7, r1
    5c38:	9201      	str	r2, [sp, #4]
	if (!_usbConfiguration)
    5c3a:	2b00      	cmp	r3, #0
    5c3c:	d035      	beq.n	5caa <_ZN14USBDeviceClass4sendEmPKvm+0x7e>
		return -1;
	if (len > 16384)
    5c3e:	2380      	movs	r3, #128	; 0x80
    5c40:	01db      	lsls	r3, r3, #7
    5c42:	429e      	cmp	r6, r3
    5c44:	d831      	bhi.n	5caa <_ZN14USBDeviceClass4sendEmPKvm+0x7e>
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
    5c46:	2500      	movs	r5, #0
		} else {
			length = len;
		}

		/* memcopy could be safer in multi threaded environment */
		memcpy(&udd_ep_in_cache_buffer[ep], data, length);
    5c48:	4a30      	ldr	r2, [pc, #192]	; (5d0c <_ZN14USBDeviceClass4sendEmPKvm+0xe0>)
    5c4a:	018b      	lsls	r3, r1, #6
    5c4c:	18d3      	adds	r3, r2, r3
    5c4e:	9302      	str	r3, [sp, #8]
	while (len != 0)
    5c50:	2e00      	cmp	r6, #0
    5c52:	d02c      	beq.n	5cae <_ZN14USBDeviceClass4sendEmPKvm+0x82>
	inline bool epBank1IsReady(ep_t ep)    { return usb.DeviceEndpoint[ep].EPSTATUS.bit.BK1RDY; }
    5c54:	4b2e      	ldr	r3, [pc, #184]	; (5d10 <_ZN14USBDeviceClass4sendEmPKvm+0xe4>)
    5c56:	681b      	ldr	r3, [r3, #0]
    5c58:	9303      	str	r3, [sp, #12]
    5c5a:	23ff      	movs	r3, #255	; 0xff
    5c5c:	403b      	ands	r3, r7
    5c5e:	001c      	movs	r4, r3
    5c60:	9300      	str	r3, [sp, #0]
    5c62:	3408      	adds	r4, #8
    5c64:	9b03      	ldr	r3, [sp, #12]
    5c66:	0164      	lsls	r4, r4, #5
    5c68:	191c      	adds	r4, r3, r4
    5c6a:	79a3      	ldrb	r3, [r4, #6]
    5c6c:	09db      	lsrs	r3, r3, #7
		if (usbd.epBank1IsReady(ep)) {
    5c6e:	d021      	beq.n	5cb4 <_ZN14USBDeviceClass4sendEmPKvm+0x88>
			uint32_t timeout = microsecondsToClockCycles(TX_TIMEOUT_MS * 1000) / 23;
    5c70:	4b28      	ldr	r3, [pc, #160]	; (5d14 <_ZN14USBDeviceClass4sendEmPKvm+0xe8>)
    5c72:	4929      	ldr	r1, [pc, #164]	; (5d18 <_ZN14USBDeviceClass4sendEmPKvm+0xec>)
    5c74:	6818      	ldr	r0, [r3, #0]
    5c76:	f001 f8e7 	bl	6e48 <__udivsi3>
    5c7a:	4b28      	ldr	r3, [pc, #160]	; (5d1c <_ZN14USBDeviceClass4sendEmPKvm+0xf0>)
    5c7c:	2117      	movs	r1, #23
    5c7e:	4358      	muls	r0, r3
    5c80:	f001 f8e2 	bl	6e48 <__udivsi3>
				if (LastTransmitTimedOut[ep] || timeout-- == 0) {
    5c84:	4b26      	ldr	r3, [pc, #152]	; (5d20 <_ZN14USBDeviceClass4sendEmPKvm+0xf4>)
	inline bool epBank1IsTransferComplete(ep_t ep)  { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.TRCPT1; }
    5c86:	79e2      	ldrb	r2, [r4, #7]
			while (!usbd.epBank1IsTransferComplete(ep)) {
    5c88:	0792      	lsls	r2, r2, #30
    5c8a:	d413      	bmi.n	5cb4 <_ZN14USBDeviceClass4sendEmPKvm+0x88>
				if (LastTransmitTimedOut[ep] || timeout-- == 0) {
    5c8c:	5dda      	ldrb	r2, [r3, r7]
    5c8e:	2a00      	cmp	r2, #0
    5c90:	d101      	bne.n	5c96 <_ZN14USBDeviceClass4sendEmPKvm+0x6a>
    5c92:	3801      	subs	r0, #1
    5c94:	d2f7      	bcs.n	5c86 <_ZN14USBDeviceClass4sendEmPKvm+0x5a>
					LastTransmitTimedOut[ep] = 1;
    5c96:	2201      	movs	r2, #1
    5c98:	55da      	strb	r2, [r3, r7]
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
    5c9a:	9b00      	ldr	r3, [sp, #0]
    5c9c:	015a      	lsls	r2, r3, #5
    5c9e:	4b1c      	ldr	r3, [pc, #112]	; (5d10 <_ZN14USBDeviceClass4sendEmPKvm+0xe4>)
    5ca0:	189b      	adds	r3, r3, r2
    5ca2:	699a      	ldr	r2, [r3, #24]
    5ca4:	0b92      	lsrs	r2, r2, #14
    5ca6:	0392      	lsls	r2, r2, #14
    5ca8:	619a      	str	r2, [r3, #24]
					return -1;
    5caa:	2501      	movs	r5, #1
    5cac:	426d      	negs	r5, r5
		written += length;
		len -= length;
		data = (char *)data + length;
	}
	return written;
}
    5cae:	0028      	movs	r0, r5
    5cb0:	b005      	add	sp, #20
    5cb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		LastTransmitTimedOut[ep] = 0;
    5cb4:	2200      	movs	r2, #0
    5cb6:	4b1a      	ldr	r3, [pc, #104]	; (5d20 <_ZN14USBDeviceClass4sendEmPKvm+0xf4>)
    5cb8:	0034      	movs	r4, r6
    5cba:	55da      	strb	r2, [r3, r7]
    5cbc:	2e3f      	cmp	r6, #63	; 0x3f
    5cbe:	d900      	bls.n	5cc2 <_ZN14USBDeviceClass4sendEmPKvm+0x96>
    5cc0:	243f      	movs	r4, #63	; 0x3f
		memcpy(&udd_ep_in_cache_buffer[ep], data, length);
    5cc2:	0022      	movs	r2, r4
    5cc4:	9901      	ldr	r1, [sp, #4]
    5cc6:	9802      	ldr	r0, [sp, #8]
    5cc8:	f003 f861 	bl	8d8e <memcpy>
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
    5ccc:	9b00      	ldr	r3, [sp, #0]
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
    5cce:	04a1      	lsls	r1, r4, #18
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
    5cd0:	015a      	lsls	r2, r3, #5
    5cd2:	4b0f      	ldr	r3, [pc, #60]	; (5d10 <_ZN14USBDeviceClass4sendEmPKvm+0xe4>)
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
    5cd4:	0c89      	lsrs	r1, r1, #18
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
    5cd6:	189b      	adds	r3, r3, r2
    5cd8:	9a02      	ldr	r2, [sp, #8]
		written += length;
    5cda:	192d      	adds	r5, r5, r4
    5cdc:	615a      	str	r2, [r3, #20]
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
    5cde:	699a      	ldr	r2, [r3, #24]
		len -= length;
    5ce0:	1b36      	subs	r6, r6, r4
    5ce2:	0b92      	lsrs	r2, r2, #14
    5ce4:	0392      	lsls	r2, r2, #14
    5ce6:	430a      	orrs	r2, r1
    5ce8:	619a      	str	r2, [r3, #24]
	inline void epBank1AckTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT(2); }
    5cea:	9b00      	ldr	r3, [sp, #0]
    5cec:	9a03      	ldr	r2, [sp, #12]
    5cee:	3308      	adds	r3, #8
    5cf0:	015b      	lsls	r3, r3, #5
    5cf2:	18d3      	adds	r3, r2, r3
    5cf4:	2202      	movs	r2, #2
    5cf6:	71da      	strb	r2, [r3, #7]
	inline void epBank1SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK1RDY = 1; }
    5cf8:	7959      	ldrb	r1, [r3, #5]
    5cfa:	3a82      	subs	r2, #130	; 0x82
    5cfc:	430a      	orrs	r2, r1
    5cfe:	715a      	strb	r2, [r3, #5]
		data = (char *)data + length;
    5d00:	9b01      	ldr	r3, [sp, #4]
    5d02:	191b      	adds	r3, r3, r4
    5d04:	9301      	str	r3, [sp, #4]
	while (len != 0)
    5d06:	e7a3      	b.n	5c50 <_ZN14USBDeviceClass4sendEmPKvm+0x24>
    5d08:	20000a90 	.word	0x20000a90
    5d0c:	2000060c 	.word	0x2000060c
    5d10:	20000a98 	.word	0x20000a98
    5d14:	20000084 	.word	0x20000084
    5d18:	000f4240 	.word	0x000f4240
    5d1c:	00011170 	.word	0x00011170
    5d20:	20000601 	.word	0x20000601

00005d24 <_ZN14USBDeviceClass7armSendEmPKvm>:

uint32_t USBDeviceClass::armSend(uint32_t ep, const void* data, uint32_t len)
{
    5d24:	b570      	push	{r4, r5, r6, lr}
    5d26:	000d      	movs	r5, r1
    5d28:	001c      	movs	r4, r3
	memcpy(&udd_ep_in_cache_buffer[ep], data, len);
    5d2a:	4e0d      	ldr	r6, [pc, #52]	; (5d60 <_ZN14USBDeviceClass7armSendEmPKvm+0x3c>)
    5d2c:	01ab      	lsls	r3, r5, #6
    5d2e:	18f6      	adds	r6, r6, r3
{
    5d30:	0011      	movs	r1, r2
	memcpy(&udd_ep_in_cache_buffer[ep], data, len);
    5d32:	0030      	movs	r0, r6
    5d34:	0022      	movs	r2, r4
    5d36:	f003 f82a 	bl	8d8e <memcpy>
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
    5d3a:	b2ed      	uxtb	r5, r5
    5d3c:	4909      	ldr	r1, [pc, #36]	; (5d64 <_ZN14USBDeviceClass7armSendEmPKvm+0x40>)
    5d3e:	016d      	lsls	r5, r5, #5
    5d40:	194d      	adds	r5, r1, r5
    5d42:	616e      	str	r6, [r5, #20]
	inline void epBank1SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
    5d44:	69ab      	ldr	r3, [r5, #24]
    5d46:	4a08      	ldr	r2, [pc, #32]	; (5d68 <_ZN14USBDeviceClass7armSendEmPKvm+0x44>)
	usbd.epBank1SetAddress(ep, &udd_ep_in_cache_buffer[ep]);
	usbd.epBank1SetMultiPacketSize(ep, 0);
	usbd.epBank1SetByteCount(ep, len);

	return len;
}
    5d48:	0020      	movs	r0, r4
    5d4a:	4013      	ands	r3, r2
    5d4c:	61ab      	str	r3, [r5, #24]
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
    5d4e:	69ab      	ldr	r3, [r5, #24]
    5d50:	04a2      	lsls	r2, r4, #18
    5d52:	0b9b      	lsrs	r3, r3, #14
    5d54:	0c92      	lsrs	r2, r2, #18
    5d56:	039b      	lsls	r3, r3, #14
    5d58:	4313      	orrs	r3, r2
    5d5a:	61ab      	str	r3, [r5, #24]
    5d5c:	bd70      	pop	{r4, r5, r6, pc}
    5d5e:	46c0      	nop			; (mov r8, r8)
    5d60:	2000060c 	.word	0x2000060c
    5d64:	20000a98 	.word	0x20000a98
    5d68:	f0003fff 	.word	0xf0003fff

00005d6c <_ZN14USBDeviceClass11sendControlEPKvm>:

uint32_t USBDeviceClass::sendControl(const void* _data, uint32_t len)
{
    5d6c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	const uint8_t *data = reinterpret_cast<const uint8_t *>(_data);
	uint32_t length = len;
	uint32_t sent = 0;
	uint32_t pos = 0;

	if (_dry_run == true)
    5d6e:	4b10      	ldr	r3, [pc, #64]	; (5db0 <_ZN14USBDeviceClass11sendControlEPKvm+0x44>)
{
    5d70:	9001      	str	r0, [sp, #4]
	if (_dry_run == true)
    5d72:	781b      	ldrb	r3, [r3, #0]
{
    5d74:	000f      	movs	r7, r1
    5d76:	0015      	movs	r5, r2
	if (_dry_run == true)
    5d78:	2b00      	cmp	r3, #0
    5d7a:	d10c      	bne.n	5d96 <_ZN14USBDeviceClass11sendControlEPKvm+0x2a>
		return length;

	if (_pack_message == true) {
    5d7c:	4b0d      	ldr	r3, [pc, #52]	; (5db4 <_ZN14USBDeviceClass11sendControlEPKvm+0x48>)
    5d7e:	0016      	movs	r6, r2
    5d80:	781c      	ldrb	r4, [r3, #0]
    5d82:	2c00      	cmp	r4, #0
    5d84:	d009      	beq.n	5d9a <_ZN14USBDeviceClass11sendControlEPKvm+0x2e>
		memcpy(&_pack_buffer[_pack_size], data, len);
    5d86:	4e0c      	ldr	r6, [pc, #48]	; (5db8 <_ZN14USBDeviceClass11sendControlEPKvm+0x4c>)
    5d88:	480c      	ldr	r0, [pc, #48]	; (5dbc <_ZN14USBDeviceClass11sendControlEPKvm+0x50>)
    5d8a:	8834      	ldrh	r4, [r6, #0]
    5d8c:	1900      	adds	r0, r0, r4
		_pack_size += len;
    5d8e:	1964      	adds	r4, r4, r5
		memcpy(&_pack_buffer[_pack_size], data, len);
    5d90:	f002 fffd 	bl	8d8e <memcpy>
		_pack_size += len;
    5d94:	8034      	strh	r4, [r6, #0]
		pos += sent;
		len -= sent;
 	}

	return length;
}
    5d96:	0028      	movs	r0, r5
    5d98:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 	while (len > 0)
    5d9a:	2e00      	cmp	r6, #0
    5d9c:	d0fb      	beq.n	5d96 <_ZN14USBDeviceClass11sendControlEPKvm+0x2a>
		sent = armSend(EP0, data + pos, len);
    5d9e:	193a      	adds	r2, r7, r4
    5da0:	0033      	movs	r3, r6
    5da2:	2100      	movs	r1, #0
    5da4:	9801      	ldr	r0, [sp, #4]
    5da6:	f7ff ffbd 	bl	5d24 <_ZN14USBDeviceClass7armSendEmPKvm>
		pos += sent;
    5daa:	1824      	adds	r4, r4, r0
		len -= sent;
    5dac:	1a36      	subs	r6, r6, r0
 	while (len > 0)
    5dae:	e7f4      	b.n	5d9a <_ZN14USBDeviceClass11sendControlEPKvm+0x2e>
    5db0:	2000098c 	.word	0x2000098c
    5db4:	20000a8d 	.word	0x20000a8d
    5db8:	20000a8e 	.word	0x20000a8e
    5dbc:	2000098d 	.word	0x2000098d

00005dc0 <_ZN14USBDeviceClass20sendStringDescriptorEPKhh>:
{
    5dc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		return false;
    5dc2:	2000      	movs	r0, #0
{
    5dc4:	af00      	add	r7, sp, #0
    5dc6:	000e      	movs	r6, r1
    5dc8:	0015      	movs	r5, r2
	if (maxlen < 2)
    5dca:	2a01      	cmp	r2, #1
    5dcc:	dd26      	ble.n	5e1c <_ZN14USBDeviceClass20sendStringDescriptorEPKhh+0x5c>
	uint8_t buffer[maxlen];
    5dce:	1dd3      	adds	r3, r2, #7
    5dd0:	466a      	mov	r2, sp
    5dd2:	08db      	lsrs	r3, r3, #3
    5dd4:	00db      	lsls	r3, r3, #3
    5dd6:	1ad3      	subs	r3, r2, r3
    5dd8:	469d      	mov	sp, r3
	buffer[0] = strlen((const char*)string) * 2 + 2;
    5dda:	0008      	movs	r0, r1
    5ddc:	f003 fd58 	bl	9890 <strlen>
	uint8_t buffer[maxlen];
    5de0:	466c      	mov	r4, sp
	buffer[1] = 0x03;
    5de2:	2303      	movs	r3, #3
		buffer[i] = 0;
    5de4:	2100      	movs	r1, #0
	buffer[0] = strlen((const char*)string) * 2 + 2;
    5de6:	3001      	adds	r0, #1
    5de8:	0040      	lsls	r0, r0, #1
    5dea:	7020      	strb	r0, [r4, #0]
	buffer[1] = 0x03;
    5dec:	7063      	strb	r3, [r4, #1]
    5dee:	1e5a      	subs	r2, r3, #1
    5df0:	b2d2      	uxtb	r2, r2
	for (i = 2; i < maxlen && *string; i++) {
    5df2:	4295      	cmp	r5, r2
    5df4:	dd0b      	ble.n	5e0e <_ZN14USBDeviceClass20sendStringDescriptorEPKhh+0x4e>
    5df6:	7830      	ldrb	r0, [r6, #0]
    5df8:	2800      	cmp	r0, #0
    5dfa:	d008      	beq.n	5e0e <_ZN14USBDeviceClass20sendStringDescriptorEPKhh+0x4e>
		buffer[i++] = *string++;
    5dfc:	3601      	adds	r6, #1
    5dfe:	54a0      	strb	r0, [r4, r2]
		if (i == maxlen) break;
    5e00:	429d      	cmp	r5, r3
    5e02:	d003      	beq.n	5e0c <_ZN14USBDeviceClass20sendStringDescriptorEPKhh+0x4c>
		buffer[i] = 0;
    5e04:	54e1      	strb	r1, [r4, r3]
    5e06:	3302      	adds	r3, #2
    5e08:	b2db      	uxtb	r3, r3
	for (i = 2; i < maxlen && *string; i++) {
    5e0a:	e7f0      	b.n	5dee <_ZN14USBDeviceClass20sendStringDescriptorEPKhh+0x2e>
    5e0c:	002a      	movs	r2, r5
	return USBDevice.sendControl(buffer, i);
    5e0e:	0021      	movs	r1, r4
    5e10:	4803      	ldr	r0, [pc, #12]	; (5e20 <_ZN14USBDeviceClass20sendStringDescriptorEPKhh+0x60>)
    5e12:	f7ff ffab 	bl	5d6c <_ZN14USBDeviceClass11sendControlEPKvm>
    5e16:	1e43      	subs	r3, r0, #1
    5e18:	4198      	sbcs	r0, r3
    5e1a:	b2c0      	uxtb	r0, r0
}
    5e1c:	46bd      	mov	sp, r7
    5e1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5e20:	200005e0 	.word	0x200005e0

00005e24 <_ZN14USBDeviceClass17sendConfigurationEm>:
{
    5e24:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint32_t total = 0;
    5e26:	2700      	movs	r7, #0
	_dry_run = true;
    5e28:	2601      	movs	r6, #1
{
    5e2a:	b087      	sub	sp, #28
	_dry_run = true;
    5e2c:	4b1e      	ldr	r3, [pc, #120]	; (5ea8 <_ZN14USBDeviceClass17sendConfigurationEm+0x84>)
{
    5e2e:	9100      	str	r1, [sp, #0]
	uint8_t interfaces = SendInterfaces(&total);
    5e30:	a902      	add	r1, sp, #8
	_dry_run = true;
    5e32:	701e      	strb	r6, [r3, #0]
{
    5e34:	0005      	movs	r5, r0
	uint32_t total = 0;
    5e36:	9702      	str	r7, [sp, #8]
	uint8_t interfaces = SendInterfaces(&total);
    5e38:	f7ff fc76 	bl	5728 <_ZN14USBDeviceClass14SendInterfacesEPm>
	ConfigDescriptor config = D_CONFIG((uint16_t)(total + sizeof(ConfigDescriptor)), interfaces);
    5e3c:	ac03      	add	r4, sp, #12
	uint8_t interfaces = SendInterfaces(&total);
    5e3e:	9001      	str	r0, [sp, #4]
	ConfigDescriptor config = D_CONFIG((uint16_t)(total + sizeof(ConfigDescriptor)), interfaces);
    5e40:	2209      	movs	r2, #9
    5e42:	0039      	movs	r1, r7
    5e44:	0020      	movs	r0, r4
    5e46:	f002 ffbd 	bl	8dc4 <memset>
    5e4a:	2309      	movs	r3, #9
    5e4c:	7023      	strb	r3, [r4, #0]
    5e4e:	2302      	movs	r3, #2
    5e50:	7063      	strb	r3, [r4, #1]
    5e52:	339e      	adds	r3, #158	; 0x9e
    5e54:	71e3      	strb	r3, [r4, #7]
    5e56:	335a      	adds	r3, #90	; 0x5a
    5e58:	7223      	strb	r3, [r4, #8]
    5e5a:	9b02      	ldr	r3, [sp, #8]
    5e5c:	7166      	strb	r6, [r4, #5]
    5e5e:	3309      	adds	r3, #9
    5e60:	8063      	strh	r3, [r4, #2]
    5e62:	466b      	mov	r3, sp
    5e64:	791b      	ldrb	r3, [r3, #4]
    5e66:	7123      	strb	r3, [r4, #4]
	_dry_run = false;
    5e68:	4b0f      	ldr	r3, [pc, #60]	; (5ea8 <_ZN14USBDeviceClass17sendConfigurationEm+0x84>)
    5e6a:	701f      	strb	r7, [r3, #0]
	if (maxlen == sizeof(ConfigDescriptor)) {
    5e6c:	9b00      	ldr	r3, [sp, #0]
    5e6e:	2b09      	cmp	r3, #9
    5e70:	d107      	bne.n	5e82 <_ZN14USBDeviceClass17sendConfigurationEm+0x5e>
		sendControl(&config, sizeof(ConfigDescriptor));
    5e72:	001a      	movs	r2, r3
    5e74:	0021      	movs	r1, r4
		sendControl(_pack_buffer, _pack_size);
    5e76:	0028      	movs	r0, r5
    5e78:	f7ff ff78 	bl	5d6c <_ZN14USBDeviceClass11sendControlEPKvm>
}
    5e7c:	2001      	movs	r0, #1
    5e7e:	b007      	add	sp, #28
    5e80:	bdf0      	pop	{r4, r5, r6, r7, pc}
		_pack_message = true;
    5e82:	4b0a      	ldr	r3, [pc, #40]	; (5eac <_ZN14USBDeviceClass17sendConfigurationEm+0x88>)
	sendControl(&config, sizeof(ConfigDescriptor));
    5e84:	2209      	movs	r2, #9
		_pack_message = true;
    5e86:	701e      	strb	r6, [r3, #0]
		_pack_size = 0;
    5e88:	4e09      	ldr	r6, [pc, #36]	; (5eb0 <_ZN14USBDeviceClass17sendConfigurationEm+0x8c>)
	sendControl(&config, sizeof(ConfigDescriptor));
    5e8a:	0021      	movs	r1, r4
    5e8c:	0028      	movs	r0, r5
	total = 0;
    5e8e:	9702      	str	r7, [sp, #8]
		_pack_size = 0;
    5e90:	8037      	strh	r7, [r6, #0]
	sendControl(&config, sizeof(ConfigDescriptor));
    5e92:	f7ff ff6b 	bl	5d6c <_ZN14USBDeviceClass11sendControlEPKvm>
	SendInterfaces(&total);
    5e96:	a902      	add	r1, sp, #8
    5e98:	0028      	movs	r0, r5
    5e9a:	f7ff fc45 	bl	5728 <_ZN14USBDeviceClass14SendInterfacesEPm>
		_pack_message = false;
    5e9e:	4b03      	ldr	r3, [pc, #12]	; (5eac <_ZN14USBDeviceClass17sendConfigurationEm+0x88>)
		sendControl(_pack_buffer, _pack_size);
    5ea0:	8832      	ldrh	r2, [r6, #0]
		_pack_message = false;
    5ea2:	701f      	strb	r7, [r3, #0]
		sendControl(_pack_buffer, _pack_size);
    5ea4:	4903      	ldr	r1, [pc, #12]	; (5eb4 <_ZN14USBDeviceClass17sendConfigurationEm+0x90>)
    5ea6:	e7e6      	b.n	5e76 <_ZN14USBDeviceClass17sendConfigurationEm+0x52>
    5ea8:	2000098c 	.word	0x2000098c
    5eac:	20000a8d 	.word	0x20000a8d
    5eb0:	20000a8e 	.word	0x20000a8e
    5eb4:	2000098d 	.word	0x2000098d

00005eb8 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup>:
{
    5eb8:	b570      	push	{r4, r5, r6, lr}
	uint8_t t = setup.wValueH;
    5eba:	78ce      	ldrb	r6, [r1, #3]
{
    5ebc:	b092      	sub	sp, #72	; 0x48
    5ebe:	0005      	movs	r5, r0
    5ec0:	000c      	movs	r4, r1
	if (t == USB_CONFIGURATION_DESCRIPTOR_TYPE)
    5ec2:	2e02      	cmp	r6, #2
    5ec4:	d108      	bne.n	5ed8 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x20>
		return USBDevice.sendConfiguration(setup.wLength);
    5ec6:	88c9      	ldrh	r1, [r1, #6]
    5ec8:	482b      	ldr	r0, [pc, #172]	; (5f78 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0xc0>)
    5eca:	f7ff ffab 	bl	5e24 <_ZN14USBDeviceClass17sendConfigurationEm>
    5ece:	1e43      	subs	r3, r0, #1
    5ed0:	4198      	sbcs	r0, r3
    5ed2:	b2c0      	uxtb	r0, r0
}
    5ed4:	b012      	add	sp, #72	; 0x48
    5ed6:	bd70      	pop	{r4, r5, r6, pc}
	ret = PluggableUSB().getDescriptor(setup);
    5ed8:	f000 ff92 	bl	6e00 <_Z12PluggableUSBv>
    5edc:	0021      	movs	r1, r4
    5ede:	f000 ff5f 	bl	6da0 <_ZN13PluggableUSB_13getDescriptorER8USBSetup>
	if (ret != 0) {
    5ee2:	2800      	cmp	r0, #0
    5ee4:	d003      	beq.n	5eee <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x36>
		return (ret > 0 ? true : false);
    5ee6:	17c3      	asrs	r3, r0, #31
    5ee8:	1a18      	subs	r0, r3, r0
    5eea:	0fc0      	lsrs	r0, r0, #31
    5eec:	e7f2      	b.n	5ed4 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x1c>
	if (t == USB_DEVICE_DESCRIPTOR_TYPE)
    5eee:	2e01      	cmp	r6, #1
    5ef0:	d10b      	bne.n	5f0a <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x52>
		if (setup.wLength == 8)
    5ef2:	88e2      	ldrh	r2, [r4, #6]
    5ef4:	4921      	ldr	r1, [pc, #132]	; (5f7c <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0xc4>)
		if (*desc_addr > setup.wLength) {
    5ef6:	2a11      	cmp	r2, #17
    5ef8:	dc10      	bgt.n	5f1c <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x64>
			desc_length = setup.wLength;
    5efa:	b2d2      	uxtb	r2, r2
	if (desc_length == 0) {
    5efc:	2a00      	cmp	r2, #0
    5efe:	d00d      	beq.n	5f1c <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x64>
	sendControl(desc_addr, desc_length);
    5f00:	0028      	movs	r0, r5
    5f02:	f7ff ff33 	bl	5d6c <_ZN14USBDeviceClass11sendControlEPKvm>
	return true;
    5f06:	2001      	movs	r0, #1
    5f08:	e7e4      	b.n	5ed4 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x1c>
	else if (USB_STRING_DESCRIPTOR_TYPE == t)
    5f0a:	2e03      	cmp	r6, #3
    5f0c:	d1e2      	bne.n	5ed4 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x1c>
		if (setup.wValueL == 0) {
    5f0e:	78a3      	ldrb	r3, [r4, #2]
    5f10:	2b00      	cmp	r3, #0
    5f12:	d105      	bne.n	5f20 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x68>
		if (*desc_addr > setup.wLength) {
    5f14:	88e2      	ldrh	r2, [r4, #6]
    5f16:	491a      	ldr	r1, [pc, #104]	; (5f80 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0xc8>)
    5f18:	2a03      	cmp	r2, #3
    5f1a:	ddee      	ble.n	5efa <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x42>
		desc_length = *desc_addr;
    5f1c:	780a      	ldrb	r2, [r1, #0]
    5f1e:	e7ef      	b.n	5f00 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x48>
		else if (setup.wValueL == IPRODUCT) {
    5f20:	2b02      	cmp	r3, #2
    5f22:	d105      	bne.n	5f30 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x78>
			return sendStringDescriptor(STRING_PRODUCT, setup.wLength);
    5f24:	79a2      	ldrb	r2, [r4, #6]
    5f26:	4917      	ldr	r1, [pc, #92]	; (5f84 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0xcc>)
			return sendStringDescriptor(STRING_MANUFACTURER, setup.wLength);
    5f28:	0028      	movs	r0, r5
    5f2a:	f7ff ff49 	bl	5dc0 <_ZN14USBDeviceClass20sendStringDescriptorEPKhh>
    5f2e:	e7d1      	b.n	5ed4 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x1c>
		else if (setup.wValueL == IMANUFACTURER) {
    5f30:	2b01      	cmp	r3, #1
    5f32:	d102      	bne.n	5f3a <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x82>
			return sendStringDescriptor(STRING_MANUFACTURER, setup.wLength);
    5f34:	79a2      	ldrb	r2, [r4, #6]
    5f36:	4914      	ldr	r1, [pc, #80]	; (5f88 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0xd0>)
    5f38:	e7f6      	b.n	5f28 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x70>
		else if (setup.wValueL == ISERIAL) {
    5f3a:	2b03      	cmp	r3, #3
    5f3c:	d1ca      	bne.n	5ed4 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x1c>
			utox8(SERIAL_NUMBER_WORD_0, &name[0]);
    5f3e:	4b13      	ldr	r3, [pc, #76]	; (5f8c <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0xd4>)
    5f40:	a901      	add	r1, sp, #4
    5f42:	6818      	ldr	r0, [r3, #0]
    5f44:	f7ff f9d4 	bl	52f0 <_ZL5utox8mPc>
			utox8(SERIAL_NUMBER_WORD_1, &name[8]);
    5f48:	4b11      	ldr	r3, [pc, #68]	; (5f90 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0xd8>)
    5f4a:	a903      	add	r1, sp, #12
    5f4c:	6818      	ldr	r0, [r3, #0]
    5f4e:	f7ff f9cf 	bl	52f0 <_ZL5utox8mPc>
			utox8(SERIAL_NUMBER_WORD_2, &name[16]);
    5f52:	4b10      	ldr	r3, [pc, #64]	; (5f94 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0xdc>)
    5f54:	a905      	add	r1, sp, #20
    5f56:	6818      	ldr	r0, [r3, #0]
    5f58:	f7ff f9ca 	bl	52f0 <_ZL5utox8mPc>
			utox8(SERIAL_NUMBER_WORD_3, &name[24]);
    5f5c:	4b0e      	ldr	r3, [pc, #56]	; (5f98 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0xe0>)
    5f5e:	a907      	add	r1, sp, #28
    5f60:	6818      	ldr	r0, [r3, #0]
    5f62:	f7ff f9c5 	bl	52f0 <_ZL5utox8mPc>
			PluggableUSB().getShortName(&name[32]);
    5f66:	f000 ff4b 	bl	6e00 <_Z12PluggableUSBv>
    5f6a:	a909      	add	r1, sp, #36	; 0x24
    5f6c:	f000 ff28 	bl	6dc0 <_ZN13PluggableUSB_12getShortNameEPc>
			return sendStringDescriptor((uint8_t*)name, setup.wLength);
    5f70:	79a2      	ldrb	r2, [r4, #6]
    5f72:	a901      	add	r1, sp, #4
    5f74:	e7d8      	b.n	5f28 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x70>
    5f76:	46c0      	nop			; (mov r8, r8)
    5f78:	200005e0 	.word	0x200005e0
    5f7c:	0000b402 	.word	0x0000b402
    5f80:	0000b3f2 	.word	0x0000b3f2
    5f84:	0000b3dc 	.word	0x0000b3dc
    5f88:	0000b3f6 	.word	0x0000b3f6
    5f8c:	0080a00c 	.word	0x0080a00c
    5f90:	0080a040 	.word	0x0080a040
    5f94:	0080a044 	.word	0x0080a044
    5f98:	0080a048 	.word	0x0080a048

00005f9c <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup>:
	// Set the byte count as zero
	usbd.epBank1SetByteCount(ep, 0);
}

bool USBDeviceClass::handleStandardSetup(USBSetup &setup)
{
    5f9c:	b573      	push	{r0, r1, r4, r5, r6, lr}
    5f9e:	0006      	movs	r6, r0
	switch (setup.bRequest) {
    5fa0:	7848      	ldrb	r0, [r1, #1]
{
    5fa2:	000d      	movs	r5, r1
	switch (setup.bRequest) {
    5fa4:	280b      	cmp	r0, #11
    5fa6:	d811      	bhi.n	5fcc <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x30>
    5fa8:	f000 ff44 	bl	6e34 <__gnu_thumb1_case_uqi>
    5fac:	2e101d06 	.word	0x2e101d06
    5fb0:	70484310 	.word	0x70484310
    5fb4:	6c694f4c 	.word	0x6c694f4c
	case GET_STATUS:
		if (setup.bmRequestType == 0)  // device
    5fb8:	7809      	ldrb	r1, [r1, #0]
    5fba:	aa01      	add	r2, sp, #4
    5fbc:	2900      	cmp	r1, #0
    5fbe:	d107      	bne.n	5fd0 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x34>
		{
			// Send the device status
			// TODO: Check current configuration for power mode (if device is configured)
			// TODO: Check if remote wake-up is enabled
			uint8_t buff[] = { 0, 0 };
			armSend(0, buff, 2);
    5fc0:	2302      	movs	r3, #2
			uint8_t buff[] = { 0, 0 };
    5fc2:	7011      	strb	r1, [r2, #0]
    5fc4:	7051      	strb	r1, [r2, #1]
			armSend(0, buff, 2);
    5fc6:	0030      	movs	r0, r6
    5fc8:	f7ff feac 	bl	5d24 <_ZN14USBDeviceClass7armSendEmPKvm>
			return true;
    5fcc:	2001      	movs	r0, #1
		return true;

	default:
		return true;
	}
}
    5fce:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
			uint8_t buff[] = { 0, 0 };
    5fd0:	2300      	movs	r3, #0
    5fd2:	7013      	strb	r3, [r2, #0]
    5fd4:	7053      	strb	r3, [r2, #1]
			if (isEndpointHalt == 1)
    5fd6:	4b2e      	ldr	r3, [pc, #184]	; (6090 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xf4>)
			if (isRemoteWakeUpEnabled == 1)
    5fd8:	781b      	ldrb	r3, [r3, #0]
    5fda:	2b01      	cmp	r3, #1
    5fdc:	d100      	bne.n	5fe0 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x44>
				buff[0] = 1;
    5fde:	7013      	strb	r3, [r2, #0]
			armSend(0, buff, 2);
    5fe0:	2302      	movs	r3, #2
		armSend(0, (void*)&_usbSetInterface, 1);
    5fe2:	2100      	movs	r1, #0
    5fe4:	e7ef      	b.n	5fc6 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x2a>
		if (setup.wValueL == 1) // DEVICEREMOTEWAKEUP
    5fe6:	788a      	ldrb	r2, [r1, #2]
    5fe8:	2300      	movs	r3, #0
    5fea:	2a01      	cmp	r2, #1
    5fec:	d104      	bne.n	5ff8 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x5c>
			uint8_t buff[] = { 0, 0 };
    5fee:	aa01      	add	r2, sp, #4
    5ff0:	7013      	strb	r3, [r2, #0]
    5ff2:	7053      	strb	r3, [r2, #1]
			if (isRemoteWakeUpEnabled == 1)
    5ff4:	4b27      	ldr	r3, [pc, #156]	; (6094 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xf8>)
    5ff6:	e7ef      	b.n	5fd8 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x3c>
			isEndpointHalt = 0;
    5ff8:	4a25      	ldr	r2, [pc, #148]	; (6090 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xf4>)
    5ffa:	7013      	strb	r3, [r2, #0]
    5ffc:	4a26      	ldr	r2, [pc, #152]	; (6098 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xfc>)
    5ffe:	6993      	ldr	r3, [r2, #24]
    6000:	0b9b      	lsrs	r3, r3, #14
    6002:	039b      	lsls	r3, r3, #14
    6004:	6193      	str	r3, [r2, #24]
    6006:	e7e1      	b.n	5fcc <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x30>
		if (setup.wValueL == 1) // DEVICEREMOTEWAKEUP
    6008:	788c      	ldrb	r4, [r1, #2]
    600a:	2c01      	cmp	r4, #1
    600c:	d106      	bne.n	601c <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x80>
			uint8_t buff[] = { 0 };
    600e:	2100      	movs	r1, #0
			isRemoteWakeUpEnabled = 1;
    6010:	4b20      	ldr	r3, [pc, #128]	; (6094 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xf8>)
			uint8_t buff[] = { 0 };
    6012:	aa01      	add	r2, sp, #4
			isRemoteWakeUpEnabled = 1;
    6014:	701c      	strb	r4, [r3, #0]
			uint8_t buff[] = { 0 };
    6016:	7011      	strb	r1, [r2, #0]
			armSend(0, buff, 1);
    6018:	0023      	movs	r3, r4
    601a:	e7d4      	b.n	5fc6 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x2a>
		if (setup.wValueL == 0) // ENDPOINTHALT
    601c:	2c00      	cmp	r4, #0
    601e:	d108      	bne.n	6032 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x96>
			isEndpointHalt = 1;
    6020:	2001      	movs	r0, #1
    6022:	4b1b      	ldr	r3, [pc, #108]	; (6090 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xf4>)
    6024:	4a1c      	ldr	r2, [pc, #112]	; (6098 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xfc>)
    6026:	7018      	strb	r0, [r3, #0]
    6028:	6993      	ldr	r3, [r2, #24]
    602a:	0b9b      	lsrs	r3, r3, #14
    602c:	039b      	lsls	r3, r3, #14
    602e:	6193      	str	r3, [r2, #24]
			return true;
    6030:	e7cd      	b.n	5fce <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x32>
		setAddress(setup.wValueL);
    6032:	78a9      	ldrb	r1, [r5, #2]
    6034:	0030      	movs	r0, r6
    6036:	f7ff fc29 	bl	588c <_ZN14USBDeviceClass10setAddressEm>
    603a:	e7c7      	b.n	5fcc <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x30>
		return sendDescriptor(setup);
    603c:	0030      	movs	r0, r6
    603e:	f7ff ff3b 	bl	5eb8 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup>
    6042:	e7c4      	b.n	5fce <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x32>
		armSend(0, (void*)&_usbConfiguration, 1);
    6044:	2301      	movs	r3, #1
    6046:	4a15      	ldr	r2, [pc, #84]	; (609c <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x100>)
    6048:	e7cb      	b.n	5fe2 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x46>
		if (REQUEST_DEVICE == (setup.bmRequestType & REQUEST_RECIPIENT)) {
    604a:	780b      	ldrb	r3, [r1, #0]
			return false;
    604c:	2000      	movs	r0, #0
		if (REQUEST_DEVICE == (setup.bmRequestType & REQUEST_RECIPIENT)) {
    604e:	06db      	lsls	r3, r3, #27
    6050:	d1bd      	bne.n	5fce <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x32>
			initEndpoints();
    6052:	0030      	movs	r0, r6
    6054:	f7ff fcd6 	bl	5a04 <_ZN14USBDeviceClass13initEndpointsEv>
	inline void epBank1EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT1 = 1; }
    6058:	202a      	movs	r0, #42	; 0x2a
    605a:	2102      	movs	r1, #2
			_usbConfiguration = setup.wValueL;
    605c:	78aa      	ldrb	r2, [r5, #2]
    605e:	4b0f      	ldr	r3, [pc, #60]	; (609c <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x100>)
    6060:	30ff      	adds	r0, #255	; 0xff
    6062:	601a      	str	r2, [r3, #0]
    6064:	4a0c      	ldr	r2, [pc, #48]	; (6098 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xfc>)
    6066:	6813      	ldr	r3, [r2, #0]
    6068:	5c1c      	ldrb	r4, [r3, r0]
    606a:	4321      	orrs	r1, r4
	inline void epBank0EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT0 = 1; }
    606c:	244a      	movs	r4, #74	; 0x4a
	inline void epBank1EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT1 = 1; }
    606e:	5419      	strb	r1, [r3, r0]
	inline void epBank0EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT0 = 1; }
    6070:	34ff      	adds	r4, #255	; 0xff
    6072:	5d19      	ldrb	r1, [r3, r4]
    6074:	3829      	subs	r0, #41	; 0x29
    6076:	38ff      	subs	r0, #255	; 0xff
    6078:	4301      	orrs	r1, r0
    607a:	5519      	strb	r1, [r3, r4]
    607c:	e7d4      	b.n	6028 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x8c>
		armSend(0, (void*)&_usbSetInterface, 1);
    607e:	2301      	movs	r3, #1
    6080:	4a07      	ldr	r2, [pc, #28]	; (60a0 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x104>)
    6082:	e7ae      	b.n	5fe2 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x46>
		_usbSetInterface = setup.wValueL;
    6084:	788a      	ldrb	r2, [r1, #2]
    6086:	4b06      	ldr	r3, [pc, #24]	; (60a0 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x104>)
    6088:	601a      	str	r2, [r3, #0]
    608a:	e7b7      	b.n	5ffc <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x60>
		return false;
    608c:	2000      	movs	r0, #0
    608e:	e79e      	b.n	5fce <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x32>
    6090:	20000600 	.word	0x20000600
    6094:	20000608 	.word	0x20000608
    6098:	20000a98 	.word	0x20000a98
    609c:	20000a90 	.word	0x20000a90
    60a0:	20000a94 	.word	0x20000a94

000060a4 <_ZN14USBDeviceClass10ISRHandlerEv>:

void USBDeviceClass::ISRHandler()
{

	if (_pack_message == true) {
    60a4:	4b3c      	ldr	r3, [pc, #240]	; (6198 <_ZN14USBDeviceClass10ISRHandlerEv+0xf4>)
{
    60a6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (_pack_message == true) {
    60a8:	781c      	ldrb	r4, [r3, #0]
{
    60aa:	0007      	movs	r7, r0
	if (_pack_message == true) {
    60ac:	2c00      	cmp	r4, #0
    60ae:	d15e      	bne.n	616e <_ZN14USBDeviceClass10ISRHandlerEv+0xca>
	inline bool isEndOfResetInterrupt()        { return usb.INTFLAG.bit.EORST; }
    60b0:	4e3a      	ldr	r6, [pc, #232]	; (619c <_ZN14USBDeviceClass10ISRHandlerEv+0xf8>)
    60b2:	6833      	ldr	r3, [r6, #0]
    60b4:	8b9b      	ldrh	r3, [r3, #28]
		return;
	}
	// End-Of-Reset
	if (usbd.isEndOfResetInterrupt())
    60b6:	071b      	lsls	r3, r3, #28
    60b8:	d50e      	bpl.n	60d8 <_ZN14USBDeviceClass10ISRHandlerEv+0x34>
    60ba:	0021      	movs	r1, r4
    60bc:	0020      	movs	r0, r4
    60be:	f7ff f93d 	bl	533c <_ZN14USBDeviceClass6initEPEmm.part.5>
	inline void epBank0EnableSetupReceived(ep_t ep)    { usb.DeviceEndpoint[ep].EPINTENSET.bit.RXSTP = 1; }
    60c2:	6832      	ldr	r2, [r6, #0]
    60c4:	2310      	movs	r3, #16
    60c6:	0011      	movs	r1, r2
    60c8:	31ff      	adds	r1, #255	; 0xff
    60ca:	7a88      	ldrb	r0, [r1, #10]
    60cc:	4303      	orrs	r3, r0
    60ce:	728b      	strb	r3, [r1, #10]
		initEP(0, USB_ENDPOINT_TYPE_CONTROL);

		// Enable Setup-Received interrupt
		usbd.epBank0EnableSetupReceived(0);

		_usbConfiguration = 0;
    60d0:	4b33      	ldr	r3, [pc, #204]	; (61a0 <_ZN14USBDeviceClass10ISRHandlerEv+0xfc>)
    60d2:	601c      	str	r4, [r3, #0]
	inline void ackEndOfResetInterrupt()       { usb.INTFLAG.reg = USB_DEVICE_INTFLAG_EORST; }
    60d4:	2308      	movs	r3, #8
    60d6:	8393      	strh	r3, [r2, #28]
	inline bool isStartOfFrameInterrupt()      { return usb.INTFLAG.bit.SOF; }
    60d8:	6833      	ldr	r3, [r6, #0]
    60da:	8b9a      	ldrh	r2, [r3, #28]

		usbd.ackEndOfResetInterrupt();
	}

	// Start-Of-Frame
	if (usbd.isStartOfFrameInterrupt())
    60dc:	0752      	lsls	r2, r2, #29
    60de:	d501      	bpl.n	60e4 <_ZN14USBDeviceClass10ISRHandlerEv+0x40>
	inline void ackStartOfFrameInterrupt()     { usb.INTFLAG.reg = USB_DEVICE_INTFLAG_SOF; }
    60e0:	2204      	movs	r2, #4
    60e2:	839a      	strh	r2, [r3, #28]
	inline bool epBank0IsSetupReceived(ep_t ep)     { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.RXSTP; }
    60e4:	33ff      	adds	r3, #255	; 0xff
    60e6:	7a1a      	ldrb	r2, [r3, #8]
		}
#endif
	}

	// Endpoint 0 Received Setup interrupt
	if (usbd.epBank0IsSetupReceived(0))
    60e8:	06d2      	lsls	r2, r2, #27
    60ea:	d520      	bpl.n	612e <_ZN14USBDeviceClass10ISRHandlerEv+0x8a>
	inline void epBank0AckSetupReceived(ep_t ep)    { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_RXSTP; }
    60ec:	2210      	movs	r2, #16
    60ee:	721a      	strb	r2, [r3, #8]
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
    60f0:	7959      	ldrb	r1, [r3, #5]
    60f2:	3230      	adds	r2, #48	; 0x30
    60f4:	430a      	orrs	r2, r1
    60f6:	715a      	strb	r2, [r3, #5]
		/* Clear the Bank 0 ready flag on Control OUT */
		// The RAM Buffer is empty: we can receive data
		usbd.epBank0ResetReady(0);

		bool ok;
		if (REQUEST_STANDARD == (setup->bmRequestType & REQUEST_TYPE)) {
    60f8:	2360      	movs	r3, #96	; 0x60
    60fa:	492a      	ldr	r1, [pc, #168]	; (61a4 <_ZN14USBDeviceClass10ISRHandlerEv+0x100>)
			// Standard Requests
			ok = handleStandardSetup(*setup);
    60fc:	0038      	movs	r0, r7
		if (REQUEST_STANDARD == (setup->bmRequestType & REQUEST_TYPE)) {
    60fe:	780a      	ldrb	r2, [r1, #0]
    6100:	421a      	tst	r2, r3
    6102:	d135      	bne.n	6170 <_ZN14USBDeviceClass10ISRHandlerEv+0xcc>
			ok = handleStandardSetup(*setup);
    6104:	f7ff ff4a 	bl	5f9c <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup>
		} else {
			// Class Interface Requests
			ok = handleClassInterfaceSetup(*setup);
		}

		if (ok) {
    6108:	2800      	cmp	r0, #0
    610a:	d034      	beq.n	6176 <_ZN14USBDeviceClass10ISRHandlerEv+0xd2>
	inline void epBank1SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK1RDY = 1; }
    610c:	2280      	movs	r2, #128	; 0x80
    610e:	6833      	ldr	r3, [r6, #0]
    6110:	4252      	negs	r2, r2
    6112:	33ff      	adds	r3, #255	; 0xff
    6114:	7999      	ldrb	r1, [r3, #6]
    6116:	430a      	orrs	r2, r1
	USB->DEVICE.DeviceEndpoint[ep].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_STALLRQ(2);
    6118:	719a      	strb	r2, [r3, #6]
	inline bool epBank1IsStalled(ep_t ep)           { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.STALL1; }
    611a:	6833      	ldr	r3, [r6, #0]
    611c:	33ff      	adds	r3, #255	; 0xff
    611e:	7a1a      	ldrb	r2, [r3, #8]
			usbd.epBank1SetReady(0);
		} else {
			stall(0);
		}

		if (usbd.epBank1IsStalled(0))
    6120:	0652      	lsls	r2, r2, #25
    6122:	d504      	bpl.n	612e <_ZN14USBDeviceClass10ISRHandlerEv+0x8a>
	inline void epBank1AckStalled(ep_t ep)          { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL(2); }
    6124:	2240      	movs	r2, #64	; 0x40
    6126:	721a      	strb	r2, [r3, #8]
	inline void epBank1DisableStalled(ep_t ep)          { usb.DeviceEndpoint[ep].EPINTENCLR.bit.STALL1 = 1; }
    6128:	7a59      	ldrb	r1, [r3, #9]
    612a:	430a      	orrs	r2, r1
    612c:	725a      	strb	r2, [r3, #9]
	inline uint16_t epInterruptSummary() { return usb.EPINTSMRY.reg; }
    612e:	6833      	ldr	r3, [r6, #0]
		}

	} // end Received Setup handler

	uint8_t i=0;
	uint8_t ept_int = usbd.epInterruptSummary() & 0xFE; // Remove endpoint number 0 (setup)
    6130:	2500      	movs	r5, #0
    6132:	8c1c      	ldrh	r4, [r3, #32]
    6134:	2301      	movs	r3, #1
    6136:	439c      	bics	r4, r3
    6138:	b2e4      	uxtb	r4, r4
	while (ept_int != 0)
	{
		// Check if endpoint has a pending interrupt
		if ((ept_int & (1 << i)) != 0)
    613a:	9301      	str	r3, [sp, #4]
    613c:	b2e9      	uxtb	r1, r5
	while (ept_int != 0)
    613e:	2c00      	cmp	r4, #0
    6140:	d015      	beq.n	616e <_ZN14USBDeviceClass10ISRHandlerEv+0xca>
		if ((ept_int & (1 << i)) != 0)
    6142:	0023      	movs	r3, r4
    6144:	412b      	asrs	r3, r5
    6146:	9a01      	ldr	r2, [sp, #4]
    6148:	4213      	tst	r3, r2
    614a:	d00d      	beq.n	6168 <_ZN14USBDeviceClass10ISRHandlerEv+0xc4>
	inline bool epBank0IsTransferComplete(ep_t ep)  { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.TRCPT0; }
    614c:	002b      	movs	r3, r5
    614e:	6832      	ldr	r2, [r6, #0]
    6150:	3308      	adds	r3, #8
    6152:	015b      	lsls	r3, r3, #5
    6154:	18d3      	adds	r3, r2, r3
    6156:	79da      	ldrb	r2, [r3, #7]
		{
			// Endpoint Transfer Complete (0/1) Interrupt
			if (usbd.epBank0IsTransferComplete(i) ||
    6158:	07d2      	lsls	r2, r2, #31
    615a:	d413      	bmi.n	6184 <_ZN14USBDeviceClass10ISRHandlerEv+0xe0>
	inline bool epBank1IsTransferComplete(ep_t ep)  { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.TRCPT1; }
    615c:	79db      	ldrb	r3, [r3, #7]
    615e:	079b      	lsls	r3, r3, #30
    6160:	d410      	bmi.n	6184 <_ZN14USBDeviceClass10ISRHandlerEv+0xe0>
					epHandlers[i]->handleEndpoint();
				} else {
					handleEndpoint(i);
				}
			}
			ept_int &= ~(1 << i);
    6162:	9b01      	ldr	r3, [sp, #4]
    6164:	40ab      	lsls	r3, r5
    6166:	439c      	bics	r4, r3
    6168:	3501      	adds	r5, #1
		}
		i++;
		if (i > USB_EPT_NUM)
    616a:	2d09      	cmp	r5, #9
    616c:	d1e6      	bne.n	613c <_ZN14USBDeviceClass10ISRHandlerEv+0x98>
			break;  // fire exit
	}
}
    616e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
			ok = handleClassInterfaceSetup(*setup);
    6170:	f7ff fbb0 	bl	58d4 <_ZN14USBDeviceClass25handleClassInterfaceSetupER8USBSetup>
    6174:	e7c8      	b.n	6108 <_ZN14USBDeviceClass10ISRHandlerEv+0x64>
	USB->DEVICE.DeviceEndpoint[ep].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_STALLRQ(2);
    6176:	2220      	movs	r2, #32
    6178:	4b0b      	ldr	r3, [pc, #44]	; (61a8 <_ZN14USBDeviceClass10ISRHandlerEv+0x104>)
    617a:	e7cd      	b.n	6118 <_ZN14USBDeviceClass10ISRHandlerEv+0x74>
					epHandlers[i]->handleEndpoint();
    617c:	6803      	ldr	r3, [r0, #0]
    617e:	681b      	ldr	r3, [r3, #0]
    6180:	4798      	blx	r3
    6182:	e7ee      	b.n	6162 <_ZN14USBDeviceClass10ISRHandlerEv+0xbe>
				if (epHandlers[i]) {
    6184:	4b09      	ldr	r3, [pc, #36]	; (61ac <_ZN14USBDeviceClass10ISRHandlerEv+0x108>)
    6186:	00aa      	lsls	r2, r5, #2
    6188:	58d0      	ldr	r0, [r2, r3]
    618a:	2800      	cmp	r0, #0
    618c:	d1f6      	bne.n	617c <_ZN14USBDeviceClass10ISRHandlerEv+0xd8>
					handleEndpoint(i);
    618e:	0038      	movs	r0, r7
    6190:	f7ff fae0 	bl	5754 <_ZN14USBDeviceClass14handleEndpointEh>
    6194:	e7e5      	b.n	6162 <_ZN14USBDeviceClass10ISRHandlerEv+0xbe>
    6196:	46c0      	nop			; (mov r8, r8)
    6198:	20000a8d 	.word	0x20000a8d
    619c:	20000a98 	.word	0x20000a98
    61a0:	20000a90 	.word	0x20000a90
    61a4:	200007cc 	.word	0x200007cc
    61a8:	410050ff 	.word	0x410050ff
    61ac:	200005e4 	.word	0x200005e4

000061b0 <UDD_Handler>:
extern "C" void UDD_Handler(void) {
    61b0:	b510      	push	{r4, lr}
	USBDevice.ISRHandler();
    61b2:	4802      	ldr	r0, [pc, #8]	; (61bc <UDD_Handler+0xc>)
    61b4:	f7ff ff76 	bl	60a4 <_ZN14USBDeviceClass10ISRHandlerEv>
}
    61b8:	bd10      	pop	{r4, pc}
    61ba:	46c0      	nop			; (mov r8, r8)
    61bc:	200005e0 	.word	0x200005e0

000061c0 <_GLOBAL__sub_I__ZN20USBDevice_SAMD21G18x5resetEv>:
	USBDevice_SAMD21G18x() : usb(USB->DEVICE) {
    61c0:	4a01      	ldr	r2, [pc, #4]	; (61c8 <_GLOBAL__sub_I__ZN20USBDevice_SAMD21G18x5resetEv+0x8>)
    61c2:	4b02      	ldr	r3, [pc, #8]	; (61cc <_GLOBAL__sub_I__ZN20USBDevice_SAMD21G18x5resetEv+0xc>)
    61c4:	601a      	str	r2, [r3, #0]
 * USB Device instance
 * -------------------
 */

// USBDevice class instance
USBDeviceClass USBDevice;
    61c6:	4770      	bx	lr
    61c8:	41005000 	.word	0x41005000
    61cc:	20000a98 	.word	0x20000a98

000061d0 <init>:
 *   - During reset, all PORT lines are configured as inputs with input buffers, output buffers and pull disabled.
 */
void init( void )
{
  // Set Systick to 1ms interval, common to all Cortex-M variants
  if ( SysTick_Config( SystemCoreClock / 1000 ) )
    61d0:	21fa      	movs	r1, #250	; 0xfa
    61d2:	4b31      	ldr	r3, [pc, #196]	; (6298 <init+0xc8>)
{
    61d4:	b510      	push	{r4, lr}
  if ( SysTick_Config( SystemCoreClock / 1000 ) )
    61d6:	6818      	ldr	r0, [r3, #0]
    61d8:	0089      	lsls	r1, r1, #2
    61da:	f000 fe35 	bl	6e48 <__udivsi3>
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
    61de:	4b2f      	ldr	r3, [pc, #188]	; (629c <init+0xcc>)
    61e0:	3801      	subs	r0, #1
    61e2:	4298      	cmp	r0, r3
    61e4:	d856      	bhi.n	6294 <init+0xc4>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
    61e6:	492e      	ldr	r1, [pc, #184]	; (62a0 <init+0xd0>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    61e8:	4a2e      	ldr	r2, [pc, #184]	; (62a4 <init+0xd4>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
    61ea:	6048      	str	r0, [r1, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    61ec:	20c0      	movs	r0, #192	; 0xc0
    61ee:	6a13      	ldr	r3, [r2, #32]
    61f0:	0600      	lsls	r0, r0, #24
    61f2:	021b      	lsls	r3, r3, #8
    61f4:	0a1b      	lsrs	r3, r3, #8
    61f6:	4303      	orrs	r3, r0
    61f8:	6213      	str	r3, [r2, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
    61fa:	2400      	movs	r4, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
    61fc:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
    61fe:	608c      	str	r4, [r1, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
    6200:	600b      	str	r3, [r1, #0]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    6202:	2180      	movs	r1, #128	; 0x80
    6204:	6a13      	ldr	r3, [r2, #32]
    6206:	0609      	lsls	r1, r1, #24
    6208:	021b      	lsls	r3, r3, #8
    620a:	0a1b      	lsrs	r3, r3, #8
    620c:	430b      	orrs	r3, r1
    620e:	6213      	str	r3, [r2, #32]
//
//  // Clock EIC for I/O interrupts
//  PM->APBAMASK.reg |= PM_APBAMASK_EIC ;

  // Clock SERCOM for Serial
  PM->APBCMASK.reg |= PM_APBCMASK_SERCOM0 | PM_APBCMASK_SERCOM1 | PM_APBCMASK_SERCOM2 | PM_APBCMASK_SERCOM3 | PM_APBCMASK_SERCOM4 | PM_APBCMASK_SERCOM5 ;
    6210:	22fc      	movs	r2, #252	; 0xfc
    6212:	4b25      	ldr	r3, [pc, #148]	; (62a8 <init+0xd8>)
    6214:	6a19      	ldr	r1, [r3, #32]
    6216:	430a      	orrs	r2, r1
    6218:	621a      	str	r2, [r3, #32]

  // Clock TC/TCC for Pulse and Analog
  PM->APBCMASK.reg |= PM_APBCMASK_TCC0 | PM_APBCMASK_TCC1 | PM_APBCMASK_TCC2 | PM_APBCMASK_TC3 | PM_APBCMASK_TC4 | PM_APBCMASK_TC5 ;
    621a:	22fc      	movs	r2, #252	; 0xfc
    621c:	6a19      	ldr	r1, [r3, #32]
    621e:	0192      	lsls	r2, r2, #6
    6220:	430a      	orrs	r2, r1
    6222:	621a      	str	r2, [r3, #32]

  // Clock ADC/DAC for Analog
  PM->APBCMASK.reg |= PM_APBCMASK_ADC | PM_APBCMASK_DAC ;
    6224:	22a0      	movs	r2, #160	; 0xa0
    6226:	6a19      	ldr	r1, [r3, #32]
    6228:	02d2      	lsls	r2, r2, #11
    622a:	430a      	orrs	r2, r1
    622c:	621a      	str	r2, [r3, #32]

  // Setup all pins (digital and analog) in INPUT mode (default is nothing)
  for (uint32_t ul = 0 ; ul < NUM_DIGITAL_PINS ; ul++ )
  {
    pinMode( ul, INPUT ) ;
    622e:	0020      	movs	r0, r4
    6230:	2100      	movs	r1, #0
  for (uint32_t ul = 0 ; ul < NUM_DIGITAL_PINS ; ul++ )
    6232:	3401      	adds	r4, #1
    pinMode( ul, INPUT ) ;
    6234:	f000 f876 	bl	6324 <pinMode>
  for (uint32_t ul = 0 ; ul < NUM_DIGITAL_PINS ; ul++ )
    6238:	2c0f      	cmp	r4, #15
    623a:	d1f8      	bne.n	622e <init+0x5e>
  }

  // Initialize Analog Controller
  // Setting clock
  while(GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY);
    623c:	4b1b      	ldr	r3, [pc, #108]	; (62ac <init+0xdc>)
    623e:	001c      	movs	r4, r3
    6240:	785a      	ldrb	r2, [r3, #1]
    6242:	b252      	sxtb	r2, r2
    6244:	2a00      	cmp	r2, #0
    6246:	dbfb      	blt.n	6240 <init+0x70>

  GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID( GCM_ADC ) | // Generic Clock ADC
    6248:	4a19      	ldr	r2, [pc, #100]	; (62b0 <init+0xe0>)
    624a:	805a      	strh	r2, [r3, #2]
                      GCLK_CLKCTRL_GEN_GCLK0     | // Generic Clock Generator 0 is source
                      GCLK_CLKCTRL_CLKEN ;

  while( ADC->STATUS.bit.SYNCBUSY == 1 );          // Wait for synchronization of registers between the clock domains
    624c:	4b19      	ldr	r3, [pc, #100]	; (62b4 <init+0xe4>)
    624e:	001a      	movs	r2, r3
    6250:	7e59      	ldrb	r1, [r3, #25]
    6252:	09c9      	lsrs	r1, r1, #7
    6254:	2901      	cmp	r1, #1
    6256:	d0fb      	beq.n	6250 <init+0x80>

  ADC->CTRLB.reg = ADC_CTRLB_PRESCALER_DIV512 |    // Divide Clock by 512.
    6258:	21e4      	movs	r1, #228	; 0xe4
    625a:	00c9      	lsls	r1, r1, #3
    625c:	8099      	strh	r1, [r3, #4]
                   ADC_CTRLB_RESSEL_10BIT;         // 10 bits resolution as default

  ADC->SAMPCTRL.reg = 0x3f;                        // Set max Sampling Time Length
    625e:	213f      	movs	r1, #63	; 0x3f
    6260:	70d9      	strb	r1, [r3, #3]

  while( ADC->STATUS.bit.SYNCBUSY == 1 );          // Wait for synchronization of registers between the clock domains
    6262:	7e53      	ldrb	r3, [r2, #25]
    6264:	09db      	lsrs	r3, r3, #7
    6266:	2b01      	cmp	r3, #1
    6268:	d0fb      	beq.n	6262 <init+0x92>

  ADC->INPUTCTRL.reg = ADC_INPUTCTRL_MUXNEG_GND;   // No Negative input (Internal Ground)
    626a:	23c0      	movs	r3, #192	; 0xc0

  // Averaging (see datasheet table in AVGCTRL register description)
  ADC->AVGCTRL.reg = ADC_AVGCTRL_SAMPLENUM_1 |    // 1 sample only (no oversampling nor averaging)
    626c:	2000      	movs	r0, #0
  ADC->INPUTCTRL.reg = ADC_INPUTCTRL_MUXNEG_GND;   // No Negative input (Internal Ground)
    626e:	015b      	lsls	r3, r3, #5
    6270:	6113      	str	r3, [r2, #16]
  ADC->AVGCTRL.reg = ADC_AVGCTRL_SAMPLENUM_1 |    // 1 sample only (no oversampling nor averaging)
    6272:	7090      	strb	r0, [r2, #2]
                     ADC_AVGCTRL_ADJRES(0x0ul);   // Adjusting result by 0

  analogReference( AR_DEFAULT ) ; // Analog Reference is AREF pin (3.3v)
    6274:	f000 f824 	bl	62c0 <analogReference>

  // Initialize DAC
  // Setting clock
  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY );
    6278:	7863      	ldrb	r3, [r4, #1]
    627a:	b25b      	sxtb	r3, r3
    627c:	2b00      	cmp	r3, #0
    627e:	dbfb      	blt.n	6278 <init+0xa8>
  GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID( GCM_DAC ) | // Generic Clock ADC
    6280:	4b0d      	ldr	r3, [pc, #52]	; (62b8 <init+0xe8>)
                      GCLK_CLKCTRL_GEN_GCLK0     | // Generic Clock Generator 0 is source
                      GCLK_CLKCTRL_CLKEN ;

  while ( DAC->STATUS.bit.SYNCBUSY == 1 ); // Wait for synchronization of registers between the clock domains
    6282:	4a0e      	ldr	r2, [pc, #56]	; (62bc <init+0xec>)
  GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID( GCM_DAC ) | // Generic Clock ADC
    6284:	8063      	strh	r3, [r4, #2]
  while ( DAC->STATUS.bit.SYNCBUSY == 1 ); // Wait for synchronization of registers between the clock domains
    6286:	79d3      	ldrb	r3, [r2, #7]
    6288:	09db      	lsrs	r3, r3, #7
    628a:	2b01      	cmp	r3, #1
    628c:	d0fb      	beq.n	6286 <init+0xb6>
  DAC->CTRLB.reg = DAC_CTRLB_REFSEL_AVCC | // Using the 3.3V reference
    628e:	2341      	movs	r3, #65	; 0x41
    6290:	7053      	strb	r3, [r2, #1]
                   DAC_CTRLB_EOEN ;        // External Output Enable (Vout)
}
    6292:	bd10      	pop	{r4, pc}
    6294:	e7fe      	b.n	6294 <init+0xc4>
    6296:	46c0      	nop			; (mov r8, r8)
    6298:	20000084 	.word	0x20000084
    629c:	00ffffff 	.word	0x00ffffff
    62a0:	e000e010 	.word	0xe000e010
    62a4:	e000ed00 	.word	0xe000ed00
    62a8:	40000400 	.word	0x40000400
    62ac:	40000c00 	.word	0x40000c00
    62b0:	0000401e 	.word	0x0000401e
    62b4:	42004000 	.word	0x42004000
    62b8:	00004021 	.word	0x00004021
    62bc:	42004800 	.word	0x42004800

000062c0 <analogReference>:
static int _writeResolution = 8;

// Wait for synchronization of registers between the clock domains
static __inline__ void syncADC() __attribute__((always_inline, unused));
static void syncADC() {
  while (ADC->STATUS.bit.SYNCBUSY == 1)
    62c0:	4a16      	ldr	r2, [pc, #88]	; (631c <analogReference+0x5c>)
 * External Reference should be between 1v and VDDANA-0.6v=2.7v
 *
 * Warning : On Arduino Zero board the input/output voltage for SAMD21G18 is 3.3 volts maximum
 */
void analogReference(eAnalogReference mode)
{
    62c2:	b500      	push	{lr}
    62c4:	0013      	movs	r3, r2
  while (ADC->STATUS.bit.SYNCBUSY == 1)
    62c6:	7e51      	ldrb	r1, [r2, #25]
    62c8:	09c9      	lsrs	r1, r1, #7
    62ca:	2901      	cmp	r1, #1
    62cc:	d0fb      	beq.n	62c6 <analogReference+0x6>
  syncADC();
  switch (mode)
    62ce:	3801      	subs	r0, #1
    62d0:	2804      	cmp	r0, #4
    62d2:	d816      	bhi.n	6302 <analogReference+0x42>
      ADC->INPUTCTRL.bit.GAIN = ADC_INPUTCTRL_GAIN_1X_Val;      // Gain Factor Selection
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_INT1V_Val;   // 1.0V voltage reference
      break;

    case AR_INTERNAL1V65:
      ADC->INPUTCTRL.bit.GAIN = ADC_INPUTCTRL_GAIN_1X_Val;      // Gain Factor Selection
    62d4:	6919      	ldr	r1, [r3, #16]
    62d6:	4a12      	ldr	r2, [pc, #72]	; (6320 <analogReference+0x60>)
    62d8:	400a      	ands	r2, r1
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_INTVCC1_Val; // 1/2 VDDANA = 0.5* 3V3 = 1.65V
    62da:	210f      	movs	r1, #15
      ADC->INPUTCTRL.bit.GAIN = ADC_INPUTCTRL_GAIN_1X_Val;      // Gain Factor Selection
    62dc:	611a      	str	r2, [r3, #16]
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_INTVCC1_Val; // 1/2 VDDANA = 0.5* 3V3 = 1.65V
    62de:	785a      	ldrb	r2, [r3, #1]
    62e0:	438a      	bics	r2, r1
  switch (mode)
    62e2:	f000 fda7 	bl	6e34 <__gnu_thumb1_case_uqi>
    62e6:	0803      	.short	0x0803
    62e8:	0b06      	.short	0x0b06
    62ea:	03          	.byte	0x03
    62eb:	00          	.byte	0x00
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_INTVCC0_Val; // 1/1.48 VDDANA = 1/1.48* 3V3 = 2.2297
    62ec:	0011      	movs	r1, r2
    62ee:	2201      	movs	r2, #1
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_INTVCC1_Val; // 1/2 VDDANA = 0.5* 3V3 = 1.65V
    62f0:	430a      	orrs	r2, r1
    62f2:	705a      	strb	r2, [r3, #1]
    default:
      ADC->INPUTCTRL.bit.GAIN = ADC_INPUTCTRL_GAIN_DIV2_Val;
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_INTVCC1_Val; // 1/2 VDDANA = 0.5* 3V3 = 1.65V
      break;
  }
}
    62f4:	bd00      	pop	{pc}
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_AREFA_Val;
    62f6:	0011      	movs	r1, r2
    62f8:	2203      	movs	r2, #3
    62fa:	e7f9      	b.n	62f0 <analogReference+0x30>
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_INTVCC1_Val; // 1/2 VDDANA = 0.5* 3V3 = 1.65V
    62fc:	0011      	movs	r1, r2
    62fe:	2202      	movs	r2, #2
    6300:	e7f6      	b.n	62f0 <analogReference+0x30>
      ADC->INPUTCTRL.bit.GAIN = ADC_INPUTCTRL_GAIN_DIV2_Val;
    6302:	23f0      	movs	r3, #240	; 0xf0
    6304:	6911      	ldr	r1, [r2, #16]
    6306:	051b      	lsls	r3, r3, #20
    6308:	430b      	orrs	r3, r1
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_INTVCC1_Val; // 1/2 VDDANA = 0.5* 3V3 = 1.65V
    630a:	210f      	movs	r1, #15
      ADC->INPUTCTRL.bit.GAIN = ADC_INPUTCTRL_GAIN_DIV2_Val;
    630c:	6113      	str	r3, [r2, #16]
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_INTVCC1_Val; // 1/2 VDDANA = 0.5* 3V3 = 1.65V
    630e:	7853      	ldrb	r3, [r2, #1]
    6310:	438b      	bics	r3, r1
    6312:	0019      	movs	r1, r3
    6314:	2302      	movs	r3, #2
    6316:	430b      	orrs	r3, r1
    6318:	7053      	strb	r3, [r2, #1]
}
    631a:	e7eb      	b.n	62f4 <analogReference+0x34>
    631c:	42004000 	.word	0x42004000
    6320:	f0ffffff 	.word	0xf0ffffff

00006324 <pinMode>:
#endif

void pinMode( uint32_t ulPin, uint32_t ulMode )
{
  // Handle the case the pin isn't usable as PIO
  if ( g_APinDescription[ulPin].ulPinType == PIO_NOT_A_PIN )
    6324:	2318      	movs	r3, #24
{
    6326:	b530      	push	{r4, r5, lr}
  if ( g_APinDescription[ulPin].ulPinType == PIO_NOT_A_PIN )
    6328:	001d      	movs	r5, r3
{
    632a:	0004      	movs	r4, r0
  if ( g_APinDescription[ulPin].ulPinType == PIO_NOT_A_PIN )
    632c:	4345      	muls	r5, r0
    632e:	2008      	movs	r0, #8
    6330:	4a20      	ldr	r2, [pc, #128]	; (63b4 <pinMode+0x90>)
    6332:	1955      	adds	r5, r2, r5
    6334:	5628      	ldrsb	r0, [r5, r0]
    6336:	3001      	adds	r0, #1
    6338:	d014      	beq.n	6364 <pinMode+0x40>
  {
    return ;
  }

  // Set pin mode according to chapter '22.6.3 I/O Pin Configuration'
  switch ( ulMode )
    633a:	2903      	cmp	r1, #3
    633c:	d812      	bhi.n	6364 <pinMode+0x40>
    633e:	0008      	movs	r0, r1
      PORT->Group[g_APinDescription[ulPin].ulPort].OUTSET.reg = (uint32_t)(1<<g_APinDescription[ulPin].ulPin) ;
    break ;

    case INPUT_PULLDOWN:
      // Set pin to input mode with pull-down resistor enabled
      PORT->Group[g_APinDescription[ulPin].ulPort].PINCFG[g_APinDescription[ulPin].ulPin].reg=(uint8_t)(PORT_PINCFG_INEN|PORT_PINCFG_PULLEN) ;
    6340:	4363      	muls	r3, r4
    6342:	56d1      	ldrsb	r1, [r2, r3]
    6344:	18d3      	adds	r3, r2, r3
  switch ( ulMode )
    6346:	f000 fd75 	bl	6e34 <__gnu_thumb1_case_uqi>
    634a:	2802      	.short	0x2802
    634c:	1b0e      	.short	0x1b0e
      PORT->Group[g_APinDescription[ulPin].ulPort].PINCFG[g_APinDescription[ulPin].ulPin].reg=(uint8_t)(PORT_PINCFG_INEN) ;
    634e:	6858      	ldr	r0, [r3, #4]
    6350:	01cb      	lsls	r3, r1, #7
    6352:	2102      	movs	r1, #2
    6354:	4a18      	ldr	r2, [pc, #96]	; (63b8 <pinMode+0x94>)
    6356:	189b      	adds	r3, r3, r2
    6358:	181a      	adds	r2, r3, r0
    635a:	3240      	adds	r2, #64	; 0x40
    635c:	7011      	strb	r1, [r2, #0]
      PORT->Group[g_APinDescription[ulPin].ulPort].DIRCLR.reg = (uint32_t)(1<<g_APinDescription[ulPin].ulPin) ;
    635e:	2201      	movs	r2, #1
    6360:	4082      	lsls	r2, r0
    6362:	605a      	str	r2, [r3, #4]

    default:
      // do nothing
    break ;
  }
}
    6364:	bd30      	pop	{r4, r5, pc}
      PORT->Group[g_APinDescription[ulPin].ulPort].PINCFG[g_APinDescription[ulPin].ulPin].reg=(uint8_t)(PORT_PINCFG_INEN|PORT_PINCFG_PULLEN) ;
    6366:	6858      	ldr	r0, [r3, #4]
    6368:	01cb      	lsls	r3, r1, #7
    636a:	2106      	movs	r1, #6
    636c:	4a12      	ldr	r2, [pc, #72]	; (63b8 <pinMode+0x94>)
    636e:	189b      	adds	r3, r3, r2
    6370:	181a      	adds	r2, r3, r0
    6372:	3240      	adds	r2, #64	; 0x40
    6374:	7011      	strb	r1, [r2, #0]
      PORT->Group[g_APinDescription[ulPin].ulPort].DIRCLR.reg = (uint32_t)(1<<g_APinDescription[ulPin].ulPin) ;
    6376:	2201      	movs	r2, #1
    6378:	4082      	lsls	r2, r0
    637a:	605a      	str	r2, [r3, #4]
      PORT->Group[g_APinDescription[ulPin].ulPort].OUTSET.reg = (uint32_t)(1<<g_APinDescription[ulPin].ulPin) ;
    637c:	619a      	str	r2, [r3, #24]
    break ;
    637e:	e7f1      	b.n	6364 <pinMode+0x40>
      PORT->Group[g_APinDescription[ulPin].ulPort].PINCFG[g_APinDescription[ulPin].ulPin].reg=(uint8_t)(PORT_PINCFG_INEN|PORT_PINCFG_PULLEN) ;
    6380:	6858      	ldr	r0, [r3, #4]
    6382:	01cb      	lsls	r3, r1, #7
    6384:	2106      	movs	r1, #6
    6386:	4a0c      	ldr	r2, [pc, #48]	; (63b8 <pinMode+0x94>)
    6388:	189b      	adds	r3, r3, r2
    638a:	181a      	adds	r2, r3, r0
    638c:	3240      	adds	r2, #64	; 0x40
    638e:	7011      	strb	r1, [r2, #0]
      PORT->Group[g_APinDescription[ulPin].ulPort].DIRCLR.reg = (uint32_t)(1<<g_APinDescription[ulPin].ulPin) ;
    6390:	2201      	movs	r2, #1
    6392:	4082      	lsls	r2, r0
    6394:	605a      	str	r2, [r3, #4]
      PORT->Group[g_APinDescription[ulPin].ulPort].OUTCLR.reg = (uint32_t)(1<<g_APinDescription[ulPin].ulPin) ;
    6396:	615a      	str	r2, [r3, #20]
    break ;
    6398:	e7e4      	b.n	6364 <pinMode+0x40>
      PORT->Group[g_APinDescription[ulPin].ulPort].PINCFG[g_APinDescription[ulPin].ulPin].reg=(uint8_t)(PORT_PINCFG_INEN) ;
    639a:	6858      	ldr	r0, [r3, #4]
    639c:	01cb      	lsls	r3, r1, #7
    639e:	2102      	movs	r1, #2
    63a0:	4a05      	ldr	r2, [pc, #20]	; (63b8 <pinMode+0x94>)
    63a2:	189b      	adds	r3, r3, r2
    63a4:	181a      	adds	r2, r3, r0
    63a6:	3240      	adds	r2, #64	; 0x40
    63a8:	7011      	strb	r1, [r2, #0]
      PORT->Group[g_APinDescription[ulPin].ulPort].DIRSET.reg = (uint32_t)(1<<g_APinDescription[ulPin].ulPin) ;
    63aa:	2201      	movs	r2, #1
    63ac:	4082      	lsls	r2, r0
    63ae:	609a      	str	r2, [r3, #8]
    break ;
    63b0:	e7d8      	b.n	6364 <pinMode+0x40>
    63b2:	46c0      	nop			; (mov r8, r8)
    63b4:	0000b414 	.word	0x0000b414
    63b8:	41004400 	.word	0x41004400

000063bc <digitalWrite>:

void digitalWrite( uint32_t ulPin, uint32_t ulVal )
{
  // Handle the case the pin isn't usable as PIO
  if ( g_APinDescription[ulPin].ulPinType == PIO_NOT_A_PIN )
    63bc:	2318      	movs	r3, #24
{
    63be:	b5f0      	push	{r4, r5, r6, r7, lr}
  if ( g_APinDescription[ulPin].ulPinType == PIO_NOT_A_PIN )
    63c0:	2408      	movs	r4, #8
    63c2:	4358      	muls	r0, r3
    63c4:	4a11      	ldr	r2, [pc, #68]	; (640c <digitalWrite+0x50>)
    63c6:	1813      	adds	r3, r2, r0
    63c8:	571c      	ldrsb	r4, [r3, r4]
    63ca:	3401      	adds	r4, #1
    63cc:	d01b      	beq.n	6406 <digitalWrite+0x4a>
    return ;
  }

  EPortType port = g_APinDescription[ulPin].ulPort;
  uint32_t pin = g_APinDescription[ulPin].ulPin;
  uint32_t pinMask = (1ul << pin);
    63ce:	2601      	movs	r6, #1
    63d0:	0035      	movs	r5, r6
  uint32_t pin = g_APinDescription[ulPin].ulPin;
    63d2:	685f      	ldr	r7, [r3, #4]

  if ( (PORT->Group[port].DIRSET.reg & pinMask) == 0 ) {
    63d4:	5683      	ldrsb	r3, [r0, r2]
  uint32_t pinMask = (1ul << pin);
    63d6:	40bd      	lsls	r5, r7
  if ( (PORT->Group[port].DIRSET.reg & pinMask) == 0 ) {
    63d8:	4a0d      	ldr	r2, [pc, #52]	; (6410 <digitalWrite+0x54>)
    63da:	01db      	lsls	r3, r3, #7
    63dc:	189a      	adds	r2, r3, r2
    63de:	6890      	ldr	r0, [r2, #8]
    63e0:	4228      	tst	r0, r5
    63e2:	d10b      	bne.n	63fc <digitalWrite+0x40>
    // the pin is not an output, disable pull-up if val is LOW, otherwise enable pull-up
    PORT->Group[port].PINCFG[pin].bit.PULLEN = ((ulVal == LOW) ? 0 : 1) ;
    63e4:	000c      	movs	r4, r1
    63e6:	1e60      	subs	r0, r4, #1
    63e8:	4184      	sbcs	r4, r0
    63ea:	19d2      	adds	r2, r2, r7
    63ec:	3240      	adds	r2, #64	; 0x40
    63ee:	7810      	ldrb	r0, [r2, #0]
    63f0:	4034      	ands	r4, r6
    63f2:	3603      	adds	r6, #3
    63f4:	00a4      	lsls	r4, r4, #2
    63f6:	43b0      	bics	r0, r6
    63f8:	4320      	orrs	r0, r4
    63fa:	7010      	strb	r0, [r2, #0]
  }

  switch ( ulVal )
  {
    case LOW:
      PORT->Group[port].OUTCLR.reg = pinMask;
    63fc:	4a04      	ldr	r2, [pc, #16]	; (6410 <digitalWrite+0x54>)
    63fe:	189b      	adds	r3, r3, r2
  switch ( ulVal )
    6400:	2900      	cmp	r1, #0
    6402:	d101      	bne.n	6408 <digitalWrite+0x4c>
      PORT->Group[port].OUTCLR.reg = pinMask;
    6404:	615d      	str	r5, [r3, #20]
      PORT->Group[port].OUTSET.reg = pinMask;
    break ;
  }

  return ;
}
    6406:	bdf0      	pop	{r4, r5, r6, r7, pc}
      PORT->Group[port].OUTSET.reg = pinMask;
    6408:	619d      	str	r5, [r3, #24]
    break ;
    640a:	e7fc      	b.n	6406 <digitalWrite+0x4a>
    640c:	0000b414 	.word	0x0000b414
    6410:	41004400 	.word	0x41004400

00006414 <digitalRead>:

int digitalRead( uint32_t ulPin )
{
  // Handle the case the pin isn't usable as PIO
  if ( g_APinDescription[ulPin].ulPinType == PIO_NOT_A_PIN )
    6414:	2318      	movs	r3, #24
{
    6416:	b510      	push	{r4, lr}
  if ( g_APinDescription[ulPin].ulPinType == PIO_NOT_A_PIN )
    6418:	2408      	movs	r4, #8
    641a:	4358      	muls	r0, r3
    641c:	4907      	ldr	r1, [pc, #28]	; (643c <digitalRead+0x28>)
    641e:	2300      	movs	r3, #0
    6420:	180a      	adds	r2, r1, r0
    6422:	5714      	ldrsb	r4, [r2, r4]
    6424:	3401      	adds	r4, #1
    6426:	d006      	beq.n	6436 <digitalRead+0x22>
  {
    return LOW ;
  }

  if ( (PORT->Group[g_APinDescription[ulPin].ulPort].IN.reg & (1ul << g_APinDescription[ulPin].ulPin)) != 0 )
    6428:	5643      	ldrsb	r3, [r0, r1]
    642a:	4905      	ldr	r1, [pc, #20]	; (6440 <digitalRead+0x2c>)
    642c:	01db      	lsls	r3, r3, #7
    642e:	185b      	adds	r3, r3, r1
    6430:	6a1b      	ldr	r3, [r3, #32]
    6432:	6852      	ldr	r2, [r2, #4]
    6434:	40d3      	lsrs	r3, r2
    6436:	2001      	movs	r0, #1
  {
    return HIGH ;
  }

  return LOW ;
}
    6438:	4018      	ands	r0, r3
    643a:	bd10      	pop	{r4, pc}
    643c:	0000b414 	.word	0x0000b414
    6440:	41004400 	.word	0x41004400

00006444 <pinPeripheral>:

#include "Arduino.h"
#include "wiring_private.h"

int pinPeripheral( uint32_t ulPin, EPioType ulPeripheral )
{
    6444:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6446:	0003      	movs	r3, r0
  // Handle the case the pin isn't usable as PIO
  if ( g_APinDescription[ulPin].ulPinType == PIO_NOT_A_PIN )
    6448:	2018      	movs	r0, #24
    644a:	4358      	muls	r0, r3
    644c:	4a2a      	ldr	r2, [pc, #168]	; (64f8 <pinPeripheral+0xb4>)
    644e:	1810      	adds	r0, r2, r0
    6450:	7a00      	ldrb	r0, [r0, #8]
    6452:	b240      	sxtb	r0, r0
  {
    return -1 ;
    6454:	0004      	movs	r4, r0
  if ( g_APinDescription[ulPin].ulPinType == PIO_NOT_A_PIN )
    6456:	3001      	adds	r0, #1
    6458:	d013      	beq.n	6482 <pinPeripheral+0x3e>
  }

  switch ( ulPeripheral )
    645a:	1c48      	adds	r0, r1, #1
    case PIO_NOT_A_PIN:
      return -1l ;
    break ;
  }

  return 0l ;
    645c:	2400      	movs	r4, #0
  switch ( ulPeripheral )
    645e:	280c      	cmp	r0, #12
    6460:	d80f      	bhi.n	6482 <pinPeripheral+0x3e>
    6462:	f000 fce7 	bl	6e34 <__gnu_thumb1_case_uqi>
    6466:	1c45      	.short	0x1c45
    6468:	1c1c1c1c 	.word	0x1c1c1c1c
    646c:	071c1c1c 	.word	0x071c1c1c
    6470:	0707      	.short	0x0707
    6472:	07          	.byte	0x07
    6473:	00          	.byte	0x00
      if ( ulPeripheral == PIO_INPUT )
    6474:	2909      	cmp	r1, #9
    6476:	d106      	bne.n	6486 <pinPeripheral+0x42>
        pinMode( ulPin, INPUT ) ;
    6478:	2100      	movs	r1, #0
          pinMode( ulPin, INPUT_PULLUP ) ;
    647a:	0018      	movs	r0, r3
    647c:	f7ff ff52 	bl	6324 <pinMode>
  return 0l ;
    6480:	2400      	movs	r4, #0
}
    6482:	0020      	movs	r0, r4
    6484:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if ( ulPeripheral == PIO_INPUT_PULLUP )
    6486:	290a      	cmp	r1, #10
    6488:	d101      	bne.n	648e <pinPeripheral+0x4a>
          pinMode( ulPin, INPUT_PULLUP ) ;
    648a:	3908      	subs	r1, #8
    648c:	e7f5      	b.n	647a <pinPeripheral+0x36>
  return 0l ;
    648e:	2400      	movs	r4, #0
          if ( ulPeripheral == PIO_OUTPUT )
    6490:	290b      	cmp	r1, #11
    6492:	d1f6      	bne.n	6482 <pinPeripheral+0x3e>
            pinMode( ulPin, OUTPUT ) ;
    6494:	390a      	subs	r1, #10
    6496:	0018      	movs	r0, r3
    6498:	f7ff ff44 	bl	6324 <pinMode>
    649c:	e7f1      	b.n	6482 <pinPeripheral+0x3e>
      if ( g_APinDescription[ulPin].ulPin & 1 ) // is pin odd?
    649e:	2018      	movs	r0, #24
    64a0:	4343      	muls	r3, r0
    64a2:	18d0      	adds	r0, r2, r3
    64a4:	6846      	ldr	r6, [r0, #4]
    64a6:	2501      	movs	r5, #1
    64a8:	0034      	movs	r4, r6
    64aa:	56d2      	ldrsb	r2, [r2, r3]
        temp = (PORT->Group[g_APinDescription[ulPin].ulPort].PMUX[g_APinDescription[ulPin].ulPin >> 1].reg) & PORT_PMUX_PMUXE( 0xF ) ;
    64ac:	4813      	ldr	r0, [pc, #76]	; (64fc <pinPeripheral+0xb8>)
    64ae:	01d2      	lsls	r2, r2, #7
    64b0:	1812      	adds	r2, r2, r0
    64b2:	0873      	lsrs	r3, r6, #1
    64b4:	18d3      	adds	r3, r2, r3
    64b6:	3330      	adds	r3, #48	; 0x30
      if ( g_APinDescription[ulPin].ulPin & 1 ) // is pin odd?
    64b8:	402c      	ands	r4, r5
        temp = (PORT->Group[g_APinDescription[ulPin].ulPort].PMUX[g_APinDescription[ulPin].ulPin >> 1].reg) & PORT_PMUX_PMUXE( 0xF ) ;
    64ba:	7818      	ldrb	r0, [r3, #0]
      if ( g_APinDescription[ulPin].ulPin & 1 ) // is pin odd?
    64bc:	2c00      	cmp	r4, #0
    64be:	d00b      	beq.n	64d8 <pinPeripheral+0x94>
        PORT->Group[g_APinDescription[ulPin].ulPort].PMUX[g_APinDescription[ulPin].ulPin >> 1].reg = temp|PORT_PMUX_PMUXO( ulPeripheral ) ;
    64c0:	240f      	movs	r4, #15
    64c2:	0109      	lsls	r1, r1, #4
    64c4:	4020      	ands	r0, r4
    64c6:	4301      	orrs	r1, r0
    64c8:	b2c9      	uxtb	r1, r1
        PORT->Group[g_APinDescription[ulPin].ulPort].PINCFG[g_APinDescription[ulPin].ulPin].reg |= PORT_PINCFG_PMUXEN ;
    64ca:	1992      	adds	r2, r2, r6
        PORT->Group[g_APinDescription[ulPin].ulPort].PMUX[g_APinDescription[ulPin].ulPin >> 1].reg = temp|PORT_PMUX_PMUXO( ulPeripheral ) ;
    64cc:	7019      	strb	r1, [r3, #0]
        PORT->Group[g_APinDescription[ulPin].ulPort].PINCFG[g_APinDescription[ulPin].ulPin].reg |= PORT_PINCFG_PMUXEN ;
    64ce:	3240      	adds	r2, #64	; 0x40
    64d0:	7813      	ldrb	r3, [r2, #0]
    64d2:	431d      	orrs	r5, r3
    64d4:	7015      	strb	r5, [r2, #0]
    64d6:	e7d3      	b.n	6480 <pinPeripheral+0x3c>
        PORT->Group[g_APinDescription[ulPin].ulPort].PMUX[g_APinDescription[ulPin].ulPin >> 1].reg = temp|PORT_PMUX_PMUXE( ulPeripheral ) ;
    64d8:	270f      	movs	r7, #15
    64da:	43b8      	bics	r0, r7
    64dc:	4301      	orrs	r1, r0
        PORT->Group[g_APinDescription[ulPin].ulPort].PINCFG[g_APinDescription[ulPin].ulPin].reg |= PORT_PINCFG_PMUXEN ; // Enable port mux
    64de:	1992      	adds	r2, r2, r6
        PORT->Group[g_APinDescription[ulPin].ulPort].PMUX[g_APinDescription[ulPin].ulPin >> 1].reg = temp|PORT_PMUX_PMUXE( ulPeripheral ) ;
    64e0:	b2c9      	uxtb	r1, r1
    64e2:	7019      	strb	r1, [r3, #0]
        PORT->Group[g_APinDescription[ulPin].ulPort].PINCFG[g_APinDescription[ulPin].ulPin].reg |= PORT_PINCFG_PMUXEN ; // Enable port mux
    64e4:	0013      	movs	r3, r2
    64e6:	3340      	adds	r3, #64	; 0x40
    64e8:	781a      	ldrb	r2, [r3, #0]
    64ea:	4315      	orrs	r5, r2
    64ec:	701d      	strb	r5, [r3, #0]
    64ee:	e7c8      	b.n	6482 <pinPeripheral+0x3e>
      return -1l ;
    64f0:	2401      	movs	r4, #1
    64f2:	4264      	negs	r4, r4
    64f4:	e7c5      	b.n	6482 <pinPeripheral+0x3e>
    64f6:	46c0      	nop			; (mov r8, r8)
    64f8:	0000b414 	.word	0x0000b414
    64fc:	41004400 	.word	0x41004400

00006500 <_ZN6String10invalidateEv>:
	capacity = 0;
	len = 0;
}

void String::invalidate(void)
{
    6500:	b510      	push	{r4, lr}
    6502:	0004      	movs	r4, r0
	if (buffer) free(buffer);
    6504:	6800      	ldr	r0, [r0, #0]
    6506:	2800      	cmp	r0, #0
    6508:	d001      	beq.n	650e <_ZN6String10invalidateEv+0xe>
    650a:	f002 fc15 	bl	8d38 <free>
	buffer = NULL;
    650e:	2300      	movs	r3, #0
    6510:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
    6512:	60a3      	str	r3, [r4, #8]
    6514:	6063      	str	r3, [r4, #4]
}
    6516:	bd10      	pop	{r4, pc}

00006518 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
    6518:	b570      	push	{r4, r5, r6, lr}
    651a:	0004      	movs	r4, r0
    651c:	000d      	movs	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
    651e:	6800      	ldr	r0, [r0, #0]
    6520:	3101      	adds	r1, #1
    6522:	f003 f96f 	bl	9804 <realloc>
    6526:	1e03      	subs	r3, r0, #0
	if (newbuffer) {
    6528:	d001      	beq.n	652e <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
		return 1;
    652a:	2001      	movs	r0, #1
		capacity = maxStrLen;
    652c:	c428      	stmia	r4!, {r3, r5}
	}
	return 0;
}
    652e:	bd70      	pop	{r4, r5, r6, pc}

00006530 <_ZN6String7reserveEj>:
	if (buffer && capacity >= size) return 1;
    6530:	6803      	ldr	r3, [r0, #0]
{
    6532:	b510      	push	{r4, lr}
    6534:	0004      	movs	r4, r0
	if (buffer && capacity >= size) return 1;
    6536:	2b00      	cmp	r3, #0
    6538:	d004      	beq.n	6544 <_ZN6String7reserveEj+0x14>
    653a:	6843      	ldr	r3, [r0, #4]
    653c:	428b      	cmp	r3, r1
    653e:	d301      	bcc.n	6544 <_ZN6String7reserveEj+0x14>
		if (len == 0) buffer[0] = 0;
    6540:	2001      	movs	r0, #1
}
    6542:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
    6544:	0020      	movs	r0, r4
    6546:	f7ff ffe7 	bl	6518 <_ZN6String12changeBufferEj>
    654a:	2800      	cmp	r0, #0
    654c:	d0f9      	beq.n	6542 <_ZN6String7reserveEj+0x12>
		if (len == 0) buffer[0] = 0;
    654e:	68a3      	ldr	r3, [r4, #8]
    6550:	2b00      	cmp	r3, #0
    6552:	d1f5      	bne.n	6540 <_ZN6String7reserveEj+0x10>
    6554:	6822      	ldr	r2, [r4, #0]
    6556:	7013      	strb	r3, [r2, #0]
    6558:	e7f2      	b.n	6540 <_ZN6String7reserveEj+0x10>

0000655a <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
    655a:	b570      	push	{r4, r5, r6, lr}
    655c:	000e      	movs	r6, r1
	if (!reserve(length)) {
    655e:	0011      	movs	r1, r2
{
    6560:	0004      	movs	r4, r0
    6562:	0015      	movs	r5, r2
	if (!reserve(length)) {
    6564:	f7ff ffe4 	bl	6530 <_ZN6String7reserveEj>
    6568:	2800      	cmp	r0, #0
    656a:	d104      	bne.n	6576 <_ZN6String4copyEPKcj+0x1c>
		invalidate();
    656c:	0020      	movs	r0, r4
    656e:	f7ff ffc7 	bl	6500 <_ZN6String10invalidateEv>
		return *this;
	}
	len = length;
	strcpy(buffer, cstr);
	return *this;
}
    6572:	0020      	movs	r0, r4
    6574:	bd70      	pop	{r4, r5, r6, pc}
	len = length;
    6576:	60a5      	str	r5, [r4, #8]
	strcpy(buffer, cstr);
    6578:	0031      	movs	r1, r6
    657a:	6820      	ldr	r0, [r4, #0]
    657c:	f003 f980 	bl	9880 <strcpy>
	return *this;
    6580:	e7f7      	b.n	6572 <_ZN6String4copyEPKcj+0x18>

00006582 <_ZN6StringC1EPKc>:
	buffer = NULL;
    6582:	2300      	movs	r3, #0
String::String(const char *cstr)
    6584:	b570      	push	{r4, r5, r6, lr}
    6586:	0004      	movs	r4, r0
    6588:	000d      	movs	r5, r1
	buffer = NULL;
    658a:	6003      	str	r3, [r0, #0]
	capacity = 0;
    658c:	6043      	str	r3, [r0, #4]
	len = 0;
    658e:	6083      	str	r3, [r0, #8]
	if (cstr) copy(cstr, strlen(cstr));
    6590:	4299      	cmp	r1, r3
    6592:	d007      	beq.n	65a4 <_ZN6StringC1EPKc+0x22>
    6594:	0008      	movs	r0, r1
    6596:	f003 f97b 	bl	9890 <strlen>
    659a:	0029      	movs	r1, r5
    659c:	0002      	movs	r2, r0
    659e:	0020      	movs	r0, r4
    65a0:	f7ff ffdb 	bl	655a <_ZN6String4copyEPKcj>
}
    65a4:	0020      	movs	r0, r4
    65a6:	bd70      	pop	{r4, r5, r6, pc}

000065a8 <_Z11initVariantv>:
  PERIPH_WIRE.disableWIRE();
}

#endif

void initVariant() {
    65a8:	b510      	push	{r4, lr}
  }
  disable_battery_fet(!batteryPresent);
#endif

  // NINA - SPI boot
  pinMode(NINA_GPIO0, OUTPUT);
    65aa:	2101      	movs	r1, #1
    65ac:	201e      	movs	r0, #30
    65ae:	f7ff feb9 	bl	6324 <pinMode>
  digitalWrite(NINA_GPIO0, HIGH);
    65b2:	2101      	movs	r1, #1
    65b4:	201e      	movs	r0, #30
    65b6:	f7ff ff01 	bl	63bc <digitalWrite>

  // disable NINA
  pinMode(NINA_RESETN, OUTPUT);
    65ba:	2101      	movs	r1, #1
    65bc:	201f      	movs	r0, #31
    65be:	f7ff feb1 	bl	6324 <pinMode>
  digitalWrite(NINA_RESETN, HIGH);
    65c2:	2101      	movs	r1, #1
    65c4:	201f      	movs	r0, #31
    65c6:	f7ff fef9 	bl	63bc <digitalWrite>
}
    65ca:	bd10      	pop	{r4, pc}

000065cc <SERCOM5_Handler>:

// Serial1
Uart Serial1(&sercom5, PIN_SERIAL1_RX, PIN_SERIAL1_TX, PAD_SERIAL1_RX, PAD_SERIAL1_TX);

void SERCOM5_Handler()
{
    65cc:	b510      	push	{r4, lr}
  Serial1.IrqHandler();
    65ce:	4802      	ldr	r0, [pc, #8]	; (65d8 <SERCOM5_Handler+0xc>)
    65d0:	f000 faeb 	bl	6baa <_ZN4Uart10IrqHandlerEv>
}
    65d4:	bd10      	pop	{r4, pc}
    65d6:	46c0      	nop			; (mov r8, r8)
    65d8:	20000b9c 	.word	0x20000b9c

000065dc <SERCOM4_Handler>:

// Serial2
Uart Serial2(&sercom4, PIN_SERIAL2_RX, PIN_SERIAL2_TX, PAD_SERIAL2_RX, PAD_SERIAL2_TX, PIN_SERIAL2_RTS, PIN_SERIAL2_CTS);

void SERCOM4_Handler()
{
    65dc:	b510      	push	{r4, lr}
  Serial2.IrqHandler();
    65de:	4802      	ldr	r0, [pc, #8]	; (65e8 <SERCOM4_Handler+0xc>)
    65e0:	f000 fae3 	bl	6baa <_ZN4Uart10IrqHandlerEv>
}
    65e4:	bd10      	pop	{r4, pc}
    65e6:	46c0      	nop			; (mov r8, r8)
    65e8:	20000dd8 	.word	0x20000dd8

000065ec <_GLOBAL__sub_I_g_APinDescription>:
    65ec:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
SERCOM sercom0(SERCOM0);
    65ee:	4919      	ldr	r1, [pc, #100]	; (6654 <_GLOBAL__sub_I_g_APinDescription+0x68>)
    65f0:	4819      	ldr	r0, [pc, #100]	; (6658 <_GLOBAL__sub_I_g_APinDescription+0x6c>)
    65f2:	f000 f84b 	bl	668c <_ZN6SERCOMC1EP6Sercom>
SERCOM sercom1(SERCOM1);
    65f6:	4919      	ldr	r1, [pc, #100]	; (665c <_GLOBAL__sub_I_g_APinDescription+0x70>)
    65f8:	4819      	ldr	r0, [pc, #100]	; (6660 <_GLOBAL__sub_I_g_APinDescription+0x74>)
    65fa:	f000 f847 	bl	668c <_ZN6SERCOMC1EP6Sercom>
SERCOM sercom2(SERCOM2);
    65fe:	4919      	ldr	r1, [pc, #100]	; (6664 <_GLOBAL__sub_I_g_APinDescription+0x78>)
    6600:	4819      	ldr	r0, [pc, #100]	; (6668 <_GLOBAL__sub_I_g_APinDescription+0x7c>)
    6602:	f000 f843 	bl	668c <_ZN6SERCOMC1EP6Sercom>
SERCOM sercom3(SERCOM3);
    6606:	4919      	ldr	r1, [pc, #100]	; (666c <_GLOBAL__sub_I_g_APinDescription+0x80>)
    6608:	4819      	ldr	r0, [pc, #100]	; (6670 <_GLOBAL__sub_I_g_APinDescription+0x84>)
    660a:	f000 f83f 	bl	668c <_ZN6SERCOMC1EP6Sercom>
SERCOM sercom4(SERCOM4);
    660e:	4c19      	ldr	r4, [pc, #100]	; (6674 <_GLOBAL__sub_I_g_APinDescription+0x88>)
    6610:	4919      	ldr	r1, [pc, #100]	; (6678 <_GLOBAL__sub_I_g_APinDescription+0x8c>)
    6612:	0020      	movs	r0, r4
    6614:	f000 f83a 	bl	668c <_ZN6SERCOMC1EP6Sercom>
SERCOM sercom5(SERCOM5);
    6618:	4e18      	ldr	r6, [pc, #96]	; (667c <_GLOBAL__sub_I_g_APinDescription+0x90>)
    661a:	4919      	ldr	r1, [pc, #100]	; (6680 <_GLOBAL__sub_I_g_APinDescription+0x94>)
    661c:	0030      	movs	r0, r6
    661e:	f000 f835 	bl	668c <_ZN6SERCOMC1EP6Sercom>
Uart Serial1(&sercom5, PIN_SERIAL1_RX, PIN_SERIAL1_TX, PAD_SERIAL1_RX, PAD_SERIAL1_TX);
    6622:	2501      	movs	r5, #1
    6624:	2303      	movs	r3, #3
    6626:	0031      	movs	r1, r6
    6628:	9501      	str	r5, [sp, #4]
    662a:	9300      	str	r3, [sp, #0]
    662c:	220d      	movs	r2, #13
    662e:	330b      	adds	r3, #11
    6630:	4814      	ldr	r0, [pc, #80]	; (6684 <_GLOBAL__sub_I_g_APinDescription+0x98>)
    6632:	f000 fa4f 	bl	6ad4 <_ZN4UartC1EP6SERCOMhh11SercomRXPad15SercomUartTXPad>
Uart Serial2(&sercom4, PIN_SERIAL2_RX, PIN_SERIAL2_TX, PAD_SERIAL2_RX, PAD_SERIAL2_TX, PIN_SERIAL2_RTS, PIN_SERIAL2_CTS);
    6636:	231d      	movs	r3, #29
    6638:	9303      	str	r3, [sp, #12]
    663a:	3b01      	subs	r3, #1
    663c:	9302      	str	r3, [sp, #8]
    663e:	3b1a      	subs	r3, #26
    6640:	9301      	str	r3, [sp, #4]
    6642:	9500      	str	r5, [sp, #0]
    6644:	3318      	adds	r3, #24
    6646:	221b      	movs	r2, #27
    6648:	0021      	movs	r1, r4
    664a:	480f      	ldr	r0, [pc, #60]	; (6688 <_GLOBAL__sub_I_g_APinDescription+0x9c>)
    664c:	f000 f9fe 	bl	6a4c <_ZN4UartC1EP6SERCOMhh11SercomRXPad15SercomUartTXPadhh>
}
    6650:	bd7f      	pop	{r0, r1, r2, r3, r4, r5, r6, pc}
    6652:	46c0      	nop			; (mov r8, r8)
    6654:	42000800 	.word	0x42000800
    6658:	20001014 	.word	0x20001014
    665c:	42000c00 	.word	0x42000c00
    6660:	20001018 	.word	0x20001018
    6664:	42001000 	.word	0x42001000
    6668:	2000101c 	.word	0x2000101c
    666c:	42001400 	.word	0x42001400
    6670:	20001020 	.word	0x20001020
    6674:	20001024 	.word	0x20001024
    6678:	42001800 	.word	0x42001800
    667c:	20001028 	.word	0x20001028
    6680:	42001c00 	.word	0x42001c00
    6684:	20000b9c 	.word	0x20000b9c
    6688:	20000dd8 	.word	0x20000dd8

0000668c <_ZN6SERCOMC1EP6Sercom>:
#define WIRE_RISE_TIME_NANOSECONDS 125
#endif

SERCOM::SERCOM(Sercom* s)
{
  sercom = s;
    668c:	6001      	str	r1, [r0, #0]
}
    668e:	4770      	bx	lr

00006690 <_ZN6SERCOM9initFrameE18SercomUartCharSize15SercomDataOrder16SercomParityMode19SercomNumberStopBit>:
    sercom->USART.BAUD.FRAC.FP   = (baudTimes8 % 8);
    sercom->USART.BAUD.FRAC.BAUD = (baudTimes8 / 8);
  }
}
void SERCOM::initFrame(SercomUartCharSize charSize, SercomDataOrder dataOrder, SercomParityMode parityMode, SercomNumberStopBit nbStopBits)
{
    6690:	b5f0      	push	{r4, r5, r6, r7, lr}
    6692:	ac05      	add	r4, sp, #20
    6694:	7825      	ldrb	r5, [r4, #0]
  //Setting the CTRLA register
  sercom->USART.CTRLA.reg |=	SERCOM_USART_CTRLA_FORM( (parityMode == SERCOM_NO_PARITY ? 0 : 1) ) |
    6696:	6804      	ldr	r4, [r0, #0]
    6698:	1e98      	subs	r0, r3, #2
    669a:	1e47      	subs	r7, r0, #1
    669c:	41b8      	sbcs	r0, r7
                dataOrder << SERCOM_USART_CTRLA_DORD_Pos;
    669e:	6826      	ldr	r6, [r4, #0]
    66a0:	0792      	lsls	r2, r2, #30
  sercom->USART.CTRLA.reg |=	SERCOM_USART_CTRLA_FORM( (parityMode == SERCOM_NO_PARITY ? 0 : 1) ) |
    66a2:	0600      	lsls	r0, r0, #24
                dataOrder << SERCOM_USART_CTRLA_DORD_Pos;
    66a4:	4332      	orrs	r2, r6
    66a6:	4302      	orrs	r2, r0

  //Setting the CTRLB register
  sercom->USART.CTRLB.reg |=	SERCOM_USART_CTRLB_CHSIZE(charSize) |
    66a8:	2007      	movs	r0, #7
  sercom->USART.CTRLA.reg |=	SERCOM_USART_CTRLA_FORM( (parityMode == SERCOM_NO_PARITY ? 0 : 1) ) |
    66aa:	6022      	str	r2, [r4, #0]
  sercom->USART.CTRLB.reg |=	SERCOM_USART_CTRLB_CHSIZE(charSize) |
    66ac:	4001      	ands	r1, r0
                nbStopBits << SERCOM_USART_CTRLB_SBMODE_Pos |
    66ae:	01ad      	lsls	r5, r5, #6
                (parityMode == SERCOM_NO_PARITY ? 0 : parityMode) << SERCOM_USART_CTRLB_PMODE_Pos; //If no parity use default value
    66b0:	6862      	ldr	r2, [r4, #4]
    66b2:	4329      	orrs	r1, r5
    66b4:	2000      	movs	r0, #0
    66b6:	2b02      	cmp	r3, #2
    66b8:	d000      	beq.n	66bc <_ZN6SERCOM9initFrameE18SercomUartCharSize15SercomDataOrder16SercomParityMode19SercomNumberStopBit+0x2c>
    66ba:	0358      	lsls	r0, r3, #13
    66bc:	4311      	orrs	r1, r2
    66be:	4301      	orrs	r1, r0
  sercom->USART.CTRLB.reg |=	SERCOM_USART_CTRLB_CHSIZE(charSize) |
    66c0:	6061      	str	r1, [r4, #4]
}
    66c2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000066c4 <_ZN6SERCOM8initPadsE15SercomUartTXPad11SercomRXPad>:

void SERCOM::initPads(SercomUartTXPad txPad, SercomRXPad rxPad)
{
    66c4:	b510      	push	{r4, lr}
  //Setting the CTRLA register
  sercom->USART.CTRLA.reg |=	SERCOM_USART_CTRLA_TXPO(txPad) |
                SERCOM_USART_CTRLA_RXPO(rxPad);
    66c6:	24c0      	movs	r4, #192	; 0xc0
  sercom->USART.CTRLA.reg |=	SERCOM_USART_CTRLA_TXPO(txPad) |
    66c8:	6803      	ldr	r3, [r0, #0]
                SERCOM_USART_CTRLA_RXPO(rxPad);
    66ca:	03a4      	lsls	r4, r4, #14
    66cc:	6818      	ldr	r0, [r3, #0]
    66ce:	0512      	lsls	r2, r2, #20
    66d0:	4022      	ands	r2, r4
    66d2:	4302      	orrs	r2, r0
  sercom->USART.CTRLA.reg |=	SERCOM_USART_CTRLA_TXPO(txPad) |
    66d4:	20c0      	movs	r0, #192	; 0xc0
    66d6:	0409      	lsls	r1, r1, #16
    66d8:	0280      	lsls	r0, r0, #10
    66da:	4001      	ands	r1, r0
                SERCOM_USART_CTRLA_RXPO(rxPad);
    66dc:	4311      	orrs	r1, r2
  sercom->USART.CTRLA.reg |=	SERCOM_USART_CTRLA_TXPO(txPad) |
    66de:	6019      	str	r1, [r3, #0]

  // Enable Transceiver and Receiver
  sercom->USART.CTRLB.reg |= SERCOM_USART_CTRLB_TXEN | SERCOM_USART_CTRLB_RXEN ;
    66e0:	685a      	ldr	r2, [r3, #4]
    66e2:	4310      	orrs	r0, r2
    66e4:	6058      	str	r0, [r3, #4]
}
    66e6:	bd10      	pop	{r4, pc}

000066e8 <_ZN6SERCOM9resetUARTEv>:

void SERCOM::resetUART()
{
  // Start the Software Reset
  sercom->USART.CTRLA.bit.SWRST = 1 ;
    66e8:	2201      	movs	r2, #1
    66ea:	6803      	ldr	r3, [r0, #0]
    66ec:	6819      	ldr	r1, [r3, #0]
    66ee:	430a      	orrs	r2, r1
    66f0:	601a      	str	r2, [r3, #0]

  while ( sercom->USART.CTRLA.bit.SWRST || sercom->USART.SYNCBUSY.bit.SWRST )
    66f2:	681a      	ldr	r2, [r3, #0]
    66f4:	07d2      	lsls	r2, r2, #31
    66f6:	d4fc      	bmi.n	66f2 <_ZN6SERCOM9resetUARTEv+0xa>
    66f8:	69da      	ldr	r2, [r3, #28]
    66fa:	07d2      	lsls	r2, r2, #31
    66fc:	d4f9      	bmi.n	66f2 <_ZN6SERCOM9resetUARTEv+0xa>
  {
    // Wait for both bits Software Reset from CTRLA and SYNCBUSY coming back to 0
  }
}
    66fe:	4770      	bx	lr

00006700 <_ZN6SERCOM10enableUARTEv>:

void SERCOM::enableUART()
{
  //Setting  the enable bit to 1
  sercom->USART.CTRLA.bit.ENABLE = 0x1u;
    6700:	2202      	movs	r2, #2
    6702:	6803      	ldr	r3, [r0, #0]
    6704:	6819      	ldr	r1, [r3, #0]
    6706:	430a      	orrs	r2, r1
    6708:	601a      	str	r2, [r3, #0]

  //Wait for then enable bit from SYNCBUSY is equal to 0;
  while(sercom->USART.SYNCBUSY.bit.ENABLE);
    670a:	69da      	ldr	r2, [r3, #28]
    670c:	0792      	lsls	r2, r2, #30
    670e:	d4fc      	bmi.n	670a <_ZN6SERCOM10enableUARTEv+0xa>
}
    6710:	4770      	bx	lr

00006712 <_ZN6SERCOM9flushUARTEv>:
}

bool SERCOM::isDataRegisterEmptyUART()
{
  //DRE : Data Register Empty
  return sercom->USART.INTFLAG.bit.DRE;
    6712:	6803      	ldr	r3, [r0, #0]
    6714:	7e1a      	ldrb	r2, [r3, #24]
  if(isDataRegisterEmptyUART())
    6716:	07d2      	lsls	r2, r2, #31
    6718:	d402      	bmi.n	6720 <_ZN6SERCOM9flushUARTEv+0xe>
  while(!sercom->USART.INTFLAG.bit.TXC);
    671a:	7e1a      	ldrb	r2, [r3, #24]
    671c:	0792      	lsls	r2, r2, #30
    671e:	d5fc      	bpl.n	671a <_ZN6SERCOM9flushUARTEv+0x8>
}
    6720:	4770      	bx	lr

00006722 <_ZN6SERCOM15clearStatusUARTEv>:
  sercom->USART.STATUS.reg = SERCOM_USART_STATUS_RESETVALUE;
    6722:	2200      	movs	r2, #0
    6724:	6803      	ldr	r3, [r0, #0]
    6726:	835a      	strh	r2, [r3, #26]
}
    6728:	4770      	bx	lr

0000672a <_ZN6SERCOM17availableDataUARTEv>:
  return sercom->USART.INTFLAG.bit.RXC;
    672a:	6803      	ldr	r3, [r0, #0]
    672c:	7e18      	ldrb	r0, [r3, #24]
    672e:	0740      	lsls	r0, r0, #29
    6730:	0fc0      	lsrs	r0, r0, #31
}
    6732:	4770      	bx	lr

00006734 <_ZN6SERCOM11isUARTErrorEv>:
  return sercom->USART.INTFLAG.bit.ERROR;
    6734:	6803      	ldr	r3, [r0, #0]
    6736:	7e18      	ldrb	r0, [r3, #24]
    6738:	09c0      	lsrs	r0, r0, #7
}
    673a:	4770      	bx	lr

0000673c <_ZN6SERCOM20acknowledgeUARTErrorEv>:
  sercom->USART.INTFLAG.bit.ERROR = 1;
    673c:	2380      	movs	r3, #128	; 0x80
    673e:	6802      	ldr	r2, [r0, #0]
    6740:	425b      	negs	r3, r3
    6742:	7e11      	ldrb	r1, [r2, #24]
    6744:	430b      	orrs	r3, r1
    6746:	7613      	strb	r3, [r2, #24]
}
    6748:	4770      	bx	lr

0000674a <_ZN6SERCOM16isFrameErrorUARTEv>:
  return sercom->USART.STATUS.bit.FERR;
    674a:	6803      	ldr	r3, [r0, #0]
    674c:	8b58      	ldrh	r0, [r3, #26]
    674e:	0780      	lsls	r0, r0, #30
    6750:	0fc0      	lsrs	r0, r0, #31
}
    6752:	4770      	bx	lr

00006754 <_ZN6SERCOM19clearFrameErrorUARTEv>:
  sercom->USART.STATUS.bit.FERR = 1;
    6754:	2302      	movs	r3, #2
    6756:	6802      	ldr	r2, [r0, #0]
    6758:	8b51      	ldrh	r1, [r2, #26]
    675a:	430b      	orrs	r3, r1
    675c:	8353      	strh	r3, [r2, #26]
}
    675e:	4770      	bx	lr

00006760 <_ZN6SERCOM23isDataRegisterEmptyUARTEv>:
  return sercom->USART.INTFLAG.bit.DRE;
    6760:	6803      	ldr	r3, [r0, #0]
    6762:	7e18      	ldrb	r0, [r3, #24]
    6764:	07c0      	lsls	r0, r0, #31
    6766:	0fc0      	lsrs	r0, r0, #31
}
    6768:	4770      	bx	lr

0000676a <_ZN6SERCOM12readDataUARTEv>:

uint8_t SERCOM::readDataUART()
{
  return sercom->USART.DATA.bit.DATA;
    676a:	6803      	ldr	r3, [r0, #0]
    676c:	8d18      	ldrh	r0, [r3, #40]	; 0x28
    676e:	b2c0      	uxtb	r0, r0
}
    6770:	4770      	bx	lr

00006772 <_ZN6SERCOM13writeDataUARTEh>:
  return sercom->USART.INTFLAG.bit.DRE;
    6772:	6803      	ldr	r3, [r0, #0]
    6774:	7e1a      	ldrb	r2, [r3, #24]

int SERCOM::writeDataUART(uint8_t data)
{
  // Wait for data register to be empty
  while(!isDataRegisterEmptyUART());
    6776:	07d2      	lsls	r2, r2, #31
    6778:	d5fc      	bpl.n	6774 <_ZN6SERCOM13writeDataUARTEh+0x2>

  //Put data into DATA register
  sercom->USART.DATA.reg = (uint16_t)data;
    677a:	b289      	uxth	r1, r1
  return 1;
}
    677c:	2001      	movs	r0, #1
  sercom->USART.DATA.reg = (uint16_t)data;
    677e:	8519      	strh	r1, [r3, #40]	; 0x28
}
    6780:	4770      	bx	lr

00006782 <_ZN6SERCOM36enableDataRegisterEmptyInterruptUARTEv>:

void SERCOM::enableDataRegisterEmptyInterruptUART()
{
  sercom->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
    6782:	2201      	movs	r2, #1
    6784:	6803      	ldr	r3, [r0, #0]
    6786:	759a      	strb	r2, [r3, #22]
}
    6788:	4770      	bx	lr

0000678a <_ZN6SERCOM37disableDataRegisterEmptyInterruptUARTEv>:

void SERCOM::disableDataRegisterEmptyInterruptUART()
{
  sercom->USART.INTENCLR.reg = SERCOM_USART_INTENCLR_DRE;
    678a:	2201      	movs	r2, #1
    678c:	6803      	ldr	r3, [r0, #0]
    678e:	751a      	strb	r2, [r3, #20]
}
    6790:	4770      	bx	lr
	...

00006794 <_ZN6SERCOM13initClockNVICEv>:
void SERCOM::initClockNVIC( void )
{
  uint8_t clockId = 0;
  IRQn_Type IdNvic=PendSV_IRQn ; // Dummy init to intercept potential error later

  if(sercom == SERCOM0)
    6794:	6803      	ldr	r3, [r0, #0]
    6796:	4a21      	ldr	r2, [pc, #132]	; (681c <_ZN6SERCOM13initClockNVICEv+0x88>)
{
    6798:	b530      	push	{r4, r5, lr}
  if(sercom == SERCOM0)
    679a:	4293      	cmp	r3, r2
    679c:	d011      	beq.n	67c2 <_ZN6SERCOM13initClockNVICEv+0x2e>
  {
    clockId = GCM_SERCOM0_CORE;
    IdNvic = SERCOM0_IRQn;
  }
  else if(sercom == SERCOM1)
    679e:	4a20      	ldr	r2, [pc, #128]	; (6820 <_ZN6SERCOM13initClockNVICEv+0x8c>)
    67a0:	4293      	cmp	r3, r2
    67a2:	d02f      	beq.n	6804 <_ZN6SERCOM13initClockNVICEv+0x70>
  {
    clockId = GCM_SERCOM1_CORE;
    IdNvic = SERCOM1_IRQn;
  }
  else if(sercom == SERCOM2)
    67a4:	4a1f      	ldr	r2, [pc, #124]	; (6824 <_ZN6SERCOM13initClockNVICEv+0x90>)
    67a6:	4293      	cmp	r3, r2
    67a8:	d02f      	beq.n	680a <_ZN6SERCOM13initClockNVICEv+0x76>
  {
    clockId = GCM_SERCOM2_CORE;
    IdNvic = SERCOM2_IRQn;
  }
  else if(sercom == SERCOM3)
    67aa:	4a1f      	ldr	r2, [pc, #124]	; (6828 <_ZN6SERCOM13initClockNVICEv+0x94>)
    67ac:	4293      	cmp	r3, r2
    67ae:	d02f      	beq.n	6810 <_ZN6SERCOM13initClockNVICEv+0x7c>
  {
    clockId = GCM_SERCOM3_CORE;
    IdNvic = SERCOM3_IRQn;
  }
  #if defined(SERCOM4)
  else if(sercom == SERCOM4)
    67b0:	4a1e      	ldr	r2, [pc, #120]	; (682c <_ZN6SERCOM13initClockNVICEv+0x98>)
    67b2:	4293      	cmp	r3, r2
    67b4:	d02f      	beq.n	6816 <_ZN6SERCOM13initClockNVICEv+0x82>
    clockId = GCM_SERCOM4_CORE;
    IdNvic = SERCOM4_IRQn;
  }
  #endif // SERCOM4
  #if defined(SERCOM5)
  else if(sercom == SERCOM5)
    67b6:	4a1e      	ldr	r2, [pc, #120]	; (6830 <_ZN6SERCOM13initClockNVICEv+0x9c>)
    67b8:	4293      	cmp	r3, r2
    67ba:	d122      	bne.n	6802 <_ZN6SERCOM13initClockNVICEv+0x6e>
  {
    clockId = GCM_SERCOM5_CORE;
    IdNvic = SERCOM5_IRQn;
    67bc:	230e      	movs	r3, #14
    clockId = GCM_SERCOM5_CORE;
    67be:	2219      	movs	r2, #25
    67c0:	e001      	b.n	67c6 <_ZN6SERCOM13initClockNVICEv+0x32>
    IdNvic = SERCOM0_IRQn;
    67c2:	2309      	movs	r3, #9
    clockId = GCM_SERCOM0_CORE;
    67c4:	2214      	movs	r2, #20
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    67c6:	2101      	movs	r1, #1
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    67c8:	2503      	movs	r5, #3
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    67ca:	4099      	lsls	r1, r3
    67cc:	4819      	ldr	r0, [pc, #100]	; (6834 <_ZN6SERCOM13initClockNVICEv+0xa0>)
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    67ce:	24c0      	movs	r4, #192	; 0xc0
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    67d0:	6001      	str	r1, [r0, #0]
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    67d2:	0899      	lsrs	r1, r3, #2
    67d4:	402b      	ands	r3, r5
    67d6:	40ab      	lsls	r3, r5
    67d8:	35fc      	adds	r5, #252	; 0xfc
    67da:	409d      	lsls	r5, r3
    67dc:	0089      	lsls	r1, r1, #2
    67de:	1809      	adds	r1, r1, r0
    67e0:	00a4      	lsls	r4, r4, #2
    67e2:	5908      	ldr	r0, [r1, r4]
    67e4:	43a8      	bics	r0, r5
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
    67e6:	25c0      	movs	r5, #192	; 0xc0
    67e8:	409d      	lsls	r5, r3
    67ea:	002b      	movs	r3, r5
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    67ec:	4303      	orrs	r3, r0
    67ee:	510b      	str	r3, [r1, r4]
  NVIC_EnableIRQ(IdNvic);
  NVIC_SetPriority (IdNvic, SERCOM_NVIC_PRIORITY);  /* set Priority */

  //Setting clock
  GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID( clockId ) | // Generic Clock 0 (SERCOMx)
                      GCLK_CLKCTRL_GEN_GCLK0 | // Generic Clock Generator 0 is source
    67f0:	2380      	movs	r3, #128	; 0x80
    67f2:	01db      	lsls	r3, r3, #7
    67f4:	431a      	orrs	r2, r3
  GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID( clockId ) | // Generic Clock 0 (SERCOMx)
    67f6:	4b10      	ldr	r3, [pc, #64]	; (6838 <_ZN6SERCOM13initClockNVICEv+0xa4>)
    67f8:	805a      	strh	r2, [r3, #2]
                      GCLK_CLKCTRL_CLKEN ;

  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY )
    67fa:	785a      	ldrb	r2, [r3, #1]
    67fc:	b252      	sxtb	r2, r2
    67fe:	2a00      	cmp	r2, #0
    6800:	dbfb      	blt.n	67fa <_ZN6SERCOM13initClockNVICEv+0x66>
  {
    /* Wait for synchronization */
  }
}
    6802:	bd30      	pop	{r4, r5, pc}
    IdNvic = SERCOM1_IRQn;
    6804:	230a      	movs	r3, #10
    clockId = GCM_SERCOM1_CORE;
    6806:	2215      	movs	r2, #21
    6808:	e7dd      	b.n	67c6 <_ZN6SERCOM13initClockNVICEv+0x32>
    IdNvic = SERCOM2_IRQn;
    680a:	230b      	movs	r3, #11
    clockId = GCM_SERCOM2_CORE;
    680c:	2216      	movs	r2, #22
    680e:	e7da      	b.n	67c6 <_ZN6SERCOM13initClockNVICEv+0x32>
    IdNvic = SERCOM3_IRQn;
    6810:	230c      	movs	r3, #12
    clockId = GCM_SERCOM3_CORE;
    6812:	2217      	movs	r2, #23
    6814:	e7d7      	b.n	67c6 <_ZN6SERCOM13initClockNVICEv+0x32>
    IdNvic = SERCOM4_IRQn;
    6816:	230d      	movs	r3, #13
    clockId = GCM_SERCOM4_CORE;
    6818:	2218      	movs	r2, #24
    681a:	e7d4      	b.n	67c6 <_ZN6SERCOM13initClockNVICEv+0x32>
    681c:	42000800 	.word	0x42000800
    6820:	42000c00 	.word	0x42000c00
    6824:	42001000 	.word	0x42001000
    6828:	42001400 	.word	0x42001400
    682c:	42001800 	.word	0x42001800
    6830:	42001c00 	.word	0x42001c00
    6834:	e000e100 	.word	0xe000e100
    6838:	40000c00 	.word	0x40000c00

0000683c <_ZN6SERCOM8initUARTE14SercomUartMode20SercomUartSampleRatem>:
{
    683c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    683e:	0004      	movs	r4, r0
    6840:	0016      	movs	r6, r2
    6842:	000f      	movs	r7, r1
    6844:	001d      	movs	r5, r3
  initClockNVIC();
    6846:	f7ff ffa5 	bl	6794 <_ZN6SERCOM13initClockNVICEv>
  resetUART();
    684a:	0020      	movs	r0, r4
    684c:	f7ff ff4c 	bl	66e8 <_ZN6SERCOM9resetUARTEv>
  sercom->USART.CTRLA.reg =	SERCOM_USART_CTRLA_MODE(mode) |
    6850:	221c      	movs	r2, #28
    6852:	00bb      	lsls	r3, r7, #2
    6854:	4013      	ands	r3, r2
                SERCOM_USART_CTRLA_SAMPR(sampleRate);
    6856:	0772      	lsls	r2, r6, #29
  sercom->USART.CTRLA.reg =	SERCOM_USART_CTRLA_MODE(mode) |
    6858:	6824      	ldr	r4, [r4, #0]
                SERCOM_USART_CTRLA_SAMPR(sampleRate);
    685a:	0c12      	lsrs	r2, r2, #16
  sercom->USART.CTRLA.reg =	SERCOM_USART_CTRLA_MODE(mode) |
    685c:	4313      	orrs	r3, r2
    685e:	6023      	str	r3, [r4, #0]
  sercom->USART.INTENSET.reg =	SERCOM_USART_INTENSET_RXC |  //Received complete
    6860:	2384      	movs	r3, #132	; 0x84
    6862:	75a3      	strb	r3, [r4, #22]
  if ( mode == UART_INT_CLOCK )
    6864:	2f01      	cmp	r7, #1
    6866:	d118      	bne.n	689a <_ZN6SERCOM8initUARTE14SercomUartMode20SercomUartSampleRatem+0x5e>
      sampleRateValue = 16;
    6868:	2110      	movs	r1, #16
    if (sampleRate == SAMPLE_RATE_x16) {
    686a:	2e01      	cmp	r6, #1
    686c:	d000      	beq.n	6870 <_ZN6SERCOM8initUARTE14SercomUartMode20SercomUartSampleRatem+0x34>
      sampleRateValue = 8;
    686e:	3908      	subs	r1, #8
    uint32_t baudTimes8 = (SystemCoreClock * 8) / (sampleRateValue * baudrate);
    6870:	4b0a      	ldr	r3, [pc, #40]	; (689c <_ZN6SERCOM8initUARTE14SercomUartMode20SercomUartSampleRatem+0x60>)
    6872:	4369      	muls	r1, r5
    6874:	6818      	ldr	r0, [r3, #0]
    6876:	00c0      	lsls	r0, r0, #3
    6878:	f000 fae6 	bl	6e48 <__udivsi3>
    sercom->USART.BAUD.FRAC.FP   = (baudTimes8 % 8);
    687c:	2207      	movs	r2, #7
    687e:	89a3      	ldrh	r3, [r4, #12]
    6880:	4002      	ands	r2, r0
    6882:	04db      	lsls	r3, r3, #19
    6884:	0352      	lsls	r2, r2, #13
    6886:	0cdb      	lsrs	r3, r3, #19
    6888:	4313      	orrs	r3, r2
    688a:	81a3      	strh	r3, [r4, #12]
    sercom->USART.BAUD.FRAC.BAUD = (baudTimes8 / 8);
    688c:	0403      	lsls	r3, r0, #16
    688e:	89a0      	ldrh	r0, [r4, #12]
    6890:	0cdb      	lsrs	r3, r3, #19
    6892:	0b40      	lsrs	r0, r0, #13
    6894:	0340      	lsls	r0, r0, #13
    6896:	4318      	orrs	r0, r3
    6898:	81a0      	strh	r0, [r4, #12]
}
    689a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    689c:	20000084 	.word	0x20000084

000068a0 <_ZN4UartcvbEv>:
    size_t write(const uint8_t data);
    using Print::write; // pull in write(str) and write(buf, size) from Print

    void IrqHandler();

    operator bool() { return true; }
    68a0:	2001      	movs	r0, #1
    68a2:	4770      	bx	lr

000068a4 <_ZN4Uart5beginEm>:
  uc_pinRTS = _pinRTS;
  uc_pinCTS = _pinCTS;
}

void Uart::begin(unsigned long baudrate)
{
    68a4:	b510      	push	{r4, lr}
  begin(baudrate, SERIAL_8N1);
    68a6:	6803      	ldr	r3, [r0, #0]
    68a8:	4a01      	ldr	r2, [pc, #4]	; (68b0 <_ZN4Uart5beginEm+0xc>)
    68aa:	6a1b      	ldr	r3, [r3, #32]
    68ac:	4798      	blx	r3
}
    68ae:	bd10      	pop	{r4, pc}
    68b0:	00000413 	.word	0x00000413

000068b4 <_ZN4Uart4peekEv>:
}

template <int N>
int RingBufferN<N>::peek()
{
  if(_iTail == _iHead)
    68b4:	0003      	movs	r3, r0
    68b6:	33fc      	adds	r3, #252	; 0xfc
    68b8:	69d9      	ldr	r1, [r3, #28]
    68ba:	699a      	ldr	r2, [r3, #24]
    68bc:	4291      	cmp	r1, r2
    68be:	d003      	beq.n	68c8 <_ZN4Uart4peekEv+0x14>
    return -1;

  return _aucBuffer[_iTail];
    68c0:	69db      	ldr	r3, [r3, #28]
    68c2:	18c0      	adds	r0, r0, r3
    68c4:	7d00      	ldrb	r0, [r0, #20]
}

int Uart::peek()
{
  return rxBuffer.peek();
}
    68c6:	4770      	bx	lr
    return -1;
    68c8:	2001      	movs	r0, #1
    68ca:	4240      	negs	r0, r0
  return rxBuffer.peek();
    68cc:	e7fb      	b.n	68c6 <_ZN4Uart4peekEv+0x12>

000068ce <_ZN4Uart3endEv>:
{
    68ce:	b510      	push	{r4, lr}
    68d0:	0004      	movs	r4, r0
  sercom->resetUART();
    68d2:	6900      	ldr	r0, [r0, #16]
    68d4:	f7ff ff08 	bl	66e8 <_ZN6SERCOM9resetUARTEv>
  _iHead = 0;
    68d8:	0022      	movs	r2, r4
    68da:	2300      	movs	r3, #0
    68dc:	32fc      	adds	r2, #252	; 0xfc
    68de:	6193      	str	r3, [r2, #24]
  _iTail = 0;
    68e0:	61d3      	str	r3, [r2, #28]
  _iHead = 0;
    68e2:	2286      	movs	r2, #134	; 0x86
    68e4:	0092      	lsls	r2, r2, #2
    68e6:	18a4      	adds	r4, r4, r2
    68e8:	6063      	str	r3, [r4, #4]
  _iTail = 0;
    68ea:	60a3      	str	r3, [r4, #8]
}
    68ec:	bd10      	pop	{r4, pc}

000068ee <_ZN4Uart16extractNbStopBitEt>:
  return 1;
}

SercomNumberStopBit Uart::extractNbStopBit(uint16_t config)
{
  switch(config & HARDSER_STOP_BIT_MASK)
    68ee:	20f0      	movs	r0, #240	; 0xf0
    68f0:	4001      	ands	r1, r0
  {
    case HARDSER_STOP_BIT_1:
    default:
      return SERCOM_STOP_BIT_1;
    68f2:	3930      	subs	r1, #48	; 0x30
    68f4:	4248      	negs	r0, r1
    68f6:	4148      	adcs	r0, r1

    case HARDSER_STOP_BIT_2:
      return SERCOM_STOP_BITS_2;
  }
}
    68f8:	4770      	bx	lr

000068fa <_ZN4Uart15extractCharSizeEt>:

SercomUartCharSize Uart::extractCharSize(uint16_t config)
{
  switch(config & HARDSER_DATA_MASK)
    68fa:	23f0      	movs	r3, #240	; 0xf0
    68fc:	011b      	lsls	r3, r3, #4
    68fe:	4019      	ands	r1, r3
    6900:	2380      	movs	r3, #128	; 0x80
  {
    case HARDSER_DATA_5:
      return UART_CHAR_SIZE_5_BITS;

    case HARDSER_DATA_6:
      return UART_CHAR_SIZE_6_BITS;
    6902:	2006      	movs	r0, #6
  switch(config & HARDSER_DATA_MASK)
    6904:	009b      	lsls	r3, r3, #2
    6906:	4299      	cmp	r1, r3
    6908:	d00a      	beq.n	6920 <_ZN4Uart15extractCharSizeEt+0x26>
    690a:	3301      	adds	r3, #1
    690c:	33ff      	adds	r3, #255	; 0xff

    case HARDSER_DATA_7:
      return UART_CHAR_SIZE_7_BITS;
    690e:	3001      	adds	r0, #1
  switch(config & HARDSER_DATA_MASK)
    6910:	4299      	cmp	r1, r3
    6912:	d005      	beq.n	6920 <_ZN4Uart15extractCharSizeEt+0x26>
    6914:	2380      	movs	r3, #128	; 0x80
      return UART_CHAR_SIZE_5_BITS;
    6916:	3802      	subs	r0, #2
  switch(config & HARDSER_DATA_MASK)
    6918:	005b      	lsls	r3, r3, #1
    691a:	4299      	cmp	r1, r3
    691c:	d000      	beq.n	6920 <_ZN4Uart15extractCharSizeEt+0x26>

    case HARDSER_DATA_8:
    default:
      return UART_CHAR_SIZE_8_BITS;
    691e:	2000      	movs	r0, #0

  }
}
    6920:	4770      	bx	lr

00006922 <_ZN4Uart13extractParityEt>:

SercomParityMode Uart::extractParity(uint16_t config)
{
  switch(config & HARDSER_PARITY_MASK)
    6922:	200f      	movs	r0, #15
    6924:	4001      	ands	r1, r0
    case HARDSER_PARITY_NONE:
    default:
      return SERCOM_NO_PARITY;

    case HARDSER_PARITY_EVEN:
      return SERCOM_EVEN_PARITY;
    6926:	2000      	movs	r0, #0
  switch(config & HARDSER_PARITY_MASK)
    6928:	2901      	cmp	r1, #1
    692a:	d003      	beq.n	6934 <_ZN4Uart13extractParityEt+0x12>
      return SERCOM_NO_PARITY;
    692c:	3902      	subs	r1, #2
    692e:	1e48      	subs	r0, r1, #1
    6930:	4181      	sbcs	r1, r0
    6932:	1c48      	adds	r0, r1, #1

    case HARDSER_PARITY_ODD:
      return SERCOM_ODD_PARITY;
  }
}
    6934:	4770      	bx	lr
	...

00006938 <_ZN4Uart5beginEmt>:
  pinPeripheral(uc_pinRX, g_APinDescription[uc_pinRX].ulPinType);
    6938:	2389      	movs	r3, #137	; 0x89
{
    693a:	b5f0      	push	{r4, r5, r6, r7, lr}
  pinPeripheral(uc_pinRX, g_APinDescription[uc_pinRX].ulPinType);
    693c:	2618      	movs	r6, #24
{
    693e:	b085      	sub	sp, #20
    6940:	9102      	str	r1, [sp, #8]
  pinPeripheral(uc_pinRX, g_APinDescription[uc_pinRX].ulPinType);
    6942:	009b      	lsls	r3, r3, #2
{
    6944:	0004      	movs	r4, r0
  pinPeripheral(uc_pinRX, g_APinDescription[uc_pinRX].ulPinType);
    6946:	5cc0      	ldrb	r0, [r0, r3]
    6948:	0033      	movs	r3, r6
    694a:	2108      	movs	r1, #8
    694c:	4343      	muls	r3, r0
    694e:	4d32      	ldr	r5, [pc, #200]	; (6a18 <_ZN4Uart5beginEmt+0xe0>)
{
    6950:	0017      	movs	r7, r2
  pinPeripheral(uc_pinRX, g_APinDescription[uc_pinRX].ulPinType);
    6952:	18eb      	adds	r3, r5, r3
    6954:	5659      	ldrsb	r1, [r3, r1]
    6956:	f7ff fd75 	bl	6444 <pinPeripheral>
  pinPeripheral(uc_pinTX, g_APinDescription[uc_pinTX].ulPinType);
    695a:	4b30      	ldr	r3, [pc, #192]	; (6a1c <_ZN4Uart5beginEmt+0xe4>)
    695c:	2108      	movs	r1, #8
    695e:	5ce0      	ldrb	r0, [r4, r3]
    6960:	0033      	movs	r3, r6
    6962:	4343      	muls	r3, r0
    6964:	18eb      	adds	r3, r5, r3
    6966:	5659      	ldrsb	r1, [r3, r1]
    6968:	f7ff fd6c 	bl	6444 <pinPeripheral>
  if (uc_padTX == UART_TX_RTS_CTS_PAD_0_2_3) { 
    696c:	4b2c      	ldr	r3, [pc, #176]	; (6a20 <_ZN4Uart5beginEmt+0xe8>)
    696e:	5ce2      	ldrb	r2, [r4, r3]
    6970:	9303      	str	r3, [sp, #12]
    6972:	2a02      	cmp	r2, #2
    6974:	d109      	bne.n	698a <_ZN4Uart5beginEmt+0x52>
    if (uc_pinCTS != NO_CTS_PIN) {
    6976:	3311      	adds	r3, #17
    6978:	5ce0      	ldrb	r0, [r4, r3]
    697a:	28ff      	cmp	r0, #255	; 0xff
    697c:	d005      	beq.n	698a <_ZN4Uart5beginEmt+0x52>
      pinPeripheral(uc_pinCTS, g_APinDescription[uc_pinCTS].ulPinType);
    697e:	2108      	movs	r1, #8
    6980:	4346      	muls	r6, r0
    6982:	19ae      	adds	r6, r5, r6
    6984:	5671      	ldrsb	r1, [r6, r1]
    6986:	f7ff fd5d 	bl	6444 <pinPeripheral>
  if (uc_pinRTS != NO_RTS_PIN) {
    698a:	268a      	movs	r6, #138	; 0x8a
    698c:	00b6      	lsls	r6, r6, #2
    698e:	5da0      	ldrb	r0, [r4, r6]
    6990:	28ff      	cmp	r0, #255	; 0xff
    6992:	d019      	beq.n	69c8 <_ZN4Uart5beginEmt+0x90>
    pinMode(uc_pinRTS, OUTPUT);
    6994:	2101      	movs	r1, #1
    6996:	f7ff fcc5 	bl	6324 <pinMode>
    EPortType rtsPort = g_APinDescription[uc_pinRTS].ulPort;
    699a:	2218      	movs	r2, #24
    699c:	5da3      	ldrb	r3, [r4, r6]
    pul_outsetRTS = &PORT->Group[rtsPort].OUTSET.reg;
    699e:	4921      	ldr	r1, [pc, #132]	; (6a24 <_ZN4Uart5beginEmt+0xec>)
    EPortType rtsPort = g_APinDescription[uc_pinRTS].ulPort;
    69a0:	435a      	muls	r2, r3
    pul_outsetRTS = &PORT->Group[rtsPort].OUTSET.reg;
    69a2:	56ab      	ldrsb	r3, [r5, r2]
    ul_pinMaskRTS = (1ul << g_APinDescription[uc_pinRTS].ulPin);
    69a4:	18ad      	adds	r5, r5, r2
    pul_outsetRTS = &PORT->Group[rtsPort].OUTSET.reg;
    69a6:	01db      	lsls	r3, r3, #7
    69a8:	1858      	adds	r0, r3, r1
    69aa:	218b      	movs	r1, #139	; 0x8b
    69ac:	0089      	lsls	r1, r1, #2
    69ae:	5060      	str	r0, [r4, r1]
    pul_outclrRTS = &PORT->Group[rtsPort].OUTCLR.reg;
    69b0:	491d      	ldr	r1, [pc, #116]	; (6a28 <_ZN4Uart5beginEmt+0xf0>)
    ul_pinMaskRTS = (1ul << g_APinDescription[uc_pinRTS].ulPin);
    69b2:	2201      	movs	r2, #1
    pul_outclrRTS = &PORT->Group[rtsPort].OUTCLR.reg;
    69b4:	185b      	adds	r3, r3, r1
    69b6:	218c      	movs	r1, #140	; 0x8c
    69b8:	0089      	lsls	r1, r1, #2
    69ba:	5063      	str	r3, [r4, r1]
    ul_pinMaskRTS = (1ul << g_APinDescription[uc_pinRTS].ulPin);
    69bc:	6869      	ldr	r1, [r5, #4]
    69be:	408a      	lsls	r2, r1
    69c0:	218d      	movs	r1, #141	; 0x8d
    69c2:	0089      	lsls	r1, r1, #2
    69c4:	5062      	str	r2, [r4, r1]
    *pul_outclrRTS = ul_pinMaskRTS;
    69c6:	601a      	str	r2, [r3, #0]
  sercom->initUART(UART_INT_CLOCK, SAMPLE_RATE_x16, baudrate);
    69c8:	2201      	movs	r2, #1
    69ca:	9b02      	ldr	r3, [sp, #8]
    69cc:	0011      	movs	r1, r2
    69ce:	6920      	ldr	r0, [r4, #16]
    69d0:	f7ff ff34 	bl	683c <_ZN6SERCOM8initUARTE14SercomUartMode20SercomUartSampleRatem>
  sercom->initFrame(extractCharSize(config), LSB_FIRST, extractParity(config), extractNbStopBit(config));
    69d4:	0039      	movs	r1, r7
    69d6:	0020      	movs	r0, r4
    69d8:	f7ff ff8f 	bl	68fa <_ZN4Uart15extractCharSizeEt>
    69dc:	0039      	movs	r1, r7
    69de:	0005      	movs	r5, r0
    69e0:	0020      	movs	r0, r4
    69e2:	f7ff ff9e 	bl	6922 <_ZN4Uart13extractParityEt>
    69e6:	0039      	movs	r1, r7
    69e8:	0006      	movs	r6, r0
    69ea:	0020      	movs	r0, r4
    69ec:	f7ff ff7f 	bl	68ee <_ZN4Uart16extractNbStopBitEt>
    69f0:	0033      	movs	r3, r6
    69f2:	9000      	str	r0, [sp, #0]
    69f4:	0029      	movs	r1, r5
    69f6:	6920      	ldr	r0, [r4, #16]
    69f8:	2201      	movs	r2, #1
    69fa:	f7ff fe49 	bl	6690 <_ZN6SERCOM9initFrameE18SercomUartCharSize15SercomDataOrder16SercomParityMode19SercomNumberStopBit>
  sercom->initPads(uc_padTX, uc_padRX);
    69fe:	4b0b      	ldr	r3, [pc, #44]	; (6a2c <_ZN4Uart5beginEmt+0xf4>)
    6a00:	6920      	ldr	r0, [r4, #16]
    6a02:	5ce2      	ldrb	r2, [r4, r3]
    6a04:	9b03      	ldr	r3, [sp, #12]
    6a06:	5ce1      	ldrb	r1, [r4, r3]
    6a08:	f7ff fe5c 	bl	66c4 <_ZN6SERCOM8initPadsE15SercomUartTXPad11SercomRXPad>
  sercom->enableUART();
    6a0c:	6920      	ldr	r0, [r4, #16]
    6a0e:	f7ff fe77 	bl	6700 <_ZN6SERCOM10enableUARTEv>
}
    6a12:	b005      	add	sp, #20
    6a14:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6a16:	46c0      	nop			; (mov r8, r8)
    6a18:	0000b414 	.word	0x0000b414
    6a1c:	00000225 	.word	0x00000225
    6a20:	00000227 	.word	0x00000227
    6a24:	41004418 	.word	0x41004418
    6a28:	41004414 	.word	0x41004414
    6a2c:	00000226 	.word	0x00000226

00006a30 <_ZN11RingBufferNILi256EEC1Ev>:
    memset( _aucBuffer, 0, N ) ;
    6a30:	2280      	movs	r2, #128	; 0x80
RingBufferN<N>::RingBufferN( void )
    6a32:	b510      	push	{r4, lr}
    6a34:	0004      	movs	r4, r0
    memset( _aucBuffer, 0, N ) ;
    6a36:	0052      	lsls	r2, r2, #1
    6a38:	2100      	movs	r1, #0
    6a3a:	f002 f9c3 	bl	8dc4 <memset>
  _iHead = 0;
    6a3e:	0023      	movs	r3, r4
    6a40:	2200      	movs	r2, #0
    6a42:	33fc      	adds	r3, #252	; 0xfc
    6a44:	605a      	str	r2, [r3, #4]
}
    6a46:	0020      	movs	r0, r4
  _iTail = 0;
    6a48:	609a      	str	r2, [r3, #8]
}
    6a4a:	bd10      	pop	{r4, pc}

00006a4c <_ZN4UartC1EP6SERCOMhh11SercomRXPad15SercomUartTXPadhh>:
Uart::Uart(SERCOM *_s, uint8_t _pinRX, uint8_t _pinTX, SercomRXPad _padRX, SercomUartTXPad _padTX, uint8_t _pinRTS, uint8_t _pinCTS)
    6a4c:	b5f0      	push	{r4, r5, r6, r7, lr}
    6a4e:	b085      	sub	sp, #20
    6a50:	001d      	movs	r5, r3
    6a52:	ab0a      	add	r3, sp, #40	; 0x28
    6a54:	781b      	ldrb	r3, [r3, #0]
    6a56:	0004      	movs	r4, r0
    6a58:	9300      	str	r3, [sp, #0]
    6a5a:	ab0b      	add	r3, sp, #44	; 0x2c
    6a5c:	781b      	ldrb	r3, [r3, #0]
    6a5e:	0016      	movs	r6, r2
    6a60:	9301      	str	r3, [sp, #4]
    6a62:	ab0c      	add	r3, sp, #48	; 0x30
    6a64:	781b      	ldrb	r3, [r3, #0]
    6a66:	000f      	movs	r7, r1
    6a68:	9302      	str	r3, [sp, #8]
    6a6a:	ab0d      	add	r3, sp, #52	; 0x34
    6a6c:	781b      	ldrb	r3, [r3, #0]
    6a6e:	9303      	str	r3, [sp, #12]
    6a70:	2300      	movs	r3, #0
    6a72:	6043      	str	r3, [r0, #4]
    6a74:	23fa      	movs	r3, #250	; 0xfa
    6a76:	009b      	lsls	r3, r3, #2
    6a78:	6083      	str	r3, [r0, #8]
    6a7a:	4b12      	ldr	r3, [pc, #72]	; (6ac4 <_ZN4UartC1EP6SERCOMhh11SercomRXPad15SercomUartTXPadhh+0x78>)
    6a7c:	3308      	adds	r3, #8
    6a7e:	6003      	str	r3, [r0, #0]
    6a80:	3014      	adds	r0, #20
    6a82:	f7ff ffd5 	bl	6a30 <_ZN11RingBufferNILi256EEC1Ev>
    6a86:	0020      	movs	r0, r4
    6a88:	301d      	adds	r0, #29
    6a8a:	30ff      	adds	r0, #255	; 0xff
    6a8c:	f7ff ffd0 	bl	6a30 <_ZN11RingBufferNILi256EEC1Ev>
  uc_pinRX = _pinRX;
    6a90:	2389      	movs	r3, #137	; 0x89
  uc_padRX = _padRX ;
    6a92:	466a      	mov	r2, sp
  uc_pinRX = _pinRX;
    6a94:	009b      	lsls	r3, r3, #2
  sercom = _s;
    6a96:	6127      	str	r7, [r4, #16]
  uc_pinRX = _pinRX;
    6a98:	54e6      	strb	r6, [r4, r3]
  uc_pinTX = _pinTX;
    6a9a:	4b0b      	ldr	r3, [pc, #44]	; (6ac8 <_ZN4UartC1EP6SERCOMhh11SercomRXPad15SercomUartTXPadhh+0x7c>)
  uc_padRX = _padRX ;
    6a9c:	7812      	ldrb	r2, [r2, #0]
  uc_pinTX = _pinTX;
    6a9e:	54e5      	strb	r5, [r4, r3]
  uc_padRX = _padRX ;
    6aa0:	4b0a      	ldr	r3, [pc, #40]	; (6acc <_ZN4UartC1EP6SERCOMhh11SercomRXPad15SercomUartTXPadhh+0x80>)
}
    6aa2:	0020      	movs	r0, r4
  uc_padRX = _padRX ;
    6aa4:	54e2      	strb	r2, [r4, r3]
  uc_padTX = _padTX;
    6aa6:	466a      	mov	r2, sp
    6aa8:	4b09      	ldr	r3, [pc, #36]	; (6ad0 <_ZN4UartC1EP6SERCOMhh11SercomRXPad15SercomUartTXPadhh+0x84>)
    6aaa:	7912      	ldrb	r2, [r2, #4]
    6aac:	54e2      	strb	r2, [r4, r3]
  uc_pinRTS = _pinRTS;
    6aae:	466a      	mov	r2, sp
    6ab0:	7a12      	ldrb	r2, [r2, #8]
    6ab2:	3301      	adds	r3, #1
    6ab4:	54e2      	strb	r2, [r4, r3]
  uc_pinCTS = _pinCTS;
    6ab6:	466a      	mov	r2, sp
    6ab8:	7b12      	ldrb	r2, [r2, #12]
    6aba:	3310      	adds	r3, #16
    6abc:	54e2      	strb	r2, [r4, r3]
}
    6abe:	b005      	add	sp, #20
    6ac0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6ac2:	46c0      	nop			; (mov r8, r8)
    6ac4:	0000b774 	.word	0x0000b774
    6ac8:	00000225 	.word	0x00000225
    6acc:	00000226 	.word	0x00000226
    6ad0:	00000227 	.word	0x00000227

00006ad4 <_ZN4UartC1EP6SERCOMhh11SercomRXPad15SercomUartTXPad>:
Uart::Uart(SERCOM *_s, uint8_t _pinRX, uint8_t _pinTX, SercomRXPad _padRX, SercomUartTXPad _padTX) :
    6ad4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    6ad6:	001d      	movs	r5, r3
    6ad8:	ab08      	add	r3, sp, #32
    6ada:	781b      	ldrb	r3, [r3, #0]
    6adc:	0004      	movs	r4, r0
    6ade:	9300      	str	r3, [sp, #0]
    6ae0:	ab09      	add	r3, sp, #36	; 0x24
    6ae2:	781b      	ldrb	r3, [r3, #0]
    6ae4:	0016      	movs	r6, r2
    6ae6:	9301      	str	r3, [sp, #4]
    6ae8:	2300      	movs	r3, #0
    6aea:	6043      	str	r3, [r0, #4]
    6aec:	23fa      	movs	r3, #250	; 0xfa
    6aee:	009b      	lsls	r3, r3, #2
    6af0:	6083      	str	r3, [r0, #8]
Uart::Uart(SERCOM *_s, uint8_t _pinRX, uint8_t _pinTX, SercomRXPad _padRX, SercomUartTXPad _padTX, uint8_t _pinRTS, uint8_t _pinCTS)
    6af2:	4b11      	ldr	r3, [pc, #68]	; (6b38 <_ZN4UartC1EP6SERCOMhh11SercomRXPad15SercomUartTXPad+0x64>)
Uart::Uart(SERCOM *_s, uint8_t _pinRX, uint8_t _pinTX, SercomRXPad _padRX, SercomUartTXPad _padTX) :
    6af4:	000f      	movs	r7, r1
Uart::Uart(SERCOM *_s, uint8_t _pinRX, uint8_t _pinTX, SercomRXPad _padRX, SercomUartTXPad _padTX, uint8_t _pinRTS, uint8_t _pinCTS)
    6af6:	3308      	adds	r3, #8
    6af8:	6003      	str	r3, [r0, #0]
    6afa:	3014      	adds	r0, #20
    6afc:	f7ff ff98 	bl	6a30 <_ZN11RingBufferNILi256EEC1Ev>
    6b00:	0020      	movs	r0, r4
    6b02:	301d      	adds	r0, #29
    6b04:	30ff      	adds	r0, #255	; 0xff
    6b06:	f7ff ff93 	bl	6a30 <_ZN11RingBufferNILi256EEC1Ev>
  uc_pinRX = _pinRX;
    6b0a:	2389      	movs	r3, #137	; 0x89
  uc_padRX = _padRX ;
    6b0c:	466a      	mov	r2, sp
  uc_pinRX = _pinRX;
    6b0e:	009b      	lsls	r3, r3, #2
  sercom = _s;
    6b10:	6127      	str	r7, [r4, #16]
  uc_pinRX = _pinRX;
    6b12:	54e6      	strb	r6, [r4, r3]
  uc_pinTX = _pinTX;
    6b14:	4b09      	ldr	r3, [pc, #36]	; (6b3c <_ZN4UartC1EP6SERCOMhh11SercomRXPad15SercomUartTXPad+0x68>)
  uc_padRX = _padRX ;
    6b16:	7812      	ldrb	r2, [r2, #0]
  uc_pinTX = _pinTX;
    6b18:	54e5      	strb	r5, [r4, r3]
  uc_padRX = _padRX ;
    6b1a:	4b09      	ldr	r3, [pc, #36]	; (6b40 <_ZN4UartC1EP6SERCOMhh11SercomRXPad15SercomUartTXPad+0x6c>)
}
    6b1c:	0020      	movs	r0, r4
  uc_padRX = _padRX ;
    6b1e:	54e2      	strb	r2, [r4, r3]
  uc_padTX = _padTX;
    6b20:	466a      	mov	r2, sp
    6b22:	4b08      	ldr	r3, [pc, #32]	; (6b44 <_ZN4UartC1EP6SERCOMhh11SercomRXPad15SercomUartTXPad+0x70>)
    6b24:	7912      	ldrb	r2, [r2, #4]
    6b26:	54e2      	strb	r2, [r4, r3]
  uc_pinRTS = _pinRTS;
    6b28:	228a      	movs	r2, #138	; 0x8a
    6b2a:	3b29      	subs	r3, #41	; 0x29
    6b2c:	3bff      	subs	r3, #255	; 0xff
    6b2e:	0092      	lsls	r2, r2, #2
    6b30:	54a3      	strb	r3, [r4, r2]
  uc_pinCTS = _pinCTS;
    6b32:	3210      	adds	r2, #16
    6b34:	54a3      	strb	r3, [r4, r2]
}
    6b36:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    6b38:	0000b774 	.word	0x0000b774
    6b3c:	00000225 	.word	0x00000225
    6b40:	00000226 	.word	0x00000226
    6b44:	00000227 	.word	0x00000227

00006b48 <_ZN11RingBufferNILi256EE9availableEv>:
  int delta = _iHead - _iTail;
    6b48:	0003      	movs	r3, r0
    6b4a:	33fc      	adds	r3, #252	; 0xfc
    6b4c:	6858      	ldr	r0, [r3, #4]
    6b4e:	689b      	ldr	r3, [r3, #8]
    6b50:	1ac0      	subs	r0, r0, r3
  if(delta < 0)
    6b52:	d501      	bpl.n	6b58 <_ZN11RingBufferNILi256EE9availableEv+0x10>
    return N + delta;
    6b54:	3001      	adds	r0, #1
    6b56:	30ff      	adds	r0, #255	; 0xff
}
    6b58:	4770      	bx	lr

00006b5a <_ZN4Uart5flushEv>:
{
    6b5a:	b510      	push	{r4, lr}
    6b5c:	0004      	movs	r4, r0
  while(txBuffer.available()); // wait until TX buffer is empty
    6b5e:	0020      	movs	r0, r4
    6b60:	301d      	adds	r0, #29
    6b62:	30ff      	adds	r0, #255	; 0xff
    6b64:	f7ff fff0 	bl	6b48 <_ZN11RingBufferNILi256EE9availableEv>
    6b68:	2800      	cmp	r0, #0
    6b6a:	d1f8      	bne.n	6b5e <_ZN4Uart5flushEv+0x4>
  sercom->flushUART();
    6b6c:	6920      	ldr	r0, [r4, #16]
    6b6e:	f7ff fdd0 	bl	6712 <_ZN6SERCOM9flushUARTEv>
}
    6b72:	bd10      	pop	{r4, pc}

00006b74 <_ZN4Uart9availableEv>:
{
    6b74:	b510      	push	{r4, lr}
  return rxBuffer.available();
    6b76:	3014      	adds	r0, #20
    6b78:	f7ff ffe6 	bl	6b48 <_ZN11RingBufferNILi256EE9availableEv>
}
    6b7c:	bd10      	pop	{r4, pc}

00006b7e <_ZN11RingBufferNILi256EE17availableForStoreEv>:
  if (_iHead >= _iTail)
    6b7e:	0003      	movs	r3, r0
    6b80:	33fc      	adds	r3, #252	; 0xfc
    6b82:	6859      	ldr	r1, [r3, #4]
    6b84:	689a      	ldr	r2, [r3, #8]
    6b86:	4291      	cmp	r1, r2
    6b88:	db04      	blt.n	6b94 <_ZN11RingBufferNILi256EE17availableForStoreEv+0x16>
    return N - 1 - _iHead + _iTail;
    6b8a:	685a      	ldr	r2, [r3, #4]
    6b8c:	6898      	ldr	r0, [r3, #8]
    6b8e:	1a80      	subs	r0, r0, r2
    6b90:	30ff      	adds	r0, #255	; 0xff
}
    6b92:	4770      	bx	lr
    return _iTail - _iHead - 1;
    6b94:	6898      	ldr	r0, [r3, #8]
    6b96:	685b      	ldr	r3, [r3, #4]
    6b98:	1ac0      	subs	r0, r0, r3
    6b9a:	3801      	subs	r0, #1
    6b9c:	e7f9      	b.n	6b92 <_ZN11RingBufferNILi256EE17availableForStoreEv+0x14>

00006b9e <_ZN4Uart17availableForWriteEv>:
{
    6b9e:	b510      	push	{r4, lr}
  return txBuffer.availableForStore();
    6ba0:	301d      	adds	r0, #29
    6ba2:	30ff      	adds	r0, #255	; 0xff
    6ba4:	f7ff ffeb 	bl	6b7e <_ZN11RingBufferNILi256EE17availableForStoreEv>
}
    6ba8:	bd10      	pop	{r4, pc}

00006baa <_ZN4Uart10IrqHandlerEv>:
{
    6baa:	b510      	push	{r4, lr}
    6bac:	0004      	movs	r4, r0
  if (sercom->isFrameErrorUART()) {
    6bae:	6900      	ldr	r0, [r0, #16]
    6bb0:	f7ff fdcb 	bl	674a <_ZN6SERCOM16isFrameErrorUARTEv>
    6bb4:	2800      	cmp	r0, #0
    6bb6:	d005      	beq.n	6bc4 <_ZN4Uart10IrqHandlerEv+0x1a>
    sercom->readDataUART();
    6bb8:	6920      	ldr	r0, [r4, #16]
    6bba:	f7ff fdd6 	bl	676a <_ZN6SERCOM12readDataUARTEv>
    sercom->clearFrameErrorUART();
    6bbe:	6920      	ldr	r0, [r4, #16]
    6bc0:	f7ff fdc8 	bl	6754 <_ZN6SERCOM19clearFrameErrorUARTEv>
  if (sercom->availableDataUART()) {
    6bc4:	6920      	ldr	r0, [r4, #16]
    6bc6:	f7ff fdb0 	bl	672a <_ZN6SERCOM17availableDataUARTEv>
    6bca:	2800      	cmp	r0, #0
    6bcc:	d020      	beq.n	6c10 <_ZN4Uart10IrqHandlerEv+0x66>
    rxBuffer.store_char(sercom->readDataUART());
    6bce:	6920      	ldr	r0, [r4, #16]
    6bd0:	f7ff fdcb 	bl	676a <_ZN6SERCOM12readDataUARTEv>
  int i = nextIndex(_iHead);
    6bd4:	0022      	movs	r2, r4
    6bd6:	32fc      	adds	r2, #252	; 0xfc
    6bd8:	6993      	ldr	r3, [r2, #24]
  if ( i != _iTail )
    6bda:	69d1      	ldr	r1, [r2, #28]
}

template <int N>
int RingBufferN<N>::nextIndex(int index)
{
  return (uint32_t)(index + 1) % N;
    6bdc:	3301      	adds	r3, #1
    6bde:	b2db      	uxtb	r3, r3
  if ( i != _iTail )
    6be0:	428b      	cmp	r3, r1
    6be2:	d003      	beq.n	6bec <_ZN4Uart10IrqHandlerEv+0x42>
    _aucBuffer[_iHead] = c ;
    6be4:	6991      	ldr	r1, [r2, #24]
    6be6:	1861      	adds	r1, r4, r1
    6be8:	7508      	strb	r0, [r1, #20]
    _iHead = i ;
    6bea:	6193      	str	r3, [r2, #24]
    if (uc_pinRTS != NO_RTS_PIN) {
    6bec:	238a      	movs	r3, #138	; 0x8a
    6bee:	009b      	lsls	r3, r3, #2
    6bf0:	5ce3      	ldrb	r3, [r4, r3]
    6bf2:	2bff      	cmp	r3, #255	; 0xff
    6bf4:	d00c      	beq.n	6c10 <_ZN4Uart10IrqHandlerEv+0x66>
    rxBuffer.store_char(sercom->readDataUART());
    6bf6:	0020      	movs	r0, r4
    6bf8:	3014      	adds	r0, #20
      if (rxBuffer.availableForStore() < RTS_RX_THRESHOLD) {
    6bfa:	f7ff ffc0 	bl	6b7e <_ZN11RingBufferNILi256EE17availableForStoreEv>
    6bfe:	2809      	cmp	r0, #9
    6c00:	dc06      	bgt.n	6c10 <_ZN4Uart10IrqHandlerEv+0x66>
        *pul_outsetRTS = ul_pinMaskRTS;
    6c02:	238b      	movs	r3, #139	; 0x8b
    6c04:	228d      	movs	r2, #141	; 0x8d
    6c06:	009b      	lsls	r3, r3, #2
    6c08:	0092      	lsls	r2, r2, #2
    6c0a:	58e3      	ldr	r3, [r4, r3]
    6c0c:	58a2      	ldr	r2, [r4, r2]
    6c0e:	601a      	str	r2, [r3, #0]
  if (sercom->isDataRegisterEmptyUART()) {
    6c10:	6920      	ldr	r0, [r4, #16]
    6c12:	f7ff fda5 	bl	6760 <_ZN6SERCOM23isDataRegisterEmptyUARTEv>
    6c16:	2800      	cmp	r0, #0
    6c18:	d01a      	beq.n	6c50 <_ZN4Uart10IrqHandlerEv+0xa6>
    if (txBuffer.available()) {
    6c1a:	0020      	movs	r0, r4
    6c1c:	301d      	adds	r0, #29
    6c1e:	30ff      	adds	r0, #255	; 0xff
    6c20:	f7ff ff92 	bl	6b48 <_ZN11RingBufferNILi256EE9availableEv>
    6c24:	2800      	cmp	r0, #0
    6c26:	d022      	beq.n	6c6e <_ZN4Uart10IrqHandlerEv+0xc4>
  if(_iTail == _iHead)
    6c28:	2386      	movs	r3, #134	; 0x86
    6c2a:	009b      	lsls	r3, r3, #2
    6c2c:	18e3      	adds	r3, r4, r3
    6c2e:	6899      	ldr	r1, [r3, #8]
    6c30:	685a      	ldr	r2, [r3, #4]
    6c32:	4291      	cmp	r1, r2
    6c34:	d018      	beq.n	6c68 <_ZN4Uart10IrqHandlerEv+0xbe>
  uint8_t value = _aucBuffer[_iTail];
    6c36:	218e      	movs	r1, #142	; 0x8e
    6c38:	689a      	ldr	r2, [r3, #8]
    6c3a:	0049      	lsls	r1, r1, #1
    6c3c:	18a2      	adds	r2, r4, r2
    6c3e:	5c51      	ldrb	r1, [r2, r1]
  _iTail = nextIndex(_iTail);
    6c40:	689a      	ldr	r2, [r3, #8]
  return (uint32_t)(index + 1) % N;
    6c42:	3201      	adds	r2, #1
    6c44:	b2d2      	uxtb	r2, r2
  _iTail = nextIndex(_iTail);
    6c46:	609a      	str	r2, [r3, #8]
      sercom->writeDataUART(data);
    6c48:	b2c9      	uxtb	r1, r1
    6c4a:	6920      	ldr	r0, [r4, #16]
    6c4c:	f7ff fd91 	bl	6772 <_ZN6SERCOM13writeDataUARTEh>
  if (sercom->isUARTError()) {
    6c50:	6920      	ldr	r0, [r4, #16]
    6c52:	f7ff fd6f 	bl	6734 <_ZN6SERCOM11isUARTErrorEv>
    6c56:	2800      	cmp	r0, #0
    6c58:	d005      	beq.n	6c66 <_ZN4Uart10IrqHandlerEv+0xbc>
    sercom->acknowledgeUARTError();
    6c5a:	6920      	ldr	r0, [r4, #16]
    6c5c:	f7ff fd6e 	bl	673c <_ZN6SERCOM20acknowledgeUARTErrorEv>
    sercom->clearStatusUART();
    6c60:	6920      	ldr	r0, [r4, #16]
    6c62:	f7ff fd5e 	bl	6722 <_ZN6SERCOM15clearStatusUARTEv>
}
    6c66:	bd10      	pop	{r4, pc}
    return -1;
    6c68:	2101      	movs	r1, #1
    6c6a:	4249      	negs	r1, r1
    6c6c:	e7ec      	b.n	6c48 <_ZN4Uart10IrqHandlerEv+0x9e>
      sercom->disableDataRegisterEmptyInterruptUART();
    6c6e:	6920      	ldr	r0, [r4, #16]
    6c70:	f7ff fd8b 	bl	678a <_ZN6SERCOM37disableDataRegisterEmptyInterruptUARTEv>
    6c74:	e7ec      	b.n	6c50 <_ZN4Uart10IrqHandlerEv+0xa6>
	...

00006c78 <_ZN4Uart5writeEh>:
{
    6c78:	b570      	push	{r4, r5, r6, lr}
    6c7a:	0004      	movs	r4, r0
  if (sercom->isDataRegisterEmptyUART() && txBuffer.available() == 0) {
    6c7c:	6900      	ldr	r0, [r0, #16]
{
    6c7e:	000d      	movs	r5, r1
  if (sercom->isDataRegisterEmptyUART() && txBuffer.available() == 0) {
    6c80:	f7ff fd6e 	bl	6760 <_ZN6SERCOM23isDataRegisterEmptyUARTEv>
    6c84:	2800      	cmp	r0, #0
    6c86:	d124      	bne.n	6cd2 <_ZN4Uart5writeEh+0x5a>
  return (uint32_t)(index + 1) % N;
    6c88:	26ff      	movs	r6, #255	; 0xff
}

template <int N>
bool RingBufferN<N>::isFull()
{
  return (nextIndex(_iHead) == _iTail);
    6c8a:	2386      	movs	r3, #134	; 0x86
    6c8c:	009b      	lsls	r3, r3, #2
    6c8e:	18e3      	adds	r3, r4, r3
    6c90:	685a      	ldr	r2, [r3, #4]
    6c92:	6899      	ldr	r1, [r3, #8]
  return (uint32_t)(index + 1) % N;
    6c94:	3201      	adds	r2, #1
    6c96:	4032      	ands	r2, r6
    while(txBuffer.isFull()) {
    6c98:	428a      	cmp	r2, r1
    6c9a:	d12f      	bne.n	6cfc <_ZN4Uart5writeEh+0x84>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    6c9c:	f3ef 8310 	mrs	r3, PRIMASK
      if (interruptsEnabled) {
    6ca0:	07db      	lsls	r3, r3, #31
    6ca2:	d40d      	bmi.n	6cc0 <_ZN4Uart5writeEh+0x48>
        uint32_t exceptionNumber = (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk);
    6ca4:	4b1e      	ldr	r3, [pc, #120]	; (6d20 <_ZN4Uart5writeEh+0xa8>)
    6ca6:	685b      	ldr	r3, [r3, #4]
    6ca8:	05db      	lsls	r3, r3, #23
    6caa:	0ddb      	lsrs	r3, r3, #23
        if (exceptionNumber == 0 ||
    6cac:	d0ed      	beq.n	6c8a <_ZN4Uart5writeEh+0x12>
              NVIC_GetPriority((IRQn_Type)(exceptionNumber - 16)) > SERCOM_NVIC_PRIORITY) {
    6cae:	3b10      	subs	r3, #16
    6cb0:	b25b      	sxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
    6cb2:	2b00      	cmp	r3, #0
    6cb4:	db19      	blt.n	6cea <_ZN4Uart5writeEh+0x72>
    return((uint32_t)(((NVIC->IP[ _IP_IDX(IRQn)] >> _BIT_SHIFT(IRQn) ) & (uint32_t)0xFFUL) >> (8U - __NVIC_PRIO_BITS)));
    6cb6:	089b      	lsrs	r3, r3, #2
    6cb8:	33c0      	adds	r3, #192	; 0xc0
    6cba:	4a1a      	ldr	r2, [pc, #104]	; (6d24 <_ZN4Uart5writeEh+0xac>)
    6cbc:	009b      	lsls	r3, r3, #2
    6cbe:	589b      	ldr	r3, [r3, r2]
      if (sercom->isDataRegisterEmptyUART()) {
    6cc0:	6920      	ldr	r0, [r4, #16]
    6cc2:	f7ff fd4d 	bl	6760 <_ZN6SERCOM23isDataRegisterEmptyUARTEv>
    6cc6:	2800      	cmp	r0, #0
    6cc8:	d0df      	beq.n	6c8a <_ZN4Uart5writeEh+0x12>
        IrqHandler();
    6cca:	0020      	movs	r0, r4
    6ccc:	f7ff ff6d 	bl	6baa <_ZN4Uart10IrqHandlerEv>
    6cd0:	e7db      	b.n	6c8a <_ZN4Uart5writeEh+0x12>
  if (sercom->isDataRegisterEmptyUART() && txBuffer.available() == 0) {
    6cd2:	0020      	movs	r0, r4
    6cd4:	301d      	adds	r0, #29
    6cd6:	30ff      	adds	r0, #255	; 0xff
    6cd8:	f7ff ff36 	bl	6b48 <_ZN11RingBufferNILi256EE9availableEv>
    6cdc:	2800      	cmp	r0, #0
    6cde:	d1d3      	bne.n	6c88 <_ZN4Uart5writeEh+0x10>
    sercom->writeDataUART(data);
    6ce0:	0029      	movs	r1, r5
    6ce2:	6920      	ldr	r0, [r4, #16]
    6ce4:	f7ff fd45 	bl	6772 <_ZN6SERCOM13writeDataUARTEh>
  return 1;
    6ce8:	e017      	b.n	6d1a <_ZN4Uart5writeEh+0xa2>
    return((uint32_t)(((SCB->SHP[_SHP_IDX(IRQn)] >> _BIT_SHIFT(IRQn) ) & (uint32_t)0xFFUL) >> (8U - __NVIC_PRIO_BITS)));
    6cea:	220f      	movs	r2, #15
    6cec:	4013      	ands	r3, r2
    6cee:	3b08      	subs	r3, #8
    6cf0:	089b      	lsrs	r3, r3, #2
    6cf2:	4a0d      	ldr	r2, [pc, #52]	; (6d28 <_ZN4Uart5writeEh+0xb0>)
    6cf4:	009b      	lsls	r3, r3, #2
    6cf6:	189b      	adds	r3, r3, r2
    6cf8:	681b      	ldr	r3, [r3, #0]
    6cfa:	e7e1      	b.n	6cc0 <_ZN4Uart5writeEh+0x48>
  int i = nextIndex(_iHead);
    6cfc:	685a      	ldr	r2, [r3, #4]
  return (uint32_t)(index + 1) % N;
    6cfe:	3201      	adds	r2, #1
    6d00:	4016      	ands	r6, r2
  if ( i != _iTail )
    6d02:	689a      	ldr	r2, [r3, #8]
    6d04:	4296      	cmp	r6, r2
    6d06:	d005      	beq.n	6d14 <_ZN4Uart5writeEh+0x9c>
    _aucBuffer[_iHead] = c ;
    6d08:	218e      	movs	r1, #142	; 0x8e
    6d0a:	685a      	ldr	r2, [r3, #4]
    6d0c:	0049      	lsls	r1, r1, #1
    6d0e:	18a2      	adds	r2, r4, r2
    6d10:	5455      	strb	r5, [r2, r1]
    _iHead = i ;
    6d12:	605e      	str	r6, [r3, #4]
    sercom->enableDataRegisterEmptyInterruptUART();
    6d14:	6920      	ldr	r0, [r4, #16]
    6d16:	f7ff fd34 	bl	6782 <_ZN6SERCOM36enableDataRegisterEmptyInterruptUARTEv>
}
    6d1a:	2001      	movs	r0, #1
    6d1c:	bd70      	pop	{r4, r5, r6, pc}
    6d1e:	46c0      	nop			; (mov r8, r8)
    6d20:	e000ed00 	.word	0xe000ed00
    6d24:	e000e100 	.word	0xe000e100
    6d28:	e000ed1c 	.word	0xe000ed1c

00006d2c <_ZN4Uart4readEv>:
  if(_iTail == _iHead)
    6d2c:	0003      	movs	r3, r0
    6d2e:	33fc      	adds	r3, #252	; 0xfc
    6d30:	69d9      	ldr	r1, [r3, #28]
    6d32:	699a      	ldr	r2, [r3, #24]
{
    6d34:	b570      	push	{r4, r5, r6, lr}
    6d36:	0004      	movs	r4, r0
    6d38:	4291      	cmp	r1, r2
    6d3a:	d01a      	beq.n	6d72 <_ZN4Uart4readEv+0x46>
  uint8_t value = _aucBuffer[_iTail];
    6d3c:	69da      	ldr	r2, [r3, #28]
    6d3e:	1882      	adds	r2, r0, r2
    6d40:	7d15      	ldrb	r5, [r2, #20]
  _iTail = nextIndex(_iTail);
    6d42:	69da      	ldr	r2, [r3, #28]
  return (uint32_t)(index + 1) % N;
    6d44:	3201      	adds	r2, #1
    6d46:	b2d2      	uxtb	r2, r2
  _iTail = nextIndex(_iTail);
    6d48:	61da      	str	r2, [r3, #28]
  if (uc_pinRTS != NO_RTS_PIN) {
    6d4a:	238a      	movs	r3, #138	; 0x8a
    6d4c:	009b      	lsls	r3, r3, #2
    6d4e:	5ce3      	ldrb	r3, [r4, r3]
    6d50:	2bff      	cmp	r3, #255	; 0xff
    6d52:	d00c      	beq.n	6d6e <_ZN4Uart4readEv+0x42>
  int c = rxBuffer.read_char();
    6d54:	0020      	movs	r0, r4
    6d56:	3014      	adds	r0, #20
    if (rxBuffer.availableForStore() > RTS_RX_THRESHOLD) {
    6d58:	f7ff ff11 	bl	6b7e <_ZN11RingBufferNILi256EE17availableForStoreEv>
    6d5c:	280a      	cmp	r0, #10
    6d5e:	dd06      	ble.n	6d6e <_ZN4Uart4readEv+0x42>
      *pul_outclrRTS = ul_pinMaskRTS;
    6d60:	238c      	movs	r3, #140	; 0x8c
    6d62:	228d      	movs	r2, #141	; 0x8d
    6d64:	009b      	lsls	r3, r3, #2
    6d66:	0092      	lsls	r2, r2, #2
    6d68:	58e3      	ldr	r3, [r4, r3]
    6d6a:	58a2      	ldr	r2, [r4, r2]
    6d6c:	601a      	str	r2, [r3, #0]
}
    6d6e:	0028      	movs	r0, r5
    6d70:	bd70      	pop	{r4, r5, r6, pc}
    return -1;
    6d72:	2501      	movs	r5, #1
    6d74:	426d      	negs	r5, r5
    6d76:	e7e8      	b.n	6d4a <_ZN4Uart4readEv+0x1e>

00006d78 <_ZN13PluggableUSB_12getInterfaceEPh>:
#ifdef PLUGGABLE_USB_ENABLED

extern uint32_t EndPoints[];

int PluggableUSB_::getInterface(uint8_t* interfaceCount)
{
    6d78:	b570      	push	{r4, r5, r6, lr}
    6d7a:	000e      	movs	r6, r1
	int sent = 0;
    6d7c:	2500      	movs	r5, #0
	PluggableUSBModule* node;
	for (node = rootNode; node; node = node->next) {
    6d7e:	6844      	ldr	r4, [r0, #4]
    6d80:	2c00      	cmp	r4, #0
    6d82:	d00b      	beq.n	6d9c <_ZN13PluggableUSB_12getInterfaceEPh+0x24>
		int res = node->getInterface(interfaceCount);
    6d84:	6823      	ldr	r3, [r4, #0]
    6d86:	0031      	movs	r1, r6
    6d88:	685b      	ldr	r3, [r3, #4]
    6d8a:	0020      	movs	r0, r4
    6d8c:	4798      	blx	r3
		if (res < 0)
    6d8e:	2800      	cmp	r0, #0
    6d90:	db02      	blt.n	6d98 <_ZN13PluggableUSB_12getInterfaceEPh+0x20>
			return -1;
		sent += res;
    6d92:	182d      	adds	r5, r5, r0
	for (node = rootNode; node; node = node->next) {
    6d94:	68e4      	ldr	r4, [r4, #12]
    6d96:	e7f3      	b.n	6d80 <_ZN13PluggableUSB_12getInterfaceEPh+0x8>
			return -1;
    6d98:	2501      	movs	r5, #1
    6d9a:	426d      	negs	r5, r5
	}
	return sent;
}
    6d9c:	0028      	movs	r0, r5
    6d9e:	bd70      	pop	{r4, r5, r6, pc}

00006da0 <_ZN13PluggableUSB_13getDescriptorER8USBSetup>:

int PluggableUSB_::getDescriptor(USBSetup& setup)
{
    6da0:	b570      	push	{r4, r5, r6, lr}
    6da2:	000d      	movs	r5, r1
	PluggableUSBModule* node;
	for (node = rootNode; node; node = node->next) {
    6da4:	6844      	ldr	r4, [r0, #4]
    6da6:	2c00      	cmp	r4, #0
    6da8:	d008      	beq.n	6dbc <_ZN13PluggableUSB_13getDescriptorER8USBSetup+0x1c>
		int ret = node->getDescriptor(setup);
    6daa:	6823      	ldr	r3, [r4, #0]
    6dac:	0029      	movs	r1, r5
    6dae:	689b      	ldr	r3, [r3, #8]
    6db0:	0020      	movs	r0, r4
    6db2:	4798      	blx	r3
		// ret!=0 -> request has been processed
		if (ret)
    6db4:	2800      	cmp	r0, #0
    6db6:	d102      	bne.n	6dbe <_ZN13PluggableUSB_13getDescriptorER8USBSetup+0x1e>
	for (node = rootNode; node; node = node->next) {
    6db8:	68e4      	ldr	r4, [r4, #12]
    6dba:	e7f4      	b.n	6da6 <_ZN13PluggableUSB_13getDescriptorER8USBSetup+0x6>
			return ret;
	}
	return 0;
    6dbc:	0020      	movs	r0, r4
}
    6dbe:	bd70      	pop	{r4, r5, r6, pc}

00006dc0 <_ZN13PluggableUSB_12getShortNameEPc>:

void PluggableUSB_::getShortName(char *iSerialNum)
{
    6dc0:	b570      	push	{r4, r5, r6, lr}
    6dc2:	000d      	movs	r5, r1
       PluggableUSBModule* node;
       for (node = rootNode; node; node = node->next) {
    6dc4:	6844      	ldr	r4, [r0, #4]
    6dc6:	2c00      	cmp	r4, #0
    6dc8:	d007      	beq.n	6dda <_ZN13PluggableUSB_12getShortNameEPc+0x1a>
               iSerialNum += node->getShortName(iSerialNum);
    6dca:	6823      	ldr	r3, [r4, #0]
    6dcc:	0029      	movs	r1, r5
    6dce:	0020      	movs	r0, r4
    6dd0:	68db      	ldr	r3, [r3, #12]
    6dd2:	4798      	blx	r3
       for (node = rootNode; node; node = node->next) {
    6dd4:	68e4      	ldr	r4, [r4, #12]
               iSerialNum += node->getShortName(iSerialNum);
    6dd6:	182d      	adds	r5, r5, r0
       for (node = rootNode; node; node = node->next) {
    6dd8:	e7f5      	b.n	6dc6 <_ZN13PluggableUSB_12getShortNameEPc+0x6>
       }
       *iSerialNum = 0;
    6dda:	702c      	strb	r4, [r5, #0]
}
    6ddc:	bd70      	pop	{r4, r5, r6, pc}

00006dde <_ZN13PluggableUSB_5setupER8USBSetup>:

bool PluggableUSB_::setup(USBSetup& setup)
{
    6dde:	b570      	push	{r4, r5, r6, lr}
    6de0:	000d      	movs	r5, r1
	PluggableUSBModule* node;
	for (node = rootNode; node; node = node->next) {
    6de2:	6844      	ldr	r4, [r0, #4]
    6de4:	2c00      	cmp	r4, #0
    6de6:	d008      	beq.n	6dfa <_ZN13PluggableUSB_5setupER8USBSetup+0x1c>
		if (node->setup(setup)) {
    6de8:	6823      	ldr	r3, [r4, #0]
    6dea:	0029      	movs	r1, r5
    6dec:	681b      	ldr	r3, [r3, #0]
    6dee:	0020      	movs	r0, r4
    6df0:	4798      	blx	r3
    6df2:	2800      	cmp	r0, #0
    6df4:	d102      	bne.n	6dfc <_ZN13PluggableUSB_5setupER8USBSetup+0x1e>
	for (node = rootNode; node; node = node->next) {
    6df6:	68e4      	ldr	r4, [r4, #12]
    6df8:	e7f4      	b.n	6de4 <_ZN13PluggableUSB_5setupER8USBSetup+0x6>
			return true;
		}
	}
	return false;
    6dfa:	0020      	movs	r0, r4
}
    6dfc:	bd70      	pop	{r4, r5, r6, pc}
	...

00006e00 <_Z12PluggableUSBv>:
	// restart USB layer???
}

PluggableUSB_& PluggableUSB()
{
	static PluggableUSB_ obj;
    6e00:	2101      	movs	r1, #1
    6e02:	4a06      	ldr	r2, [pc, #24]	; (6e1c <_Z12PluggableUSBv+0x1c>)
{
    6e04:	b510      	push	{r4, lr}
	static PluggableUSB_ obj;
    6e06:	6813      	ldr	r3, [r2, #0]
    6e08:	4805      	ldr	r0, [pc, #20]	; (6e20 <_Z12PluggableUSBv+0x20>)
    6e0a:	400b      	ands	r3, r1
    6e0c:	d105      	bne.n	6e1a <_Z12PluggableUSBv+0x1a>
	return obj;
}

PluggableUSB_::PluggableUSB_() : lastIf(CDC_ACM_INTERFACE + CDC_INTERFACE_COUNT),
                                 lastEp(CDC_FIRST_ENDPOINT + CDC_ENPOINT_COUNT),
                                 rootNode(NULL)
    6e0e:	2402      	movs	r4, #2
    6e10:	7004      	strb	r4, [r0, #0]
    6e12:	1924      	adds	r4, r4, r4
    6e14:	7044      	strb	r4, [r0, #1]
    6e16:	6043      	str	r3, [r0, #4]
	static PluggableUSB_ obj;
    6e18:	6011      	str	r1, [r2, #0]
}
    6e1a:	bd10      	pop	{r4, pc}
    6e1c:	2000102c 	.word	0x2000102c
    6e20:	20001030 	.word	0x20001030

00006e24 <__aeabi_atexit>:
    6e24:	000b      	movs	r3, r1
    6e26:	b510      	push	{r4, lr}
    6e28:	0001      	movs	r1, r0
    6e2a:	0018      	movs	r0, r3
    6e2c:	f001 ff44 	bl	8cb8 <__cxa_atexit>
    6e30:	bd10      	pop	{r4, pc}
	...

00006e34 <__gnu_thumb1_case_uqi>:
    6e34:	b402      	push	{r1}
    6e36:	4671      	mov	r1, lr
    6e38:	0849      	lsrs	r1, r1, #1
    6e3a:	0049      	lsls	r1, r1, #1
    6e3c:	5c09      	ldrb	r1, [r1, r0]
    6e3e:	0049      	lsls	r1, r1, #1
    6e40:	448e      	add	lr, r1
    6e42:	bc02      	pop	{r1}
    6e44:	4770      	bx	lr
    6e46:	46c0      	nop			; (mov r8, r8)

00006e48 <__udivsi3>:
    6e48:	2200      	movs	r2, #0
    6e4a:	0843      	lsrs	r3, r0, #1
    6e4c:	428b      	cmp	r3, r1
    6e4e:	d374      	bcc.n	6f3a <__udivsi3+0xf2>
    6e50:	0903      	lsrs	r3, r0, #4
    6e52:	428b      	cmp	r3, r1
    6e54:	d35f      	bcc.n	6f16 <__udivsi3+0xce>
    6e56:	0a03      	lsrs	r3, r0, #8
    6e58:	428b      	cmp	r3, r1
    6e5a:	d344      	bcc.n	6ee6 <__udivsi3+0x9e>
    6e5c:	0b03      	lsrs	r3, r0, #12
    6e5e:	428b      	cmp	r3, r1
    6e60:	d328      	bcc.n	6eb4 <__udivsi3+0x6c>
    6e62:	0c03      	lsrs	r3, r0, #16
    6e64:	428b      	cmp	r3, r1
    6e66:	d30d      	bcc.n	6e84 <__udivsi3+0x3c>
    6e68:	22ff      	movs	r2, #255	; 0xff
    6e6a:	0209      	lsls	r1, r1, #8
    6e6c:	ba12      	rev	r2, r2
    6e6e:	0c03      	lsrs	r3, r0, #16
    6e70:	428b      	cmp	r3, r1
    6e72:	d302      	bcc.n	6e7a <__udivsi3+0x32>
    6e74:	1212      	asrs	r2, r2, #8
    6e76:	0209      	lsls	r1, r1, #8
    6e78:	d065      	beq.n	6f46 <__udivsi3+0xfe>
    6e7a:	0b03      	lsrs	r3, r0, #12
    6e7c:	428b      	cmp	r3, r1
    6e7e:	d319      	bcc.n	6eb4 <__udivsi3+0x6c>
    6e80:	e000      	b.n	6e84 <__udivsi3+0x3c>
    6e82:	0a09      	lsrs	r1, r1, #8
    6e84:	0bc3      	lsrs	r3, r0, #15
    6e86:	428b      	cmp	r3, r1
    6e88:	d301      	bcc.n	6e8e <__udivsi3+0x46>
    6e8a:	03cb      	lsls	r3, r1, #15
    6e8c:	1ac0      	subs	r0, r0, r3
    6e8e:	4152      	adcs	r2, r2
    6e90:	0b83      	lsrs	r3, r0, #14
    6e92:	428b      	cmp	r3, r1
    6e94:	d301      	bcc.n	6e9a <__udivsi3+0x52>
    6e96:	038b      	lsls	r3, r1, #14
    6e98:	1ac0      	subs	r0, r0, r3
    6e9a:	4152      	adcs	r2, r2
    6e9c:	0b43      	lsrs	r3, r0, #13
    6e9e:	428b      	cmp	r3, r1
    6ea0:	d301      	bcc.n	6ea6 <__udivsi3+0x5e>
    6ea2:	034b      	lsls	r3, r1, #13
    6ea4:	1ac0      	subs	r0, r0, r3
    6ea6:	4152      	adcs	r2, r2
    6ea8:	0b03      	lsrs	r3, r0, #12
    6eaa:	428b      	cmp	r3, r1
    6eac:	d301      	bcc.n	6eb2 <__udivsi3+0x6a>
    6eae:	030b      	lsls	r3, r1, #12
    6eb0:	1ac0      	subs	r0, r0, r3
    6eb2:	4152      	adcs	r2, r2
    6eb4:	0ac3      	lsrs	r3, r0, #11
    6eb6:	428b      	cmp	r3, r1
    6eb8:	d301      	bcc.n	6ebe <__udivsi3+0x76>
    6eba:	02cb      	lsls	r3, r1, #11
    6ebc:	1ac0      	subs	r0, r0, r3
    6ebe:	4152      	adcs	r2, r2
    6ec0:	0a83      	lsrs	r3, r0, #10
    6ec2:	428b      	cmp	r3, r1
    6ec4:	d301      	bcc.n	6eca <__udivsi3+0x82>
    6ec6:	028b      	lsls	r3, r1, #10
    6ec8:	1ac0      	subs	r0, r0, r3
    6eca:	4152      	adcs	r2, r2
    6ecc:	0a43      	lsrs	r3, r0, #9
    6ece:	428b      	cmp	r3, r1
    6ed0:	d301      	bcc.n	6ed6 <__udivsi3+0x8e>
    6ed2:	024b      	lsls	r3, r1, #9
    6ed4:	1ac0      	subs	r0, r0, r3
    6ed6:	4152      	adcs	r2, r2
    6ed8:	0a03      	lsrs	r3, r0, #8
    6eda:	428b      	cmp	r3, r1
    6edc:	d301      	bcc.n	6ee2 <__udivsi3+0x9a>
    6ede:	020b      	lsls	r3, r1, #8
    6ee0:	1ac0      	subs	r0, r0, r3
    6ee2:	4152      	adcs	r2, r2
    6ee4:	d2cd      	bcs.n	6e82 <__udivsi3+0x3a>
    6ee6:	09c3      	lsrs	r3, r0, #7
    6ee8:	428b      	cmp	r3, r1
    6eea:	d301      	bcc.n	6ef0 <__udivsi3+0xa8>
    6eec:	01cb      	lsls	r3, r1, #7
    6eee:	1ac0      	subs	r0, r0, r3
    6ef0:	4152      	adcs	r2, r2
    6ef2:	0983      	lsrs	r3, r0, #6
    6ef4:	428b      	cmp	r3, r1
    6ef6:	d301      	bcc.n	6efc <__udivsi3+0xb4>
    6ef8:	018b      	lsls	r3, r1, #6
    6efa:	1ac0      	subs	r0, r0, r3
    6efc:	4152      	adcs	r2, r2
    6efe:	0943      	lsrs	r3, r0, #5
    6f00:	428b      	cmp	r3, r1
    6f02:	d301      	bcc.n	6f08 <__udivsi3+0xc0>
    6f04:	014b      	lsls	r3, r1, #5
    6f06:	1ac0      	subs	r0, r0, r3
    6f08:	4152      	adcs	r2, r2
    6f0a:	0903      	lsrs	r3, r0, #4
    6f0c:	428b      	cmp	r3, r1
    6f0e:	d301      	bcc.n	6f14 <__udivsi3+0xcc>
    6f10:	010b      	lsls	r3, r1, #4
    6f12:	1ac0      	subs	r0, r0, r3
    6f14:	4152      	adcs	r2, r2
    6f16:	08c3      	lsrs	r3, r0, #3
    6f18:	428b      	cmp	r3, r1
    6f1a:	d301      	bcc.n	6f20 <__udivsi3+0xd8>
    6f1c:	00cb      	lsls	r3, r1, #3
    6f1e:	1ac0      	subs	r0, r0, r3
    6f20:	4152      	adcs	r2, r2
    6f22:	0883      	lsrs	r3, r0, #2
    6f24:	428b      	cmp	r3, r1
    6f26:	d301      	bcc.n	6f2c <__udivsi3+0xe4>
    6f28:	008b      	lsls	r3, r1, #2
    6f2a:	1ac0      	subs	r0, r0, r3
    6f2c:	4152      	adcs	r2, r2
    6f2e:	0843      	lsrs	r3, r0, #1
    6f30:	428b      	cmp	r3, r1
    6f32:	d301      	bcc.n	6f38 <__udivsi3+0xf0>
    6f34:	004b      	lsls	r3, r1, #1
    6f36:	1ac0      	subs	r0, r0, r3
    6f38:	4152      	adcs	r2, r2
    6f3a:	1a41      	subs	r1, r0, r1
    6f3c:	d200      	bcs.n	6f40 <__udivsi3+0xf8>
    6f3e:	4601      	mov	r1, r0
    6f40:	4152      	adcs	r2, r2
    6f42:	4610      	mov	r0, r2
    6f44:	4770      	bx	lr
    6f46:	e7ff      	b.n	6f48 <__udivsi3+0x100>
    6f48:	b501      	push	{r0, lr}
    6f4a:	2000      	movs	r0, #0
    6f4c:	f000 f8f0 	bl	7130 <__aeabi_idiv0>
    6f50:	bd02      	pop	{r1, pc}
    6f52:	46c0      	nop			; (mov r8, r8)

00006f54 <__aeabi_uidivmod>:
    6f54:	2900      	cmp	r1, #0
    6f56:	d0f7      	beq.n	6f48 <__udivsi3+0x100>
    6f58:	e776      	b.n	6e48 <__udivsi3>
    6f5a:	4770      	bx	lr

00006f5c <__divsi3>:
    6f5c:	4603      	mov	r3, r0
    6f5e:	430b      	orrs	r3, r1
    6f60:	d47f      	bmi.n	7062 <__divsi3+0x106>
    6f62:	2200      	movs	r2, #0
    6f64:	0843      	lsrs	r3, r0, #1
    6f66:	428b      	cmp	r3, r1
    6f68:	d374      	bcc.n	7054 <__divsi3+0xf8>
    6f6a:	0903      	lsrs	r3, r0, #4
    6f6c:	428b      	cmp	r3, r1
    6f6e:	d35f      	bcc.n	7030 <__divsi3+0xd4>
    6f70:	0a03      	lsrs	r3, r0, #8
    6f72:	428b      	cmp	r3, r1
    6f74:	d344      	bcc.n	7000 <__divsi3+0xa4>
    6f76:	0b03      	lsrs	r3, r0, #12
    6f78:	428b      	cmp	r3, r1
    6f7a:	d328      	bcc.n	6fce <__divsi3+0x72>
    6f7c:	0c03      	lsrs	r3, r0, #16
    6f7e:	428b      	cmp	r3, r1
    6f80:	d30d      	bcc.n	6f9e <__divsi3+0x42>
    6f82:	22ff      	movs	r2, #255	; 0xff
    6f84:	0209      	lsls	r1, r1, #8
    6f86:	ba12      	rev	r2, r2
    6f88:	0c03      	lsrs	r3, r0, #16
    6f8a:	428b      	cmp	r3, r1
    6f8c:	d302      	bcc.n	6f94 <__divsi3+0x38>
    6f8e:	1212      	asrs	r2, r2, #8
    6f90:	0209      	lsls	r1, r1, #8
    6f92:	d065      	beq.n	7060 <__divsi3+0x104>
    6f94:	0b03      	lsrs	r3, r0, #12
    6f96:	428b      	cmp	r3, r1
    6f98:	d319      	bcc.n	6fce <__divsi3+0x72>
    6f9a:	e000      	b.n	6f9e <__divsi3+0x42>
    6f9c:	0a09      	lsrs	r1, r1, #8
    6f9e:	0bc3      	lsrs	r3, r0, #15
    6fa0:	428b      	cmp	r3, r1
    6fa2:	d301      	bcc.n	6fa8 <__divsi3+0x4c>
    6fa4:	03cb      	lsls	r3, r1, #15
    6fa6:	1ac0      	subs	r0, r0, r3
    6fa8:	4152      	adcs	r2, r2
    6faa:	0b83      	lsrs	r3, r0, #14
    6fac:	428b      	cmp	r3, r1
    6fae:	d301      	bcc.n	6fb4 <__divsi3+0x58>
    6fb0:	038b      	lsls	r3, r1, #14
    6fb2:	1ac0      	subs	r0, r0, r3
    6fb4:	4152      	adcs	r2, r2
    6fb6:	0b43      	lsrs	r3, r0, #13
    6fb8:	428b      	cmp	r3, r1
    6fba:	d301      	bcc.n	6fc0 <__divsi3+0x64>
    6fbc:	034b      	lsls	r3, r1, #13
    6fbe:	1ac0      	subs	r0, r0, r3
    6fc0:	4152      	adcs	r2, r2
    6fc2:	0b03      	lsrs	r3, r0, #12
    6fc4:	428b      	cmp	r3, r1
    6fc6:	d301      	bcc.n	6fcc <__divsi3+0x70>
    6fc8:	030b      	lsls	r3, r1, #12
    6fca:	1ac0      	subs	r0, r0, r3
    6fcc:	4152      	adcs	r2, r2
    6fce:	0ac3      	lsrs	r3, r0, #11
    6fd0:	428b      	cmp	r3, r1
    6fd2:	d301      	bcc.n	6fd8 <__divsi3+0x7c>
    6fd4:	02cb      	lsls	r3, r1, #11
    6fd6:	1ac0      	subs	r0, r0, r3
    6fd8:	4152      	adcs	r2, r2
    6fda:	0a83      	lsrs	r3, r0, #10
    6fdc:	428b      	cmp	r3, r1
    6fde:	d301      	bcc.n	6fe4 <__divsi3+0x88>
    6fe0:	028b      	lsls	r3, r1, #10
    6fe2:	1ac0      	subs	r0, r0, r3
    6fe4:	4152      	adcs	r2, r2
    6fe6:	0a43      	lsrs	r3, r0, #9
    6fe8:	428b      	cmp	r3, r1
    6fea:	d301      	bcc.n	6ff0 <__divsi3+0x94>
    6fec:	024b      	lsls	r3, r1, #9
    6fee:	1ac0      	subs	r0, r0, r3
    6ff0:	4152      	adcs	r2, r2
    6ff2:	0a03      	lsrs	r3, r0, #8
    6ff4:	428b      	cmp	r3, r1
    6ff6:	d301      	bcc.n	6ffc <__divsi3+0xa0>
    6ff8:	020b      	lsls	r3, r1, #8
    6ffa:	1ac0      	subs	r0, r0, r3
    6ffc:	4152      	adcs	r2, r2
    6ffe:	d2cd      	bcs.n	6f9c <__divsi3+0x40>
    7000:	09c3      	lsrs	r3, r0, #7
    7002:	428b      	cmp	r3, r1
    7004:	d301      	bcc.n	700a <__divsi3+0xae>
    7006:	01cb      	lsls	r3, r1, #7
    7008:	1ac0      	subs	r0, r0, r3
    700a:	4152      	adcs	r2, r2
    700c:	0983      	lsrs	r3, r0, #6
    700e:	428b      	cmp	r3, r1
    7010:	d301      	bcc.n	7016 <__divsi3+0xba>
    7012:	018b      	lsls	r3, r1, #6
    7014:	1ac0      	subs	r0, r0, r3
    7016:	4152      	adcs	r2, r2
    7018:	0943      	lsrs	r3, r0, #5
    701a:	428b      	cmp	r3, r1
    701c:	d301      	bcc.n	7022 <__divsi3+0xc6>
    701e:	014b      	lsls	r3, r1, #5
    7020:	1ac0      	subs	r0, r0, r3
    7022:	4152      	adcs	r2, r2
    7024:	0903      	lsrs	r3, r0, #4
    7026:	428b      	cmp	r3, r1
    7028:	d301      	bcc.n	702e <__divsi3+0xd2>
    702a:	010b      	lsls	r3, r1, #4
    702c:	1ac0      	subs	r0, r0, r3
    702e:	4152      	adcs	r2, r2
    7030:	08c3      	lsrs	r3, r0, #3
    7032:	428b      	cmp	r3, r1
    7034:	d301      	bcc.n	703a <__divsi3+0xde>
    7036:	00cb      	lsls	r3, r1, #3
    7038:	1ac0      	subs	r0, r0, r3
    703a:	4152      	adcs	r2, r2
    703c:	0883      	lsrs	r3, r0, #2
    703e:	428b      	cmp	r3, r1
    7040:	d301      	bcc.n	7046 <__divsi3+0xea>
    7042:	008b      	lsls	r3, r1, #2
    7044:	1ac0      	subs	r0, r0, r3
    7046:	4152      	adcs	r2, r2
    7048:	0843      	lsrs	r3, r0, #1
    704a:	428b      	cmp	r3, r1
    704c:	d301      	bcc.n	7052 <__divsi3+0xf6>
    704e:	004b      	lsls	r3, r1, #1
    7050:	1ac0      	subs	r0, r0, r3
    7052:	4152      	adcs	r2, r2
    7054:	1a41      	subs	r1, r0, r1
    7056:	d200      	bcs.n	705a <__divsi3+0xfe>
    7058:	4601      	mov	r1, r0
    705a:	4152      	adcs	r2, r2
    705c:	4610      	mov	r0, r2
    705e:	4770      	bx	lr
    7060:	e05d      	b.n	711e <__divsi3+0x1c2>
    7062:	0fca      	lsrs	r2, r1, #31
    7064:	d000      	beq.n	7068 <__divsi3+0x10c>
    7066:	4249      	negs	r1, r1
    7068:	1003      	asrs	r3, r0, #32
    706a:	d300      	bcc.n	706e <__divsi3+0x112>
    706c:	4240      	negs	r0, r0
    706e:	4053      	eors	r3, r2
    7070:	2200      	movs	r2, #0
    7072:	469c      	mov	ip, r3
    7074:	0903      	lsrs	r3, r0, #4
    7076:	428b      	cmp	r3, r1
    7078:	d32d      	bcc.n	70d6 <__divsi3+0x17a>
    707a:	0a03      	lsrs	r3, r0, #8
    707c:	428b      	cmp	r3, r1
    707e:	d312      	bcc.n	70a6 <__divsi3+0x14a>
    7080:	22fc      	movs	r2, #252	; 0xfc
    7082:	0189      	lsls	r1, r1, #6
    7084:	ba12      	rev	r2, r2
    7086:	0a03      	lsrs	r3, r0, #8
    7088:	428b      	cmp	r3, r1
    708a:	d30c      	bcc.n	70a6 <__divsi3+0x14a>
    708c:	0189      	lsls	r1, r1, #6
    708e:	1192      	asrs	r2, r2, #6
    7090:	428b      	cmp	r3, r1
    7092:	d308      	bcc.n	70a6 <__divsi3+0x14a>
    7094:	0189      	lsls	r1, r1, #6
    7096:	1192      	asrs	r2, r2, #6
    7098:	428b      	cmp	r3, r1
    709a:	d304      	bcc.n	70a6 <__divsi3+0x14a>
    709c:	0189      	lsls	r1, r1, #6
    709e:	d03a      	beq.n	7116 <__divsi3+0x1ba>
    70a0:	1192      	asrs	r2, r2, #6
    70a2:	e000      	b.n	70a6 <__divsi3+0x14a>
    70a4:	0989      	lsrs	r1, r1, #6
    70a6:	09c3      	lsrs	r3, r0, #7
    70a8:	428b      	cmp	r3, r1
    70aa:	d301      	bcc.n	70b0 <__divsi3+0x154>
    70ac:	01cb      	lsls	r3, r1, #7
    70ae:	1ac0      	subs	r0, r0, r3
    70b0:	4152      	adcs	r2, r2
    70b2:	0983      	lsrs	r3, r0, #6
    70b4:	428b      	cmp	r3, r1
    70b6:	d301      	bcc.n	70bc <__divsi3+0x160>
    70b8:	018b      	lsls	r3, r1, #6
    70ba:	1ac0      	subs	r0, r0, r3
    70bc:	4152      	adcs	r2, r2
    70be:	0943      	lsrs	r3, r0, #5
    70c0:	428b      	cmp	r3, r1
    70c2:	d301      	bcc.n	70c8 <__divsi3+0x16c>
    70c4:	014b      	lsls	r3, r1, #5
    70c6:	1ac0      	subs	r0, r0, r3
    70c8:	4152      	adcs	r2, r2
    70ca:	0903      	lsrs	r3, r0, #4
    70cc:	428b      	cmp	r3, r1
    70ce:	d301      	bcc.n	70d4 <__divsi3+0x178>
    70d0:	010b      	lsls	r3, r1, #4
    70d2:	1ac0      	subs	r0, r0, r3
    70d4:	4152      	adcs	r2, r2
    70d6:	08c3      	lsrs	r3, r0, #3
    70d8:	428b      	cmp	r3, r1
    70da:	d301      	bcc.n	70e0 <__divsi3+0x184>
    70dc:	00cb      	lsls	r3, r1, #3
    70de:	1ac0      	subs	r0, r0, r3
    70e0:	4152      	adcs	r2, r2
    70e2:	0883      	lsrs	r3, r0, #2
    70e4:	428b      	cmp	r3, r1
    70e6:	d301      	bcc.n	70ec <__divsi3+0x190>
    70e8:	008b      	lsls	r3, r1, #2
    70ea:	1ac0      	subs	r0, r0, r3
    70ec:	4152      	adcs	r2, r2
    70ee:	d2d9      	bcs.n	70a4 <__divsi3+0x148>
    70f0:	0843      	lsrs	r3, r0, #1
    70f2:	428b      	cmp	r3, r1
    70f4:	d301      	bcc.n	70fa <__divsi3+0x19e>
    70f6:	004b      	lsls	r3, r1, #1
    70f8:	1ac0      	subs	r0, r0, r3
    70fa:	4152      	adcs	r2, r2
    70fc:	1a41      	subs	r1, r0, r1
    70fe:	d200      	bcs.n	7102 <__divsi3+0x1a6>
    7100:	4601      	mov	r1, r0
    7102:	4663      	mov	r3, ip
    7104:	4152      	adcs	r2, r2
    7106:	105b      	asrs	r3, r3, #1
    7108:	4610      	mov	r0, r2
    710a:	d301      	bcc.n	7110 <__divsi3+0x1b4>
    710c:	4240      	negs	r0, r0
    710e:	2b00      	cmp	r3, #0
    7110:	d500      	bpl.n	7114 <__divsi3+0x1b8>
    7112:	4249      	negs	r1, r1
    7114:	4770      	bx	lr
    7116:	4663      	mov	r3, ip
    7118:	105b      	asrs	r3, r3, #1
    711a:	d300      	bcc.n	711e <__divsi3+0x1c2>
    711c:	4240      	negs	r0, r0
    711e:	b501      	push	{r0, lr}
    7120:	2000      	movs	r0, #0
    7122:	f000 f805 	bl	7130 <__aeabi_idiv0>
    7126:	bd02      	pop	{r1, pc}

00007128 <__aeabi_idivmod>:
    7128:	2900      	cmp	r1, #0
    712a:	d0f8      	beq.n	711e <__divsi3+0x1c2>
    712c:	e716      	b.n	6f5c <__divsi3>
    712e:	4770      	bx	lr

00007130 <__aeabi_idiv0>:
    7130:	4770      	bx	lr
    7132:	46c0      	nop			; (mov r8, r8)

00007134 <__aeabi_cdrcmple>:
    7134:	4684      	mov	ip, r0
    7136:	1c10      	adds	r0, r2, #0
    7138:	4662      	mov	r2, ip
    713a:	468c      	mov	ip, r1
    713c:	1c19      	adds	r1, r3, #0
    713e:	4663      	mov	r3, ip
    7140:	e000      	b.n	7144 <__aeabi_cdcmpeq>
    7142:	46c0      	nop			; (mov r8, r8)

00007144 <__aeabi_cdcmpeq>:
    7144:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    7146:	f000 ff15 	bl	7f74 <__ledf2>
    714a:	2800      	cmp	r0, #0
    714c:	d401      	bmi.n	7152 <__aeabi_cdcmpeq+0xe>
    714e:	2100      	movs	r1, #0
    7150:	42c8      	cmn	r0, r1
    7152:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

00007154 <__aeabi_dcmpeq>:
    7154:	b510      	push	{r4, lr}
    7156:	f000 fe6f 	bl	7e38 <__eqdf2>
    715a:	4240      	negs	r0, r0
    715c:	3001      	adds	r0, #1
    715e:	bd10      	pop	{r4, pc}

00007160 <__aeabi_dcmplt>:
    7160:	b510      	push	{r4, lr}
    7162:	f000 ff07 	bl	7f74 <__ledf2>
    7166:	2800      	cmp	r0, #0
    7168:	db01      	blt.n	716e <__aeabi_dcmplt+0xe>
    716a:	2000      	movs	r0, #0
    716c:	bd10      	pop	{r4, pc}
    716e:	2001      	movs	r0, #1
    7170:	bd10      	pop	{r4, pc}
    7172:	46c0      	nop			; (mov r8, r8)

00007174 <__aeabi_dcmple>:
    7174:	b510      	push	{r4, lr}
    7176:	f000 fefd 	bl	7f74 <__ledf2>
    717a:	2800      	cmp	r0, #0
    717c:	dd01      	ble.n	7182 <__aeabi_dcmple+0xe>
    717e:	2000      	movs	r0, #0
    7180:	bd10      	pop	{r4, pc}
    7182:	2001      	movs	r0, #1
    7184:	bd10      	pop	{r4, pc}
    7186:	46c0      	nop			; (mov r8, r8)

00007188 <__aeabi_dcmpgt>:
    7188:	b510      	push	{r4, lr}
    718a:	f000 fe8f 	bl	7eac <__gedf2>
    718e:	2800      	cmp	r0, #0
    7190:	dc01      	bgt.n	7196 <__aeabi_dcmpgt+0xe>
    7192:	2000      	movs	r0, #0
    7194:	bd10      	pop	{r4, pc}
    7196:	2001      	movs	r0, #1
    7198:	bd10      	pop	{r4, pc}
    719a:	46c0      	nop			; (mov r8, r8)

0000719c <__aeabi_dcmpge>:
    719c:	b510      	push	{r4, lr}
    719e:	f000 fe85 	bl	7eac <__gedf2>
    71a2:	2800      	cmp	r0, #0
    71a4:	da01      	bge.n	71aa <__aeabi_dcmpge+0xe>
    71a6:	2000      	movs	r0, #0
    71a8:	bd10      	pop	{r4, pc}
    71aa:	2001      	movs	r0, #1
    71ac:	bd10      	pop	{r4, pc}
    71ae:	46c0      	nop			; (mov r8, r8)

000071b0 <__aeabi_dadd>:
    71b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    71b2:	4645      	mov	r5, r8
    71b4:	46de      	mov	lr, fp
    71b6:	4657      	mov	r7, sl
    71b8:	464e      	mov	r6, r9
    71ba:	030c      	lsls	r4, r1, #12
    71bc:	b5e0      	push	{r5, r6, r7, lr}
    71be:	004e      	lsls	r6, r1, #1
    71c0:	0fc9      	lsrs	r1, r1, #31
    71c2:	4688      	mov	r8, r1
    71c4:	000d      	movs	r5, r1
    71c6:	0a61      	lsrs	r1, r4, #9
    71c8:	0f44      	lsrs	r4, r0, #29
    71ca:	430c      	orrs	r4, r1
    71cc:	00c7      	lsls	r7, r0, #3
    71ce:	0319      	lsls	r1, r3, #12
    71d0:	0058      	lsls	r0, r3, #1
    71d2:	0fdb      	lsrs	r3, r3, #31
    71d4:	469b      	mov	fp, r3
    71d6:	0a4b      	lsrs	r3, r1, #9
    71d8:	0f51      	lsrs	r1, r2, #29
    71da:	430b      	orrs	r3, r1
    71dc:	0d76      	lsrs	r6, r6, #21
    71de:	0d40      	lsrs	r0, r0, #21
    71e0:	0019      	movs	r1, r3
    71e2:	00d2      	lsls	r2, r2, #3
    71e4:	45d8      	cmp	r8, fp
    71e6:	d100      	bne.n	71ea <__aeabi_dadd+0x3a>
    71e8:	e0ae      	b.n	7348 <__aeabi_dadd+0x198>
    71ea:	1a35      	subs	r5, r6, r0
    71ec:	2d00      	cmp	r5, #0
    71ee:	dc00      	bgt.n	71f2 <__aeabi_dadd+0x42>
    71f0:	e0f6      	b.n	73e0 <__aeabi_dadd+0x230>
    71f2:	2800      	cmp	r0, #0
    71f4:	d10f      	bne.n	7216 <__aeabi_dadd+0x66>
    71f6:	4313      	orrs	r3, r2
    71f8:	d100      	bne.n	71fc <__aeabi_dadd+0x4c>
    71fa:	e0db      	b.n	73b4 <__aeabi_dadd+0x204>
    71fc:	1e6b      	subs	r3, r5, #1
    71fe:	2b00      	cmp	r3, #0
    7200:	d000      	beq.n	7204 <__aeabi_dadd+0x54>
    7202:	e137      	b.n	7474 <__aeabi_dadd+0x2c4>
    7204:	1aba      	subs	r2, r7, r2
    7206:	4297      	cmp	r7, r2
    7208:	41bf      	sbcs	r7, r7
    720a:	1a64      	subs	r4, r4, r1
    720c:	427f      	negs	r7, r7
    720e:	1be4      	subs	r4, r4, r7
    7210:	2601      	movs	r6, #1
    7212:	0017      	movs	r7, r2
    7214:	e024      	b.n	7260 <__aeabi_dadd+0xb0>
    7216:	4bc6      	ldr	r3, [pc, #792]	; (7530 <__aeabi_dadd+0x380>)
    7218:	429e      	cmp	r6, r3
    721a:	d04d      	beq.n	72b8 <__aeabi_dadd+0x108>
    721c:	2380      	movs	r3, #128	; 0x80
    721e:	041b      	lsls	r3, r3, #16
    7220:	4319      	orrs	r1, r3
    7222:	2d38      	cmp	r5, #56	; 0x38
    7224:	dd00      	ble.n	7228 <__aeabi_dadd+0x78>
    7226:	e107      	b.n	7438 <__aeabi_dadd+0x288>
    7228:	2d1f      	cmp	r5, #31
    722a:	dd00      	ble.n	722e <__aeabi_dadd+0x7e>
    722c:	e138      	b.n	74a0 <__aeabi_dadd+0x2f0>
    722e:	2020      	movs	r0, #32
    7230:	1b43      	subs	r3, r0, r5
    7232:	469a      	mov	sl, r3
    7234:	000b      	movs	r3, r1
    7236:	4650      	mov	r0, sl
    7238:	4083      	lsls	r3, r0
    723a:	4699      	mov	r9, r3
    723c:	0013      	movs	r3, r2
    723e:	4648      	mov	r0, r9
    7240:	40eb      	lsrs	r3, r5
    7242:	4318      	orrs	r0, r3
    7244:	0003      	movs	r3, r0
    7246:	4650      	mov	r0, sl
    7248:	4082      	lsls	r2, r0
    724a:	1e50      	subs	r0, r2, #1
    724c:	4182      	sbcs	r2, r0
    724e:	40e9      	lsrs	r1, r5
    7250:	431a      	orrs	r2, r3
    7252:	1aba      	subs	r2, r7, r2
    7254:	1a61      	subs	r1, r4, r1
    7256:	4297      	cmp	r7, r2
    7258:	41a4      	sbcs	r4, r4
    725a:	0017      	movs	r7, r2
    725c:	4264      	negs	r4, r4
    725e:	1b0c      	subs	r4, r1, r4
    7260:	0223      	lsls	r3, r4, #8
    7262:	d562      	bpl.n	732a <__aeabi_dadd+0x17a>
    7264:	0264      	lsls	r4, r4, #9
    7266:	0a65      	lsrs	r5, r4, #9
    7268:	2d00      	cmp	r5, #0
    726a:	d100      	bne.n	726e <__aeabi_dadd+0xbe>
    726c:	e0df      	b.n	742e <__aeabi_dadd+0x27e>
    726e:	0028      	movs	r0, r5
    7270:	f001 fd04 	bl	8c7c <__clzsi2>
    7274:	0003      	movs	r3, r0
    7276:	3b08      	subs	r3, #8
    7278:	2b1f      	cmp	r3, #31
    727a:	dd00      	ble.n	727e <__aeabi_dadd+0xce>
    727c:	e0d2      	b.n	7424 <__aeabi_dadd+0x274>
    727e:	2220      	movs	r2, #32
    7280:	003c      	movs	r4, r7
    7282:	1ad2      	subs	r2, r2, r3
    7284:	409d      	lsls	r5, r3
    7286:	40d4      	lsrs	r4, r2
    7288:	409f      	lsls	r7, r3
    728a:	4325      	orrs	r5, r4
    728c:	429e      	cmp	r6, r3
    728e:	dd00      	ble.n	7292 <__aeabi_dadd+0xe2>
    7290:	e0c4      	b.n	741c <__aeabi_dadd+0x26c>
    7292:	1b9e      	subs	r6, r3, r6
    7294:	1c73      	adds	r3, r6, #1
    7296:	2b1f      	cmp	r3, #31
    7298:	dd00      	ble.n	729c <__aeabi_dadd+0xec>
    729a:	e0f1      	b.n	7480 <__aeabi_dadd+0x2d0>
    729c:	2220      	movs	r2, #32
    729e:	0038      	movs	r0, r7
    72a0:	0029      	movs	r1, r5
    72a2:	1ad2      	subs	r2, r2, r3
    72a4:	40d8      	lsrs	r0, r3
    72a6:	4091      	lsls	r1, r2
    72a8:	4097      	lsls	r7, r2
    72aa:	002c      	movs	r4, r5
    72ac:	4301      	orrs	r1, r0
    72ae:	1e78      	subs	r0, r7, #1
    72b0:	4187      	sbcs	r7, r0
    72b2:	40dc      	lsrs	r4, r3
    72b4:	2600      	movs	r6, #0
    72b6:	430f      	orrs	r7, r1
    72b8:	077b      	lsls	r3, r7, #29
    72ba:	d009      	beq.n	72d0 <__aeabi_dadd+0x120>
    72bc:	230f      	movs	r3, #15
    72be:	403b      	ands	r3, r7
    72c0:	2b04      	cmp	r3, #4
    72c2:	d005      	beq.n	72d0 <__aeabi_dadd+0x120>
    72c4:	1d3b      	adds	r3, r7, #4
    72c6:	42bb      	cmp	r3, r7
    72c8:	41bf      	sbcs	r7, r7
    72ca:	427f      	negs	r7, r7
    72cc:	19e4      	adds	r4, r4, r7
    72ce:	001f      	movs	r7, r3
    72d0:	0223      	lsls	r3, r4, #8
    72d2:	d52c      	bpl.n	732e <__aeabi_dadd+0x17e>
    72d4:	4b96      	ldr	r3, [pc, #600]	; (7530 <__aeabi_dadd+0x380>)
    72d6:	3601      	adds	r6, #1
    72d8:	429e      	cmp	r6, r3
    72da:	d100      	bne.n	72de <__aeabi_dadd+0x12e>
    72dc:	e09a      	b.n	7414 <__aeabi_dadd+0x264>
    72de:	4645      	mov	r5, r8
    72e0:	4b94      	ldr	r3, [pc, #592]	; (7534 <__aeabi_dadd+0x384>)
    72e2:	08ff      	lsrs	r7, r7, #3
    72e4:	401c      	ands	r4, r3
    72e6:	0760      	lsls	r0, r4, #29
    72e8:	0576      	lsls	r6, r6, #21
    72ea:	0264      	lsls	r4, r4, #9
    72ec:	4307      	orrs	r7, r0
    72ee:	0b24      	lsrs	r4, r4, #12
    72f0:	0d76      	lsrs	r6, r6, #21
    72f2:	2100      	movs	r1, #0
    72f4:	0324      	lsls	r4, r4, #12
    72f6:	0b23      	lsrs	r3, r4, #12
    72f8:	0d0c      	lsrs	r4, r1, #20
    72fa:	4a8f      	ldr	r2, [pc, #572]	; (7538 <__aeabi_dadd+0x388>)
    72fc:	0524      	lsls	r4, r4, #20
    72fe:	431c      	orrs	r4, r3
    7300:	4014      	ands	r4, r2
    7302:	0533      	lsls	r3, r6, #20
    7304:	4323      	orrs	r3, r4
    7306:	005b      	lsls	r3, r3, #1
    7308:	07ed      	lsls	r5, r5, #31
    730a:	085b      	lsrs	r3, r3, #1
    730c:	432b      	orrs	r3, r5
    730e:	0038      	movs	r0, r7
    7310:	0019      	movs	r1, r3
    7312:	bc3c      	pop	{r2, r3, r4, r5}
    7314:	4690      	mov	r8, r2
    7316:	4699      	mov	r9, r3
    7318:	46a2      	mov	sl, r4
    731a:	46ab      	mov	fp, r5
    731c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    731e:	4664      	mov	r4, ip
    7320:	4304      	orrs	r4, r0
    7322:	d100      	bne.n	7326 <__aeabi_dadd+0x176>
    7324:	e211      	b.n	774a <__aeabi_dadd+0x59a>
    7326:	0004      	movs	r4, r0
    7328:	4667      	mov	r7, ip
    732a:	077b      	lsls	r3, r7, #29
    732c:	d1c6      	bne.n	72bc <__aeabi_dadd+0x10c>
    732e:	4645      	mov	r5, r8
    7330:	0760      	lsls	r0, r4, #29
    7332:	08ff      	lsrs	r7, r7, #3
    7334:	4307      	orrs	r7, r0
    7336:	08e4      	lsrs	r4, r4, #3
    7338:	4b7d      	ldr	r3, [pc, #500]	; (7530 <__aeabi_dadd+0x380>)
    733a:	429e      	cmp	r6, r3
    733c:	d030      	beq.n	73a0 <__aeabi_dadd+0x1f0>
    733e:	0324      	lsls	r4, r4, #12
    7340:	0576      	lsls	r6, r6, #21
    7342:	0b24      	lsrs	r4, r4, #12
    7344:	0d76      	lsrs	r6, r6, #21
    7346:	e7d4      	b.n	72f2 <__aeabi_dadd+0x142>
    7348:	1a33      	subs	r3, r6, r0
    734a:	469a      	mov	sl, r3
    734c:	2b00      	cmp	r3, #0
    734e:	dd78      	ble.n	7442 <__aeabi_dadd+0x292>
    7350:	2800      	cmp	r0, #0
    7352:	d031      	beq.n	73b8 <__aeabi_dadd+0x208>
    7354:	4876      	ldr	r0, [pc, #472]	; (7530 <__aeabi_dadd+0x380>)
    7356:	4286      	cmp	r6, r0
    7358:	d0ae      	beq.n	72b8 <__aeabi_dadd+0x108>
    735a:	2080      	movs	r0, #128	; 0x80
    735c:	0400      	lsls	r0, r0, #16
    735e:	4301      	orrs	r1, r0
    7360:	4653      	mov	r3, sl
    7362:	2b38      	cmp	r3, #56	; 0x38
    7364:	dc00      	bgt.n	7368 <__aeabi_dadd+0x1b8>
    7366:	e0e9      	b.n	753c <__aeabi_dadd+0x38c>
    7368:	430a      	orrs	r2, r1
    736a:	1e51      	subs	r1, r2, #1
    736c:	418a      	sbcs	r2, r1
    736e:	2100      	movs	r1, #0
    7370:	19d2      	adds	r2, r2, r7
    7372:	42ba      	cmp	r2, r7
    7374:	41bf      	sbcs	r7, r7
    7376:	1909      	adds	r1, r1, r4
    7378:	427c      	negs	r4, r7
    737a:	0017      	movs	r7, r2
    737c:	190c      	adds	r4, r1, r4
    737e:	0223      	lsls	r3, r4, #8
    7380:	d5d3      	bpl.n	732a <__aeabi_dadd+0x17a>
    7382:	4b6b      	ldr	r3, [pc, #428]	; (7530 <__aeabi_dadd+0x380>)
    7384:	3601      	adds	r6, #1
    7386:	429e      	cmp	r6, r3
    7388:	d100      	bne.n	738c <__aeabi_dadd+0x1dc>
    738a:	e13a      	b.n	7602 <__aeabi_dadd+0x452>
    738c:	2001      	movs	r0, #1
    738e:	4b69      	ldr	r3, [pc, #420]	; (7534 <__aeabi_dadd+0x384>)
    7390:	401c      	ands	r4, r3
    7392:	087b      	lsrs	r3, r7, #1
    7394:	4007      	ands	r7, r0
    7396:	431f      	orrs	r7, r3
    7398:	07e0      	lsls	r0, r4, #31
    739a:	4307      	orrs	r7, r0
    739c:	0864      	lsrs	r4, r4, #1
    739e:	e78b      	b.n	72b8 <__aeabi_dadd+0x108>
    73a0:	0023      	movs	r3, r4
    73a2:	433b      	orrs	r3, r7
    73a4:	d100      	bne.n	73a8 <__aeabi_dadd+0x1f8>
    73a6:	e1cb      	b.n	7740 <__aeabi_dadd+0x590>
    73a8:	2280      	movs	r2, #128	; 0x80
    73aa:	0312      	lsls	r2, r2, #12
    73ac:	4314      	orrs	r4, r2
    73ae:	0324      	lsls	r4, r4, #12
    73b0:	0b24      	lsrs	r4, r4, #12
    73b2:	e79e      	b.n	72f2 <__aeabi_dadd+0x142>
    73b4:	002e      	movs	r6, r5
    73b6:	e77f      	b.n	72b8 <__aeabi_dadd+0x108>
    73b8:	0008      	movs	r0, r1
    73ba:	4310      	orrs	r0, r2
    73bc:	d100      	bne.n	73c0 <__aeabi_dadd+0x210>
    73be:	e0b4      	b.n	752a <__aeabi_dadd+0x37a>
    73c0:	1e58      	subs	r0, r3, #1
    73c2:	2800      	cmp	r0, #0
    73c4:	d000      	beq.n	73c8 <__aeabi_dadd+0x218>
    73c6:	e0de      	b.n	7586 <__aeabi_dadd+0x3d6>
    73c8:	18ba      	adds	r2, r7, r2
    73ca:	42ba      	cmp	r2, r7
    73cc:	419b      	sbcs	r3, r3
    73ce:	1864      	adds	r4, r4, r1
    73d0:	425b      	negs	r3, r3
    73d2:	18e4      	adds	r4, r4, r3
    73d4:	0017      	movs	r7, r2
    73d6:	2601      	movs	r6, #1
    73d8:	0223      	lsls	r3, r4, #8
    73da:	d5a6      	bpl.n	732a <__aeabi_dadd+0x17a>
    73dc:	2602      	movs	r6, #2
    73de:	e7d5      	b.n	738c <__aeabi_dadd+0x1dc>
    73e0:	2d00      	cmp	r5, #0
    73e2:	d16e      	bne.n	74c2 <__aeabi_dadd+0x312>
    73e4:	1c70      	adds	r0, r6, #1
    73e6:	0540      	lsls	r0, r0, #21
    73e8:	0d40      	lsrs	r0, r0, #21
    73ea:	2801      	cmp	r0, #1
    73ec:	dc00      	bgt.n	73f0 <__aeabi_dadd+0x240>
    73ee:	e0f9      	b.n	75e4 <__aeabi_dadd+0x434>
    73f0:	1ab8      	subs	r0, r7, r2
    73f2:	4684      	mov	ip, r0
    73f4:	4287      	cmp	r7, r0
    73f6:	4180      	sbcs	r0, r0
    73f8:	1ae5      	subs	r5, r4, r3
    73fa:	4240      	negs	r0, r0
    73fc:	1a2d      	subs	r5, r5, r0
    73fe:	0228      	lsls	r0, r5, #8
    7400:	d400      	bmi.n	7404 <__aeabi_dadd+0x254>
    7402:	e089      	b.n	7518 <__aeabi_dadd+0x368>
    7404:	1bd7      	subs	r7, r2, r7
    7406:	42ba      	cmp	r2, r7
    7408:	4192      	sbcs	r2, r2
    740a:	1b1c      	subs	r4, r3, r4
    740c:	4252      	negs	r2, r2
    740e:	1aa5      	subs	r5, r4, r2
    7410:	46d8      	mov	r8, fp
    7412:	e729      	b.n	7268 <__aeabi_dadd+0xb8>
    7414:	4645      	mov	r5, r8
    7416:	2400      	movs	r4, #0
    7418:	2700      	movs	r7, #0
    741a:	e76a      	b.n	72f2 <__aeabi_dadd+0x142>
    741c:	4c45      	ldr	r4, [pc, #276]	; (7534 <__aeabi_dadd+0x384>)
    741e:	1af6      	subs	r6, r6, r3
    7420:	402c      	ands	r4, r5
    7422:	e749      	b.n	72b8 <__aeabi_dadd+0x108>
    7424:	003d      	movs	r5, r7
    7426:	3828      	subs	r0, #40	; 0x28
    7428:	4085      	lsls	r5, r0
    742a:	2700      	movs	r7, #0
    742c:	e72e      	b.n	728c <__aeabi_dadd+0xdc>
    742e:	0038      	movs	r0, r7
    7430:	f001 fc24 	bl	8c7c <__clzsi2>
    7434:	3020      	adds	r0, #32
    7436:	e71d      	b.n	7274 <__aeabi_dadd+0xc4>
    7438:	430a      	orrs	r2, r1
    743a:	1e51      	subs	r1, r2, #1
    743c:	418a      	sbcs	r2, r1
    743e:	2100      	movs	r1, #0
    7440:	e707      	b.n	7252 <__aeabi_dadd+0xa2>
    7442:	2b00      	cmp	r3, #0
    7444:	d000      	beq.n	7448 <__aeabi_dadd+0x298>
    7446:	e0f3      	b.n	7630 <__aeabi_dadd+0x480>
    7448:	1c70      	adds	r0, r6, #1
    744a:	0543      	lsls	r3, r0, #21
    744c:	0d5b      	lsrs	r3, r3, #21
    744e:	2b01      	cmp	r3, #1
    7450:	dc00      	bgt.n	7454 <__aeabi_dadd+0x2a4>
    7452:	e0ad      	b.n	75b0 <__aeabi_dadd+0x400>
    7454:	4b36      	ldr	r3, [pc, #216]	; (7530 <__aeabi_dadd+0x380>)
    7456:	4298      	cmp	r0, r3
    7458:	d100      	bne.n	745c <__aeabi_dadd+0x2ac>
    745a:	e0d1      	b.n	7600 <__aeabi_dadd+0x450>
    745c:	18ba      	adds	r2, r7, r2
    745e:	42ba      	cmp	r2, r7
    7460:	41bf      	sbcs	r7, r7
    7462:	1864      	adds	r4, r4, r1
    7464:	427f      	negs	r7, r7
    7466:	19e4      	adds	r4, r4, r7
    7468:	07e7      	lsls	r7, r4, #31
    746a:	0852      	lsrs	r2, r2, #1
    746c:	4317      	orrs	r7, r2
    746e:	0864      	lsrs	r4, r4, #1
    7470:	0006      	movs	r6, r0
    7472:	e721      	b.n	72b8 <__aeabi_dadd+0x108>
    7474:	482e      	ldr	r0, [pc, #184]	; (7530 <__aeabi_dadd+0x380>)
    7476:	4285      	cmp	r5, r0
    7478:	d100      	bne.n	747c <__aeabi_dadd+0x2cc>
    747a:	e093      	b.n	75a4 <__aeabi_dadd+0x3f4>
    747c:	001d      	movs	r5, r3
    747e:	e6d0      	b.n	7222 <__aeabi_dadd+0x72>
    7480:	0029      	movs	r1, r5
    7482:	3e1f      	subs	r6, #31
    7484:	40f1      	lsrs	r1, r6
    7486:	2b20      	cmp	r3, #32
    7488:	d100      	bne.n	748c <__aeabi_dadd+0x2dc>
    748a:	e08d      	b.n	75a8 <__aeabi_dadd+0x3f8>
    748c:	2240      	movs	r2, #64	; 0x40
    748e:	1ad3      	subs	r3, r2, r3
    7490:	409d      	lsls	r5, r3
    7492:	432f      	orrs	r7, r5
    7494:	1e7d      	subs	r5, r7, #1
    7496:	41af      	sbcs	r7, r5
    7498:	2400      	movs	r4, #0
    749a:	430f      	orrs	r7, r1
    749c:	2600      	movs	r6, #0
    749e:	e744      	b.n	732a <__aeabi_dadd+0x17a>
    74a0:	002b      	movs	r3, r5
    74a2:	0008      	movs	r0, r1
    74a4:	3b20      	subs	r3, #32
    74a6:	40d8      	lsrs	r0, r3
    74a8:	0003      	movs	r3, r0
    74aa:	2d20      	cmp	r5, #32
    74ac:	d100      	bne.n	74b0 <__aeabi_dadd+0x300>
    74ae:	e07d      	b.n	75ac <__aeabi_dadd+0x3fc>
    74b0:	2040      	movs	r0, #64	; 0x40
    74b2:	1b45      	subs	r5, r0, r5
    74b4:	40a9      	lsls	r1, r5
    74b6:	430a      	orrs	r2, r1
    74b8:	1e51      	subs	r1, r2, #1
    74ba:	418a      	sbcs	r2, r1
    74bc:	2100      	movs	r1, #0
    74be:	431a      	orrs	r2, r3
    74c0:	e6c7      	b.n	7252 <__aeabi_dadd+0xa2>
    74c2:	2e00      	cmp	r6, #0
    74c4:	d050      	beq.n	7568 <__aeabi_dadd+0x3b8>
    74c6:	4e1a      	ldr	r6, [pc, #104]	; (7530 <__aeabi_dadd+0x380>)
    74c8:	42b0      	cmp	r0, r6
    74ca:	d057      	beq.n	757c <__aeabi_dadd+0x3cc>
    74cc:	2680      	movs	r6, #128	; 0x80
    74ce:	426b      	negs	r3, r5
    74d0:	4699      	mov	r9, r3
    74d2:	0436      	lsls	r6, r6, #16
    74d4:	4334      	orrs	r4, r6
    74d6:	464b      	mov	r3, r9
    74d8:	2b38      	cmp	r3, #56	; 0x38
    74da:	dd00      	ble.n	74de <__aeabi_dadd+0x32e>
    74dc:	e0d6      	b.n	768c <__aeabi_dadd+0x4dc>
    74de:	2b1f      	cmp	r3, #31
    74e0:	dd00      	ble.n	74e4 <__aeabi_dadd+0x334>
    74e2:	e135      	b.n	7750 <__aeabi_dadd+0x5a0>
    74e4:	2620      	movs	r6, #32
    74e6:	1af5      	subs	r5, r6, r3
    74e8:	0026      	movs	r6, r4
    74ea:	40ae      	lsls	r6, r5
    74ec:	46b2      	mov	sl, r6
    74ee:	003e      	movs	r6, r7
    74f0:	40de      	lsrs	r6, r3
    74f2:	46ac      	mov	ip, r5
    74f4:	0035      	movs	r5, r6
    74f6:	4656      	mov	r6, sl
    74f8:	432e      	orrs	r6, r5
    74fa:	4665      	mov	r5, ip
    74fc:	40af      	lsls	r7, r5
    74fe:	1e7d      	subs	r5, r7, #1
    7500:	41af      	sbcs	r7, r5
    7502:	40dc      	lsrs	r4, r3
    7504:	4337      	orrs	r7, r6
    7506:	1bd7      	subs	r7, r2, r7
    7508:	42ba      	cmp	r2, r7
    750a:	4192      	sbcs	r2, r2
    750c:	1b0c      	subs	r4, r1, r4
    750e:	4252      	negs	r2, r2
    7510:	1aa4      	subs	r4, r4, r2
    7512:	0006      	movs	r6, r0
    7514:	46d8      	mov	r8, fp
    7516:	e6a3      	b.n	7260 <__aeabi_dadd+0xb0>
    7518:	4664      	mov	r4, ip
    751a:	4667      	mov	r7, ip
    751c:	432c      	orrs	r4, r5
    751e:	d000      	beq.n	7522 <__aeabi_dadd+0x372>
    7520:	e6a2      	b.n	7268 <__aeabi_dadd+0xb8>
    7522:	2500      	movs	r5, #0
    7524:	2600      	movs	r6, #0
    7526:	2700      	movs	r7, #0
    7528:	e706      	b.n	7338 <__aeabi_dadd+0x188>
    752a:	001e      	movs	r6, r3
    752c:	e6c4      	b.n	72b8 <__aeabi_dadd+0x108>
    752e:	46c0      	nop			; (mov r8, r8)
    7530:	000007ff 	.word	0x000007ff
    7534:	ff7fffff 	.word	0xff7fffff
    7538:	800fffff 	.word	0x800fffff
    753c:	2b1f      	cmp	r3, #31
    753e:	dc63      	bgt.n	7608 <__aeabi_dadd+0x458>
    7540:	2020      	movs	r0, #32
    7542:	1ac3      	subs	r3, r0, r3
    7544:	0008      	movs	r0, r1
    7546:	4098      	lsls	r0, r3
    7548:	469c      	mov	ip, r3
    754a:	4683      	mov	fp, r0
    754c:	4653      	mov	r3, sl
    754e:	0010      	movs	r0, r2
    7550:	40d8      	lsrs	r0, r3
    7552:	0003      	movs	r3, r0
    7554:	4658      	mov	r0, fp
    7556:	4318      	orrs	r0, r3
    7558:	4663      	mov	r3, ip
    755a:	409a      	lsls	r2, r3
    755c:	1e53      	subs	r3, r2, #1
    755e:	419a      	sbcs	r2, r3
    7560:	4653      	mov	r3, sl
    7562:	4302      	orrs	r2, r0
    7564:	40d9      	lsrs	r1, r3
    7566:	e703      	b.n	7370 <__aeabi_dadd+0x1c0>
    7568:	0026      	movs	r6, r4
    756a:	433e      	orrs	r6, r7
    756c:	d006      	beq.n	757c <__aeabi_dadd+0x3cc>
    756e:	43eb      	mvns	r3, r5
    7570:	4699      	mov	r9, r3
    7572:	2b00      	cmp	r3, #0
    7574:	d0c7      	beq.n	7506 <__aeabi_dadd+0x356>
    7576:	4e94      	ldr	r6, [pc, #592]	; (77c8 <__aeabi_dadd+0x618>)
    7578:	42b0      	cmp	r0, r6
    757a:	d1ac      	bne.n	74d6 <__aeabi_dadd+0x326>
    757c:	000c      	movs	r4, r1
    757e:	0017      	movs	r7, r2
    7580:	0006      	movs	r6, r0
    7582:	46d8      	mov	r8, fp
    7584:	e698      	b.n	72b8 <__aeabi_dadd+0x108>
    7586:	4b90      	ldr	r3, [pc, #576]	; (77c8 <__aeabi_dadd+0x618>)
    7588:	459a      	cmp	sl, r3
    758a:	d00b      	beq.n	75a4 <__aeabi_dadd+0x3f4>
    758c:	4682      	mov	sl, r0
    758e:	e6e7      	b.n	7360 <__aeabi_dadd+0x1b0>
    7590:	2800      	cmp	r0, #0
    7592:	d000      	beq.n	7596 <__aeabi_dadd+0x3e6>
    7594:	e09e      	b.n	76d4 <__aeabi_dadd+0x524>
    7596:	0018      	movs	r0, r3
    7598:	4310      	orrs	r0, r2
    759a:	d100      	bne.n	759e <__aeabi_dadd+0x3ee>
    759c:	e0e9      	b.n	7772 <__aeabi_dadd+0x5c2>
    759e:	001c      	movs	r4, r3
    75a0:	0017      	movs	r7, r2
    75a2:	46d8      	mov	r8, fp
    75a4:	4e88      	ldr	r6, [pc, #544]	; (77c8 <__aeabi_dadd+0x618>)
    75a6:	e687      	b.n	72b8 <__aeabi_dadd+0x108>
    75a8:	2500      	movs	r5, #0
    75aa:	e772      	b.n	7492 <__aeabi_dadd+0x2e2>
    75ac:	2100      	movs	r1, #0
    75ae:	e782      	b.n	74b6 <__aeabi_dadd+0x306>
    75b0:	0023      	movs	r3, r4
    75b2:	433b      	orrs	r3, r7
    75b4:	2e00      	cmp	r6, #0
    75b6:	d000      	beq.n	75ba <__aeabi_dadd+0x40a>
    75b8:	e0ab      	b.n	7712 <__aeabi_dadd+0x562>
    75ba:	2b00      	cmp	r3, #0
    75bc:	d100      	bne.n	75c0 <__aeabi_dadd+0x410>
    75be:	e0e7      	b.n	7790 <__aeabi_dadd+0x5e0>
    75c0:	000b      	movs	r3, r1
    75c2:	4313      	orrs	r3, r2
    75c4:	d100      	bne.n	75c8 <__aeabi_dadd+0x418>
    75c6:	e677      	b.n	72b8 <__aeabi_dadd+0x108>
    75c8:	18ba      	adds	r2, r7, r2
    75ca:	42ba      	cmp	r2, r7
    75cc:	41bf      	sbcs	r7, r7
    75ce:	1864      	adds	r4, r4, r1
    75d0:	427f      	negs	r7, r7
    75d2:	19e4      	adds	r4, r4, r7
    75d4:	0223      	lsls	r3, r4, #8
    75d6:	d400      	bmi.n	75da <__aeabi_dadd+0x42a>
    75d8:	e0f2      	b.n	77c0 <__aeabi_dadd+0x610>
    75da:	4b7c      	ldr	r3, [pc, #496]	; (77cc <__aeabi_dadd+0x61c>)
    75dc:	0017      	movs	r7, r2
    75de:	401c      	ands	r4, r3
    75e0:	0006      	movs	r6, r0
    75e2:	e669      	b.n	72b8 <__aeabi_dadd+0x108>
    75e4:	0020      	movs	r0, r4
    75e6:	4338      	orrs	r0, r7
    75e8:	2e00      	cmp	r6, #0
    75ea:	d1d1      	bne.n	7590 <__aeabi_dadd+0x3e0>
    75ec:	2800      	cmp	r0, #0
    75ee:	d15b      	bne.n	76a8 <__aeabi_dadd+0x4f8>
    75f0:	001c      	movs	r4, r3
    75f2:	4314      	orrs	r4, r2
    75f4:	d100      	bne.n	75f8 <__aeabi_dadd+0x448>
    75f6:	e0a8      	b.n	774a <__aeabi_dadd+0x59a>
    75f8:	001c      	movs	r4, r3
    75fa:	0017      	movs	r7, r2
    75fc:	46d8      	mov	r8, fp
    75fe:	e65b      	b.n	72b8 <__aeabi_dadd+0x108>
    7600:	0006      	movs	r6, r0
    7602:	2400      	movs	r4, #0
    7604:	2700      	movs	r7, #0
    7606:	e697      	b.n	7338 <__aeabi_dadd+0x188>
    7608:	4650      	mov	r0, sl
    760a:	000b      	movs	r3, r1
    760c:	3820      	subs	r0, #32
    760e:	40c3      	lsrs	r3, r0
    7610:	4699      	mov	r9, r3
    7612:	4653      	mov	r3, sl
    7614:	2b20      	cmp	r3, #32
    7616:	d100      	bne.n	761a <__aeabi_dadd+0x46a>
    7618:	e095      	b.n	7746 <__aeabi_dadd+0x596>
    761a:	2340      	movs	r3, #64	; 0x40
    761c:	4650      	mov	r0, sl
    761e:	1a1b      	subs	r3, r3, r0
    7620:	4099      	lsls	r1, r3
    7622:	430a      	orrs	r2, r1
    7624:	1e51      	subs	r1, r2, #1
    7626:	418a      	sbcs	r2, r1
    7628:	464b      	mov	r3, r9
    762a:	2100      	movs	r1, #0
    762c:	431a      	orrs	r2, r3
    762e:	e69f      	b.n	7370 <__aeabi_dadd+0x1c0>
    7630:	2e00      	cmp	r6, #0
    7632:	d130      	bne.n	7696 <__aeabi_dadd+0x4e6>
    7634:	0026      	movs	r6, r4
    7636:	433e      	orrs	r6, r7
    7638:	d067      	beq.n	770a <__aeabi_dadd+0x55a>
    763a:	43db      	mvns	r3, r3
    763c:	469a      	mov	sl, r3
    763e:	2b00      	cmp	r3, #0
    7640:	d01c      	beq.n	767c <__aeabi_dadd+0x4cc>
    7642:	4e61      	ldr	r6, [pc, #388]	; (77c8 <__aeabi_dadd+0x618>)
    7644:	42b0      	cmp	r0, r6
    7646:	d060      	beq.n	770a <__aeabi_dadd+0x55a>
    7648:	4653      	mov	r3, sl
    764a:	2b38      	cmp	r3, #56	; 0x38
    764c:	dd00      	ble.n	7650 <__aeabi_dadd+0x4a0>
    764e:	e096      	b.n	777e <__aeabi_dadd+0x5ce>
    7650:	2b1f      	cmp	r3, #31
    7652:	dd00      	ble.n	7656 <__aeabi_dadd+0x4a6>
    7654:	e09f      	b.n	7796 <__aeabi_dadd+0x5e6>
    7656:	2620      	movs	r6, #32
    7658:	1af3      	subs	r3, r6, r3
    765a:	0026      	movs	r6, r4
    765c:	409e      	lsls	r6, r3
    765e:	469c      	mov	ip, r3
    7660:	46b3      	mov	fp, r6
    7662:	4653      	mov	r3, sl
    7664:	003e      	movs	r6, r7
    7666:	40de      	lsrs	r6, r3
    7668:	0033      	movs	r3, r6
    766a:	465e      	mov	r6, fp
    766c:	431e      	orrs	r6, r3
    766e:	4663      	mov	r3, ip
    7670:	409f      	lsls	r7, r3
    7672:	1e7b      	subs	r3, r7, #1
    7674:	419f      	sbcs	r7, r3
    7676:	4653      	mov	r3, sl
    7678:	40dc      	lsrs	r4, r3
    767a:	4337      	orrs	r7, r6
    767c:	18bf      	adds	r7, r7, r2
    767e:	4297      	cmp	r7, r2
    7680:	4192      	sbcs	r2, r2
    7682:	1864      	adds	r4, r4, r1
    7684:	4252      	negs	r2, r2
    7686:	18a4      	adds	r4, r4, r2
    7688:	0006      	movs	r6, r0
    768a:	e678      	b.n	737e <__aeabi_dadd+0x1ce>
    768c:	4327      	orrs	r7, r4
    768e:	1e7c      	subs	r4, r7, #1
    7690:	41a7      	sbcs	r7, r4
    7692:	2400      	movs	r4, #0
    7694:	e737      	b.n	7506 <__aeabi_dadd+0x356>
    7696:	4e4c      	ldr	r6, [pc, #304]	; (77c8 <__aeabi_dadd+0x618>)
    7698:	42b0      	cmp	r0, r6
    769a:	d036      	beq.n	770a <__aeabi_dadd+0x55a>
    769c:	2680      	movs	r6, #128	; 0x80
    769e:	425b      	negs	r3, r3
    76a0:	0436      	lsls	r6, r6, #16
    76a2:	469a      	mov	sl, r3
    76a4:	4334      	orrs	r4, r6
    76a6:	e7cf      	b.n	7648 <__aeabi_dadd+0x498>
    76a8:	0018      	movs	r0, r3
    76aa:	4310      	orrs	r0, r2
    76ac:	d100      	bne.n	76b0 <__aeabi_dadd+0x500>
    76ae:	e603      	b.n	72b8 <__aeabi_dadd+0x108>
    76b0:	1ab8      	subs	r0, r7, r2
    76b2:	4684      	mov	ip, r0
    76b4:	4567      	cmp	r7, ip
    76b6:	41ad      	sbcs	r5, r5
    76b8:	1ae0      	subs	r0, r4, r3
    76ba:	426d      	negs	r5, r5
    76bc:	1b40      	subs	r0, r0, r5
    76be:	0205      	lsls	r5, r0, #8
    76c0:	d400      	bmi.n	76c4 <__aeabi_dadd+0x514>
    76c2:	e62c      	b.n	731e <__aeabi_dadd+0x16e>
    76c4:	1bd7      	subs	r7, r2, r7
    76c6:	42ba      	cmp	r2, r7
    76c8:	4192      	sbcs	r2, r2
    76ca:	1b1c      	subs	r4, r3, r4
    76cc:	4252      	negs	r2, r2
    76ce:	1aa4      	subs	r4, r4, r2
    76d0:	46d8      	mov	r8, fp
    76d2:	e5f1      	b.n	72b8 <__aeabi_dadd+0x108>
    76d4:	0018      	movs	r0, r3
    76d6:	4310      	orrs	r0, r2
    76d8:	d100      	bne.n	76dc <__aeabi_dadd+0x52c>
    76da:	e763      	b.n	75a4 <__aeabi_dadd+0x3f4>
    76dc:	08f8      	lsrs	r0, r7, #3
    76de:	0767      	lsls	r7, r4, #29
    76e0:	4307      	orrs	r7, r0
    76e2:	2080      	movs	r0, #128	; 0x80
    76e4:	08e4      	lsrs	r4, r4, #3
    76e6:	0300      	lsls	r0, r0, #12
    76e8:	4204      	tst	r4, r0
    76ea:	d008      	beq.n	76fe <__aeabi_dadd+0x54e>
    76ec:	08dd      	lsrs	r5, r3, #3
    76ee:	4205      	tst	r5, r0
    76f0:	d105      	bne.n	76fe <__aeabi_dadd+0x54e>
    76f2:	08d2      	lsrs	r2, r2, #3
    76f4:	0759      	lsls	r1, r3, #29
    76f6:	4311      	orrs	r1, r2
    76f8:	000f      	movs	r7, r1
    76fa:	002c      	movs	r4, r5
    76fc:	46d8      	mov	r8, fp
    76fe:	0f7b      	lsrs	r3, r7, #29
    7700:	00e4      	lsls	r4, r4, #3
    7702:	431c      	orrs	r4, r3
    7704:	00ff      	lsls	r7, r7, #3
    7706:	4e30      	ldr	r6, [pc, #192]	; (77c8 <__aeabi_dadd+0x618>)
    7708:	e5d6      	b.n	72b8 <__aeabi_dadd+0x108>
    770a:	000c      	movs	r4, r1
    770c:	0017      	movs	r7, r2
    770e:	0006      	movs	r6, r0
    7710:	e5d2      	b.n	72b8 <__aeabi_dadd+0x108>
    7712:	2b00      	cmp	r3, #0
    7714:	d038      	beq.n	7788 <__aeabi_dadd+0x5d8>
    7716:	000b      	movs	r3, r1
    7718:	4313      	orrs	r3, r2
    771a:	d100      	bne.n	771e <__aeabi_dadd+0x56e>
    771c:	e742      	b.n	75a4 <__aeabi_dadd+0x3f4>
    771e:	08f8      	lsrs	r0, r7, #3
    7720:	0767      	lsls	r7, r4, #29
    7722:	4307      	orrs	r7, r0
    7724:	2080      	movs	r0, #128	; 0x80
    7726:	08e4      	lsrs	r4, r4, #3
    7728:	0300      	lsls	r0, r0, #12
    772a:	4204      	tst	r4, r0
    772c:	d0e7      	beq.n	76fe <__aeabi_dadd+0x54e>
    772e:	08cb      	lsrs	r3, r1, #3
    7730:	4203      	tst	r3, r0
    7732:	d1e4      	bne.n	76fe <__aeabi_dadd+0x54e>
    7734:	08d2      	lsrs	r2, r2, #3
    7736:	0749      	lsls	r1, r1, #29
    7738:	4311      	orrs	r1, r2
    773a:	000f      	movs	r7, r1
    773c:	001c      	movs	r4, r3
    773e:	e7de      	b.n	76fe <__aeabi_dadd+0x54e>
    7740:	2700      	movs	r7, #0
    7742:	2400      	movs	r4, #0
    7744:	e5d5      	b.n	72f2 <__aeabi_dadd+0x142>
    7746:	2100      	movs	r1, #0
    7748:	e76b      	b.n	7622 <__aeabi_dadd+0x472>
    774a:	2500      	movs	r5, #0
    774c:	2700      	movs	r7, #0
    774e:	e5f3      	b.n	7338 <__aeabi_dadd+0x188>
    7750:	464e      	mov	r6, r9
    7752:	0025      	movs	r5, r4
    7754:	3e20      	subs	r6, #32
    7756:	40f5      	lsrs	r5, r6
    7758:	464b      	mov	r3, r9
    775a:	002e      	movs	r6, r5
    775c:	2b20      	cmp	r3, #32
    775e:	d02d      	beq.n	77bc <__aeabi_dadd+0x60c>
    7760:	2540      	movs	r5, #64	; 0x40
    7762:	1aed      	subs	r5, r5, r3
    7764:	40ac      	lsls	r4, r5
    7766:	4327      	orrs	r7, r4
    7768:	1e7c      	subs	r4, r7, #1
    776a:	41a7      	sbcs	r7, r4
    776c:	2400      	movs	r4, #0
    776e:	4337      	orrs	r7, r6
    7770:	e6c9      	b.n	7506 <__aeabi_dadd+0x356>
    7772:	2480      	movs	r4, #128	; 0x80
    7774:	2500      	movs	r5, #0
    7776:	0324      	lsls	r4, r4, #12
    7778:	4e13      	ldr	r6, [pc, #76]	; (77c8 <__aeabi_dadd+0x618>)
    777a:	2700      	movs	r7, #0
    777c:	e5dc      	b.n	7338 <__aeabi_dadd+0x188>
    777e:	4327      	orrs	r7, r4
    7780:	1e7c      	subs	r4, r7, #1
    7782:	41a7      	sbcs	r7, r4
    7784:	2400      	movs	r4, #0
    7786:	e779      	b.n	767c <__aeabi_dadd+0x4cc>
    7788:	000c      	movs	r4, r1
    778a:	0017      	movs	r7, r2
    778c:	4e0e      	ldr	r6, [pc, #56]	; (77c8 <__aeabi_dadd+0x618>)
    778e:	e593      	b.n	72b8 <__aeabi_dadd+0x108>
    7790:	000c      	movs	r4, r1
    7792:	0017      	movs	r7, r2
    7794:	e590      	b.n	72b8 <__aeabi_dadd+0x108>
    7796:	4656      	mov	r6, sl
    7798:	0023      	movs	r3, r4
    779a:	3e20      	subs	r6, #32
    779c:	40f3      	lsrs	r3, r6
    779e:	4699      	mov	r9, r3
    77a0:	4653      	mov	r3, sl
    77a2:	2b20      	cmp	r3, #32
    77a4:	d00e      	beq.n	77c4 <__aeabi_dadd+0x614>
    77a6:	2340      	movs	r3, #64	; 0x40
    77a8:	4656      	mov	r6, sl
    77aa:	1b9b      	subs	r3, r3, r6
    77ac:	409c      	lsls	r4, r3
    77ae:	4327      	orrs	r7, r4
    77b0:	1e7c      	subs	r4, r7, #1
    77b2:	41a7      	sbcs	r7, r4
    77b4:	464b      	mov	r3, r9
    77b6:	2400      	movs	r4, #0
    77b8:	431f      	orrs	r7, r3
    77ba:	e75f      	b.n	767c <__aeabi_dadd+0x4cc>
    77bc:	2400      	movs	r4, #0
    77be:	e7d2      	b.n	7766 <__aeabi_dadd+0x5b6>
    77c0:	0017      	movs	r7, r2
    77c2:	e5b2      	b.n	732a <__aeabi_dadd+0x17a>
    77c4:	2400      	movs	r4, #0
    77c6:	e7f2      	b.n	77ae <__aeabi_dadd+0x5fe>
    77c8:	000007ff 	.word	0x000007ff
    77cc:	ff7fffff 	.word	0xff7fffff

000077d0 <__aeabi_ddiv>:
    77d0:	b5f0      	push	{r4, r5, r6, r7, lr}
    77d2:	4657      	mov	r7, sl
    77d4:	4645      	mov	r5, r8
    77d6:	46de      	mov	lr, fp
    77d8:	464e      	mov	r6, r9
    77da:	b5e0      	push	{r5, r6, r7, lr}
    77dc:	004c      	lsls	r4, r1, #1
    77de:	030e      	lsls	r6, r1, #12
    77e0:	b087      	sub	sp, #28
    77e2:	4683      	mov	fp, r0
    77e4:	4692      	mov	sl, r2
    77e6:	001d      	movs	r5, r3
    77e8:	4680      	mov	r8, r0
    77ea:	0b36      	lsrs	r6, r6, #12
    77ec:	0d64      	lsrs	r4, r4, #21
    77ee:	0fcf      	lsrs	r7, r1, #31
    77f0:	2c00      	cmp	r4, #0
    77f2:	d04f      	beq.n	7894 <__aeabi_ddiv+0xc4>
    77f4:	4b6f      	ldr	r3, [pc, #444]	; (79b4 <__aeabi_ddiv+0x1e4>)
    77f6:	429c      	cmp	r4, r3
    77f8:	d035      	beq.n	7866 <__aeabi_ddiv+0x96>
    77fa:	2380      	movs	r3, #128	; 0x80
    77fc:	0f42      	lsrs	r2, r0, #29
    77fe:	041b      	lsls	r3, r3, #16
    7800:	00f6      	lsls	r6, r6, #3
    7802:	4313      	orrs	r3, r2
    7804:	4333      	orrs	r3, r6
    7806:	4699      	mov	r9, r3
    7808:	00c3      	lsls	r3, r0, #3
    780a:	4698      	mov	r8, r3
    780c:	4b6a      	ldr	r3, [pc, #424]	; (79b8 <__aeabi_ddiv+0x1e8>)
    780e:	2600      	movs	r6, #0
    7810:	469c      	mov	ip, r3
    7812:	2300      	movs	r3, #0
    7814:	4464      	add	r4, ip
    7816:	9303      	str	r3, [sp, #12]
    7818:	032b      	lsls	r3, r5, #12
    781a:	0b1b      	lsrs	r3, r3, #12
    781c:	469b      	mov	fp, r3
    781e:	006b      	lsls	r3, r5, #1
    7820:	0fed      	lsrs	r5, r5, #31
    7822:	4650      	mov	r0, sl
    7824:	0d5b      	lsrs	r3, r3, #21
    7826:	9501      	str	r5, [sp, #4]
    7828:	d05e      	beq.n	78e8 <__aeabi_ddiv+0x118>
    782a:	4a62      	ldr	r2, [pc, #392]	; (79b4 <__aeabi_ddiv+0x1e4>)
    782c:	4293      	cmp	r3, r2
    782e:	d053      	beq.n	78d8 <__aeabi_ddiv+0x108>
    7830:	465a      	mov	r2, fp
    7832:	00d1      	lsls	r1, r2, #3
    7834:	2280      	movs	r2, #128	; 0x80
    7836:	0f40      	lsrs	r0, r0, #29
    7838:	0412      	lsls	r2, r2, #16
    783a:	4302      	orrs	r2, r0
    783c:	430a      	orrs	r2, r1
    783e:	4693      	mov	fp, r2
    7840:	4652      	mov	r2, sl
    7842:	00d1      	lsls	r1, r2, #3
    7844:	4a5c      	ldr	r2, [pc, #368]	; (79b8 <__aeabi_ddiv+0x1e8>)
    7846:	4694      	mov	ip, r2
    7848:	2200      	movs	r2, #0
    784a:	4463      	add	r3, ip
    784c:	0038      	movs	r0, r7
    784e:	4068      	eors	r0, r5
    7850:	4684      	mov	ip, r0
    7852:	9002      	str	r0, [sp, #8]
    7854:	1ae4      	subs	r4, r4, r3
    7856:	4316      	orrs	r6, r2
    7858:	2e0f      	cmp	r6, #15
    785a:	d900      	bls.n	785e <__aeabi_ddiv+0x8e>
    785c:	e0b4      	b.n	79c8 <__aeabi_ddiv+0x1f8>
    785e:	4b57      	ldr	r3, [pc, #348]	; (79bc <__aeabi_ddiv+0x1ec>)
    7860:	00b6      	lsls	r6, r6, #2
    7862:	599b      	ldr	r3, [r3, r6]
    7864:	469f      	mov	pc, r3
    7866:	0003      	movs	r3, r0
    7868:	4333      	orrs	r3, r6
    786a:	4699      	mov	r9, r3
    786c:	d16c      	bne.n	7948 <__aeabi_ddiv+0x178>
    786e:	2300      	movs	r3, #0
    7870:	4698      	mov	r8, r3
    7872:	3302      	adds	r3, #2
    7874:	2608      	movs	r6, #8
    7876:	9303      	str	r3, [sp, #12]
    7878:	e7ce      	b.n	7818 <__aeabi_ddiv+0x48>
    787a:	46cb      	mov	fp, r9
    787c:	4641      	mov	r1, r8
    787e:	9a03      	ldr	r2, [sp, #12]
    7880:	9701      	str	r7, [sp, #4]
    7882:	2a02      	cmp	r2, #2
    7884:	d165      	bne.n	7952 <__aeabi_ddiv+0x182>
    7886:	9b01      	ldr	r3, [sp, #4]
    7888:	4c4a      	ldr	r4, [pc, #296]	; (79b4 <__aeabi_ddiv+0x1e4>)
    788a:	469c      	mov	ip, r3
    788c:	2300      	movs	r3, #0
    788e:	2200      	movs	r2, #0
    7890:	4698      	mov	r8, r3
    7892:	e06b      	b.n	796c <__aeabi_ddiv+0x19c>
    7894:	0003      	movs	r3, r0
    7896:	4333      	orrs	r3, r6
    7898:	4699      	mov	r9, r3
    789a:	d04e      	beq.n	793a <__aeabi_ddiv+0x16a>
    789c:	2e00      	cmp	r6, #0
    789e:	d100      	bne.n	78a2 <__aeabi_ddiv+0xd2>
    78a0:	e1bc      	b.n	7c1c <__aeabi_ddiv+0x44c>
    78a2:	0030      	movs	r0, r6
    78a4:	f001 f9ea 	bl	8c7c <__clzsi2>
    78a8:	0003      	movs	r3, r0
    78aa:	3b0b      	subs	r3, #11
    78ac:	2b1c      	cmp	r3, #28
    78ae:	dd00      	ble.n	78b2 <__aeabi_ddiv+0xe2>
    78b0:	e1ac      	b.n	7c0c <__aeabi_ddiv+0x43c>
    78b2:	221d      	movs	r2, #29
    78b4:	1ad3      	subs	r3, r2, r3
    78b6:	465a      	mov	r2, fp
    78b8:	0001      	movs	r1, r0
    78ba:	40da      	lsrs	r2, r3
    78bc:	3908      	subs	r1, #8
    78be:	408e      	lsls	r6, r1
    78c0:	0013      	movs	r3, r2
    78c2:	4333      	orrs	r3, r6
    78c4:	4699      	mov	r9, r3
    78c6:	465b      	mov	r3, fp
    78c8:	408b      	lsls	r3, r1
    78ca:	4698      	mov	r8, r3
    78cc:	2300      	movs	r3, #0
    78ce:	4c3c      	ldr	r4, [pc, #240]	; (79c0 <__aeabi_ddiv+0x1f0>)
    78d0:	2600      	movs	r6, #0
    78d2:	1a24      	subs	r4, r4, r0
    78d4:	9303      	str	r3, [sp, #12]
    78d6:	e79f      	b.n	7818 <__aeabi_ddiv+0x48>
    78d8:	4651      	mov	r1, sl
    78da:	465a      	mov	r2, fp
    78dc:	4311      	orrs	r1, r2
    78de:	d129      	bne.n	7934 <__aeabi_ddiv+0x164>
    78e0:	2200      	movs	r2, #0
    78e2:	4693      	mov	fp, r2
    78e4:	3202      	adds	r2, #2
    78e6:	e7b1      	b.n	784c <__aeabi_ddiv+0x7c>
    78e8:	4659      	mov	r1, fp
    78ea:	4301      	orrs	r1, r0
    78ec:	d01e      	beq.n	792c <__aeabi_ddiv+0x15c>
    78ee:	465b      	mov	r3, fp
    78f0:	2b00      	cmp	r3, #0
    78f2:	d100      	bne.n	78f6 <__aeabi_ddiv+0x126>
    78f4:	e19e      	b.n	7c34 <__aeabi_ddiv+0x464>
    78f6:	4658      	mov	r0, fp
    78f8:	f001 f9c0 	bl	8c7c <__clzsi2>
    78fc:	0003      	movs	r3, r0
    78fe:	3b0b      	subs	r3, #11
    7900:	2b1c      	cmp	r3, #28
    7902:	dd00      	ble.n	7906 <__aeabi_ddiv+0x136>
    7904:	e18f      	b.n	7c26 <__aeabi_ddiv+0x456>
    7906:	0002      	movs	r2, r0
    7908:	4659      	mov	r1, fp
    790a:	3a08      	subs	r2, #8
    790c:	4091      	lsls	r1, r2
    790e:	468b      	mov	fp, r1
    7910:	211d      	movs	r1, #29
    7912:	1acb      	subs	r3, r1, r3
    7914:	4651      	mov	r1, sl
    7916:	40d9      	lsrs	r1, r3
    7918:	000b      	movs	r3, r1
    791a:	4659      	mov	r1, fp
    791c:	430b      	orrs	r3, r1
    791e:	4651      	mov	r1, sl
    7920:	469b      	mov	fp, r3
    7922:	4091      	lsls	r1, r2
    7924:	4b26      	ldr	r3, [pc, #152]	; (79c0 <__aeabi_ddiv+0x1f0>)
    7926:	2200      	movs	r2, #0
    7928:	1a1b      	subs	r3, r3, r0
    792a:	e78f      	b.n	784c <__aeabi_ddiv+0x7c>
    792c:	2300      	movs	r3, #0
    792e:	2201      	movs	r2, #1
    7930:	469b      	mov	fp, r3
    7932:	e78b      	b.n	784c <__aeabi_ddiv+0x7c>
    7934:	4651      	mov	r1, sl
    7936:	2203      	movs	r2, #3
    7938:	e788      	b.n	784c <__aeabi_ddiv+0x7c>
    793a:	2300      	movs	r3, #0
    793c:	4698      	mov	r8, r3
    793e:	3301      	adds	r3, #1
    7940:	2604      	movs	r6, #4
    7942:	2400      	movs	r4, #0
    7944:	9303      	str	r3, [sp, #12]
    7946:	e767      	b.n	7818 <__aeabi_ddiv+0x48>
    7948:	2303      	movs	r3, #3
    794a:	46b1      	mov	r9, r6
    794c:	9303      	str	r3, [sp, #12]
    794e:	260c      	movs	r6, #12
    7950:	e762      	b.n	7818 <__aeabi_ddiv+0x48>
    7952:	2a03      	cmp	r2, #3
    7954:	d100      	bne.n	7958 <__aeabi_ddiv+0x188>
    7956:	e25c      	b.n	7e12 <__aeabi_ddiv+0x642>
    7958:	9b01      	ldr	r3, [sp, #4]
    795a:	2a01      	cmp	r2, #1
    795c:	d000      	beq.n	7960 <__aeabi_ddiv+0x190>
    795e:	e1e4      	b.n	7d2a <__aeabi_ddiv+0x55a>
    7960:	4013      	ands	r3, r2
    7962:	469c      	mov	ip, r3
    7964:	2300      	movs	r3, #0
    7966:	2400      	movs	r4, #0
    7968:	2200      	movs	r2, #0
    796a:	4698      	mov	r8, r3
    796c:	2100      	movs	r1, #0
    796e:	0312      	lsls	r2, r2, #12
    7970:	0b13      	lsrs	r3, r2, #12
    7972:	0d0a      	lsrs	r2, r1, #20
    7974:	0512      	lsls	r2, r2, #20
    7976:	431a      	orrs	r2, r3
    7978:	0523      	lsls	r3, r4, #20
    797a:	4c12      	ldr	r4, [pc, #72]	; (79c4 <__aeabi_ddiv+0x1f4>)
    797c:	4640      	mov	r0, r8
    797e:	4022      	ands	r2, r4
    7980:	4313      	orrs	r3, r2
    7982:	4662      	mov	r2, ip
    7984:	005b      	lsls	r3, r3, #1
    7986:	07d2      	lsls	r2, r2, #31
    7988:	085b      	lsrs	r3, r3, #1
    798a:	4313      	orrs	r3, r2
    798c:	0019      	movs	r1, r3
    798e:	b007      	add	sp, #28
    7990:	bc3c      	pop	{r2, r3, r4, r5}
    7992:	4690      	mov	r8, r2
    7994:	4699      	mov	r9, r3
    7996:	46a2      	mov	sl, r4
    7998:	46ab      	mov	fp, r5
    799a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    799c:	2300      	movs	r3, #0
    799e:	2280      	movs	r2, #128	; 0x80
    79a0:	469c      	mov	ip, r3
    79a2:	0312      	lsls	r2, r2, #12
    79a4:	4698      	mov	r8, r3
    79a6:	4c03      	ldr	r4, [pc, #12]	; (79b4 <__aeabi_ddiv+0x1e4>)
    79a8:	e7e0      	b.n	796c <__aeabi_ddiv+0x19c>
    79aa:	2300      	movs	r3, #0
    79ac:	4c01      	ldr	r4, [pc, #4]	; (79b4 <__aeabi_ddiv+0x1e4>)
    79ae:	2200      	movs	r2, #0
    79b0:	4698      	mov	r8, r3
    79b2:	e7db      	b.n	796c <__aeabi_ddiv+0x19c>
    79b4:	000007ff 	.word	0x000007ff
    79b8:	fffffc01 	.word	0xfffffc01
    79bc:	0000b7a8 	.word	0x0000b7a8
    79c0:	fffffc0d 	.word	0xfffffc0d
    79c4:	800fffff 	.word	0x800fffff
    79c8:	45d9      	cmp	r9, fp
    79ca:	d900      	bls.n	79ce <__aeabi_ddiv+0x1fe>
    79cc:	e139      	b.n	7c42 <__aeabi_ddiv+0x472>
    79ce:	d100      	bne.n	79d2 <__aeabi_ddiv+0x202>
    79d0:	e134      	b.n	7c3c <__aeabi_ddiv+0x46c>
    79d2:	2300      	movs	r3, #0
    79d4:	4646      	mov	r6, r8
    79d6:	464d      	mov	r5, r9
    79d8:	469a      	mov	sl, r3
    79da:	3c01      	subs	r4, #1
    79dc:	465b      	mov	r3, fp
    79de:	0e0a      	lsrs	r2, r1, #24
    79e0:	021b      	lsls	r3, r3, #8
    79e2:	431a      	orrs	r2, r3
    79e4:	020b      	lsls	r3, r1, #8
    79e6:	0c17      	lsrs	r7, r2, #16
    79e8:	9303      	str	r3, [sp, #12]
    79ea:	0413      	lsls	r3, r2, #16
    79ec:	0c1b      	lsrs	r3, r3, #16
    79ee:	0039      	movs	r1, r7
    79f0:	0028      	movs	r0, r5
    79f2:	4690      	mov	r8, r2
    79f4:	9301      	str	r3, [sp, #4]
    79f6:	f7ff fa27 	bl	6e48 <__udivsi3>
    79fa:	0002      	movs	r2, r0
    79fc:	9b01      	ldr	r3, [sp, #4]
    79fe:	4683      	mov	fp, r0
    7a00:	435a      	muls	r2, r3
    7a02:	0028      	movs	r0, r5
    7a04:	0039      	movs	r1, r7
    7a06:	4691      	mov	r9, r2
    7a08:	f7ff faa4 	bl	6f54 <__aeabi_uidivmod>
    7a0c:	0c35      	lsrs	r5, r6, #16
    7a0e:	0409      	lsls	r1, r1, #16
    7a10:	430d      	orrs	r5, r1
    7a12:	45a9      	cmp	r9, r5
    7a14:	d90d      	bls.n	7a32 <__aeabi_ddiv+0x262>
    7a16:	465b      	mov	r3, fp
    7a18:	4445      	add	r5, r8
    7a1a:	3b01      	subs	r3, #1
    7a1c:	45a8      	cmp	r8, r5
    7a1e:	d900      	bls.n	7a22 <__aeabi_ddiv+0x252>
    7a20:	e13a      	b.n	7c98 <__aeabi_ddiv+0x4c8>
    7a22:	45a9      	cmp	r9, r5
    7a24:	d800      	bhi.n	7a28 <__aeabi_ddiv+0x258>
    7a26:	e137      	b.n	7c98 <__aeabi_ddiv+0x4c8>
    7a28:	2302      	movs	r3, #2
    7a2a:	425b      	negs	r3, r3
    7a2c:	469c      	mov	ip, r3
    7a2e:	4445      	add	r5, r8
    7a30:	44e3      	add	fp, ip
    7a32:	464b      	mov	r3, r9
    7a34:	1aeb      	subs	r3, r5, r3
    7a36:	0039      	movs	r1, r7
    7a38:	0018      	movs	r0, r3
    7a3a:	9304      	str	r3, [sp, #16]
    7a3c:	f7ff fa04 	bl	6e48 <__udivsi3>
    7a40:	9b01      	ldr	r3, [sp, #4]
    7a42:	0005      	movs	r5, r0
    7a44:	4343      	muls	r3, r0
    7a46:	0039      	movs	r1, r7
    7a48:	9804      	ldr	r0, [sp, #16]
    7a4a:	4699      	mov	r9, r3
    7a4c:	f7ff fa82 	bl	6f54 <__aeabi_uidivmod>
    7a50:	0433      	lsls	r3, r6, #16
    7a52:	0409      	lsls	r1, r1, #16
    7a54:	0c1b      	lsrs	r3, r3, #16
    7a56:	430b      	orrs	r3, r1
    7a58:	4599      	cmp	r9, r3
    7a5a:	d909      	bls.n	7a70 <__aeabi_ddiv+0x2a0>
    7a5c:	4443      	add	r3, r8
    7a5e:	1e6a      	subs	r2, r5, #1
    7a60:	4598      	cmp	r8, r3
    7a62:	d900      	bls.n	7a66 <__aeabi_ddiv+0x296>
    7a64:	e11a      	b.n	7c9c <__aeabi_ddiv+0x4cc>
    7a66:	4599      	cmp	r9, r3
    7a68:	d800      	bhi.n	7a6c <__aeabi_ddiv+0x29c>
    7a6a:	e117      	b.n	7c9c <__aeabi_ddiv+0x4cc>
    7a6c:	3d02      	subs	r5, #2
    7a6e:	4443      	add	r3, r8
    7a70:	464a      	mov	r2, r9
    7a72:	1a9b      	subs	r3, r3, r2
    7a74:	465a      	mov	r2, fp
    7a76:	0412      	lsls	r2, r2, #16
    7a78:	432a      	orrs	r2, r5
    7a7a:	9903      	ldr	r1, [sp, #12]
    7a7c:	4693      	mov	fp, r2
    7a7e:	0c10      	lsrs	r0, r2, #16
    7a80:	0c0a      	lsrs	r2, r1, #16
    7a82:	4691      	mov	r9, r2
    7a84:	0409      	lsls	r1, r1, #16
    7a86:	465a      	mov	r2, fp
    7a88:	0c09      	lsrs	r1, r1, #16
    7a8a:	464e      	mov	r6, r9
    7a8c:	000d      	movs	r5, r1
    7a8e:	0412      	lsls	r2, r2, #16
    7a90:	0c12      	lsrs	r2, r2, #16
    7a92:	4345      	muls	r5, r0
    7a94:	9105      	str	r1, [sp, #20]
    7a96:	4351      	muls	r1, r2
    7a98:	4372      	muls	r2, r6
    7a9a:	4370      	muls	r0, r6
    7a9c:	1952      	adds	r2, r2, r5
    7a9e:	0c0e      	lsrs	r6, r1, #16
    7aa0:	18b2      	adds	r2, r6, r2
    7aa2:	4295      	cmp	r5, r2
    7aa4:	d903      	bls.n	7aae <__aeabi_ddiv+0x2de>
    7aa6:	2580      	movs	r5, #128	; 0x80
    7aa8:	026d      	lsls	r5, r5, #9
    7aaa:	46ac      	mov	ip, r5
    7aac:	4460      	add	r0, ip
    7aae:	0c15      	lsrs	r5, r2, #16
    7ab0:	0409      	lsls	r1, r1, #16
    7ab2:	0412      	lsls	r2, r2, #16
    7ab4:	0c09      	lsrs	r1, r1, #16
    7ab6:	1828      	adds	r0, r5, r0
    7ab8:	1852      	adds	r2, r2, r1
    7aba:	4283      	cmp	r3, r0
    7abc:	d200      	bcs.n	7ac0 <__aeabi_ddiv+0x2f0>
    7abe:	e0ce      	b.n	7c5e <__aeabi_ddiv+0x48e>
    7ac0:	d100      	bne.n	7ac4 <__aeabi_ddiv+0x2f4>
    7ac2:	e0c8      	b.n	7c56 <__aeabi_ddiv+0x486>
    7ac4:	1a1d      	subs	r5, r3, r0
    7ac6:	4653      	mov	r3, sl
    7ac8:	1a9e      	subs	r6, r3, r2
    7aca:	45b2      	cmp	sl, r6
    7acc:	4192      	sbcs	r2, r2
    7ace:	4252      	negs	r2, r2
    7ad0:	1aab      	subs	r3, r5, r2
    7ad2:	469a      	mov	sl, r3
    7ad4:	4598      	cmp	r8, r3
    7ad6:	d100      	bne.n	7ada <__aeabi_ddiv+0x30a>
    7ad8:	e117      	b.n	7d0a <__aeabi_ddiv+0x53a>
    7ada:	0039      	movs	r1, r7
    7adc:	0018      	movs	r0, r3
    7ade:	f7ff f9b3 	bl	6e48 <__udivsi3>
    7ae2:	9b01      	ldr	r3, [sp, #4]
    7ae4:	0005      	movs	r5, r0
    7ae6:	4343      	muls	r3, r0
    7ae8:	0039      	movs	r1, r7
    7aea:	4650      	mov	r0, sl
    7aec:	9304      	str	r3, [sp, #16]
    7aee:	f7ff fa31 	bl	6f54 <__aeabi_uidivmod>
    7af2:	9804      	ldr	r0, [sp, #16]
    7af4:	040b      	lsls	r3, r1, #16
    7af6:	0c31      	lsrs	r1, r6, #16
    7af8:	4319      	orrs	r1, r3
    7afa:	4288      	cmp	r0, r1
    7afc:	d909      	bls.n	7b12 <__aeabi_ddiv+0x342>
    7afe:	4441      	add	r1, r8
    7b00:	1e6b      	subs	r3, r5, #1
    7b02:	4588      	cmp	r8, r1
    7b04:	d900      	bls.n	7b08 <__aeabi_ddiv+0x338>
    7b06:	e107      	b.n	7d18 <__aeabi_ddiv+0x548>
    7b08:	4288      	cmp	r0, r1
    7b0a:	d800      	bhi.n	7b0e <__aeabi_ddiv+0x33e>
    7b0c:	e104      	b.n	7d18 <__aeabi_ddiv+0x548>
    7b0e:	3d02      	subs	r5, #2
    7b10:	4441      	add	r1, r8
    7b12:	9b04      	ldr	r3, [sp, #16]
    7b14:	1acb      	subs	r3, r1, r3
    7b16:	0018      	movs	r0, r3
    7b18:	0039      	movs	r1, r7
    7b1a:	9304      	str	r3, [sp, #16]
    7b1c:	f7ff f994 	bl	6e48 <__udivsi3>
    7b20:	9b01      	ldr	r3, [sp, #4]
    7b22:	4682      	mov	sl, r0
    7b24:	4343      	muls	r3, r0
    7b26:	0039      	movs	r1, r7
    7b28:	9804      	ldr	r0, [sp, #16]
    7b2a:	9301      	str	r3, [sp, #4]
    7b2c:	f7ff fa12 	bl	6f54 <__aeabi_uidivmod>
    7b30:	9801      	ldr	r0, [sp, #4]
    7b32:	040b      	lsls	r3, r1, #16
    7b34:	0431      	lsls	r1, r6, #16
    7b36:	0c09      	lsrs	r1, r1, #16
    7b38:	4319      	orrs	r1, r3
    7b3a:	4288      	cmp	r0, r1
    7b3c:	d90d      	bls.n	7b5a <__aeabi_ddiv+0x38a>
    7b3e:	4653      	mov	r3, sl
    7b40:	4441      	add	r1, r8
    7b42:	3b01      	subs	r3, #1
    7b44:	4588      	cmp	r8, r1
    7b46:	d900      	bls.n	7b4a <__aeabi_ddiv+0x37a>
    7b48:	e0e8      	b.n	7d1c <__aeabi_ddiv+0x54c>
    7b4a:	4288      	cmp	r0, r1
    7b4c:	d800      	bhi.n	7b50 <__aeabi_ddiv+0x380>
    7b4e:	e0e5      	b.n	7d1c <__aeabi_ddiv+0x54c>
    7b50:	2302      	movs	r3, #2
    7b52:	425b      	negs	r3, r3
    7b54:	469c      	mov	ip, r3
    7b56:	4441      	add	r1, r8
    7b58:	44e2      	add	sl, ip
    7b5a:	9b01      	ldr	r3, [sp, #4]
    7b5c:	042d      	lsls	r5, r5, #16
    7b5e:	1ace      	subs	r6, r1, r3
    7b60:	4651      	mov	r1, sl
    7b62:	4329      	orrs	r1, r5
    7b64:	9d05      	ldr	r5, [sp, #20]
    7b66:	464f      	mov	r7, r9
    7b68:	002a      	movs	r2, r5
    7b6a:	040b      	lsls	r3, r1, #16
    7b6c:	0c08      	lsrs	r0, r1, #16
    7b6e:	0c1b      	lsrs	r3, r3, #16
    7b70:	435a      	muls	r2, r3
    7b72:	4345      	muls	r5, r0
    7b74:	437b      	muls	r3, r7
    7b76:	4378      	muls	r0, r7
    7b78:	195b      	adds	r3, r3, r5
    7b7a:	0c17      	lsrs	r7, r2, #16
    7b7c:	18fb      	adds	r3, r7, r3
    7b7e:	429d      	cmp	r5, r3
    7b80:	d903      	bls.n	7b8a <__aeabi_ddiv+0x3ba>
    7b82:	2580      	movs	r5, #128	; 0x80
    7b84:	026d      	lsls	r5, r5, #9
    7b86:	46ac      	mov	ip, r5
    7b88:	4460      	add	r0, ip
    7b8a:	0c1d      	lsrs	r5, r3, #16
    7b8c:	0412      	lsls	r2, r2, #16
    7b8e:	041b      	lsls	r3, r3, #16
    7b90:	0c12      	lsrs	r2, r2, #16
    7b92:	1828      	adds	r0, r5, r0
    7b94:	189b      	adds	r3, r3, r2
    7b96:	4286      	cmp	r6, r0
    7b98:	d200      	bcs.n	7b9c <__aeabi_ddiv+0x3cc>
    7b9a:	e093      	b.n	7cc4 <__aeabi_ddiv+0x4f4>
    7b9c:	d100      	bne.n	7ba0 <__aeabi_ddiv+0x3d0>
    7b9e:	e08e      	b.n	7cbe <__aeabi_ddiv+0x4ee>
    7ba0:	2301      	movs	r3, #1
    7ba2:	4319      	orrs	r1, r3
    7ba4:	4ba0      	ldr	r3, [pc, #640]	; (7e28 <__aeabi_ddiv+0x658>)
    7ba6:	18e3      	adds	r3, r4, r3
    7ba8:	2b00      	cmp	r3, #0
    7baa:	dc00      	bgt.n	7bae <__aeabi_ddiv+0x3de>
    7bac:	e099      	b.n	7ce2 <__aeabi_ddiv+0x512>
    7bae:	074a      	lsls	r2, r1, #29
    7bb0:	d000      	beq.n	7bb4 <__aeabi_ddiv+0x3e4>
    7bb2:	e09e      	b.n	7cf2 <__aeabi_ddiv+0x522>
    7bb4:	465a      	mov	r2, fp
    7bb6:	01d2      	lsls	r2, r2, #7
    7bb8:	d506      	bpl.n	7bc8 <__aeabi_ddiv+0x3f8>
    7bba:	465a      	mov	r2, fp
    7bbc:	4b9b      	ldr	r3, [pc, #620]	; (7e2c <__aeabi_ddiv+0x65c>)
    7bbe:	401a      	ands	r2, r3
    7bc0:	2380      	movs	r3, #128	; 0x80
    7bc2:	4693      	mov	fp, r2
    7bc4:	00db      	lsls	r3, r3, #3
    7bc6:	18e3      	adds	r3, r4, r3
    7bc8:	4a99      	ldr	r2, [pc, #612]	; (7e30 <__aeabi_ddiv+0x660>)
    7bca:	4293      	cmp	r3, r2
    7bcc:	dd68      	ble.n	7ca0 <__aeabi_ddiv+0x4d0>
    7bce:	2301      	movs	r3, #1
    7bd0:	9a02      	ldr	r2, [sp, #8]
    7bd2:	4c98      	ldr	r4, [pc, #608]	; (7e34 <__aeabi_ddiv+0x664>)
    7bd4:	401a      	ands	r2, r3
    7bd6:	2300      	movs	r3, #0
    7bd8:	4694      	mov	ip, r2
    7bda:	4698      	mov	r8, r3
    7bdc:	2200      	movs	r2, #0
    7bde:	e6c5      	b.n	796c <__aeabi_ddiv+0x19c>
    7be0:	2280      	movs	r2, #128	; 0x80
    7be2:	464b      	mov	r3, r9
    7be4:	0312      	lsls	r2, r2, #12
    7be6:	4213      	tst	r3, r2
    7be8:	d00a      	beq.n	7c00 <__aeabi_ddiv+0x430>
    7bea:	465b      	mov	r3, fp
    7bec:	4213      	tst	r3, r2
    7bee:	d106      	bne.n	7bfe <__aeabi_ddiv+0x42e>
    7bf0:	431a      	orrs	r2, r3
    7bf2:	0312      	lsls	r2, r2, #12
    7bf4:	0b12      	lsrs	r2, r2, #12
    7bf6:	46ac      	mov	ip, r5
    7bf8:	4688      	mov	r8, r1
    7bfa:	4c8e      	ldr	r4, [pc, #568]	; (7e34 <__aeabi_ddiv+0x664>)
    7bfc:	e6b6      	b.n	796c <__aeabi_ddiv+0x19c>
    7bfe:	464b      	mov	r3, r9
    7c00:	431a      	orrs	r2, r3
    7c02:	0312      	lsls	r2, r2, #12
    7c04:	0b12      	lsrs	r2, r2, #12
    7c06:	46bc      	mov	ip, r7
    7c08:	4c8a      	ldr	r4, [pc, #552]	; (7e34 <__aeabi_ddiv+0x664>)
    7c0a:	e6af      	b.n	796c <__aeabi_ddiv+0x19c>
    7c0c:	0003      	movs	r3, r0
    7c0e:	465a      	mov	r2, fp
    7c10:	3b28      	subs	r3, #40	; 0x28
    7c12:	409a      	lsls	r2, r3
    7c14:	2300      	movs	r3, #0
    7c16:	4691      	mov	r9, r2
    7c18:	4698      	mov	r8, r3
    7c1a:	e657      	b.n	78cc <__aeabi_ddiv+0xfc>
    7c1c:	4658      	mov	r0, fp
    7c1e:	f001 f82d 	bl	8c7c <__clzsi2>
    7c22:	3020      	adds	r0, #32
    7c24:	e640      	b.n	78a8 <__aeabi_ddiv+0xd8>
    7c26:	0003      	movs	r3, r0
    7c28:	4652      	mov	r2, sl
    7c2a:	3b28      	subs	r3, #40	; 0x28
    7c2c:	409a      	lsls	r2, r3
    7c2e:	2100      	movs	r1, #0
    7c30:	4693      	mov	fp, r2
    7c32:	e677      	b.n	7924 <__aeabi_ddiv+0x154>
    7c34:	f001 f822 	bl	8c7c <__clzsi2>
    7c38:	3020      	adds	r0, #32
    7c3a:	e65f      	b.n	78fc <__aeabi_ddiv+0x12c>
    7c3c:	4588      	cmp	r8, r1
    7c3e:	d200      	bcs.n	7c42 <__aeabi_ddiv+0x472>
    7c40:	e6c7      	b.n	79d2 <__aeabi_ddiv+0x202>
    7c42:	464b      	mov	r3, r9
    7c44:	07de      	lsls	r6, r3, #31
    7c46:	085d      	lsrs	r5, r3, #1
    7c48:	4643      	mov	r3, r8
    7c4a:	085b      	lsrs	r3, r3, #1
    7c4c:	431e      	orrs	r6, r3
    7c4e:	4643      	mov	r3, r8
    7c50:	07db      	lsls	r3, r3, #31
    7c52:	469a      	mov	sl, r3
    7c54:	e6c2      	b.n	79dc <__aeabi_ddiv+0x20c>
    7c56:	2500      	movs	r5, #0
    7c58:	4592      	cmp	sl, r2
    7c5a:	d300      	bcc.n	7c5e <__aeabi_ddiv+0x48e>
    7c5c:	e733      	b.n	7ac6 <__aeabi_ddiv+0x2f6>
    7c5e:	9e03      	ldr	r6, [sp, #12]
    7c60:	4659      	mov	r1, fp
    7c62:	46b4      	mov	ip, r6
    7c64:	44e2      	add	sl, ip
    7c66:	45b2      	cmp	sl, r6
    7c68:	41ad      	sbcs	r5, r5
    7c6a:	426d      	negs	r5, r5
    7c6c:	4445      	add	r5, r8
    7c6e:	18eb      	adds	r3, r5, r3
    7c70:	3901      	subs	r1, #1
    7c72:	4598      	cmp	r8, r3
    7c74:	d207      	bcs.n	7c86 <__aeabi_ddiv+0x4b6>
    7c76:	4298      	cmp	r0, r3
    7c78:	d900      	bls.n	7c7c <__aeabi_ddiv+0x4ac>
    7c7a:	e07f      	b.n	7d7c <__aeabi_ddiv+0x5ac>
    7c7c:	d100      	bne.n	7c80 <__aeabi_ddiv+0x4b0>
    7c7e:	e0bc      	b.n	7dfa <__aeabi_ddiv+0x62a>
    7c80:	1a1d      	subs	r5, r3, r0
    7c82:	468b      	mov	fp, r1
    7c84:	e71f      	b.n	7ac6 <__aeabi_ddiv+0x2f6>
    7c86:	4598      	cmp	r8, r3
    7c88:	d1fa      	bne.n	7c80 <__aeabi_ddiv+0x4b0>
    7c8a:	9d03      	ldr	r5, [sp, #12]
    7c8c:	4555      	cmp	r5, sl
    7c8e:	d9f2      	bls.n	7c76 <__aeabi_ddiv+0x4a6>
    7c90:	4643      	mov	r3, r8
    7c92:	468b      	mov	fp, r1
    7c94:	1a1d      	subs	r5, r3, r0
    7c96:	e716      	b.n	7ac6 <__aeabi_ddiv+0x2f6>
    7c98:	469b      	mov	fp, r3
    7c9a:	e6ca      	b.n	7a32 <__aeabi_ddiv+0x262>
    7c9c:	0015      	movs	r5, r2
    7c9e:	e6e7      	b.n	7a70 <__aeabi_ddiv+0x2a0>
    7ca0:	465a      	mov	r2, fp
    7ca2:	08c9      	lsrs	r1, r1, #3
    7ca4:	0752      	lsls	r2, r2, #29
    7ca6:	430a      	orrs	r2, r1
    7ca8:	055b      	lsls	r3, r3, #21
    7caa:	4690      	mov	r8, r2
    7cac:	0d5c      	lsrs	r4, r3, #21
    7cae:	465a      	mov	r2, fp
    7cb0:	2301      	movs	r3, #1
    7cb2:	9902      	ldr	r1, [sp, #8]
    7cb4:	0252      	lsls	r2, r2, #9
    7cb6:	4019      	ands	r1, r3
    7cb8:	0b12      	lsrs	r2, r2, #12
    7cba:	468c      	mov	ip, r1
    7cbc:	e656      	b.n	796c <__aeabi_ddiv+0x19c>
    7cbe:	2b00      	cmp	r3, #0
    7cc0:	d100      	bne.n	7cc4 <__aeabi_ddiv+0x4f4>
    7cc2:	e76f      	b.n	7ba4 <__aeabi_ddiv+0x3d4>
    7cc4:	4446      	add	r6, r8
    7cc6:	1e4a      	subs	r2, r1, #1
    7cc8:	45b0      	cmp	r8, r6
    7cca:	d929      	bls.n	7d20 <__aeabi_ddiv+0x550>
    7ccc:	0011      	movs	r1, r2
    7cce:	4286      	cmp	r6, r0
    7cd0:	d000      	beq.n	7cd4 <__aeabi_ddiv+0x504>
    7cd2:	e765      	b.n	7ba0 <__aeabi_ddiv+0x3d0>
    7cd4:	9a03      	ldr	r2, [sp, #12]
    7cd6:	4293      	cmp	r3, r2
    7cd8:	d000      	beq.n	7cdc <__aeabi_ddiv+0x50c>
    7cda:	e761      	b.n	7ba0 <__aeabi_ddiv+0x3d0>
    7cdc:	e762      	b.n	7ba4 <__aeabi_ddiv+0x3d4>
    7cde:	2101      	movs	r1, #1
    7ce0:	4249      	negs	r1, r1
    7ce2:	2001      	movs	r0, #1
    7ce4:	1ac2      	subs	r2, r0, r3
    7ce6:	2a38      	cmp	r2, #56	; 0x38
    7ce8:	dd21      	ble.n	7d2e <__aeabi_ddiv+0x55e>
    7cea:	9b02      	ldr	r3, [sp, #8]
    7cec:	4003      	ands	r3, r0
    7cee:	469c      	mov	ip, r3
    7cf0:	e638      	b.n	7964 <__aeabi_ddiv+0x194>
    7cf2:	220f      	movs	r2, #15
    7cf4:	400a      	ands	r2, r1
    7cf6:	2a04      	cmp	r2, #4
    7cf8:	d100      	bne.n	7cfc <__aeabi_ddiv+0x52c>
    7cfa:	e75b      	b.n	7bb4 <__aeabi_ddiv+0x3e4>
    7cfc:	000a      	movs	r2, r1
    7cfe:	1d11      	adds	r1, r2, #4
    7d00:	4291      	cmp	r1, r2
    7d02:	4192      	sbcs	r2, r2
    7d04:	4252      	negs	r2, r2
    7d06:	4493      	add	fp, r2
    7d08:	e754      	b.n	7bb4 <__aeabi_ddiv+0x3e4>
    7d0a:	4b47      	ldr	r3, [pc, #284]	; (7e28 <__aeabi_ddiv+0x658>)
    7d0c:	18e3      	adds	r3, r4, r3
    7d0e:	2b00      	cmp	r3, #0
    7d10:	dde5      	ble.n	7cde <__aeabi_ddiv+0x50e>
    7d12:	2201      	movs	r2, #1
    7d14:	4252      	negs	r2, r2
    7d16:	e7f2      	b.n	7cfe <__aeabi_ddiv+0x52e>
    7d18:	001d      	movs	r5, r3
    7d1a:	e6fa      	b.n	7b12 <__aeabi_ddiv+0x342>
    7d1c:	469a      	mov	sl, r3
    7d1e:	e71c      	b.n	7b5a <__aeabi_ddiv+0x38a>
    7d20:	42b0      	cmp	r0, r6
    7d22:	d839      	bhi.n	7d98 <__aeabi_ddiv+0x5c8>
    7d24:	d06e      	beq.n	7e04 <__aeabi_ddiv+0x634>
    7d26:	0011      	movs	r1, r2
    7d28:	e73a      	b.n	7ba0 <__aeabi_ddiv+0x3d0>
    7d2a:	9302      	str	r3, [sp, #8]
    7d2c:	e73a      	b.n	7ba4 <__aeabi_ddiv+0x3d4>
    7d2e:	2a1f      	cmp	r2, #31
    7d30:	dc3c      	bgt.n	7dac <__aeabi_ddiv+0x5dc>
    7d32:	2320      	movs	r3, #32
    7d34:	1a9b      	subs	r3, r3, r2
    7d36:	000c      	movs	r4, r1
    7d38:	4658      	mov	r0, fp
    7d3a:	4099      	lsls	r1, r3
    7d3c:	4098      	lsls	r0, r3
    7d3e:	1e4b      	subs	r3, r1, #1
    7d40:	4199      	sbcs	r1, r3
    7d42:	465b      	mov	r3, fp
    7d44:	40d4      	lsrs	r4, r2
    7d46:	40d3      	lsrs	r3, r2
    7d48:	4320      	orrs	r0, r4
    7d4a:	4308      	orrs	r0, r1
    7d4c:	001a      	movs	r2, r3
    7d4e:	0743      	lsls	r3, r0, #29
    7d50:	d009      	beq.n	7d66 <__aeabi_ddiv+0x596>
    7d52:	230f      	movs	r3, #15
    7d54:	4003      	ands	r3, r0
    7d56:	2b04      	cmp	r3, #4
    7d58:	d005      	beq.n	7d66 <__aeabi_ddiv+0x596>
    7d5a:	0001      	movs	r1, r0
    7d5c:	1d08      	adds	r0, r1, #4
    7d5e:	4288      	cmp	r0, r1
    7d60:	419b      	sbcs	r3, r3
    7d62:	425b      	negs	r3, r3
    7d64:	18d2      	adds	r2, r2, r3
    7d66:	0213      	lsls	r3, r2, #8
    7d68:	d53a      	bpl.n	7de0 <__aeabi_ddiv+0x610>
    7d6a:	2301      	movs	r3, #1
    7d6c:	9a02      	ldr	r2, [sp, #8]
    7d6e:	2401      	movs	r4, #1
    7d70:	401a      	ands	r2, r3
    7d72:	2300      	movs	r3, #0
    7d74:	4694      	mov	ip, r2
    7d76:	4698      	mov	r8, r3
    7d78:	2200      	movs	r2, #0
    7d7a:	e5f7      	b.n	796c <__aeabi_ddiv+0x19c>
    7d7c:	2102      	movs	r1, #2
    7d7e:	4249      	negs	r1, r1
    7d80:	468c      	mov	ip, r1
    7d82:	9d03      	ldr	r5, [sp, #12]
    7d84:	44e3      	add	fp, ip
    7d86:	46ac      	mov	ip, r5
    7d88:	44e2      	add	sl, ip
    7d8a:	45aa      	cmp	sl, r5
    7d8c:	41ad      	sbcs	r5, r5
    7d8e:	426d      	negs	r5, r5
    7d90:	4445      	add	r5, r8
    7d92:	18ed      	adds	r5, r5, r3
    7d94:	1a2d      	subs	r5, r5, r0
    7d96:	e696      	b.n	7ac6 <__aeabi_ddiv+0x2f6>
    7d98:	1e8a      	subs	r2, r1, #2
    7d9a:	9903      	ldr	r1, [sp, #12]
    7d9c:	004d      	lsls	r5, r1, #1
    7d9e:	428d      	cmp	r5, r1
    7da0:	4189      	sbcs	r1, r1
    7da2:	4249      	negs	r1, r1
    7da4:	4441      	add	r1, r8
    7da6:	1876      	adds	r6, r6, r1
    7da8:	9503      	str	r5, [sp, #12]
    7daa:	e78f      	b.n	7ccc <__aeabi_ddiv+0x4fc>
    7dac:	201f      	movs	r0, #31
    7dae:	4240      	negs	r0, r0
    7db0:	1ac3      	subs	r3, r0, r3
    7db2:	4658      	mov	r0, fp
    7db4:	40d8      	lsrs	r0, r3
    7db6:	0003      	movs	r3, r0
    7db8:	2a20      	cmp	r2, #32
    7dba:	d028      	beq.n	7e0e <__aeabi_ddiv+0x63e>
    7dbc:	2040      	movs	r0, #64	; 0x40
    7dbe:	465d      	mov	r5, fp
    7dc0:	1a82      	subs	r2, r0, r2
    7dc2:	4095      	lsls	r5, r2
    7dc4:	4329      	orrs	r1, r5
    7dc6:	1e4a      	subs	r2, r1, #1
    7dc8:	4191      	sbcs	r1, r2
    7dca:	4319      	orrs	r1, r3
    7dcc:	2307      	movs	r3, #7
    7dce:	2200      	movs	r2, #0
    7dd0:	400b      	ands	r3, r1
    7dd2:	d009      	beq.n	7de8 <__aeabi_ddiv+0x618>
    7dd4:	230f      	movs	r3, #15
    7dd6:	2200      	movs	r2, #0
    7dd8:	400b      	ands	r3, r1
    7dda:	0008      	movs	r0, r1
    7ddc:	2b04      	cmp	r3, #4
    7dde:	d1bd      	bne.n	7d5c <__aeabi_ddiv+0x58c>
    7de0:	0001      	movs	r1, r0
    7de2:	0753      	lsls	r3, r2, #29
    7de4:	0252      	lsls	r2, r2, #9
    7de6:	0b12      	lsrs	r2, r2, #12
    7de8:	08c9      	lsrs	r1, r1, #3
    7dea:	4319      	orrs	r1, r3
    7dec:	2301      	movs	r3, #1
    7dee:	4688      	mov	r8, r1
    7df0:	9902      	ldr	r1, [sp, #8]
    7df2:	2400      	movs	r4, #0
    7df4:	4019      	ands	r1, r3
    7df6:	468c      	mov	ip, r1
    7df8:	e5b8      	b.n	796c <__aeabi_ddiv+0x19c>
    7dfa:	4552      	cmp	r2, sl
    7dfc:	d8be      	bhi.n	7d7c <__aeabi_ddiv+0x5ac>
    7dfe:	468b      	mov	fp, r1
    7e00:	2500      	movs	r5, #0
    7e02:	e660      	b.n	7ac6 <__aeabi_ddiv+0x2f6>
    7e04:	9d03      	ldr	r5, [sp, #12]
    7e06:	429d      	cmp	r5, r3
    7e08:	d3c6      	bcc.n	7d98 <__aeabi_ddiv+0x5c8>
    7e0a:	0011      	movs	r1, r2
    7e0c:	e762      	b.n	7cd4 <__aeabi_ddiv+0x504>
    7e0e:	2500      	movs	r5, #0
    7e10:	e7d8      	b.n	7dc4 <__aeabi_ddiv+0x5f4>
    7e12:	2280      	movs	r2, #128	; 0x80
    7e14:	465b      	mov	r3, fp
    7e16:	0312      	lsls	r2, r2, #12
    7e18:	431a      	orrs	r2, r3
    7e1a:	9b01      	ldr	r3, [sp, #4]
    7e1c:	0312      	lsls	r2, r2, #12
    7e1e:	0b12      	lsrs	r2, r2, #12
    7e20:	469c      	mov	ip, r3
    7e22:	4688      	mov	r8, r1
    7e24:	4c03      	ldr	r4, [pc, #12]	; (7e34 <__aeabi_ddiv+0x664>)
    7e26:	e5a1      	b.n	796c <__aeabi_ddiv+0x19c>
    7e28:	000003ff 	.word	0x000003ff
    7e2c:	feffffff 	.word	0xfeffffff
    7e30:	000007fe 	.word	0x000007fe
    7e34:	000007ff 	.word	0x000007ff

00007e38 <__eqdf2>:
    7e38:	b5f0      	push	{r4, r5, r6, r7, lr}
    7e3a:	464f      	mov	r7, r9
    7e3c:	4646      	mov	r6, r8
    7e3e:	46d6      	mov	lr, sl
    7e40:	005c      	lsls	r4, r3, #1
    7e42:	b5c0      	push	{r6, r7, lr}
    7e44:	031f      	lsls	r7, r3, #12
    7e46:	0fdb      	lsrs	r3, r3, #31
    7e48:	469a      	mov	sl, r3
    7e4a:	4b17      	ldr	r3, [pc, #92]	; (7ea8 <__eqdf2+0x70>)
    7e4c:	030e      	lsls	r6, r1, #12
    7e4e:	004d      	lsls	r5, r1, #1
    7e50:	4684      	mov	ip, r0
    7e52:	4680      	mov	r8, r0
    7e54:	0b36      	lsrs	r6, r6, #12
    7e56:	0d6d      	lsrs	r5, r5, #21
    7e58:	0fc9      	lsrs	r1, r1, #31
    7e5a:	4691      	mov	r9, r2
    7e5c:	0b3f      	lsrs	r7, r7, #12
    7e5e:	0d64      	lsrs	r4, r4, #21
    7e60:	2001      	movs	r0, #1
    7e62:	429d      	cmp	r5, r3
    7e64:	d008      	beq.n	7e78 <__eqdf2+0x40>
    7e66:	429c      	cmp	r4, r3
    7e68:	d001      	beq.n	7e6e <__eqdf2+0x36>
    7e6a:	42a5      	cmp	r5, r4
    7e6c:	d00b      	beq.n	7e86 <__eqdf2+0x4e>
    7e6e:	bc1c      	pop	{r2, r3, r4}
    7e70:	4690      	mov	r8, r2
    7e72:	4699      	mov	r9, r3
    7e74:	46a2      	mov	sl, r4
    7e76:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7e78:	4663      	mov	r3, ip
    7e7a:	4333      	orrs	r3, r6
    7e7c:	d1f7      	bne.n	7e6e <__eqdf2+0x36>
    7e7e:	42ac      	cmp	r4, r5
    7e80:	d1f5      	bne.n	7e6e <__eqdf2+0x36>
    7e82:	433a      	orrs	r2, r7
    7e84:	d1f3      	bne.n	7e6e <__eqdf2+0x36>
    7e86:	2001      	movs	r0, #1
    7e88:	42be      	cmp	r6, r7
    7e8a:	d1f0      	bne.n	7e6e <__eqdf2+0x36>
    7e8c:	45c8      	cmp	r8, r9
    7e8e:	d1ee      	bne.n	7e6e <__eqdf2+0x36>
    7e90:	4551      	cmp	r1, sl
    7e92:	d007      	beq.n	7ea4 <__eqdf2+0x6c>
    7e94:	2d00      	cmp	r5, #0
    7e96:	d1ea      	bne.n	7e6e <__eqdf2+0x36>
    7e98:	4663      	mov	r3, ip
    7e9a:	431e      	orrs	r6, r3
    7e9c:	0030      	movs	r0, r6
    7e9e:	1e46      	subs	r6, r0, #1
    7ea0:	41b0      	sbcs	r0, r6
    7ea2:	e7e4      	b.n	7e6e <__eqdf2+0x36>
    7ea4:	2000      	movs	r0, #0
    7ea6:	e7e2      	b.n	7e6e <__eqdf2+0x36>
    7ea8:	000007ff 	.word	0x000007ff

00007eac <__gedf2>:
    7eac:	b5f0      	push	{r4, r5, r6, r7, lr}
    7eae:	4645      	mov	r5, r8
    7eb0:	46de      	mov	lr, fp
    7eb2:	4657      	mov	r7, sl
    7eb4:	464e      	mov	r6, r9
    7eb6:	b5e0      	push	{r5, r6, r7, lr}
    7eb8:	031f      	lsls	r7, r3, #12
    7eba:	0b3d      	lsrs	r5, r7, #12
    7ebc:	4f2c      	ldr	r7, [pc, #176]	; (7f70 <__gedf2+0xc4>)
    7ebe:	030e      	lsls	r6, r1, #12
    7ec0:	004c      	lsls	r4, r1, #1
    7ec2:	46ab      	mov	fp, r5
    7ec4:	005d      	lsls	r5, r3, #1
    7ec6:	4684      	mov	ip, r0
    7ec8:	0b36      	lsrs	r6, r6, #12
    7eca:	0d64      	lsrs	r4, r4, #21
    7ecc:	0fc9      	lsrs	r1, r1, #31
    7ece:	4690      	mov	r8, r2
    7ed0:	0d6d      	lsrs	r5, r5, #21
    7ed2:	0fdb      	lsrs	r3, r3, #31
    7ed4:	42bc      	cmp	r4, r7
    7ed6:	d02a      	beq.n	7f2e <__gedf2+0x82>
    7ed8:	4f25      	ldr	r7, [pc, #148]	; (7f70 <__gedf2+0xc4>)
    7eda:	42bd      	cmp	r5, r7
    7edc:	d02d      	beq.n	7f3a <__gedf2+0x8e>
    7ede:	2c00      	cmp	r4, #0
    7ee0:	d10f      	bne.n	7f02 <__gedf2+0x56>
    7ee2:	4330      	orrs	r0, r6
    7ee4:	0007      	movs	r7, r0
    7ee6:	4681      	mov	r9, r0
    7ee8:	4278      	negs	r0, r7
    7eea:	4178      	adcs	r0, r7
    7eec:	b2c0      	uxtb	r0, r0
    7eee:	2d00      	cmp	r5, #0
    7ef0:	d117      	bne.n	7f22 <__gedf2+0x76>
    7ef2:	465f      	mov	r7, fp
    7ef4:	433a      	orrs	r2, r7
    7ef6:	d114      	bne.n	7f22 <__gedf2+0x76>
    7ef8:	464b      	mov	r3, r9
    7efa:	2000      	movs	r0, #0
    7efc:	2b00      	cmp	r3, #0
    7efe:	d00a      	beq.n	7f16 <__gedf2+0x6a>
    7f00:	e006      	b.n	7f10 <__gedf2+0x64>
    7f02:	2d00      	cmp	r5, #0
    7f04:	d102      	bne.n	7f0c <__gedf2+0x60>
    7f06:	4658      	mov	r0, fp
    7f08:	4302      	orrs	r2, r0
    7f0a:	d001      	beq.n	7f10 <__gedf2+0x64>
    7f0c:	4299      	cmp	r1, r3
    7f0e:	d018      	beq.n	7f42 <__gedf2+0x96>
    7f10:	4248      	negs	r0, r1
    7f12:	2101      	movs	r1, #1
    7f14:	4308      	orrs	r0, r1
    7f16:	bc3c      	pop	{r2, r3, r4, r5}
    7f18:	4690      	mov	r8, r2
    7f1a:	4699      	mov	r9, r3
    7f1c:	46a2      	mov	sl, r4
    7f1e:	46ab      	mov	fp, r5
    7f20:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7f22:	2800      	cmp	r0, #0
    7f24:	d0f2      	beq.n	7f0c <__gedf2+0x60>
    7f26:	2001      	movs	r0, #1
    7f28:	3b01      	subs	r3, #1
    7f2a:	4318      	orrs	r0, r3
    7f2c:	e7f3      	b.n	7f16 <__gedf2+0x6a>
    7f2e:	0037      	movs	r7, r6
    7f30:	4307      	orrs	r7, r0
    7f32:	d0d1      	beq.n	7ed8 <__gedf2+0x2c>
    7f34:	2002      	movs	r0, #2
    7f36:	4240      	negs	r0, r0
    7f38:	e7ed      	b.n	7f16 <__gedf2+0x6a>
    7f3a:	465f      	mov	r7, fp
    7f3c:	4317      	orrs	r7, r2
    7f3e:	d0ce      	beq.n	7ede <__gedf2+0x32>
    7f40:	e7f8      	b.n	7f34 <__gedf2+0x88>
    7f42:	42ac      	cmp	r4, r5
    7f44:	dce4      	bgt.n	7f10 <__gedf2+0x64>
    7f46:	da03      	bge.n	7f50 <__gedf2+0xa4>
    7f48:	1e48      	subs	r0, r1, #1
    7f4a:	2101      	movs	r1, #1
    7f4c:	4308      	orrs	r0, r1
    7f4e:	e7e2      	b.n	7f16 <__gedf2+0x6a>
    7f50:	455e      	cmp	r6, fp
    7f52:	d8dd      	bhi.n	7f10 <__gedf2+0x64>
    7f54:	d006      	beq.n	7f64 <__gedf2+0xb8>
    7f56:	2000      	movs	r0, #0
    7f58:	455e      	cmp	r6, fp
    7f5a:	d2dc      	bcs.n	7f16 <__gedf2+0x6a>
    7f5c:	2301      	movs	r3, #1
    7f5e:	1e48      	subs	r0, r1, #1
    7f60:	4318      	orrs	r0, r3
    7f62:	e7d8      	b.n	7f16 <__gedf2+0x6a>
    7f64:	45c4      	cmp	ip, r8
    7f66:	d8d3      	bhi.n	7f10 <__gedf2+0x64>
    7f68:	2000      	movs	r0, #0
    7f6a:	45c4      	cmp	ip, r8
    7f6c:	d3f6      	bcc.n	7f5c <__gedf2+0xb0>
    7f6e:	e7d2      	b.n	7f16 <__gedf2+0x6a>
    7f70:	000007ff 	.word	0x000007ff

00007f74 <__ledf2>:
    7f74:	b5f0      	push	{r4, r5, r6, r7, lr}
    7f76:	464e      	mov	r6, r9
    7f78:	4645      	mov	r5, r8
    7f7a:	46de      	mov	lr, fp
    7f7c:	4657      	mov	r7, sl
    7f7e:	005c      	lsls	r4, r3, #1
    7f80:	b5e0      	push	{r5, r6, r7, lr}
    7f82:	031f      	lsls	r7, r3, #12
    7f84:	0fdb      	lsrs	r3, r3, #31
    7f86:	4699      	mov	r9, r3
    7f88:	4b2a      	ldr	r3, [pc, #168]	; (8034 <__ledf2+0xc0>)
    7f8a:	030e      	lsls	r6, r1, #12
    7f8c:	004d      	lsls	r5, r1, #1
    7f8e:	0fc9      	lsrs	r1, r1, #31
    7f90:	4684      	mov	ip, r0
    7f92:	0b36      	lsrs	r6, r6, #12
    7f94:	0d6d      	lsrs	r5, r5, #21
    7f96:	468b      	mov	fp, r1
    7f98:	4690      	mov	r8, r2
    7f9a:	0b3f      	lsrs	r7, r7, #12
    7f9c:	0d64      	lsrs	r4, r4, #21
    7f9e:	429d      	cmp	r5, r3
    7fa0:	d020      	beq.n	7fe4 <__ledf2+0x70>
    7fa2:	4b24      	ldr	r3, [pc, #144]	; (8034 <__ledf2+0xc0>)
    7fa4:	429c      	cmp	r4, r3
    7fa6:	d022      	beq.n	7fee <__ledf2+0x7a>
    7fa8:	2d00      	cmp	r5, #0
    7faa:	d112      	bne.n	7fd2 <__ledf2+0x5e>
    7fac:	4330      	orrs	r0, r6
    7fae:	4243      	negs	r3, r0
    7fb0:	4143      	adcs	r3, r0
    7fb2:	b2db      	uxtb	r3, r3
    7fb4:	2c00      	cmp	r4, #0
    7fb6:	d01f      	beq.n	7ff8 <__ledf2+0x84>
    7fb8:	2b00      	cmp	r3, #0
    7fba:	d00c      	beq.n	7fd6 <__ledf2+0x62>
    7fbc:	464b      	mov	r3, r9
    7fbe:	2001      	movs	r0, #1
    7fc0:	3b01      	subs	r3, #1
    7fc2:	4303      	orrs	r3, r0
    7fc4:	0018      	movs	r0, r3
    7fc6:	bc3c      	pop	{r2, r3, r4, r5}
    7fc8:	4690      	mov	r8, r2
    7fca:	4699      	mov	r9, r3
    7fcc:	46a2      	mov	sl, r4
    7fce:	46ab      	mov	fp, r5
    7fd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7fd2:	2c00      	cmp	r4, #0
    7fd4:	d016      	beq.n	8004 <__ledf2+0x90>
    7fd6:	45cb      	cmp	fp, r9
    7fd8:	d017      	beq.n	800a <__ledf2+0x96>
    7fda:	465b      	mov	r3, fp
    7fdc:	4259      	negs	r1, r3
    7fde:	2301      	movs	r3, #1
    7fe0:	430b      	orrs	r3, r1
    7fe2:	e7ef      	b.n	7fc4 <__ledf2+0x50>
    7fe4:	0031      	movs	r1, r6
    7fe6:	2302      	movs	r3, #2
    7fe8:	4301      	orrs	r1, r0
    7fea:	d1eb      	bne.n	7fc4 <__ledf2+0x50>
    7fec:	e7d9      	b.n	7fa2 <__ledf2+0x2e>
    7fee:	0039      	movs	r1, r7
    7ff0:	2302      	movs	r3, #2
    7ff2:	4311      	orrs	r1, r2
    7ff4:	d1e6      	bne.n	7fc4 <__ledf2+0x50>
    7ff6:	e7d7      	b.n	7fa8 <__ledf2+0x34>
    7ff8:	433a      	orrs	r2, r7
    7ffa:	d1dd      	bne.n	7fb8 <__ledf2+0x44>
    7ffc:	2300      	movs	r3, #0
    7ffe:	2800      	cmp	r0, #0
    8000:	d0e0      	beq.n	7fc4 <__ledf2+0x50>
    8002:	e7ea      	b.n	7fda <__ledf2+0x66>
    8004:	433a      	orrs	r2, r7
    8006:	d1e6      	bne.n	7fd6 <__ledf2+0x62>
    8008:	e7e7      	b.n	7fda <__ledf2+0x66>
    800a:	42a5      	cmp	r5, r4
    800c:	dce5      	bgt.n	7fda <__ledf2+0x66>
    800e:	db05      	blt.n	801c <__ledf2+0xa8>
    8010:	42be      	cmp	r6, r7
    8012:	d8e2      	bhi.n	7fda <__ledf2+0x66>
    8014:	d007      	beq.n	8026 <__ledf2+0xb2>
    8016:	2300      	movs	r3, #0
    8018:	42be      	cmp	r6, r7
    801a:	d2d3      	bcs.n	7fc4 <__ledf2+0x50>
    801c:	4659      	mov	r1, fp
    801e:	2301      	movs	r3, #1
    8020:	3901      	subs	r1, #1
    8022:	430b      	orrs	r3, r1
    8024:	e7ce      	b.n	7fc4 <__ledf2+0x50>
    8026:	45c4      	cmp	ip, r8
    8028:	d8d7      	bhi.n	7fda <__ledf2+0x66>
    802a:	2300      	movs	r3, #0
    802c:	45c4      	cmp	ip, r8
    802e:	d3f5      	bcc.n	801c <__ledf2+0xa8>
    8030:	e7c8      	b.n	7fc4 <__ledf2+0x50>
    8032:	46c0      	nop			; (mov r8, r8)
    8034:	000007ff 	.word	0x000007ff

00008038 <__aeabi_dmul>:
    8038:	b5f0      	push	{r4, r5, r6, r7, lr}
    803a:	4657      	mov	r7, sl
    803c:	4645      	mov	r5, r8
    803e:	46de      	mov	lr, fp
    8040:	464e      	mov	r6, r9
    8042:	b5e0      	push	{r5, r6, r7, lr}
    8044:	030c      	lsls	r4, r1, #12
    8046:	4698      	mov	r8, r3
    8048:	004e      	lsls	r6, r1, #1
    804a:	0b23      	lsrs	r3, r4, #12
    804c:	b087      	sub	sp, #28
    804e:	0007      	movs	r7, r0
    8050:	4692      	mov	sl, r2
    8052:	469b      	mov	fp, r3
    8054:	0d76      	lsrs	r6, r6, #21
    8056:	0fcd      	lsrs	r5, r1, #31
    8058:	2e00      	cmp	r6, #0
    805a:	d06b      	beq.n	8134 <__aeabi_dmul+0xfc>
    805c:	4b6d      	ldr	r3, [pc, #436]	; (8214 <__aeabi_dmul+0x1dc>)
    805e:	429e      	cmp	r6, r3
    8060:	d035      	beq.n	80ce <__aeabi_dmul+0x96>
    8062:	2480      	movs	r4, #128	; 0x80
    8064:	465b      	mov	r3, fp
    8066:	0f42      	lsrs	r2, r0, #29
    8068:	0424      	lsls	r4, r4, #16
    806a:	00db      	lsls	r3, r3, #3
    806c:	4314      	orrs	r4, r2
    806e:	431c      	orrs	r4, r3
    8070:	00c3      	lsls	r3, r0, #3
    8072:	4699      	mov	r9, r3
    8074:	4b68      	ldr	r3, [pc, #416]	; (8218 <__aeabi_dmul+0x1e0>)
    8076:	46a3      	mov	fp, r4
    8078:	469c      	mov	ip, r3
    807a:	2300      	movs	r3, #0
    807c:	2700      	movs	r7, #0
    807e:	4466      	add	r6, ip
    8080:	9302      	str	r3, [sp, #8]
    8082:	4643      	mov	r3, r8
    8084:	031c      	lsls	r4, r3, #12
    8086:	005a      	lsls	r2, r3, #1
    8088:	0fdb      	lsrs	r3, r3, #31
    808a:	4650      	mov	r0, sl
    808c:	0b24      	lsrs	r4, r4, #12
    808e:	0d52      	lsrs	r2, r2, #21
    8090:	4698      	mov	r8, r3
    8092:	d100      	bne.n	8096 <__aeabi_dmul+0x5e>
    8094:	e076      	b.n	8184 <__aeabi_dmul+0x14c>
    8096:	4b5f      	ldr	r3, [pc, #380]	; (8214 <__aeabi_dmul+0x1dc>)
    8098:	429a      	cmp	r2, r3
    809a:	d06d      	beq.n	8178 <__aeabi_dmul+0x140>
    809c:	2380      	movs	r3, #128	; 0x80
    809e:	0f41      	lsrs	r1, r0, #29
    80a0:	041b      	lsls	r3, r3, #16
    80a2:	430b      	orrs	r3, r1
    80a4:	495c      	ldr	r1, [pc, #368]	; (8218 <__aeabi_dmul+0x1e0>)
    80a6:	00e4      	lsls	r4, r4, #3
    80a8:	468c      	mov	ip, r1
    80aa:	431c      	orrs	r4, r3
    80ac:	00c3      	lsls	r3, r0, #3
    80ae:	2000      	movs	r0, #0
    80b0:	4462      	add	r2, ip
    80b2:	4641      	mov	r1, r8
    80b4:	18b6      	adds	r6, r6, r2
    80b6:	4069      	eors	r1, r5
    80b8:	1c72      	adds	r2, r6, #1
    80ba:	9101      	str	r1, [sp, #4]
    80bc:	4694      	mov	ip, r2
    80be:	4307      	orrs	r7, r0
    80c0:	2f0f      	cmp	r7, #15
    80c2:	d900      	bls.n	80c6 <__aeabi_dmul+0x8e>
    80c4:	e0b0      	b.n	8228 <__aeabi_dmul+0x1f0>
    80c6:	4a55      	ldr	r2, [pc, #340]	; (821c <__aeabi_dmul+0x1e4>)
    80c8:	00bf      	lsls	r7, r7, #2
    80ca:	59d2      	ldr	r2, [r2, r7]
    80cc:	4697      	mov	pc, r2
    80ce:	465b      	mov	r3, fp
    80d0:	4303      	orrs	r3, r0
    80d2:	4699      	mov	r9, r3
    80d4:	d000      	beq.n	80d8 <__aeabi_dmul+0xa0>
    80d6:	e087      	b.n	81e8 <__aeabi_dmul+0x1b0>
    80d8:	2300      	movs	r3, #0
    80da:	469b      	mov	fp, r3
    80dc:	3302      	adds	r3, #2
    80de:	2708      	movs	r7, #8
    80e0:	9302      	str	r3, [sp, #8]
    80e2:	e7ce      	b.n	8082 <__aeabi_dmul+0x4a>
    80e4:	4642      	mov	r2, r8
    80e6:	9201      	str	r2, [sp, #4]
    80e8:	2802      	cmp	r0, #2
    80ea:	d067      	beq.n	81bc <__aeabi_dmul+0x184>
    80ec:	2803      	cmp	r0, #3
    80ee:	d100      	bne.n	80f2 <__aeabi_dmul+0xba>
    80f0:	e20e      	b.n	8510 <__aeabi_dmul+0x4d8>
    80f2:	2801      	cmp	r0, #1
    80f4:	d000      	beq.n	80f8 <__aeabi_dmul+0xc0>
    80f6:	e162      	b.n	83be <__aeabi_dmul+0x386>
    80f8:	2300      	movs	r3, #0
    80fa:	2400      	movs	r4, #0
    80fc:	2200      	movs	r2, #0
    80fe:	4699      	mov	r9, r3
    8100:	9901      	ldr	r1, [sp, #4]
    8102:	4001      	ands	r1, r0
    8104:	b2cd      	uxtb	r5, r1
    8106:	2100      	movs	r1, #0
    8108:	0312      	lsls	r2, r2, #12
    810a:	0d0b      	lsrs	r3, r1, #20
    810c:	0b12      	lsrs	r2, r2, #12
    810e:	051b      	lsls	r3, r3, #20
    8110:	4313      	orrs	r3, r2
    8112:	4a43      	ldr	r2, [pc, #268]	; (8220 <__aeabi_dmul+0x1e8>)
    8114:	0524      	lsls	r4, r4, #20
    8116:	4013      	ands	r3, r2
    8118:	431c      	orrs	r4, r3
    811a:	0064      	lsls	r4, r4, #1
    811c:	07ed      	lsls	r5, r5, #31
    811e:	0864      	lsrs	r4, r4, #1
    8120:	432c      	orrs	r4, r5
    8122:	4648      	mov	r0, r9
    8124:	0021      	movs	r1, r4
    8126:	b007      	add	sp, #28
    8128:	bc3c      	pop	{r2, r3, r4, r5}
    812a:	4690      	mov	r8, r2
    812c:	4699      	mov	r9, r3
    812e:	46a2      	mov	sl, r4
    8130:	46ab      	mov	fp, r5
    8132:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8134:	4303      	orrs	r3, r0
    8136:	4699      	mov	r9, r3
    8138:	d04f      	beq.n	81da <__aeabi_dmul+0x1a2>
    813a:	465b      	mov	r3, fp
    813c:	2b00      	cmp	r3, #0
    813e:	d100      	bne.n	8142 <__aeabi_dmul+0x10a>
    8140:	e189      	b.n	8456 <__aeabi_dmul+0x41e>
    8142:	4658      	mov	r0, fp
    8144:	f000 fd9a 	bl	8c7c <__clzsi2>
    8148:	0003      	movs	r3, r0
    814a:	3b0b      	subs	r3, #11
    814c:	2b1c      	cmp	r3, #28
    814e:	dd00      	ble.n	8152 <__aeabi_dmul+0x11a>
    8150:	e17a      	b.n	8448 <__aeabi_dmul+0x410>
    8152:	221d      	movs	r2, #29
    8154:	1ad3      	subs	r3, r2, r3
    8156:	003a      	movs	r2, r7
    8158:	0001      	movs	r1, r0
    815a:	465c      	mov	r4, fp
    815c:	40da      	lsrs	r2, r3
    815e:	3908      	subs	r1, #8
    8160:	408c      	lsls	r4, r1
    8162:	0013      	movs	r3, r2
    8164:	408f      	lsls	r7, r1
    8166:	4323      	orrs	r3, r4
    8168:	469b      	mov	fp, r3
    816a:	46b9      	mov	r9, r7
    816c:	2300      	movs	r3, #0
    816e:	4e2d      	ldr	r6, [pc, #180]	; (8224 <__aeabi_dmul+0x1ec>)
    8170:	2700      	movs	r7, #0
    8172:	1a36      	subs	r6, r6, r0
    8174:	9302      	str	r3, [sp, #8]
    8176:	e784      	b.n	8082 <__aeabi_dmul+0x4a>
    8178:	4653      	mov	r3, sl
    817a:	4323      	orrs	r3, r4
    817c:	d12a      	bne.n	81d4 <__aeabi_dmul+0x19c>
    817e:	2400      	movs	r4, #0
    8180:	2002      	movs	r0, #2
    8182:	e796      	b.n	80b2 <__aeabi_dmul+0x7a>
    8184:	4653      	mov	r3, sl
    8186:	4323      	orrs	r3, r4
    8188:	d020      	beq.n	81cc <__aeabi_dmul+0x194>
    818a:	2c00      	cmp	r4, #0
    818c:	d100      	bne.n	8190 <__aeabi_dmul+0x158>
    818e:	e157      	b.n	8440 <__aeabi_dmul+0x408>
    8190:	0020      	movs	r0, r4
    8192:	f000 fd73 	bl	8c7c <__clzsi2>
    8196:	0003      	movs	r3, r0
    8198:	3b0b      	subs	r3, #11
    819a:	2b1c      	cmp	r3, #28
    819c:	dd00      	ble.n	81a0 <__aeabi_dmul+0x168>
    819e:	e149      	b.n	8434 <__aeabi_dmul+0x3fc>
    81a0:	211d      	movs	r1, #29
    81a2:	1acb      	subs	r3, r1, r3
    81a4:	4651      	mov	r1, sl
    81a6:	0002      	movs	r2, r0
    81a8:	40d9      	lsrs	r1, r3
    81aa:	4653      	mov	r3, sl
    81ac:	3a08      	subs	r2, #8
    81ae:	4094      	lsls	r4, r2
    81b0:	4093      	lsls	r3, r2
    81b2:	430c      	orrs	r4, r1
    81b4:	4a1b      	ldr	r2, [pc, #108]	; (8224 <__aeabi_dmul+0x1ec>)
    81b6:	1a12      	subs	r2, r2, r0
    81b8:	2000      	movs	r0, #0
    81ba:	e77a      	b.n	80b2 <__aeabi_dmul+0x7a>
    81bc:	2501      	movs	r5, #1
    81be:	9b01      	ldr	r3, [sp, #4]
    81c0:	4c14      	ldr	r4, [pc, #80]	; (8214 <__aeabi_dmul+0x1dc>)
    81c2:	401d      	ands	r5, r3
    81c4:	2300      	movs	r3, #0
    81c6:	2200      	movs	r2, #0
    81c8:	4699      	mov	r9, r3
    81ca:	e79c      	b.n	8106 <__aeabi_dmul+0xce>
    81cc:	2400      	movs	r4, #0
    81ce:	2200      	movs	r2, #0
    81d0:	2001      	movs	r0, #1
    81d2:	e76e      	b.n	80b2 <__aeabi_dmul+0x7a>
    81d4:	4653      	mov	r3, sl
    81d6:	2003      	movs	r0, #3
    81d8:	e76b      	b.n	80b2 <__aeabi_dmul+0x7a>
    81da:	2300      	movs	r3, #0
    81dc:	469b      	mov	fp, r3
    81de:	3301      	adds	r3, #1
    81e0:	2704      	movs	r7, #4
    81e2:	2600      	movs	r6, #0
    81e4:	9302      	str	r3, [sp, #8]
    81e6:	e74c      	b.n	8082 <__aeabi_dmul+0x4a>
    81e8:	2303      	movs	r3, #3
    81ea:	4681      	mov	r9, r0
    81ec:	270c      	movs	r7, #12
    81ee:	9302      	str	r3, [sp, #8]
    81f0:	e747      	b.n	8082 <__aeabi_dmul+0x4a>
    81f2:	2280      	movs	r2, #128	; 0x80
    81f4:	2300      	movs	r3, #0
    81f6:	2500      	movs	r5, #0
    81f8:	0312      	lsls	r2, r2, #12
    81fa:	4699      	mov	r9, r3
    81fc:	4c05      	ldr	r4, [pc, #20]	; (8214 <__aeabi_dmul+0x1dc>)
    81fe:	e782      	b.n	8106 <__aeabi_dmul+0xce>
    8200:	465c      	mov	r4, fp
    8202:	464b      	mov	r3, r9
    8204:	9802      	ldr	r0, [sp, #8]
    8206:	e76f      	b.n	80e8 <__aeabi_dmul+0xb0>
    8208:	465c      	mov	r4, fp
    820a:	464b      	mov	r3, r9
    820c:	9501      	str	r5, [sp, #4]
    820e:	9802      	ldr	r0, [sp, #8]
    8210:	e76a      	b.n	80e8 <__aeabi_dmul+0xb0>
    8212:	46c0      	nop			; (mov r8, r8)
    8214:	000007ff 	.word	0x000007ff
    8218:	fffffc01 	.word	0xfffffc01
    821c:	0000b7e8 	.word	0x0000b7e8
    8220:	800fffff 	.word	0x800fffff
    8224:	fffffc0d 	.word	0xfffffc0d
    8228:	464a      	mov	r2, r9
    822a:	4649      	mov	r1, r9
    822c:	0c17      	lsrs	r7, r2, #16
    822e:	0c1a      	lsrs	r2, r3, #16
    8230:	041b      	lsls	r3, r3, #16
    8232:	0c1b      	lsrs	r3, r3, #16
    8234:	0408      	lsls	r0, r1, #16
    8236:	0019      	movs	r1, r3
    8238:	0c00      	lsrs	r0, r0, #16
    823a:	4341      	muls	r1, r0
    823c:	0015      	movs	r5, r2
    823e:	4688      	mov	r8, r1
    8240:	0019      	movs	r1, r3
    8242:	437d      	muls	r5, r7
    8244:	4379      	muls	r1, r7
    8246:	9503      	str	r5, [sp, #12]
    8248:	4689      	mov	r9, r1
    824a:	0029      	movs	r1, r5
    824c:	0015      	movs	r5, r2
    824e:	4345      	muls	r5, r0
    8250:	444d      	add	r5, r9
    8252:	9502      	str	r5, [sp, #8]
    8254:	4645      	mov	r5, r8
    8256:	0c2d      	lsrs	r5, r5, #16
    8258:	46aa      	mov	sl, r5
    825a:	9d02      	ldr	r5, [sp, #8]
    825c:	4455      	add	r5, sl
    825e:	45a9      	cmp	r9, r5
    8260:	d906      	bls.n	8270 <__aeabi_dmul+0x238>
    8262:	468a      	mov	sl, r1
    8264:	2180      	movs	r1, #128	; 0x80
    8266:	0249      	lsls	r1, r1, #9
    8268:	4689      	mov	r9, r1
    826a:	44ca      	add	sl, r9
    826c:	4651      	mov	r1, sl
    826e:	9103      	str	r1, [sp, #12]
    8270:	0c29      	lsrs	r1, r5, #16
    8272:	9104      	str	r1, [sp, #16]
    8274:	4641      	mov	r1, r8
    8276:	0409      	lsls	r1, r1, #16
    8278:	042d      	lsls	r5, r5, #16
    827a:	0c09      	lsrs	r1, r1, #16
    827c:	4688      	mov	r8, r1
    827e:	0029      	movs	r1, r5
    8280:	0c25      	lsrs	r5, r4, #16
    8282:	0424      	lsls	r4, r4, #16
    8284:	4441      	add	r1, r8
    8286:	0c24      	lsrs	r4, r4, #16
    8288:	9105      	str	r1, [sp, #20]
    828a:	0021      	movs	r1, r4
    828c:	4341      	muls	r1, r0
    828e:	4688      	mov	r8, r1
    8290:	0021      	movs	r1, r4
    8292:	4379      	muls	r1, r7
    8294:	468a      	mov	sl, r1
    8296:	4368      	muls	r0, r5
    8298:	4641      	mov	r1, r8
    829a:	4450      	add	r0, sl
    829c:	4681      	mov	r9, r0
    829e:	0c08      	lsrs	r0, r1, #16
    82a0:	4448      	add	r0, r9
    82a2:	436f      	muls	r7, r5
    82a4:	4582      	cmp	sl, r0
    82a6:	d903      	bls.n	82b0 <__aeabi_dmul+0x278>
    82a8:	2180      	movs	r1, #128	; 0x80
    82aa:	0249      	lsls	r1, r1, #9
    82ac:	4689      	mov	r9, r1
    82ae:	444f      	add	r7, r9
    82b0:	0c01      	lsrs	r1, r0, #16
    82b2:	4689      	mov	r9, r1
    82b4:	0039      	movs	r1, r7
    82b6:	4449      	add	r1, r9
    82b8:	9102      	str	r1, [sp, #8]
    82ba:	4641      	mov	r1, r8
    82bc:	040f      	lsls	r7, r1, #16
    82be:	9904      	ldr	r1, [sp, #16]
    82c0:	0c3f      	lsrs	r7, r7, #16
    82c2:	4688      	mov	r8, r1
    82c4:	0400      	lsls	r0, r0, #16
    82c6:	19c0      	adds	r0, r0, r7
    82c8:	4480      	add	r8, r0
    82ca:	4641      	mov	r1, r8
    82cc:	9104      	str	r1, [sp, #16]
    82ce:	4659      	mov	r1, fp
    82d0:	0c0f      	lsrs	r7, r1, #16
    82d2:	0409      	lsls	r1, r1, #16
    82d4:	0c09      	lsrs	r1, r1, #16
    82d6:	4688      	mov	r8, r1
    82d8:	4359      	muls	r1, r3
    82da:	468a      	mov	sl, r1
    82dc:	0039      	movs	r1, r7
    82de:	4351      	muls	r1, r2
    82e0:	4689      	mov	r9, r1
    82e2:	4641      	mov	r1, r8
    82e4:	434a      	muls	r2, r1
    82e6:	4651      	mov	r1, sl
    82e8:	0c09      	lsrs	r1, r1, #16
    82ea:	468b      	mov	fp, r1
    82ec:	437b      	muls	r3, r7
    82ee:	18d2      	adds	r2, r2, r3
    82f0:	445a      	add	r2, fp
    82f2:	4293      	cmp	r3, r2
    82f4:	d903      	bls.n	82fe <__aeabi_dmul+0x2c6>
    82f6:	2380      	movs	r3, #128	; 0x80
    82f8:	025b      	lsls	r3, r3, #9
    82fa:	469b      	mov	fp, r3
    82fc:	44d9      	add	r9, fp
    82fe:	4651      	mov	r1, sl
    8300:	0409      	lsls	r1, r1, #16
    8302:	0c09      	lsrs	r1, r1, #16
    8304:	468a      	mov	sl, r1
    8306:	4641      	mov	r1, r8
    8308:	4361      	muls	r1, r4
    830a:	437c      	muls	r4, r7
    830c:	0c13      	lsrs	r3, r2, #16
    830e:	0412      	lsls	r2, r2, #16
    8310:	444b      	add	r3, r9
    8312:	4452      	add	r2, sl
    8314:	46a1      	mov	r9, r4
    8316:	468a      	mov	sl, r1
    8318:	003c      	movs	r4, r7
    831a:	4641      	mov	r1, r8
    831c:	436c      	muls	r4, r5
    831e:	434d      	muls	r5, r1
    8320:	4651      	mov	r1, sl
    8322:	444d      	add	r5, r9
    8324:	0c0f      	lsrs	r7, r1, #16
    8326:	197d      	adds	r5, r7, r5
    8328:	45a9      	cmp	r9, r5
    832a:	d903      	bls.n	8334 <__aeabi_dmul+0x2fc>
    832c:	2180      	movs	r1, #128	; 0x80
    832e:	0249      	lsls	r1, r1, #9
    8330:	4688      	mov	r8, r1
    8332:	4444      	add	r4, r8
    8334:	9f04      	ldr	r7, [sp, #16]
    8336:	9903      	ldr	r1, [sp, #12]
    8338:	46b8      	mov	r8, r7
    833a:	4441      	add	r1, r8
    833c:	468b      	mov	fp, r1
    833e:	4583      	cmp	fp, r0
    8340:	4180      	sbcs	r0, r0
    8342:	4241      	negs	r1, r0
    8344:	4688      	mov	r8, r1
    8346:	4651      	mov	r1, sl
    8348:	0408      	lsls	r0, r1, #16
    834a:	042f      	lsls	r7, r5, #16
    834c:	0c00      	lsrs	r0, r0, #16
    834e:	183f      	adds	r7, r7, r0
    8350:	4658      	mov	r0, fp
    8352:	9902      	ldr	r1, [sp, #8]
    8354:	1810      	adds	r0, r2, r0
    8356:	4689      	mov	r9, r1
    8358:	4290      	cmp	r0, r2
    835a:	4192      	sbcs	r2, r2
    835c:	444f      	add	r7, r9
    835e:	46ba      	mov	sl, r7
    8360:	4252      	negs	r2, r2
    8362:	4699      	mov	r9, r3
    8364:	4693      	mov	fp, r2
    8366:	44c2      	add	sl, r8
    8368:	44d1      	add	r9, sl
    836a:	44cb      	add	fp, r9
    836c:	428f      	cmp	r7, r1
    836e:	41bf      	sbcs	r7, r7
    8370:	45c2      	cmp	sl, r8
    8372:	4189      	sbcs	r1, r1
    8374:	4599      	cmp	r9, r3
    8376:	419b      	sbcs	r3, r3
    8378:	4593      	cmp	fp, r2
    837a:	4192      	sbcs	r2, r2
    837c:	427f      	negs	r7, r7
    837e:	4249      	negs	r1, r1
    8380:	0c2d      	lsrs	r5, r5, #16
    8382:	4252      	negs	r2, r2
    8384:	430f      	orrs	r7, r1
    8386:	425b      	negs	r3, r3
    8388:	4313      	orrs	r3, r2
    838a:	197f      	adds	r7, r7, r5
    838c:	18ff      	adds	r7, r7, r3
    838e:	465b      	mov	r3, fp
    8390:	193c      	adds	r4, r7, r4
    8392:	0ddb      	lsrs	r3, r3, #23
    8394:	9a05      	ldr	r2, [sp, #20]
    8396:	0264      	lsls	r4, r4, #9
    8398:	431c      	orrs	r4, r3
    839a:	0243      	lsls	r3, r0, #9
    839c:	4313      	orrs	r3, r2
    839e:	1e5d      	subs	r5, r3, #1
    83a0:	41ab      	sbcs	r3, r5
    83a2:	465a      	mov	r2, fp
    83a4:	0dc0      	lsrs	r0, r0, #23
    83a6:	4303      	orrs	r3, r0
    83a8:	0252      	lsls	r2, r2, #9
    83aa:	4313      	orrs	r3, r2
    83ac:	01e2      	lsls	r2, r4, #7
    83ae:	d556      	bpl.n	845e <__aeabi_dmul+0x426>
    83b0:	2001      	movs	r0, #1
    83b2:	085a      	lsrs	r2, r3, #1
    83b4:	4003      	ands	r3, r0
    83b6:	4313      	orrs	r3, r2
    83b8:	07e2      	lsls	r2, r4, #31
    83ba:	4313      	orrs	r3, r2
    83bc:	0864      	lsrs	r4, r4, #1
    83be:	485a      	ldr	r0, [pc, #360]	; (8528 <__aeabi_dmul+0x4f0>)
    83c0:	4460      	add	r0, ip
    83c2:	2800      	cmp	r0, #0
    83c4:	dd4d      	ble.n	8462 <__aeabi_dmul+0x42a>
    83c6:	075a      	lsls	r2, r3, #29
    83c8:	d009      	beq.n	83de <__aeabi_dmul+0x3a6>
    83ca:	220f      	movs	r2, #15
    83cc:	401a      	ands	r2, r3
    83ce:	2a04      	cmp	r2, #4
    83d0:	d005      	beq.n	83de <__aeabi_dmul+0x3a6>
    83d2:	1d1a      	adds	r2, r3, #4
    83d4:	429a      	cmp	r2, r3
    83d6:	419b      	sbcs	r3, r3
    83d8:	425b      	negs	r3, r3
    83da:	18e4      	adds	r4, r4, r3
    83dc:	0013      	movs	r3, r2
    83de:	01e2      	lsls	r2, r4, #7
    83e0:	d504      	bpl.n	83ec <__aeabi_dmul+0x3b4>
    83e2:	2080      	movs	r0, #128	; 0x80
    83e4:	4a51      	ldr	r2, [pc, #324]	; (852c <__aeabi_dmul+0x4f4>)
    83e6:	00c0      	lsls	r0, r0, #3
    83e8:	4014      	ands	r4, r2
    83ea:	4460      	add	r0, ip
    83ec:	4a50      	ldr	r2, [pc, #320]	; (8530 <__aeabi_dmul+0x4f8>)
    83ee:	4290      	cmp	r0, r2
    83f0:	dd00      	ble.n	83f4 <__aeabi_dmul+0x3bc>
    83f2:	e6e3      	b.n	81bc <__aeabi_dmul+0x184>
    83f4:	2501      	movs	r5, #1
    83f6:	08db      	lsrs	r3, r3, #3
    83f8:	0762      	lsls	r2, r4, #29
    83fa:	431a      	orrs	r2, r3
    83fc:	0264      	lsls	r4, r4, #9
    83fe:	9b01      	ldr	r3, [sp, #4]
    8400:	4691      	mov	r9, r2
    8402:	0b22      	lsrs	r2, r4, #12
    8404:	0544      	lsls	r4, r0, #21
    8406:	0d64      	lsrs	r4, r4, #21
    8408:	401d      	ands	r5, r3
    840a:	e67c      	b.n	8106 <__aeabi_dmul+0xce>
    840c:	2280      	movs	r2, #128	; 0x80
    840e:	4659      	mov	r1, fp
    8410:	0312      	lsls	r2, r2, #12
    8412:	4211      	tst	r1, r2
    8414:	d008      	beq.n	8428 <__aeabi_dmul+0x3f0>
    8416:	4214      	tst	r4, r2
    8418:	d106      	bne.n	8428 <__aeabi_dmul+0x3f0>
    841a:	4322      	orrs	r2, r4
    841c:	0312      	lsls	r2, r2, #12
    841e:	0b12      	lsrs	r2, r2, #12
    8420:	4645      	mov	r5, r8
    8422:	4699      	mov	r9, r3
    8424:	4c43      	ldr	r4, [pc, #268]	; (8534 <__aeabi_dmul+0x4fc>)
    8426:	e66e      	b.n	8106 <__aeabi_dmul+0xce>
    8428:	465b      	mov	r3, fp
    842a:	431a      	orrs	r2, r3
    842c:	0312      	lsls	r2, r2, #12
    842e:	0b12      	lsrs	r2, r2, #12
    8430:	4c40      	ldr	r4, [pc, #256]	; (8534 <__aeabi_dmul+0x4fc>)
    8432:	e668      	b.n	8106 <__aeabi_dmul+0xce>
    8434:	0003      	movs	r3, r0
    8436:	4654      	mov	r4, sl
    8438:	3b28      	subs	r3, #40	; 0x28
    843a:	409c      	lsls	r4, r3
    843c:	2300      	movs	r3, #0
    843e:	e6b9      	b.n	81b4 <__aeabi_dmul+0x17c>
    8440:	f000 fc1c 	bl	8c7c <__clzsi2>
    8444:	3020      	adds	r0, #32
    8446:	e6a6      	b.n	8196 <__aeabi_dmul+0x15e>
    8448:	0003      	movs	r3, r0
    844a:	3b28      	subs	r3, #40	; 0x28
    844c:	409f      	lsls	r7, r3
    844e:	2300      	movs	r3, #0
    8450:	46bb      	mov	fp, r7
    8452:	4699      	mov	r9, r3
    8454:	e68a      	b.n	816c <__aeabi_dmul+0x134>
    8456:	f000 fc11 	bl	8c7c <__clzsi2>
    845a:	3020      	adds	r0, #32
    845c:	e674      	b.n	8148 <__aeabi_dmul+0x110>
    845e:	46b4      	mov	ip, r6
    8460:	e7ad      	b.n	83be <__aeabi_dmul+0x386>
    8462:	2501      	movs	r5, #1
    8464:	1a2a      	subs	r2, r5, r0
    8466:	2a38      	cmp	r2, #56	; 0x38
    8468:	dd06      	ble.n	8478 <__aeabi_dmul+0x440>
    846a:	9b01      	ldr	r3, [sp, #4]
    846c:	2400      	movs	r4, #0
    846e:	401d      	ands	r5, r3
    8470:	2300      	movs	r3, #0
    8472:	2200      	movs	r2, #0
    8474:	4699      	mov	r9, r3
    8476:	e646      	b.n	8106 <__aeabi_dmul+0xce>
    8478:	2a1f      	cmp	r2, #31
    847a:	dc21      	bgt.n	84c0 <__aeabi_dmul+0x488>
    847c:	2520      	movs	r5, #32
    847e:	0020      	movs	r0, r4
    8480:	1aad      	subs	r5, r5, r2
    8482:	001e      	movs	r6, r3
    8484:	40ab      	lsls	r3, r5
    8486:	40a8      	lsls	r0, r5
    8488:	40d6      	lsrs	r6, r2
    848a:	1e5d      	subs	r5, r3, #1
    848c:	41ab      	sbcs	r3, r5
    848e:	4330      	orrs	r0, r6
    8490:	4318      	orrs	r0, r3
    8492:	40d4      	lsrs	r4, r2
    8494:	0743      	lsls	r3, r0, #29
    8496:	d009      	beq.n	84ac <__aeabi_dmul+0x474>
    8498:	230f      	movs	r3, #15
    849a:	4003      	ands	r3, r0
    849c:	2b04      	cmp	r3, #4
    849e:	d005      	beq.n	84ac <__aeabi_dmul+0x474>
    84a0:	0003      	movs	r3, r0
    84a2:	1d18      	adds	r0, r3, #4
    84a4:	4298      	cmp	r0, r3
    84a6:	419b      	sbcs	r3, r3
    84a8:	425b      	negs	r3, r3
    84aa:	18e4      	adds	r4, r4, r3
    84ac:	0223      	lsls	r3, r4, #8
    84ae:	d521      	bpl.n	84f4 <__aeabi_dmul+0x4bc>
    84b0:	2501      	movs	r5, #1
    84b2:	9b01      	ldr	r3, [sp, #4]
    84b4:	2401      	movs	r4, #1
    84b6:	401d      	ands	r5, r3
    84b8:	2300      	movs	r3, #0
    84ba:	2200      	movs	r2, #0
    84bc:	4699      	mov	r9, r3
    84be:	e622      	b.n	8106 <__aeabi_dmul+0xce>
    84c0:	251f      	movs	r5, #31
    84c2:	0021      	movs	r1, r4
    84c4:	426d      	negs	r5, r5
    84c6:	1a28      	subs	r0, r5, r0
    84c8:	40c1      	lsrs	r1, r0
    84ca:	0008      	movs	r0, r1
    84cc:	2a20      	cmp	r2, #32
    84ce:	d01d      	beq.n	850c <__aeabi_dmul+0x4d4>
    84d0:	355f      	adds	r5, #95	; 0x5f
    84d2:	1aaa      	subs	r2, r5, r2
    84d4:	4094      	lsls	r4, r2
    84d6:	4323      	orrs	r3, r4
    84d8:	1e5c      	subs	r4, r3, #1
    84da:	41a3      	sbcs	r3, r4
    84dc:	2507      	movs	r5, #7
    84de:	4303      	orrs	r3, r0
    84e0:	401d      	ands	r5, r3
    84e2:	2200      	movs	r2, #0
    84e4:	2d00      	cmp	r5, #0
    84e6:	d009      	beq.n	84fc <__aeabi_dmul+0x4c4>
    84e8:	220f      	movs	r2, #15
    84ea:	2400      	movs	r4, #0
    84ec:	401a      	ands	r2, r3
    84ee:	0018      	movs	r0, r3
    84f0:	2a04      	cmp	r2, #4
    84f2:	d1d6      	bne.n	84a2 <__aeabi_dmul+0x46a>
    84f4:	0003      	movs	r3, r0
    84f6:	0765      	lsls	r5, r4, #29
    84f8:	0264      	lsls	r4, r4, #9
    84fa:	0b22      	lsrs	r2, r4, #12
    84fc:	08db      	lsrs	r3, r3, #3
    84fe:	432b      	orrs	r3, r5
    8500:	2501      	movs	r5, #1
    8502:	4699      	mov	r9, r3
    8504:	9b01      	ldr	r3, [sp, #4]
    8506:	2400      	movs	r4, #0
    8508:	401d      	ands	r5, r3
    850a:	e5fc      	b.n	8106 <__aeabi_dmul+0xce>
    850c:	2400      	movs	r4, #0
    850e:	e7e2      	b.n	84d6 <__aeabi_dmul+0x49e>
    8510:	2280      	movs	r2, #128	; 0x80
    8512:	2501      	movs	r5, #1
    8514:	0312      	lsls	r2, r2, #12
    8516:	4322      	orrs	r2, r4
    8518:	9901      	ldr	r1, [sp, #4]
    851a:	0312      	lsls	r2, r2, #12
    851c:	0b12      	lsrs	r2, r2, #12
    851e:	400d      	ands	r5, r1
    8520:	4699      	mov	r9, r3
    8522:	4c04      	ldr	r4, [pc, #16]	; (8534 <__aeabi_dmul+0x4fc>)
    8524:	e5ef      	b.n	8106 <__aeabi_dmul+0xce>
    8526:	46c0      	nop			; (mov r8, r8)
    8528:	000003ff 	.word	0x000003ff
    852c:	feffffff 	.word	0xfeffffff
    8530:	000007fe 	.word	0x000007fe
    8534:	000007ff 	.word	0x000007ff

00008538 <__aeabi_dsub>:
    8538:	b5f0      	push	{r4, r5, r6, r7, lr}
    853a:	4646      	mov	r6, r8
    853c:	46d6      	mov	lr, sl
    853e:	464f      	mov	r7, r9
    8540:	030c      	lsls	r4, r1, #12
    8542:	b5c0      	push	{r6, r7, lr}
    8544:	0fcd      	lsrs	r5, r1, #31
    8546:	004e      	lsls	r6, r1, #1
    8548:	0a61      	lsrs	r1, r4, #9
    854a:	0f44      	lsrs	r4, r0, #29
    854c:	430c      	orrs	r4, r1
    854e:	00c1      	lsls	r1, r0, #3
    8550:	0058      	lsls	r0, r3, #1
    8552:	0d40      	lsrs	r0, r0, #21
    8554:	4684      	mov	ip, r0
    8556:	468a      	mov	sl, r1
    8558:	000f      	movs	r7, r1
    855a:	0319      	lsls	r1, r3, #12
    855c:	0f50      	lsrs	r0, r2, #29
    855e:	0a49      	lsrs	r1, r1, #9
    8560:	4301      	orrs	r1, r0
    8562:	48c6      	ldr	r0, [pc, #792]	; (887c <__aeabi_dsub+0x344>)
    8564:	0d76      	lsrs	r6, r6, #21
    8566:	46a8      	mov	r8, r5
    8568:	0fdb      	lsrs	r3, r3, #31
    856a:	00d2      	lsls	r2, r2, #3
    856c:	4584      	cmp	ip, r0
    856e:	d100      	bne.n	8572 <__aeabi_dsub+0x3a>
    8570:	e0d8      	b.n	8724 <__aeabi_dsub+0x1ec>
    8572:	2001      	movs	r0, #1
    8574:	4043      	eors	r3, r0
    8576:	42ab      	cmp	r3, r5
    8578:	d100      	bne.n	857c <__aeabi_dsub+0x44>
    857a:	e0a6      	b.n	86ca <__aeabi_dsub+0x192>
    857c:	4660      	mov	r0, ip
    857e:	1a35      	subs	r5, r6, r0
    8580:	2d00      	cmp	r5, #0
    8582:	dc00      	bgt.n	8586 <__aeabi_dsub+0x4e>
    8584:	e105      	b.n	8792 <__aeabi_dsub+0x25a>
    8586:	2800      	cmp	r0, #0
    8588:	d110      	bne.n	85ac <__aeabi_dsub+0x74>
    858a:	000b      	movs	r3, r1
    858c:	4313      	orrs	r3, r2
    858e:	d100      	bne.n	8592 <__aeabi_dsub+0x5a>
    8590:	e0d7      	b.n	8742 <__aeabi_dsub+0x20a>
    8592:	1e6b      	subs	r3, r5, #1
    8594:	2b00      	cmp	r3, #0
    8596:	d000      	beq.n	859a <__aeabi_dsub+0x62>
    8598:	e14b      	b.n	8832 <__aeabi_dsub+0x2fa>
    859a:	4653      	mov	r3, sl
    859c:	1a9f      	subs	r7, r3, r2
    859e:	45ba      	cmp	sl, r7
    85a0:	4180      	sbcs	r0, r0
    85a2:	1a64      	subs	r4, r4, r1
    85a4:	4240      	negs	r0, r0
    85a6:	1a24      	subs	r4, r4, r0
    85a8:	2601      	movs	r6, #1
    85aa:	e01e      	b.n	85ea <__aeabi_dsub+0xb2>
    85ac:	4bb3      	ldr	r3, [pc, #716]	; (887c <__aeabi_dsub+0x344>)
    85ae:	429e      	cmp	r6, r3
    85b0:	d048      	beq.n	8644 <__aeabi_dsub+0x10c>
    85b2:	2380      	movs	r3, #128	; 0x80
    85b4:	041b      	lsls	r3, r3, #16
    85b6:	4319      	orrs	r1, r3
    85b8:	2d38      	cmp	r5, #56	; 0x38
    85ba:	dd00      	ble.n	85be <__aeabi_dsub+0x86>
    85bc:	e119      	b.n	87f2 <__aeabi_dsub+0x2ba>
    85be:	2d1f      	cmp	r5, #31
    85c0:	dd00      	ble.n	85c4 <__aeabi_dsub+0x8c>
    85c2:	e14c      	b.n	885e <__aeabi_dsub+0x326>
    85c4:	2320      	movs	r3, #32
    85c6:	000f      	movs	r7, r1
    85c8:	1b5b      	subs	r3, r3, r5
    85ca:	0010      	movs	r0, r2
    85cc:	409a      	lsls	r2, r3
    85ce:	409f      	lsls	r7, r3
    85d0:	40e8      	lsrs	r0, r5
    85d2:	1e53      	subs	r3, r2, #1
    85d4:	419a      	sbcs	r2, r3
    85d6:	40e9      	lsrs	r1, r5
    85d8:	4307      	orrs	r7, r0
    85da:	4317      	orrs	r7, r2
    85dc:	4653      	mov	r3, sl
    85de:	1bdf      	subs	r7, r3, r7
    85e0:	1a61      	subs	r1, r4, r1
    85e2:	45ba      	cmp	sl, r7
    85e4:	41a4      	sbcs	r4, r4
    85e6:	4264      	negs	r4, r4
    85e8:	1b0c      	subs	r4, r1, r4
    85ea:	0223      	lsls	r3, r4, #8
    85ec:	d400      	bmi.n	85f0 <__aeabi_dsub+0xb8>
    85ee:	e0c5      	b.n	877c <__aeabi_dsub+0x244>
    85f0:	0264      	lsls	r4, r4, #9
    85f2:	0a65      	lsrs	r5, r4, #9
    85f4:	2d00      	cmp	r5, #0
    85f6:	d100      	bne.n	85fa <__aeabi_dsub+0xc2>
    85f8:	e0f6      	b.n	87e8 <__aeabi_dsub+0x2b0>
    85fa:	0028      	movs	r0, r5
    85fc:	f000 fb3e 	bl	8c7c <__clzsi2>
    8600:	0003      	movs	r3, r0
    8602:	3b08      	subs	r3, #8
    8604:	2b1f      	cmp	r3, #31
    8606:	dd00      	ble.n	860a <__aeabi_dsub+0xd2>
    8608:	e0e9      	b.n	87de <__aeabi_dsub+0x2a6>
    860a:	2220      	movs	r2, #32
    860c:	003c      	movs	r4, r7
    860e:	1ad2      	subs	r2, r2, r3
    8610:	409d      	lsls	r5, r3
    8612:	40d4      	lsrs	r4, r2
    8614:	409f      	lsls	r7, r3
    8616:	4325      	orrs	r5, r4
    8618:	429e      	cmp	r6, r3
    861a:	dd00      	ble.n	861e <__aeabi_dsub+0xe6>
    861c:	e0db      	b.n	87d6 <__aeabi_dsub+0x29e>
    861e:	1b9e      	subs	r6, r3, r6
    8620:	1c73      	adds	r3, r6, #1
    8622:	2b1f      	cmp	r3, #31
    8624:	dd00      	ble.n	8628 <__aeabi_dsub+0xf0>
    8626:	e10a      	b.n	883e <__aeabi_dsub+0x306>
    8628:	2220      	movs	r2, #32
    862a:	0038      	movs	r0, r7
    862c:	1ad2      	subs	r2, r2, r3
    862e:	0029      	movs	r1, r5
    8630:	4097      	lsls	r7, r2
    8632:	002c      	movs	r4, r5
    8634:	4091      	lsls	r1, r2
    8636:	40d8      	lsrs	r0, r3
    8638:	1e7a      	subs	r2, r7, #1
    863a:	4197      	sbcs	r7, r2
    863c:	40dc      	lsrs	r4, r3
    863e:	2600      	movs	r6, #0
    8640:	4301      	orrs	r1, r0
    8642:	430f      	orrs	r7, r1
    8644:	077b      	lsls	r3, r7, #29
    8646:	d009      	beq.n	865c <__aeabi_dsub+0x124>
    8648:	230f      	movs	r3, #15
    864a:	403b      	ands	r3, r7
    864c:	2b04      	cmp	r3, #4
    864e:	d005      	beq.n	865c <__aeabi_dsub+0x124>
    8650:	1d3b      	adds	r3, r7, #4
    8652:	42bb      	cmp	r3, r7
    8654:	41bf      	sbcs	r7, r7
    8656:	427f      	negs	r7, r7
    8658:	19e4      	adds	r4, r4, r7
    865a:	001f      	movs	r7, r3
    865c:	0223      	lsls	r3, r4, #8
    865e:	d525      	bpl.n	86ac <__aeabi_dsub+0x174>
    8660:	4b86      	ldr	r3, [pc, #536]	; (887c <__aeabi_dsub+0x344>)
    8662:	3601      	adds	r6, #1
    8664:	429e      	cmp	r6, r3
    8666:	d100      	bne.n	866a <__aeabi_dsub+0x132>
    8668:	e0af      	b.n	87ca <__aeabi_dsub+0x292>
    866a:	4b85      	ldr	r3, [pc, #532]	; (8880 <__aeabi_dsub+0x348>)
    866c:	2501      	movs	r5, #1
    866e:	401c      	ands	r4, r3
    8670:	4643      	mov	r3, r8
    8672:	0762      	lsls	r2, r4, #29
    8674:	08ff      	lsrs	r7, r7, #3
    8676:	0264      	lsls	r4, r4, #9
    8678:	0576      	lsls	r6, r6, #21
    867a:	4317      	orrs	r7, r2
    867c:	0b24      	lsrs	r4, r4, #12
    867e:	0d76      	lsrs	r6, r6, #21
    8680:	401d      	ands	r5, r3
    8682:	2100      	movs	r1, #0
    8684:	0324      	lsls	r4, r4, #12
    8686:	0b23      	lsrs	r3, r4, #12
    8688:	0d0c      	lsrs	r4, r1, #20
    868a:	4a7e      	ldr	r2, [pc, #504]	; (8884 <__aeabi_dsub+0x34c>)
    868c:	0524      	lsls	r4, r4, #20
    868e:	431c      	orrs	r4, r3
    8690:	4014      	ands	r4, r2
    8692:	0533      	lsls	r3, r6, #20
    8694:	4323      	orrs	r3, r4
    8696:	005b      	lsls	r3, r3, #1
    8698:	07ed      	lsls	r5, r5, #31
    869a:	085b      	lsrs	r3, r3, #1
    869c:	432b      	orrs	r3, r5
    869e:	0038      	movs	r0, r7
    86a0:	0019      	movs	r1, r3
    86a2:	bc1c      	pop	{r2, r3, r4}
    86a4:	4690      	mov	r8, r2
    86a6:	4699      	mov	r9, r3
    86a8:	46a2      	mov	sl, r4
    86aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    86ac:	2501      	movs	r5, #1
    86ae:	4643      	mov	r3, r8
    86b0:	0762      	lsls	r2, r4, #29
    86b2:	08ff      	lsrs	r7, r7, #3
    86b4:	4317      	orrs	r7, r2
    86b6:	08e4      	lsrs	r4, r4, #3
    86b8:	401d      	ands	r5, r3
    86ba:	4b70      	ldr	r3, [pc, #448]	; (887c <__aeabi_dsub+0x344>)
    86bc:	429e      	cmp	r6, r3
    86be:	d036      	beq.n	872e <__aeabi_dsub+0x1f6>
    86c0:	0324      	lsls	r4, r4, #12
    86c2:	0576      	lsls	r6, r6, #21
    86c4:	0b24      	lsrs	r4, r4, #12
    86c6:	0d76      	lsrs	r6, r6, #21
    86c8:	e7db      	b.n	8682 <__aeabi_dsub+0x14a>
    86ca:	4663      	mov	r3, ip
    86cc:	1af3      	subs	r3, r6, r3
    86ce:	2b00      	cmp	r3, #0
    86d0:	dc00      	bgt.n	86d4 <__aeabi_dsub+0x19c>
    86d2:	e094      	b.n	87fe <__aeabi_dsub+0x2c6>
    86d4:	4660      	mov	r0, ip
    86d6:	2800      	cmp	r0, #0
    86d8:	d035      	beq.n	8746 <__aeabi_dsub+0x20e>
    86da:	4868      	ldr	r0, [pc, #416]	; (887c <__aeabi_dsub+0x344>)
    86dc:	4286      	cmp	r6, r0
    86de:	d0b1      	beq.n	8644 <__aeabi_dsub+0x10c>
    86e0:	2780      	movs	r7, #128	; 0x80
    86e2:	043f      	lsls	r7, r7, #16
    86e4:	4339      	orrs	r1, r7
    86e6:	2b38      	cmp	r3, #56	; 0x38
    86e8:	dc00      	bgt.n	86ec <__aeabi_dsub+0x1b4>
    86ea:	e0fd      	b.n	88e8 <__aeabi_dsub+0x3b0>
    86ec:	430a      	orrs	r2, r1
    86ee:	0017      	movs	r7, r2
    86f0:	2100      	movs	r1, #0
    86f2:	1e7a      	subs	r2, r7, #1
    86f4:	4197      	sbcs	r7, r2
    86f6:	4457      	add	r7, sl
    86f8:	4557      	cmp	r7, sl
    86fa:	4180      	sbcs	r0, r0
    86fc:	1909      	adds	r1, r1, r4
    86fe:	4244      	negs	r4, r0
    8700:	190c      	adds	r4, r1, r4
    8702:	0223      	lsls	r3, r4, #8
    8704:	d53a      	bpl.n	877c <__aeabi_dsub+0x244>
    8706:	4b5d      	ldr	r3, [pc, #372]	; (887c <__aeabi_dsub+0x344>)
    8708:	3601      	adds	r6, #1
    870a:	429e      	cmp	r6, r3
    870c:	d100      	bne.n	8710 <__aeabi_dsub+0x1d8>
    870e:	e14b      	b.n	89a8 <__aeabi_dsub+0x470>
    8710:	2201      	movs	r2, #1
    8712:	4b5b      	ldr	r3, [pc, #364]	; (8880 <__aeabi_dsub+0x348>)
    8714:	401c      	ands	r4, r3
    8716:	087b      	lsrs	r3, r7, #1
    8718:	4017      	ands	r7, r2
    871a:	431f      	orrs	r7, r3
    871c:	07e2      	lsls	r2, r4, #31
    871e:	4317      	orrs	r7, r2
    8720:	0864      	lsrs	r4, r4, #1
    8722:	e78f      	b.n	8644 <__aeabi_dsub+0x10c>
    8724:	0008      	movs	r0, r1
    8726:	4310      	orrs	r0, r2
    8728:	d000      	beq.n	872c <__aeabi_dsub+0x1f4>
    872a:	e724      	b.n	8576 <__aeabi_dsub+0x3e>
    872c:	e721      	b.n	8572 <__aeabi_dsub+0x3a>
    872e:	0023      	movs	r3, r4
    8730:	433b      	orrs	r3, r7
    8732:	d100      	bne.n	8736 <__aeabi_dsub+0x1fe>
    8734:	e1b9      	b.n	8aaa <__aeabi_dsub+0x572>
    8736:	2280      	movs	r2, #128	; 0x80
    8738:	0312      	lsls	r2, r2, #12
    873a:	4314      	orrs	r4, r2
    873c:	0324      	lsls	r4, r4, #12
    873e:	0b24      	lsrs	r4, r4, #12
    8740:	e79f      	b.n	8682 <__aeabi_dsub+0x14a>
    8742:	002e      	movs	r6, r5
    8744:	e77e      	b.n	8644 <__aeabi_dsub+0x10c>
    8746:	0008      	movs	r0, r1
    8748:	4310      	orrs	r0, r2
    874a:	d100      	bne.n	874e <__aeabi_dsub+0x216>
    874c:	e0ca      	b.n	88e4 <__aeabi_dsub+0x3ac>
    874e:	1e58      	subs	r0, r3, #1
    8750:	4684      	mov	ip, r0
    8752:	2800      	cmp	r0, #0
    8754:	d000      	beq.n	8758 <__aeabi_dsub+0x220>
    8756:	e0e7      	b.n	8928 <__aeabi_dsub+0x3f0>
    8758:	4452      	add	r2, sl
    875a:	4552      	cmp	r2, sl
    875c:	4180      	sbcs	r0, r0
    875e:	1864      	adds	r4, r4, r1
    8760:	4240      	negs	r0, r0
    8762:	1824      	adds	r4, r4, r0
    8764:	0017      	movs	r7, r2
    8766:	2601      	movs	r6, #1
    8768:	0223      	lsls	r3, r4, #8
    876a:	d507      	bpl.n	877c <__aeabi_dsub+0x244>
    876c:	2602      	movs	r6, #2
    876e:	e7cf      	b.n	8710 <__aeabi_dsub+0x1d8>
    8770:	4664      	mov	r4, ip
    8772:	432c      	orrs	r4, r5
    8774:	d100      	bne.n	8778 <__aeabi_dsub+0x240>
    8776:	e1b3      	b.n	8ae0 <__aeabi_dsub+0x5a8>
    8778:	002c      	movs	r4, r5
    877a:	4667      	mov	r7, ip
    877c:	077b      	lsls	r3, r7, #29
    877e:	d000      	beq.n	8782 <__aeabi_dsub+0x24a>
    8780:	e762      	b.n	8648 <__aeabi_dsub+0x110>
    8782:	0763      	lsls	r3, r4, #29
    8784:	08ff      	lsrs	r7, r7, #3
    8786:	431f      	orrs	r7, r3
    8788:	2501      	movs	r5, #1
    878a:	4643      	mov	r3, r8
    878c:	08e4      	lsrs	r4, r4, #3
    878e:	401d      	ands	r5, r3
    8790:	e793      	b.n	86ba <__aeabi_dsub+0x182>
    8792:	2d00      	cmp	r5, #0
    8794:	d178      	bne.n	8888 <__aeabi_dsub+0x350>
    8796:	1c75      	adds	r5, r6, #1
    8798:	056d      	lsls	r5, r5, #21
    879a:	0d6d      	lsrs	r5, r5, #21
    879c:	2d01      	cmp	r5, #1
    879e:	dc00      	bgt.n	87a2 <__aeabi_dsub+0x26a>
    87a0:	e0f2      	b.n	8988 <__aeabi_dsub+0x450>
    87a2:	4650      	mov	r0, sl
    87a4:	1a80      	subs	r0, r0, r2
    87a6:	4582      	cmp	sl, r0
    87a8:	41bf      	sbcs	r7, r7
    87aa:	1a65      	subs	r5, r4, r1
    87ac:	427f      	negs	r7, r7
    87ae:	1bed      	subs	r5, r5, r7
    87b0:	4684      	mov	ip, r0
    87b2:	0228      	lsls	r0, r5, #8
    87b4:	d400      	bmi.n	87b8 <__aeabi_dsub+0x280>
    87b6:	e08c      	b.n	88d2 <__aeabi_dsub+0x39a>
    87b8:	4650      	mov	r0, sl
    87ba:	1a17      	subs	r7, r2, r0
    87bc:	42ba      	cmp	r2, r7
    87be:	4192      	sbcs	r2, r2
    87c0:	1b0c      	subs	r4, r1, r4
    87c2:	4255      	negs	r5, r2
    87c4:	1b65      	subs	r5, r4, r5
    87c6:	4698      	mov	r8, r3
    87c8:	e714      	b.n	85f4 <__aeabi_dsub+0xbc>
    87ca:	2501      	movs	r5, #1
    87cc:	4643      	mov	r3, r8
    87ce:	2400      	movs	r4, #0
    87d0:	401d      	ands	r5, r3
    87d2:	2700      	movs	r7, #0
    87d4:	e755      	b.n	8682 <__aeabi_dsub+0x14a>
    87d6:	4c2a      	ldr	r4, [pc, #168]	; (8880 <__aeabi_dsub+0x348>)
    87d8:	1af6      	subs	r6, r6, r3
    87da:	402c      	ands	r4, r5
    87dc:	e732      	b.n	8644 <__aeabi_dsub+0x10c>
    87de:	003d      	movs	r5, r7
    87e0:	3828      	subs	r0, #40	; 0x28
    87e2:	4085      	lsls	r5, r0
    87e4:	2700      	movs	r7, #0
    87e6:	e717      	b.n	8618 <__aeabi_dsub+0xe0>
    87e8:	0038      	movs	r0, r7
    87ea:	f000 fa47 	bl	8c7c <__clzsi2>
    87ee:	3020      	adds	r0, #32
    87f0:	e706      	b.n	8600 <__aeabi_dsub+0xc8>
    87f2:	430a      	orrs	r2, r1
    87f4:	0017      	movs	r7, r2
    87f6:	2100      	movs	r1, #0
    87f8:	1e7a      	subs	r2, r7, #1
    87fa:	4197      	sbcs	r7, r2
    87fc:	e6ee      	b.n	85dc <__aeabi_dsub+0xa4>
    87fe:	2b00      	cmp	r3, #0
    8800:	d000      	beq.n	8804 <__aeabi_dsub+0x2cc>
    8802:	e0e5      	b.n	89d0 <__aeabi_dsub+0x498>
    8804:	1c73      	adds	r3, r6, #1
    8806:	469c      	mov	ip, r3
    8808:	055b      	lsls	r3, r3, #21
    880a:	0d5b      	lsrs	r3, r3, #21
    880c:	2b01      	cmp	r3, #1
    880e:	dc00      	bgt.n	8812 <__aeabi_dsub+0x2da>
    8810:	e09f      	b.n	8952 <__aeabi_dsub+0x41a>
    8812:	4b1a      	ldr	r3, [pc, #104]	; (887c <__aeabi_dsub+0x344>)
    8814:	459c      	cmp	ip, r3
    8816:	d100      	bne.n	881a <__aeabi_dsub+0x2e2>
    8818:	e0c5      	b.n	89a6 <__aeabi_dsub+0x46e>
    881a:	4452      	add	r2, sl
    881c:	4552      	cmp	r2, sl
    881e:	4180      	sbcs	r0, r0
    8820:	1864      	adds	r4, r4, r1
    8822:	4240      	negs	r0, r0
    8824:	1824      	adds	r4, r4, r0
    8826:	07e7      	lsls	r7, r4, #31
    8828:	0852      	lsrs	r2, r2, #1
    882a:	4317      	orrs	r7, r2
    882c:	0864      	lsrs	r4, r4, #1
    882e:	4666      	mov	r6, ip
    8830:	e708      	b.n	8644 <__aeabi_dsub+0x10c>
    8832:	4812      	ldr	r0, [pc, #72]	; (887c <__aeabi_dsub+0x344>)
    8834:	4285      	cmp	r5, r0
    8836:	d100      	bne.n	883a <__aeabi_dsub+0x302>
    8838:	e085      	b.n	8946 <__aeabi_dsub+0x40e>
    883a:	001d      	movs	r5, r3
    883c:	e6bc      	b.n	85b8 <__aeabi_dsub+0x80>
    883e:	0029      	movs	r1, r5
    8840:	3e1f      	subs	r6, #31
    8842:	40f1      	lsrs	r1, r6
    8844:	2b20      	cmp	r3, #32
    8846:	d100      	bne.n	884a <__aeabi_dsub+0x312>
    8848:	e07f      	b.n	894a <__aeabi_dsub+0x412>
    884a:	2240      	movs	r2, #64	; 0x40
    884c:	1ad3      	subs	r3, r2, r3
    884e:	409d      	lsls	r5, r3
    8850:	432f      	orrs	r7, r5
    8852:	1e7d      	subs	r5, r7, #1
    8854:	41af      	sbcs	r7, r5
    8856:	2400      	movs	r4, #0
    8858:	430f      	orrs	r7, r1
    885a:	2600      	movs	r6, #0
    885c:	e78e      	b.n	877c <__aeabi_dsub+0x244>
    885e:	002b      	movs	r3, r5
    8860:	000f      	movs	r7, r1
    8862:	3b20      	subs	r3, #32
    8864:	40df      	lsrs	r7, r3
    8866:	2d20      	cmp	r5, #32
    8868:	d071      	beq.n	894e <__aeabi_dsub+0x416>
    886a:	2340      	movs	r3, #64	; 0x40
    886c:	1b5d      	subs	r5, r3, r5
    886e:	40a9      	lsls	r1, r5
    8870:	430a      	orrs	r2, r1
    8872:	1e51      	subs	r1, r2, #1
    8874:	418a      	sbcs	r2, r1
    8876:	2100      	movs	r1, #0
    8878:	4317      	orrs	r7, r2
    887a:	e6af      	b.n	85dc <__aeabi_dsub+0xa4>
    887c:	000007ff 	.word	0x000007ff
    8880:	ff7fffff 	.word	0xff7fffff
    8884:	800fffff 	.word	0x800fffff
    8888:	2e00      	cmp	r6, #0
    888a:	d03e      	beq.n	890a <__aeabi_dsub+0x3d2>
    888c:	4eb3      	ldr	r6, [pc, #716]	; (8b5c <__aeabi_dsub+0x624>)
    888e:	45b4      	cmp	ip, r6
    8890:	d045      	beq.n	891e <__aeabi_dsub+0x3e6>
    8892:	2680      	movs	r6, #128	; 0x80
    8894:	0436      	lsls	r6, r6, #16
    8896:	426d      	negs	r5, r5
    8898:	4334      	orrs	r4, r6
    889a:	2d38      	cmp	r5, #56	; 0x38
    889c:	dd00      	ble.n	88a0 <__aeabi_dsub+0x368>
    889e:	e0a8      	b.n	89f2 <__aeabi_dsub+0x4ba>
    88a0:	2d1f      	cmp	r5, #31
    88a2:	dd00      	ble.n	88a6 <__aeabi_dsub+0x36e>
    88a4:	e11f      	b.n	8ae6 <__aeabi_dsub+0x5ae>
    88a6:	2620      	movs	r6, #32
    88a8:	0027      	movs	r7, r4
    88aa:	4650      	mov	r0, sl
    88ac:	1b76      	subs	r6, r6, r5
    88ae:	40b7      	lsls	r7, r6
    88b0:	40e8      	lsrs	r0, r5
    88b2:	4307      	orrs	r7, r0
    88b4:	4650      	mov	r0, sl
    88b6:	40b0      	lsls	r0, r6
    88b8:	1e46      	subs	r6, r0, #1
    88ba:	41b0      	sbcs	r0, r6
    88bc:	40ec      	lsrs	r4, r5
    88be:	4338      	orrs	r0, r7
    88c0:	1a17      	subs	r7, r2, r0
    88c2:	42ba      	cmp	r2, r7
    88c4:	4192      	sbcs	r2, r2
    88c6:	1b0c      	subs	r4, r1, r4
    88c8:	4252      	negs	r2, r2
    88ca:	1aa4      	subs	r4, r4, r2
    88cc:	4666      	mov	r6, ip
    88ce:	4698      	mov	r8, r3
    88d0:	e68b      	b.n	85ea <__aeabi_dsub+0xb2>
    88d2:	4664      	mov	r4, ip
    88d4:	4667      	mov	r7, ip
    88d6:	432c      	orrs	r4, r5
    88d8:	d000      	beq.n	88dc <__aeabi_dsub+0x3a4>
    88da:	e68b      	b.n	85f4 <__aeabi_dsub+0xbc>
    88dc:	2500      	movs	r5, #0
    88de:	2600      	movs	r6, #0
    88e0:	2700      	movs	r7, #0
    88e2:	e6ea      	b.n	86ba <__aeabi_dsub+0x182>
    88e4:	001e      	movs	r6, r3
    88e6:	e6ad      	b.n	8644 <__aeabi_dsub+0x10c>
    88e8:	2b1f      	cmp	r3, #31
    88ea:	dc60      	bgt.n	89ae <__aeabi_dsub+0x476>
    88ec:	2720      	movs	r7, #32
    88ee:	1af8      	subs	r0, r7, r3
    88f0:	000f      	movs	r7, r1
    88f2:	4684      	mov	ip, r0
    88f4:	4087      	lsls	r7, r0
    88f6:	0010      	movs	r0, r2
    88f8:	40d8      	lsrs	r0, r3
    88fa:	4307      	orrs	r7, r0
    88fc:	4660      	mov	r0, ip
    88fe:	4082      	lsls	r2, r0
    8900:	1e50      	subs	r0, r2, #1
    8902:	4182      	sbcs	r2, r0
    8904:	40d9      	lsrs	r1, r3
    8906:	4317      	orrs	r7, r2
    8908:	e6f5      	b.n	86f6 <__aeabi_dsub+0x1be>
    890a:	0026      	movs	r6, r4
    890c:	4650      	mov	r0, sl
    890e:	4306      	orrs	r6, r0
    8910:	d005      	beq.n	891e <__aeabi_dsub+0x3e6>
    8912:	43ed      	mvns	r5, r5
    8914:	2d00      	cmp	r5, #0
    8916:	d0d3      	beq.n	88c0 <__aeabi_dsub+0x388>
    8918:	4e90      	ldr	r6, [pc, #576]	; (8b5c <__aeabi_dsub+0x624>)
    891a:	45b4      	cmp	ip, r6
    891c:	d1bd      	bne.n	889a <__aeabi_dsub+0x362>
    891e:	000c      	movs	r4, r1
    8920:	0017      	movs	r7, r2
    8922:	4666      	mov	r6, ip
    8924:	4698      	mov	r8, r3
    8926:	e68d      	b.n	8644 <__aeabi_dsub+0x10c>
    8928:	488c      	ldr	r0, [pc, #560]	; (8b5c <__aeabi_dsub+0x624>)
    892a:	4283      	cmp	r3, r0
    892c:	d00b      	beq.n	8946 <__aeabi_dsub+0x40e>
    892e:	4663      	mov	r3, ip
    8930:	e6d9      	b.n	86e6 <__aeabi_dsub+0x1ae>
    8932:	2d00      	cmp	r5, #0
    8934:	d000      	beq.n	8938 <__aeabi_dsub+0x400>
    8936:	e096      	b.n	8a66 <__aeabi_dsub+0x52e>
    8938:	0008      	movs	r0, r1
    893a:	4310      	orrs	r0, r2
    893c:	d100      	bne.n	8940 <__aeabi_dsub+0x408>
    893e:	e0e2      	b.n	8b06 <__aeabi_dsub+0x5ce>
    8940:	000c      	movs	r4, r1
    8942:	0017      	movs	r7, r2
    8944:	4698      	mov	r8, r3
    8946:	4e85      	ldr	r6, [pc, #532]	; (8b5c <__aeabi_dsub+0x624>)
    8948:	e67c      	b.n	8644 <__aeabi_dsub+0x10c>
    894a:	2500      	movs	r5, #0
    894c:	e780      	b.n	8850 <__aeabi_dsub+0x318>
    894e:	2100      	movs	r1, #0
    8950:	e78e      	b.n	8870 <__aeabi_dsub+0x338>
    8952:	0023      	movs	r3, r4
    8954:	4650      	mov	r0, sl
    8956:	4303      	orrs	r3, r0
    8958:	2e00      	cmp	r6, #0
    895a:	d000      	beq.n	895e <__aeabi_dsub+0x426>
    895c:	e0a8      	b.n	8ab0 <__aeabi_dsub+0x578>
    895e:	2b00      	cmp	r3, #0
    8960:	d100      	bne.n	8964 <__aeabi_dsub+0x42c>
    8962:	e0de      	b.n	8b22 <__aeabi_dsub+0x5ea>
    8964:	000b      	movs	r3, r1
    8966:	4313      	orrs	r3, r2
    8968:	d100      	bne.n	896c <__aeabi_dsub+0x434>
    896a:	e66b      	b.n	8644 <__aeabi_dsub+0x10c>
    896c:	4452      	add	r2, sl
    896e:	4552      	cmp	r2, sl
    8970:	4180      	sbcs	r0, r0
    8972:	1864      	adds	r4, r4, r1
    8974:	4240      	negs	r0, r0
    8976:	1824      	adds	r4, r4, r0
    8978:	0017      	movs	r7, r2
    897a:	0223      	lsls	r3, r4, #8
    897c:	d400      	bmi.n	8980 <__aeabi_dsub+0x448>
    897e:	e6fd      	b.n	877c <__aeabi_dsub+0x244>
    8980:	4b77      	ldr	r3, [pc, #476]	; (8b60 <__aeabi_dsub+0x628>)
    8982:	4666      	mov	r6, ip
    8984:	401c      	ands	r4, r3
    8986:	e65d      	b.n	8644 <__aeabi_dsub+0x10c>
    8988:	0025      	movs	r5, r4
    898a:	4650      	mov	r0, sl
    898c:	4305      	orrs	r5, r0
    898e:	2e00      	cmp	r6, #0
    8990:	d1cf      	bne.n	8932 <__aeabi_dsub+0x3fa>
    8992:	2d00      	cmp	r5, #0
    8994:	d14f      	bne.n	8a36 <__aeabi_dsub+0x4fe>
    8996:	000c      	movs	r4, r1
    8998:	4314      	orrs	r4, r2
    899a:	d100      	bne.n	899e <__aeabi_dsub+0x466>
    899c:	e0a0      	b.n	8ae0 <__aeabi_dsub+0x5a8>
    899e:	000c      	movs	r4, r1
    89a0:	0017      	movs	r7, r2
    89a2:	4698      	mov	r8, r3
    89a4:	e64e      	b.n	8644 <__aeabi_dsub+0x10c>
    89a6:	4666      	mov	r6, ip
    89a8:	2400      	movs	r4, #0
    89aa:	2700      	movs	r7, #0
    89ac:	e685      	b.n	86ba <__aeabi_dsub+0x182>
    89ae:	001f      	movs	r7, r3
    89b0:	0008      	movs	r0, r1
    89b2:	3f20      	subs	r7, #32
    89b4:	40f8      	lsrs	r0, r7
    89b6:	0007      	movs	r7, r0
    89b8:	2b20      	cmp	r3, #32
    89ba:	d100      	bne.n	89be <__aeabi_dsub+0x486>
    89bc:	e08e      	b.n	8adc <__aeabi_dsub+0x5a4>
    89be:	2040      	movs	r0, #64	; 0x40
    89c0:	1ac3      	subs	r3, r0, r3
    89c2:	4099      	lsls	r1, r3
    89c4:	430a      	orrs	r2, r1
    89c6:	1e51      	subs	r1, r2, #1
    89c8:	418a      	sbcs	r2, r1
    89ca:	2100      	movs	r1, #0
    89cc:	4317      	orrs	r7, r2
    89ce:	e692      	b.n	86f6 <__aeabi_dsub+0x1be>
    89d0:	2e00      	cmp	r6, #0
    89d2:	d114      	bne.n	89fe <__aeabi_dsub+0x4c6>
    89d4:	0026      	movs	r6, r4
    89d6:	4650      	mov	r0, sl
    89d8:	4306      	orrs	r6, r0
    89da:	d062      	beq.n	8aa2 <__aeabi_dsub+0x56a>
    89dc:	43db      	mvns	r3, r3
    89de:	2b00      	cmp	r3, #0
    89e0:	d15c      	bne.n	8a9c <__aeabi_dsub+0x564>
    89e2:	1887      	adds	r7, r0, r2
    89e4:	4297      	cmp	r7, r2
    89e6:	4192      	sbcs	r2, r2
    89e8:	1864      	adds	r4, r4, r1
    89ea:	4252      	negs	r2, r2
    89ec:	18a4      	adds	r4, r4, r2
    89ee:	4666      	mov	r6, ip
    89f0:	e687      	b.n	8702 <__aeabi_dsub+0x1ca>
    89f2:	4650      	mov	r0, sl
    89f4:	4320      	orrs	r0, r4
    89f6:	1e44      	subs	r4, r0, #1
    89f8:	41a0      	sbcs	r0, r4
    89fa:	2400      	movs	r4, #0
    89fc:	e760      	b.n	88c0 <__aeabi_dsub+0x388>
    89fe:	4e57      	ldr	r6, [pc, #348]	; (8b5c <__aeabi_dsub+0x624>)
    8a00:	45b4      	cmp	ip, r6
    8a02:	d04e      	beq.n	8aa2 <__aeabi_dsub+0x56a>
    8a04:	2680      	movs	r6, #128	; 0x80
    8a06:	0436      	lsls	r6, r6, #16
    8a08:	425b      	negs	r3, r3
    8a0a:	4334      	orrs	r4, r6
    8a0c:	2b38      	cmp	r3, #56	; 0x38
    8a0e:	dd00      	ble.n	8a12 <__aeabi_dsub+0x4da>
    8a10:	e07f      	b.n	8b12 <__aeabi_dsub+0x5da>
    8a12:	2b1f      	cmp	r3, #31
    8a14:	dd00      	ble.n	8a18 <__aeabi_dsub+0x4e0>
    8a16:	e08b      	b.n	8b30 <__aeabi_dsub+0x5f8>
    8a18:	2620      	movs	r6, #32
    8a1a:	0027      	movs	r7, r4
    8a1c:	4650      	mov	r0, sl
    8a1e:	1af6      	subs	r6, r6, r3
    8a20:	40b7      	lsls	r7, r6
    8a22:	40d8      	lsrs	r0, r3
    8a24:	4307      	orrs	r7, r0
    8a26:	4650      	mov	r0, sl
    8a28:	40b0      	lsls	r0, r6
    8a2a:	1e46      	subs	r6, r0, #1
    8a2c:	41b0      	sbcs	r0, r6
    8a2e:	4307      	orrs	r7, r0
    8a30:	40dc      	lsrs	r4, r3
    8a32:	18bf      	adds	r7, r7, r2
    8a34:	e7d6      	b.n	89e4 <__aeabi_dsub+0x4ac>
    8a36:	000d      	movs	r5, r1
    8a38:	4315      	orrs	r5, r2
    8a3a:	d100      	bne.n	8a3e <__aeabi_dsub+0x506>
    8a3c:	e602      	b.n	8644 <__aeabi_dsub+0x10c>
    8a3e:	4650      	mov	r0, sl
    8a40:	1a80      	subs	r0, r0, r2
    8a42:	4582      	cmp	sl, r0
    8a44:	41bf      	sbcs	r7, r7
    8a46:	1a65      	subs	r5, r4, r1
    8a48:	427f      	negs	r7, r7
    8a4a:	1bed      	subs	r5, r5, r7
    8a4c:	4684      	mov	ip, r0
    8a4e:	0228      	lsls	r0, r5, #8
    8a50:	d400      	bmi.n	8a54 <__aeabi_dsub+0x51c>
    8a52:	e68d      	b.n	8770 <__aeabi_dsub+0x238>
    8a54:	4650      	mov	r0, sl
    8a56:	1a17      	subs	r7, r2, r0
    8a58:	42ba      	cmp	r2, r7
    8a5a:	4192      	sbcs	r2, r2
    8a5c:	1b0c      	subs	r4, r1, r4
    8a5e:	4252      	negs	r2, r2
    8a60:	1aa4      	subs	r4, r4, r2
    8a62:	4698      	mov	r8, r3
    8a64:	e5ee      	b.n	8644 <__aeabi_dsub+0x10c>
    8a66:	000d      	movs	r5, r1
    8a68:	4315      	orrs	r5, r2
    8a6a:	d100      	bne.n	8a6e <__aeabi_dsub+0x536>
    8a6c:	e76b      	b.n	8946 <__aeabi_dsub+0x40e>
    8a6e:	4650      	mov	r0, sl
    8a70:	0767      	lsls	r7, r4, #29
    8a72:	08c0      	lsrs	r0, r0, #3
    8a74:	4307      	orrs	r7, r0
    8a76:	2080      	movs	r0, #128	; 0x80
    8a78:	08e4      	lsrs	r4, r4, #3
    8a7a:	0300      	lsls	r0, r0, #12
    8a7c:	4204      	tst	r4, r0
    8a7e:	d007      	beq.n	8a90 <__aeabi_dsub+0x558>
    8a80:	08cd      	lsrs	r5, r1, #3
    8a82:	4205      	tst	r5, r0
    8a84:	d104      	bne.n	8a90 <__aeabi_dsub+0x558>
    8a86:	002c      	movs	r4, r5
    8a88:	4698      	mov	r8, r3
    8a8a:	08d7      	lsrs	r7, r2, #3
    8a8c:	0749      	lsls	r1, r1, #29
    8a8e:	430f      	orrs	r7, r1
    8a90:	0f7b      	lsrs	r3, r7, #29
    8a92:	00e4      	lsls	r4, r4, #3
    8a94:	431c      	orrs	r4, r3
    8a96:	00ff      	lsls	r7, r7, #3
    8a98:	4e30      	ldr	r6, [pc, #192]	; (8b5c <__aeabi_dsub+0x624>)
    8a9a:	e5d3      	b.n	8644 <__aeabi_dsub+0x10c>
    8a9c:	4e2f      	ldr	r6, [pc, #188]	; (8b5c <__aeabi_dsub+0x624>)
    8a9e:	45b4      	cmp	ip, r6
    8aa0:	d1b4      	bne.n	8a0c <__aeabi_dsub+0x4d4>
    8aa2:	000c      	movs	r4, r1
    8aa4:	0017      	movs	r7, r2
    8aa6:	4666      	mov	r6, ip
    8aa8:	e5cc      	b.n	8644 <__aeabi_dsub+0x10c>
    8aaa:	2700      	movs	r7, #0
    8aac:	2400      	movs	r4, #0
    8aae:	e5e8      	b.n	8682 <__aeabi_dsub+0x14a>
    8ab0:	2b00      	cmp	r3, #0
    8ab2:	d039      	beq.n	8b28 <__aeabi_dsub+0x5f0>
    8ab4:	000b      	movs	r3, r1
    8ab6:	4313      	orrs	r3, r2
    8ab8:	d100      	bne.n	8abc <__aeabi_dsub+0x584>
    8aba:	e744      	b.n	8946 <__aeabi_dsub+0x40e>
    8abc:	08c0      	lsrs	r0, r0, #3
    8abe:	0767      	lsls	r7, r4, #29
    8ac0:	4307      	orrs	r7, r0
    8ac2:	2080      	movs	r0, #128	; 0x80
    8ac4:	08e4      	lsrs	r4, r4, #3
    8ac6:	0300      	lsls	r0, r0, #12
    8ac8:	4204      	tst	r4, r0
    8aca:	d0e1      	beq.n	8a90 <__aeabi_dsub+0x558>
    8acc:	08cb      	lsrs	r3, r1, #3
    8ace:	4203      	tst	r3, r0
    8ad0:	d1de      	bne.n	8a90 <__aeabi_dsub+0x558>
    8ad2:	08d7      	lsrs	r7, r2, #3
    8ad4:	0749      	lsls	r1, r1, #29
    8ad6:	430f      	orrs	r7, r1
    8ad8:	001c      	movs	r4, r3
    8ada:	e7d9      	b.n	8a90 <__aeabi_dsub+0x558>
    8adc:	2100      	movs	r1, #0
    8ade:	e771      	b.n	89c4 <__aeabi_dsub+0x48c>
    8ae0:	2500      	movs	r5, #0
    8ae2:	2700      	movs	r7, #0
    8ae4:	e5e9      	b.n	86ba <__aeabi_dsub+0x182>
    8ae6:	002e      	movs	r6, r5
    8ae8:	0027      	movs	r7, r4
    8aea:	3e20      	subs	r6, #32
    8aec:	40f7      	lsrs	r7, r6
    8aee:	2d20      	cmp	r5, #32
    8af0:	d02f      	beq.n	8b52 <__aeabi_dsub+0x61a>
    8af2:	2640      	movs	r6, #64	; 0x40
    8af4:	1b75      	subs	r5, r6, r5
    8af6:	40ac      	lsls	r4, r5
    8af8:	4650      	mov	r0, sl
    8afa:	4320      	orrs	r0, r4
    8afc:	1e44      	subs	r4, r0, #1
    8afe:	41a0      	sbcs	r0, r4
    8b00:	2400      	movs	r4, #0
    8b02:	4338      	orrs	r0, r7
    8b04:	e6dc      	b.n	88c0 <__aeabi_dsub+0x388>
    8b06:	2480      	movs	r4, #128	; 0x80
    8b08:	2500      	movs	r5, #0
    8b0a:	0324      	lsls	r4, r4, #12
    8b0c:	4e13      	ldr	r6, [pc, #76]	; (8b5c <__aeabi_dsub+0x624>)
    8b0e:	2700      	movs	r7, #0
    8b10:	e5d3      	b.n	86ba <__aeabi_dsub+0x182>
    8b12:	4650      	mov	r0, sl
    8b14:	4320      	orrs	r0, r4
    8b16:	0007      	movs	r7, r0
    8b18:	1e78      	subs	r0, r7, #1
    8b1a:	4187      	sbcs	r7, r0
    8b1c:	2400      	movs	r4, #0
    8b1e:	18bf      	adds	r7, r7, r2
    8b20:	e760      	b.n	89e4 <__aeabi_dsub+0x4ac>
    8b22:	000c      	movs	r4, r1
    8b24:	0017      	movs	r7, r2
    8b26:	e58d      	b.n	8644 <__aeabi_dsub+0x10c>
    8b28:	000c      	movs	r4, r1
    8b2a:	0017      	movs	r7, r2
    8b2c:	4e0b      	ldr	r6, [pc, #44]	; (8b5c <__aeabi_dsub+0x624>)
    8b2e:	e589      	b.n	8644 <__aeabi_dsub+0x10c>
    8b30:	001e      	movs	r6, r3
    8b32:	0027      	movs	r7, r4
    8b34:	3e20      	subs	r6, #32
    8b36:	40f7      	lsrs	r7, r6
    8b38:	2b20      	cmp	r3, #32
    8b3a:	d00c      	beq.n	8b56 <__aeabi_dsub+0x61e>
    8b3c:	2640      	movs	r6, #64	; 0x40
    8b3e:	1af3      	subs	r3, r6, r3
    8b40:	409c      	lsls	r4, r3
    8b42:	4650      	mov	r0, sl
    8b44:	4320      	orrs	r0, r4
    8b46:	1e44      	subs	r4, r0, #1
    8b48:	41a0      	sbcs	r0, r4
    8b4a:	4307      	orrs	r7, r0
    8b4c:	2400      	movs	r4, #0
    8b4e:	18bf      	adds	r7, r7, r2
    8b50:	e748      	b.n	89e4 <__aeabi_dsub+0x4ac>
    8b52:	2400      	movs	r4, #0
    8b54:	e7d0      	b.n	8af8 <__aeabi_dsub+0x5c0>
    8b56:	2400      	movs	r4, #0
    8b58:	e7f3      	b.n	8b42 <__aeabi_dsub+0x60a>
    8b5a:	46c0      	nop			; (mov r8, r8)
    8b5c:	000007ff 	.word	0x000007ff
    8b60:	ff7fffff 	.word	0xff7fffff

00008b64 <__aeabi_dcmpun>:
    8b64:	b570      	push	{r4, r5, r6, lr}
    8b66:	4e0e      	ldr	r6, [pc, #56]	; (8ba0 <__aeabi_dcmpun+0x3c>)
    8b68:	030d      	lsls	r5, r1, #12
    8b6a:	031c      	lsls	r4, r3, #12
    8b6c:	0049      	lsls	r1, r1, #1
    8b6e:	005b      	lsls	r3, r3, #1
    8b70:	0b2d      	lsrs	r5, r5, #12
    8b72:	0d49      	lsrs	r1, r1, #21
    8b74:	0b24      	lsrs	r4, r4, #12
    8b76:	0d5b      	lsrs	r3, r3, #21
    8b78:	42b1      	cmp	r1, r6
    8b7a:	d004      	beq.n	8b86 <__aeabi_dcmpun+0x22>
    8b7c:	4908      	ldr	r1, [pc, #32]	; (8ba0 <__aeabi_dcmpun+0x3c>)
    8b7e:	2000      	movs	r0, #0
    8b80:	428b      	cmp	r3, r1
    8b82:	d008      	beq.n	8b96 <__aeabi_dcmpun+0x32>
    8b84:	bd70      	pop	{r4, r5, r6, pc}
    8b86:	4305      	orrs	r5, r0
    8b88:	2001      	movs	r0, #1
    8b8a:	2d00      	cmp	r5, #0
    8b8c:	d1fa      	bne.n	8b84 <__aeabi_dcmpun+0x20>
    8b8e:	4904      	ldr	r1, [pc, #16]	; (8ba0 <__aeabi_dcmpun+0x3c>)
    8b90:	2000      	movs	r0, #0
    8b92:	428b      	cmp	r3, r1
    8b94:	d1f6      	bne.n	8b84 <__aeabi_dcmpun+0x20>
    8b96:	4314      	orrs	r4, r2
    8b98:	0020      	movs	r0, r4
    8b9a:	1e44      	subs	r4, r0, #1
    8b9c:	41a0      	sbcs	r0, r4
    8b9e:	e7f1      	b.n	8b84 <__aeabi_dcmpun+0x20>
    8ba0:	000007ff 	.word	0x000007ff

00008ba4 <__aeabi_d2iz>:
    8ba4:	b530      	push	{r4, r5, lr}
    8ba6:	4d13      	ldr	r5, [pc, #76]	; (8bf4 <__aeabi_d2iz+0x50>)
    8ba8:	030a      	lsls	r2, r1, #12
    8baa:	004b      	lsls	r3, r1, #1
    8bac:	0b12      	lsrs	r2, r2, #12
    8bae:	0d5b      	lsrs	r3, r3, #21
    8bb0:	0fc9      	lsrs	r1, r1, #31
    8bb2:	2400      	movs	r4, #0
    8bb4:	42ab      	cmp	r3, r5
    8bb6:	dd10      	ble.n	8bda <__aeabi_d2iz+0x36>
    8bb8:	4c0f      	ldr	r4, [pc, #60]	; (8bf8 <__aeabi_d2iz+0x54>)
    8bba:	42a3      	cmp	r3, r4
    8bbc:	dc0f      	bgt.n	8bde <__aeabi_d2iz+0x3a>
    8bbe:	2480      	movs	r4, #128	; 0x80
    8bc0:	4d0e      	ldr	r5, [pc, #56]	; (8bfc <__aeabi_d2iz+0x58>)
    8bc2:	0364      	lsls	r4, r4, #13
    8bc4:	4322      	orrs	r2, r4
    8bc6:	1aed      	subs	r5, r5, r3
    8bc8:	2d1f      	cmp	r5, #31
    8bca:	dd0b      	ble.n	8be4 <__aeabi_d2iz+0x40>
    8bcc:	480c      	ldr	r0, [pc, #48]	; (8c00 <__aeabi_d2iz+0x5c>)
    8bce:	1ac3      	subs	r3, r0, r3
    8bd0:	40da      	lsrs	r2, r3
    8bd2:	4254      	negs	r4, r2
    8bd4:	2900      	cmp	r1, #0
    8bd6:	d100      	bne.n	8bda <__aeabi_d2iz+0x36>
    8bd8:	0014      	movs	r4, r2
    8bda:	0020      	movs	r0, r4
    8bdc:	bd30      	pop	{r4, r5, pc}
    8bde:	4b09      	ldr	r3, [pc, #36]	; (8c04 <__aeabi_d2iz+0x60>)
    8be0:	18cc      	adds	r4, r1, r3
    8be2:	e7fa      	b.n	8bda <__aeabi_d2iz+0x36>
    8be4:	4c08      	ldr	r4, [pc, #32]	; (8c08 <__aeabi_d2iz+0x64>)
    8be6:	40e8      	lsrs	r0, r5
    8be8:	46a4      	mov	ip, r4
    8bea:	4463      	add	r3, ip
    8bec:	409a      	lsls	r2, r3
    8bee:	4302      	orrs	r2, r0
    8bf0:	e7ef      	b.n	8bd2 <__aeabi_d2iz+0x2e>
    8bf2:	46c0      	nop			; (mov r8, r8)
    8bf4:	000003fe 	.word	0x000003fe
    8bf8:	0000041d 	.word	0x0000041d
    8bfc:	00000433 	.word	0x00000433
    8c00:	00000413 	.word	0x00000413
    8c04:	7fffffff 	.word	0x7fffffff
    8c08:	fffffbed 	.word	0xfffffbed

00008c0c <__aeabi_ui2d>:
    8c0c:	b510      	push	{r4, lr}
    8c0e:	1e04      	subs	r4, r0, #0
    8c10:	d028      	beq.n	8c64 <__aeabi_ui2d+0x58>
    8c12:	f000 f833 	bl	8c7c <__clzsi2>
    8c16:	4b15      	ldr	r3, [pc, #84]	; (8c6c <__aeabi_ui2d+0x60>)
    8c18:	4a15      	ldr	r2, [pc, #84]	; (8c70 <__aeabi_ui2d+0x64>)
    8c1a:	1a1b      	subs	r3, r3, r0
    8c1c:	1ad2      	subs	r2, r2, r3
    8c1e:	2a1f      	cmp	r2, #31
    8c20:	dd15      	ble.n	8c4e <__aeabi_ui2d+0x42>
    8c22:	4a14      	ldr	r2, [pc, #80]	; (8c74 <__aeabi_ui2d+0x68>)
    8c24:	1ad2      	subs	r2, r2, r3
    8c26:	4094      	lsls	r4, r2
    8c28:	2200      	movs	r2, #0
    8c2a:	0324      	lsls	r4, r4, #12
    8c2c:	055b      	lsls	r3, r3, #21
    8c2e:	0b24      	lsrs	r4, r4, #12
    8c30:	0d5b      	lsrs	r3, r3, #21
    8c32:	2100      	movs	r1, #0
    8c34:	0010      	movs	r0, r2
    8c36:	0324      	lsls	r4, r4, #12
    8c38:	0d0a      	lsrs	r2, r1, #20
    8c3a:	0b24      	lsrs	r4, r4, #12
    8c3c:	0512      	lsls	r2, r2, #20
    8c3e:	4322      	orrs	r2, r4
    8c40:	4c0d      	ldr	r4, [pc, #52]	; (8c78 <__aeabi_ui2d+0x6c>)
    8c42:	051b      	lsls	r3, r3, #20
    8c44:	4022      	ands	r2, r4
    8c46:	4313      	orrs	r3, r2
    8c48:	005b      	lsls	r3, r3, #1
    8c4a:	0859      	lsrs	r1, r3, #1
    8c4c:	bd10      	pop	{r4, pc}
    8c4e:	0021      	movs	r1, r4
    8c50:	4091      	lsls	r1, r2
    8c52:	000a      	movs	r2, r1
    8c54:	210b      	movs	r1, #11
    8c56:	1a08      	subs	r0, r1, r0
    8c58:	40c4      	lsrs	r4, r0
    8c5a:	055b      	lsls	r3, r3, #21
    8c5c:	0324      	lsls	r4, r4, #12
    8c5e:	0b24      	lsrs	r4, r4, #12
    8c60:	0d5b      	lsrs	r3, r3, #21
    8c62:	e7e6      	b.n	8c32 <__aeabi_ui2d+0x26>
    8c64:	2300      	movs	r3, #0
    8c66:	2400      	movs	r4, #0
    8c68:	2200      	movs	r2, #0
    8c6a:	e7e2      	b.n	8c32 <__aeabi_ui2d+0x26>
    8c6c:	0000041e 	.word	0x0000041e
    8c70:	00000433 	.word	0x00000433
    8c74:	00000413 	.word	0x00000413
    8c78:	800fffff 	.word	0x800fffff

00008c7c <__clzsi2>:
    8c7c:	211c      	movs	r1, #28
    8c7e:	2301      	movs	r3, #1
    8c80:	041b      	lsls	r3, r3, #16
    8c82:	4298      	cmp	r0, r3
    8c84:	d301      	bcc.n	8c8a <__clzsi2+0xe>
    8c86:	0c00      	lsrs	r0, r0, #16
    8c88:	3910      	subs	r1, #16
    8c8a:	0a1b      	lsrs	r3, r3, #8
    8c8c:	4298      	cmp	r0, r3
    8c8e:	d301      	bcc.n	8c94 <__clzsi2+0x18>
    8c90:	0a00      	lsrs	r0, r0, #8
    8c92:	3908      	subs	r1, #8
    8c94:	091b      	lsrs	r3, r3, #4
    8c96:	4298      	cmp	r0, r3
    8c98:	d301      	bcc.n	8c9e <__clzsi2+0x22>
    8c9a:	0900      	lsrs	r0, r0, #4
    8c9c:	3904      	subs	r1, #4
    8c9e:	a202      	add	r2, pc, #8	; (adr r2, 8ca8 <__clzsi2+0x2c>)
    8ca0:	5c10      	ldrb	r0, [r2, r0]
    8ca2:	1840      	adds	r0, r0, r1
    8ca4:	4770      	bx	lr
    8ca6:	46c0      	nop			; (mov r8, r8)
    8ca8:	02020304 	.word	0x02020304
    8cac:	01010101 	.word	0x01010101
	...

00008cb8 <__cxa_atexit>:
    8cb8:	b570      	push	{r4, r5, r6, lr}
    8cba:	4c05      	ldr	r4, [pc, #20]	; (8cd0 <__cxa_atexit+0x18>)
    8cbc:	0005      	movs	r5, r0
    8cbe:	0013      	movs	r3, r2
    8cc0:	1e20      	subs	r0, r4, #0
    8cc2:	d004      	beq.n	8cce <__cxa_atexit+0x16>
    8cc4:	000a      	movs	r2, r1
    8cc6:	2002      	movs	r0, #2
    8cc8:	0029      	movs	r1, r5
    8cca:	e000      	b.n	8cce <__cxa_atexit+0x16>
    8ccc:	bf00      	nop
    8cce:	bd70      	pop	{r4, r5, r6, pc}
    8cd0:	00000000 	.word	0x00000000

00008cd4 <__libc_init_array>:
    8cd4:	b570      	push	{r4, r5, r6, lr}
    8cd6:	2600      	movs	r6, #0
    8cd8:	4d0c      	ldr	r5, [pc, #48]	; (8d0c <__libc_init_array+0x38>)
    8cda:	4c0d      	ldr	r4, [pc, #52]	; (8d10 <__libc_init_array+0x3c>)
    8cdc:	1b64      	subs	r4, r4, r5
    8cde:	10a4      	asrs	r4, r4, #2
    8ce0:	42a6      	cmp	r6, r4
    8ce2:	d109      	bne.n	8cf8 <__libc_init_array+0x24>
    8ce4:	2600      	movs	r6, #0
    8ce6:	f002 f9db 	bl	b0a0 <_init>
    8cea:	4d0a      	ldr	r5, [pc, #40]	; (8d14 <__libc_init_array+0x40>)
    8cec:	4c0a      	ldr	r4, [pc, #40]	; (8d18 <__libc_init_array+0x44>)
    8cee:	1b64      	subs	r4, r4, r5
    8cf0:	10a4      	asrs	r4, r4, #2
    8cf2:	42a6      	cmp	r6, r4
    8cf4:	d105      	bne.n	8d02 <__libc_init_array+0x2e>
    8cf6:	bd70      	pop	{r4, r5, r6, pc}
    8cf8:	00b3      	lsls	r3, r6, #2
    8cfa:	58eb      	ldr	r3, [r5, r3]
    8cfc:	4798      	blx	r3
    8cfe:	3601      	adds	r6, #1
    8d00:	e7ee      	b.n	8ce0 <__libc_init_array+0xc>
    8d02:	00b3      	lsls	r3, r6, #2
    8d04:	58eb      	ldr	r3, [r5, r3]
    8d06:	4798      	blx	r3
    8d08:	3601      	adds	r6, #1
    8d0a:	e7f2      	b.n	8cf2 <__libc_init_array+0x1e>
    8d0c:	20000258 	.word	0x20000258
    8d10:	20000258 	.word	0x20000258
    8d14:	20000258 	.word	0x20000258
    8d18:	20000288 	.word	0x20000288

00008d1c <__locale_ctype_ptr_l>:
    8d1c:	30ec      	adds	r0, #236	; 0xec
    8d1e:	6800      	ldr	r0, [r0, #0]
    8d20:	4770      	bx	lr
	...

00008d24 <malloc>:
    8d24:	b510      	push	{r4, lr}
    8d26:	4b03      	ldr	r3, [pc, #12]	; (8d34 <malloc+0x10>)
    8d28:	0001      	movs	r1, r0
    8d2a:	6818      	ldr	r0, [r3, #0]
    8d2c:	f000 f89c 	bl	8e68 <_malloc_r>
    8d30:	bd10      	pop	{r4, pc}
    8d32:	46c0      	nop			; (mov r8, r8)
    8d34:	20000088 	.word	0x20000088

00008d38 <free>:
    8d38:	b510      	push	{r4, lr}
    8d3a:	4b03      	ldr	r3, [pc, #12]	; (8d48 <free+0x10>)
    8d3c:	0001      	movs	r1, r0
    8d3e:	6818      	ldr	r0, [r3, #0]
    8d40:	f000 f848 	bl	8dd4 <_free_r>
    8d44:	bd10      	pop	{r4, pc}
    8d46:	46c0      	nop			; (mov r8, r8)
    8d48:	20000088 	.word	0x20000088

00008d4c <__ascii_mbtowc>:
    8d4c:	b082      	sub	sp, #8
    8d4e:	2900      	cmp	r1, #0
    8d50:	d100      	bne.n	8d54 <__ascii_mbtowc+0x8>
    8d52:	a901      	add	r1, sp, #4
    8d54:	1e10      	subs	r0, r2, #0
    8d56:	d006      	beq.n	8d66 <__ascii_mbtowc+0x1a>
    8d58:	2b00      	cmp	r3, #0
    8d5a:	d006      	beq.n	8d6a <__ascii_mbtowc+0x1e>
    8d5c:	7813      	ldrb	r3, [r2, #0]
    8d5e:	600b      	str	r3, [r1, #0]
    8d60:	7810      	ldrb	r0, [r2, #0]
    8d62:	1e43      	subs	r3, r0, #1
    8d64:	4198      	sbcs	r0, r3
    8d66:	b002      	add	sp, #8
    8d68:	4770      	bx	lr
    8d6a:	2002      	movs	r0, #2
    8d6c:	4240      	negs	r0, r0
    8d6e:	e7fa      	b.n	8d66 <__ascii_mbtowc+0x1a>

00008d70 <memcmp>:
    8d70:	b530      	push	{r4, r5, lr}
    8d72:	2400      	movs	r4, #0
    8d74:	42a2      	cmp	r2, r4
    8d76:	d101      	bne.n	8d7c <memcmp+0xc>
    8d78:	2000      	movs	r0, #0
    8d7a:	e005      	b.n	8d88 <memcmp+0x18>
    8d7c:	5d03      	ldrb	r3, [r0, r4]
    8d7e:	1c65      	adds	r5, r4, #1
    8d80:	5d0c      	ldrb	r4, [r1, r4]
    8d82:	42a3      	cmp	r3, r4
    8d84:	d001      	beq.n	8d8a <memcmp+0x1a>
    8d86:	1b18      	subs	r0, r3, r4
    8d88:	bd30      	pop	{r4, r5, pc}
    8d8a:	002c      	movs	r4, r5
    8d8c:	e7f2      	b.n	8d74 <memcmp+0x4>

00008d8e <memcpy>:
    8d8e:	2300      	movs	r3, #0
    8d90:	b510      	push	{r4, lr}
    8d92:	429a      	cmp	r2, r3
    8d94:	d100      	bne.n	8d98 <memcpy+0xa>
    8d96:	bd10      	pop	{r4, pc}
    8d98:	5ccc      	ldrb	r4, [r1, r3]
    8d9a:	54c4      	strb	r4, [r0, r3]
    8d9c:	3301      	adds	r3, #1
    8d9e:	e7f8      	b.n	8d92 <memcpy+0x4>

00008da0 <memmove>:
    8da0:	b510      	push	{r4, lr}
    8da2:	4288      	cmp	r0, r1
    8da4:	d902      	bls.n	8dac <memmove+0xc>
    8da6:	188b      	adds	r3, r1, r2
    8da8:	4298      	cmp	r0, r3
    8daa:	d308      	bcc.n	8dbe <memmove+0x1e>
    8dac:	2300      	movs	r3, #0
    8dae:	429a      	cmp	r2, r3
    8db0:	d007      	beq.n	8dc2 <memmove+0x22>
    8db2:	5ccc      	ldrb	r4, [r1, r3]
    8db4:	54c4      	strb	r4, [r0, r3]
    8db6:	3301      	adds	r3, #1
    8db8:	e7f9      	b.n	8dae <memmove+0xe>
    8dba:	5c8b      	ldrb	r3, [r1, r2]
    8dbc:	5483      	strb	r3, [r0, r2]
    8dbe:	3a01      	subs	r2, #1
    8dc0:	d2fb      	bcs.n	8dba <memmove+0x1a>
    8dc2:	bd10      	pop	{r4, pc}

00008dc4 <memset>:
    8dc4:	0003      	movs	r3, r0
    8dc6:	1882      	adds	r2, r0, r2
    8dc8:	4293      	cmp	r3, r2
    8dca:	d100      	bne.n	8dce <memset+0xa>
    8dcc:	4770      	bx	lr
    8dce:	7019      	strb	r1, [r3, #0]
    8dd0:	3301      	adds	r3, #1
    8dd2:	e7f9      	b.n	8dc8 <memset+0x4>

00008dd4 <_free_r>:
    8dd4:	b570      	push	{r4, r5, r6, lr}
    8dd6:	0005      	movs	r5, r0
    8dd8:	2900      	cmp	r1, #0
    8dda:	d010      	beq.n	8dfe <_free_r+0x2a>
    8ddc:	1f0c      	subs	r4, r1, #4
    8dde:	6823      	ldr	r3, [r4, #0]
    8de0:	2b00      	cmp	r3, #0
    8de2:	da00      	bge.n	8de6 <_free_r+0x12>
    8de4:	18e4      	adds	r4, r4, r3
    8de6:	0028      	movs	r0, r5
    8de8:	f001 fc83 	bl	a6f2 <__malloc_lock>
    8dec:	4a1d      	ldr	r2, [pc, #116]	; (8e64 <_free_r+0x90>)
    8dee:	6813      	ldr	r3, [r2, #0]
    8df0:	2b00      	cmp	r3, #0
    8df2:	d105      	bne.n	8e00 <_free_r+0x2c>
    8df4:	6063      	str	r3, [r4, #4]
    8df6:	6014      	str	r4, [r2, #0]
    8df8:	0028      	movs	r0, r5
    8dfa:	f001 fc7b 	bl	a6f4 <__malloc_unlock>
    8dfe:	bd70      	pop	{r4, r5, r6, pc}
    8e00:	42a3      	cmp	r3, r4
    8e02:	d909      	bls.n	8e18 <_free_r+0x44>
    8e04:	6821      	ldr	r1, [r4, #0]
    8e06:	1860      	adds	r0, r4, r1
    8e08:	4283      	cmp	r3, r0
    8e0a:	d1f3      	bne.n	8df4 <_free_r+0x20>
    8e0c:	6818      	ldr	r0, [r3, #0]
    8e0e:	685b      	ldr	r3, [r3, #4]
    8e10:	1841      	adds	r1, r0, r1
    8e12:	6021      	str	r1, [r4, #0]
    8e14:	e7ee      	b.n	8df4 <_free_r+0x20>
    8e16:	0013      	movs	r3, r2
    8e18:	685a      	ldr	r2, [r3, #4]
    8e1a:	2a00      	cmp	r2, #0
    8e1c:	d001      	beq.n	8e22 <_free_r+0x4e>
    8e1e:	42a2      	cmp	r2, r4
    8e20:	d9f9      	bls.n	8e16 <_free_r+0x42>
    8e22:	6819      	ldr	r1, [r3, #0]
    8e24:	1858      	adds	r0, r3, r1
    8e26:	42a0      	cmp	r0, r4
    8e28:	d10b      	bne.n	8e42 <_free_r+0x6e>
    8e2a:	6820      	ldr	r0, [r4, #0]
    8e2c:	1809      	adds	r1, r1, r0
    8e2e:	1858      	adds	r0, r3, r1
    8e30:	6019      	str	r1, [r3, #0]
    8e32:	4282      	cmp	r2, r0
    8e34:	d1e0      	bne.n	8df8 <_free_r+0x24>
    8e36:	6810      	ldr	r0, [r2, #0]
    8e38:	6852      	ldr	r2, [r2, #4]
    8e3a:	1841      	adds	r1, r0, r1
    8e3c:	6019      	str	r1, [r3, #0]
    8e3e:	605a      	str	r2, [r3, #4]
    8e40:	e7da      	b.n	8df8 <_free_r+0x24>
    8e42:	42a0      	cmp	r0, r4
    8e44:	d902      	bls.n	8e4c <_free_r+0x78>
    8e46:	230c      	movs	r3, #12
    8e48:	602b      	str	r3, [r5, #0]
    8e4a:	e7d5      	b.n	8df8 <_free_r+0x24>
    8e4c:	6821      	ldr	r1, [r4, #0]
    8e4e:	1860      	adds	r0, r4, r1
    8e50:	4282      	cmp	r2, r0
    8e52:	d103      	bne.n	8e5c <_free_r+0x88>
    8e54:	6810      	ldr	r0, [r2, #0]
    8e56:	6852      	ldr	r2, [r2, #4]
    8e58:	1841      	adds	r1, r0, r1
    8e5a:	6021      	str	r1, [r4, #0]
    8e5c:	6062      	str	r2, [r4, #4]
    8e5e:	605c      	str	r4, [r3, #4]
    8e60:	e7ca      	b.n	8df8 <_free_r+0x24>
    8e62:	46c0      	nop			; (mov r8, r8)
    8e64:	20001038 	.word	0x20001038

00008e68 <_malloc_r>:
    8e68:	2303      	movs	r3, #3
    8e6a:	b570      	push	{r4, r5, r6, lr}
    8e6c:	1ccd      	adds	r5, r1, #3
    8e6e:	439d      	bics	r5, r3
    8e70:	3508      	adds	r5, #8
    8e72:	0006      	movs	r6, r0
    8e74:	2d0c      	cmp	r5, #12
    8e76:	d21e      	bcs.n	8eb6 <_malloc_r+0x4e>
    8e78:	250c      	movs	r5, #12
    8e7a:	42a9      	cmp	r1, r5
    8e7c:	d81d      	bhi.n	8eba <_malloc_r+0x52>
    8e7e:	0030      	movs	r0, r6
    8e80:	f001 fc37 	bl	a6f2 <__malloc_lock>
    8e84:	4a25      	ldr	r2, [pc, #148]	; (8f1c <_malloc_r+0xb4>)
    8e86:	6814      	ldr	r4, [r2, #0]
    8e88:	0021      	movs	r1, r4
    8e8a:	2900      	cmp	r1, #0
    8e8c:	d119      	bne.n	8ec2 <_malloc_r+0x5a>
    8e8e:	4c24      	ldr	r4, [pc, #144]	; (8f20 <_malloc_r+0xb8>)
    8e90:	6823      	ldr	r3, [r4, #0]
    8e92:	2b00      	cmp	r3, #0
    8e94:	d103      	bne.n	8e9e <_malloc_r+0x36>
    8e96:	0030      	movs	r0, r6
    8e98:	f000 fcbe 	bl	9818 <_sbrk_r>
    8e9c:	6020      	str	r0, [r4, #0]
    8e9e:	0029      	movs	r1, r5
    8ea0:	0030      	movs	r0, r6
    8ea2:	f000 fcb9 	bl	9818 <_sbrk_r>
    8ea6:	1c43      	adds	r3, r0, #1
    8ea8:	d12c      	bne.n	8f04 <_malloc_r+0x9c>
    8eaa:	230c      	movs	r3, #12
    8eac:	0030      	movs	r0, r6
    8eae:	6033      	str	r3, [r6, #0]
    8eb0:	f001 fc20 	bl	a6f4 <__malloc_unlock>
    8eb4:	e003      	b.n	8ebe <_malloc_r+0x56>
    8eb6:	2d00      	cmp	r5, #0
    8eb8:	dadf      	bge.n	8e7a <_malloc_r+0x12>
    8eba:	230c      	movs	r3, #12
    8ebc:	6033      	str	r3, [r6, #0]
    8ebe:	2000      	movs	r0, #0
    8ec0:	bd70      	pop	{r4, r5, r6, pc}
    8ec2:	680b      	ldr	r3, [r1, #0]
    8ec4:	1b5b      	subs	r3, r3, r5
    8ec6:	d41a      	bmi.n	8efe <_malloc_r+0x96>
    8ec8:	2b0b      	cmp	r3, #11
    8eca:	d903      	bls.n	8ed4 <_malloc_r+0x6c>
    8ecc:	600b      	str	r3, [r1, #0]
    8ece:	18cc      	adds	r4, r1, r3
    8ed0:	6025      	str	r5, [r4, #0]
    8ed2:	e003      	b.n	8edc <_malloc_r+0x74>
    8ed4:	428c      	cmp	r4, r1
    8ed6:	d10e      	bne.n	8ef6 <_malloc_r+0x8e>
    8ed8:	6863      	ldr	r3, [r4, #4]
    8eda:	6013      	str	r3, [r2, #0]
    8edc:	0030      	movs	r0, r6
    8ede:	f001 fc09 	bl	a6f4 <__malloc_unlock>
    8ee2:	0020      	movs	r0, r4
    8ee4:	2207      	movs	r2, #7
    8ee6:	300b      	adds	r0, #11
    8ee8:	1d23      	adds	r3, r4, #4
    8eea:	4390      	bics	r0, r2
    8eec:	1ac3      	subs	r3, r0, r3
    8eee:	d0e7      	beq.n	8ec0 <_malloc_r+0x58>
    8ef0:	425a      	negs	r2, r3
    8ef2:	50e2      	str	r2, [r4, r3]
    8ef4:	e7e4      	b.n	8ec0 <_malloc_r+0x58>
    8ef6:	684b      	ldr	r3, [r1, #4]
    8ef8:	6063      	str	r3, [r4, #4]
    8efa:	000c      	movs	r4, r1
    8efc:	e7ee      	b.n	8edc <_malloc_r+0x74>
    8efe:	000c      	movs	r4, r1
    8f00:	6849      	ldr	r1, [r1, #4]
    8f02:	e7c2      	b.n	8e8a <_malloc_r+0x22>
    8f04:	2303      	movs	r3, #3
    8f06:	1cc4      	adds	r4, r0, #3
    8f08:	439c      	bics	r4, r3
    8f0a:	42a0      	cmp	r0, r4
    8f0c:	d0e0      	beq.n	8ed0 <_malloc_r+0x68>
    8f0e:	1a21      	subs	r1, r4, r0
    8f10:	0030      	movs	r0, r6
    8f12:	f000 fc81 	bl	9818 <_sbrk_r>
    8f16:	1c43      	adds	r3, r0, #1
    8f18:	d1da      	bne.n	8ed0 <_malloc_r+0x68>
    8f1a:	e7c6      	b.n	8eaa <_malloc_r+0x42>
    8f1c:	20001038 	.word	0x20001038
    8f20:	2000103c 	.word	0x2000103c

00008f24 <__cvt>:
    8f24:	b5f0      	push	{r4, r5, r6, r7, lr}
    8f26:	b08b      	sub	sp, #44	; 0x2c
    8f28:	0014      	movs	r4, r2
    8f2a:	1e1d      	subs	r5, r3, #0
    8f2c:	9912      	ldr	r1, [sp, #72]	; 0x48
    8f2e:	da53      	bge.n	8fd8 <__cvt+0xb4>
    8f30:	2480      	movs	r4, #128	; 0x80
    8f32:	0624      	lsls	r4, r4, #24
    8f34:	191b      	adds	r3, r3, r4
    8f36:	001d      	movs	r5, r3
    8f38:	0014      	movs	r4, r2
    8f3a:	232d      	movs	r3, #45	; 0x2d
    8f3c:	700b      	strb	r3, [r1, #0]
    8f3e:	2320      	movs	r3, #32
    8f40:	9e14      	ldr	r6, [sp, #80]	; 0x50
    8f42:	2203      	movs	r2, #3
    8f44:	439e      	bics	r6, r3
    8f46:	2e46      	cmp	r6, #70	; 0x46
    8f48:	d007      	beq.n	8f5a <__cvt+0x36>
    8f4a:	0033      	movs	r3, r6
    8f4c:	3b45      	subs	r3, #69	; 0x45
    8f4e:	4259      	negs	r1, r3
    8f50:	414b      	adcs	r3, r1
    8f52:	9910      	ldr	r1, [sp, #64]	; 0x40
    8f54:	3a01      	subs	r2, #1
    8f56:	18cb      	adds	r3, r1, r3
    8f58:	9310      	str	r3, [sp, #64]	; 0x40
    8f5a:	ab09      	add	r3, sp, #36	; 0x24
    8f5c:	9304      	str	r3, [sp, #16]
    8f5e:	ab08      	add	r3, sp, #32
    8f60:	9303      	str	r3, [sp, #12]
    8f62:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    8f64:	9200      	str	r2, [sp, #0]
    8f66:	9302      	str	r3, [sp, #8]
    8f68:	9b10      	ldr	r3, [sp, #64]	; 0x40
    8f6a:	0022      	movs	r2, r4
    8f6c:	9301      	str	r3, [sp, #4]
    8f6e:	002b      	movs	r3, r5
    8f70:	f000 fdc0 	bl	9af4 <_dtoa_r>
    8f74:	0007      	movs	r7, r0
    8f76:	2e47      	cmp	r6, #71	; 0x47
    8f78:	d102      	bne.n	8f80 <__cvt+0x5c>
    8f7a:	9b11      	ldr	r3, [sp, #68]	; 0x44
    8f7c:	07db      	lsls	r3, r3, #31
    8f7e:	d524      	bpl.n	8fca <__cvt+0xa6>
    8f80:	9b10      	ldr	r3, [sp, #64]	; 0x40
    8f82:	18fb      	adds	r3, r7, r3
    8f84:	9307      	str	r3, [sp, #28]
    8f86:	2e46      	cmp	r6, #70	; 0x46
    8f88:	d114      	bne.n	8fb4 <__cvt+0x90>
    8f8a:	783b      	ldrb	r3, [r7, #0]
    8f8c:	2b30      	cmp	r3, #48	; 0x30
    8f8e:	d10c      	bne.n	8faa <__cvt+0x86>
    8f90:	2200      	movs	r2, #0
    8f92:	2300      	movs	r3, #0
    8f94:	0020      	movs	r0, r4
    8f96:	0029      	movs	r1, r5
    8f98:	f7fe f8dc 	bl	7154 <__aeabi_dcmpeq>
    8f9c:	2800      	cmp	r0, #0
    8f9e:	d104      	bne.n	8faa <__cvt+0x86>
    8fa0:	2301      	movs	r3, #1
    8fa2:	9a10      	ldr	r2, [sp, #64]	; 0x40
    8fa4:	1a9b      	subs	r3, r3, r2
    8fa6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    8fa8:	6013      	str	r3, [r2, #0]
    8faa:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    8fac:	9a07      	ldr	r2, [sp, #28]
    8fae:	681b      	ldr	r3, [r3, #0]
    8fb0:	18d3      	adds	r3, r2, r3
    8fb2:	9307      	str	r3, [sp, #28]
    8fb4:	2200      	movs	r2, #0
    8fb6:	2300      	movs	r3, #0
    8fb8:	0020      	movs	r0, r4
    8fba:	0029      	movs	r1, r5
    8fbc:	f7fe f8ca 	bl	7154 <__aeabi_dcmpeq>
    8fc0:	2230      	movs	r2, #48	; 0x30
    8fc2:	2800      	cmp	r0, #0
    8fc4:	d00d      	beq.n	8fe2 <__cvt+0xbe>
    8fc6:	9b07      	ldr	r3, [sp, #28]
    8fc8:	9309      	str	r3, [sp, #36]	; 0x24
    8fca:	0038      	movs	r0, r7
    8fcc:	9b09      	ldr	r3, [sp, #36]	; 0x24
    8fce:	9a15      	ldr	r2, [sp, #84]	; 0x54
    8fd0:	1bdb      	subs	r3, r3, r7
    8fd2:	6013      	str	r3, [r2, #0]
    8fd4:	b00b      	add	sp, #44	; 0x2c
    8fd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8fd8:	2300      	movs	r3, #0
    8fda:	e7af      	b.n	8f3c <__cvt+0x18>
    8fdc:	1c59      	adds	r1, r3, #1
    8fde:	9109      	str	r1, [sp, #36]	; 0x24
    8fe0:	701a      	strb	r2, [r3, #0]
    8fe2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    8fe4:	9907      	ldr	r1, [sp, #28]
    8fe6:	4299      	cmp	r1, r3
    8fe8:	d8f8      	bhi.n	8fdc <__cvt+0xb8>
    8fea:	e7ee      	b.n	8fca <__cvt+0xa6>

00008fec <__exponent>:
    8fec:	b5f0      	push	{r4, r5, r6, r7, lr}
    8fee:	232b      	movs	r3, #43	; 0x2b
    8ff0:	b085      	sub	sp, #20
    8ff2:	0007      	movs	r7, r0
    8ff4:	000c      	movs	r4, r1
    8ff6:	7002      	strb	r2, [r0, #0]
    8ff8:	1c86      	adds	r6, r0, #2
    8ffa:	2900      	cmp	r1, #0
    8ffc:	da01      	bge.n	9002 <__exponent+0x16>
    8ffe:	232d      	movs	r3, #45	; 0x2d
    9000:	424c      	negs	r4, r1
    9002:	707b      	strb	r3, [r7, #1]
    9004:	2c09      	cmp	r4, #9
    9006:	dd23      	ble.n	9050 <__exponent+0x64>
    9008:	ab02      	add	r3, sp, #8
    900a:	1ddd      	adds	r5, r3, #7
    900c:	1e6b      	subs	r3, r5, #1
    900e:	0020      	movs	r0, r4
    9010:	210a      	movs	r1, #10
    9012:	9301      	str	r3, [sp, #4]
    9014:	f7fe f888 	bl	7128 <__aeabi_idivmod>
    9018:	1e6b      	subs	r3, r5, #1
    901a:	3130      	adds	r1, #48	; 0x30
    901c:	7019      	strb	r1, [r3, #0]
    901e:	0020      	movs	r0, r4
    9020:	210a      	movs	r1, #10
    9022:	f7fd ff9b 	bl	6f5c <__divsi3>
    9026:	0004      	movs	r4, r0
    9028:	2809      	cmp	r0, #9
    902a:	dc0a      	bgt.n	9042 <__exponent+0x56>
    902c:	3d02      	subs	r5, #2
    902e:	3430      	adds	r4, #48	; 0x30
    9030:	702c      	strb	r4, [r5, #0]
    9032:	ab02      	add	r3, sp, #8
    9034:	3307      	adds	r3, #7
    9036:	0030      	movs	r0, r6
    9038:	42ab      	cmp	r3, r5
    903a:	d804      	bhi.n	9046 <__exponent+0x5a>
    903c:	1bc0      	subs	r0, r0, r7
    903e:	b005      	add	sp, #20
    9040:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9042:	9d01      	ldr	r5, [sp, #4]
    9044:	e7e2      	b.n	900c <__exponent+0x20>
    9046:	782b      	ldrb	r3, [r5, #0]
    9048:	3501      	adds	r5, #1
    904a:	7033      	strb	r3, [r6, #0]
    904c:	3601      	adds	r6, #1
    904e:	e7f0      	b.n	9032 <__exponent+0x46>
    9050:	2330      	movs	r3, #48	; 0x30
    9052:	18e4      	adds	r4, r4, r3
    9054:	7033      	strb	r3, [r6, #0]
    9056:	1cb0      	adds	r0, r6, #2
    9058:	7074      	strb	r4, [r6, #1]
    905a:	e7ef      	b.n	903c <__exponent+0x50>

0000905c <_printf_float>:
    905c:	b5f0      	push	{r4, r5, r6, r7, lr}
    905e:	b095      	sub	sp, #84	; 0x54
    9060:	000c      	movs	r4, r1
    9062:	920a      	str	r2, [sp, #40]	; 0x28
    9064:	930b      	str	r3, [sp, #44]	; 0x2c
    9066:	9d1a      	ldr	r5, [sp, #104]	; 0x68
    9068:	9009      	str	r0, [sp, #36]	; 0x24
    906a:	f001 fb2b 	bl	a6c4 <_localeconv_r>
    906e:	6803      	ldr	r3, [r0, #0]
    9070:	0018      	movs	r0, r3
    9072:	930d      	str	r3, [sp, #52]	; 0x34
    9074:	f000 fc0c 	bl	9890 <strlen>
    9078:	2300      	movs	r3, #0
    907a:	9312      	str	r3, [sp, #72]	; 0x48
    907c:	6823      	ldr	r3, [r4, #0]
    907e:	900e      	str	r0, [sp, #56]	; 0x38
    9080:	930c      	str	r3, [sp, #48]	; 0x30
    9082:	990c      	ldr	r1, [sp, #48]	; 0x30
    9084:	7e27      	ldrb	r7, [r4, #24]
    9086:	682b      	ldr	r3, [r5, #0]
    9088:	2207      	movs	r2, #7
    908a:	05c9      	lsls	r1, r1, #23
    908c:	d547      	bpl.n	911e <_printf_float+0xc2>
    908e:	189b      	adds	r3, r3, r2
    9090:	4393      	bics	r3, r2
    9092:	001a      	movs	r2, r3
    9094:	3208      	adds	r2, #8
    9096:	602a      	str	r2, [r5, #0]
    9098:	681a      	ldr	r2, [r3, #0]
    909a:	685b      	ldr	r3, [r3, #4]
    909c:	64a2      	str	r2, [r4, #72]	; 0x48
    909e:	64e3      	str	r3, [r4, #76]	; 0x4c
    90a0:	2201      	movs	r2, #1
    90a2:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
    90a4:	6ca6      	ldr	r6, [r4, #72]	; 0x48
    90a6:	006b      	lsls	r3, r5, #1
    90a8:	085b      	lsrs	r3, r3, #1
    90aa:	930f      	str	r3, [sp, #60]	; 0x3c
    90ac:	4252      	negs	r2, r2
    90ae:	4ba7      	ldr	r3, [pc, #668]	; (934c <_printf_float+0x2f0>)
    90b0:	0030      	movs	r0, r6
    90b2:	990f      	ldr	r1, [sp, #60]	; 0x3c
    90b4:	f7ff fd56 	bl	8b64 <__aeabi_dcmpun>
    90b8:	2800      	cmp	r0, #0
    90ba:	d000      	beq.n	90be <_printf_float+0x62>
    90bc:	e206      	b.n	94cc <_printf_float+0x470>
    90be:	2201      	movs	r2, #1
    90c0:	4ba2      	ldr	r3, [pc, #648]	; (934c <_printf_float+0x2f0>)
    90c2:	4252      	negs	r2, r2
    90c4:	0030      	movs	r0, r6
    90c6:	990f      	ldr	r1, [sp, #60]	; 0x3c
    90c8:	f7fe f854 	bl	7174 <__aeabi_dcmple>
    90cc:	2800      	cmp	r0, #0
    90ce:	d000      	beq.n	90d2 <_printf_float+0x76>
    90d0:	e1fc      	b.n	94cc <_printf_float+0x470>
    90d2:	2200      	movs	r2, #0
    90d4:	2300      	movs	r3, #0
    90d6:	0030      	movs	r0, r6
    90d8:	0029      	movs	r1, r5
    90da:	f7fe f841 	bl	7160 <__aeabi_dcmplt>
    90de:	2800      	cmp	r0, #0
    90e0:	d003      	beq.n	90ea <_printf_float+0x8e>
    90e2:	0023      	movs	r3, r4
    90e4:	222d      	movs	r2, #45	; 0x2d
    90e6:	3343      	adds	r3, #67	; 0x43
    90e8:	701a      	strb	r2, [r3, #0]
    90ea:	4d99      	ldr	r5, [pc, #612]	; (9350 <_printf_float+0x2f4>)
    90ec:	2f47      	cmp	r7, #71	; 0x47
    90ee:	d800      	bhi.n	90f2 <_printf_float+0x96>
    90f0:	4d98      	ldr	r5, [pc, #608]	; (9354 <_printf_float+0x2f8>)
    90f2:	2303      	movs	r3, #3
    90f4:	2600      	movs	r6, #0
    90f6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    90f8:	6123      	str	r3, [r4, #16]
    90fa:	3301      	adds	r3, #1
    90fc:	439a      	bics	r2, r3
    90fe:	6022      	str	r2, [r4, #0]
    9100:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    9102:	aa13      	add	r2, sp, #76	; 0x4c
    9104:	9300      	str	r3, [sp, #0]
    9106:	0021      	movs	r1, r4
    9108:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    910a:	9809      	ldr	r0, [sp, #36]	; 0x24
    910c:	f000 f9f2 	bl	94f4 <_printf_common>
    9110:	1c43      	adds	r3, r0, #1
    9112:	d000      	beq.n	9116 <_printf_float+0xba>
    9114:	e09c      	b.n	9250 <_printf_float+0x1f4>
    9116:	2001      	movs	r0, #1
    9118:	4240      	negs	r0, r0
    911a:	b015      	add	sp, #84	; 0x54
    911c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    911e:	3307      	adds	r3, #7
    9120:	e7b6      	b.n	9090 <_printf_float+0x34>
    9122:	2380      	movs	r3, #128	; 0x80
    9124:	6862      	ldr	r2, [r4, #4]
    9126:	00db      	lsls	r3, r3, #3
    9128:	1c51      	adds	r1, r2, #1
    912a:	d145      	bne.n	91b8 <_printf_float+0x15c>
    912c:	3207      	adds	r2, #7
    912e:	6062      	str	r2, [r4, #4]
    9130:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    9132:	2100      	movs	r1, #0
    9134:	4313      	orrs	r3, r2
    9136:	aa12      	add	r2, sp, #72	; 0x48
    9138:	9205      	str	r2, [sp, #20]
    913a:	aa11      	add	r2, sp, #68	; 0x44
    913c:	9203      	str	r2, [sp, #12]
    913e:	2223      	movs	r2, #35	; 0x23
    9140:	6023      	str	r3, [r4, #0]
    9142:	9106      	str	r1, [sp, #24]
    9144:	9301      	str	r3, [sp, #4]
    9146:	a908      	add	r1, sp, #32
    9148:	6863      	ldr	r3, [r4, #4]
    914a:	1852      	adds	r2, r2, r1
    914c:	9202      	str	r2, [sp, #8]
    914e:	9300      	str	r3, [sp, #0]
    9150:	0032      	movs	r2, r6
    9152:	002b      	movs	r3, r5
    9154:	9704      	str	r7, [sp, #16]
    9156:	9809      	ldr	r0, [sp, #36]	; 0x24
    9158:	f7ff fee4 	bl	8f24 <__cvt>
    915c:	2320      	movs	r3, #32
    915e:	003a      	movs	r2, r7
    9160:	0005      	movs	r5, r0
    9162:	439a      	bics	r2, r3
    9164:	2a47      	cmp	r2, #71	; 0x47
    9166:	d107      	bne.n	9178 <_printf_float+0x11c>
    9168:	9b11      	ldr	r3, [sp, #68]	; 0x44
    916a:	1cda      	adds	r2, r3, #3
    916c:	db02      	blt.n	9174 <_printf_float+0x118>
    916e:	6862      	ldr	r2, [r4, #4]
    9170:	4293      	cmp	r3, r2
    9172:	dd5b      	ble.n	922c <_printf_float+0x1d0>
    9174:	3f02      	subs	r7, #2
    9176:	b2ff      	uxtb	r7, r7
    9178:	9911      	ldr	r1, [sp, #68]	; 0x44
    917a:	2f65      	cmp	r7, #101	; 0x65
    917c:	d83b      	bhi.n	91f6 <_printf_float+0x19a>
    917e:	0020      	movs	r0, r4
    9180:	3901      	subs	r1, #1
    9182:	003a      	movs	r2, r7
    9184:	3050      	adds	r0, #80	; 0x50
    9186:	9111      	str	r1, [sp, #68]	; 0x44
    9188:	f7ff ff30 	bl	8fec <__exponent>
    918c:	9a12      	ldr	r2, [sp, #72]	; 0x48
    918e:	0006      	movs	r6, r0
    9190:	1883      	adds	r3, r0, r2
    9192:	6123      	str	r3, [r4, #16]
    9194:	2a01      	cmp	r2, #1
    9196:	dc02      	bgt.n	919e <_printf_float+0x142>
    9198:	6822      	ldr	r2, [r4, #0]
    919a:	07d2      	lsls	r2, r2, #31
    919c:	d501      	bpl.n	91a2 <_printf_float+0x146>
    919e:	3301      	adds	r3, #1
    91a0:	6123      	str	r3, [r4, #16]
    91a2:	2323      	movs	r3, #35	; 0x23
    91a4:	aa08      	add	r2, sp, #32
    91a6:	189b      	adds	r3, r3, r2
    91a8:	781b      	ldrb	r3, [r3, #0]
    91aa:	2b00      	cmp	r3, #0
    91ac:	d0a8      	beq.n	9100 <_printf_float+0xa4>
    91ae:	0023      	movs	r3, r4
    91b0:	222d      	movs	r2, #45	; 0x2d
    91b2:	3343      	adds	r3, #67	; 0x43
    91b4:	701a      	strb	r2, [r3, #0]
    91b6:	e7a3      	b.n	9100 <_printf_float+0xa4>
    91b8:	2f67      	cmp	r7, #103	; 0x67
    91ba:	d001      	beq.n	91c0 <_printf_float+0x164>
    91bc:	2f47      	cmp	r7, #71	; 0x47
    91be:	d1b7      	bne.n	9130 <_printf_float+0xd4>
    91c0:	2a00      	cmp	r2, #0
    91c2:	d016      	beq.n	91f2 <_printf_float+0x196>
    91c4:	990c      	ldr	r1, [sp, #48]	; 0x30
    91c6:	a808      	add	r0, sp, #32
    91c8:	430b      	orrs	r3, r1
    91ca:	2100      	movs	r1, #0
    91cc:	9106      	str	r1, [sp, #24]
    91ce:	a912      	add	r1, sp, #72	; 0x48
    91d0:	9105      	str	r1, [sp, #20]
    91d2:	a911      	add	r1, sp, #68	; 0x44
    91d4:	9103      	str	r1, [sp, #12]
    91d6:	2123      	movs	r1, #35	; 0x23
    91d8:	1809      	adds	r1, r1, r0
    91da:	6023      	str	r3, [r4, #0]
    91dc:	9301      	str	r3, [sp, #4]
    91de:	9200      	str	r2, [sp, #0]
    91e0:	002b      	movs	r3, r5
    91e2:	9704      	str	r7, [sp, #16]
    91e4:	9102      	str	r1, [sp, #8]
    91e6:	0032      	movs	r2, r6
    91e8:	9809      	ldr	r0, [sp, #36]	; 0x24
    91ea:	f7ff fe9b 	bl	8f24 <__cvt>
    91ee:	0005      	movs	r5, r0
    91f0:	e7ba      	b.n	9168 <_printf_float+0x10c>
    91f2:	2201      	movs	r2, #1
    91f4:	e79b      	b.n	912e <_printf_float+0xd2>
    91f6:	2f66      	cmp	r7, #102	; 0x66
    91f8:	d119      	bne.n	922e <_printf_float+0x1d2>
    91fa:	6863      	ldr	r3, [r4, #4]
    91fc:	2900      	cmp	r1, #0
    91fe:	dd0c      	ble.n	921a <_printf_float+0x1be>
    9200:	6121      	str	r1, [r4, #16]
    9202:	2b00      	cmp	r3, #0
    9204:	d102      	bne.n	920c <_printf_float+0x1b0>
    9206:	6822      	ldr	r2, [r4, #0]
    9208:	07d2      	lsls	r2, r2, #31
    920a:	d502      	bpl.n	9212 <_printf_float+0x1b6>
    920c:	3301      	adds	r3, #1
    920e:	185b      	adds	r3, r3, r1
    9210:	6123      	str	r3, [r4, #16]
    9212:	9b11      	ldr	r3, [sp, #68]	; 0x44
    9214:	2600      	movs	r6, #0
    9216:	65a3      	str	r3, [r4, #88]	; 0x58
    9218:	e7c3      	b.n	91a2 <_printf_float+0x146>
    921a:	2b00      	cmp	r3, #0
    921c:	d103      	bne.n	9226 <_printf_float+0x1ca>
    921e:	2201      	movs	r2, #1
    9220:	6821      	ldr	r1, [r4, #0]
    9222:	4211      	tst	r1, r2
    9224:	d000      	beq.n	9228 <_printf_float+0x1cc>
    9226:	1c9a      	adds	r2, r3, #2
    9228:	6122      	str	r2, [r4, #16]
    922a:	e7f2      	b.n	9212 <_printf_float+0x1b6>
    922c:	2767      	movs	r7, #103	; 0x67
    922e:	9b11      	ldr	r3, [sp, #68]	; 0x44
    9230:	9812      	ldr	r0, [sp, #72]	; 0x48
    9232:	4283      	cmp	r3, r0
    9234:	db05      	blt.n	9242 <_printf_float+0x1e6>
    9236:	6822      	ldr	r2, [r4, #0]
    9238:	6123      	str	r3, [r4, #16]
    923a:	07d2      	lsls	r2, r2, #31
    923c:	d5e9      	bpl.n	9212 <_printf_float+0x1b6>
    923e:	3301      	adds	r3, #1
    9240:	e7e6      	b.n	9210 <_printf_float+0x1b4>
    9242:	2201      	movs	r2, #1
    9244:	2b00      	cmp	r3, #0
    9246:	dc01      	bgt.n	924c <_printf_float+0x1f0>
    9248:	1892      	adds	r2, r2, r2
    924a:	1ad2      	subs	r2, r2, r3
    924c:	1812      	adds	r2, r2, r0
    924e:	e7eb      	b.n	9228 <_printf_float+0x1cc>
    9250:	6822      	ldr	r2, [r4, #0]
    9252:	0553      	lsls	r3, r2, #21
    9254:	d408      	bmi.n	9268 <_printf_float+0x20c>
    9256:	6923      	ldr	r3, [r4, #16]
    9258:	002a      	movs	r2, r5
    925a:	990a      	ldr	r1, [sp, #40]	; 0x28
    925c:	9809      	ldr	r0, [sp, #36]	; 0x24
    925e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    9260:	47a8      	blx	r5
    9262:	1c43      	adds	r3, r0, #1
    9264:	d129      	bne.n	92ba <_printf_float+0x25e>
    9266:	e756      	b.n	9116 <_printf_float+0xba>
    9268:	2f65      	cmp	r7, #101	; 0x65
    926a:	d800      	bhi.n	926e <_printf_float+0x212>
    926c:	e0dc      	b.n	9428 <_printf_float+0x3cc>
    926e:	6ca0      	ldr	r0, [r4, #72]	; 0x48
    9270:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
    9272:	2200      	movs	r2, #0
    9274:	2300      	movs	r3, #0
    9276:	f7fd ff6d 	bl	7154 <__aeabi_dcmpeq>
    927a:	2800      	cmp	r0, #0
    927c:	d035      	beq.n	92ea <_printf_float+0x28e>
    927e:	2301      	movs	r3, #1
    9280:	4a35      	ldr	r2, [pc, #212]	; (9358 <_printf_float+0x2fc>)
    9282:	990a      	ldr	r1, [sp, #40]	; 0x28
    9284:	9809      	ldr	r0, [sp, #36]	; 0x24
    9286:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    9288:	47a8      	blx	r5
    928a:	1c43      	adds	r3, r0, #1
    928c:	d100      	bne.n	9290 <_printf_float+0x234>
    928e:	e742      	b.n	9116 <_printf_float+0xba>
    9290:	9b11      	ldr	r3, [sp, #68]	; 0x44
    9292:	9a12      	ldr	r2, [sp, #72]	; 0x48
    9294:	4293      	cmp	r3, r2
    9296:	db02      	blt.n	929e <_printf_float+0x242>
    9298:	6823      	ldr	r3, [r4, #0]
    929a:	07db      	lsls	r3, r3, #31
    929c:	d50d      	bpl.n	92ba <_printf_float+0x25e>
    929e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    92a0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    92a2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    92a4:	990a      	ldr	r1, [sp, #40]	; 0x28
    92a6:	9809      	ldr	r0, [sp, #36]	; 0x24
    92a8:	47a8      	blx	r5
    92aa:	2500      	movs	r5, #0
    92ac:	1c43      	adds	r3, r0, #1
    92ae:	d100      	bne.n	92b2 <_printf_float+0x256>
    92b0:	e731      	b.n	9116 <_printf_float+0xba>
    92b2:	9b12      	ldr	r3, [sp, #72]	; 0x48
    92b4:	3b01      	subs	r3, #1
    92b6:	429d      	cmp	r5, r3
    92b8:	db0b      	blt.n	92d2 <_printf_float+0x276>
    92ba:	6823      	ldr	r3, [r4, #0]
    92bc:	2500      	movs	r5, #0
    92be:	079b      	lsls	r3, r3, #30
    92c0:	d500      	bpl.n	92c4 <_printf_float+0x268>
    92c2:	e0fd      	b.n	94c0 <_printf_float+0x464>
    92c4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    92c6:	68e0      	ldr	r0, [r4, #12]
    92c8:	4298      	cmp	r0, r3
    92ca:	db00      	blt.n	92ce <_printf_float+0x272>
    92cc:	e725      	b.n	911a <_printf_float+0xbe>
    92ce:	0018      	movs	r0, r3
    92d0:	e723      	b.n	911a <_printf_float+0xbe>
    92d2:	0022      	movs	r2, r4
    92d4:	2301      	movs	r3, #1
    92d6:	321a      	adds	r2, #26
    92d8:	990a      	ldr	r1, [sp, #40]	; 0x28
    92da:	9809      	ldr	r0, [sp, #36]	; 0x24
    92dc:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    92de:	47b0      	blx	r6
    92e0:	1c43      	adds	r3, r0, #1
    92e2:	d100      	bne.n	92e6 <_printf_float+0x28a>
    92e4:	e717      	b.n	9116 <_printf_float+0xba>
    92e6:	3501      	adds	r5, #1
    92e8:	e7e3      	b.n	92b2 <_printf_float+0x256>
    92ea:	9b11      	ldr	r3, [sp, #68]	; 0x44
    92ec:	2b00      	cmp	r3, #0
    92ee:	dc35      	bgt.n	935c <_printf_float+0x300>
    92f0:	2301      	movs	r3, #1
    92f2:	4a19      	ldr	r2, [pc, #100]	; (9358 <_printf_float+0x2fc>)
    92f4:	990a      	ldr	r1, [sp, #40]	; 0x28
    92f6:	9809      	ldr	r0, [sp, #36]	; 0x24
    92f8:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    92fa:	47b0      	blx	r6
    92fc:	1c43      	adds	r3, r0, #1
    92fe:	d100      	bne.n	9302 <_printf_float+0x2a6>
    9300:	e709      	b.n	9116 <_printf_float+0xba>
    9302:	9b11      	ldr	r3, [sp, #68]	; 0x44
    9304:	2b00      	cmp	r3, #0
    9306:	d105      	bne.n	9314 <_printf_float+0x2b8>
    9308:	9b12      	ldr	r3, [sp, #72]	; 0x48
    930a:	2b00      	cmp	r3, #0
    930c:	d102      	bne.n	9314 <_printf_float+0x2b8>
    930e:	6823      	ldr	r3, [r4, #0]
    9310:	07db      	lsls	r3, r3, #31
    9312:	d5d2      	bpl.n	92ba <_printf_float+0x25e>
    9314:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    9316:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    9318:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    931a:	990a      	ldr	r1, [sp, #40]	; 0x28
    931c:	9809      	ldr	r0, [sp, #36]	; 0x24
    931e:	47b0      	blx	r6
    9320:	2600      	movs	r6, #0
    9322:	1c43      	adds	r3, r0, #1
    9324:	d100      	bne.n	9328 <_printf_float+0x2cc>
    9326:	e6f6      	b.n	9116 <_printf_float+0xba>
    9328:	9b11      	ldr	r3, [sp, #68]	; 0x44
    932a:	425b      	negs	r3, r3
    932c:	429e      	cmp	r6, r3
    932e:	db01      	blt.n	9334 <_printf_float+0x2d8>
    9330:	9b12      	ldr	r3, [sp, #72]	; 0x48
    9332:	e791      	b.n	9258 <_printf_float+0x1fc>
    9334:	0022      	movs	r2, r4
    9336:	2301      	movs	r3, #1
    9338:	321a      	adds	r2, #26
    933a:	990a      	ldr	r1, [sp, #40]	; 0x28
    933c:	9809      	ldr	r0, [sp, #36]	; 0x24
    933e:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    9340:	47b8      	blx	r7
    9342:	1c43      	adds	r3, r0, #1
    9344:	d100      	bne.n	9348 <_printf_float+0x2ec>
    9346:	e6e6      	b.n	9116 <_printf_float+0xba>
    9348:	3601      	adds	r6, #1
    934a:	e7ed      	b.n	9328 <_printf_float+0x2cc>
    934c:	7fefffff 	.word	0x7fefffff
    9350:	0000b834 	.word	0x0000b834
    9354:	0000b830 	.word	0x0000b830
    9358:	0000b203 	.word	0x0000b203
    935c:	6da3      	ldr	r3, [r4, #88]	; 0x58
    935e:	9e12      	ldr	r6, [sp, #72]	; 0x48
    9360:	429e      	cmp	r6, r3
    9362:	dd00      	ble.n	9366 <_printf_float+0x30a>
    9364:	001e      	movs	r6, r3
    9366:	2e00      	cmp	r6, #0
    9368:	dc35      	bgt.n	93d6 <_printf_float+0x37a>
    936a:	2300      	movs	r3, #0
    936c:	930c      	str	r3, [sp, #48]	; 0x30
    936e:	43f3      	mvns	r3, r6
    9370:	17db      	asrs	r3, r3, #31
    9372:	930f      	str	r3, [sp, #60]	; 0x3c
    9374:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    9376:	6da7      	ldr	r7, [r4, #88]	; 0x58
    9378:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    937a:	4033      	ands	r3, r6
    937c:	1afb      	subs	r3, r7, r3
    937e:	429a      	cmp	r2, r3
    9380:	db32      	blt.n	93e8 <_printf_float+0x38c>
    9382:	9b11      	ldr	r3, [sp, #68]	; 0x44
    9384:	9a12      	ldr	r2, [sp, #72]	; 0x48
    9386:	4293      	cmp	r3, r2
    9388:	db3c      	blt.n	9404 <_printf_float+0x3a8>
    938a:	6823      	ldr	r3, [r4, #0]
    938c:	07db      	lsls	r3, r3, #31
    938e:	d439      	bmi.n	9404 <_printf_float+0x3a8>
    9390:	9e12      	ldr	r6, [sp, #72]	; 0x48
    9392:	9a11      	ldr	r2, [sp, #68]	; 0x44
    9394:	1bf3      	subs	r3, r6, r7
    9396:	1ab6      	subs	r6, r6, r2
    9398:	429e      	cmp	r6, r3
    939a:	dd00      	ble.n	939e <_printf_float+0x342>
    939c:	001e      	movs	r6, r3
    939e:	2e00      	cmp	r6, #0
    93a0:	dc39      	bgt.n	9416 <_printf_float+0x3ba>
    93a2:	43f7      	mvns	r7, r6
    93a4:	2500      	movs	r5, #0
    93a6:	17fb      	asrs	r3, r7, #31
    93a8:	930c      	str	r3, [sp, #48]	; 0x30
    93aa:	9a11      	ldr	r2, [sp, #68]	; 0x44
    93ac:	9b12      	ldr	r3, [sp, #72]	; 0x48
    93ae:	990c      	ldr	r1, [sp, #48]	; 0x30
    93b0:	1a9b      	subs	r3, r3, r2
    93b2:	0032      	movs	r2, r6
    93b4:	400a      	ands	r2, r1
    93b6:	1a9b      	subs	r3, r3, r2
    93b8:	429d      	cmp	r5, r3
    93ba:	db00      	blt.n	93be <_printf_float+0x362>
    93bc:	e77d      	b.n	92ba <_printf_float+0x25e>
    93be:	0022      	movs	r2, r4
    93c0:	2301      	movs	r3, #1
    93c2:	321a      	adds	r2, #26
    93c4:	990a      	ldr	r1, [sp, #40]	; 0x28
    93c6:	9809      	ldr	r0, [sp, #36]	; 0x24
    93c8:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    93ca:	47b8      	blx	r7
    93cc:	1c43      	adds	r3, r0, #1
    93ce:	d100      	bne.n	93d2 <_printf_float+0x376>
    93d0:	e6a1      	b.n	9116 <_printf_float+0xba>
    93d2:	3501      	adds	r5, #1
    93d4:	e7e9      	b.n	93aa <_printf_float+0x34e>
    93d6:	0033      	movs	r3, r6
    93d8:	002a      	movs	r2, r5
    93da:	990a      	ldr	r1, [sp, #40]	; 0x28
    93dc:	9809      	ldr	r0, [sp, #36]	; 0x24
    93de:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    93e0:	47b8      	blx	r7
    93e2:	1c43      	adds	r3, r0, #1
    93e4:	d1c1      	bne.n	936a <_printf_float+0x30e>
    93e6:	e696      	b.n	9116 <_printf_float+0xba>
    93e8:	0022      	movs	r2, r4
    93ea:	2301      	movs	r3, #1
    93ec:	321a      	adds	r2, #26
    93ee:	990a      	ldr	r1, [sp, #40]	; 0x28
    93f0:	9809      	ldr	r0, [sp, #36]	; 0x24
    93f2:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    93f4:	47b8      	blx	r7
    93f6:	1c43      	adds	r3, r0, #1
    93f8:	d100      	bne.n	93fc <_printf_float+0x3a0>
    93fa:	e68c      	b.n	9116 <_printf_float+0xba>
    93fc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    93fe:	3301      	adds	r3, #1
    9400:	930c      	str	r3, [sp, #48]	; 0x30
    9402:	e7b7      	b.n	9374 <_printf_float+0x318>
    9404:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    9406:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    9408:	990a      	ldr	r1, [sp, #40]	; 0x28
    940a:	9809      	ldr	r0, [sp, #36]	; 0x24
    940c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    940e:	47b0      	blx	r6
    9410:	1c43      	adds	r3, r0, #1
    9412:	d1bd      	bne.n	9390 <_printf_float+0x334>
    9414:	e67f      	b.n	9116 <_printf_float+0xba>
    9416:	19ea      	adds	r2, r5, r7
    9418:	0033      	movs	r3, r6
    941a:	990a      	ldr	r1, [sp, #40]	; 0x28
    941c:	9809      	ldr	r0, [sp, #36]	; 0x24
    941e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    9420:	47a8      	blx	r5
    9422:	1c43      	adds	r3, r0, #1
    9424:	d1bd      	bne.n	93a2 <_printf_float+0x346>
    9426:	e676      	b.n	9116 <_printf_float+0xba>
    9428:	9b12      	ldr	r3, [sp, #72]	; 0x48
    942a:	2b01      	cmp	r3, #1
    942c:	dc02      	bgt.n	9434 <_printf_float+0x3d8>
    942e:	2301      	movs	r3, #1
    9430:	421a      	tst	r2, r3
    9432:	d038      	beq.n	94a6 <_printf_float+0x44a>
    9434:	2301      	movs	r3, #1
    9436:	002a      	movs	r2, r5
    9438:	990a      	ldr	r1, [sp, #40]	; 0x28
    943a:	9809      	ldr	r0, [sp, #36]	; 0x24
    943c:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    943e:	47b8      	blx	r7
    9440:	1c43      	adds	r3, r0, #1
    9442:	d100      	bne.n	9446 <_printf_float+0x3ea>
    9444:	e667      	b.n	9116 <_printf_float+0xba>
    9446:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    9448:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    944a:	990a      	ldr	r1, [sp, #40]	; 0x28
    944c:	9809      	ldr	r0, [sp, #36]	; 0x24
    944e:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    9450:	47b8      	blx	r7
    9452:	1c43      	adds	r3, r0, #1
    9454:	d100      	bne.n	9458 <_printf_float+0x3fc>
    9456:	e65e      	b.n	9116 <_printf_float+0xba>
    9458:	6ca0      	ldr	r0, [r4, #72]	; 0x48
    945a:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
    945c:	2200      	movs	r2, #0
    945e:	2300      	movs	r3, #0
    9460:	f7fd fe78 	bl	7154 <__aeabi_dcmpeq>
    9464:	2800      	cmp	r0, #0
    9466:	d008      	beq.n	947a <_printf_float+0x41e>
    9468:	2500      	movs	r5, #0
    946a:	9b12      	ldr	r3, [sp, #72]	; 0x48
    946c:	3b01      	subs	r3, #1
    946e:	429d      	cmp	r5, r3
    9470:	db0d      	blt.n	948e <_printf_float+0x432>
    9472:	0022      	movs	r2, r4
    9474:	0033      	movs	r3, r6
    9476:	3250      	adds	r2, #80	; 0x50
    9478:	e6ef      	b.n	925a <_printf_float+0x1fe>
    947a:	9b12      	ldr	r3, [sp, #72]	; 0x48
    947c:	1c6a      	adds	r2, r5, #1
    947e:	3b01      	subs	r3, #1
    9480:	990a      	ldr	r1, [sp, #40]	; 0x28
    9482:	9809      	ldr	r0, [sp, #36]	; 0x24
    9484:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    9486:	47a8      	blx	r5
    9488:	1c43      	adds	r3, r0, #1
    948a:	d1f2      	bne.n	9472 <_printf_float+0x416>
    948c:	e643      	b.n	9116 <_printf_float+0xba>
    948e:	0022      	movs	r2, r4
    9490:	2301      	movs	r3, #1
    9492:	321a      	adds	r2, #26
    9494:	990a      	ldr	r1, [sp, #40]	; 0x28
    9496:	9809      	ldr	r0, [sp, #36]	; 0x24
    9498:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    949a:	47b8      	blx	r7
    949c:	1c43      	adds	r3, r0, #1
    949e:	d100      	bne.n	94a2 <_printf_float+0x446>
    94a0:	e639      	b.n	9116 <_printf_float+0xba>
    94a2:	3501      	adds	r5, #1
    94a4:	e7e1      	b.n	946a <_printf_float+0x40e>
    94a6:	002a      	movs	r2, r5
    94a8:	e7ea      	b.n	9480 <_printf_float+0x424>
    94aa:	0022      	movs	r2, r4
    94ac:	2301      	movs	r3, #1
    94ae:	3219      	adds	r2, #25
    94b0:	990a      	ldr	r1, [sp, #40]	; 0x28
    94b2:	9809      	ldr	r0, [sp, #36]	; 0x24
    94b4:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    94b6:	47b0      	blx	r6
    94b8:	1c43      	adds	r3, r0, #1
    94ba:	d100      	bne.n	94be <_printf_float+0x462>
    94bc:	e62b      	b.n	9116 <_printf_float+0xba>
    94be:	3501      	adds	r5, #1
    94c0:	68e3      	ldr	r3, [r4, #12]
    94c2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    94c4:	1a9b      	subs	r3, r3, r2
    94c6:	429d      	cmp	r5, r3
    94c8:	dbef      	blt.n	94aa <_printf_float+0x44e>
    94ca:	e6fb      	b.n	92c4 <_printf_float+0x268>
    94cc:	0032      	movs	r2, r6
    94ce:	002b      	movs	r3, r5
    94d0:	0030      	movs	r0, r6
    94d2:	0029      	movs	r1, r5
    94d4:	f7ff fb46 	bl	8b64 <__aeabi_dcmpun>
    94d8:	2800      	cmp	r0, #0
    94da:	d100      	bne.n	94de <_printf_float+0x482>
    94dc:	e621      	b.n	9122 <_printf_float+0xc6>
    94de:	4d03      	ldr	r5, [pc, #12]	; (94ec <_printf_float+0x490>)
    94e0:	2f47      	cmp	r7, #71	; 0x47
    94e2:	d900      	bls.n	94e6 <_printf_float+0x48a>
    94e4:	e605      	b.n	90f2 <_printf_float+0x96>
    94e6:	4d02      	ldr	r5, [pc, #8]	; (94f0 <_printf_float+0x494>)
    94e8:	e603      	b.n	90f2 <_printf_float+0x96>
    94ea:	46c0      	nop			; (mov r8, r8)
    94ec:	0000b83c 	.word	0x0000b83c
    94f0:	0000b838 	.word	0x0000b838

000094f4 <_printf_common>:
    94f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    94f6:	0015      	movs	r5, r2
    94f8:	9301      	str	r3, [sp, #4]
    94fa:	688a      	ldr	r2, [r1, #8]
    94fc:	690b      	ldr	r3, [r1, #16]
    94fe:	9000      	str	r0, [sp, #0]
    9500:	000c      	movs	r4, r1
    9502:	4293      	cmp	r3, r2
    9504:	da00      	bge.n	9508 <_printf_common+0x14>
    9506:	0013      	movs	r3, r2
    9508:	0022      	movs	r2, r4
    950a:	602b      	str	r3, [r5, #0]
    950c:	3243      	adds	r2, #67	; 0x43
    950e:	7812      	ldrb	r2, [r2, #0]
    9510:	2a00      	cmp	r2, #0
    9512:	d001      	beq.n	9518 <_printf_common+0x24>
    9514:	3301      	adds	r3, #1
    9516:	602b      	str	r3, [r5, #0]
    9518:	6823      	ldr	r3, [r4, #0]
    951a:	069b      	lsls	r3, r3, #26
    951c:	d502      	bpl.n	9524 <_printf_common+0x30>
    951e:	682b      	ldr	r3, [r5, #0]
    9520:	3302      	adds	r3, #2
    9522:	602b      	str	r3, [r5, #0]
    9524:	2706      	movs	r7, #6
    9526:	6823      	ldr	r3, [r4, #0]
    9528:	401f      	ands	r7, r3
    952a:	d027      	beq.n	957c <_printf_common+0x88>
    952c:	0023      	movs	r3, r4
    952e:	3343      	adds	r3, #67	; 0x43
    9530:	781b      	ldrb	r3, [r3, #0]
    9532:	1e5a      	subs	r2, r3, #1
    9534:	4193      	sbcs	r3, r2
    9536:	6822      	ldr	r2, [r4, #0]
    9538:	0692      	lsls	r2, r2, #26
    953a:	d430      	bmi.n	959e <_printf_common+0xaa>
    953c:	0022      	movs	r2, r4
    953e:	9901      	ldr	r1, [sp, #4]
    9540:	3243      	adds	r2, #67	; 0x43
    9542:	9800      	ldr	r0, [sp, #0]
    9544:	9e08      	ldr	r6, [sp, #32]
    9546:	47b0      	blx	r6
    9548:	1c43      	adds	r3, r0, #1
    954a:	d025      	beq.n	9598 <_printf_common+0xa4>
    954c:	2306      	movs	r3, #6
    954e:	6820      	ldr	r0, [r4, #0]
    9550:	682a      	ldr	r2, [r5, #0]
    9552:	68e1      	ldr	r1, [r4, #12]
    9554:	4003      	ands	r3, r0
    9556:	2500      	movs	r5, #0
    9558:	2b04      	cmp	r3, #4
    955a:	d103      	bne.n	9564 <_printf_common+0x70>
    955c:	1a8d      	subs	r5, r1, r2
    955e:	43eb      	mvns	r3, r5
    9560:	17db      	asrs	r3, r3, #31
    9562:	401d      	ands	r5, r3
    9564:	68a3      	ldr	r3, [r4, #8]
    9566:	6922      	ldr	r2, [r4, #16]
    9568:	4293      	cmp	r3, r2
    956a:	dd01      	ble.n	9570 <_printf_common+0x7c>
    956c:	1a9b      	subs	r3, r3, r2
    956e:	18ed      	adds	r5, r5, r3
    9570:	2700      	movs	r7, #0
    9572:	42bd      	cmp	r5, r7
    9574:	d120      	bne.n	95b8 <_printf_common+0xc4>
    9576:	2000      	movs	r0, #0
    9578:	e010      	b.n	959c <_printf_common+0xa8>
    957a:	3701      	adds	r7, #1
    957c:	68e3      	ldr	r3, [r4, #12]
    957e:	682a      	ldr	r2, [r5, #0]
    9580:	1a9b      	subs	r3, r3, r2
    9582:	429f      	cmp	r7, r3
    9584:	dad2      	bge.n	952c <_printf_common+0x38>
    9586:	0022      	movs	r2, r4
    9588:	2301      	movs	r3, #1
    958a:	3219      	adds	r2, #25
    958c:	9901      	ldr	r1, [sp, #4]
    958e:	9800      	ldr	r0, [sp, #0]
    9590:	9e08      	ldr	r6, [sp, #32]
    9592:	47b0      	blx	r6
    9594:	1c43      	adds	r3, r0, #1
    9596:	d1f0      	bne.n	957a <_printf_common+0x86>
    9598:	2001      	movs	r0, #1
    959a:	4240      	negs	r0, r0
    959c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    959e:	2030      	movs	r0, #48	; 0x30
    95a0:	18e1      	adds	r1, r4, r3
    95a2:	3143      	adds	r1, #67	; 0x43
    95a4:	7008      	strb	r0, [r1, #0]
    95a6:	0021      	movs	r1, r4
    95a8:	1c5a      	adds	r2, r3, #1
    95aa:	3145      	adds	r1, #69	; 0x45
    95ac:	7809      	ldrb	r1, [r1, #0]
    95ae:	18a2      	adds	r2, r4, r2
    95b0:	3243      	adds	r2, #67	; 0x43
    95b2:	3302      	adds	r3, #2
    95b4:	7011      	strb	r1, [r2, #0]
    95b6:	e7c1      	b.n	953c <_printf_common+0x48>
    95b8:	0022      	movs	r2, r4
    95ba:	2301      	movs	r3, #1
    95bc:	321a      	adds	r2, #26
    95be:	9901      	ldr	r1, [sp, #4]
    95c0:	9800      	ldr	r0, [sp, #0]
    95c2:	9e08      	ldr	r6, [sp, #32]
    95c4:	47b0      	blx	r6
    95c6:	1c43      	adds	r3, r0, #1
    95c8:	d0e6      	beq.n	9598 <_printf_common+0xa4>
    95ca:	3701      	adds	r7, #1
    95cc:	e7d1      	b.n	9572 <_printf_common+0x7e>
	...

000095d0 <_printf_i>:
    95d0:	b5f0      	push	{r4, r5, r6, r7, lr}
    95d2:	b08b      	sub	sp, #44	; 0x2c
    95d4:	9206      	str	r2, [sp, #24]
    95d6:	000a      	movs	r2, r1
    95d8:	3243      	adds	r2, #67	; 0x43
    95da:	9307      	str	r3, [sp, #28]
    95dc:	9005      	str	r0, [sp, #20]
    95de:	9204      	str	r2, [sp, #16]
    95e0:	7e0a      	ldrb	r2, [r1, #24]
    95e2:	000c      	movs	r4, r1
    95e4:	9b10      	ldr	r3, [sp, #64]	; 0x40
    95e6:	2a6e      	cmp	r2, #110	; 0x6e
    95e8:	d100      	bne.n	95ec <_printf_i+0x1c>
    95ea:	e08f      	b.n	970c <_printf_i+0x13c>
    95ec:	d817      	bhi.n	961e <_printf_i+0x4e>
    95ee:	2a63      	cmp	r2, #99	; 0x63
    95f0:	d02c      	beq.n	964c <_printf_i+0x7c>
    95f2:	d808      	bhi.n	9606 <_printf_i+0x36>
    95f4:	2a00      	cmp	r2, #0
    95f6:	d100      	bne.n	95fa <_printf_i+0x2a>
    95f8:	e099      	b.n	972e <_printf_i+0x15e>
    95fa:	2a58      	cmp	r2, #88	; 0x58
    95fc:	d054      	beq.n	96a8 <_printf_i+0xd8>
    95fe:	0026      	movs	r6, r4
    9600:	3642      	adds	r6, #66	; 0x42
    9602:	7032      	strb	r2, [r6, #0]
    9604:	e029      	b.n	965a <_printf_i+0x8a>
    9606:	2a64      	cmp	r2, #100	; 0x64
    9608:	d001      	beq.n	960e <_printf_i+0x3e>
    960a:	2a69      	cmp	r2, #105	; 0x69
    960c:	d1f7      	bne.n	95fe <_printf_i+0x2e>
    960e:	6821      	ldr	r1, [r4, #0]
    9610:	681a      	ldr	r2, [r3, #0]
    9612:	0608      	lsls	r0, r1, #24
    9614:	d523      	bpl.n	965e <_printf_i+0x8e>
    9616:	1d11      	adds	r1, r2, #4
    9618:	6019      	str	r1, [r3, #0]
    961a:	6815      	ldr	r5, [r2, #0]
    961c:	e025      	b.n	966a <_printf_i+0x9a>
    961e:	2a73      	cmp	r2, #115	; 0x73
    9620:	d100      	bne.n	9624 <_printf_i+0x54>
    9622:	e088      	b.n	9736 <_printf_i+0x166>
    9624:	d808      	bhi.n	9638 <_printf_i+0x68>
    9626:	2a6f      	cmp	r2, #111	; 0x6f
    9628:	d029      	beq.n	967e <_printf_i+0xae>
    962a:	2a70      	cmp	r2, #112	; 0x70
    962c:	d1e7      	bne.n	95fe <_printf_i+0x2e>
    962e:	2220      	movs	r2, #32
    9630:	6809      	ldr	r1, [r1, #0]
    9632:	430a      	orrs	r2, r1
    9634:	6022      	str	r2, [r4, #0]
    9636:	e003      	b.n	9640 <_printf_i+0x70>
    9638:	2a75      	cmp	r2, #117	; 0x75
    963a:	d020      	beq.n	967e <_printf_i+0xae>
    963c:	2a78      	cmp	r2, #120	; 0x78
    963e:	d1de      	bne.n	95fe <_printf_i+0x2e>
    9640:	0022      	movs	r2, r4
    9642:	2178      	movs	r1, #120	; 0x78
    9644:	3245      	adds	r2, #69	; 0x45
    9646:	7011      	strb	r1, [r2, #0]
    9648:	4a6c      	ldr	r2, [pc, #432]	; (97fc <_printf_i+0x22c>)
    964a:	e030      	b.n	96ae <_printf_i+0xde>
    964c:	000e      	movs	r6, r1
    964e:	681a      	ldr	r2, [r3, #0]
    9650:	3642      	adds	r6, #66	; 0x42
    9652:	1d11      	adds	r1, r2, #4
    9654:	6019      	str	r1, [r3, #0]
    9656:	6813      	ldr	r3, [r2, #0]
    9658:	7033      	strb	r3, [r6, #0]
    965a:	2301      	movs	r3, #1
    965c:	e079      	b.n	9752 <_printf_i+0x182>
    965e:	0649      	lsls	r1, r1, #25
    9660:	d5d9      	bpl.n	9616 <_printf_i+0x46>
    9662:	1d11      	adds	r1, r2, #4
    9664:	6019      	str	r1, [r3, #0]
    9666:	2300      	movs	r3, #0
    9668:	5ed5      	ldrsh	r5, [r2, r3]
    966a:	2d00      	cmp	r5, #0
    966c:	da03      	bge.n	9676 <_printf_i+0xa6>
    966e:	232d      	movs	r3, #45	; 0x2d
    9670:	9a04      	ldr	r2, [sp, #16]
    9672:	426d      	negs	r5, r5
    9674:	7013      	strb	r3, [r2, #0]
    9676:	4b62      	ldr	r3, [pc, #392]	; (9800 <_printf_i+0x230>)
    9678:	270a      	movs	r7, #10
    967a:	9303      	str	r3, [sp, #12]
    967c:	e02f      	b.n	96de <_printf_i+0x10e>
    967e:	6820      	ldr	r0, [r4, #0]
    9680:	6819      	ldr	r1, [r3, #0]
    9682:	0605      	lsls	r5, r0, #24
    9684:	d503      	bpl.n	968e <_printf_i+0xbe>
    9686:	1d08      	adds	r0, r1, #4
    9688:	6018      	str	r0, [r3, #0]
    968a:	680d      	ldr	r5, [r1, #0]
    968c:	e005      	b.n	969a <_printf_i+0xca>
    968e:	0640      	lsls	r0, r0, #25
    9690:	d5f9      	bpl.n	9686 <_printf_i+0xb6>
    9692:	680d      	ldr	r5, [r1, #0]
    9694:	1d08      	adds	r0, r1, #4
    9696:	6018      	str	r0, [r3, #0]
    9698:	b2ad      	uxth	r5, r5
    969a:	4b59      	ldr	r3, [pc, #356]	; (9800 <_printf_i+0x230>)
    969c:	2708      	movs	r7, #8
    969e:	9303      	str	r3, [sp, #12]
    96a0:	2a6f      	cmp	r2, #111	; 0x6f
    96a2:	d018      	beq.n	96d6 <_printf_i+0x106>
    96a4:	270a      	movs	r7, #10
    96a6:	e016      	b.n	96d6 <_printf_i+0x106>
    96a8:	3145      	adds	r1, #69	; 0x45
    96aa:	700a      	strb	r2, [r1, #0]
    96ac:	4a54      	ldr	r2, [pc, #336]	; (9800 <_printf_i+0x230>)
    96ae:	9203      	str	r2, [sp, #12]
    96b0:	681a      	ldr	r2, [r3, #0]
    96b2:	6821      	ldr	r1, [r4, #0]
    96b4:	1d10      	adds	r0, r2, #4
    96b6:	6018      	str	r0, [r3, #0]
    96b8:	6815      	ldr	r5, [r2, #0]
    96ba:	0608      	lsls	r0, r1, #24
    96bc:	d522      	bpl.n	9704 <_printf_i+0x134>
    96be:	07cb      	lsls	r3, r1, #31
    96c0:	d502      	bpl.n	96c8 <_printf_i+0xf8>
    96c2:	2320      	movs	r3, #32
    96c4:	4319      	orrs	r1, r3
    96c6:	6021      	str	r1, [r4, #0]
    96c8:	2710      	movs	r7, #16
    96ca:	2d00      	cmp	r5, #0
    96cc:	d103      	bne.n	96d6 <_printf_i+0x106>
    96ce:	2320      	movs	r3, #32
    96d0:	6822      	ldr	r2, [r4, #0]
    96d2:	439a      	bics	r2, r3
    96d4:	6022      	str	r2, [r4, #0]
    96d6:	0023      	movs	r3, r4
    96d8:	2200      	movs	r2, #0
    96da:	3343      	adds	r3, #67	; 0x43
    96dc:	701a      	strb	r2, [r3, #0]
    96de:	6863      	ldr	r3, [r4, #4]
    96e0:	60a3      	str	r3, [r4, #8]
    96e2:	2b00      	cmp	r3, #0
    96e4:	db5c      	blt.n	97a0 <_printf_i+0x1d0>
    96e6:	2204      	movs	r2, #4
    96e8:	6821      	ldr	r1, [r4, #0]
    96ea:	4391      	bics	r1, r2
    96ec:	6021      	str	r1, [r4, #0]
    96ee:	2d00      	cmp	r5, #0
    96f0:	d158      	bne.n	97a4 <_printf_i+0x1d4>
    96f2:	9e04      	ldr	r6, [sp, #16]
    96f4:	2b00      	cmp	r3, #0
    96f6:	d064      	beq.n	97c2 <_printf_i+0x1f2>
    96f8:	0026      	movs	r6, r4
    96fa:	9b03      	ldr	r3, [sp, #12]
    96fc:	3642      	adds	r6, #66	; 0x42
    96fe:	781b      	ldrb	r3, [r3, #0]
    9700:	7033      	strb	r3, [r6, #0]
    9702:	e05e      	b.n	97c2 <_printf_i+0x1f2>
    9704:	0648      	lsls	r0, r1, #25
    9706:	d5da      	bpl.n	96be <_printf_i+0xee>
    9708:	b2ad      	uxth	r5, r5
    970a:	e7d8      	b.n	96be <_printf_i+0xee>
    970c:	6809      	ldr	r1, [r1, #0]
    970e:	681a      	ldr	r2, [r3, #0]
    9710:	0608      	lsls	r0, r1, #24
    9712:	d505      	bpl.n	9720 <_printf_i+0x150>
    9714:	1d11      	adds	r1, r2, #4
    9716:	6019      	str	r1, [r3, #0]
    9718:	6813      	ldr	r3, [r2, #0]
    971a:	6962      	ldr	r2, [r4, #20]
    971c:	601a      	str	r2, [r3, #0]
    971e:	e006      	b.n	972e <_printf_i+0x15e>
    9720:	0649      	lsls	r1, r1, #25
    9722:	d5f7      	bpl.n	9714 <_printf_i+0x144>
    9724:	1d11      	adds	r1, r2, #4
    9726:	6019      	str	r1, [r3, #0]
    9728:	6813      	ldr	r3, [r2, #0]
    972a:	8aa2      	ldrh	r2, [r4, #20]
    972c:	801a      	strh	r2, [r3, #0]
    972e:	2300      	movs	r3, #0
    9730:	9e04      	ldr	r6, [sp, #16]
    9732:	6123      	str	r3, [r4, #16]
    9734:	e054      	b.n	97e0 <_printf_i+0x210>
    9736:	681a      	ldr	r2, [r3, #0]
    9738:	1d11      	adds	r1, r2, #4
    973a:	6019      	str	r1, [r3, #0]
    973c:	6816      	ldr	r6, [r2, #0]
    973e:	2100      	movs	r1, #0
    9740:	6862      	ldr	r2, [r4, #4]
    9742:	0030      	movs	r0, r6
    9744:	f000 ffca 	bl	a6dc <memchr>
    9748:	2800      	cmp	r0, #0
    974a:	d001      	beq.n	9750 <_printf_i+0x180>
    974c:	1b80      	subs	r0, r0, r6
    974e:	6060      	str	r0, [r4, #4]
    9750:	6863      	ldr	r3, [r4, #4]
    9752:	6123      	str	r3, [r4, #16]
    9754:	2300      	movs	r3, #0
    9756:	9a04      	ldr	r2, [sp, #16]
    9758:	7013      	strb	r3, [r2, #0]
    975a:	e041      	b.n	97e0 <_printf_i+0x210>
    975c:	6923      	ldr	r3, [r4, #16]
    975e:	0032      	movs	r2, r6
    9760:	9906      	ldr	r1, [sp, #24]
    9762:	9805      	ldr	r0, [sp, #20]
    9764:	9d07      	ldr	r5, [sp, #28]
    9766:	47a8      	blx	r5
    9768:	1c43      	adds	r3, r0, #1
    976a:	d043      	beq.n	97f4 <_printf_i+0x224>
    976c:	6823      	ldr	r3, [r4, #0]
    976e:	2500      	movs	r5, #0
    9770:	079b      	lsls	r3, r3, #30
    9772:	d40f      	bmi.n	9794 <_printf_i+0x1c4>
    9774:	9b09      	ldr	r3, [sp, #36]	; 0x24
    9776:	68e0      	ldr	r0, [r4, #12]
    9778:	4298      	cmp	r0, r3
    977a:	da3d      	bge.n	97f8 <_printf_i+0x228>
    977c:	0018      	movs	r0, r3
    977e:	e03b      	b.n	97f8 <_printf_i+0x228>
    9780:	0022      	movs	r2, r4
    9782:	2301      	movs	r3, #1
    9784:	3219      	adds	r2, #25
    9786:	9906      	ldr	r1, [sp, #24]
    9788:	9805      	ldr	r0, [sp, #20]
    978a:	9e07      	ldr	r6, [sp, #28]
    978c:	47b0      	blx	r6
    978e:	1c43      	adds	r3, r0, #1
    9790:	d030      	beq.n	97f4 <_printf_i+0x224>
    9792:	3501      	adds	r5, #1
    9794:	68e3      	ldr	r3, [r4, #12]
    9796:	9a09      	ldr	r2, [sp, #36]	; 0x24
    9798:	1a9b      	subs	r3, r3, r2
    979a:	429d      	cmp	r5, r3
    979c:	dbf0      	blt.n	9780 <_printf_i+0x1b0>
    979e:	e7e9      	b.n	9774 <_printf_i+0x1a4>
    97a0:	2d00      	cmp	r5, #0
    97a2:	d0a9      	beq.n	96f8 <_printf_i+0x128>
    97a4:	9e04      	ldr	r6, [sp, #16]
    97a6:	0028      	movs	r0, r5
    97a8:	0039      	movs	r1, r7
    97aa:	f7fd fbd3 	bl	6f54 <__aeabi_uidivmod>
    97ae:	9b03      	ldr	r3, [sp, #12]
    97b0:	3e01      	subs	r6, #1
    97b2:	5c5b      	ldrb	r3, [r3, r1]
    97b4:	0028      	movs	r0, r5
    97b6:	7033      	strb	r3, [r6, #0]
    97b8:	0039      	movs	r1, r7
    97ba:	f7fd fb45 	bl	6e48 <__udivsi3>
    97be:	1e05      	subs	r5, r0, #0
    97c0:	d1f1      	bne.n	97a6 <_printf_i+0x1d6>
    97c2:	2f08      	cmp	r7, #8
    97c4:	d109      	bne.n	97da <_printf_i+0x20a>
    97c6:	6823      	ldr	r3, [r4, #0]
    97c8:	07db      	lsls	r3, r3, #31
    97ca:	d506      	bpl.n	97da <_printf_i+0x20a>
    97cc:	6863      	ldr	r3, [r4, #4]
    97ce:	6922      	ldr	r2, [r4, #16]
    97d0:	4293      	cmp	r3, r2
    97d2:	dc02      	bgt.n	97da <_printf_i+0x20a>
    97d4:	2330      	movs	r3, #48	; 0x30
    97d6:	3e01      	subs	r6, #1
    97d8:	7033      	strb	r3, [r6, #0]
    97da:	9b04      	ldr	r3, [sp, #16]
    97dc:	1b9b      	subs	r3, r3, r6
    97de:	6123      	str	r3, [r4, #16]
    97e0:	9b07      	ldr	r3, [sp, #28]
    97e2:	aa09      	add	r2, sp, #36	; 0x24
    97e4:	9300      	str	r3, [sp, #0]
    97e6:	0021      	movs	r1, r4
    97e8:	9b06      	ldr	r3, [sp, #24]
    97ea:	9805      	ldr	r0, [sp, #20]
    97ec:	f7ff fe82 	bl	94f4 <_printf_common>
    97f0:	1c43      	adds	r3, r0, #1
    97f2:	d1b3      	bne.n	975c <_printf_i+0x18c>
    97f4:	2001      	movs	r0, #1
    97f6:	4240      	negs	r0, r0
    97f8:	b00b      	add	sp, #44	; 0x2c
    97fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    97fc:	0000b851 	.word	0x0000b851
    9800:	0000b840 	.word	0x0000b840

00009804 <realloc>:
    9804:	b510      	push	{r4, lr}
    9806:	4b03      	ldr	r3, [pc, #12]	; (9814 <realloc+0x10>)
    9808:	000a      	movs	r2, r1
    980a:	0001      	movs	r1, r0
    980c:	6818      	ldr	r0, [r3, #0]
    980e:	f001 fa63 	bl	acd8 <_realloc_r>
    9812:	bd10      	pop	{r4, pc}
    9814:	20000088 	.word	0x20000088

00009818 <_sbrk_r>:
    9818:	2300      	movs	r3, #0
    981a:	b570      	push	{r4, r5, r6, lr}
    981c:	4c06      	ldr	r4, [pc, #24]	; (9838 <_sbrk_r+0x20>)
    981e:	0005      	movs	r5, r0
    9820:	0008      	movs	r0, r1
    9822:	6023      	str	r3, [r4, #0]
    9824:	f001 fc2e 	bl	b084 <_sbrk>
    9828:	1c43      	adds	r3, r0, #1
    982a:	d103      	bne.n	9834 <_sbrk_r+0x1c>
    982c:	6823      	ldr	r3, [r4, #0]
    982e:	2b00      	cmp	r3, #0
    9830:	d000      	beq.n	9834 <_sbrk_r+0x1c>
    9832:	602b      	str	r3, [r5, #0]
    9834:	bd70      	pop	{r4, r5, r6, pc}
    9836:	46c0      	nop			; (mov r8, r8)
    9838:	20001044 	.word	0x20001044

0000983c <siprintf>:
    983c:	b40e      	push	{r1, r2, r3}
    983e:	b510      	push	{r4, lr}
    9840:	b09d      	sub	sp, #116	; 0x74
    9842:	a902      	add	r1, sp, #8
    9844:	9002      	str	r0, [sp, #8]
    9846:	6108      	str	r0, [r1, #16]
    9848:	480b      	ldr	r0, [pc, #44]	; (9878 <siprintf+0x3c>)
    984a:	2482      	movs	r4, #130	; 0x82
    984c:	6088      	str	r0, [r1, #8]
    984e:	6148      	str	r0, [r1, #20]
    9850:	2001      	movs	r0, #1
    9852:	4240      	negs	r0, r0
    9854:	ab1f      	add	r3, sp, #124	; 0x7c
    9856:	81c8      	strh	r0, [r1, #14]
    9858:	4808      	ldr	r0, [pc, #32]	; (987c <siprintf+0x40>)
    985a:	cb04      	ldmia	r3!, {r2}
    985c:	00a4      	lsls	r4, r4, #2
    985e:	6800      	ldr	r0, [r0, #0]
    9860:	9301      	str	r3, [sp, #4]
    9862:	818c      	strh	r4, [r1, #12]
    9864:	f001 fac0 	bl	ade8 <_svfiprintf_r>
    9868:	2300      	movs	r3, #0
    986a:	9a02      	ldr	r2, [sp, #8]
    986c:	7013      	strb	r3, [r2, #0]
    986e:	b01d      	add	sp, #116	; 0x74
    9870:	bc10      	pop	{r4}
    9872:	bc08      	pop	{r3}
    9874:	b003      	add	sp, #12
    9876:	4718      	bx	r3
    9878:	7fffffff 	.word	0x7fffffff
    987c:	20000088 	.word	0x20000088

00009880 <strcpy>:
    9880:	1c03      	adds	r3, r0, #0
    9882:	780a      	ldrb	r2, [r1, #0]
    9884:	3101      	adds	r1, #1
    9886:	701a      	strb	r2, [r3, #0]
    9888:	3301      	adds	r3, #1
    988a:	2a00      	cmp	r2, #0
    988c:	d1f9      	bne.n	9882 <strcpy+0x2>
    988e:	4770      	bx	lr

00009890 <strlen>:
    9890:	2300      	movs	r3, #0
    9892:	5cc2      	ldrb	r2, [r0, r3]
    9894:	3301      	adds	r3, #1
    9896:	2a00      	cmp	r2, #0
    9898:	d1fb      	bne.n	9892 <strlen+0x2>
    989a:	1e58      	subs	r0, r3, #1
    989c:	4770      	bx	lr

0000989e <_strtoul_l.isra.0>:
    989e:	b5f0      	push	{r4, r5, r6, r7, lr}
    98a0:	001f      	movs	r7, r3
    98a2:	000e      	movs	r6, r1
    98a4:	b087      	sub	sp, #28
    98a6:	9005      	str	r0, [sp, #20]
    98a8:	9103      	str	r1, [sp, #12]
    98aa:	9201      	str	r2, [sp, #4]
    98ac:	980c      	ldr	r0, [sp, #48]	; 0x30
    98ae:	7834      	ldrb	r4, [r6, #0]
    98b0:	f7ff fa34 	bl	8d1c <__locale_ctype_ptr_l>
    98b4:	2208      	movs	r2, #8
    98b6:	1900      	adds	r0, r0, r4
    98b8:	7843      	ldrb	r3, [r0, #1]
    98ba:	1c75      	adds	r5, r6, #1
    98bc:	4013      	ands	r3, r2
    98be:	d10c      	bne.n	98da <_strtoul_l.isra.0+0x3c>
    98c0:	2c2d      	cmp	r4, #45	; 0x2d
    98c2:	d10c      	bne.n	98de <_strtoul_l.isra.0+0x40>
    98c4:	3301      	adds	r3, #1
    98c6:	782c      	ldrb	r4, [r5, #0]
    98c8:	9302      	str	r3, [sp, #8]
    98ca:	1cb5      	adds	r5, r6, #2
    98cc:	2f00      	cmp	r7, #0
    98ce:	d00c      	beq.n	98ea <_strtoul_l.isra.0+0x4c>
    98d0:	2f10      	cmp	r7, #16
    98d2:	d114      	bne.n	98fe <_strtoul_l.isra.0+0x60>
    98d4:	2c30      	cmp	r4, #48	; 0x30
    98d6:	d00a      	beq.n	98ee <_strtoul_l.isra.0+0x50>
    98d8:	e011      	b.n	98fe <_strtoul_l.isra.0+0x60>
    98da:	002e      	movs	r6, r5
    98dc:	e7e6      	b.n	98ac <_strtoul_l.isra.0+0xe>
    98de:	9302      	str	r3, [sp, #8]
    98e0:	2c2b      	cmp	r4, #43	; 0x2b
    98e2:	d1f3      	bne.n	98cc <_strtoul_l.isra.0+0x2e>
    98e4:	782c      	ldrb	r4, [r5, #0]
    98e6:	1cb5      	adds	r5, r6, #2
    98e8:	e7f0      	b.n	98cc <_strtoul_l.isra.0+0x2e>
    98ea:	2c30      	cmp	r4, #48	; 0x30
    98ec:	d12f      	bne.n	994e <_strtoul_l.isra.0+0xb0>
    98ee:	2220      	movs	r2, #32
    98f0:	782b      	ldrb	r3, [r5, #0]
    98f2:	4393      	bics	r3, r2
    98f4:	2b58      	cmp	r3, #88	; 0x58
    98f6:	d154      	bne.n	99a2 <_strtoul_l.isra.0+0x104>
    98f8:	2710      	movs	r7, #16
    98fa:	786c      	ldrb	r4, [r5, #1]
    98fc:	3502      	adds	r5, #2
    98fe:	2001      	movs	r0, #1
    9900:	0039      	movs	r1, r7
    9902:	4240      	negs	r0, r0
    9904:	f7fd faa0 	bl	6e48 <__udivsi3>
    9908:	0006      	movs	r6, r0
    990a:	2001      	movs	r0, #1
    990c:	0039      	movs	r1, r7
    990e:	4240      	negs	r0, r0
    9910:	f7fd fb20 	bl	6f54 <__aeabi_uidivmod>
    9914:	2300      	movs	r3, #0
    9916:	9104      	str	r1, [sp, #16]
    9918:	2101      	movs	r1, #1
    991a:	2201      	movs	r2, #1
    991c:	0018      	movs	r0, r3
    991e:	468c      	mov	ip, r1
    9920:	4252      	negs	r2, r2
    9922:	0021      	movs	r1, r4
    9924:	3930      	subs	r1, #48	; 0x30
    9926:	2909      	cmp	r1, #9
    9928:	d813      	bhi.n	9952 <_strtoul_l.isra.0+0xb4>
    992a:	000c      	movs	r4, r1
    992c:	42a7      	cmp	r7, r4
    992e:	dd1e      	ble.n	996e <_strtoul_l.isra.0+0xd0>
    9930:	2b00      	cmp	r3, #0
    9932:	db1a      	blt.n	996a <_strtoul_l.isra.0+0xcc>
    9934:	0013      	movs	r3, r2
    9936:	4286      	cmp	r6, r0
    9938:	d306      	bcc.n	9948 <_strtoul_l.isra.0+0xaa>
    993a:	d102      	bne.n	9942 <_strtoul_l.isra.0+0xa4>
    993c:	9904      	ldr	r1, [sp, #16]
    993e:	42a1      	cmp	r1, r4
    9940:	db02      	blt.n	9948 <_strtoul_l.isra.0+0xaa>
    9942:	4663      	mov	r3, ip
    9944:	4378      	muls	r0, r7
    9946:	1820      	adds	r0, r4, r0
    9948:	782c      	ldrb	r4, [r5, #0]
    994a:	3501      	adds	r5, #1
    994c:	e7e9      	b.n	9922 <_strtoul_l.isra.0+0x84>
    994e:	270a      	movs	r7, #10
    9950:	e7d5      	b.n	98fe <_strtoul_l.isra.0+0x60>
    9952:	0021      	movs	r1, r4
    9954:	3941      	subs	r1, #65	; 0x41
    9956:	2919      	cmp	r1, #25
    9958:	d801      	bhi.n	995e <_strtoul_l.isra.0+0xc0>
    995a:	3c37      	subs	r4, #55	; 0x37
    995c:	e7e6      	b.n	992c <_strtoul_l.isra.0+0x8e>
    995e:	0021      	movs	r1, r4
    9960:	3961      	subs	r1, #97	; 0x61
    9962:	2919      	cmp	r1, #25
    9964:	d803      	bhi.n	996e <_strtoul_l.isra.0+0xd0>
    9966:	3c57      	subs	r4, #87	; 0x57
    9968:	e7e0      	b.n	992c <_strtoul_l.isra.0+0x8e>
    996a:	0013      	movs	r3, r2
    996c:	e7ec      	b.n	9948 <_strtoul_l.isra.0+0xaa>
    996e:	2b00      	cmp	r3, #0
    9970:	da09      	bge.n	9986 <_strtoul_l.isra.0+0xe8>
    9972:	2322      	movs	r3, #34	; 0x22
    9974:	2001      	movs	r0, #1
    9976:	9a05      	ldr	r2, [sp, #20]
    9978:	4240      	negs	r0, r0
    997a:	6013      	str	r3, [r2, #0]
    997c:	9b01      	ldr	r3, [sp, #4]
    997e:	2b00      	cmp	r3, #0
    9980:	d10b      	bne.n	999a <_strtoul_l.isra.0+0xfc>
    9982:	b007      	add	sp, #28
    9984:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9986:	9a02      	ldr	r2, [sp, #8]
    9988:	2a00      	cmp	r2, #0
    998a:	d000      	beq.n	998e <_strtoul_l.isra.0+0xf0>
    998c:	4240      	negs	r0, r0
    998e:	9a01      	ldr	r2, [sp, #4]
    9990:	2a00      	cmp	r2, #0
    9992:	d0f6      	beq.n	9982 <_strtoul_l.isra.0+0xe4>
    9994:	9a03      	ldr	r2, [sp, #12]
    9996:	2b00      	cmp	r3, #0
    9998:	d000      	beq.n	999c <_strtoul_l.isra.0+0xfe>
    999a:	1e6a      	subs	r2, r5, #1
    999c:	9b01      	ldr	r3, [sp, #4]
    999e:	601a      	str	r2, [r3, #0]
    99a0:	e7ef      	b.n	9982 <_strtoul_l.isra.0+0xe4>
    99a2:	2430      	movs	r4, #48	; 0x30
    99a4:	2f00      	cmp	r7, #0
    99a6:	d1aa      	bne.n	98fe <_strtoul_l.isra.0+0x60>
    99a8:	3708      	adds	r7, #8
    99aa:	e7a8      	b.n	98fe <_strtoul_l.isra.0+0x60>

000099ac <strtoul>:
    99ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
    99ae:	0013      	movs	r3, r2
    99b0:	4a06      	ldr	r2, [pc, #24]	; (99cc <strtoul+0x20>)
    99b2:	0005      	movs	r5, r0
    99b4:	6810      	ldr	r0, [r2, #0]
    99b6:	6a04      	ldr	r4, [r0, #32]
    99b8:	2c00      	cmp	r4, #0
    99ba:	d100      	bne.n	99be <strtoul+0x12>
    99bc:	4c04      	ldr	r4, [pc, #16]	; (99d0 <strtoul+0x24>)
    99be:	000a      	movs	r2, r1
    99c0:	9400      	str	r4, [sp, #0]
    99c2:	0029      	movs	r1, r5
    99c4:	f7ff ff6b 	bl	989e <_strtoul_l.isra.0>
    99c8:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    99ca:	46c0      	nop			; (mov r8, r8)
    99cc:	20000088 	.word	0x20000088
    99d0:	200000ec 	.word	0x200000ec

000099d4 <__ascii_wctomb>:
    99d4:	1e0b      	subs	r3, r1, #0
    99d6:	d004      	beq.n	99e2 <__ascii_wctomb+0xe>
    99d8:	2aff      	cmp	r2, #255	; 0xff
    99da:	d904      	bls.n	99e6 <__ascii_wctomb+0x12>
    99dc:	238a      	movs	r3, #138	; 0x8a
    99de:	6003      	str	r3, [r0, #0]
    99e0:	3b8b      	subs	r3, #139	; 0x8b
    99e2:	0018      	movs	r0, r3
    99e4:	4770      	bx	lr
    99e6:	700a      	strb	r2, [r1, #0]
    99e8:	2301      	movs	r3, #1
    99ea:	e7fa      	b.n	99e2 <__ascii_wctomb+0xe>

000099ec <quorem>:
    99ec:	b5f0      	push	{r4, r5, r6, r7, lr}
    99ee:	6903      	ldr	r3, [r0, #16]
    99f0:	690c      	ldr	r4, [r1, #16]
    99f2:	b089      	sub	sp, #36	; 0x24
    99f4:	0007      	movs	r7, r0
    99f6:	9105      	str	r1, [sp, #20]
    99f8:	2600      	movs	r6, #0
    99fa:	429c      	cmp	r4, r3
    99fc:	dc6d      	bgt.n	9ada <quorem+0xee>
    99fe:	000b      	movs	r3, r1
    9a00:	3c01      	subs	r4, #1
    9a02:	3314      	adds	r3, #20
    9a04:	00a5      	lsls	r5, r4, #2
    9a06:	9303      	str	r3, [sp, #12]
    9a08:	195b      	adds	r3, r3, r5
    9a0a:	9304      	str	r3, [sp, #16]
    9a0c:	0003      	movs	r3, r0
    9a0e:	3314      	adds	r3, #20
    9a10:	9302      	str	r3, [sp, #8]
    9a12:	195d      	adds	r5, r3, r5
    9a14:	9b04      	ldr	r3, [sp, #16]
    9a16:	6828      	ldr	r0, [r5, #0]
    9a18:	681b      	ldr	r3, [r3, #0]
    9a1a:	1c59      	adds	r1, r3, #1
    9a1c:	9301      	str	r3, [sp, #4]
    9a1e:	f7fd fa13 	bl	6e48 <__udivsi3>
    9a22:	9001      	str	r0, [sp, #4]
    9a24:	42b0      	cmp	r0, r6
    9a26:	d02d      	beq.n	9a84 <quorem+0x98>
    9a28:	9b03      	ldr	r3, [sp, #12]
    9a2a:	9802      	ldr	r0, [sp, #8]
    9a2c:	469c      	mov	ip, r3
    9a2e:	9606      	str	r6, [sp, #24]
    9a30:	4662      	mov	r2, ip
    9a32:	ca08      	ldmia	r2!, {r3}
    9a34:	4694      	mov	ip, r2
    9a36:	9a01      	ldr	r2, [sp, #4]
    9a38:	b299      	uxth	r1, r3
    9a3a:	4351      	muls	r1, r2
    9a3c:	0c1b      	lsrs	r3, r3, #16
    9a3e:	4353      	muls	r3, r2
    9a40:	1989      	adds	r1, r1, r6
    9a42:	0c0a      	lsrs	r2, r1, #16
    9a44:	189b      	adds	r3, r3, r2
    9a46:	9307      	str	r3, [sp, #28]
    9a48:	8802      	ldrh	r2, [r0, #0]
    9a4a:	0c1e      	lsrs	r6, r3, #16
    9a4c:	9b06      	ldr	r3, [sp, #24]
    9a4e:	b289      	uxth	r1, r1
    9a50:	18d2      	adds	r2, r2, r3
    9a52:	6803      	ldr	r3, [r0, #0]
    9a54:	1a52      	subs	r2, r2, r1
    9a56:	0c19      	lsrs	r1, r3, #16
    9a58:	466b      	mov	r3, sp
    9a5a:	8b9b      	ldrh	r3, [r3, #28]
    9a5c:	1acb      	subs	r3, r1, r3
    9a5e:	1411      	asrs	r1, r2, #16
    9a60:	185b      	adds	r3, r3, r1
    9a62:	1419      	asrs	r1, r3, #16
    9a64:	b292      	uxth	r2, r2
    9a66:	041b      	lsls	r3, r3, #16
    9a68:	431a      	orrs	r2, r3
    9a6a:	9b04      	ldr	r3, [sp, #16]
    9a6c:	9106      	str	r1, [sp, #24]
    9a6e:	c004      	stmia	r0!, {r2}
    9a70:	4563      	cmp	r3, ip
    9a72:	d2dd      	bcs.n	9a30 <quorem+0x44>
    9a74:	682b      	ldr	r3, [r5, #0]
    9a76:	2b00      	cmp	r3, #0
    9a78:	d104      	bne.n	9a84 <quorem+0x98>
    9a7a:	9b02      	ldr	r3, [sp, #8]
    9a7c:	3d04      	subs	r5, #4
    9a7e:	42ab      	cmp	r3, r5
    9a80:	d32e      	bcc.n	9ae0 <quorem+0xf4>
    9a82:	613c      	str	r4, [r7, #16]
    9a84:	9905      	ldr	r1, [sp, #20]
    9a86:	0038      	movs	r0, r7
    9a88:	f001 f847 	bl	ab1a <__mcmp>
    9a8c:	2800      	cmp	r0, #0
    9a8e:	db23      	blt.n	9ad8 <quorem+0xec>
    9a90:	2500      	movs	r5, #0
    9a92:	9b01      	ldr	r3, [sp, #4]
    9a94:	9802      	ldr	r0, [sp, #8]
    9a96:	3301      	adds	r3, #1
    9a98:	9903      	ldr	r1, [sp, #12]
    9a9a:	9301      	str	r3, [sp, #4]
    9a9c:	c908      	ldmia	r1!, {r3}
    9a9e:	8802      	ldrh	r2, [r0, #0]
    9aa0:	1955      	adds	r5, r2, r5
    9aa2:	b29a      	uxth	r2, r3
    9aa4:	1aaa      	subs	r2, r5, r2
    9aa6:	6805      	ldr	r5, [r0, #0]
    9aa8:	0c1b      	lsrs	r3, r3, #16
    9aaa:	0c2d      	lsrs	r5, r5, #16
    9aac:	1aeb      	subs	r3, r5, r3
    9aae:	1415      	asrs	r5, r2, #16
    9ab0:	195b      	adds	r3, r3, r5
    9ab2:	141d      	asrs	r5, r3, #16
    9ab4:	b292      	uxth	r2, r2
    9ab6:	041b      	lsls	r3, r3, #16
    9ab8:	4313      	orrs	r3, r2
    9aba:	c008      	stmia	r0!, {r3}
    9abc:	9b04      	ldr	r3, [sp, #16]
    9abe:	428b      	cmp	r3, r1
    9ac0:	d2ec      	bcs.n	9a9c <quorem+0xb0>
    9ac2:	9a02      	ldr	r2, [sp, #8]
    9ac4:	00a3      	lsls	r3, r4, #2
    9ac6:	18d3      	adds	r3, r2, r3
    9ac8:	681a      	ldr	r2, [r3, #0]
    9aca:	2a00      	cmp	r2, #0
    9acc:	d104      	bne.n	9ad8 <quorem+0xec>
    9ace:	9a02      	ldr	r2, [sp, #8]
    9ad0:	3b04      	subs	r3, #4
    9ad2:	429a      	cmp	r2, r3
    9ad4:	d309      	bcc.n	9aea <quorem+0xfe>
    9ad6:	613c      	str	r4, [r7, #16]
    9ad8:	9e01      	ldr	r6, [sp, #4]
    9ada:	0030      	movs	r0, r6
    9adc:	b009      	add	sp, #36	; 0x24
    9ade:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9ae0:	682b      	ldr	r3, [r5, #0]
    9ae2:	2b00      	cmp	r3, #0
    9ae4:	d1cd      	bne.n	9a82 <quorem+0x96>
    9ae6:	3c01      	subs	r4, #1
    9ae8:	e7c7      	b.n	9a7a <quorem+0x8e>
    9aea:	681a      	ldr	r2, [r3, #0]
    9aec:	2a00      	cmp	r2, #0
    9aee:	d1f2      	bne.n	9ad6 <quorem+0xea>
    9af0:	3c01      	subs	r4, #1
    9af2:	e7ec      	b.n	9ace <quorem+0xe2>

00009af4 <_dtoa_r>:
    9af4:	b5f0      	push	{r4, r5, r6, r7, lr}
    9af6:	0016      	movs	r6, r2
    9af8:	001f      	movs	r7, r3
    9afa:	6a44      	ldr	r4, [r0, #36]	; 0x24
    9afc:	b09d      	sub	sp, #116	; 0x74
    9afe:	9004      	str	r0, [sp, #16]
    9b00:	9d25      	ldr	r5, [sp, #148]	; 0x94
    9b02:	9606      	str	r6, [sp, #24]
    9b04:	9707      	str	r7, [sp, #28]
    9b06:	2c00      	cmp	r4, #0
    9b08:	d108      	bne.n	9b1c <_dtoa_r+0x28>
    9b0a:	2010      	movs	r0, #16
    9b0c:	f7ff f90a 	bl	8d24 <malloc>
    9b10:	9b04      	ldr	r3, [sp, #16]
    9b12:	6258      	str	r0, [r3, #36]	; 0x24
    9b14:	6044      	str	r4, [r0, #4]
    9b16:	6084      	str	r4, [r0, #8]
    9b18:	6004      	str	r4, [r0, #0]
    9b1a:	60c4      	str	r4, [r0, #12]
    9b1c:	9b04      	ldr	r3, [sp, #16]
    9b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    9b20:	6819      	ldr	r1, [r3, #0]
    9b22:	2900      	cmp	r1, #0
    9b24:	d00b      	beq.n	9b3e <_dtoa_r+0x4a>
    9b26:	685a      	ldr	r2, [r3, #4]
    9b28:	2301      	movs	r3, #1
    9b2a:	4093      	lsls	r3, r2
    9b2c:	604a      	str	r2, [r1, #4]
    9b2e:	608b      	str	r3, [r1, #8]
    9b30:	9804      	ldr	r0, [sp, #16]
    9b32:	f000 fe18 	bl	a766 <_Bfree>
    9b36:	2200      	movs	r2, #0
    9b38:	9b04      	ldr	r3, [sp, #16]
    9b3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    9b3c:	601a      	str	r2, [r3, #0]
    9b3e:	9b07      	ldr	r3, [sp, #28]
    9b40:	2b00      	cmp	r3, #0
    9b42:	da1f      	bge.n	9b84 <_dtoa_r+0x90>
    9b44:	2301      	movs	r3, #1
    9b46:	602b      	str	r3, [r5, #0]
    9b48:	007b      	lsls	r3, r7, #1
    9b4a:	085b      	lsrs	r3, r3, #1
    9b4c:	9307      	str	r3, [sp, #28]
    9b4e:	9c07      	ldr	r4, [sp, #28]
    9b50:	4bb7      	ldr	r3, [pc, #732]	; (9e30 <_dtoa_r+0x33c>)
    9b52:	0022      	movs	r2, r4
    9b54:	9319      	str	r3, [sp, #100]	; 0x64
    9b56:	401a      	ands	r2, r3
    9b58:	429a      	cmp	r2, r3
    9b5a:	d116      	bne.n	9b8a <_dtoa_r+0x96>
    9b5c:	4bb5      	ldr	r3, [pc, #724]	; (9e34 <_dtoa_r+0x340>)
    9b5e:	9a24      	ldr	r2, [sp, #144]	; 0x90
    9b60:	6013      	str	r3, [r2, #0]
    9b62:	9b06      	ldr	r3, [sp, #24]
    9b64:	2b00      	cmp	r3, #0
    9b66:	d103      	bne.n	9b70 <_dtoa_r+0x7c>
    9b68:	0324      	lsls	r4, r4, #12
    9b6a:	d101      	bne.n	9b70 <_dtoa_r+0x7c>
    9b6c:	f000 fd91 	bl	a692 <_dtoa_r+0xb9e>
    9b70:	4bb1      	ldr	r3, [pc, #708]	; (9e38 <_dtoa_r+0x344>)
    9b72:	9a26      	ldr	r2, [sp, #152]	; 0x98
    9b74:	930a      	str	r3, [sp, #40]	; 0x28
    9b76:	4bb1      	ldr	r3, [pc, #708]	; (9e3c <_dtoa_r+0x348>)
    9b78:	2a00      	cmp	r2, #0
    9b7a:	d001      	beq.n	9b80 <_dtoa_r+0x8c>
    9b7c:	f000 fd8f 	bl	a69e <_dtoa_r+0xbaa>
    9b80:	f000 fd8f 	bl	a6a2 <_dtoa_r+0xbae>
    9b84:	2300      	movs	r3, #0
    9b86:	602b      	str	r3, [r5, #0]
    9b88:	e7e1      	b.n	9b4e <_dtoa_r+0x5a>
    9b8a:	9e06      	ldr	r6, [sp, #24]
    9b8c:	9f07      	ldr	r7, [sp, #28]
    9b8e:	2200      	movs	r2, #0
    9b90:	2300      	movs	r3, #0
    9b92:	0030      	movs	r0, r6
    9b94:	0039      	movs	r1, r7
    9b96:	f7fd fadd 	bl	7154 <__aeabi_dcmpeq>
    9b9a:	1e05      	subs	r5, r0, #0
    9b9c:	d00e      	beq.n	9bbc <_dtoa_r+0xc8>
    9b9e:	2301      	movs	r3, #1
    9ba0:	9a24      	ldr	r2, [sp, #144]	; 0x90
    9ba2:	6013      	str	r3, [r2, #0]
    9ba4:	4ba6      	ldr	r3, [pc, #664]	; (9e40 <_dtoa_r+0x34c>)
    9ba6:	9a26      	ldr	r2, [sp, #152]	; 0x98
    9ba8:	930a      	str	r3, [sp, #40]	; 0x28
    9baa:	2a00      	cmp	r2, #0
    9bac:	d101      	bne.n	9bb2 <_dtoa_r+0xbe>
    9bae:	f000 fd78 	bl	a6a2 <_dtoa_r+0xbae>
    9bb2:	4aa4      	ldr	r2, [pc, #656]	; (9e44 <_dtoa_r+0x350>)
    9bb4:	9926      	ldr	r1, [sp, #152]	; 0x98
    9bb6:	600a      	str	r2, [r1, #0]
    9bb8:	f000 fd73 	bl	a6a2 <_dtoa_r+0xbae>
    9bbc:	ab1a      	add	r3, sp, #104	; 0x68
    9bbe:	9301      	str	r3, [sp, #4]
    9bc0:	ab1b      	add	r3, sp, #108	; 0x6c
    9bc2:	9300      	str	r3, [sp, #0]
    9bc4:	0032      	movs	r2, r6
    9bc6:	003b      	movs	r3, r7
    9bc8:	9804      	ldr	r0, [sp, #16]
    9bca:	f001 f823 	bl	ac14 <__d2b>
    9bce:	0063      	lsls	r3, r4, #1
    9bd0:	9005      	str	r0, [sp, #20]
    9bd2:	0d5b      	lsrs	r3, r3, #21
    9bd4:	d100      	bne.n	9bd8 <_dtoa_r+0xe4>
    9bd6:	e07f      	b.n	9cd8 <_dtoa_r+0x1e4>
    9bd8:	033a      	lsls	r2, r7, #12
    9bda:	4c9b      	ldr	r4, [pc, #620]	; (9e48 <_dtoa_r+0x354>)
    9bdc:	0b12      	lsrs	r2, r2, #12
    9bde:	4314      	orrs	r4, r2
    9be0:	0021      	movs	r1, r4
    9be2:	4a9a      	ldr	r2, [pc, #616]	; (9e4c <_dtoa_r+0x358>)
    9be4:	0030      	movs	r0, r6
    9be6:	9518      	str	r5, [sp, #96]	; 0x60
    9be8:	189e      	adds	r6, r3, r2
    9bea:	2200      	movs	r2, #0
    9bec:	4b98      	ldr	r3, [pc, #608]	; (9e50 <_dtoa_r+0x35c>)
    9bee:	f7fe fca3 	bl	8538 <__aeabi_dsub>
    9bf2:	4a98      	ldr	r2, [pc, #608]	; (9e54 <_dtoa_r+0x360>)
    9bf4:	4b98      	ldr	r3, [pc, #608]	; (9e58 <_dtoa_r+0x364>)
    9bf6:	f7fe fa1f 	bl	8038 <__aeabi_dmul>
    9bfa:	4a98      	ldr	r2, [pc, #608]	; (9e5c <_dtoa_r+0x368>)
    9bfc:	4b98      	ldr	r3, [pc, #608]	; (9e60 <_dtoa_r+0x36c>)
    9bfe:	f7fd fad7 	bl	71b0 <__aeabi_dadd>
    9c02:	0004      	movs	r4, r0
    9c04:	0030      	movs	r0, r6
    9c06:	000d      	movs	r5, r1
    9c08:	f001 f9fa 	bl	b000 <__aeabi_i2d>
    9c0c:	4a95      	ldr	r2, [pc, #596]	; (9e64 <_dtoa_r+0x370>)
    9c0e:	4b96      	ldr	r3, [pc, #600]	; (9e68 <_dtoa_r+0x374>)
    9c10:	f7fe fa12 	bl	8038 <__aeabi_dmul>
    9c14:	0002      	movs	r2, r0
    9c16:	000b      	movs	r3, r1
    9c18:	0020      	movs	r0, r4
    9c1a:	0029      	movs	r1, r5
    9c1c:	f7fd fac8 	bl	71b0 <__aeabi_dadd>
    9c20:	0004      	movs	r4, r0
    9c22:	000d      	movs	r5, r1
    9c24:	f7fe ffbe 	bl	8ba4 <__aeabi_d2iz>
    9c28:	2200      	movs	r2, #0
    9c2a:	9003      	str	r0, [sp, #12]
    9c2c:	2300      	movs	r3, #0
    9c2e:	0020      	movs	r0, r4
    9c30:	0029      	movs	r1, r5
    9c32:	f7fd fa95 	bl	7160 <__aeabi_dcmplt>
    9c36:	2800      	cmp	r0, #0
    9c38:	d00e      	beq.n	9c58 <_dtoa_r+0x164>
    9c3a:	9803      	ldr	r0, [sp, #12]
    9c3c:	f001 f9e0 	bl	b000 <__aeabi_i2d>
    9c40:	000b      	movs	r3, r1
    9c42:	0002      	movs	r2, r0
    9c44:	0029      	movs	r1, r5
    9c46:	0020      	movs	r0, r4
    9c48:	f7fd fa84 	bl	7154 <__aeabi_dcmpeq>
    9c4c:	0003      	movs	r3, r0
    9c4e:	4258      	negs	r0, r3
    9c50:	4158      	adcs	r0, r3
    9c52:	9b03      	ldr	r3, [sp, #12]
    9c54:	1a1b      	subs	r3, r3, r0
    9c56:	9303      	str	r3, [sp, #12]
    9c58:	2301      	movs	r3, #1
    9c5a:	9316      	str	r3, [sp, #88]	; 0x58
    9c5c:	9b03      	ldr	r3, [sp, #12]
    9c5e:	2b16      	cmp	r3, #22
    9c60:	d80f      	bhi.n	9c82 <_dtoa_r+0x18e>
    9c62:	4982      	ldr	r1, [pc, #520]	; (9e6c <_dtoa_r+0x378>)
    9c64:	00db      	lsls	r3, r3, #3
    9c66:	18c9      	adds	r1, r1, r3
    9c68:	6808      	ldr	r0, [r1, #0]
    9c6a:	6849      	ldr	r1, [r1, #4]
    9c6c:	9a06      	ldr	r2, [sp, #24]
    9c6e:	9b07      	ldr	r3, [sp, #28]
    9c70:	f7fd fa8a 	bl	7188 <__aeabi_dcmpgt>
    9c74:	2800      	cmp	r0, #0
    9c76:	d04b      	beq.n	9d10 <_dtoa_r+0x21c>
    9c78:	9b03      	ldr	r3, [sp, #12]
    9c7a:	3b01      	subs	r3, #1
    9c7c:	9303      	str	r3, [sp, #12]
    9c7e:	2300      	movs	r3, #0
    9c80:	9316      	str	r3, [sp, #88]	; 0x58
    9c82:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    9c84:	1b9e      	subs	r6, r3, r6
    9c86:	2300      	movs	r3, #0
    9c88:	930b      	str	r3, [sp, #44]	; 0x2c
    9c8a:	0033      	movs	r3, r6
    9c8c:	3b01      	subs	r3, #1
    9c8e:	930c      	str	r3, [sp, #48]	; 0x30
    9c90:	d504      	bpl.n	9c9c <_dtoa_r+0x1a8>
    9c92:	2301      	movs	r3, #1
    9c94:	1b9b      	subs	r3, r3, r6
    9c96:	930b      	str	r3, [sp, #44]	; 0x2c
    9c98:	2300      	movs	r3, #0
    9c9a:	930c      	str	r3, [sp, #48]	; 0x30
    9c9c:	9b03      	ldr	r3, [sp, #12]
    9c9e:	2b00      	cmp	r3, #0
    9ca0:	db38      	blt.n	9d14 <_dtoa_r+0x220>
    9ca2:	9a03      	ldr	r2, [sp, #12]
    9ca4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    9ca6:	4694      	mov	ip, r2
    9ca8:	4463      	add	r3, ip
    9caa:	930c      	str	r3, [sp, #48]	; 0x30
    9cac:	2300      	movs	r3, #0
    9cae:	920f      	str	r2, [sp, #60]	; 0x3c
    9cb0:	9308      	str	r3, [sp, #32]
    9cb2:	9b22      	ldr	r3, [sp, #136]	; 0x88
    9cb4:	2501      	movs	r5, #1
    9cb6:	2b09      	cmp	r3, #9
    9cb8:	d900      	bls.n	9cbc <_dtoa_r+0x1c8>
    9cba:	e091      	b.n	9de0 <_dtoa_r+0x2ec>
    9cbc:	2b05      	cmp	r3, #5
    9cbe:	dd02      	ble.n	9cc6 <_dtoa_r+0x1d2>
    9cc0:	2500      	movs	r5, #0
    9cc2:	3b04      	subs	r3, #4
    9cc4:	9322      	str	r3, [sp, #136]	; 0x88
    9cc6:	9b22      	ldr	r3, [sp, #136]	; 0x88
    9cc8:	1e98      	subs	r0, r3, #2
    9cca:	2803      	cmp	r0, #3
    9ccc:	d900      	bls.n	9cd0 <_dtoa_r+0x1dc>
    9cce:	e091      	b.n	9df4 <_dtoa_r+0x300>
    9cd0:	f7fd f8b0 	bl	6e34 <__gnu_thumb1_case_uqi>
    9cd4:	76298482 	.word	0x76298482
    9cd8:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    9cda:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    9cdc:	189e      	adds	r6, r3, r2
    9cde:	4b64      	ldr	r3, [pc, #400]	; (9e70 <_dtoa_r+0x37c>)
    9ce0:	18f2      	adds	r2, r6, r3
    9ce2:	2a20      	cmp	r2, #32
    9ce4:	dd0f      	ble.n	9d06 <_dtoa_r+0x212>
    9ce6:	4b63      	ldr	r3, [pc, #396]	; (9e74 <_dtoa_r+0x380>)
    9ce8:	9806      	ldr	r0, [sp, #24]
    9cea:	18f3      	adds	r3, r6, r3
    9cec:	40d8      	lsrs	r0, r3
    9cee:	2340      	movs	r3, #64	; 0x40
    9cf0:	1a9b      	subs	r3, r3, r2
    9cf2:	409c      	lsls	r4, r3
    9cf4:	4320      	orrs	r0, r4
    9cf6:	f7fe ff89 	bl	8c0c <__aeabi_ui2d>
    9cfa:	2301      	movs	r3, #1
    9cfc:	4c5e      	ldr	r4, [pc, #376]	; (9e78 <_dtoa_r+0x384>)
    9cfe:	3e01      	subs	r6, #1
    9d00:	1909      	adds	r1, r1, r4
    9d02:	9318      	str	r3, [sp, #96]	; 0x60
    9d04:	e771      	b.n	9bea <_dtoa_r+0xf6>
    9d06:	2320      	movs	r3, #32
    9d08:	9806      	ldr	r0, [sp, #24]
    9d0a:	1a9b      	subs	r3, r3, r2
    9d0c:	4098      	lsls	r0, r3
    9d0e:	e7f2      	b.n	9cf6 <_dtoa_r+0x202>
    9d10:	9016      	str	r0, [sp, #88]	; 0x58
    9d12:	e7b6      	b.n	9c82 <_dtoa_r+0x18e>
    9d14:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    9d16:	9a03      	ldr	r2, [sp, #12]
    9d18:	1a9b      	subs	r3, r3, r2
    9d1a:	930b      	str	r3, [sp, #44]	; 0x2c
    9d1c:	4253      	negs	r3, r2
    9d1e:	9308      	str	r3, [sp, #32]
    9d20:	2300      	movs	r3, #0
    9d22:	930f      	str	r3, [sp, #60]	; 0x3c
    9d24:	e7c5      	b.n	9cb2 <_dtoa_r+0x1be>
    9d26:	2301      	movs	r3, #1
    9d28:	930e      	str	r3, [sp, #56]	; 0x38
    9d2a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    9d2c:	2b00      	cmp	r3, #0
    9d2e:	dd65      	ble.n	9dfc <_dtoa_r+0x308>
    9d30:	001f      	movs	r7, r3
    9d32:	930d      	str	r3, [sp, #52]	; 0x34
    9d34:	9a04      	ldr	r2, [sp, #16]
    9d36:	6a54      	ldr	r4, [r2, #36]	; 0x24
    9d38:	2200      	movs	r2, #0
    9d3a:	6062      	str	r2, [r4, #4]
    9d3c:	3204      	adds	r2, #4
    9d3e:	0011      	movs	r1, r2
    9d40:	3114      	adds	r1, #20
    9d42:	4299      	cmp	r1, r3
    9d44:	d95f      	bls.n	9e06 <_dtoa_r+0x312>
    9d46:	6861      	ldr	r1, [r4, #4]
    9d48:	9804      	ldr	r0, [sp, #16]
    9d4a:	f000 fcd4 	bl	a6f6 <_Balloc>
    9d4e:	9b04      	ldr	r3, [sp, #16]
    9d50:	6020      	str	r0, [r4, #0]
    9d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    9d54:	681b      	ldr	r3, [r3, #0]
    9d56:	930a      	str	r3, [sp, #40]	; 0x28
    9d58:	2f0e      	cmp	r7, #14
    9d5a:	d900      	bls.n	9d5e <_dtoa_r+0x26a>
    9d5c:	e105      	b.n	9f6a <_dtoa_r+0x476>
    9d5e:	2d00      	cmp	r5, #0
    9d60:	d100      	bne.n	9d64 <_dtoa_r+0x270>
    9d62:	e102      	b.n	9f6a <_dtoa_r+0x476>
    9d64:	9b06      	ldr	r3, [sp, #24]
    9d66:	9c07      	ldr	r4, [sp, #28]
    9d68:	9314      	str	r3, [sp, #80]	; 0x50
    9d6a:	9415      	str	r4, [sp, #84]	; 0x54
    9d6c:	9b03      	ldr	r3, [sp, #12]
    9d6e:	2b00      	cmp	r3, #0
    9d70:	dc00      	bgt.n	9d74 <_dtoa_r+0x280>
    9d72:	e085      	b.n	9e80 <_dtoa_r+0x38c>
    9d74:	001a      	movs	r2, r3
    9d76:	210f      	movs	r1, #15
    9d78:	4b3c      	ldr	r3, [pc, #240]	; (9e6c <_dtoa_r+0x378>)
    9d7a:	400a      	ands	r2, r1
    9d7c:	00d2      	lsls	r2, r2, #3
    9d7e:	189b      	adds	r3, r3, r2
    9d80:	685c      	ldr	r4, [r3, #4]
    9d82:	681b      	ldr	r3, [r3, #0]
    9d84:	9310      	str	r3, [sp, #64]	; 0x40
    9d86:	9411      	str	r4, [sp, #68]	; 0x44
    9d88:	9b03      	ldr	r3, [sp, #12]
    9d8a:	2402      	movs	r4, #2
    9d8c:	111d      	asrs	r5, r3, #4
    9d8e:	06eb      	lsls	r3, r5, #27
    9d90:	d50a      	bpl.n	9da8 <_dtoa_r+0x2b4>
    9d92:	4b3a      	ldr	r3, [pc, #232]	; (9e7c <_dtoa_r+0x388>)
    9d94:	400d      	ands	r5, r1
    9d96:	6a1a      	ldr	r2, [r3, #32]
    9d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    9d9a:	9814      	ldr	r0, [sp, #80]	; 0x50
    9d9c:	9915      	ldr	r1, [sp, #84]	; 0x54
    9d9e:	f7fd fd17 	bl	77d0 <__aeabi_ddiv>
    9da2:	9006      	str	r0, [sp, #24]
    9da4:	9107      	str	r1, [sp, #28]
    9da6:	3401      	adds	r4, #1
    9da8:	4e34      	ldr	r6, [pc, #208]	; (9e7c <_dtoa_r+0x388>)
    9daa:	2d00      	cmp	r5, #0
    9dac:	d130      	bne.n	9e10 <_dtoa_r+0x31c>
    9dae:	9a10      	ldr	r2, [sp, #64]	; 0x40
    9db0:	9b11      	ldr	r3, [sp, #68]	; 0x44
    9db2:	9806      	ldr	r0, [sp, #24]
    9db4:	9907      	ldr	r1, [sp, #28]
    9db6:	f7fd fd0b 	bl	77d0 <__aeabi_ddiv>
    9dba:	9006      	str	r0, [sp, #24]
    9dbc:	9107      	str	r1, [sp, #28]
    9dbe:	e07a      	b.n	9eb6 <_dtoa_r+0x3c2>
    9dc0:	2301      	movs	r3, #1
    9dc2:	9a23      	ldr	r2, [sp, #140]	; 0x8c
    9dc4:	930e      	str	r3, [sp, #56]	; 0x38
    9dc6:	4694      	mov	ip, r2
    9dc8:	9b03      	ldr	r3, [sp, #12]
    9dca:	4463      	add	r3, ip
    9dcc:	1c5f      	adds	r7, r3, #1
    9dce:	930d      	str	r3, [sp, #52]	; 0x34
    9dd0:	1e3b      	subs	r3, r7, #0
    9dd2:	dcaf      	bgt.n	9d34 <_dtoa_r+0x240>
    9dd4:	2301      	movs	r3, #1
    9dd6:	e7ad      	b.n	9d34 <_dtoa_r+0x240>
    9dd8:	2300      	movs	r3, #0
    9dda:	e7a5      	b.n	9d28 <_dtoa_r+0x234>
    9ddc:	2300      	movs	r3, #0
    9dde:	e7f0      	b.n	9dc2 <_dtoa_r+0x2ce>
    9de0:	2300      	movs	r3, #0
    9de2:	950e      	str	r5, [sp, #56]	; 0x38
    9de4:	9322      	str	r3, [sp, #136]	; 0x88
    9de6:	3b01      	subs	r3, #1
    9de8:	2200      	movs	r2, #0
    9dea:	930d      	str	r3, [sp, #52]	; 0x34
    9dec:	001f      	movs	r7, r3
    9dee:	3313      	adds	r3, #19
    9df0:	9223      	str	r2, [sp, #140]	; 0x8c
    9df2:	e79f      	b.n	9d34 <_dtoa_r+0x240>
    9df4:	2301      	movs	r3, #1
    9df6:	930e      	str	r3, [sp, #56]	; 0x38
    9df8:	3b02      	subs	r3, #2
    9dfa:	e7f5      	b.n	9de8 <_dtoa_r+0x2f4>
    9dfc:	2301      	movs	r3, #1
    9dfe:	930d      	str	r3, [sp, #52]	; 0x34
    9e00:	001f      	movs	r7, r3
    9e02:	001a      	movs	r2, r3
    9e04:	e7f4      	b.n	9df0 <_dtoa_r+0x2fc>
    9e06:	6861      	ldr	r1, [r4, #4]
    9e08:	0052      	lsls	r2, r2, #1
    9e0a:	3101      	adds	r1, #1
    9e0c:	6061      	str	r1, [r4, #4]
    9e0e:	e796      	b.n	9d3e <_dtoa_r+0x24a>
    9e10:	2301      	movs	r3, #1
    9e12:	421d      	tst	r5, r3
    9e14:	d008      	beq.n	9e28 <_dtoa_r+0x334>
    9e16:	9810      	ldr	r0, [sp, #64]	; 0x40
    9e18:	9911      	ldr	r1, [sp, #68]	; 0x44
    9e1a:	18e4      	adds	r4, r4, r3
    9e1c:	6832      	ldr	r2, [r6, #0]
    9e1e:	6873      	ldr	r3, [r6, #4]
    9e20:	f7fe f90a 	bl	8038 <__aeabi_dmul>
    9e24:	9010      	str	r0, [sp, #64]	; 0x40
    9e26:	9111      	str	r1, [sp, #68]	; 0x44
    9e28:	106d      	asrs	r5, r5, #1
    9e2a:	3608      	adds	r6, #8
    9e2c:	e7bd      	b.n	9daa <_dtoa_r+0x2b6>
    9e2e:	46c0      	nop			; (mov r8, r8)
    9e30:	7ff00000 	.word	0x7ff00000
    9e34:	0000270f 	.word	0x0000270f
    9e38:	0000b96c 	.word	0x0000b96c
    9e3c:	0000b96f 	.word	0x0000b96f
    9e40:	0000b203 	.word	0x0000b203
    9e44:	0000b204 	.word	0x0000b204
    9e48:	3ff00000 	.word	0x3ff00000
    9e4c:	fffffc01 	.word	0xfffffc01
    9e50:	3ff80000 	.word	0x3ff80000
    9e54:	636f4361 	.word	0x636f4361
    9e58:	3fd287a7 	.word	0x3fd287a7
    9e5c:	8b60c8b3 	.word	0x8b60c8b3
    9e60:	3fc68a28 	.word	0x3fc68a28
    9e64:	509f79fb 	.word	0x509f79fb
    9e68:	3fd34413 	.word	0x3fd34413
    9e6c:	0000b998 	.word	0x0000b998
    9e70:	00000432 	.word	0x00000432
    9e74:	00000412 	.word	0x00000412
    9e78:	fe100000 	.word	0xfe100000
    9e7c:	0000b970 	.word	0x0000b970
    9e80:	9b03      	ldr	r3, [sp, #12]
    9e82:	2402      	movs	r4, #2
    9e84:	2b00      	cmp	r3, #0
    9e86:	d016      	beq.n	9eb6 <_dtoa_r+0x3c2>
    9e88:	9814      	ldr	r0, [sp, #80]	; 0x50
    9e8a:	9915      	ldr	r1, [sp, #84]	; 0x54
    9e8c:	425d      	negs	r5, r3
    9e8e:	230f      	movs	r3, #15
    9e90:	4aca      	ldr	r2, [pc, #808]	; (a1bc <_dtoa_r+0x6c8>)
    9e92:	402b      	ands	r3, r5
    9e94:	00db      	lsls	r3, r3, #3
    9e96:	18d3      	adds	r3, r2, r3
    9e98:	681a      	ldr	r2, [r3, #0]
    9e9a:	685b      	ldr	r3, [r3, #4]
    9e9c:	f7fe f8cc 	bl	8038 <__aeabi_dmul>
    9ea0:	2300      	movs	r3, #0
    9ea2:	9006      	str	r0, [sp, #24]
    9ea4:	9107      	str	r1, [sp, #28]
    9ea6:	4ec6      	ldr	r6, [pc, #792]	; (a1c0 <_dtoa_r+0x6cc>)
    9ea8:	112d      	asrs	r5, r5, #4
    9eaa:	2d00      	cmp	r5, #0
    9eac:	d000      	beq.n	9eb0 <_dtoa_r+0x3bc>
    9eae:	e08c      	b.n	9fca <_dtoa_r+0x4d6>
    9eb0:	2b00      	cmp	r3, #0
    9eb2:	d000      	beq.n	9eb6 <_dtoa_r+0x3c2>
    9eb4:	e781      	b.n	9dba <_dtoa_r+0x2c6>
    9eb6:	9b16      	ldr	r3, [sp, #88]	; 0x58
    9eb8:	2b00      	cmp	r3, #0
    9eba:	d100      	bne.n	9ebe <_dtoa_r+0x3ca>
    9ebc:	e091      	b.n	9fe2 <_dtoa_r+0x4ee>
    9ebe:	9a06      	ldr	r2, [sp, #24]
    9ec0:	9b07      	ldr	r3, [sp, #28]
    9ec2:	9210      	str	r2, [sp, #64]	; 0x40
    9ec4:	9311      	str	r3, [sp, #68]	; 0x44
    9ec6:	9810      	ldr	r0, [sp, #64]	; 0x40
    9ec8:	9911      	ldr	r1, [sp, #68]	; 0x44
    9eca:	2200      	movs	r2, #0
    9ecc:	4bbd      	ldr	r3, [pc, #756]	; (a1c4 <_dtoa_r+0x6d0>)
    9ece:	f7fd f947 	bl	7160 <__aeabi_dcmplt>
    9ed2:	2800      	cmp	r0, #0
    9ed4:	d100      	bne.n	9ed8 <_dtoa_r+0x3e4>
    9ed6:	e084      	b.n	9fe2 <_dtoa_r+0x4ee>
    9ed8:	2f00      	cmp	r7, #0
    9eda:	d100      	bne.n	9ede <_dtoa_r+0x3ea>
    9edc:	e081      	b.n	9fe2 <_dtoa_r+0x4ee>
    9ede:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    9ee0:	2b00      	cmp	r3, #0
    9ee2:	dd3e      	ble.n	9f62 <_dtoa_r+0x46e>
    9ee4:	9810      	ldr	r0, [sp, #64]	; 0x40
    9ee6:	9911      	ldr	r1, [sp, #68]	; 0x44
    9ee8:	9b03      	ldr	r3, [sp, #12]
    9eea:	2200      	movs	r2, #0
    9eec:	1e5e      	subs	r6, r3, #1
    9eee:	4bb6      	ldr	r3, [pc, #728]	; (a1c8 <_dtoa_r+0x6d4>)
    9ef0:	f7fe f8a2 	bl	8038 <__aeabi_dmul>
    9ef4:	9006      	str	r0, [sp, #24]
    9ef6:	9107      	str	r1, [sp, #28]
    9ef8:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    9efa:	3401      	adds	r4, #1
    9efc:	0020      	movs	r0, r4
    9efe:	f001 f87f 	bl	b000 <__aeabi_i2d>
    9f02:	9a06      	ldr	r2, [sp, #24]
    9f04:	9b07      	ldr	r3, [sp, #28]
    9f06:	f7fe f897 	bl	8038 <__aeabi_dmul>
    9f0a:	2200      	movs	r2, #0
    9f0c:	4baf      	ldr	r3, [pc, #700]	; (a1cc <_dtoa_r+0x6d8>)
    9f0e:	f7fd f94f 	bl	71b0 <__aeabi_dadd>
    9f12:	9012      	str	r0, [sp, #72]	; 0x48
    9f14:	9113      	str	r1, [sp, #76]	; 0x4c
    9f16:	9b12      	ldr	r3, [sp, #72]	; 0x48
    9f18:	9c13      	ldr	r4, [sp, #76]	; 0x4c
    9f1a:	4aad      	ldr	r2, [pc, #692]	; (a1d0 <_dtoa_r+0x6dc>)
    9f1c:	9310      	str	r3, [sp, #64]	; 0x40
    9f1e:	9411      	str	r4, [sp, #68]	; 0x44
    9f20:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    9f22:	189c      	adds	r4, r3, r2
    9f24:	9411      	str	r4, [sp, #68]	; 0x44
    9f26:	2d00      	cmp	r5, #0
    9f28:	d15e      	bne.n	9fe8 <_dtoa_r+0x4f4>
    9f2a:	9806      	ldr	r0, [sp, #24]
    9f2c:	9907      	ldr	r1, [sp, #28]
    9f2e:	2200      	movs	r2, #0
    9f30:	4ba8      	ldr	r3, [pc, #672]	; (a1d4 <_dtoa_r+0x6e0>)
    9f32:	f7fe fb01 	bl	8538 <__aeabi_dsub>
    9f36:	9a10      	ldr	r2, [sp, #64]	; 0x40
    9f38:	0023      	movs	r3, r4
    9f3a:	9006      	str	r0, [sp, #24]
    9f3c:	9107      	str	r1, [sp, #28]
    9f3e:	f7fd f923 	bl	7188 <__aeabi_dcmpgt>
    9f42:	2800      	cmp	r0, #0
    9f44:	d000      	beq.n	9f48 <_dtoa_r+0x454>
    9f46:	e301      	b.n	a54c <_dtoa_r+0xa58>
    9f48:	48a3      	ldr	r0, [pc, #652]	; (a1d8 <_dtoa_r+0x6e4>)
    9f4a:	9913      	ldr	r1, [sp, #76]	; 0x4c
    9f4c:	4684      	mov	ip, r0
    9f4e:	4461      	add	r1, ip
    9f50:	000b      	movs	r3, r1
    9f52:	9806      	ldr	r0, [sp, #24]
    9f54:	9907      	ldr	r1, [sp, #28]
    9f56:	9a10      	ldr	r2, [sp, #64]	; 0x40
    9f58:	f7fd f902 	bl	7160 <__aeabi_dcmplt>
    9f5c:	2800      	cmp	r0, #0
    9f5e:	d000      	beq.n	9f62 <_dtoa_r+0x46e>
    9f60:	e2e8      	b.n	a534 <_dtoa_r+0xa40>
    9f62:	9b14      	ldr	r3, [sp, #80]	; 0x50
    9f64:	9c15      	ldr	r4, [sp, #84]	; 0x54
    9f66:	9306      	str	r3, [sp, #24]
    9f68:	9407      	str	r4, [sp, #28]
    9f6a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    9f6c:	2b00      	cmp	r3, #0
    9f6e:	da00      	bge.n	9f72 <_dtoa_r+0x47e>
    9f70:	e157      	b.n	a222 <_dtoa_r+0x72e>
    9f72:	9a03      	ldr	r2, [sp, #12]
    9f74:	2a0e      	cmp	r2, #14
    9f76:	dd00      	ble.n	9f7a <_dtoa_r+0x486>
    9f78:	e153      	b.n	a222 <_dtoa_r+0x72e>
    9f7a:	4b90      	ldr	r3, [pc, #576]	; (a1bc <_dtoa_r+0x6c8>)
    9f7c:	00d2      	lsls	r2, r2, #3
    9f7e:	189b      	adds	r3, r3, r2
    9f80:	685c      	ldr	r4, [r3, #4]
    9f82:	681b      	ldr	r3, [r3, #0]
    9f84:	9308      	str	r3, [sp, #32]
    9f86:	9409      	str	r4, [sp, #36]	; 0x24
    9f88:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    9f8a:	2b00      	cmp	r3, #0
    9f8c:	db00      	blt.n	9f90 <_dtoa_r+0x49c>
    9f8e:	e0ce      	b.n	a12e <_dtoa_r+0x63a>
    9f90:	2f00      	cmp	r7, #0
    9f92:	dd00      	ble.n	9f96 <_dtoa_r+0x4a2>
    9f94:	e0cb      	b.n	a12e <_dtoa_r+0x63a>
    9f96:	d000      	beq.n	9f9a <_dtoa_r+0x4a6>
    9f98:	e2cf      	b.n	a53a <_dtoa_r+0xa46>
    9f9a:	9808      	ldr	r0, [sp, #32]
    9f9c:	9909      	ldr	r1, [sp, #36]	; 0x24
    9f9e:	2200      	movs	r2, #0
    9fa0:	4b8c      	ldr	r3, [pc, #560]	; (a1d4 <_dtoa_r+0x6e0>)
    9fa2:	f7fe f849 	bl	8038 <__aeabi_dmul>
    9fa6:	9a06      	ldr	r2, [sp, #24]
    9fa8:	9b07      	ldr	r3, [sp, #28]
    9faa:	f7fd f8f7 	bl	719c <__aeabi_dcmpge>
    9fae:	003e      	movs	r6, r7
    9fb0:	9708      	str	r7, [sp, #32]
    9fb2:	2800      	cmp	r0, #0
    9fb4:	d000      	beq.n	9fb8 <_dtoa_r+0x4c4>
    9fb6:	e2a4      	b.n	a502 <_dtoa_r+0xa0e>
    9fb8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    9fba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    9fbc:	1c5d      	adds	r5, r3, #1
    9fbe:	2331      	movs	r3, #49	; 0x31
    9fc0:	7013      	strb	r3, [r2, #0]
    9fc2:	9b03      	ldr	r3, [sp, #12]
    9fc4:	3301      	adds	r3, #1
    9fc6:	9303      	str	r3, [sp, #12]
    9fc8:	e29f      	b.n	a50a <_dtoa_r+0xa16>
    9fca:	2201      	movs	r2, #1
    9fcc:	4215      	tst	r5, r2
    9fce:	d005      	beq.n	9fdc <_dtoa_r+0x4e8>
    9fd0:	18a4      	adds	r4, r4, r2
    9fd2:	6832      	ldr	r2, [r6, #0]
    9fd4:	6873      	ldr	r3, [r6, #4]
    9fd6:	f7fe f82f 	bl	8038 <__aeabi_dmul>
    9fda:	2301      	movs	r3, #1
    9fdc:	106d      	asrs	r5, r5, #1
    9fde:	3608      	adds	r6, #8
    9fe0:	e763      	b.n	9eaa <_dtoa_r+0x3b6>
    9fe2:	9e03      	ldr	r6, [sp, #12]
    9fe4:	003d      	movs	r5, r7
    9fe6:	e789      	b.n	9efc <_dtoa_r+0x408>
    9fe8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    9fea:	1e69      	subs	r1, r5, #1
    9fec:	1952      	adds	r2, r2, r5
    9fee:	9217      	str	r2, [sp, #92]	; 0x5c
    9ff0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    9ff2:	4b72      	ldr	r3, [pc, #456]	; (a1bc <_dtoa_r+0x6c8>)
    9ff4:	00c9      	lsls	r1, r1, #3
    9ff6:	2a00      	cmp	r2, #0
    9ff8:	d04a      	beq.n	a090 <_dtoa_r+0x59c>
    9ffa:	185b      	adds	r3, r3, r1
    9ffc:	681a      	ldr	r2, [r3, #0]
    9ffe:	685b      	ldr	r3, [r3, #4]
    a000:	2000      	movs	r0, #0
    a002:	4976      	ldr	r1, [pc, #472]	; (a1dc <_dtoa_r+0x6e8>)
    a004:	f7fd fbe4 	bl	77d0 <__aeabi_ddiv>
    a008:	9a10      	ldr	r2, [sp, #64]	; 0x40
    a00a:	9b11      	ldr	r3, [sp, #68]	; 0x44
    a00c:	f7fe fa94 	bl	8538 <__aeabi_dsub>
    a010:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    a012:	9010      	str	r0, [sp, #64]	; 0x40
    a014:	9111      	str	r1, [sp, #68]	; 0x44
    a016:	9312      	str	r3, [sp, #72]	; 0x48
    a018:	9806      	ldr	r0, [sp, #24]
    a01a:	9907      	ldr	r1, [sp, #28]
    a01c:	f7fe fdc2 	bl	8ba4 <__aeabi_d2iz>
    a020:	0004      	movs	r4, r0
    a022:	f000 ffed 	bl	b000 <__aeabi_i2d>
    a026:	0002      	movs	r2, r0
    a028:	000b      	movs	r3, r1
    a02a:	9806      	ldr	r0, [sp, #24]
    a02c:	9907      	ldr	r1, [sp, #28]
    a02e:	f7fe fa83 	bl	8538 <__aeabi_dsub>
    a032:	9b12      	ldr	r3, [sp, #72]	; 0x48
    a034:	3430      	adds	r4, #48	; 0x30
    a036:	1c5d      	adds	r5, r3, #1
    a038:	701c      	strb	r4, [r3, #0]
    a03a:	9a10      	ldr	r2, [sp, #64]	; 0x40
    a03c:	9b11      	ldr	r3, [sp, #68]	; 0x44
    a03e:	9006      	str	r0, [sp, #24]
    a040:	9107      	str	r1, [sp, #28]
    a042:	f7fd f88d 	bl	7160 <__aeabi_dcmplt>
    a046:	2800      	cmp	r0, #0
    a048:	d165      	bne.n	a116 <_dtoa_r+0x622>
    a04a:	9a06      	ldr	r2, [sp, #24]
    a04c:	9b07      	ldr	r3, [sp, #28]
    a04e:	2000      	movs	r0, #0
    a050:	495c      	ldr	r1, [pc, #368]	; (a1c4 <_dtoa_r+0x6d0>)
    a052:	f7fe fa71 	bl	8538 <__aeabi_dsub>
    a056:	9a10      	ldr	r2, [sp, #64]	; 0x40
    a058:	9b11      	ldr	r3, [sp, #68]	; 0x44
    a05a:	f7fd f881 	bl	7160 <__aeabi_dcmplt>
    a05e:	2800      	cmp	r0, #0
    a060:	d000      	beq.n	a064 <_dtoa_r+0x570>
    a062:	e0be      	b.n	a1e2 <_dtoa_r+0x6ee>
    a064:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    a066:	429d      	cmp	r5, r3
    a068:	d100      	bne.n	a06c <_dtoa_r+0x578>
    a06a:	e77a      	b.n	9f62 <_dtoa_r+0x46e>
    a06c:	9810      	ldr	r0, [sp, #64]	; 0x40
    a06e:	9911      	ldr	r1, [sp, #68]	; 0x44
    a070:	2200      	movs	r2, #0
    a072:	4b55      	ldr	r3, [pc, #340]	; (a1c8 <_dtoa_r+0x6d4>)
    a074:	f7fd ffe0 	bl	8038 <__aeabi_dmul>
    a078:	2200      	movs	r2, #0
    a07a:	9010      	str	r0, [sp, #64]	; 0x40
    a07c:	9111      	str	r1, [sp, #68]	; 0x44
    a07e:	9806      	ldr	r0, [sp, #24]
    a080:	9907      	ldr	r1, [sp, #28]
    a082:	4b51      	ldr	r3, [pc, #324]	; (a1c8 <_dtoa_r+0x6d4>)
    a084:	f7fd ffd8 	bl	8038 <__aeabi_dmul>
    a088:	9512      	str	r5, [sp, #72]	; 0x48
    a08a:	9006      	str	r0, [sp, #24]
    a08c:	9107      	str	r1, [sp, #28]
    a08e:	e7c3      	b.n	a018 <_dtoa_r+0x524>
    a090:	1859      	adds	r1, r3, r1
    a092:	6808      	ldr	r0, [r1, #0]
    a094:	6849      	ldr	r1, [r1, #4]
    a096:	9a10      	ldr	r2, [sp, #64]	; 0x40
    a098:	9b11      	ldr	r3, [sp, #68]	; 0x44
    a09a:	f7fd ffcd 	bl	8038 <__aeabi_dmul>
    a09e:	9010      	str	r0, [sp, #64]	; 0x40
    a0a0:	9111      	str	r1, [sp, #68]	; 0x44
    a0a2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    a0a4:	9d17      	ldr	r5, [sp, #92]	; 0x5c
    a0a6:	9806      	ldr	r0, [sp, #24]
    a0a8:	9907      	ldr	r1, [sp, #28]
    a0aa:	f7fe fd7b 	bl	8ba4 <__aeabi_d2iz>
    a0ae:	9012      	str	r0, [sp, #72]	; 0x48
    a0b0:	f000 ffa6 	bl	b000 <__aeabi_i2d>
    a0b4:	0002      	movs	r2, r0
    a0b6:	000b      	movs	r3, r1
    a0b8:	9806      	ldr	r0, [sp, #24]
    a0ba:	9907      	ldr	r1, [sp, #28]
    a0bc:	f7fe fa3c 	bl	8538 <__aeabi_dsub>
    a0c0:	9b12      	ldr	r3, [sp, #72]	; 0x48
    a0c2:	9006      	str	r0, [sp, #24]
    a0c4:	9107      	str	r1, [sp, #28]
    a0c6:	3330      	adds	r3, #48	; 0x30
    a0c8:	7023      	strb	r3, [r4, #0]
    a0ca:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    a0cc:	3401      	adds	r4, #1
    a0ce:	2200      	movs	r2, #0
    a0d0:	42a3      	cmp	r3, r4
    a0d2:	d124      	bne.n	a11e <_dtoa_r+0x62a>
    a0d4:	4b41      	ldr	r3, [pc, #260]	; (a1dc <_dtoa_r+0x6e8>)
    a0d6:	9810      	ldr	r0, [sp, #64]	; 0x40
    a0d8:	9911      	ldr	r1, [sp, #68]	; 0x44
    a0da:	f7fd f869 	bl	71b0 <__aeabi_dadd>
    a0de:	0002      	movs	r2, r0
    a0e0:	000b      	movs	r3, r1
    a0e2:	9806      	ldr	r0, [sp, #24]
    a0e4:	9907      	ldr	r1, [sp, #28]
    a0e6:	f7fd f84f 	bl	7188 <__aeabi_dcmpgt>
    a0ea:	2800      	cmp	r0, #0
    a0ec:	d000      	beq.n	a0f0 <_dtoa_r+0x5fc>
    a0ee:	e078      	b.n	a1e2 <_dtoa_r+0x6ee>
    a0f0:	9a10      	ldr	r2, [sp, #64]	; 0x40
    a0f2:	9b11      	ldr	r3, [sp, #68]	; 0x44
    a0f4:	2000      	movs	r0, #0
    a0f6:	4939      	ldr	r1, [pc, #228]	; (a1dc <_dtoa_r+0x6e8>)
    a0f8:	f7fe fa1e 	bl	8538 <__aeabi_dsub>
    a0fc:	0002      	movs	r2, r0
    a0fe:	000b      	movs	r3, r1
    a100:	9806      	ldr	r0, [sp, #24]
    a102:	9907      	ldr	r1, [sp, #28]
    a104:	f7fd f82c 	bl	7160 <__aeabi_dcmplt>
    a108:	2800      	cmp	r0, #0
    a10a:	d100      	bne.n	a10e <_dtoa_r+0x61a>
    a10c:	e729      	b.n	9f62 <_dtoa_r+0x46e>
    a10e:	1e6b      	subs	r3, r5, #1
    a110:	781a      	ldrb	r2, [r3, #0]
    a112:	2a30      	cmp	r2, #48	; 0x30
    a114:	d001      	beq.n	a11a <_dtoa_r+0x626>
    a116:	9603      	str	r6, [sp, #12]
    a118:	e03f      	b.n	a19a <_dtoa_r+0x6a6>
    a11a:	001d      	movs	r5, r3
    a11c:	e7f7      	b.n	a10e <_dtoa_r+0x61a>
    a11e:	9806      	ldr	r0, [sp, #24]
    a120:	9907      	ldr	r1, [sp, #28]
    a122:	4b29      	ldr	r3, [pc, #164]	; (a1c8 <_dtoa_r+0x6d4>)
    a124:	f7fd ff88 	bl	8038 <__aeabi_dmul>
    a128:	9006      	str	r0, [sp, #24]
    a12a:	9107      	str	r1, [sp, #28]
    a12c:	e7bb      	b.n	a0a6 <_dtoa_r+0x5b2>
    a12e:	9e0a      	ldr	r6, [sp, #40]	; 0x28
    a130:	9a08      	ldr	r2, [sp, #32]
    a132:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a134:	9806      	ldr	r0, [sp, #24]
    a136:	9907      	ldr	r1, [sp, #28]
    a138:	f7fd fb4a 	bl	77d0 <__aeabi_ddiv>
    a13c:	f7fe fd32 	bl	8ba4 <__aeabi_d2iz>
    a140:	0004      	movs	r4, r0
    a142:	f000 ff5d 	bl	b000 <__aeabi_i2d>
    a146:	9a08      	ldr	r2, [sp, #32]
    a148:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a14a:	f7fd ff75 	bl	8038 <__aeabi_dmul>
    a14e:	000b      	movs	r3, r1
    a150:	0002      	movs	r2, r0
    a152:	9806      	ldr	r0, [sp, #24]
    a154:	9907      	ldr	r1, [sp, #28]
    a156:	f7fe f9ef 	bl	8538 <__aeabi_dsub>
    a15a:	0023      	movs	r3, r4
    a15c:	3330      	adds	r3, #48	; 0x30
    a15e:	7033      	strb	r3, [r6, #0]
    a160:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    a162:	1c75      	adds	r5, r6, #1
    a164:	1aeb      	subs	r3, r5, r3
    a166:	429f      	cmp	r7, r3
    a168:	d14c      	bne.n	a204 <_dtoa_r+0x710>
    a16a:	0002      	movs	r2, r0
    a16c:	000b      	movs	r3, r1
    a16e:	f7fd f81f 	bl	71b0 <__aeabi_dadd>
    a172:	0006      	movs	r6, r0
    a174:	000f      	movs	r7, r1
    a176:	0002      	movs	r2, r0
    a178:	000b      	movs	r3, r1
    a17a:	9808      	ldr	r0, [sp, #32]
    a17c:	9909      	ldr	r1, [sp, #36]	; 0x24
    a17e:	f7fc ffef 	bl	7160 <__aeabi_dcmplt>
    a182:	2800      	cmp	r0, #0
    a184:	d12c      	bne.n	a1e0 <_dtoa_r+0x6ec>
    a186:	9808      	ldr	r0, [sp, #32]
    a188:	9909      	ldr	r1, [sp, #36]	; 0x24
    a18a:	0032      	movs	r2, r6
    a18c:	003b      	movs	r3, r7
    a18e:	f7fc ffe1 	bl	7154 <__aeabi_dcmpeq>
    a192:	2800      	cmp	r0, #0
    a194:	d001      	beq.n	a19a <_dtoa_r+0x6a6>
    a196:	07e3      	lsls	r3, r4, #31
    a198:	d422      	bmi.n	a1e0 <_dtoa_r+0x6ec>
    a19a:	9905      	ldr	r1, [sp, #20]
    a19c:	9804      	ldr	r0, [sp, #16]
    a19e:	f000 fae2 	bl	a766 <_Bfree>
    a1a2:	2300      	movs	r3, #0
    a1a4:	702b      	strb	r3, [r5, #0]
    a1a6:	9b03      	ldr	r3, [sp, #12]
    a1a8:	9a24      	ldr	r2, [sp, #144]	; 0x90
    a1aa:	3301      	adds	r3, #1
    a1ac:	6013      	str	r3, [r2, #0]
    a1ae:	9b26      	ldr	r3, [sp, #152]	; 0x98
    a1b0:	2b00      	cmp	r3, #0
    a1b2:	d100      	bne.n	a1b6 <_dtoa_r+0x6c2>
    a1b4:	e275      	b.n	a6a2 <_dtoa_r+0xbae>
    a1b6:	601d      	str	r5, [r3, #0]
    a1b8:	e273      	b.n	a6a2 <_dtoa_r+0xbae>
    a1ba:	46c0      	nop			; (mov r8, r8)
    a1bc:	0000b998 	.word	0x0000b998
    a1c0:	0000b970 	.word	0x0000b970
    a1c4:	3ff00000 	.word	0x3ff00000
    a1c8:	40240000 	.word	0x40240000
    a1cc:	401c0000 	.word	0x401c0000
    a1d0:	fcc00000 	.word	0xfcc00000
    a1d4:	40140000 	.word	0x40140000
    a1d8:	7cc00000 	.word	0x7cc00000
    a1dc:	3fe00000 	.word	0x3fe00000
    a1e0:	9e03      	ldr	r6, [sp, #12]
    a1e2:	1e6b      	subs	r3, r5, #1
    a1e4:	781a      	ldrb	r2, [r3, #0]
    a1e6:	2a39      	cmp	r2, #57	; 0x39
    a1e8:	d106      	bne.n	a1f8 <_dtoa_r+0x704>
    a1ea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    a1ec:	429a      	cmp	r2, r3
    a1ee:	d107      	bne.n	a200 <_dtoa_r+0x70c>
    a1f0:	2330      	movs	r3, #48	; 0x30
    a1f2:	7013      	strb	r3, [r2, #0]
    a1f4:	0013      	movs	r3, r2
    a1f6:	3601      	adds	r6, #1
    a1f8:	781a      	ldrb	r2, [r3, #0]
    a1fa:	3201      	adds	r2, #1
    a1fc:	701a      	strb	r2, [r3, #0]
    a1fe:	e78a      	b.n	a116 <_dtoa_r+0x622>
    a200:	001d      	movs	r5, r3
    a202:	e7ee      	b.n	a1e2 <_dtoa_r+0x6ee>
    a204:	2200      	movs	r2, #0
    a206:	4bcf      	ldr	r3, [pc, #828]	; (a544 <_dtoa_r+0xa50>)
    a208:	f7fd ff16 	bl	8038 <__aeabi_dmul>
    a20c:	2200      	movs	r2, #0
    a20e:	2300      	movs	r3, #0
    a210:	9006      	str	r0, [sp, #24]
    a212:	9107      	str	r1, [sp, #28]
    a214:	002e      	movs	r6, r5
    a216:	f7fc ff9d 	bl	7154 <__aeabi_dcmpeq>
    a21a:	2800      	cmp	r0, #0
    a21c:	d100      	bne.n	a220 <_dtoa_r+0x72c>
    a21e:	e787      	b.n	a130 <_dtoa_r+0x63c>
    a220:	e7bb      	b.n	a19a <_dtoa_r+0x6a6>
    a222:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    a224:	2a00      	cmp	r2, #0
    a226:	d100      	bne.n	a22a <_dtoa_r+0x736>
    a228:	e087      	b.n	a33a <_dtoa_r+0x846>
    a22a:	9a22      	ldr	r2, [sp, #136]	; 0x88
    a22c:	2a01      	cmp	r2, #1
    a22e:	dc6e      	bgt.n	a30e <_dtoa_r+0x81a>
    a230:	9a18      	ldr	r2, [sp, #96]	; 0x60
    a232:	2a00      	cmp	r2, #0
    a234:	d067      	beq.n	a306 <_dtoa_r+0x812>
    a236:	4ac4      	ldr	r2, [pc, #784]	; (a548 <_dtoa_r+0xa54>)
    a238:	189b      	adds	r3, r3, r2
    a23a:	9d08      	ldr	r5, [sp, #32]
    a23c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    a23e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    a240:	2101      	movs	r1, #1
    a242:	18d2      	adds	r2, r2, r3
    a244:	920b      	str	r2, [sp, #44]	; 0x2c
    a246:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    a248:	9804      	ldr	r0, [sp, #16]
    a24a:	18d3      	adds	r3, r2, r3
    a24c:	930c      	str	r3, [sp, #48]	; 0x30
    a24e:	f000 fb28 	bl	a8a2 <__i2b>
    a252:	0006      	movs	r6, r0
    a254:	2c00      	cmp	r4, #0
    a256:	dd0e      	ble.n	a276 <_dtoa_r+0x782>
    a258:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    a25a:	2b00      	cmp	r3, #0
    a25c:	dd0b      	ble.n	a276 <_dtoa_r+0x782>
    a25e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    a260:	0023      	movs	r3, r4
    a262:	4294      	cmp	r4, r2
    a264:	dd00      	ble.n	a268 <_dtoa_r+0x774>
    a266:	0013      	movs	r3, r2
    a268:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    a26a:	1ae4      	subs	r4, r4, r3
    a26c:	1ad2      	subs	r2, r2, r3
    a26e:	920b      	str	r2, [sp, #44]	; 0x2c
    a270:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    a272:	1ad3      	subs	r3, r2, r3
    a274:	930c      	str	r3, [sp, #48]	; 0x30
    a276:	9b08      	ldr	r3, [sp, #32]
    a278:	2b00      	cmp	r3, #0
    a27a:	d01e      	beq.n	a2ba <_dtoa_r+0x7c6>
    a27c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    a27e:	2b00      	cmp	r3, #0
    a280:	d05f      	beq.n	a342 <_dtoa_r+0x84e>
    a282:	2d00      	cmp	r5, #0
    a284:	dd11      	ble.n	a2aa <_dtoa_r+0x7b6>
    a286:	0031      	movs	r1, r6
    a288:	002a      	movs	r2, r5
    a28a:	9804      	ldr	r0, [sp, #16]
    a28c:	f000 fba2 	bl	a9d4 <__pow5mult>
    a290:	9a05      	ldr	r2, [sp, #20]
    a292:	0001      	movs	r1, r0
    a294:	0006      	movs	r6, r0
    a296:	9804      	ldr	r0, [sp, #16]
    a298:	f000 fb0c 	bl	a8b4 <__multiply>
    a29c:	9905      	ldr	r1, [sp, #20]
    a29e:	9010      	str	r0, [sp, #64]	; 0x40
    a2a0:	9804      	ldr	r0, [sp, #16]
    a2a2:	f000 fa60 	bl	a766 <_Bfree>
    a2a6:	9b10      	ldr	r3, [sp, #64]	; 0x40
    a2a8:	9305      	str	r3, [sp, #20]
    a2aa:	9b08      	ldr	r3, [sp, #32]
    a2ac:	1b5a      	subs	r2, r3, r5
    a2ae:	d004      	beq.n	a2ba <_dtoa_r+0x7c6>
    a2b0:	9905      	ldr	r1, [sp, #20]
    a2b2:	9804      	ldr	r0, [sp, #16]
    a2b4:	f000 fb8e 	bl	a9d4 <__pow5mult>
    a2b8:	9005      	str	r0, [sp, #20]
    a2ba:	2101      	movs	r1, #1
    a2bc:	9804      	ldr	r0, [sp, #16]
    a2be:	f000 faf0 	bl	a8a2 <__i2b>
    a2c2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    a2c4:	9008      	str	r0, [sp, #32]
    a2c6:	2b00      	cmp	r3, #0
    a2c8:	dd3d      	ble.n	a346 <_dtoa_r+0x852>
    a2ca:	001a      	movs	r2, r3
    a2cc:	0001      	movs	r1, r0
    a2ce:	9804      	ldr	r0, [sp, #16]
    a2d0:	f000 fb80 	bl	a9d4 <__pow5mult>
    a2d4:	9b22      	ldr	r3, [sp, #136]	; 0x88
    a2d6:	9008      	str	r0, [sp, #32]
    a2d8:	2500      	movs	r5, #0
    a2da:	2b01      	cmp	r3, #1
    a2dc:	dc3b      	bgt.n	a356 <_dtoa_r+0x862>
    a2de:	2500      	movs	r5, #0
    a2e0:	9b06      	ldr	r3, [sp, #24]
    a2e2:	42ab      	cmp	r3, r5
    a2e4:	d133      	bne.n	a34e <_dtoa_r+0x85a>
    a2e6:	9b07      	ldr	r3, [sp, #28]
    a2e8:	031b      	lsls	r3, r3, #12
    a2ea:	42ab      	cmp	r3, r5
    a2ec:	d12f      	bne.n	a34e <_dtoa_r+0x85a>
    a2ee:	9b19      	ldr	r3, [sp, #100]	; 0x64
    a2f0:	9a07      	ldr	r2, [sp, #28]
    a2f2:	4213      	tst	r3, r2
    a2f4:	d02b      	beq.n	a34e <_dtoa_r+0x85a>
    a2f6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    a2f8:	3501      	adds	r5, #1
    a2fa:	3301      	adds	r3, #1
    a2fc:	930b      	str	r3, [sp, #44]	; 0x2c
    a2fe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    a300:	3301      	adds	r3, #1
    a302:	930c      	str	r3, [sp, #48]	; 0x30
    a304:	e023      	b.n	a34e <_dtoa_r+0x85a>
    a306:	2336      	movs	r3, #54	; 0x36
    a308:	9a1a      	ldr	r2, [sp, #104]	; 0x68
    a30a:	1a9b      	subs	r3, r3, r2
    a30c:	e795      	b.n	a23a <_dtoa_r+0x746>
    a30e:	9b08      	ldr	r3, [sp, #32]
    a310:	1e7d      	subs	r5, r7, #1
    a312:	42ab      	cmp	r3, r5
    a314:	db06      	blt.n	a324 <_dtoa_r+0x830>
    a316:	1b5d      	subs	r5, r3, r5
    a318:	2f00      	cmp	r7, #0
    a31a:	da0b      	bge.n	a334 <_dtoa_r+0x840>
    a31c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    a31e:	1bdc      	subs	r4, r3, r7
    a320:	2300      	movs	r3, #0
    a322:	e78c      	b.n	a23e <_dtoa_r+0x74a>
    a324:	9b08      	ldr	r3, [sp, #32]
    a326:	9508      	str	r5, [sp, #32]
    a328:	1aea      	subs	r2, r5, r3
    a32a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    a32c:	2500      	movs	r5, #0
    a32e:	189b      	adds	r3, r3, r2
    a330:	930f      	str	r3, [sp, #60]	; 0x3c
    a332:	e7f1      	b.n	a318 <_dtoa_r+0x824>
    a334:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    a336:	003b      	movs	r3, r7
    a338:	e781      	b.n	a23e <_dtoa_r+0x74a>
    a33a:	9d08      	ldr	r5, [sp, #32]
    a33c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    a33e:	9e0e      	ldr	r6, [sp, #56]	; 0x38
    a340:	e788      	b.n	a254 <_dtoa_r+0x760>
    a342:	9a08      	ldr	r2, [sp, #32]
    a344:	e7b4      	b.n	a2b0 <_dtoa_r+0x7bc>
    a346:	9b22      	ldr	r3, [sp, #136]	; 0x88
    a348:	2500      	movs	r5, #0
    a34a:	2b01      	cmp	r3, #1
    a34c:	ddc7      	ble.n	a2de <_dtoa_r+0x7ea>
    a34e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    a350:	2001      	movs	r0, #1
    a352:	2b00      	cmp	r3, #0
    a354:	d00b      	beq.n	a36e <_dtoa_r+0x87a>
    a356:	9b08      	ldr	r3, [sp, #32]
    a358:	9a08      	ldr	r2, [sp, #32]
    a35a:	691b      	ldr	r3, [r3, #16]
    a35c:	930f      	str	r3, [sp, #60]	; 0x3c
    a35e:	3303      	adds	r3, #3
    a360:	009b      	lsls	r3, r3, #2
    a362:	18d3      	adds	r3, r2, r3
    a364:	6858      	ldr	r0, [r3, #4]
    a366:	f000 fa53 	bl	a810 <__hi0bits>
    a36a:	2320      	movs	r3, #32
    a36c:	1a18      	subs	r0, r3, r0
    a36e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    a370:	18c0      	adds	r0, r0, r3
    a372:	231f      	movs	r3, #31
    a374:	4018      	ands	r0, r3
    a376:	d100      	bne.n	a37a <_dtoa_r+0x886>
    a378:	e0ab      	b.n	a4d2 <_dtoa_r+0x9de>
    a37a:	3301      	adds	r3, #1
    a37c:	1a1b      	subs	r3, r3, r0
    a37e:	2b04      	cmp	r3, #4
    a380:	dc00      	bgt.n	a384 <_dtoa_r+0x890>
    a382:	e09b      	b.n	a4bc <_dtoa_r+0x9c8>
    a384:	231c      	movs	r3, #28
    a386:	1a18      	subs	r0, r3, r0
    a388:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    a38a:	1824      	adds	r4, r4, r0
    a38c:	181b      	adds	r3, r3, r0
    a38e:	930b      	str	r3, [sp, #44]	; 0x2c
    a390:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    a392:	181b      	adds	r3, r3, r0
    a394:	930c      	str	r3, [sp, #48]	; 0x30
    a396:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    a398:	2b00      	cmp	r3, #0
    a39a:	dd05      	ble.n	a3a8 <_dtoa_r+0x8b4>
    a39c:	001a      	movs	r2, r3
    a39e:	9905      	ldr	r1, [sp, #20]
    a3a0:	9804      	ldr	r0, [sp, #16]
    a3a2:	f000 fb69 	bl	aa78 <__lshift>
    a3a6:	9005      	str	r0, [sp, #20]
    a3a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    a3aa:	2b00      	cmp	r3, #0
    a3ac:	dd05      	ble.n	a3ba <_dtoa_r+0x8c6>
    a3ae:	001a      	movs	r2, r3
    a3b0:	9908      	ldr	r1, [sp, #32]
    a3b2:	9804      	ldr	r0, [sp, #16]
    a3b4:	f000 fb60 	bl	aa78 <__lshift>
    a3b8:	9008      	str	r0, [sp, #32]
    a3ba:	9b16      	ldr	r3, [sp, #88]	; 0x58
    a3bc:	2b00      	cmp	r3, #0
    a3be:	d100      	bne.n	a3c2 <_dtoa_r+0x8ce>
    a3c0:	e089      	b.n	a4d6 <_dtoa_r+0x9e2>
    a3c2:	9908      	ldr	r1, [sp, #32]
    a3c4:	9805      	ldr	r0, [sp, #20]
    a3c6:	f000 fba8 	bl	ab1a <__mcmp>
    a3ca:	2800      	cmp	r0, #0
    a3cc:	db00      	blt.n	a3d0 <_dtoa_r+0x8dc>
    a3ce:	e082      	b.n	a4d6 <_dtoa_r+0x9e2>
    a3d0:	9b03      	ldr	r3, [sp, #12]
    a3d2:	220a      	movs	r2, #10
    a3d4:	3b01      	subs	r3, #1
    a3d6:	9303      	str	r3, [sp, #12]
    a3d8:	9905      	ldr	r1, [sp, #20]
    a3da:	2300      	movs	r3, #0
    a3dc:	9804      	ldr	r0, [sp, #16]
    a3de:	f000 f9db 	bl	a798 <__multadd>
    a3e2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    a3e4:	9005      	str	r0, [sp, #20]
    a3e6:	2b00      	cmp	r3, #0
    a3e8:	d100      	bne.n	a3ec <_dtoa_r+0x8f8>
    a3ea:	e15d      	b.n	a6a8 <_dtoa_r+0xbb4>
    a3ec:	2300      	movs	r3, #0
    a3ee:	0031      	movs	r1, r6
    a3f0:	220a      	movs	r2, #10
    a3f2:	9804      	ldr	r0, [sp, #16]
    a3f4:	f000 f9d0 	bl	a798 <__multadd>
    a3f8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    a3fa:	0006      	movs	r6, r0
    a3fc:	2b00      	cmp	r3, #0
    a3fe:	dc02      	bgt.n	a406 <_dtoa_r+0x912>
    a400:	9b22      	ldr	r3, [sp, #136]	; 0x88
    a402:	2b02      	cmp	r3, #2
    a404:	dc6d      	bgt.n	a4e2 <_dtoa_r+0x9ee>
    a406:	2c00      	cmp	r4, #0
    a408:	dd05      	ble.n	a416 <_dtoa_r+0x922>
    a40a:	0031      	movs	r1, r6
    a40c:	0022      	movs	r2, r4
    a40e:	9804      	ldr	r0, [sp, #16]
    a410:	f000 fb32 	bl	aa78 <__lshift>
    a414:	0006      	movs	r6, r0
    a416:	0030      	movs	r0, r6
    a418:	2d00      	cmp	r5, #0
    a41a:	d011      	beq.n	a440 <_dtoa_r+0x94c>
    a41c:	6871      	ldr	r1, [r6, #4]
    a41e:	9804      	ldr	r0, [sp, #16]
    a420:	f000 f969 	bl	a6f6 <_Balloc>
    a424:	0031      	movs	r1, r6
    a426:	0004      	movs	r4, r0
    a428:	6933      	ldr	r3, [r6, #16]
    a42a:	310c      	adds	r1, #12
    a42c:	1c9a      	adds	r2, r3, #2
    a42e:	0092      	lsls	r2, r2, #2
    a430:	300c      	adds	r0, #12
    a432:	f7fe fcac 	bl	8d8e <memcpy>
    a436:	2201      	movs	r2, #1
    a438:	0021      	movs	r1, r4
    a43a:	9804      	ldr	r0, [sp, #16]
    a43c:	f000 fb1c 	bl	aa78 <__lshift>
    a440:	9f0d      	ldr	r7, [sp, #52]	; 0x34
    a442:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    a444:	3f01      	subs	r7, #1
    a446:	930b      	str	r3, [sp, #44]	; 0x2c
    a448:	19db      	adds	r3, r3, r7
    a44a:	0037      	movs	r7, r6
    a44c:	0006      	movs	r6, r0
    a44e:	930f      	str	r3, [sp, #60]	; 0x3c
    a450:	9908      	ldr	r1, [sp, #32]
    a452:	9805      	ldr	r0, [sp, #20]
    a454:	f7ff faca 	bl	99ec <quorem>
    a458:	0039      	movs	r1, r7
    a45a:	900d      	str	r0, [sp, #52]	; 0x34
    a45c:	0004      	movs	r4, r0
    a45e:	9805      	ldr	r0, [sp, #20]
    a460:	f000 fb5b 	bl	ab1a <__mcmp>
    a464:	0032      	movs	r2, r6
    a466:	900e      	str	r0, [sp, #56]	; 0x38
    a468:	9908      	ldr	r1, [sp, #32]
    a46a:	9804      	ldr	r0, [sp, #16]
    a46c:	f000 fb6e 	bl	ab4c <__mdiff>
    a470:	2301      	movs	r3, #1
    a472:	930c      	str	r3, [sp, #48]	; 0x30
    a474:	68c3      	ldr	r3, [r0, #12]
    a476:	3430      	adds	r4, #48	; 0x30
    a478:	0005      	movs	r5, r0
    a47a:	2b00      	cmp	r3, #0
    a47c:	d104      	bne.n	a488 <_dtoa_r+0x994>
    a47e:	0001      	movs	r1, r0
    a480:	9805      	ldr	r0, [sp, #20]
    a482:	f000 fb4a 	bl	ab1a <__mcmp>
    a486:	900c      	str	r0, [sp, #48]	; 0x30
    a488:	0029      	movs	r1, r5
    a48a:	9804      	ldr	r0, [sp, #16]
    a48c:	f000 f96b 	bl	a766 <_Bfree>
    a490:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    a492:	9a22      	ldr	r2, [sp, #136]	; 0x88
    a494:	4313      	orrs	r3, r2
    a496:	d000      	beq.n	a49a <_dtoa_r+0x9a6>
    a498:	e089      	b.n	a5ae <_dtoa_r+0xaba>
    a49a:	9a06      	ldr	r2, [sp, #24]
    a49c:	3301      	adds	r3, #1
    a49e:	4213      	tst	r3, r2
    a4a0:	d000      	beq.n	a4a4 <_dtoa_r+0x9b0>
    a4a2:	e084      	b.n	a5ae <_dtoa_r+0xaba>
    a4a4:	2c39      	cmp	r4, #57	; 0x39
    a4a6:	d100      	bne.n	a4aa <_dtoa_r+0x9b6>
    a4a8:	e0a3      	b.n	a5f2 <_dtoa_r+0xafe>
    a4aa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    a4ac:	2b00      	cmp	r3, #0
    a4ae:	dd01      	ble.n	a4b4 <_dtoa_r+0x9c0>
    a4b0:	9c0d      	ldr	r4, [sp, #52]	; 0x34
    a4b2:	3431      	adds	r4, #49	; 0x31
    a4b4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    a4b6:	1c5d      	adds	r5, r3, #1
    a4b8:	701c      	strb	r4, [r3, #0]
    a4ba:	e027      	b.n	a50c <_dtoa_r+0xa18>
    a4bc:	2b04      	cmp	r3, #4
    a4be:	d100      	bne.n	a4c2 <_dtoa_r+0x9ce>
    a4c0:	e769      	b.n	a396 <_dtoa_r+0x8a2>
    a4c2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    a4c4:	331c      	adds	r3, #28
    a4c6:	18d2      	adds	r2, r2, r3
    a4c8:	920b      	str	r2, [sp, #44]	; 0x2c
    a4ca:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    a4cc:	18e4      	adds	r4, r4, r3
    a4ce:	18d3      	adds	r3, r2, r3
    a4d0:	e760      	b.n	a394 <_dtoa_r+0x8a0>
    a4d2:	0003      	movs	r3, r0
    a4d4:	e7f5      	b.n	a4c2 <_dtoa_r+0x9ce>
    a4d6:	2f00      	cmp	r7, #0
    a4d8:	dc3c      	bgt.n	a554 <_dtoa_r+0xa60>
    a4da:	9b22      	ldr	r3, [sp, #136]	; 0x88
    a4dc:	2b02      	cmp	r3, #2
    a4de:	dd39      	ble.n	a554 <_dtoa_r+0xa60>
    a4e0:	970d      	str	r7, [sp, #52]	; 0x34
    a4e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    a4e4:	2b00      	cmp	r3, #0
    a4e6:	d10c      	bne.n	a502 <_dtoa_r+0xa0e>
    a4e8:	9908      	ldr	r1, [sp, #32]
    a4ea:	2205      	movs	r2, #5
    a4ec:	9804      	ldr	r0, [sp, #16]
    a4ee:	f000 f953 	bl	a798 <__multadd>
    a4f2:	9008      	str	r0, [sp, #32]
    a4f4:	0001      	movs	r1, r0
    a4f6:	9805      	ldr	r0, [sp, #20]
    a4f8:	f000 fb0f 	bl	ab1a <__mcmp>
    a4fc:	2800      	cmp	r0, #0
    a4fe:	dd00      	ble.n	a502 <_dtoa_r+0xa0e>
    a500:	e55a      	b.n	9fb8 <_dtoa_r+0x4c4>
    a502:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    a504:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    a506:	43db      	mvns	r3, r3
    a508:	9303      	str	r3, [sp, #12]
    a50a:	2700      	movs	r7, #0
    a50c:	9908      	ldr	r1, [sp, #32]
    a50e:	9804      	ldr	r0, [sp, #16]
    a510:	f000 f929 	bl	a766 <_Bfree>
    a514:	2e00      	cmp	r6, #0
    a516:	d100      	bne.n	a51a <_dtoa_r+0xa26>
    a518:	e63f      	b.n	a19a <_dtoa_r+0x6a6>
    a51a:	2f00      	cmp	r7, #0
    a51c:	d005      	beq.n	a52a <_dtoa_r+0xa36>
    a51e:	42b7      	cmp	r7, r6
    a520:	d003      	beq.n	a52a <_dtoa_r+0xa36>
    a522:	0039      	movs	r1, r7
    a524:	9804      	ldr	r0, [sp, #16]
    a526:	f000 f91e 	bl	a766 <_Bfree>
    a52a:	0031      	movs	r1, r6
    a52c:	9804      	ldr	r0, [sp, #16]
    a52e:	f000 f91a 	bl	a766 <_Bfree>
    a532:	e632      	b.n	a19a <_dtoa_r+0x6a6>
    a534:	9508      	str	r5, [sp, #32]
    a536:	002e      	movs	r6, r5
    a538:	e7e3      	b.n	a502 <_dtoa_r+0xa0e>
    a53a:	2300      	movs	r3, #0
    a53c:	9308      	str	r3, [sp, #32]
    a53e:	001e      	movs	r6, r3
    a540:	e7df      	b.n	a502 <_dtoa_r+0xa0e>
    a542:	46c0      	nop			; (mov r8, r8)
    a544:	40240000 	.word	0x40240000
    a548:	00000433 	.word	0x00000433
    a54c:	9603      	str	r6, [sp, #12]
    a54e:	9508      	str	r5, [sp, #32]
    a550:	002e      	movs	r6, r5
    a552:	e531      	b.n	9fb8 <_dtoa_r+0x4c4>
    a554:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    a556:	970d      	str	r7, [sp, #52]	; 0x34
    a558:	2b00      	cmp	r3, #0
    a55a:	d000      	beq.n	a55e <_dtoa_r+0xa6a>
    a55c:	e753      	b.n	a406 <_dtoa_r+0x912>
    a55e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    a560:	9908      	ldr	r1, [sp, #32]
    a562:	9805      	ldr	r0, [sp, #20]
    a564:	f7ff fa42 	bl	99ec <quorem>
    a568:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    a56a:	3030      	adds	r0, #48	; 0x30
    a56c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    a56e:	7028      	strb	r0, [r5, #0]
    a570:	3501      	adds	r5, #1
    a572:	0004      	movs	r4, r0
    a574:	1aeb      	subs	r3, r5, r3
    a576:	429a      	cmp	r2, r3
    a578:	dc78      	bgt.n	a66c <_dtoa_r+0xb78>
    a57a:	1e15      	subs	r5, r2, #0
    a57c:	dc00      	bgt.n	a580 <_dtoa_r+0xa8c>
    a57e:	2501      	movs	r5, #1
    a580:	2700      	movs	r7, #0
    a582:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    a584:	195d      	adds	r5, r3, r5
    a586:	9905      	ldr	r1, [sp, #20]
    a588:	2201      	movs	r2, #1
    a58a:	9804      	ldr	r0, [sp, #16]
    a58c:	f000 fa74 	bl	aa78 <__lshift>
    a590:	9908      	ldr	r1, [sp, #32]
    a592:	9005      	str	r0, [sp, #20]
    a594:	f000 fac1 	bl	ab1a <__mcmp>
    a598:	2800      	cmp	r0, #0
    a59a:	dc2f      	bgt.n	a5fc <_dtoa_r+0xb08>
    a59c:	d101      	bne.n	a5a2 <_dtoa_r+0xaae>
    a59e:	07e3      	lsls	r3, r4, #31
    a5a0:	d42c      	bmi.n	a5fc <_dtoa_r+0xb08>
    a5a2:	1e6b      	subs	r3, r5, #1
    a5a4:	781a      	ldrb	r2, [r3, #0]
    a5a6:	2a30      	cmp	r2, #48	; 0x30
    a5a8:	d1b0      	bne.n	a50c <_dtoa_r+0xa18>
    a5aa:	001d      	movs	r5, r3
    a5ac:	e7f9      	b.n	a5a2 <_dtoa_r+0xaae>
    a5ae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    a5b0:	2b00      	cmp	r3, #0
    a5b2:	db07      	blt.n	a5c4 <_dtoa_r+0xad0>
    a5b4:	001d      	movs	r5, r3
    a5b6:	9b22      	ldr	r3, [sp, #136]	; 0x88
    a5b8:	431d      	orrs	r5, r3
    a5ba:	d126      	bne.n	a60a <_dtoa_r+0xb16>
    a5bc:	2301      	movs	r3, #1
    a5be:	9a06      	ldr	r2, [sp, #24]
    a5c0:	4213      	tst	r3, r2
    a5c2:	d122      	bne.n	a60a <_dtoa_r+0xb16>
    a5c4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    a5c6:	2b00      	cmp	r3, #0
    a5c8:	dc00      	bgt.n	a5cc <_dtoa_r+0xad8>
    a5ca:	e773      	b.n	a4b4 <_dtoa_r+0x9c0>
    a5cc:	9905      	ldr	r1, [sp, #20]
    a5ce:	2201      	movs	r2, #1
    a5d0:	9804      	ldr	r0, [sp, #16]
    a5d2:	f000 fa51 	bl	aa78 <__lshift>
    a5d6:	9908      	ldr	r1, [sp, #32]
    a5d8:	9005      	str	r0, [sp, #20]
    a5da:	f000 fa9e 	bl	ab1a <__mcmp>
    a5de:	2800      	cmp	r0, #0
    a5e0:	dc04      	bgt.n	a5ec <_dtoa_r+0xaf8>
    a5e2:	d000      	beq.n	a5e6 <_dtoa_r+0xaf2>
    a5e4:	e766      	b.n	a4b4 <_dtoa_r+0x9c0>
    a5e6:	07e3      	lsls	r3, r4, #31
    a5e8:	d400      	bmi.n	a5ec <_dtoa_r+0xaf8>
    a5ea:	e763      	b.n	a4b4 <_dtoa_r+0x9c0>
    a5ec:	2c39      	cmp	r4, #57	; 0x39
    a5ee:	d000      	beq.n	a5f2 <_dtoa_r+0xafe>
    a5f0:	e75e      	b.n	a4b0 <_dtoa_r+0x9bc>
    a5f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    a5f4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    a5f6:	1c5d      	adds	r5, r3, #1
    a5f8:	2339      	movs	r3, #57	; 0x39
    a5fa:	7013      	strb	r3, [r2, #0]
    a5fc:	1e6b      	subs	r3, r5, #1
    a5fe:	781a      	ldrb	r2, [r3, #0]
    a600:	2a39      	cmp	r2, #57	; 0x39
    a602:	d03b      	beq.n	a67c <_dtoa_r+0xb88>
    a604:	3201      	adds	r2, #1
    a606:	701a      	strb	r2, [r3, #0]
    a608:	e780      	b.n	a50c <_dtoa_r+0xa18>
    a60a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    a60c:	3301      	adds	r3, #1
    a60e:	930d      	str	r3, [sp, #52]	; 0x34
    a610:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    a612:	2b00      	cmp	r3, #0
    a614:	dd05      	ble.n	a622 <_dtoa_r+0xb2e>
    a616:	2c39      	cmp	r4, #57	; 0x39
    a618:	d0eb      	beq.n	a5f2 <_dtoa_r+0xafe>
    a61a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    a61c:	3401      	adds	r4, #1
    a61e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    a620:	e74a      	b.n	a4b8 <_dtoa_r+0x9c4>
    a622:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    a624:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    a626:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    a628:	701c      	strb	r4, [r3, #0]
    a62a:	4293      	cmp	r3, r2
    a62c:	d0ab      	beq.n	a586 <_dtoa_r+0xa92>
    a62e:	2300      	movs	r3, #0
    a630:	220a      	movs	r2, #10
    a632:	9905      	ldr	r1, [sp, #20]
    a634:	9804      	ldr	r0, [sp, #16]
    a636:	f000 f8af 	bl	a798 <__multadd>
    a63a:	2300      	movs	r3, #0
    a63c:	9005      	str	r0, [sp, #20]
    a63e:	220a      	movs	r2, #10
    a640:	0039      	movs	r1, r7
    a642:	9804      	ldr	r0, [sp, #16]
    a644:	42b7      	cmp	r7, r6
    a646:	d106      	bne.n	a656 <_dtoa_r+0xb62>
    a648:	f000 f8a6 	bl	a798 <__multadd>
    a64c:	0007      	movs	r7, r0
    a64e:	0006      	movs	r6, r0
    a650:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    a652:	930b      	str	r3, [sp, #44]	; 0x2c
    a654:	e6fc      	b.n	a450 <_dtoa_r+0x95c>
    a656:	f000 f89f 	bl	a798 <__multadd>
    a65a:	0031      	movs	r1, r6
    a65c:	0007      	movs	r7, r0
    a65e:	2300      	movs	r3, #0
    a660:	220a      	movs	r2, #10
    a662:	9804      	ldr	r0, [sp, #16]
    a664:	f000 f898 	bl	a798 <__multadd>
    a668:	0006      	movs	r6, r0
    a66a:	e7f1      	b.n	a650 <_dtoa_r+0xb5c>
    a66c:	2300      	movs	r3, #0
    a66e:	220a      	movs	r2, #10
    a670:	9905      	ldr	r1, [sp, #20]
    a672:	9804      	ldr	r0, [sp, #16]
    a674:	f000 f890 	bl	a798 <__multadd>
    a678:	9005      	str	r0, [sp, #20]
    a67a:	e771      	b.n	a560 <_dtoa_r+0xa6c>
    a67c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    a67e:	429a      	cmp	r2, r3
    a680:	d105      	bne.n	a68e <_dtoa_r+0xb9a>
    a682:	9b03      	ldr	r3, [sp, #12]
    a684:	3301      	adds	r3, #1
    a686:	9303      	str	r3, [sp, #12]
    a688:	2331      	movs	r3, #49	; 0x31
    a68a:	7013      	strb	r3, [r2, #0]
    a68c:	e73e      	b.n	a50c <_dtoa_r+0xa18>
    a68e:	001d      	movs	r5, r3
    a690:	e7b4      	b.n	a5fc <_dtoa_r+0xb08>
    a692:	4b0a      	ldr	r3, [pc, #40]	; (a6bc <_dtoa_r+0xbc8>)
    a694:	9a26      	ldr	r2, [sp, #152]	; 0x98
    a696:	930a      	str	r3, [sp, #40]	; 0x28
    a698:	4b09      	ldr	r3, [pc, #36]	; (a6c0 <_dtoa_r+0xbcc>)
    a69a:	2a00      	cmp	r2, #0
    a69c:	d001      	beq.n	a6a2 <_dtoa_r+0xbae>
    a69e:	9a26      	ldr	r2, [sp, #152]	; 0x98
    a6a0:	6013      	str	r3, [r2, #0]
    a6a2:	980a      	ldr	r0, [sp, #40]	; 0x28
    a6a4:	b01d      	add	sp, #116	; 0x74
    a6a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a6a8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    a6aa:	2b00      	cmp	r3, #0
    a6ac:	dd00      	ble.n	a6b0 <_dtoa_r+0xbbc>
    a6ae:	e756      	b.n	a55e <_dtoa_r+0xa6a>
    a6b0:	9b22      	ldr	r3, [sp, #136]	; 0x88
    a6b2:	2b02      	cmp	r3, #2
    a6b4:	dc00      	bgt.n	a6b8 <_dtoa_r+0xbc4>
    a6b6:	e752      	b.n	a55e <_dtoa_r+0xa6a>
    a6b8:	e713      	b.n	a4e2 <_dtoa_r+0x9ee>
    a6ba:	46c0      	nop			; (mov r8, r8)
    a6bc:	0000b963 	.word	0x0000b963
    a6c0:	0000b96b 	.word	0x0000b96b

0000a6c4 <_localeconv_r>:
    a6c4:	4b03      	ldr	r3, [pc, #12]	; (a6d4 <_localeconv_r+0x10>)
    a6c6:	681b      	ldr	r3, [r3, #0]
    a6c8:	6a18      	ldr	r0, [r3, #32]
    a6ca:	2800      	cmp	r0, #0
    a6cc:	d100      	bne.n	a6d0 <_localeconv_r+0xc>
    a6ce:	4802      	ldr	r0, [pc, #8]	; (a6d8 <_localeconv_r+0x14>)
    a6d0:	30f0      	adds	r0, #240	; 0xf0
    a6d2:	4770      	bx	lr
    a6d4:	20000088 	.word	0x20000088
    a6d8:	200000ec 	.word	0x200000ec

0000a6dc <memchr>:
    a6dc:	b2c9      	uxtb	r1, r1
    a6de:	1882      	adds	r2, r0, r2
    a6e0:	4290      	cmp	r0, r2
    a6e2:	d101      	bne.n	a6e8 <memchr+0xc>
    a6e4:	2000      	movs	r0, #0
    a6e6:	4770      	bx	lr
    a6e8:	7803      	ldrb	r3, [r0, #0]
    a6ea:	428b      	cmp	r3, r1
    a6ec:	d0fb      	beq.n	a6e6 <memchr+0xa>
    a6ee:	3001      	adds	r0, #1
    a6f0:	e7f6      	b.n	a6e0 <memchr+0x4>

0000a6f2 <__malloc_lock>:
    a6f2:	4770      	bx	lr

0000a6f4 <__malloc_unlock>:
    a6f4:	4770      	bx	lr

0000a6f6 <_Balloc>:
    a6f6:	b570      	push	{r4, r5, r6, lr}
    a6f8:	6a46      	ldr	r6, [r0, #36]	; 0x24
    a6fa:	0004      	movs	r4, r0
    a6fc:	000d      	movs	r5, r1
    a6fe:	2e00      	cmp	r6, #0
    a700:	d107      	bne.n	a712 <_Balloc+0x1c>
    a702:	2010      	movs	r0, #16
    a704:	f7fe fb0e 	bl	8d24 <malloc>
    a708:	6260      	str	r0, [r4, #36]	; 0x24
    a70a:	6046      	str	r6, [r0, #4]
    a70c:	6086      	str	r6, [r0, #8]
    a70e:	6006      	str	r6, [r0, #0]
    a710:	60c6      	str	r6, [r0, #12]
    a712:	6a66      	ldr	r6, [r4, #36]	; 0x24
    a714:	68f3      	ldr	r3, [r6, #12]
    a716:	2b00      	cmp	r3, #0
    a718:	d013      	beq.n	a742 <_Balloc+0x4c>
    a71a:	6a63      	ldr	r3, [r4, #36]	; 0x24
    a71c:	00aa      	lsls	r2, r5, #2
    a71e:	68db      	ldr	r3, [r3, #12]
    a720:	189b      	adds	r3, r3, r2
    a722:	6818      	ldr	r0, [r3, #0]
    a724:	2800      	cmp	r0, #0
    a726:	d118      	bne.n	a75a <_Balloc+0x64>
    a728:	2101      	movs	r1, #1
    a72a:	000e      	movs	r6, r1
    a72c:	40ae      	lsls	r6, r5
    a72e:	1d72      	adds	r2, r6, #5
    a730:	0092      	lsls	r2, r2, #2
    a732:	0020      	movs	r0, r4
    a734:	f000 fac2 	bl	acbc <_calloc_r>
    a738:	2800      	cmp	r0, #0
    a73a:	d00c      	beq.n	a756 <_Balloc+0x60>
    a73c:	6045      	str	r5, [r0, #4]
    a73e:	6086      	str	r6, [r0, #8]
    a740:	e00d      	b.n	a75e <_Balloc+0x68>
    a742:	2221      	movs	r2, #33	; 0x21
    a744:	2104      	movs	r1, #4
    a746:	0020      	movs	r0, r4
    a748:	f000 fab8 	bl	acbc <_calloc_r>
    a74c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    a74e:	60f0      	str	r0, [r6, #12]
    a750:	68db      	ldr	r3, [r3, #12]
    a752:	2b00      	cmp	r3, #0
    a754:	d1e1      	bne.n	a71a <_Balloc+0x24>
    a756:	2000      	movs	r0, #0
    a758:	bd70      	pop	{r4, r5, r6, pc}
    a75a:	6802      	ldr	r2, [r0, #0]
    a75c:	601a      	str	r2, [r3, #0]
    a75e:	2300      	movs	r3, #0
    a760:	6103      	str	r3, [r0, #16]
    a762:	60c3      	str	r3, [r0, #12]
    a764:	e7f8      	b.n	a758 <_Balloc+0x62>

0000a766 <_Bfree>:
    a766:	b570      	push	{r4, r5, r6, lr}
    a768:	6a44      	ldr	r4, [r0, #36]	; 0x24
    a76a:	0006      	movs	r6, r0
    a76c:	000d      	movs	r5, r1
    a76e:	2c00      	cmp	r4, #0
    a770:	d107      	bne.n	a782 <_Bfree+0x1c>
    a772:	2010      	movs	r0, #16
    a774:	f7fe fad6 	bl	8d24 <malloc>
    a778:	6270      	str	r0, [r6, #36]	; 0x24
    a77a:	6044      	str	r4, [r0, #4]
    a77c:	6084      	str	r4, [r0, #8]
    a77e:	6004      	str	r4, [r0, #0]
    a780:	60c4      	str	r4, [r0, #12]
    a782:	2d00      	cmp	r5, #0
    a784:	d007      	beq.n	a796 <_Bfree+0x30>
    a786:	6a73      	ldr	r3, [r6, #36]	; 0x24
    a788:	686a      	ldr	r2, [r5, #4]
    a78a:	68db      	ldr	r3, [r3, #12]
    a78c:	0092      	lsls	r2, r2, #2
    a78e:	189b      	adds	r3, r3, r2
    a790:	681a      	ldr	r2, [r3, #0]
    a792:	602a      	str	r2, [r5, #0]
    a794:	601d      	str	r5, [r3, #0]
    a796:	bd70      	pop	{r4, r5, r6, pc}

0000a798 <__multadd>:
    a798:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    a79a:	001e      	movs	r6, r3
    a79c:	2314      	movs	r3, #20
    a79e:	469c      	mov	ip, r3
    a7a0:	0007      	movs	r7, r0
    a7a2:	000c      	movs	r4, r1
    a7a4:	2000      	movs	r0, #0
    a7a6:	690d      	ldr	r5, [r1, #16]
    a7a8:	448c      	add	ip, r1
    a7aa:	4663      	mov	r3, ip
    a7ac:	8819      	ldrh	r1, [r3, #0]
    a7ae:	681b      	ldr	r3, [r3, #0]
    a7b0:	4351      	muls	r1, r2
    a7b2:	0c1b      	lsrs	r3, r3, #16
    a7b4:	4353      	muls	r3, r2
    a7b6:	1989      	adds	r1, r1, r6
    a7b8:	0c0e      	lsrs	r6, r1, #16
    a7ba:	199b      	adds	r3, r3, r6
    a7bc:	b289      	uxth	r1, r1
    a7be:	0c1e      	lsrs	r6, r3, #16
    a7c0:	041b      	lsls	r3, r3, #16
    a7c2:	185b      	adds	r3, r3, r1
    a7c4:	4661      	mov	r1, ip
    a7c6:	3001      	adds	r0, #1
    a7c8:	c108      	stmia	r1!, {r3}
    a7ca:	468c      	mov	ip, r1
    a7cc:	4285      	cmp	r5, r0
    a7ce:	dcec      	bgt.n	a7aa <__multadd+0x12>
    a7d0:	2e00      	cmp	r6, #0
    a7d2:	d01b      	beq.n	a80c <__multadd+0x74>
    a7d4:	68a3      	ldr	r3, [r4, #8]
    a7d6:	429d      	cmp	r5, r3
    a7d8:	db12      	blt.n	a800 <__multadd+0x68>
    a7da:	6863      	ldr	r3, [r4, #4]
    a7dc:	0038      	movs	r0, r7
    a7de:	1c59      	adds	r1, r3, #1
    a7e0:	f7ff ff89 	bl	a6f6 <_Balloc>
    a7e4:	0021      	movs	r1, r4
    a7e6:	6923      	ldr	r3, [r4, #16]
    a7e8:	9001      	str	r0, [sp, #4]
    a7ea:	1c9a      	adds	r2, r3, #2
    a7ec:	0092      	lsls	r2, r2, #2
    a7ee:	310c      	adds	r1, #12
    a7f0:	300c      	adds	r0, #12
    a7f2:	f7fe facc 	bl	8d8e <memcpy>
    a7f6:	0021      	movs	r1, r4
    a7f8:	0038      	movs	r0, r7
    a7fa:	f7ff ffb4 	bl	a766 <_Bfree>
    a7fe:	9c01      	ldr	r4, [sp, #4]
    a800:	1d2b      	adds	r3, r5, #4
    a802:	009b      	lsls	r3, r3, #2
    a804:	18e3      	adds	r3, r4, r3
    a806:	3501      	adds	r5, #1
    a808:	605e      	str	r6, [r3, #4]
    a80a:	6125      	str	r5, [r4, #16]
    a80c:	0020      	movs	r0, r4
    a80e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

0000a810 <__hi0bits>:
    a810:	0003      	movs	r3, r0
    a812:	0c02      	lsrs	r2, r0, #16
    a814:	2000      	movs	r0, #0
    a816:	4282      	cmp	r2, r0
    a818:	d101      	bne.n	a81e <__hi0bits+0xe>
    a81a:	041b      	lsls	r3, r3, #16
    a81c:	3010      	adds	r0, #16
    a81e:	0e1a      	lsrs	r2, r3, #24
    a820:	d101      	bne.n	a826 <__hi0bits+0x16>
    a822:	3008      	adds	r0, #8
    a824:	021b      	lsls	r3, r3, #8
    a826:	0f1a      	lsrs	r2, r3, #28
    a828:	d101      	bne.n	a82e <__hi0bits+0x1e>
    a82a:	3004      	adds	r0, #4
    a82c:	011b      	lsls	r3, r3, #4
    a82e:	0f9a      	lsrs	r2, r3, #30
    a830:	d101      	bne.n	a836 <__hi0bits+0x26>
    a832:	3002      	adds	r0, #2
    a834:	009b      	lsls	r3, r3, #2
    a836:	2b00      	cmp	r3, #0
    a838:	db03      	blt.n	a842 <__hi0bits+0x32>
    a83a:	3001      	adds	r0, #1
    a83c:	005b      	lsls	r3, r3, #1
    a83e:	d400      	bmi.n	a842 <__hi0bits+0x32>
    a840:	2020      	movs	r0, #32
    a842:	4770      	bx	lr

0000a844 <__lo0bits>:
    a844:	2207      	movs	r2, #7
    a846:	6803      	ldr	r3, [r0, #0]
    a848:	b510      	push	{r4, lr}
    a84a:	0001      	movs	r1, r0
    a84c:	401a      	ands	r2, r3
    a84e:	d00d      	beq.n	a86c <__lo0bits+0x28>
    a850:	2401      	movs	r4, #1
    a852:	2000      	movs	r0, #0
    a854:	4223      	tst	r3, r4
    a856:	d105      	bne.n	a864 <__lo0bits+0x20>
    a858:	3002      	adds	r0, #2
    a85a:	4203      	tst	r3, r0
    a85c:	d003      	beq.n	a866 <__lo0bits+0x22>
    a85e:	40e3      	lsrs	r3, r4
    a860:	0020      	movs	r0, r4
    a862:	600b      	str	r3, [r1, #0]
    a864:	bd10      	pop	{r4, pc}
    a866:	089b      	lsrs	r3, r3, #2
    a868:	600b      	str	r3, [r1, #0]
    a86a:	e7fb      	b.n	a864 <__lo0bits+0x20>
    a86c:	b29c      	uxth	r4, r3
    a86e:	0010      	movs	r0, r2
    a870:	2c00      	cmp	r4, #0
    a872:	d101      	bne.n	a878 <__lo0bits+0x34>
    a874:	2010      	movs	r0, #16
    a876:	0c1b      	lsrs	r3, r3, #16
    a878:	b2da      	uxtb	r2, r3
    a87a:	2a00      	cmp	r2, #0
    a87c:	d101      	bne.n	a882 <__lo0bits+0x3e>
    a87e:	3008      	adds	r0, #8
    a880:	0a1b      	lsrs	r3, r3, #8
    a882:	071a      	lsls	r2, r3, #28
    a884:	d101      	bne.n	a88a <__lo0bits+0x46>
    a886:	3004      	adds	r0, #4
    a888:	091b      	lsrs	r3, r3, #4
    a88a:	079a      	lsls	r2, r3, #30
    a88c:	d101      	bne.n	a892 <__lo0bits+0x4e>
    a88e:	3002      	adds	r0, #2
    a890:	089b      	lsrs	r3, r3, #2
    a892:	07da      	lsls	r2, r3, #31
    a894:	d4e8      	bmi.n	a868 <__lo0bits+0x24>
    a896:	085b      	lsrs	r3, r3, #1
    a898:	d001      	beq.n	a89e <__lo0bits+0x5a>
    a89a:	3001      	adds	r0, #1
    a89c:	e7e4      	b.n	a868 <__lo0bits+0x24>
    a89e:	2020      	movs	r0, #32
    a8a0:	e7e0      	b.n	a864 <__lo0bits+0x20>

0000a8a2 <__i2b>:
    a8a2:	b510      	push	{r4, lr}
    a8a4:	000c      	movs	r4, r1
    a8a6:	2101      	movs	r1, #1
    a8a8:	f7ff ff25 	bl	a6f6 <_Balloc>
    a8ac:	2301      	movs	r3, #1
    a8ae:	6144      	str	r4, [r0, #20]
    a8b0:	6103      	str	r3, [r0, #16]
    a8b2:	bd10      	pop	{r4, pc}

0000a8b4 <__multiply>:
    a8b4:	b5f0      	push	{r4, r5, r6, r7, lr}
    a8b6:	690b      	ldr	r3, [r1, #16]
    a8b8:	0015      	movs	r5, r2
    a8ba:	6912      	ldr	r2, [r2, #16]
    a8bc:	b089      	sub	sp, #36	; 0x24
    a8be:	000c      	movs	r4, r1
    a8c0:	4293      	cmp	r3, r2
    a8c2:	da01      	bge.n	a8c8 <__multiply+0x14>
    a8c4:	002c      	movs	r4, r5
    a8c6:	000d      	movs	r5, r1
    a8c8:	6927      	ldr	r7, [r4, #16]
    a8ca:	692e      	ldr	r6, [r5, #16]
    a8cc:	68a2      	ldr	r2, [r4, #8]
    a8ce:	19bb      	adds	r3, r7, r6
    a8d0:	6861      	ldr	r1, [r4, #4]
    a8d2:	9301      	str	r3, [sp, #4]
    a8d4:	4293      	cmp	r3, r2
    a8d6:	dd00      	ble.n	a8da <__multiply+0x26>
    a8d8:	3101      	adds	r1, #1
    a8da:	f7ff ff0c 	bl	a6f6 <_Balloc>
    a8de:	0003      	movs	r3, r0
    a8e0:	3314      	adds	r3, #20
    a8e2:	9300      	str	r3, [sp, #0]
    a8e4:	9a00      	ldr	r2, [sp, #0]
    a8e6:	19bb      	adds	r3, r7, r6
    a8e8:	4694      	mov	ip, r2
    a8ea:	009b      	lsls	r3, r3, #2
    a8ec:	449c      	add	ip, r3
    a8ee:	0013      	movs	r3, r2
    a8f0:	2200      	movs	r2, #0
    a8f2:	9004      	str	r0, [sp, #16]
    a8f4:	4563      	cmp	r3, ip
    a8f6:	d31c      	bcc.n	a932 <__multiply+0x7e>
    a8f8:	002a      	movs	r2, r5
    a8fa:	3414      	adds	r4, #20
    a8fc:	00bf      	lsls	r7, r7, #2
    a8fe:	19e3      	adds	r3, r4, r7
    a900:	3214      	adds	r2, #20
    a902:	00b6      	lsls	r6, r6, #2
    a904:	9305      	str	r3, [sp, #20]
    a906:	1993      	adds	r3, r2, r6
    a908:	9402      	str	r4, [sp, #8]
    a90a:	9306      	str	r3, [sp, #24]
    a90c:	9b06      	ldr	r3, [sp, #24]
    a90e:	429a      	cmp	r2, r3
    a910:	d311      	bcc.n	a936 <__multiply+0x82>
    a912:	9b01      	ldr	r3, [sp, #4]
    a914:	2b00      	cmp	r3, #0
    a916:	dd06      	ble.n	a926 <__multiply+0x72>
    a918:	2304      	movs	r3, #4
    a91a:	425b      	negs	r3, r3
    a91c:	449c      	add	ip, r3
    a91e:	4663      	mov	r3, ip
    a920:	681b      	ldr	r3, [r3, #0]
    a922:	2b00      	cmp	r3, #0
    a924:	d051      	beq.n	a9ca <__multiply+0x116>
    a926:	9b04      	ldr	r3, [sp, #16]
    a928:	9a01      	ldr	r2, [sp, #4]
    a92a:	0018      	movs	r0, r3
    a92c:	611a      	str	r2, [r3, #16]
    a92e:	b009      	add	sp, #36	; 0x24
    a930:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a932:	c304      	stmia	r3!, {r2}
    a934:	e7de      	b.n	a8f4 <__multiply+0x40>
    a936:	8814      	ldrh	r4, [r2, #0]
    a938:	2c00      	cmp	r4, #0
    a93a:	d01e      	beq.n	a97a <__multiply+0xc6>
    a93c:	2600      	movs	r6, #0
    a93e:	9d00      	ldr	r5, [sp, #0]
    a940:	9f02      	ldr	r7, [sp, #8]
    a942:	cf01      	ldmia	r7!, {r0}
    a944:	9507      	str	r5, [sp, #28]
    a946:	cd08      	ldmia	r5!, {r3}
    a948:	9303      	str	r3, [sp, #12]
    a94a:	b283      	uxth	r3, r0
    a94c:	4363      	muls	r3, r4
    a94e:	0019      	movs	r1, r3
    a950:	466b      	mov	r3, sp
    a952:	0c00      	lsrs	r0, r0, #16
    a954:	899b      	ldrh	r3, [r3, #12]
    a956:	4360      	muls	r0, r4
    a958:	18cb      	adds	r3, r1, r3
    a95a:	9903      	ldr	r1, [sp, #12]
    a95c:	199b      	adds	r3, r3, r6
    a95e:	0c09      	lsrs	r1, r1, #16
    a960:	1841      	adds	r1, r0, r1
    a962:	0c18      	lsrs	r0, r3, #16
    a964:	1809      	adds	r1, r1, r0
    a966:	0c0e      	lsrs	r6, r1, #16
    a968:	b29b      	uxth	r3, r3
    a96a:	0409      	lsls	r1, r1, #16
    a96c:	430b      	orrs	r3, r1
    a96e:	9907      	ldr	r1, [sp, #28]
    a970:	600b      	str	r3, [r1, #0]
    a972:	9b05      	ldr	r3, [sp, #20]
    a974:	42bb      	cmp	r3, r7
    a976:	d8e4      	bhi.n	a942 <__multiply+0x8e>
    a978:	602e      	str	r6, [r5, #0]
    a97a:	6813      	ldr	r3, [r2, #0]
    a97c:	0c1b      	lsrs	r3, r3, #16
    a97e:	9303      	str	r3, [sp, #12]
    a980:	d01e      	beq.n	a9c0 <__multiply+0x10c>
    a982:	2600      	movs	r6, #0
    a984:	9b00      	ldr	r3, [sp, #0]
    a986:	9c02      	ldr	r4, [sp, #8]
    a988:	681b      	ldr	r3, [r3, #0]
    a98a:	9800      	ldr	r0, [sp, #0]
    a98c:	0007      	movs	r7, r0
    a98e:	8821      	ldrh	r1, [r4, #0]
    a990:	9d03      	ldr	r5, [sp, #12]
    a992:	b29b      	uxth	r3, r3
    a994:	4369      	muls	r1, r5
    a996:	c820      	ldmia	r0!, {r5}
    a998:	0c2d      	lsrs	r5, r5, #16
    a99a:	1949      	adds	r1, r1, r5
    a99c:	198e      	adds	r6, r1, r6
    a99e:	0431      	lsls	r1, r6, #16
    a9a0:	430b      	orrs	r3, r1
    a9a2:	603b      	str	r3, [r7, #0]
    a9a4:	cc08      	ldmia	r4!, {r3}
    a9a6:	9903      	ldr	r1, [sp, #12]
    a9a8:	0c1b      	lsrs	r3, r3, #16
    a9aa:	434b      	muls	r3, r1
    a9ac:	6879      	ldr	r1, [r7, #4]
    a9ae:	0c36      	lsrs	r6, r6, #16
    a9b0:	b289      	uxth	r1, r1
    a9b2:	185b      	adds	r3, r3, r1
    a9b4:	9905      	ldr	r1, [sp, #20]
    a9b6:	199b      	adds	r3, r3, r6
    a9b8:	0c1e      	lsrs	r6, r3, #16
    a9ba:	42a1      	cmp	r1, r4
    a9bc:	d8e6      	bhi.n	a98c <__multiply+0xd8>
    a9be:	6003      	str	r3, [r0, #0]
    a9c0:	9b00      	ldr	r3, [sp, #0]
    a9c2:	3204      	adds	r2, #4
    a9c4:	3304      	adds	r3, #4
    a9c6:	9300      	str	r3, [sp, #0]
    a9c8:	e7a0      	b.n	a90c <__multiply+0x58>
    a9ca:	9b01      	ldr	r3, [sp, #4]
    a9cc:	3b01      	subs	r3, #1
    a9ce:	9301      	str	r3, [sp, #4]
    a9d0:	e79f      	b.n	a912 <__multiply+0x5e>
	...

0000a9d4 <__pow5mult>:
    a9d4:	2303      	movs	r3, #3
    a9d6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    a9d8:	4013      	ands	r3, r2
    a9da:	0005      	movs	r5, r0
    a9dc:	000e      	movs	r6, r1
    a9de:	0014      	movs	r4, r2
    a9e0:	2b00      	cmp	r3, #0
    a9e2:	d008      	beq.n	a9f6 <__pow5mult+0x22>
    a9e4:	4922      	ldr	r1, [pc, #136]	; (aa70 <__pow5mult+0x9c>)
    a9e6:	3b01      	subs	r3, #1
    a9e8:	009a      	lsls	r2, r3, #2
    a9ea:	5852      	ldr	r2, [r2, r1]
    a9ec:	2300      	movs	r3, #0
    a9ee:	0031      	movs	r1, r6
    a9f0:	f7ff fed2 	bl	a798 <__multadd>
    a9f4:	0006      	movs	r6, r0
    a9f6:	10a3      	asrs	r3, r4, #2
    a9f8:	9301      	str	r3, [sp, #4]
    a9fa:	d036      	beq.n	aa6a <__pow5mult+0x96>
    a9fc:	6a6c      	ldr	r4, [r5, #36]	; 0x24
    a9fe:	2c00      	cmp	r4, #0
    aa00:	d107      	bne.n	aa12 <__pow5mult+0x3e>
    aa02:	2010      	movs	r0, #16
    aa04:	f7fe f98e 	bl	8d24 <malloc>
    aa08:	6268      	str	r0, [r5, #36]	; 0x24
    aa0a:	6044      	str	r4, [r0, #4]
    aa0c:	6084      	str	r4, [r0, #8]
    aa0e:	6004      	str	r4, [r0, #0]
    aa10:	60c4      	str	r4, [r0, #12]
    aa12:	6a6f      	ldr	r7, [r5, #36]	; 0x24
    aa14:	68bc      	ldr	r4, [r7, #8]
    aa16:	2c00      	cmp	r4, #0
    aa18:	d107      	bne.n	aa2a <__pow5mult+0x56>
    aa1a:	4916      	ldr	r1, [pc, #88]	; (aa74 <__pow5mult+0xa0>)
    aa1c:	0028      	movs	r0, r5
    aa1e:	f7ff ff40 	bl	a8a2 <__i2b>
    aa22:	2300      	movs	r3, #0
    aa24:	0004      	movs	r4, r0
    aa26:	60b8      	str	r0, [r7, #8]
    aa28:	6003      	str	r3, [r0, #0]
    aa2a:	2201      	movs	r2, #1
    aa2c:	9b01      	ldr	r3, [sp, #4]
    aa2e:	4213      	tst	r3, r2
    aa30:	d00a      	beq.n	aa48 <__pow5mult+0x74>
    aa32:	0031      	movs	r1, r6
    aa34:	0022      	movs	r2, r4
    aa36:	0028      	movs	r0, r5
    aa38:	f7ff ff3c 	bl	a8b4 <__multiply>
    aa3c:	0007      	movs	r7, r0
    aa3e:	0031      	movs	r1, r6
    aa40:	0028      	movs	r0, r5
    aa42:	f7ff fe90 	bl	a766 <_Bfree>
    aa46:	003e      	movs	r6, r7
    aa48:	9b01      	ldr	r3, [sp, #4]
    aa4a:	105b      	asrs	r3, r3, #1
    aa4c:	9301      	str	r3, [sp, #4]
    aa4e:	d00c      	beq.n	aa6a <__pow5mult+0x96>
    aa50:	6820      	ldr	r0, [r4, #0]
    aa52:	2800      	cmp	r0, #0
    aa54:	d107      	bne.n	aa66 <__pow5mult+0x92>
    aa56:	0022      	movs	r2, r4
    aa58:	0021      	movs	r1, r4
    aa5a:	0028      	movs	r0, r5
    aa5c:	f7ff ff2a 	bl	a8b4 <__multiply>
    aa60:	2300      	movs	r3, #0
    aa62:	6020      	str	r0, [r4, #0]
    aa64:	6003      	str	r3, [r0, #0]
    aa66:	0004      	movs	r4, r0
    aa68:	e7df      	b.n	aa2a <__pow5mult+0x56>
    aa6a:	0030      	movs	r0, r6
    aa6c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    aa6e:	46c0      	nop			; (mov r8, r8)
    aa70:	0000ba60 	.word	0x0000ba60
    aa74:	00000271 	.word	0x00000271

0000aa78 <__lshift>:
    aa78:	b5f0      	push	{r4, r5, r6, r7, lr}
    aa7a:	000d      	movs	r5, r1
    aa7c:	0017      	movs	r7, r2
    aa7e:	692b      	ldr	r3, [r5, #16]
    aa80:	1154      	asrs	r4, r2, #5
    aa82:	b085      	sub	sp, #20
    aa84:	18e3      	adds	r3, r4, r3
    aa86:	9302      	str	r3, [sp, #8]
    aa88:	3301      	adds	r3, #1
    aa8a:	9301      	str	r3, [sp, #4]
    aa8c:	6849      	ldr	r1, [r1, #4]
    aa8e:	68ab      	ldr	r3, [r5, #8]
    aa90:	9003      	str	r0, [sp, #12]
    aa92:	9a01      	ldr	r2, [sp, #4]
    aa94:	4293      	cmp	r3, r2
    aa96:	db34      	blt.n	ab02 <__lshift+0x8a>
    aa98:	9803      	ldr	r0, [sp, #12]
    aa9a:	f7ff fe2c 	bl	a6f6 <_Balloc>
    aa9e:	2300      	movs	r3, #0
    aaa0:	0002      	movs	r2, r0
    aaa2:	0006      	movs	r6, r0
    aaa4:	0019      	movs	r1, r3
    aaa6:	3214      	adds	r2, #20
    aaa8:	42a3      	cmp	r3, r4
    aaaa:	db2d      	blt.n	ab08 <__lshift+0x90>
    aaac:	43e3      	mvns	r3, r4
    aaae:	17db      	asrs	r3, r3, #31
    aab0:	401c      	ands	r4, r3
    aab2:	002b      	movs	r3, r5
    aab4:	211f      	movs	r1, #31
    aab6:	00a4      	lsls	r4, r4, #2
    aab8:	1914      	adds	r4, r2, r4
    aaba:	692a      	ldr	r2, [r5, #16]
    aabc:	3314      	adds	r3, #20
    aabe:	0092      	lsls	r2, r2, #2
    aac0:	189a      	adds	r2, r3, r2
    aac2:	400f      	ands	r7, r1
    aac4:	d024      	beq.n	ab10 <__lshift+0x98>
    aac6:	3101      	adds	r1, #1
    aac8:	1bc9      	subs	r1, r1, r7
    aaca:	468c      	mov	ip, r1
    aacc:	2100      	movs	r1, #0
    aace:	6818      	ldr	r0, [r3, #0]
    aad0:	40b8      	lsls	r0, r7
    aad2:	4301      	orrs	r1, r0
    aad4:	4660      	mov	r0, ip
    aad6:	6021      	str	r1, [r4, #0]
    aad8:	cb02      	ldmia	r3!, {r1}
    aada:	3404      	adds	r4, #4
    aadc:	40c1      	lsrs	r1, r0
    aade:	429a      	cmp	r2, r3
    aae0:	d8f5      	bhi.n	aace <__lshift+0x56>
    aae2:	6021      	str	r1, [r4, #0]
    aae4:	2900      	cmp	r1, #0
    aae6:	d002      	beq.n	aaee <__lshift+0x76>
    aae8:	9b02      	ldr	r3, [sp, #8]
    aaea:	3302      	adds	r3, #2
    aaec:	9301      	str	r3, [sp, #4]
    aaee:	9b01      	ldr	r3, [sp, #4]
    aaf0:	9803      	ldr	r0, [sp, #12]
    aaf2:	3b01      	subs	r3, #1
    aaf4:	6133      	str	r3, [r6, #16]
    aaf6:	0029      	movs	r1, r5
    aaf8:	f7ff fe35 	bl	a766 <_Bfree>
    aafc:	0030      	movs	r0, r6
    aafe:	b005      	add	sp, #20
    ab00:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ab02:	3101      	adds	r1, #1
    ab04:	005b      	lsls	r3, r3, #1
    ab06:	e7c4      	b.n	aa92 <__lshift+0x1a>
    ab08:	0098      	lsls	r0, r3, #2
    ab0a:	5011      	str	r1, [r2, r0]
    ab0c:	3301      	adds	r3, #1
    ab0e:	e7cb      	b.n	aaa8 <__lshift+0x30>
    ab10:	cb02      	ldmia	r3!, {r1}
    ab12:	c402      	stmia	r4!, {r1}
    ab14:	429a      	cmp	r2, r3
    ab16:	d8fb      	bhi.n	ab10 <__lshift+0x98>
    ab18:	e7e9      	b.n	aaee <__lshift+0x76>

0000ab1a <__mcmp>:
    ab1a:	690a      	ldr	r2, [r1, #16]
    ab1c:	6903      	ldr	r3, [r0, #16]
    ab1e:	b530      	push	{r4, r5, lr}
    ab20:	1a9b      	subs	r3, r3, r2
    ab22:	d10e      	bne.n	ab42 <__mcmp+0x28>
    ab24:	0092      	lsls	r2, r2, #2
    ab26:	3014      	adds	r0, #20
    ab28:	3114      	adds	r1, #20
    ab2a:	1884      	adds	r4, r0, r2
    ab2c:	1889      	adds	r1, r1, r2
    ab2e:	3c04      	subs	r4, #4
    ab30:	3904      	subs	r1, #4
    ab32:	6822      	ldr	r2, [r4, #0]
    ab34:	680d      	ldr	r5, [r1, #0]
    ab36:	42aa      	cmp	r2, r5
    ab38:	d005      	beq.n	ab46 <__mcmp+0x2c>
    ab3a:	42aa      	cmp	r2, r5
    ab3c:	4192      	sbcs	r2, r2
    ab3e:	2301      	movs	r3, #1
    ab40:	4313      	orrs	r3, r2
    ab42:	0018      	movs	r0, r3
    ab44:	bd30      	pop	{r4, r5, pc}
    ab46:	42a0      	cmp	r0, r4
    ab48:	d3f1      	bcc.n	ab2e <__mcmp+0x14>
    ab4a:	e7fa      	b.n	ab42 <__mcmp+0x28>

0000ab4c <__mdiff>:
    ab4c:	b5f0      	push	{r4, r5, r6, r7, lr}
    ab4e:	000d      	movs	r5, r1
    ab50:	b085      	sub	sp, #20
    ab52:	0007      	movs	r7, r0
    ab54:	0011      	movs	r1, r2
    ab56:	0028      	movs	r0, r5
    ab58:	0014      	movs	r4, r2
    ab5a:	f7ff ffde 	bl	ab1a <__mcmp>
    ab5e:	1e06      	subs	r6, r0, #0
    ab60:	d108      	bne.n	ab74 <__mdiff+0x28>
    ab62:	0001      	movs	r1, r0
    ab64:	0038      	movs	r0, r7
    ab66:	f7ff fdc6 	bl	a6f6 <_Balloc>
    ab6a:	2301      	movs	r3, #1
    ab6c:	6146      	str	r6, [r0, #20]
    ab6e:	6103      	str	r3, [r0, #16]
    ab70:	b005      	add	sp, #20
    ab72:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ab74:	2301      	movs	r3, #1
    ab76:	9301      	str	r3, [sp, #4]
    ab78:	2800      	cmp	r0, #0
    ab7a:	db04      	blt.n	ab86 <__mdiff+0x3a>
    ab7c:	0023      	movs	r3, r4
    ab7e:	002c      	movs	r4, r5
    ab80:	001d      	movs	r5, r3
    ab82:	2300      	movs	r3, #0
    ab84:	9301      	str	r3, [sp, #4]
    ab86:	6861      	ldr	r1, [r4, #4]
    ab88:	0038      	movs	r0, r7
    ab8a:	f7ff fdb4 	bl	a6f6 <_Balloc>
    ab8e:	002f      	movs	r7, r5
    ab90:	2200      	movs	r2, #0
    ab92:	9b01      	ldr	r3, [sp, #4]
    ab94:	6926      	ldr	r6, [r4, #16]
    ab96:	60c3      	str	r3, [r0, #12]
    ab98:	3414      	adds	r4, #20
    ab9a:	00b3      	lsls	r3, r6, #2
    ab9c:	18e3      	adds	r3, r4, r3
    ab9e:	9302      	str	r3, [sp, #8]
    aba0:	692b      	ldr	r3, [r5, #16]
    aba2:	3714      	adds	r7, #20
    aba4:	009b      	lsls	r3, r3, #2
    aba6:	18fb      	adds	r3, r7, r3
    aba8:	9303      	str	r3, [sp, #12]
    abaa:	0003      	movs	r3, r0
    abac:	4694      	mov	ip, r2
    abae:	3314      	adds	r3, #20
    abb0:	cc20      	ldmia	r4!, {r5}
    abb2:	cf04      	ldmia	r7!, {r2}
    abb4:	9201      	str	r2, [sp, #4]
    abb6:	b2aa      	uxth	r2, r5
    abb8:	4494      	add	ip, r2
    abba:	466a      	mov	r2, sp
    abbc:	4661      	mov	r1, ip
    abbe:	8892      	ldrh	r2, [r2, #4]
    abc0:	0c2d      	lsrs	r5, r5, #16
    abc2:	1a8a      	subs	r2, r1, r2
    abc4:	9901      	ldr	r1, [sp, #4]
    abc6:	0c09      	lsrs	r1, r1, #16
    abc8:	1a69      	subs	r1, r5, r1
    abca:	1415      	asrs	r5, r2, #16
    abcc:	1949      	adds	r1, r1, r5
    abce:	140d      	asrs	r5, r1, #16
    abd0:	b292      	uxth	r2, r2
    abd2:	0409      	lsls	r1, r1, #16
    abd4:	430a      	orrs	r2, r1
    abd6:	601a      	str	r2, [r3, #0]
    abd8:	9a03      	ldr	r2, [sp, #12]
    abda:	46ac      	mov	ip, r5
    abdc:	3304      	adds	r3, #4
    abde:	42ba      	cmp	r2, r7
    abe0:	d8e6      	bhi.n	abb0 <__mdiff+0x64>
    abe2:	9902      	ldr	r1, [sp, #8]
    abe4:	001a      	movs	r2, r3
    abe6:	428c      	cmp	r4, r1
    abe8:	d305      	bcc.n	abf6 <__mdiff+0xaa>
    abea:	3a04      	subs	r2, #4
    abec:	6813      	ldr	r3, [r2, #0]
    abee:	2b00      	cmp	r3, #0
    abf0:	d00e      	beq.n	ac10 <__mdiff+0xc4>
    abf2:	6106      	str	r6, [r0, #16]
    abf4:	e7bc      	b.n	ab70 <__mdiff+0x24>
    abf6:	cc04      	ldmia	r4!, {r2}
    abf8:	b291      	uxth	r1, r2
    abfa:	4461      	add	r1, ip
    abfc:	140d      	asrs	r5, r1, #16
    abfe:	0c12      	lsrs	r2, r2, #16
    ac00:	1952      	adds	r2, r2, r5
    ac02:	1415      	asrs	r5, r2, #16
    ac04:	b289      	uxth	r1, r1
    ac06:	0412      	lsls	r2, r2, #16
    ac08:	430a      	orrs	r2, r1
    ac0a:	46ac      	mov	ip, r5
    ac0c:	c304      	stmia	r3!, {r2}
    ac0e:	e7e8      	b.n	abe2 <__mdiff+0x96>
    ac10:	3e01      	subs	r6, #1
    ac12:	e7ea      	b.n	abea <__mdiff+0x9e>

0000ac14 <__d2b>:
    ac14:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    ac16:	001d      	movs	r5, r3
    ac18:	2101      	movs	r1, #1
    ac1a:	9f08      	ldr	r7, [sp, #32]
    ac1c:	0014      	movs	r4, r2
    ac1e:	f7ff fd6a 	bl	a6f6 <_Balloc>
    ac22:	032b      	lsls	r3, r5, #12
    ac24:	006d      	lsls	r5, r5, #1
    ac26:	0006      	movs	r6, r0
    ac28:	0b1b      	lsrs	r3, r3, #12
    ac2a:	0d6d      	lsrs	r5, r5, #21
    ac2c:	d124      	bne.n	ac78 <__d2b+0x64>
    ac2e:	9301      	str	r3, [sp, #4]
    ac30:	2c00      	cmp	r4, #0
    ac32:	d027      	beq.n	ac84 <__d2b+0x70>
    ac34:	4668      	mov	r0, sp
    ac36:	9400      	str	r4, [sp, #0]
    ac38:	f7ff fe04 	bl	a844 <__lo0bits>
    ac3c:	9c00      	ldr	r4, [sp, #0]
    ac3e:	2800      	cmp	r0, #0
    ac40:	d01e      	beq.n	ac80 <__d2b+0x6c>
    ac42:	9b01      	ldr	r3, [sp, #4]
    ac44:	2120      	movs	r1, #32
    ac46:	001a      	movs	r2, r3
    ac48:	1a09      	subs	r1, r1, r0
    ac4a:	408a      	lsls	r2, r1
    ac4c:	40c3      	lsrs	r3, r0
    ac4e:	4322      	orrs	r2, r4
    ac50:	6172      	str	r2, [r6, #20]
    ac52:	9301      	str	r3, [sp, #4]
    ac54:	9c01      	ldr	r4, [sp, #4]
    ac56:	61b4      	str	r4, [r6, #24]
    ac58:	1e63      	subs	r3, r4, #1
    ac5a:	419c      	sbcs	r4, r3
    ac5c:	3401      	adds	r4, #1
    ac5e:	6134      	str	r4, [r6, #16]
    ac60:	2d00      	cmp	r5, #0
    ac62:	d018      	beq.n	ac96 <__d2b+0x82>
    ac64:	4b12      	ldr	r3, [pc, #72]	; (acb0 <__d2b+0x9c>)
    ac66:	18ed      	adds	r5, r5, r3
    ac68:	2335      	movs	r3, #53	; 0x35
    ac6a:	182d      	adds	r5, r5, r0
    ac6c:	603d      	str	r5, [r7, #0]
    ac6e:	1a18      	subs	r0, r3, r0
    ac70:	9b09      	ldr	r3, [sp, #36]	; 0x24
    ac72:	6018      	str	r0, [r3, #0]
    ac74:	0030      	movs	r0, r6
    ac76:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    ac78:	2280      	movs	r2, #128	; 0x80
    ac7a:	0352      	lsls	r2, r2, #13
    ac7c:	4313      	orrs	r3, r2
    ac7e:	e7d6      	b.n	ac2e <__d2b+0x1a>
    ac80:	6174      	str	r4, [r6, #20]
    ac82:	e7e7      	b.n	ac54 <__d2b+0x40>
    ac84:	a801      	add	r0, sp, #4
    ac86:	f7ff fddd 	bl	a844 <__lo0bits>
    ac8a:	2401      	movs	r4, #1
    ac8c:	9b01      	ldr	r3, [sp, #4]
    ac8e:	6134      	str	r4, [r6, #16]
    ac90:	6173      	str	r3, [r6, #20]
    ac92:	3020      	adds	r0, #32
    ac94:	e7e4      	b.n	ac60 <__d2b+0x4c>
    ac96:	4b07      	ldr	r3, [pc, #28]	; (acb4 <__d2b+0xa0>)
    ac98:	18c0      	adds	r0, r0, r3
    ac9a:	4b07      	ldr	r3, [pc, #28]	; (acb8 <__d2b+0xa4>)
    ac9c:	6038      	str	r0, [r7, #0]
    ac9e:	18e3      	adds	r3, r4, r3
    aca0:	009b      	lsls	r3, r3, #2
    aca2:	18f3      	adds	r3, r6, r3
    aca4:	6958      	ldr	r0, [r3, #20]
    aca6:	f7ff fdb3 	bl	a810 <__hi0bits>
    acaa:	0164      	lsls	r4, r4, #5
    acac:	1a20      	subs	r0, r4, r0
    acae:	e7df      	b.n	ac70 <__d2b+0x5c>
    acb0:	fffffbcd 	.word	0xfffffbcd
    acb4:	fffffbce 	.word	0xfffffbce
    acb8:	3fffffff 	.word	0x3fffffff

0000acbc <_calloc_r>:
    acbc:	434a      	muls	r2, r1
    acbe:	b570      	push	{r4, r5, r6, lr}
    acc0:	0011      	movs	r1, r2
    acc2:	0014      	movs	r4, r2
    acc4:	f7fe f8d0 	bl	8e68 <_malloc_r>
    acc8:	1e05      	subs	r5, r0, #0
    acca:	d003      	beq.n	acd4 <_calloc_r+0x18>
    accc:	0022      	movs	r2, r4
    acce:	2100      	movs	r1, #0
    acd0:	f7fe f878 	bl	8dc4 <memset>
    acd4:	0028      	movs	r0, r5
    acd6:	bd70      	pop	{r4, r5, r6, pc}

0000acd8 <_realloc_r>:
    acd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    acda:	0007      	movs	r7, r0
    acdc:	000d      	movs	r5, r1
    acde:	0016      	movs	r6, r2
    ace0:	2900      	cmp	r1, #0
    ace2:	d105      	bne.n	acf0 <_realloc_r+0x18>
    ace4:	0011      	movs	r1, r2
    ace6:	f7fe f8bf 	bl	8e68 <_malloc_r>
    acea:	0004      	movs	r4, r0
    acec:	0020      	movs	r0, r4
    acee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    acf0:	2a00      	cmp	r2, #0
    acf2:	d103      	bne.n	acfc <_realloc_r+0x24>
    acf4:	f7fe f86e 	bl	8dd4 <_free_r>
    acf8:	0034      	movs	r4, r6
    acfa:	e7f7      	b.n	acec <_realloc_r+0x14>
    acfc:	f000 f978 	bl	aff0 <_malloc_usable_size_r>
    ad00:	002c      	movs	r4, r5
    ad02:	4286      	cmp	r6, r0
    ad04:	d9f2      	bls.n	acec <_realloc_r+0x14>
    ad06:	0031      	movs	r1, r6
    ad08:	0038      	movs	r0, r7
    ad0a:	f7fe f8ad 	bl	8e68 <_malloc_r>
    ad0e:	1e04      	subs	r4, r0, #0
    ad10:	d0ec      	beq.n	acec <_realloc_r+0x14>
    ad12:	0029      	movs	r1, r5
    ad14:	0032      	movs	r2, r6
    ad16:	f7fe f83a 	bl	8d8e <memcpy>
    ad1a:	0029      	movs	r1, r5
    ad1c:	0038      	movs	r0, r7
    ad1e:	f7fe f859 	bl	8dd4 <_free_r>
    ad22:	e7e3      	b.n	acec <_realloc_r+0x14>

0000ad24 <__ssputs_r>:
    ad24:	b5f0      	push	{r4, r5, r6, r7, lr}
    ad26:	688e      	ldr	r6, [r1, #8]
    ad28:	b085      	sub	sp, #20
    ad2a:	0007      	movs	r7, r0
    ad2c:	000c      	movs	r4, r1
    ad2e:	9203      	str	r2, [sp, #12]
    ad30:	9301      	str	r3, [sp, #4]
    ad32:	429e      	cmp	r6, r3
    ad34:	d839      	bhi.n	adaa <__ssputs_r+0x86>
    ad36:	2390      	movs	r3, #144	; 0x90
    ad38:	898a      	ldrh	r2, [r1, #12]
    ad3a:	00db      	lsls	r3, r3, #3
    ad3c:	421a      	tst	r2, r3
    ad3e:	d034      	beq.n	adaa <__ssputs_r+0x86>
    ad40:	2503      	movs	r5, #3
    ad42:	6909      	ldr	r1, [r1, #16]
    ad44:	6823      	ldr	r3, [r4, #0]
    ad46:	1a5b      	subs	r3, r3, r1
    ad48:	9302      	str	r3, [sp, #8]
    ad4a:	6963      	ldr	r3, [r4, #20]
    ad4c:	9802      	ldr	r0, [sp, #8]
    ad4e:	435d      	muls	r5, r3
    ad50:	0feb      	lsrs	r3, r5, #31
    ad52:	195d      	adds	r5, r3, r5
    ad54:	9b01      	ldr	r3, [sp, #4]
    ad56:	106d      	asrs	r5, r5, #1
    ad58:	3301      	adds	r3, #1
    ad5a:	181b      	adds	r3, r3, r0
    ad5c:	42ab      	cmp	r3, r5
    ad5e:	d900      	bls.n	ad62 <__ssputs_r+0x3e>
    ad60:	001d      	movs	r5, r3
    ad62:	0553      	lsls	r3, r2, #21
    ad64:	d532      	bpl.n	adcc <__ssputs_r+0xa8>
    ad66:	0029      	movs	r1, r5
    ad68:	0038      	movs	r0, r7
    ad6a:	f7fe f87d 	bl	8e68 <_malloc_r>
    ad6e:	1e06      	subs	r6, r0, #0
    ad70:	d109      	bne.n	ad86 <__ssputs_r+0x62>
    ad72:	230c      	movs	r3, #12
    ad74:	603b      	str	r3, [r7, #0]
    ad76:	2340      	movs	r3, #64	; 0x40
    ad78:	2001      	movs	r0, #1
    ad7a:	89a2      	ldrh	r2, [r4, #12]
    ad7c:	4240      	negs	r0, r0
    ad7e:	4313      	orrs	r3, r2
    ad80:	81a3      	strh	r3, [r4, #12]
    ad82:	b005      	add	sp, #20
    ad84:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ad86:	9a02      	ldr	r2, [sp, #8]
    ad88:	6921      	ldr	r1, [r4, #16]
    ad8a:	f7fe f800 	bl	8d8e <memcpy>
    ad8e:	89a3      	ldrh	r3, [r4, #12]
    ad90:	4a14      	ldr	r2, [pc, #80]	; (ade4 <__ssputs_r+0xc0>)
    ad92:	401a      	ands	r2, r3
    ad94:	2380      	movs	r3, #128	; 0x80
    ad96:	4313      	orrs	r3, r2
    ad98:	81a3      	strh	r3, [r4, #12]
    ad9a:	9b02      	ldr	r3, [sp, #8]
    ad9c:	6126      	str	r6, [r4, #16]
    ad9e:	18f6      	adds	r6, r6, r3
    ada0:	6026      	str	r6, [r4, #0]
    ada2:	6165      	str	r5, [r4, #20]
    ada4:	9e01      	ldr	r6, [sp, #4]
    ada6:	1aed      	subs	r5, r5, r3
    ada8:	60a5      	str	r5, [r4, #8]
    adaa:	9b01      	ldr	r3, [sp, #4]
    adac:	42b3      	cmp	r3, r6
    adae:	d200      	bcs.n	adb2 <__ssputs_r+0x8e>
    adb0:	001e      	movs	r6, r3
    adb2:	0032      	movs	r2, r6
    adb4:	9903      	ldr	r1, [sp, #12]
    adb6:	6820      	ldr	r0, [r4, #0]
    adb8:	f7fd fff2 	bl	8da0 <memmove>
    adbc:	68a3      	ldr	r3, [r4, #8]
    adbe:	2000      	movs	r0, #0
    adc0:	1b9b      	subs	r3, r3, r6
    adc2:	60a3      	str	r3, [r4, #8]
    adc4:	6823      	ldr	r3, [r4, #0]
    adc6:	199e      	adds	r6, r3, r6
    adc8:	6026      	str	r6, [r4, #0]
    adca:	e7da      	b.n	ad82 <__ssputs_r+0x5e>
    adcc:	002a      	movs	r2, r5
    adce:	0038      	movs	r0, r7
    add0:	f7ff ff82 	bl	acd8 <_realloc_r>
    add4:	1e06      	subs	r6, r0, #0
    add6:	d1e0      	bne.n	ad9a <__ssputs_r+0x76>
    add8:	6921      	ldr	r1, [r4, #16]
    adda:	0038      	movs	r0, r7
    addc:	f7fd fffa 	bl	8dd4 <_free_r>
    ade0:	e7c7      	b.n	ad72 <__ssputs_r+0x4e>
    ade2:	46c0      	nop			; (mov r8, r8)
    ade4:	fffffb7f 	.word	0xfffffb7f

0000ade8 <_svfiprintf_r>:
    ade8:	b5f0      	push	{r4, r5, r6, r7, lr}
    adea:	b09f      	sub	sp, #124	; 0x7c
    adec:	9002      	str	r0, [sp, #8]
    adee:	9305      	str	r3, [sp, #20]
    adf0:	898b      	ldrh	r3, [r1, #12]
    adf2:	000f      	movs	r7, r1
    adf4:	0016      	movs	r6, r2
    adf6:	061b      	lsls	r3, r3, #24
    adf8:	d511      	bpl.n	ae1e <_svfiprintf_r+0x36>
    adfa:	690b      	ldr	r3, [r1, #16]
    adfc:	2b00      	cmp	r3, #0
    adfe:	d10e      	bne.n	ae1e <_svfiprintf_r+0x36>
    ae00:	2140      	movs	r1, #64	; 0x40
    ae02:	f7fe f831 	bl	8e68 <_malloc_r>
    ae06:	6038      	str	r0, [r7, #0]
    ae08:	6138      	str	r0, [r7, #16]
    ae0a:	2800      	cmp	r0, #0
    ae0c:	d105      	bne.n	ae1a <_svfiprintf_r+0x32>
    ae0e:	230c      	movs	r3, #12
    ae10:	9a02      	ldr	r2, [sp, #8]
    ae12:	3801      	subs	r0, #1
    ae14:	6013      	str	r3, [r2, #0]
    ae16:	b01f      	add	sp, #124	; 0x7c
    ae18:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ae1a:	2340      	movs	r3, #64	; 0x40
    ae1c:	617b      	str	r3, [r7, #20]
    ae1e:	2300      	movs	r3, #0
    ae20:	ad06      	add	r5, sp, #24
    ae22:	616b      	str	r3, [r5, #20]
    ae24:	3320      	adds	r3, #32
    ae26:	766b      	strb	r3, [r5, #25]
    ae28:	3310      	adds	r3, #16
    ae2a:	76ab      	strb	r3, [r5, #26]
    ae2c:	0034      	movs	r4, r6
    ae2e:	7823      	ldrb	r3, [r4, #0]
    ae30:	2b00      	cmp	r3, #0
    ae32:	d147      	bne.n	aec4 <_svfiprintf_r+0xdc>
    ae34:	1ba3      	subs	r3, r4, r6
    ae36:	9304      	str	r3, [sp, #16]
    ae38:	d00d      	beq.n	ae56 <_svfiprintf_r+0x6e>
    ae3a:	1ba3      	subs	r3, r4, r6
    ae3c:	0032      	movs	r2, r6
    ae3e:	0039      	movs	r1, r7
    ae40:	9802      	ldr	r0, [sp, #8]
    ae42:	f7ff ff6f 	bl	ad24 <__ssputs_r>
    ae46:	1c43      	adds	r3, r0, #1
    ae48:	d100      	bne.n	ae4c <_svfiprintf_r+0x64>
    ae4a:	e0b5      	b.n	afb8 <_svfiprintf_r+0x1d0>
    ae4c:	696a      	ldr	r2, [r5, #20]
    ae4e:	9b04      	ldr	r3, [sp, #16]
    ae50:	4694      	mov	ip, r2
    ae52:	4463      	add	r3, ip
    ae54:	616b      	str	r3, [r5, #20]
    ae56:	7823      	ldrb	r3, [r4, #0]
    ae58:	2b00      	cmp	r3, #0
    ae5a:	d100      	bne.n	ae5e <_svfiprintf_r+0x76>
    ae5c:	e0ac      	b.n	afb8 <_svfiprintf_r+0x1d0>
    ae5e:	2201      	movs	r2, #1
    ae60:	2300      	movs	r3, #0
    ae62:	4252      	negs	r2, r2
    ae64:	606a      	str	r2, [r5, #4]
    ae66:	a902      	add	r1, sp, #8
    ae68:	3254      	adds	r2, #84	; 0x54
    ae6a:	1852      	adds	r2, r2, r1
    ae6c:	3401      	adds	r4, #1
    ae6e:	602b      	str	r3, [r5, #0]
    ae70:	60eb      	str	r3, [r5, #12]
    ae72:	60ab      	str	r3, [r5, #8]
    ae74:	7013      	strb	r3, [r2, #0]
    ae76:	65ab      	str	r3, [r5, #88]	; 0x58
    ae78:	4e58      	ldr	r6, [pc, #352]	; (afdc <_svfiprintf_r+0x1f4>)
    ae7a:	2205      	movs	r2, #5
    ae7c:	7821      	ldrb	r1, [r4, #0]
    ae7e:	0030      	movs	r0, r6
    ae80:	f7ff fc2c 	bl	a6dc <memchr>
    ae84:	1c62      	adds	r2, r4, #1
    ae86:	2800      	cmp	r0, #0
    ae88:	d120      	bne.n	aecc <_svfiprintf_r+0xe4>
    ae8a:	6829      	ldr	r1, [r5, #0]
    ae8c:	06cb      	lsls	r3, r1, #27
    ae8e:	d504      	bpl.n	ae9a <_svfiprintf_r+0xb2>
    ae90:	2353      	movs	r3, #83	; 0x53
    ae92:	ae02      	add	r6, sp, #8
    ae94:	3020      	adds	r0, #32
    ae96:	199b      	adds	r3, r3, r6
    ae98:	7018      	strb	r0, [r3, #0]
    ae9a:	070b      	lsls	r3, r1, #28
    ae9c:	d504      	bpl.n	aea8 <_svfiprintf_r+0xc0>
    ae9e:	2353      	movs	r3, #83	; 0x53
    aea0:	202b      	movs	r0, #43	; 0x2b
    aea2:	ae02      	add	r6, sp, #8
    aea4:	199b      	adds	r3, r3, r6
    aea6:	7018      	strb	r0, [r3, #0]
    aea8:	7823      	ldrb	r3, [r4, #0]
    aeaa:	2b2a      	cmp	r3, #42	; 0x2a
    aeac:	d016      	beq.n	aedc <_svfiprintf_r+0xf4>
    aeae:	2000      	movs	r0, #0
    aeb0:	210a      	movs	r1, #10
    aeb2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    aeb4:	7822      	ldrb	r2, [r4, #0]
    aeb6:	3a30      	subs	r2, #48	; 0x30
    aeb8:	2a09      	cmp	r2, #9
    aeba:	d955      	bls.n	af68 <_svfiprintf_r+0x180>
    aebc:	2800      	cmp	r0, #0
    aebe:	d015      	beq.n	aeec <_svfiprintf_r+0x104>
    aec0:	9309      	str	r3, [sp, #36]	; 0x24
    aec2:	e013      	b.n	aeec <_svfiprintf_r+0x104>
    aec4:	2b25      	cmp	r3, #37	; 0x25
    aec6:	d0b5      	beq.n	ae34 <_svfiprintf_r+0x4c>
    aec8:	3401      	adds	r4, #1
    aeca:	e7b0      	b.n	ae2e <_svfiprintf_r+0x46>
    aecc:	2301      	movs	r3, #1
    aece:	1b80      	subs	r0, r0, r6
    aed0:	4083      	lsls	r3, r0
    aed2:	6829      	ldr	r1, [r5, #0]
    aed4:	0014      	movs	r4, r2
    aed6:	430b      	orrs	r3, r1
    aed8:	602b      	str	r3, [r5, #0]
    aeda:	e7cd      	b.n	ae78 <_svfiprintf_r+0x90>
    aedc:	9b05      	ldr	r3, [sp, #20]
    aede:	1d18      	adds	r0, r3, #4
    aee0:	681b      	ldr	r3, [r3, #0]
    aee2:	9005      	str	r0, [sp, #20]
    aee4:	2b00      	cmp	r3, #0
    aee6:	db39      	blt.n	af5c <_svfiprintf_r+0x174>
    aee8:	9309      	str	r3, [sp, #36]	; 0x24
    aeea:	0014      	movs	r4, r2
    aeec:	7823      	ldrb	r3, [r4, #0]
    aeee:	2b2e      	cmp	r3, #46	; 0x2e
    aef0:	d10b      	bne.n	af0a <_svfiprintf_r+0x122>
    aef2:	7863      	ldrb	r3, [r4, #1]
    aef4:	1c62      	adds	r2, r4, #1
    aef6:	2b2a      	cmp	r3, #42	; 0x2a
    aef8:	d13e      	bne.n	af78 <_svfiprintf_r+0x190>
    aefa:	9b05      	ldr	r3, [sp, #20]
    aefc:	3402      	adds	r4, #2
    aefe:	1d1a      	adds	r2, r3, #4
    af00:	681b      	ldr	r3, [r3, #0]
    af02:	9205      	str	r2, [sp, #20]
    af04:	2b00      	cmp	r3, #0
    af06:	db34      	blt.n	af72 <_svfiprintf_r+0x18a>
    af08:	9307      	str	r3, [sp, #28]
    af0a:	4e35      	ldr	r6, [pc, #212]	; (afe0 <_svfiprintf_r+0x1f8>)
    af0c:	7821      	ldrb	r1, [r4, #0]
    af0e:	2203      	movs	r2, #3
    af10:	0030      	movs	r0, r6
    af12:	f7ff fbe3 	bl	a6dc <memchr>
    af16:	2800      	cmp	r0, #0
    af18:	d006      	beq.n	af28 <_svfiprintf_r+0x140>
    af1a:	2340      	movs	r3, #64	; 0x40
    af1c:	1b80      	subs	r0, r0, r6
    af1e:	4083      	lsls	r3, r0
    af20:	682a      	ldr	r2, [r5, #0]
    af22:	3401      	adds	r4, #1
    af24:	4313      	orrs	r3, r2
    af26:	602b      	str	r3, [r5, #0]
    af28:	7821      	ldrb	r1, [r4, #0]
    af2a:	2206      	movs	r2, #6
    af2c:	482d      	ldr	r0, [pc, #180]	; (afe4 <_svfiprintf_r+0x1fc>)
    af2e:	1c66      	adds	r6, r4, #1
    af30:	7629      	strb	r1, [r5, #24]
    af32:	f7ff fbd3 	bl	a6dc <memchr>
    af36:	2800      	cmp	r0, #0
    af38:	d046      	beq.n	afc8 <_svfiprintf_r+0x1e0>
    af3a:	4b2b      	ldr	r3, [pc, #172]	; (afe8 <_svfiprintf_r+0x200>)
    af3c:	2b00      	cmp	r3, #0
    af3e:	d12f      	bne.n	afa0 <_svfiprintf_r+0x1b8>
    af40:	6829      	ldr	r1, [r5, #0]
    af42:	9b05      	ldr	r3, [sp, #20]
    af44:	2207      	movs	r2, #7
    af46:	05c9      	lsls	r1, r1, #23
    af48:	d528      	bpl.n	af9c <_svfiprintf_r+0x1b4>
    af4a:	189b      	adds	r3, r3, r2
    af4c:	4393      	bics	r3, r2
    af4e:	3308      	adds	r3, #8
    af50:	9305      	str	r3, [sp, #20]
    af52:	696b      	ldr	r3, [r5, #20]
    af54:	9a03      	ldr	r2, [sp, #12]
    af56:	189b      	adds	r3, r3, r2
    af58:	616b      	str	r3, [r5, #20]
    af5a:	e767      	b.n	ae2c <_svfiprintf_r+0x44>
    af5c:	425b      	negs	r3, r3
    af5e:	60eb      	str	r3, [r5, #12]
    af60:	2302      	movs	r3, #2
    af62:	430b      	orrs	r3, r1
    af64:	602b      	str	r3, [r5, #0]
    af66:	e7c0      	b.n	aeea <_svfiprintf_r+0x102>
    af68:	434b      	muls	r3, r1
    af6a:	3401      	adds	r4, #1
    af6c:	189b      	adds	r3, r3, r2
    af6e:	2001      	movs	r0, #1
    af70:	e7a0      	b.n	aeb4 <_svfiprintf_r+0xcc>
    af72:	2301      	movs	r3, #1
    af74:	425b      	negs	r3, r3
    af76:	e7c7      	b.n	af08 <_svfiprintf_r+0x120>
    af78:	2300      	movs	r3, #0
    af7a:	0014      	movs	r4, r2
    af7c:	200a      	movs	r0, #10
    af7e:	001a      	movs	r2, r3
    af80:	606b      	str	r3, [r5, #4]
    af82:	7821      	ldrb	r1, [r4, #0]
    af84:	3930      	subs	r1, #48	; 0x30
    af86:	2909      	cmp	r1, #9
    af88:	d903      	bls.n	af92 <_svfiprintf_r+0x1aa>
    af8a:	2b00      	cmp	r3, #0
    af8c:	d0bd      	beq.n	af0a <_svfiprintf_r+0x122>
    af8e:	9207      	str	r2, [sp, #28]
    af90:	e7bb      	b.n	af0a <_svfiprintf_r+0x122>
    af92:	4342      	muls	r2, r0
    af94:	3401      	adds	r4, #1
    af96:	1852      	adds	r2, r2, r1
    af98:	2301      	movs	r3, #1
    af9a:	e7f2      	b.n	af82 <_svfiprintf_r+0x19a>
    af9c:	3307      	adds	r3, #7
    af9e:	e7d5      	b.n	af4c <_svfiprintf_r+0x164>
    afa0:	ab05      	add	r3, sp, #20
    afa2:	9300      	str	r3, [sp, #0]
    afa4:	003a      	movs	r2, r7
    afa6:	4b11      	ldr	r3, [pc, #68]	; (afec <_svfiprintf_r+0x204>)
    afa8:	0029      	movs	r1, r5
    afaa:	9802      	ldr	r0, [sp, #8]
    afac:	f7fe f856 	bl	905c <_printf_float>
    afb0:	9003      	str	r0, [sp, #12]
    afb2:	9b03      	ldr	r3, [sp, #12]
    afb4:	3301      	adds	r3, #1
    afb6:	d1cc      	bne.n	af52 <_svfiprintf_r+0x16a>
    afb8:	89bb      	ldrh	r3, [r7, #12]
    afba:	980b      	ldr	r0, [sp, #44]	; 0x2c
    afbc:	065b      	lsls	r3, r3, #25
    afbe:	d400      	bmi.n	afc2 <_svfiprintf_r+0x1da>
    afc0:	e729      	b.n	ae16 <_svfiprintf_r+0x2e>
    afc2:	2001      	movs	r0, #1
    afc4:	4240      	negs	r0, r0
    afc6:	e726      	b.n	ae16 <_svfiprintf_r+0x2e>
    afc8:	ab05      	add	r3, sp, #20
    afca:	9300      	str	r3, [sp, #0]
    afcc:	003a      	movs	r2, r7
    afce:	4b07      	ldr	r3, [pc, #28]	; (afec <_svfiprintf_r+0x204>)
    afd0:	0029      	movs	r1, r5
    afd2:	9802      	ldr	r0, [sp, #8]
    afd4:	f7fe fafc 	bl	95d0 <_printf_i>
    afd8:	e7ea      	b.n	afb0 <_svfiprintf_r+0x1c8>
    afda:	46c0      	nop			; (mov r8, r8)
    afdc:	0000ba6c 	.word	0x0000ba6c
    afe0:	0000ba72 	.word	0x0000ba72
    afe4:	0000ba76 	.word	0x0000ba76
    afe8:	0000905d 	.word	0x0000905d
    afec:	0000ad25 	.word	0x0000ad25

0000aff0 <_malloc_usable_size_r>:
    aff0:	1f0b      	subs	r3, r1, #4
    aff2:	681b      	ldr	r3, [r3, #0]
    aff4:	1f18      	subs	r0, r3, #4
    aff6:	2b00      	cmp	r3, #0
    aff8:	da01      	bge.n	affe <_malloc_usable_size_r+0xe>
    affa:	580b      	ldr	r3, [r1, r0]
    affc:	18c0      	adds	r0, r0, r3
    affe:	4770      	bx	lr

0000b000 <__aeabi_i2d>:
    b000:	b570      	push	{r4, r5, r6, lr}
    b002:	2800      	cmp	r0, #0
    b004:	d030      	beq.n	b068 <__aeabi_i2d+0x68>
    b006:	17c3      	asrs	r3, r0, #31
    b008:	18c4      	adds	r4, r0, r3
    b00a:	405c      	eors	r4, r3
    b00c:	0fc5      	lsrs	r5, r0, #31
    b00e:	0020      	movs	r0, r4
    b010:	f7fd fe34 	bl	8c7c <__clzsi2>
    b014:	4b17      	ldr	r3, [pc, #92]	; (b074 <__aeabi_i2d+0x74>)
    b016:	4a18      	ldr	r2, [pc, #96]	; (b078 <__aeabi_i2d+0x78>)
    b018:	1a1b      	subs	r3, r3, r0
    b01a:	1ad2      	subs	r2, r2, r3
    b01c:	2a1f      	cmp	r2, #31
    b01e:	dd18      	ble.n	b052 <__aeabi_i2d+0x52>
    b020:	4a16      	ldr	r2, [pc, #88]	; (b07c <__aeabi_i2d+0x7c>)
    b022:	1ad2      	subs	r2, r2, r3
    b024:	4094      	lsls	r4, r2
    b026:	2200      	movs	r2, #0
    b028:	0324      	lsls	r4, r4, #12
    b02a:	055b      	lsls	r3, r3, #21
    b02c:	0b24      	lsrs	r4, r4, #12
    b02e:	0d5b      	lsrs	r3, r3, #21
    b030:	2100      	movs	r1, #0
    b032:	0010      	movs	r0, r2
    b034:	0324      	lsls	r4, r4, #12
    b036:	0d0a      	lsrs	r2, r1, #20
    b038:	0b24      	lsrs	r4, r4, #12
    b03a:	0512      	lsls	r2, r2, #20
    b03c:	4322      	orrs	r2, r4
    b03e:	4c10      	ldr	r4, [pc, #64]	; (b080 <__aeabi_i2d+0x80>)
    b040:	051b      	lsls	r3, r3, #20
    b042:	4022      	ands	r2, r4
    b044:	4313      	orrs	r3, r2
    b046:	005b      	lsls	r3, r3, #1
    b048:	07ed      	lsls	r5, r5, #31
    b04a:	085b      	lsrs	r3, r3, #1
    b04c:	432b      	orrs	r3, r5
    b04e:	0019      	movs	r1, r3
    b050:	bd70      	pop	{r4, r5, r6, pc}
    b052:	0021      	movs	r1, r4
    b054:	4091      	lsls	r1, r2
    b056:	000a      	movs	r2, r1
    b058:	210b      	movs	r1, #11
    b05a:	1a08      	subs	r0, r1, r0
    b05c:	40c4      	lsrs	r4, r0
    b05e:	055b      	lsls	r3, r3, #21
    b060:	0324      	lsls	r4, r4, #12
    b062:	0b24      	lsrs	r4, r4, #12
    b064:	0d5b      	lsrs	r3, r3, #21
    b066:	e7e3      	b.n	b030 <__aeabi_i2d+0x30>
    b068:	2500      	movs	r5, #0
    b06a:	2300      	movs	r3, #0
    b06c:	2400      	movs	r4, #0
    b06e:	2200      	movs	r2, #0
    b070:	e7de      	b.n	b030 <__aeabi_i2d+0x30>
    b072:	46c0      	nop			; (mov r8, r8)
    b074:	0000041e 	.word	0x0000041e
    b078:	00000433 	.word	0x00000433
    b07c:	00000413 	.word	0x00000413
    b080:	800fffff 	.word	0x800fffff

0000b084 <_sbrk>:
    b084:	4a04      	ldr	r2, [pc, #16]	; (b098 <_sbrk+0x14>)
    b086:	6813      	ldr	r3, [r2, #0]
    b088:	2b00      	cmp	r3, #0
    b08a:	d003      	beq.n	b094 <_sbrk+0x10>
    b08c:	1818      	adds	r0, r3, r0
    b08e:	6010      	str	r0, [r2, #0]
    b090:	0018      	movs	r0, r3
    b092:	4770      	bx	lr
    b094:	4b01      	ldr	r3, [pc, #4]	; (b09c <_sbrk+0x18>)
    b096:	e7f9      	b.n	b08c <_sbrk+0x8>
    b098:	20001040 	.word	0x20001040
    b09c:	20001048 	.word	0x20001048

0000b0a0 <_init>:
    b0a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b0a2:	46c0      	nop			; (mov r8, r8)
    b0a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
    b0a6:	bc08      	pop	{r3}
    b0a8:	469e      	mov	lr, r3
    b0aa:	4770      	bx	lr

0000b0ac <_fini>:
    b0ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b0ae:	46c0      	nop			; (mov r8, r8)
    b0b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
    b0b2:	bc08      	pop	{r3}
    b0b4:	469e      	mov	lr, r3
    b0b6:	4770      	bx	lr

0000b0b8 <_ZTV12BLEAttribute>:
	...
    b0c0:	2115 0000 211b 0000 2117 0000               .!...!...!..

0000b0cc <_ZTV17BLECharacteristic>:
	...
    b0d4:	2179 0000 21a5 0000 3025 7832 253a 3230     y!...!..%02x:%02
    b0e4:	3a78 3025 7832 253a 3230 3a78 3025 7832     x:%02x:%02x:%02x
    b0f4:	253a 3230 0078 0000                         :%02x...

0000b0fc <_ZTV9BLEDevice>:
	...
    b104:	2247 0000 2249 0000 2255 0000 2265 0000     G"..I"..U"..e"..
    b114:	2339 0000 2275 0000 2299 0000 22cd 0000     9#..u"..."..."..
    b124:	22e9 0000 2319 0000 2365 0000               ."...#..e#..

0000b130 <_ZTV10BLEService>:
	...
    b138:	23c9 0000 23f5 0000                         .#...#..

0000b140 <_ZTV22BLETypedCharacteristicIhE>:
	...
    b148:	2475 0000 2489 0000                         u$...$..

0000b150 <_ZTV21BLEByteCharacteristic>:
	...
    b158:	249d 0000 24b1 0000 3932 3230 0000 0000     .$...$..2902....

0000b168 <_ZTV22BLELocalCharacteristic>:
	...
    b170:	2781 0000 27e5 0000 2589 0000               .'...'...%..

0000b17c <_ZTV18BLELocalDescriptor>:
	...
    b184:	290d 0000 2925 0000 2905 0000               .)..%)...)..

0000b190 <_ZTV14BLELocalDevice>:
	...
    b198:	2989 0000 29a1 0000 2255 0000 2265 0000     .)...)..U"..e"..
    b1a8:	29b5 0000 29cd 0000 29dd 0000 2b89 0000     .)...)...)...+..
    b1b8:	2971 0000 2975 0000 297f 0000               q)..u)...)..

0000b1c4 <_ZTV15BLELocalService>:
	...
    b1cc:	2c7d 0000 2cd9 0000 2bb9 0000               },...,...+..

0000b1d8 <_ZTV8ATTClass>:
	...
    b1e0:	2ced 0000 2d09 0000                         .,...-..

0000b1e8 <_ZTV8GAPClass>:
	...
    b1f0:	3d39 0000 3d3b 0000 7241 7564 6e69 006f     9=..;=..Arduino.
    b200:	3831 3030 3200 3061 0030 6132 3130 3100     1800.2a00.2a01.1
    b210:	3038 0031 6132 3530 0000 0000               801.2a05....

0000b21c <_ZTV9GATTClass>:
	...
    b224:	41d9 0000 4221 0000 4348 2049 4341 444c     .A..!B..HCI ACLD
    b234:	5441 2041 5854 2d20 203e 4800 4943 4320     ATA TX -> .HCI C
    b244:	4d4f 414d 444e 5420 2058 3e2d 0020 4348     OMMAND TX -> .HC
    b254:	2049 4341 444c 5441 2041 5852 3c20 202d     I ACLDATA RX <- 
    b264:	4800 4943 4520 4556 544e 5220 2058 2d3c     .HCI EVENT RX <-
    b274:	0020 0000                                    ...

0000b278 <_ZTV8HCIClass>:
	...
    b280:	4233 0000 4235 0000                         3B..5B..

0000b288 <HCITransport>:
    b288:	0590 2000                                   ... 

0000b28c <_ZTV21HCIUartTransportClass>:
	...
    b294:	4907 0000 4919 0000 496f 0000 4925 0000     .I...I..oI..%I..
    b2a4:	4931 0000 493d 0000 4949 0000 4905 0000     1I..=I..II...I..
    b2b4:	4963 0000                                   cI..

0000b2b8 <_ZTV19L2CAPSignalingClass>:
	...
    b2c0:	49c9 0000 49cb 0000 3931 3142 3030 3031     .I...I..19B10010
    b2d0:	452d 4638 2d32 3335 4537 342d 3646 2d43     -E8F2-537E-4F6C-
    b2e0:	3144 3430 3637 4138 3231 3431 3100 4239     D104768A1214.19B
    b2f0:	3031 3130 2d31 3845 3246 352d 3733 2d45     10011-E8F2-537E-
    b300:	4634 4336 442d 3031 3734 3836 3141 3132     4F6C-D104768A121
    b310:	0034 3931 3142 3030 3231 452d 4638 2d32     4.19B10012-E8F2-
    b320:	3335 4537 342d 3646 2d43 3144 3430 3637     537E-4F6C-D10476
    b330:	4138 3231 3431 4c00 4445 6f20 006e 454c     8A1214.LED on.LE
    b340:	2044 666f 0066 7473 7261 6974 676e 4220     D off.starting B
    b350:	454c 6620 6961 656c 2164 4200 7475 6f74     LE failed!.Butto
    b360:	4c6e 4445 4200 756c 7465 6f6f 6874 6420     nLED.Bluetooth d
    b370:	7665 6369 2065 6361 6974 6576 202c 6177     evice active, wa
    b380:	7469 6e69 2067 6f66 2072 6f63 6e6e 6365     iting for connec
    b390:	6974 6e6f 2e73 2e2e 0d00 000a               tions.......

0000b39c <_ZTV7Serial_>:
	...
    b3a4:	517d 0000 51a9 0000 5179 0000 519d 0000     }Q...Q..yQ...Q..
    b3b4:	5191 0000 51e1 0000 51c5 0000               .Q...Q...Q..

0000b3c0 <_ZTV26DoubleBufferedEPOutHandler>:
	...
    b3c8:	566f 0000 5551 0000 54ad 0000 5315 0000     oV..QU...T...S..
    b3d8:	5329 0000                                   )S..

0000b3dc <_ZL14STRING_PRODUCT>:
    b3dc:	7241 7564 6e69 206f 4b4d 2052 6957 6946     Arduino MKR WiFi
    b3ec:	3120 3130 0030                               1010.

0000b3f2 <_ZL15STRING_LANGUAGE>:
    b3f2:	0304 0409                                   ....

0000b3f6 <_ZL19STRING_MANUFACTURER>:
    b3f6:	7241 7564 6e69 206f 4c4c 0043               Arduino LLC.

0000b402 <_ZL21USB_DeviceDescriptorB>:
    b402:	0112 0200 02ef 4001 2341 8054 0100 0201     .......@A#T.....
    b412:	0103                                        ..

0000b414 <g_APinDescription>:
    b414:	0000 0000 0016 0000 0008 0000 001c 0000     ................
    b424:	00ff 0400 0400 0006 0000 0000 0017 0000     ................
    b434:	0008 0000 001c 0000 00ff 0401 0401 0007     ................
    b444:	0000 0000 000a 0000 0008 0000 001c 0000     ................
    b454:	0012 0100 0100 00ff 0000 0000 000b 0000     ................
    b464:	0008 0000 001c 0000 0013 0101 0101 00ff     ................
    b474:	0001 0000 000a 0000 0008 0000 001c 0000     ................
    b484:	00ff 0500 0500 000a 0001 0000 000b 0000     ................
    b494:	0008 0000 001c 0000 00ff 0501 0501 000b     ................
    b4a4:	0000 0000 0014 0000 0008 0000 002c 0000     ............,...
    b4b4:	00ff 0002 0002 0004 0000 0000 0015 0000     ................
    b4c4:	0008 0000 002c 0000 00ff 0003 0003 0005     ....,...........
    b4d4:	0000 0000 0010 0000 0002 0000 001c 0000     ................
    b4e4:	00ff 0200 0200 0000 0000 0000 0011 0000     ................
    b4f4:	0002 0000 0004 0000 00ff ffff ffff 0001     ................
    b504:	0000 0000 0013 0000 0002 0000 001c 0000     ................
    b514:	00ff 0301 0301 00ff 0000 0000 0008 0000     ................
    b524:	0003 0000 0004 0000 0010 ffff ffff 0010     ................
    b534:	0000 0000 0009 0000 0003 0000 0004 0000     ................
    b544:	0011 ffff ffff 00ff 0001 0000 0017 0000     ................
    b554:	0003 0000 0004 0000 00ff ffff ffff 00ff     ................
    b564:	0001 0000 0016 0000 0003 0000 0004 0000     ................
    b574:	00ff ffff ffff 00ff 0000 0000 0002 0000     ................
    b584:	0001 0000 0006 0000 0000 ffff ffff 00ff     ................
    b594:	0001 0000 0002 0000 0001 0000 0004 0000     ................
    b5a4:	000a ffff ffff 0002 0001 0000 0003 0000     ................
    b5b4:	0001 0000 0004 0000 000b ffff ffff 0003     ................
    b5c4:	0000 0000 0004 0000 0001 0000 001c 0000     ................
    b5d4:	0004 0000 0000 00ff 0000 0000 0005 0000     ................
    b5e4:	0001 0000 001c 0000 0005 0001 0001 00ff     ................
    b5f4:	0000 0000 0006 0000 0001 0000 0004 0000     ................
    b604:	0006 ffff ffff 00ff 0000 0000 0007 0000     ................
    b614:	0001 0000 0004 0000 0007 ffff ffff 00ff     ................
    b624:	0000 0000 0018 0000 0006 0000 0000 0000     ................
    b634:	00ff ffff ffff 00ff 0000 0000 0019 0000     ................
    b644:	0006 0000 0000 0000 00ff ffff ffff 00ff     ................
    b654:	0000 0000 0012 0000 0008 0000 0004 0000     ................
    b664:	00ff ffff ffff 00ff 0000 0000 0003 0000     ................
    b674:	0008 0000 0004 0000 00ff ffff ffff 00ff     ................
    b684:	0000 0000 000c 0000 0003 0000 0000 0000     ................
    b694:	00ff ffff ffff 00ff 0000 0000 000d 0000     ................
    b6a4:	0003 0000 0000 0000 00ff ffff ffff 00ff     ................
    b6b4:	0000 0000 000e 0000 0008 0000 0000 0000     ................
    b6c4:	00ff ffff ffff 00ff 0000 0000 000f 0000     ................
    b6d4:	0003 0000 0000 0000 00ff ffff ffff 00ff     ................
    b6e4:	0000 0000 001b 0000 0008 0000 0000 0000     ................
    b6f4:	00ff ffff ffff 000f 0001 0000 0008 0000     ................
    b704:	0008 0000 0006 0000 0002 ffff ffff 00ff     ................
    b714:	0001 0000 0009 0000 0001 0000 0018 0000     ................
    b724:	0003 0401 0401 0009 0000 0000 0000 0000     ................
    b734:	0008 0000 0000 0000 00ff ffff ffff 00ff     ................
    b744:	0000 0000 0001 0000 0008 0000 0000 0000     ................
    b754:	00ff ffff ffff 00ff 0000 0000 001c 0000     ................
    b764:	0008 0000 0004 0000 00ff ffff ffff 00ff     ................

0000b774 <_ZTV4Uart>:
	...
    b77c:	6c79 0000 4e89 0000 6b9f 0000 6b5b 0000     yl...N...k..[k..
    b78c:	6b75 0000 6d2d 0000 68b5 0000 68a5 0000     uk..-m...h...h..
    b79c:	6939 0000 68cf 0000 68a1 0000 79c8 0000     9i...h...h...y..
    b7ac:	79aa 0000 7964 0000 7882 0000 7964 0000     .y..dy...x..dy..
    b7bc:	799c 0000 7964 0000 7882 0000 79aa 0000     .y..dy...x...y..
    b7cc:	79aa 0000 799c 0000 7882 0000 787a 0000     .y...y...x..zx..
    b7dc:	787a 0000 787a 0000 7be0 0000 8228 0000     zx..zx...{..(...
    b7ec:	80e8 0000 80e8 0000 80e4 0000 8200 0000     ................
    b7fc:	8200 0000 81f2 0000 80e4 0000 8200 0000     ................
    b80c:	81f2 0000 8200 0000 80e4 0000 8208 0000     ................
    b81c:	8208 0000 8208 0000 840c 0000 0043 4f50     ............C.PO
    b82c:	4953 0058 4e49 0046 6e69 0066 414e 004e     SIX.INF.inf.NAN.
    b83c:	616e 006e 3130 3332 3534 3736 3938 4241     nan.0123456789AB
    b84c:	4443 4645 3000 3231 3433 3635 3837 6139     CDEF.0123456789a
    b85c:	6362 6564 0066                              bcdef.

0000b862 <_ctype_>:
    b862:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
    b872:	2020 2020 2020 2020 2020 2020 2020 2020                     
    b882:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
    b892:	0410 0404 0404 0404 0404 1004 1010 1010     ................
    b8a2:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
    b8b2:	0101 0101 0101 0101 0101 0101 1010 1010     ................
    b8c2:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
    b8d2:	0202 0202 0202 0202 0202 0202 1010 1010     ................
    b8e2:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...
    b962:	4900 666e 6e69 7469 0079 614e 004e          .Infinity.NaN.

0000b970 <__mprec_bigtens>:
    b970:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
    b980:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
    b990:	bf3c 7f73 4fdd 7515                         <.s..O.u

0000b998 <__mprec_tens>:
    b998:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
    b9a8:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
    b9b8:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
    b9c8:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
    b9d8:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
    b9e8:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
    b9f8:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
    ba08:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
    ba18:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
    ba28:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
    ba38:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
    ba48:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
    ba58:	9db4 79d9 7843 44ea                         ...yCx.D

0000ba60 <p05.6047>:
    ba60:	0005 0000 0019 0000 007d 0000 2d23 2b30     ........}...#-0+
    ba70:	0020 6c68 004c 6665 4567 4746 0000 0000      .hlL.efgEFG....

0000ba80 <__EH_FRAME_BEGIN__>:
    ba80:	0000 0000                                   ....
